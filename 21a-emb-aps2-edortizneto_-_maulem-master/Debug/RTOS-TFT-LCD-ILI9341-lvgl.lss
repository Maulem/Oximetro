
RTOS-TFT-LCD-ILI9341-lvgl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00033f08  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00433f08  00433f08  00043f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a80  20400000  00433f10  00050000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0003a198  20400a80  00434990  00050a80  2**2
                  ALLOC
  4 .stack        00002000  2043ac18  0046eb28  00050a80  2**0
                  ALLOC
  5 .heap         00000200  2043cc18  00470b28  00050a80  2**0
                  ALLOC
  6 .ARM.attributes 0000002c  00000000  00000000  00050a80  2**0
                  CONTENTS, READONLY
  7 .comment      000000b4  00000000  00000000  00050aac  2**0
                  CONTENTS, READONLY
  8 .debug_info   000c226a  00000000  00000000  00050b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000108d6  00000000  00000000  00112dca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00053e6e  00000000  00000000  001236a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003208  00000000  00000000  0017750e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005fb8  00000000  00000000  0017a716  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000343cf  00000000  00000000  001806ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004b119  00000000  00000000  001b4a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b1409  00000000  00000000  001ffbb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a1a0  00000000  00000000  002b0fc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 cc 43 20 b5 58 42 00 b1 58 42 00 b1 58 42 00     ..C .XB..XB..XB.
  400010:	b1 58 42 00 b1 58 42 00 b1 58 42 00 00 00 00 00     .XB..XB..XB.....
	...
  40002c:	b5 18 40 00 b1 58 42 00 00 00 00 00 55 19 40 00     ..@..XB.....U.@.
  40003c:	bd 19 40 00 b1 58 42 00 b1 58 42 00 05 6c 42 00     ..@..XB..XB..lB.
  40004c:	e1 6b 42 00 b1 58 42 00 b1 58 42 00 b1 58 42 00     .kB..XB..XB..XB.
  40005c:	b1 58 42 00 b1 58 42 00 00 00 00 00 3d 54 42 00     .XB..XB.....=TB.
  40006c:	51 54 42 00 65 54 42 00 b1 58 42 00 b1 58 42 00     QTB.eTB..XB..XB.
  40007c:	b1 58 42 00 79 54 42 00 8d 54 42 00 b1 58 42 00     .XB.yTB..TB..XB.
  40008c:	b1 58 42 00 b1 58 42 00 b1 58 42 00 b1 58 42 00     .XB..XB..XB..XB.
  40009c:	55 02 40 00 b1 58 42 00 b1 58 42 00 b5 6b 42 00     U.@..XB..XB..kB.
  4000ac:	b1 58 42 00 b1 58 42 00 09 17 40 00 b1 58 42 00     .XB..XB...@..XB.
  4000bc:	b1 58 42 00 b1 58 42 00 b1 58 42 00 b1 58 42 00     .XB..XB..XB..XB.
  4000cc:	b1 58 42 00 b1 58 42 00 b1 58 42 00 b1 58 42 00     .XB..XB..XB..XB.
  4000dc:	b1 58 42 00 1d 17 40 00 b1 58 42 00 b1 58 42 00     .XB...@..XB..XB.
  4000ec:	b1 58 42 00 b1 58 42 00 b1 58 42 00 b1 58 42 00     .XB..XB..XB..XB.
  4000fc:	b1 58 42 00 b1 58 42 00 b1 58 42 00 b1 58 42 00     .XB..XB..XB..XB.
  40010c:	b1 58 42 00 b1 58 42 00 00 00 00 00 00 00 00 00     .XB..XB.........
  40011c:	00 00 00 00 b1 58 42 00 b1 58 42 00 b1 58 42 00     .....XB..XB..XB.
  40012c:	b1 58 42 00 b1 58 42 00 b1 58 42 00 b1 58 42 00     .XB..XB..XB..XB.
  40013c:	b1 58 42 00 b1 58 42 00 b1 58 42 00 b1 58 42 00     .XB..XB..XB..XB.
  40014c:	b1 58 42 00 b1 58 42 00 b1 58 42 00 b1 58 42 00     .XB..XB..XB..XB.
  40015c:	b1 58 42 00 b1 58 42 00 b1 58 42 00                 .XB..XB..XB.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400a80 	.word	0x20400a80
  400184:	00000000 	.word	0x00000000
  400188:	00433f10 	.word	0x00433f10

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00433f10 	.word	0x00433f10
  4001c8:	20400a84 	.word	0x20400a84
  4001cc:	00433f10 	.word	0x00433f10
  4001d0:	00000000 	.word	0x00000000

004001d4 <vTimerEcgCallback>:
  tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);

  tc_start(TC, TC_CHANNEL);
}

void vTimerEcgCallback( TimerHandle_t xTimer ) {
  4001d4:	b508      	push	{r3, lr}
  // delay entre ECGs de [200, 500]
  g_ecgDelayValue = rand() % (500 + 1 - 200) + 200;
  4001d6:	4b08      	ldr	r3, [pc, #32]	; (4001f8 <vTimerEcgCallback+0x24>)
  4001d8:	4798      	blx	r3
  4001da:	4a08      	ldr	r2, [pc, #32]	; (4001fc <vTimerEcgCallback+0x28>)
  4001dc:	fb82 3200 	smull	r3, r2, r2, r0
  4001e0:	17c3      	asrs	r3, r0, #31
  4001e2:	ebc3 1362 	rsb	r3, r3, r2, asr #5
  4001e6:	f240 122d 	movw	r2, #301	; 0x12d
  4001ea:	fb02 0313 	mls	r3, r2, r3, r0
  4001ee:	33c8      	adds	r3, #200	; 0xc8
  4001f0:	4a03      	ldr	r2, [pc, #12]	; (400200 <vTimerEcgCallback+0x2c>)
  4001f2:	6013      	str	r3, [r2, #0]
  4001f4:	bd08      	pop	{r3, pc}
  4001f6:	bf00      	nop
  4001f8:	004287e9 	.word	0x004287e9
  4001fc:	1b37484b 	.word	0x1b37484b
  400200:	2043a114 	.word	0x2043a114

00400204 <config_DAC>:
static void config_DAC(void) {
  400204:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400206:	201e      	movs	r0, #30
  400208:	4b0b      	ldr	r3, [pc, #44]	; (400238 <config_DAC+0x34>)
  40020a:	4798      	blx	r3
  dacc_reset(DACC_BASE);
  40020c:	4c0b      	ldr	r4, [pc, #44]	; (40023c <config_DAC+0x38>)
  40020e:	4620      	mov	r0, r4
  400210:	4b0b      	ldr	r3, [pc, #44]	; (400240 <config_DAC+0x3c>)
  400212:	4798      	blx	r3
  dacc_set_transfer_mode(DACC_BASE, 0);
  400214:	2100      	movs	r1, #0
  400216:	4620      	mov	r0, r4
  400218:	4b0a      	ldr	r3, [pc, #40]	; (400244 <config_DAC+0x40>)
  40021a:	4798      	blx	r3
  dacc_set_osr(DACC_BASE, DACC_CHANNEL, 5 );
  40021c:	2205      	movs	r2, #5
  40021e:	2100      	movs	r1, #0
  400220:	4620      	mov	r0, r4
  400222:	4b09      	ldr	r3, [pc, #36]	; (400248 <config_DAC+0x44>)
  400224:	4798      	blx	r3
  dacc_enable_channel(DACC_BASE, DACC_CHANNEL);
  400226:	2100      	movs	r1, #0
  400228:	4620      	mov	r0, r4
  40022a:	4b08      	ldr	r3, [pc, #32]	; (40024c <config_DAC+0x48>)
  40022c:	4798      	blx	r3
  dacc_set_analog_control(DACC_BASE, DACC_ANALOG_CONTROL);
  40022e:	210a      	movs	r1, #10
  400230:	4620      	mov	r0, r4
  400232:	4b07      	ldr	r3, [pc, #28]	; (400250 <config_DAC+0x4c>)
  400234:	4798      	blx	r3
  400236:	bd10      	pop	{r4, pc}
  400238:	004255b5 	.word	0x004255b5
  40023c:	40040000 	.word	0x40040000
  400240:	004004bd 	.word	0x004004bd
  400244:	004004c3 	.word	0x004004c3
  400248:	004004d9 	.word	0x004004d9
  40024c:	0040050d 	.word	0x0040050d
  400250:	00400521 	.word	0x00400521

00400254 <TC0_Handler>:
void TC0_Handler(void) {
  400254:	b500      	push	{lr}
  400256:	b083      	sub	sp, #12
  ul_dummy = tc_get_status(TC0, 0);
  400258:	2100      	movs	r1, #0
  40025a:	4815      	ldr	r0, [pc, #84]	; (4002b0 <TC0_Handler+0x5c>)
  40025c:	4b15      	ldr	r3, [pc, #84]	; (4002b4 <TC0_Handler+0x60>)
  40025e:	4798      	blx	r3
  400260:	9001      	str	r0, [sp, #4]
  if (g_ecgCnt >= g_ecgSize) {
  400262:	4b15      	ldr	r3, [pc, #84]	; (4002b8 <TC0_Handler+0x64>)
  400264:	681a      	ldr	r2, [r3, #0]
  400266:	4b15      	ldr	r3, [pc, #84]	; (4002bc <TC0_Handler+0x68>)
  400268:	681b      	ldr	r3, [r3, #0]
  40026a:	429a      	cmp	r2, r3
  40026c:	db06      	blt.n	40027c <TC0_Handler+0x28>
    g_ecgCnt = 0;
  40026e:	2200      	movs	r2, #0
  400270:	4b11      	ldr	r3, [pc, #68]	; (4002b8 <TC0_Handler+0x64>)
  400272:	601a      	str	r2, [r3, #0]
    g_ecgDelayCnt = g_ecgDelayValue;
  400274:	4b12      	ldr	r3, [pc, #72]	; (4002c0 <TC0_Handler+0x6c>)
  400276:	681a      	ldr	r2, [r3, #0]
  400278:	4b12      	ldr	r3, [pc, #72]	; (4002c4 <TC0_Handler+0x70>)
  40027a:	601a      	str	r2, [r3, #0]
  if (g_ecgDelayCnt > 0) {
  40027c:	4b11      	ldr	r3, [pc, #68]	; (4002c4 <TC0_Handler+0x70>)
  40027e:	681b      	ldr	r3, [r3, #0]
  400280:	2b00      	cmp	r3, #0
  400282:	dd0f      	ble.n	4002a4 <TC0_Handler+0x50>
    g_ecgDelayCnt--;
  400284:	4a0f      	ldr	r2, [pc, #60]	; (4002c4 <TC0_Handler+0x70>)
  400286:	6813      	ldr	r3, [r2, #0]
  400288:	3b01      	subs	r3, #1
  40028a:	6013      	str	r3, [r2, #0]
  dacc_write_conversion_data(DACC_BASE, ecg[g_ecgCnt], DACC_CHANNEL);
  40028c:	4b0a      	ldr	r3, [pc, #40]	; (4002b8 <TC0_Handler+0x64>)
  40028e:	6819      	ldr	r1, [r3, #0]
  400290:	2200      	movs	r2, #0
  400292:	4b0d      	ldr	r3, [pc, #52]	; (4002c8 <TC0_Handler+0x74>)
  400294:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  400298:	480c      	ldr	r0, [pc, #48]	; (4002cc <TC0_Handler+0x78>)
  40029a:	4b0d      	ldr	r3, [pc, #52]	; (4002d0 <TC0_Handler+0x7c>)
  40029c:	4798      	blx	r3
}
  40029e:	b003      	add	sp, #12
  4002a0:	f85d fb04 	ldr.w	pc, [sp], #4
    g_ecgCnt++;
  4002a4:	4a04      	ldr	r2, [pc, #16]	; (4002b8 <TC0_Handler+0x64>)
  4002a6:	6813      	ldr	r3, [r2, #0]
  4002a8:	3301      	adds	r3, #1
  4002aa:	6013      	str	r3, [r2, #0]
  4002ac:	e7ee      	b.n	40028c <TC0_Handler+0x38>
  4002ae:	bf00      	nop
  4002b0:	4000c000 	.word	0x4000c000
  4002b4:	004007ef 	.word	0x004007ef
  4002b8:	2043a10c 	.word	0x2043a10c
  4002bc:	004333fc 	.word	0x004333fc
  4002c0:	2043a114 	.word	0x2043a114
  4002c4:	2043a110 	.word	0x2043a110
  4002c8:	00431d34 	.word	0x00431d34
  4002cc:	40040000 	.word	0x40040000
  4002d0:	004004cf 	.word	0x004004cf

004002d4 <TC_init_modificado>:
void TC_init_modificado(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  4002d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002d8:	b084      	sub	sp, #16
  4002da:	4605      	mov	r5, r0
  4002dc:	460c      	mov	r4, r1
  4002de:	4616      	mov	r6, r2
  4002e0:	461f      	mov	r7, r3
  pmc_enable_periph_clk(ID_TC);
  4002e2:	4608      	mov	r0, r1
  4002e4:	4b1c      	ldr	r3, [pc, #112]	; (400358 <TC_init_modificado+0x84>)
  4002e6:	4798      	blx	r3
  tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4002e8:	491c      	ldr	r1, [pc, #112]	; (40035c <TC_init_modificado+0x88>)
  4002ea:	9100      	str	r1, [sp, #0]
  4002ec:	ab02      	add	r3, sp, #8
  4002ee:	aa03      	add	r2, sp, #12
  4002f0:	4638      	mov	r0, r7
  4002f2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400380 <TC_init_modificado+0xac>
  4002f6:	47c0      	blx	r8
  tc_init(TC, TC_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK2 | TC_CMR_CPCTRG);
  4002f8:	f244 0201 	movw	r2, #16385	; 0x4001
  4002fc:	4631      	mov	r1, r6
  4002fe:	4628      	mov	r0, r5
  400300:	4b17      	ldr	r3, [pc, #92]	; (400360 <TC_init_modificado+0x8c>)
  400302:	4798      	blx	r3
  tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / 16) / freq);
  400304:	4a17      	ldr	r2, [pc, #92]	; (400364 <TC_init_modificado+0x90>)
  400306:	fbb2 f2f7 	udiv	r2, r2, r7
  40030a:	4631      	mov	r1, r6
  40030c:	4628      	mov	r0, r5
  40030e:	4b16      	ldr	r3, [pc, #88]	; (400368 <TC_init_modificado+0x94>)
  400310:	4798      	blx	r3
  NVIC_SetPriority(ID_TC, 4);
  400312:	b263      	sxtb	r3, r4
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  400314:	2b00      	cmp	r3, #0
  400316:	db17      	blt.n	400348 <TC_init_modificado+0x74>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400318:	4a14      	ldr	r2, [pc, #80]	; (40036c <TC_init_modificado+0x98>)
  40031a:	2180      	movs	r1, #128	; 0x80
  40031c:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40031e:	095b      	lsrs	r3, r3, #5
  400320:	f004 041f 	and.w	r4, r4, #31
  400324:	2201      	movs	r2, #1
  400326:	fa02 f404 	lsl.w	r4, r2, r4
  40032a:	4a11      	ldr	r2, [pc, #68]	; (400370 <TC_init_modificado+0x9c>)
  40032c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  400330:	2210      	movs	r2, #16
  400332:	4631      	mov	r1, r6
  400334:	4628      	mov	r0, r5
  400336:	4b0f      	ldr	r3, [pc, #60]	; (400374 <TC_init_modificado+0xa0>)
  400338:	4798      	blx	r3
  tc_start(TC, TC_CHANNEL);
  40033a:	4631      	mov	r1, r6
  40033c:	4628      	mov	r0, r5
  40033e:	4b0e      	ldr	r3, [pc, #56]	; (400378 <TC_init_modificado+0xa4>)
  400340:	4798      	blx	r3
}
  400342:	b004      	add	sp, #16
  400344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400348:	f004 010f 	and.w	r1, r4, #15
  40034c:	4a0b      	ldr	r2, [pc, #44]	; (40037c <TC_init_modificado+0xa8>)
  40034e:	440a      	add	r2, r1
  400350:	2180      	movs	r1, #128	; 0x80
  400352:	7611      	strb	r1, [r2, #24]
  400354:	e7e3      	b.n	40031e <TC_init_modificado+0x4a>
  400356:	bf00      	nop
  400358:	004255b5 	.word	0x004255b5
  40035c:	11e1a300 	.word	0x11e1a300
  400360:	004007bd 	.word	0x004007bd
  400364:	011e1a30 	.word	0x011e1a30
  400368:	004007df 	.word	0x004007df
  40036c:	e000e400 	.word	0xe000e400
  400370:	e000e100 	.word	0xe000e100
  400374:	004007e7 	.word	0x004007e7
  400378:	004007d7 	.word	0x004007d7
  40037c:	e000ecfc 	.word	0xe000ecfc
  400380:	004007f7 	.word	0x004007f7
  400384:	00000000 	.word	0x00000000

00400388 <task_aps2>:
 // printf("%d \n", g_ecgDelayValue);
}

void task_aps2(void *pvParameters) {
  400388:	b570      	push	{r4, r5, r6, lr}
  40038a:	ed2d 8b02 	vpush	{d8}
  40038e:	b084      	sub	sp, #16
  
  g_ecgDelayValue = 200;
  400390:	22c8      	movs	r2, #200	; 0xc8
  400392:	4b31      	ldr	r3, [pc, #196]	; (400458 <task_aps2+0xd0>)
  400394:	601a      	str	r2, [r3, #0]
  config_DAC();
  400396:	4b31      	ldr	r3, [pc, #196]	; (40045c <task_aps2+0xd4>)
  400398:	4798      	blx	r3
  TC_init_modificado(TC0, ID_TC0, 0, DAC_FS);
  40039a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  40039e:	2200      	movs	r2, #0
  4003a0:	2117      	movs	r1, #23
  4003a2:	482f      	ldr	r0, [pc, #188]	; (400460 <task_aps2+0xd8>)
  4003a4:	4c2f      	ldr	r4, [pc, #188]	; (400464 <task_aps2+0xdc>)
  4003a6:	47a0      	blx	r4
  xTimer = xTimerCreate("ECG", pdMS_TO_TICKS(ECG_CHANGE_TIME), pdTRUE, (void *) 0, vTimerEcgCallback);
  4003a8:	4b2f      	ldr	r3, [pc, #188]	; (400468 <task_aps2+0xe0>)
  4003aa:	9300      	str	r3, [sp, #0]
  4003ac:	2300      	movs	r3, #0
  4003ae:	2201      	movs	r2, #1
  4003b0:	f242 7110 	movw	r1, #10000	; 0x2710
  4003b4:	482d      	ldr	r0, [pc, #180]	; (40046c <task_aps2+0xe4>)
  4003b6:	4c2e      	ldr	r4, [pc, #184]	; (400470 <task_aps2+0xe8>)
  4003b8:	47a0      	blx	r4
  4003ba:	4604      	mov	r4, r0
  4003bc:	4b2d      	ldr	r3, [pc, #180]	; (400474 <task_aps2+0xec>)
  4003be:	6018      	str	r0, [r3, #0]
  xTimerStart( xTimer, 0 );
  4003c0:	4b2d      	ldr	r3, [pc, #180]	; (400478 <task_aps2+0xf0>)
  4003c2:	4798      	blx	r3
  4003c4:	2300      	movs	r3, #0
  4003c6:	9300      	str	r3, [sp, #0]
  4003c8:	4602      	mov	r2, r0
  4003ca:	2101      	movs	r1, #1
  4003cc:	4620      	mov	r0, r4
  4003ce:	4c2b      	ldr	r4, [pc, #172]	; (40047c <task_aps2+0xf4>)
  4003d0:	47a0      	blx	r4
  
  // oxiometria
  char ox;
  float theta = 0;
  4003d2:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 400480 <task_aps2+0xf8>
  4003d6:	e02e      	b.n	400436 <task_aps2+0xae>
    
    // Oxiometria: sin entre 88 e 100
    if (theta > 2*PI) {
      theta = 0;
    }
    ox = (char) ((arm_sin_f32(theta) + 1.0)*12.0/2.0 + 88.0);
  4003d8:	ee18 0a10 	vmov	r0, s16
  4003dc:	4b29      	ldr	r3, [pc, #164]	; (400484 <task_aps2+0xfc>)
  4003de:	4798      	blx	r3
  4003e0:	4e29      	ldr	r6, [pc, #164]	; (400488 <task_aps2+0x100>)
  4003e2:	47b0      	blx	r6
  4003e4:	4d29      	ldr	r5, [pc, #164]	; (40048c <task_aps2+0x104>)
  4003e6:	2200      	movs	r2, #0
  4003e8:	4b29      	ldr	r3, [pc, #164]	; (400490 <task_aps2+0x108>)
  4003ea:	47a8      	blx	r5
  4003ec:	4c29      	ldr	r4, [pc, #164]	; (400494 <task_aps2+0x10c>)
  4003ee:	2200      	movs	r2, #0
  4003f0:	4b29      	ldr	r3, [pc, #164]	; (400498 <task_aps2+0x110>)
  4003f2:	47a0      	blx	r4
  4003f4:	2200      	movs	r2, #0
  4003f6:	4b29      	ldr	r3, [pc, #164]	; (40049c <task_aps2+0x114>)
  4003f8:	47a0      	blx	r4
  4003fa:	2200      	movs	r2, #0
  4003fc:	4b28      	ldr	r3, [pc, #160]	; (4004a0 <task_aps2+0x118>)
  4003fe:	47a8      	blx	r5
  400400:	4b28      	ldr	r3, [pc, #160]	; (4004a4 <task_aps2+0x11c>)
  400402:	4798      	blx	r3
  400404:	ac04      	add	r4, sp, #16
  400406:	f804 0d01 	strb.w	r0, [r4, #-1]!
    theta = theta + 0.3;
  40040a:	ee18 0a10 	vmov	r0, s16
  40040e:	47b0      	blx	r6
  400410:	a30f      	add	r3, pc, #60	; (adr r3, 400450 <task_aps2+0xc8>)
  400412:	e9d3 2300 	ldrd	r2, r3, [r3]
  400416:	47a8      	blx	r5
  400418:	4b23      	ldr	r3, [pc, #140]	; (4004a8 <task_aps2+0x120>)
  40041a:	4798      	blx	r3
  40041c:	ee08 0a10 	vmov	s16, r0
    xQueueSend(xQueueOx, &ox, 100);
  400420:	2300      	movs	r3, #0
  400422:	2264      	movs	r2, #100	; 0x64
  400424:	4621      	mov	r1, r4
  400426:	4821      	ldr	r0, [pc, #132]	; (4004ac <task_aps2+0x124>)
  400428:	6800      	ldr	r0, [r0, #0]
  40042a:	4c21      	ldr	r4, [pc, #132]	; (4004b0 <task_aps2+0x128>)
  40042c:	47a0      	blx	r4

    vTaskDelay(2000);
  40042e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  400432:	4b20      	ldr	r3, [pc, #128]	; (4004b4 <task_aps2+0x12c>)
  400434:	4798      	blx	r3
    if (theta > 2*PI) {
  400436:	eddf 7a20 	vldr	s15, [pc, #128]	; 4004b8 <task_aps2+0x130>
  40043a:	eeb4 8ae7 	vcmpe.f32	s16, s15
  40043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400442:	ddc9      	ble.n	4003d8 <task_aps2+0x50>
      theta = 0;
  400444:	ed9f 8a0e 	vldr	s16, [pc, #56]	; 400480 <task_aps2+0xf8>
  400448:	e7c6      	b.n	4003d8 <task_aps2+0x50>
  40044a:	bf00      	nop
  40044c:	f3af 8000 	nop.w
  400450:	33333333 	.word	0x33333333
  400454:	3fd33333 	.word	0x3fd33333
  400458:	2043a114 	.word	0x2043a114
  40045c:	00400205 	.word	0x00400205
  400460:	4000c000 	.word	0x4000c000
  400464:	004002d5 	.word	0x004002d5
  400468:	004001d5 	.word	0x004001d5
  40046c:	0042b0e8 	.word	0x0042b0e8
  400470:	0040328d 	.word	0x0040328d
  400474:	2043a410 	.word	0x2043a410
  400478:	004028b5 	.word	0x004028b5
  40047c:	004032ed 	.word	0x004032ed
  400480:	00000000 	.word	0x00000000
  400484:	004273b5 	.word	0x004273b5
  400488:	004276fd 	.word	0x004276fd
  40048c:	00427441 	.word	0x00427441
  400490:	3ff00000 	.word	0x3ff00000
  400494:	004277a5 	.word	0x004277a5
  400498:	40280000 	.word	0x40280000
  40049c:	3fe00000 	.word	0x3fe00000
  4004a0:	40560000 	.word	0x40560000
  4004a4:	00427bc9 	.word	0x00427bc9
  4004a8:	00427c09 	.word	0x00427c09
  4004ac:	2043a414 	.word	0x2043a414
  4004b0:	00401ee5 	.word	0x00401ee5
  4004b4:	00402b15 	.word	0x00402b15
  4004b8:	40c90fdb 	.word	0x40c90fdb

004004bc <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  4004bc:	2301      	movs	r3, #1
  4004be:	6003      	str	r3, [r0, #0]
  4004c0:	4770      	bx	lr

004004c2 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  4004c2:	b911      	cbnz	r1, 4004ca <dacc_set_transfer_mode+0x8>
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
		p_dacc->DACC_MR = ul_mode;
  4004c4:	6041      	str	r1, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  4004c6:	2000      	movs	r0, #0
  4004c8:	4770      	bx	lr
		p_dacc->DACC_MR = ul_mode;
  4004ca:	6041      	str	r1, [r0, #4]
  4004cc:	e7fb      	b.n	4004c6 <dacc_set_transfer_mode+0x4>

004004ce <dacc_write_conversion_data>:
 * \param ul_data The data to be transferred to analog value. 
 * \param channel The channel to convert the data ul_data
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data, uint32_t channel)
{
	p_dacc->DACC_CDR[channel] = ul_data;
  4004ce:	3206      	adds	r2, #6
  4004d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  4004d4:	6051      	str	r1, [r2, #4]
  4004d6:	4770      	bx	lr

004004d8 <dacc_set_osr>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_osr(Dacc *p_dacc, uint32_t channel, uint32_t ul_osr)
{
	uint32_t mr = p_dacc->DACC_TRIGR;
  4004d8:	6883      	ldr	r3, [r0, #8]
	if(channel == 0) {
  4004da:	b139      	cbz	r1, 4004ec <dacc_set_osr+0x14>
{
  4004dc:	b410      	push	{r4}
		mr &= (~DACC_TRIGR_OSR0_Msk);
		mr |=  DACC_TRIGR_OSR0(ul_osr);
	}else if(channel == 1) {
  4004de:	2901      	cmp	r1, #1
  4004e0:	d00d      	beq.n	4004fe <dacc_set_osr+0x26>
		mr &= (~DACC_TRIGR_OSR1_Msk);
		mr |=  DACC_TRIGR_OSR1(ul_osr);
	}
	p_dacc->DACC_TRIGR = mr;
  4004e2:	6083      	str	r3, [r0, #8]
	return DACC_RC_OK;
}
  4004e4:	2000      	movs	r0, #0
  4004e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004ea:	4770      	bx	lr
		mr &= (~DACC_TRIGR_OSR0_Msk);
  4004ec:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
		mr |=  DACC_TRIGR_OSR0(ul_osr);
  4004f0:	0412      	lsls	r2, r2, #16
  4004f2:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4004f6:	4313      	orrs	r3, r2
	p_dacc->DACC_TRIGR = mr;
  4004f8:	6083      	str	r3, [r0, #8]
}
  4004fa:	2000      	movs	r0, #0
  4004fc:	4770      	bx	lr
		mr &= (~DACC_TRIGR_OSR1_Msk);
  4004fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
		mr |=  DACC_TRIGR_OSR1(ul_osr);
  400502:	0512      	lsls	r2, r2, #20
  400504:	f402 02e0 	and.w	r2, r2, #7340032	; 0x700000
  400508:	4313      	orrs	r3, r2
  40050a:	e7ea      	b.n	4004e2 <dacc_set_osr+0xa>

0040050c <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  40050c:	2901      	cmp	r1, #1
  40050e:	d901      	bls.n	400514 <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  400510:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  400512:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  400514:	2301      	movs	r3, #1
  400516:	fa03 f101 	lsl.w	r1, r3, r1
  40051a:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  40051c:	2000      	movs	r0, #0
  40051e:	4770      	bx	lr

00400520 <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  400520:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  400524:	2000      	movs	r0, #0
  400526:	4770      	bx	lr

00400528 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  400528:	b921      	cbnz	r1, 400534 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  40052a:	6843      	ldr	r3, [r0, #4]
  40052c:	f023 0301 	bic.w	r3, r3, #1
  400530:	6043      	str	r3, [r0, #4]
  400532:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  400534:	6843      	ldr	r3, [r0, #4]
  400536:	f043 0301 	orr.w	r3, r3, #1
  40053a:	6043      	str	r3, [r0, #4]
  40053c:	4770      	bx	lr

0040053e <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  40053e:	6201      	str	r1, [r0, #32]
  400540:	4770      	bx	lr

00400542 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  400542:	b470      	push	{r4, r5, r6}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  400544:	6884      	ldr	r4, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  400546:	e000      	b.n	40054a <rtc_get_time+0x8>
		ul_time = p_rtc->RTC_TIMR;
  400548:	6884      	ldr	r4, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  40054a:	6885      	ldr	r5, [r0, #8]
  40054c:	42ac      	cmp	r4, r5
  40054e:	d1fb      	bne.n	400548 <rtc_get_time+0x6>
	}

	/* Hour */
	if (pul_hour) {
  400550:	b171      	cbz	r1, 400570 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  400552:	0c26      	lsrs	r6, r4, #16
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400554:	f3c6 1501 	ubfx	r5, r6, #4, #2
  400558:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40055c:	0068      	lsls	r0, r5, #1
  40055e:	f006 060f 	and.w	r6, r6, #15
  400562:	4430      	add	r0, r6
  400564:	6008      	str	r0, [r1, #0]

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  400566:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
  40056a:	d001      	beq.n	400570 <rtc_get_time+0x2e>
			*pul_hour += 12;
  40056c:	300c      	adds	r0, #12
  40056e:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  400570:	b14a      	cbz	r2, 400586 <rtc_get_time+0x44>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  400572:	0a25      	lsrs	r5, r4, #8
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  400574:	f3c5 1102 	ubfx	r1, r5, #4, #3
  400578:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40057c:	0048      	lsls	r0, r1, #1
  40057e:	f005 050f 	and.w	r5, r5, #15
  400582:	4428      	add	r0, r5
  400584:	6010      	str	r0, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400586:	b143      	cbz	r3, 40059a <rtc_get_time+0x58>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400588:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40058c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400590:	0051      	lsls	r1, r2, #1
  400592:	f004 040f 	and.w	r4, r4, #15
  400596:	440c      	add	r4, r1
  400598:	601c      	str	r4, [r3, #0]
	}
}
  40059a:	bc70      	pop	{r4, r5, r6}
  40059c:	4770      	bx	lr
	...

004005a0 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  4005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4005a2:	6844      	ldr	r4, [r0, #4]
  4005a4:	f014 0f01 	tst.w	r4, #1
  4005a8:	d005      	beq.n	4005b6 <rtc_set_time+0x16>
		if (ul_hour > 12) {
  4005aa:	290c      	cmp	r1, #12
  4005ac:	d93e      	bls.n	40062c <rtc_set_time+0x8c>
			ul_hour -= 12;
  4005ae:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  4005b0:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  4005b4:	e000      	b.n	4005b8 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  4005b6:	2600      	movs	r6, #0
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4005b8:	4c1d      	ldr	r4, [pc, #116]	; (400630 <rtc_set_time+0x90>)
  4005ba:	fba4 7501 	umull	r7, r5, r4, r1
  4005be:	08ef      	lsrs	r7, r5, #3
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4005c0:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
  4005c4:	ea4f 054e 	mov.w	r5, lr, lsl #1
  4005c8:	46ae      	mov	lr, r5
  4005ca:	1b4d      	subs	r5, r1, r5
  4005cc:	042d      	lsls	r5, r5, #16
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4005ce:	ea45 5507 	orr.w	r5, r5, r7, lsl #20
  4005d2:	4335      	orrs	r5, r6

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4005d4:	fba4 6102 	umull	r6, r1, r4, r2
  4005d8:	08ce      	lsrs	r6, r1, #3
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4005da:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  4005de:	0079      	lsls	r1, r7, #1
  4005e0:	1a51      	subs	r1, r2, r1
  4005e2:	0209      	lsls	r1, r1, #8
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4005e4:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  4005e8:	4329      	orrs	r1, r5

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4005ea:	fba4 4203 	umull	r4, r2, r4, r3
  4005ee:	08d2      	lsrs	r2, r2, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4005f0:	eb02 0582 	add.w	r5, r2, r2, lsl #2
  4005f4:	006c      	lsls	r4, r5, #1
  4005f6:	1b1c      	subs	r4, r3, r4
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4005f8:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  4005fc:	430a      	orrs	r2, r1

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4005fe:	6983      	ldr	r3, [r0, #24]
  400600:	f013 0f04 	tst.w	r3, #4
  400604:	d0fb      	beq.n	4005fe <rtc_set_time+0x5e>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400606:	6803      	ldr	r3, [r0, #0]
  400608:	f043 0301 	orr.w	r3, r3, #1
  40060c:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40060e:	6983      	ldr	r3, [r0, #24]
  400610:	f013 0f01 	tst.w	r3, #1
  400614:	d0fb      	beq.n	40060e <rtc_set_time+0x6e>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400616:	2301      	movs	r3, #1
  400618:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  40061a:	6082      	str	r2, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  40061c:	6803      	ldr	r3, [r0, #0]
  40061e:	f023 0301 	bic.w	r3, r3, #1
  400622:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  400624:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400626:	f000 0001 	and.w	r0, r0, #1
  40062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t ul_time = 0;
  40062c:	2600      	movs	r6, #0
  40062e:	e7c3      	b.n	4005b8 <rtc_set_time+0x18>
  400630:	cccccccd 	.word	0xcccccccd

00400634 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  400634:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t ul_date = 0;

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400636:	4d2c      	ldr	r5, [pc, #176]	; (4006e8 <rtc_set_date+0xb4>)
  400638:	fba5 4501 	umull	r4, r5, r5, r1
  40063c:	09af      	lsrs	r7, r5, #6
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  40063e:	4c2b      	ldr	r4, [pc, #172]	; (4006ec <rtc_set_date+0xb8>)
  400640:	fba4 5401 	umull	r5, r4, r4, r1
  400644:	0964      	lsrs	r4, r4, #5
  400646:	4e2a      	ldr	r6, [pc, #168]	; (4006f0 <rtc_set_date+0xbc>)
  400648:	fba6 e504 	umull	lr, r5, r6, r4
  40064c:	08ed      	lsrs	r5, r5, #3
  40064e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400652:	ea4f 0e45 	mov.w	lr, r5, lsl #1
  400656:	eba4 050e 	sub.w	r5, r4, lr
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
  40065a:	ea45 1507 	orr.w	r5, r5, r7, lsl #4

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40065e:	fba6 7401 	umull	r7, r4, r6, r1
  400662:	08e4      	lsrs	r4, r4, #3
  400664:	fba6 7e04 	umull	r7, lr, r6, r4
  400668:	ea4f 0ede 	mov.w	lr, lr, lsr #3
  40066c:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  400670:	ea4f 074e 	mov.w	r7, lr, lsl #1
  400674:	eba4 0e07 	sub.w	lr, r4, r7
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400678:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40067c:	0067      	lsls	r7, r4, #1
  40067e:	1bcf      	subs	r7, r1, r7
  400680:	0239      	lsls	r1, r7, #8
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
  400682:	ea41 310e 	orr.w	r1, r1, lr, lsl #12
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400686:	4329      	orrs	r1, r5

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400688:	fba6 4502 	umull	r4, r5, r6, r2
  40068c:	08ed      	lsrs	r5, r5, #3
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  40068e:	eb05 0785 	add.w	r7, r5, r5, lsl #2
  400692:	007c      	lsls	r4, r7, #1
  400694:	1b14      	subs	r4, r2, r4
  400696:	0424      	lsls	r4, r4, #16
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400698:	ea44 5205 	orr.w	r2, r4, r5, lsl #20
  40069c:	4311      	orrs	r1, r2

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  40069e:	9a05      	ldr	r2, [sp, #20]
  4006a0:	ea41 5142 	orr.w	r1, r1, r2, lsl #21

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4006a4:	fba6 4203 	umull	r4, r2, r6, r3
  4006a8:	08d2      	lsrs	r2, r2, #3
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4006aa:	eb02 0582 	add.w	r5, r2, r2, lsl #2
  4006ae:	006c      	lsls	r4, r5, #1
  4006b0:	1b1c      	subs	r4, r3, r4
  4006b2:	0624      	lsls	r4, r4, #24
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4006b4:	ea44 7202 	orr.w	r2, r4, r2, lsl #28
  4006b8:	430a      	orrs	r2, r1

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4006ba:	6983      	ldr	r3, [r0, #24]
  4006bc:	f013 0f04 	tst.w	r3, #4
  4006c0:	d0fb      	beq.n	4006ba <rtc_set_date+0x86>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4006c2:	6803      	ldr	r3, [r0, #0]
  4006c4:	f043 0302 	orr.w	r3, r3, #2
  4006c8:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4006ca:	6983      	ldr	r3, [r0, #24]
  4006cc:	f013 0f01 	tst.w	r3, #1
  4006d0:	d0fb      	beq.n	4006ca <rtc_set_date+0x96>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4006d2:	2301      	movs	r3, #1
  4006d4:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  4006d6:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4006d8:	6803      	ldr	r3, [r0, #0]
  4006da:	f023 0302 	bic.w	r3, r3, #2
  4006de:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4006e0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4006e2:	f000 0002 	and.w	r0, r0, #2
  4006e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4006e8:	10624dd3 	.word	0x10624dd3
  4006ec:	51eb851f 	.word	0x51eb851f
  4006f0:	cccccccd 	.word	0xcccccccd

004006f4 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  4006f4:	6980      	ldr	r0, [r0, #24]
}
  4006f6:	4770      	bx	lr

004006f8 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  4006f8:	61c1      	str	r1, [r0, #28]
  4006fa:	4770      	bx	lr

004006fc <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4006fc:	4b03      	ldr	r3, [pc, #12]	; (40070c <rtt_init+0x10>)
  4006fe:	681b      	ldr	r3, [r3, #0]
  400700:	4319      	orrs	r1, r3
  400702:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  400706:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  400708:	2000      	movs	r0, #0
  40070a:	4770      	bx	lr
  40070c:	20400a9c 	.word	0x20400a9c

00400710 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  400710:	b941      	cbnz	r1, 400724 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  400712:	4a09      	ldr	r2, [pc, #36]	; (400738 <rtt_sel_source+0x28>)
  400714:	6813      	ldr	r3, [r2, #0]
  400716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  40071a:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40071c:	6802      	ldr	r2, [r0, #0]
  40071e:	4313      	orrs	r3, r2
  400720:	6003      	str	r3, [r0, #0]
  400722:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400724:	4a04      	ldr	r2, [pc, #16]	; (400738 <rtt_sel_source+0x28>)
  400726:	6813      	ldr	r3, [r2, #0]
  400728:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  40072c:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40072e:	6802      	ldr	r2, [r0, #0]
  400730:	4313      	orrs	r3, r2
  400732:	6003      	str	r3, [r0, #0]
  400734:	4770      	bx	lr
  400736:	bf00      	nop
  400738:	20400a9c 	.word	0x20400a9c

0040073c <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  40073c:	6803      	ldr	r3, [r0, #0]
	temp |= ul_sources;
  40073e:	4319      	orrs	r1, r3
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400740:	4b02      	ldr	r3, [pc, #8]	; (40074c <rtt_enable_interrupt+0x10>)
  400742:	681b      	ldr	r3, [r3, #0]
  400744:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  400746:	6001      	str	r1, [r0, #0]
  400748:	4770      	bx	lr
  40074a:	bf00      	nop
  40074c:	20400a9c 	.word	0x20400a9c

00400750 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400750:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  400752:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400756:	4b02      	ldr	r3, [pc, #8]	; (400760 <rtt_disable_interrupt+0x10>)
  400758:	681b      	ldr	r3, [r3, #0]
  40075a:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  40075c:	6001      	str	r1, [r0, #0]
  40075e:	4770      	bx	lr
  400760:	20400a9c 	.word	0x20400a9c

00400764 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400764:	6883      	ldr	r3, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400766:	e000      	b.n	40076a <rtt_read_timer_value+0x6>
		rtt_val = p_rtt->RTT_VR;
  400768:	6883      	ldr	r3, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40076a:	6882      	ldr	r2, [r0, #8]
  40076c:	4293      	cmp	r3, r2
  40076e:	d1fb      	bne.n	400768 <rtt_read_timer_value+0x4>
	}

	return rtt_val;
}
  400770:	4618      	mov	r0, r3
  400772:	4770      	bx	lr

00400774 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400774:	68c0      	ldr	r0, [r0, #12]
}
  400776:	4770      	bx	lr

00400778 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  400778:	b570      	push	{r4, r5, r6, lr}
  40077a:	4606      	mov	r6, r0
  40077c:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  40077e:	6804      	ldr	r4, [r0, #0]
  400780:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400784:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400788:	4809      	ldr	r0, [pc, #36]	; (4007b0 <rtt_write_alarm_time+0x38>)
  40078a:	4b0a      	ldr	r3, [pc, #40]	; (4007b4 <rtt_write_alarm_time+0x3c>)
  40078c:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  40078e:	b92d      	cbnz	r5, 40079c <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400790:	f04f 33ff 	mov.w	r3, #4294967295
  400794:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  400796:	b924      	cbnz	r4, 4007a2 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400798:	2000      	movs	r0, #0
  40079a:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  40079c:	3d01      	subs	r5, #1
  40079e:	6075      	str	r5, [r6, #4]
  4007a0:	e7f9      	b.n	400796 <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  4007a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4007a6:	4802      	ldr	r0, [pc, #8]	; (4007b0 <rtt_write_alarm_time+0x38>)
  4007a8:	4b03      	ldr	r3, [pc, #12]	; (4007b8 <rtt_write_alarm_time+0x40>)
  4007aa:	4798      	blx	r3
  4007ac:	e7f4      	b.n	400798 <rtt_write_alarm_time+0x20>
  4007ae:	bf00      	nop
  4007b0:	400e1830 	.word	0x400e1830
  4007b4:	00400751 	.word	0x00400751
  4007b8:	0040073d 	.word	0x0040073d

004007bc <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4007bc:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4007be:	0189      	lsls	r1, r1, #6
  4007c0:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4007c2:	2402      	movs	r4, #2
  4007c4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4007c6:	f04f 31ff 	mov.w	r1, #4294967295
  4007ca:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4007cc:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4007ce:	605a      	str	r2, [r3, #4]
}
  4007d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4007d4:	4770      	bx	lr

004007d6 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4007d6:	0189      	lsls	r1, r1, #6
  4007d8:	2305      	movs	r3, #5
  4007da:	5043      	str	r3, [r0, r1]
  4007dc:	4770      	bx	lr

004007de <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4007de:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4007e2:	61ca      	str	r2, [r1, #28]
  4007e4:	4770      	bx	lr

004007e6 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4007e6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4007ea:	624a      	str	r2, [r1, #36]	; 0x24
  4007ec:	4770      	bx	lr

004007ee <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4007ee:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4007f2:	6a08      	ldr	r0, [r1, #32]
}
  4007f4:	4770      	bx	lr

004007f6 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4007f6:	b470      	push	{r4, r5, r6}
  4007f8:	b087      	sub	sp, #28
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4007fa:	2402      	movs	r4, #2
  4007fc:	9401      	str	r4, [sp, #4]
  4007fe:	2408      	movs	r4, #8
  400800:	9402      	str	r4, [sp, #8]
  400802:	2420      	movs	r4, #32
  400804:	9403      	str	r4, [sp, #12]
  400806:	2480      	movs	r4, #128	; 0x80
  400808:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40080a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40080c:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40080e:	9405      	str	r4, [sp, #20]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400810:	2500      	movs	r5, #0
  400812:	2d04      	cmp	r5, #4
  400814:	d80d      	bhi.n	400832 <tc_find_mck_divisor+0x3c>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  400816:	ac06      	add	r4, sp, #24
  400818:	eb04 0485 	add.w	r4, r4, r5, lsl #2
  40081c:	f854 4c14 	ldr.w	r4, [r4, #-20]
  400820:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400824:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400826:	4284      	cmp	r4, r0
  400828:	d312      	bcc.n	400850 <tc_find_mck_divisor+0x5a>
			return 0;
		} else if (ul_freq >= ul_low) {
  40082a:	4286      	cmp	r6, r0
  40082c:	d901      	bls.n	400832 <tc_find_mck_divisor+0x3c>
			ul_index++) {
  40082e:	3501      	adds	r5, #1
  400830:	e7ef      	b.n	400812 <tc_find_mck_divisor+0x1c>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  400832:	2d04      	cmp	r5, #4
  400834:	d80e      	bhi.n	400854 <tc_find_mck_divisor+0x5e>
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
  400836:	b12a      	cbz	r2, 400844 <tc_find_mck_divisor+0x4e>
		*p_uldiv = divisors[ul_index];
  400838:	a906      	add	r1, sp, #24
  40083a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  40083e:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400842:	6011      	str	r1, [r2, #0]
	}

	if (p_ultcclks) {
  400844:	b143      	cbz	r3, 400858 <tc_find_mck_divisor+0x62>
		*p_ultcclks = ul_index;
  400846:	601d      	str	r5, [r3, #0]
	}

	return 1;
  400848:	2001      	movs	r0, #1
}
  40084a:	b007      	add	sp, #28
  40084c:	bc70      	pop	{r4, r5, r6}
  40084e:	4770      	bx	lr
			return 0;
  400850:	2000      	movs	r0, #0
  400852:	e7fa      	b.n	40084a <tc_find_mck_divisor+0x54>
		return 0;
  400854:	2000      	movs	r0, #0
  400856:	e7f8      	b.n	40084a <tc_find_mck_divisor+0x54>
	return 1;
  400858:	2001      	movs	r0, #1
  40085a:	e7f6      	b.n	40084a <tc_find_mck_divisor+0x54>

0040085c <insert_sort>:

int readTouchY(void) {
  return (readXm());
}

static void insert_sort(int array[], uint8_t size) {
  40085c:	b430      	push	{r4, r5}
  uint8_t j;
  int save;

  for (int i = 1; i < size; i++) {
  40085e:	2501      	movs	r5, #1
  400860:	e00e      	b.n	400880 <insert_sort+0x24>
    save = array[i];
    for (j = i; j >= 1 && save < array[j - 1]; j--)
    array[j] = array[j - 1];
  400862:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (j = i; j >= 1 && save < array[j - 1]; j--)
  400866:	3b01      	subs	r3, #1
  400868:	b2db      	uxtb	r3, r3
  40086a:	b133      	cbz	r3, 40087a <insert_sort+0x1e>
  40086c:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
  400870:	441a      	add	r2, r3
  400872:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  400876:	4294      	cmp	r4, r2
  400878:	dbf3      	blt.n	400862 <insert_sort+0x6>
    array[j] = save;
  40087a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for (int i = 1; i < size; i++) {
  40087e:	3501      	adds	r5, #1
  400880:	428d      	cmp	r5, r1
  400882:	da03      	bge.n	40088c <insert_sort+0x30>
    save = array[i];
  400884:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
    for (j = i; j >= 1 && save < array[j - 1]; j--)
  400888:	b2eb      	uxtb	r3, r5
  40088a:	e7ee      	b.n	40086a <insert_sort+0xe>
  }
}
  40088c:	bc30      	pop	{r4, r5}
  40088e:	4770      	bx	lr

00400890 <config_AFEC_touch>:
static void config_AFEC_touch(Afec *afec, uint32_t afec_id, uint32_t afec_channel, afec_callback_t callback) {
  400890:	b530      	push	{r4, r5, lr}
  400892:	b089      	sub	sp, #36	; 0x24
  400894:	4604      	mov	r4, r0
  400896:	4615      	mov	r5, r2
  afec_get_config_defaults(&afec_cfg);
  400898:	a802      	add	r0, sp, #8
  40089a:	4b13      	ldr	r3, [pc, #76]	; (4008e8 <config_AFEC_touch+0x58>)
  40089c:	4798      	blx	r3
  afec_init(afec, &afec_cfg);
  40089e:	a902      	add	r1, sp, #8
  4008a0:	4620      	mov	r0, r4
  4008a2:	4b12      	ldr	r3, [pc, #72]	; (4008ec <config_AFEC_touch+0x5c>)
  4008a4:	4798      	blx	r3
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  4008a6:	6863      	ldr	r3, [r4, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
  4008a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  4008ac:	6063      	str	r3, [r4, #4]
  afec_ch_get_config_defaults(&afec_ch_cfg);
  4008ae:	a801      	add	r0, sp, #4
  4008b0:	4b0f      	ldr	r3, [pc, #60]	; (4008f0 <config_AFEC_touch+0x60>)
  4008b2:	4798      	blx	r3
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  4008b4:	2300      	movs	r3, #0
  4008b6:	f88d 3005 	strb.w	r3, [sp, #5]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  4008ba:	b2ad      	uxth	r5, r5
  4008bc:	aa01      	add	r2, sp, #4
  4008be:	4629      	mov	r1, r5
  4008c0:	4620      	mov	r0, r4
  4008c2:	4b0c      	ldr	r3, [pc, #48]	; (4008f4 <config_AFEC_touch+0x64>)
  4008c4:	4798      	blx	r3
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  4008c6:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4008c8:	f44f 7300 	mov.w	r3, #512	; 0x200
  4008cc:	66e3      	str	r3, [r4, #108]	; 0x6c
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  4008ce:	f640 73ff 	movw	r3, #4095	; 0xfff
  4008d2:	429d      	cmp	r5, r3
  4008d4:	d005      	beq.n	4008e2 <config_AFEC_touch+0x52>
  4008d6:	2301      	movs	r3, #1
  4008d8:	fa03 f505 	lsl.w	r5, r3, r5
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4008dc:	6165      	str	r5, [r4, #20]
}
  4008de:	b009      	add	sp, #36	; 0x24
  4008e0:	bd30      	pop	{r4, r5, pc}
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  4008e2:	f640 75ff 	movw	r5, #4095	; 0xfff
  4008e6:	e7f9      	b.n	4008dc <config_AFEC_touch+0x4c>
  4008e8:	004015a9 	.word	0x004015a9
  4008ec:	004015f9 	.word	0x004015f9
  4008f0:	004015d9 	.word	0x004015d9
  4008f4:	00401559 	.word	0x00401559

004008f8 <configure_touch>:
void configure_touch(void) {
  4008f8:	b570      	push	{r4, r5, r6, lr}
  pmc_enable_periph_clk(XM_PIO_ID);
  4008fa:	200c      	movs	r0, #12
  4008fc:	4c0d      	ldr	r4, [pc, #52]	; (400934 <configure_touch+0x3c>)
  4008fe:	47a0      	blx	r4
  pmc_enable_periph_clk(YP_PIO_ID);
  400900:	2010      	movs	r0, #16
  400902:	47a0      	blx	r4
  pmc_enable_periph_clk(XP_PIO_ID);
  400904:	200c      	movs	r0, #12
  400906:	47a0      	blx	r4
  pmc_enable_periph_clk(YM_PIO_ID);
  400908:	2010      	movs	r0, #16
  40090a:	47a0      	blx	r4
  afec_enable(XM_AFEC);
  40090c:	4d0a      	ldr	r5, [pc, #40]	; (400938 <configure_touch+0x40>)
  40090e:	4628      	mov	r0, r5
  400910:	4e0a      	ldr	r6, [pc, #40]	; (40093c <configure_touch+0x44>)
  400912:	47b0      	blx	r6
  afec_enable(YP_AFEC);
  400914:	4c0a      	ldr	r4, [pc, #40]	; (400940 <configure_touch+0x48>)
  400916:	4620      	mov	r0, r4
  400918:	47b0      	blx	r6
  config_AFEC_touch(YP_AFEC, YP_AFEC_ID, YP_CHANNEL, NULL);
  40091a:	2300      	movs	r3, #0
  40091c:	461a      	mov	r2, r3
  40091e:	211d      	movs	r1, #29
  400920:	4620      	mov	r0, r4
  400922:	4c08      	ldr	r4, [pc, #32]	; (400944 <configure_touch+0x4c>)
  400924:	47a0      	blx	r4
  config_AFEC_touch(XM_AFEC, XM_AFEC_ID, XM_CHANNEL, NULL);
  400926:	2300      	movs	r3, #0
  400928:	2201      	movs	r2, #1
  40092a:	2128      	movs	r1, #40	; 0x28
  40092c:	4628      	mov	r0, r5
  40092e:	47a0      	blx	r4
  400930:	bd70      	pop	{r4, r5, r6, pc}
  400932:	bf00      	nop
  400934:	004255b5 	.word	0x004255b5
  400938:	40064000 	.word	0x40064000
  40093c:	00401731 	.word	0x00401731
  400940:	4003c000 	.word	0x4003c000
  400944:	00400891 	.word	0x00400891

00400948 <readYp>:
	afec->AFEC_CSELR = afec_ch;
  400948:	4b02      	ldr	r3, [pc, #8]	; (400954 <readYp+0xc>)
  40094a:	2200      	movs	r2, #0
  40094c:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  40094e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400950:	4770      	bx	lr
  400952:	bf00      	nop
  400954:	4003c000 	.word	0x4003c000

00400958 <readXm>:
	afec->AFEC_CSELR = afec_ch;
  400958:	4b02      	ldr	r3, [pc, #8]	; (400964 <readXm+0xc>)
  40095a:	2201      	movs	r2, #1
  40095c:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  40095e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400960:	4770      	bx	lr
  400962:	bf00      	nop
  400964:	40064000 	.word	0x40064000

00400968 <configReadTouchX>:
void configReadTouchX(void){
  400968:	b538      	push	{r3, r4, r5, lr}
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40096a:	2201      	movs	r2, #1
  40096c:	4b14      	ldr	r3, [pc, #80]	; (4009c0 <configReadTouchX+0x58>)
  40096e:	615a      	str	r2, [r3, #20]
	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  400970:	2202      	movs	r2, #2
  400972:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400976:	619a      	str	r2, [r3, #24]
  pio_configure(XP_PIO, PIO_OUTPUT_1, XP_MASK, PIO_DEFAULT);
  400978:	4d12      	ldr	r5, [pc, #72]	; (4009c4 <configReadTouchX+0x5c>)
  40097a:	2300      	movs	r3, #0
  40097c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400980:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400984:	4628      	mov	r0, r5
  400986:	4c10      	ldr	r4, [pc, #64]	; (4009c8 <configReadTouchX+0x60>)
  400988:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_OUTPUT_0, XM_MASK, PIO_DEFAULT);
  40098a:	2300      	movs	r3, #0
  40098c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400990:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400994:	4628      	mov	r0, r5
  400996:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_INPUT, YM_MASK, PIO_DEFAULT);
  400998:	f505 7500 	add.w	r5, r5, #512	; 0x200
  40099c:	2300      	movs	r3, #0
  40099e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4009a2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4009a6:	4628      	mov	r0, r5
  4009a8:	47a0      	blx	r4
  pio_configure(YP_PIO, PIO_INPUT, YP_MASK, PIO_DEFAULT);
  4009aa:	2300      	movs	r3, #0
  4009ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4009b0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4009b4:	4628      	mov	r0, r5
  4009b6:	47a0      	blx	r4
  delay_ms(5);
  4009b8:	4804      	ldr	r0, [pc, #16]	; (4009cc <configReadTouchX+0x64>)
  4009ba:	4b05      	ldr	r3, [pc, #20]	; (4009d0 <configReadTouchX+0x68>)
  4009bc:	4798      	blx	r3
  4009be:	bd38      	pop	{r3, r4, r5, pc}
  4009c0:	4003c000 	.word	0x4003c000
  4009c4:	400e1200 	.word	0x400e1200
  4009c8:	004251fd 	.word	0x004251fd
  4009cc:	0003dbc2 	.word	0x0003dbc2
  4009d0:	20400001 	.word	0x20400001

004009d4 <configReadTouchY>:
void configReadTouchY(void) {
  4009d4:	b538      	push	{r3, r4, r5, lr}
  4009d6:	2201      	movs	r2, #1
  4009d8:	4b14      	ldr	r3, [pc, #80]	; (400a2c <configReadTouchY+0x58>)
  4009da:	619a      	str	r2, [r3, #24]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4009dc:	2202      	movs	r2, #2
  4009de:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  4009e2:	615a      	str	r2, [r3, #20]
  pio_configure(YP_PIO, PIO_OUTPUT_1, YP_MASK, PIO_DEFAULT);
  4009e4:	4d12      	ldr	r5, [pc, #72]	; (400a30 <configReadTouchY+0x5c>)
  4009e6:	2300      	movs	r3, #0
  4009e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4009ec:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4009f0:	4628      	mov	r0, r5
  4009f2:	4c10      	ldr	r4, [pc, #64]	; (400a34 <configReadTouchY+0x60>)
  4009f4:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_OUTPUT_0, YM_MASK, PIO_DEFAULT);
  4009f6:	2300      	movs	r3, #0
  4009f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4009fc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400a00:	4628      	mov	r0, r5
  400a02:	47a0      	blx	r4
  pio_configure(XP_PIO, PIO_INPUT, XP_MASK, PIO_DEFAULT);
  400a04:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200
  400a08:	2300      	movs	r3, #0
  400a0a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400a0e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400a12:	4628      	mov	r0, r5
  400a14:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_INPUT, XM_MASK, PIO_DEFAULT);
  400a16:	2300      	movs	r3, #0
  400a18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400a1c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400a20:	4628      	mov	r0, r5
  400a22:	47a0      	blx	r4
  delay_ms(5);
  400a24:	4804      	ldr	r0, [pc, #16]	; (400a38 <configReadTouchY+0x64>)
  400a26:	4b05      	ldr	r3, [pc, #20]	; (400a3c <configReadTouchY+0x68>)
  400a28:	4798      	blx	r3
  400a2a:	bd38      	pop	{r3, r4, r5, pc}
  400a2c:	4003c000 	.word	0x4003c000
  400a30:	400e1400 	.word	0x400e1400
  400a34:	004251fd 	.word	0x004251fd
  400a38:	0003dbc2 	.word	0x0003dbc2
  400a3c:	20400001 	.word	0x20400001

00400a40 <readTouchZ>:
int readTouchZ(int rxplate) {
  400a40:	b570      	push	{r4, r5, r6, lr}
  400a42:	ed2d 8b04 	vpush	{d8-d9}
  400a46:	ee08 0a10 	vmov	s16, r0
  pio_configure(XP_PIO, PIO_OUTPUT_0, XP_MASK, PIO_DEFAULT);
  400a4a:	4d2e      	ldr	r5, [pc, #184]	; (400b04 <readTouchZ+0xc4>)
  400a4c:	2300      	movs	r3, #0
  400a4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400a52:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400a56:	4628      	mov	r0, r5
  400a58:	4c2b      	ldr	r4, [pc, #172]	; (400b08 <readTouchZ+0xc8>)
  400a5a:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_OUTPUT_1, YM_MASK, PIO_DEFAULT);
  400a5c:	4e2b      	ldr	r6, [pc, #172]	; (400b0c <readTouchZ+0xcc>)
  400a5e:	2300      	movs	r3, #0
  400a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400a64:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400a68:	4630      	mov	r0, r6
  400a6a:	47a0      	blx	r4
  pio_configure(YP_PIO, PIO_INPUT, YP_MASK, PIO_DEFAULT);
  400a6c:	2300      	movs	r3, #0
  400a6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400a72:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400a76:	4630      	mov	r0, r6
  400a78:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_INPUT, XM_MASK, PIO_DEFAULT);
  400a7a:	2300      	movs	r3, #0
  400a7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400a80:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400a84:	4628      	mov	r0, r5
  400a86:	47a0      	blx	r4
  400a88:	2201      	movs	r2, #1
  400a8a:	4b21      	ldr	r3, [pc, #132]	; (400b10 <readTouchZ+0xd0>)
  400a8c:	615a      	str	r2, [r3, #20]
  400a8e:	2202      	movs	r2, #2
  400a90:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400a94:	615a      	str	r2, [r3, #20]
  delay_ms(5);
  400a96:	481f      	ldr	r0, [pc, #124]	; (400b14 <readTouchZ+0xd4>)
  400a98:	4b1f      	ldr	r3, [pc, #124]	; (400b18 <readTouchZ+0xd8>)
  400a9a:	4798      	blx	r3
  int z1 = readXm();
  400a9c:	4c1f      	ldr	r4, [pc, #124]	; (400b1c <readTouchZ+0xdc>)
  400a9e:	47a0      	blx	r4
  400aa0:	ee08 0a90 	vmov	s17, r0
  int z2 = readYp();
  400aa4:	4b1e      	ldr	r3, [pc, #120]	; (400b20 <readTouchZ+0xe0>)
  400aa6:	4798      	blx	r3
  400aa8:	ee09 0a10 	vmov	s18, r0
  configReadTouchX();
  400aac:	4b1d      	ldr	r3, [pc, #116]	; (400b24 <readTouchZ+0xe4>)
  400aae:	4798      	blx	r3
  int x  = readXm();
  400ab0:	47a0      	blx	r4
  rtouch = z2;
  400ab2:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
  rtouch /= z1;
  400ab6:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  400aba:	ee89 7a28 	vdiv.f32	s14, s18, s17
  rtouch -= 1;
  400abe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  400ac2:	ee37 7a67 	vsub.f32	s14, s14, s15
  rtouch *= x;
  400ac6:	ee07 0a90 	vmov	s15, r0
  400aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400ace:	ee27 7a87 	vmul.f32	s14, s15, s14
  rtouch *= rxplate;
  400ad2:	eef8 7ac8 	vcvt.f32.s32	s15, s16
  400ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
  rtouch /= 1024;
  400ada:	ed9f 7a13 	vldr	s14, [pc, #76]	; 400b28 <readTouchZ+0xe8>
  400ade:	ee67 7a87 	vmul.f32	s15, s15, s14
  if(rtouch < 100.0)
  400ae2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 400b2c <readTouchZ+0xec>
  400ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
  400aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400aee:	d501      	bpl.n	400af4 <readTouchZ+0xb4>
  rtouch = 1024.0;
  400af0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 400b30 <readTouchZ+0xf0>
}
  400af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  400af8:	ee17 0a90 	vmov	r0, s15
  400afc:	ecbd 8b04 	vpop	{d8-d9}
  400b00:	bd70      	pop	{r4, r5, r6, pc}
  400b02:	bf00      	nop
  400b04:	400e1200 	.word	0x400e1200
  400b08:	004251fd 	.word	0x004251fd
  400b0c:	400e1400 	.word	0x400e1400
  400b10:	4003c000 	.word	0x4003c000
  400b14:	0003dbc2 	.word	0x0003dbc2
  400b18:	20400001 	.word	0x20400001
  400b1c:	00400959 	.word	0x00400959
  400b20:	00400949 	.word	0x00400949
  400b24:	00400969 	.word	0x00400969
  400b28:	3a800000 	.word	0x3a800000
  400b2c:	42c80000 	.word	0x42c80000
  400b30:	44800000 	.word	0x44800000

00400b34 <readTouchX>:
int readTouchX(void) {
  400b34:	b508      	push	{r3, lr}
  return(readYp());
  400b36:	4b01      	ldr	r3, [pc, #4]	; (400b3c <readTouchX+0x8>)
  400b38:	4798      	blx	r3
}
  400b3a:	bd08      	pop	{r3, pc}
  400b3c:	00400949 	.word	0x00400949

00400b40 <readTouchY>:
int readTouchY(void) {
  400b40:	b508      	push	{r3, lr}
  return (readXm());
  400b42:	4b01      	ldr	r3, [pc, #4]	; (400b48 <readTouchY+0x8>)
  400b44:	4798      	blx	r3
}
  400b46:	bd08      	pop	{r3, pc}
  400b48:	00400959 	.word	0x00400959

00400b4c <readRawPoint>:

void readRawPoint(int *x, int *y, int *z) {
  400b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b4e:	b0c1      	sub	sp, #260	; 0x104
  400b50:	4607      	mov	r7, r0
  400b52:	460e      	mov	r6, r1
  400b54:	4615      	mov	r5, r2
  int samples[TOUCH_NUMSAMPLES];
  char valid = 0 ;
  
  configReadTouchX();
  400b56:	4b16      	ldr	r3, [pc, #88]	; (400bb0 <readRawPoint+0x64>)
  400b58:	4798      	blx	r3
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  400b5a:	2400      	movs	r4, #0
  400b5c:	e007      	b.n	400b6e <readRawPoint+0x22>
    delay_us(1);
  400b5e:	2033      	movs	r0, #51	; 0x33
  400b60:	4b14      	ldr	r3, [pc, #80]	; (400bb4 <readRawPoint+0x68>)
  400b62:	4798      	blx	r3
    samples[i] = readTouchX();
  400b64:	4b14      	ldr	r3, [pc, #80]	; (400bb8 <readRawPoint+0x6c>)
  400b66:	4798      	blx	r3
  400b68:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  400b6c:	3401      	adds	r4, #1
  400b6e:	2c3f      	cmp	r4, #63	; 0x3f
  400b70:	ddf5      	ble.n	400b5e <readRawPoint+0x12>
  }
  insert_sort(samples, TOUCH_NUMSAMPLES);
  400b72:	2140      	movs	r1, #64	; 0x40
  400b74:	4668      	mov	r0, sp
  400b76:	4b11      	ldr	r3, [pc, #68]	; (400bbc <readRawPoint+0x70>)
  400b78:	4798      	blx	r3
  *x = (samples[TOUCH_NUMSAMPLES / 2]);
  400b7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
  400b7c:	603b      	str	r3, [r7, #0]
  
  configReadTouchY();
  400b7e:	4b10      	ldr	r3, [pc, #64]	; (400bc0 <readRawPoint+0x74>)
  400b80:	4798      	blx	r3
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  400b82:	2400      	movs	r4, #0
  400b84:	e004      	b.n	400b90 <readRawPoint+0x44>
    samples[i] = readTouchY();
  400b86:	4b0f      	ldr	r3, [pc, #60]	; (400bc4 <readRawPoint+0x78>)
  400b88:	4798      	blx	r3
  400b8a:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  400b8e:	3401      	adds	r4, #1
  400b90:	2c3f      	cmp	r4, #63	; 0x3f
  400b92:	ddf8      	ble.n	400b86 <readRawPoint+0x3a>
  }
  insert_sort(samples, TOUCH_NUMSAMPLES);
  400b94:	2140      	movs	r1, #64	; 0x40
  400b96:	4668      	mov	r0, sp
  400b98:	4b08      	ldr	r3, [pc, #32]	; (400bbc <readRawPoint+0x70>)
  400b9a:	4798      	blx	r3
  *y = (samples[TOUCH_NUMSAMPLES / 2]);
  400b9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  400b9e:	6033      	str	r3, [r6, #0]
  
  *z = readTouchZ(300);
  400ba0:	f44f 7096 	mov.w	r0, #300	; 0x12c
  400ba4:	4b08      	ldr	r3, [pc, #32]	; (400bc8 <readRawPoint+0x7c>)
  400ba6:	4798      	blx	r3
  400ba8:	6028      	str	r0, [r5, #0]
}
  400baa:	b041      	add	sp, #260	; 0x104
  400bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400bae:	bf00      	nop
  400bb0:	00400969 	.word	0x00400969
  400bb4:	20400001 	.word	0x20400001
  400bb8:	00400b35 	.word	0x00400b35
  400bbc:	0040085d 	.word	0x0040085d
  400bc0:	004009d5 	.word	0x004009d5
  400bc4:	00400b41 	.word	0x00400b41
  400bc8:	00400a41 	.word	0x00400a41

00400bcc <pointToCoordinate>:

// returns if valid touch
// checks Z pressure!
int pointToCoordinate(int x, int y, int z, int *px, int *py) {
  400bcc:	b510      	push	{r4, lr}
  int xtemp, ytemp;
  
  xtemp = TOUCH_LCD_WIDTH*(x-TOUCH_X_240)/(TOUCH_X_0-TOUCH_X_240);
  400bce:	f2a0 20ee 	subw	r0, r0, #750	; 0x2ee
  400bd2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  400bd6:	0104      	lsls	r4, r0, #4
  400bd8:	4818      	ldr	r0, [pc, #96]	; (400c3c <pointToCoordinate+0x70>)
  400bda:	fb80 e004 	smull	lr, r0, r0, r4
  400bde:	4420      	add	r0, r4
  400be0:	17e4      	asrs	r4, r4, #31
  400be2:	ebc4 24e0 	rsb	r4, r4, r0, asr #11
  if(xtemp > TOUCH_LCD_WIDTH) xtemp=TOUCH_LCD_WIDTH;
  400be6:	2cf0      	cmp	r4, #240	; 0xf0
  400be8:	dd00      	ble.n	400bec <pointToCoordinate+0x20>
  400bea:	24f0      	movs	r4, #240	; 0xf0
  if(xtemp < 0) xtemp=0;
  400bec:	2c00      	cmp	r4, #0
  400bee:	db1e      	blt.n	400c2e <pointToCoordinate+0x62>
  *py = xtemp;
  400bf0:	9802      	ldr	r0, [sp, #8]
  400bf2:	6004      	str	r4, [r0, #0]
    
  ytemp = TOUCH_LCD_HEIGHT - TOUCH_LCD_HEIGHT*(y-TOUCH_Y_0)/(TOUCH_Y_320-TOUCH_Y_0);
  400bf4:	f5a1 711b 	sub.w	r1, r1, #620	; 0x26c
  400bf8:	ebc1 6001 	rsb	r0, r1, r1, lsl #24
  400bfc:	ebc1 0180 	rsb	r1, r1, r0, lsl #2
  400c00:	0188      	lsls	r0, r1, #6
  400c02:	490f      	ldr	r1, [pc, #60]	; (400c40 <pointToCoordinate+0x74>)
  400c04:	fb81 4100 	smull	r4, r1, r1, r0
  400c08:	4401      	add	r1, r0
  400c0a:	17c0      	asrs	r0, r0, #31
  400c0c:	ebc0 20e1 	rsb	r0, r0, r1, asr #11
  400c10:	f500 70a0 	add.w	r0, r0, #320	; 0x140
  if(ytemp > TOUCH_LCD_HEIGHT) ytemp=TOUCH_LCD_HEIGHT;
  400c14:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  400c18:	dd01      	ble.n	400c1e <pointToCoordinate+0x52>
  400c1a:	f44f 70a0 	mov.w	r0, #320	; 0x140
  if(ytemp < 0) ytemp=0;
  400c1e:	2800      	cmp	r0, #0
  400c20:	db07      	blt.n	400c32 <pointToCoordinate+0x66>
  *px = ytemp;
  400c22:	6018      	str	r0, [r3, #0]

  if(z < TOUCH_PRESSURE_DETECT) {
  400c24:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
  400c28:	db05      	blt.n	400c36 <pointToCoordinate+0x6a>
    return 1;
  }  
  return 0;
  400c2a:	2000      	movs	r0, #0
}
  400c2c:	bd10      	pop	{r4, pc}
  if(xtemp < 0) xtemp=0;
  400c2e:	2400      	movs	r4, #0
  400c30:	e7de      	b.n	400bf0 <pointToCoordinate+0x24>
  if(ytemp < 0) ytemp=0;
  400c32:	2000      	movs	r0, #0
  400c34:	e7f5      	b.n	400c22 <pointToCoordinate+0x56>
    return 1;
  400c36:	2001      	movs	r0, #1
  400c38:	bd10      	pop	{r4, pc}
  400c3a:	bf00      	nop
  400c3c:	cd9a6735 	.word	0xcd9a6735
  400c40:	bc97c21f 	.word	0xbc97c21f

00400c44 <readPoint>:

int readPoint(int *px, int *py){
  400c44:	b530      	push	{r4, r5, lr}
  400c46:	b087      	sub	sp, #28
  400c48:	4604      	mov	r4, r0
  400c4a:	460d      	mov	r5, r1
  int x, y, z;
  readRawPoint(&x, &y, &z);
  400c4c:	aa03      	add	r2, sp, #12
  400c4e:	a904      	add	r1, sp, #16
  400c50:	a805      	add	r0, sp, #20
  400c52:	4b05      	ldr	r3, [pc, #20]	; (400c68 <readPoint+0x24>)
  400c54:	4798      	blx	r3
  return(pointToCoordinate(x,y,z, px, py));
  400c56:	9500      	str	r5, [sp, #0]
  400c58:	4623      	mov	r3, r4
  400c5a:	9a03      	ldr	r2, [sp, #12]
  400c5c:	9904      	ldr	r1, [sp, #16]
  400c5e:	9805      	ldr	r0, [sp, #20]
  400c60:	4c02      	ldr	r4, [pc, #8]	; (400c6c <readPoint+0x28>)
  400c62:	47a0      	blx	r4
}
  400c64:	b007      	add	sp, #28
  400c66:	bd30      	pop	{r4, r5, pc}
  400c68:	00400b4d 	.word	0x00400b4d
  400c6c:	00400bcd 	.word	0x00400bcd

00400c70 <ili9341_send_command>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400c70:	2240      	movs	r2, #64	; 0x40
  400c72:	4b10      	ldr	r3, [pc, #64]	; (400cb4 <ili9341_send_command+0x44>)
  400c74:	635a      	str	r2, [r3, #52]	; 0x34
  400c76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400c7a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400c7e:	635a      	str	r2, [r3, #52]	; 0x34
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400c80:	4b0d      	ldr	r3, [pc, #52]	; (400cb8 <ili9341_send_command+0x48>)
  400c82:	691b      	ldr	r3, [r3, #16]
  400c84:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c88:	d110      	bne.n	400cac <ili9341_send_command+0x3c>
		return 1;
	} else {
		return 0;
  400c8a:	2300      	movs	r3, #0
 * \brief Helper function to wait for the last send operation to complete
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
	/* Wait for TX to complete */
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400c8c:	2b00      	cmp	r3, #0
  400c8e:	d0f7      	beq.n	400c80 <ili9341_send_command+0x10>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400c90:	4b09      	ldr	r3, [pc, #36]	; (400cb8 <ili9341_send_command+0x48>)
  400c92:	60d8      	str	r0, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400c94:	4b08      	ldr	r3, [pc, #32]	; (400cb8 <ili9341_send_command+0x48>)
  400c96:	691b      	ldr	r3, [r3, #16]
  400c98:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c9c:	d108      	bne.n	400cb0 <ili9341_send_command+0x40>
		return 0;
  400c9e:	2300      	movs	r3, #0
  400ca0:	2b00      	cmp	r3, #0
  400ca2:	d0f7      	beq.n	400c94 <ili9341_send_command+0x24>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ca4:	2240      	movs	r2, #64	; 0x40
  400ca6:	4b03      	ldr	r3, [pc, #12]	; (400cb4 <ili9341_send_command+0x44>)
  400ca8:	631a      	str	r2, [r3, #48]	; 0x30
  400caa:	4770      	bx	lr
		return 1;
  400cac:	2301      	movs	r3, #1
  400cae:	e7ed      	b.n	400c8c <ili9341_send_command+0x1c>
  400cb0:	2301      	movs	r3, #1
  400cb2:	e7f5      	b.n	400ca0 <ili9341_send_command+0x30>
  400cb4:	400e0e00 	.word	0x400e0e00
  400cb8:	40008000 	.word	0x40008000

00400cbc <ili9341_send_draw_limits>:
 * drawing limits to the display, as set through the various limit functions.
 *
 * \param send_end_limits  True to also send the lower-right drawing limits
 */
static void ili9341_send_draw_limits(const bool send_end_limits)
{
  400cbc:	b510      	push	{r4, lr}
  400cbe:	4604      	mov	r4, r0
	ili9341_send_command(ILI9341_CMD_COLUMN_ADDRESS_SET);
  400cc0:	202a      	movs	r0, #42	; 0x2a
  400cc2:	4b4e      	ldr	r3, [pc, #312]	; (400dfc <ili9341_send_draw_limits+0x140>)
  400cc4:	4798      	blx	r3
	ili9341_send_byte(limit_start_x >> 8);
  400cc6:	4b4e      	ldr	r3, [pc, #312]	; (400e00 <ili9341_send_draw_limits+0x144>)
  400cc8:	f9b3 2000 	ldrsh.w	r2, [r3]
  400ccc:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400cd0:	4b4c      	ldr	r3, [pc, #304]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400cd2:	691b      	ldr	r3, [r3, #16]
  400cd4:	f413 7f00 	tst.w	r3, #512	; 0x200
  400cd8:	d17b      	bne.n	400dd2 <ili9341_send_draw_limits+0x116>
		return 0;
  400cda:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400cdc:	2b00      	cmp	r3, #0
  400cde:	d0f7      	beq.n	400cd0 <ili9341_send_draw_limits+0x14>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400ce0:	4b48      	ldr	r3, [pc, #288]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400ce2:	60d9      	str	r1, [r3, #12]
	ili9341_send_byte(limit_start_x & 0xFF);
  400ce4:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400ce6:	4b47      	ldr	r3, [pc, #284]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400ce8:	691b      	ldr	r3, [r3, #16]
  400cea:	f413 7f00 	tst.w	r3, #512	; 0x200
  400cee:	d172      	bne.n	400dd6 <ili9341_send_draw_limits+0x11a>
		return 0;
  400cf0:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400cf2:	2b00      	cmp	r3, #0
  400cf4:	d0f7      	beq.n	400ce6 <ili9341_send_draw_limits+0x2a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400cf6:	4b43      	ldr	r3, [pc, #268]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400cf8:	60da      	str	r2, [r3, #12]
	if (send_end_limits) {
  400cfa:	b1cc      	cbz	r4, 400d30 <ili9341_send_draw_limits+0x74>
		ili9341_send_byte(limit_end_x >> 8);
  400cfc:	4b42      	ldr	r3, [pc, #264]	; (400e08 <ili9341_send_draw_limits+0x14c>)
  400cfe:	f9b3 2000 	ldrsh.w	r2, [r3]
  400d02:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400d06:	4b3f      	ldr	r3, [pc, #252]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d08:	691b      	ldr	r3, [r3, #16]
  400d0a:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d0e:	d164      	bne.n	400dda <ili9341_send_draw_limits+0x11e>
		return 0;
  400d10:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400d12:	2b00      	cmp	r3, #0
  400d14:	d0f7      	beq.n	400d06 <ili9341_send_draw_limits+0x4a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400d16:	4b3b      	ldr	r3, [pc, #236]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d18:	60d9      	str	r1, [r3, #12]
		ili9341_send_byte(limit_end_x & 0xFF);
  400d1a:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400d1c:	4b39      	ldr	r3, [pc, #228]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d1e:	691b      	ldr	r3, [r3, #16]
  400d20:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d24:	d15b      	bne.n	400dde <ili9341_send_draw_limits+0x122>
		return 0;
  400d26:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400d28:	2b00      	cmp	r3, #0
  400d2a:	d0f7      	beq.n	400d1c <ili9341_send_draw_limits+0x60>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400d2c:	4b35      	ldr	r3, [pc, #212]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d2e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400d30:	4b34      	ldr	r3, [pc, #208]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d32:	691b      	ldr	r3, [r3, #16]
  400d34:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d38:	d153      	bne.n	400de2 <ili9341_send_draw_limits+0x126>
		return 0;
  400d3a:	2300      	movs	r3, #0
  400d3c:	2b00      	cmp	r3, #0
  400d3e:	d0f7      	beq.n	400d30 <ili9341_send_draw_limits+0x74>
  400d40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400d44:	4b31      	ldr	r3, [pc, #196]	; (400e0c <ili9341_send_draw_limits+0x150>)
  400d46:	631a      	str	r2, [r3, #48]	; 0x30
	}
	ili9341_wait_for_send_done();
	ili9341_deselect_chip();

	ili9341_send_command(ILI9341_CMD_PAGE_ADDRESS_SET);
  400d48:	202b      	movs	r0, #43	; 0x2b
  400d4a:	4b2c      	ldr	r3, [pc, #176]	; (400dfc <ili9341_send_draw_limits+0x140>)
  400d4c:	4798      	blx	r3
	ili9341_send_byte(limit_start_y >> 8);
  400d4e:	4b30      	ldr	r3, [pc, #192]	; (400e10 <ili9341_send_draw_limits+0x154>)
  400d50:	f9b3 2000 	ldrsh.w	r2, [r3]
  400d54:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400d58:	4b2a      	ldr	r3, [pc, #168]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d5a:	691b      	ldr	r3, [r3, #16]
  400d5c:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d60:	d141      	bne.n	400de6 <ili9341_send_draw_limits+0x12a>
		return 0;
  400d62:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400d64:	2b00      	cmp	r3, #0
  400d66:	d0f7      	beq.n	400d58 <ili9341_send_draw_limits+0x9c>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400d68:	4b26      	ldr	r3, [pc, #152]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d6a:	60d9      	str	r1, [r3, #12]
	ili9341_send_byte(limit_start_y & 0xFF);
  400d6c:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400d6e:	4b25      	ldr	r3, [pc, #148]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d70:	691b      	ldr	r3, [r3, #16]
  400d72:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d76:	d138      	bne.n	400dea <ili9341_send_draw_limits+0x12e>
		return 0;
  400d78:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400d7a:	2b00      	cmp	r3, #0
  400d7c:	d0f7      	beq.n	400d6e <ili9341_send_draw_limits+0xb2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400d7e:	4b21      	ldr	r3, [pc, #132]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d80:	60da      	str	r2, [r3, #12]
	if (send_end_limits) {
  400d82:	b1cc      	cbz	r4, 400db8 <ili9341_send_draw_limits+0xfc>
		ili9341_send_byte(limit_end_y >> 8);
  400d84:	4b23      	ldr	r3, [pc, #140]	; (400e14 <ili9341_send_draw_limits+0x158>)
  400d86:	f9b3 2000 	ldrsh.w	r2, [r3]
  400d8a:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400d8e:	4b1d      	ldr	r3, [pc, #116]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d90:	691b      	ldr	r3, [r3, #16]
  400d92:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d96:	d12a      	bne.n	400dee <ili9341_send_draw_limits+0x132>
		return 0;
  400d98:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400d9a:	2b00      	cmp	r3, #0
  400d9c:	d0f7      	beq.n	400d8e <ili9341_send_draw_limits+0xd2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400d9e:	4b19      	ldr	r3, [pc, #100]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400da0:	60d9      	str	r1, [r3, #12]
		ili9341_send_byte(limit_end_y & 0xFF);
  400da2:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400da4:	4b17      	ldr	r3, [pc, #92]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400da6:	691b      	ldr	r3, [r3, #16]
  400da8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400dac:	d121      	bne.n	400df2 <ili9341_send_draw_limits+0x136>
		return 0;
  400dae:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400db0:	2b00      	cmp	r3, #0
  400db2:	d0f7      	beq.n	400da4 <ili9341_send_draw_limits+0xe8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400db4:	4b13      	ldr	r3, [pc, #76]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400db6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400db8:	4b12      	ldr	r3, [pc, #72]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400dba:	691b      	ldr	r3, [r3, #16]
  400dbc:	f413 7f00 	tst.w	r3, #512	; 0x200
  400dc0:	d119      	bne.n	400df6 <ili9341_send_draw_limits+0x13a>
		return 0;
  400dc2:	2300      	movs	r3, #0
  400dc4:	2b00      	cmp	r3, #0
  400dc6:	d0f7      	beq.n	400db8 <ili9341_send_draw_limits+0xfc>
  400dc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400dcc:	4b0f      	ldr	r3, [pc, #60]	; (400e0c <ili9341_send_draw_limits+0x150>)
  400dce:	631a      	str	r2, [r3, #48]	; 0x30
  400dd0:	bd10      	pop	{r4, pc}
		return 1;
  400dd2:	2301      	movs	r3, #1
  400dd4:	e782      	b.n	400cdc <ili9341_send_draw_limits+0x20>
  400dd6:	2301      	movs	r3, #1
  400dd8:	e78b      	b.n	400cf2 <ili9341_send_draw_limits+0x36>
  400dda:	2301      	movs	r3, #1
  400ddc:	e799      	b.n	400d12 <ili9341_send_draw_limits+0x56>
  400dde:	2301      	movs	r3, #1
  400de0:	e7a2      	b.n	400d28 <ili9341_send_draw_limits+0x6c>
  400de2:	2301      	movs	r3, #1
  400de4:	e7aa      	b.n	400d3c <ili9341_send_draw_limits+0x80>
  400de6:	2301      	movs	r3, #1
  400de8:	e7bc      	b.n	400d64 <ili9341_send_draw_limits+0xa8>
  400dea:	2301      	movs	r3, #1
  400dec:	e7c5      	b.n	400d7a <ili9341_send_draw_limits+0xbe>
  400dee:	2301      	movs	r3, #1
  400df0:	e7d3      	b.n	400d9a <ili9341_send_draw_limits+0xde>
  400df2:	2301      	movs	r3, #1
  400df4:	e7dc      	b.n	400db0 <ili9341_send_draw_limits+0xf4>
  400df6:	2301      	movs	r3, #1
  400df8:	e7e4      	b.n	400dc4 <ili9341_send_draw_limits+0x108>
  400dfa:	bf00      	nop
  400dfc:	00400c71 	.word	0x00400c71
  400e00:	20400aa4 	.word	0x20400aa4
  400e04:	40008000 	.word	0x40008000
  400e08:	20400aa0 	.word	0x20400aa0
  400e0c:	400e1400 	.word	0x400e1400
  400e10:	20400aa6 	.word	0x20400aa6
  400e14:	20400aa2 	.word	0x20400aa2

00400e18 <ili9341_interface_init>:
 * interface through either the SPI module in master mode or the USART in
 * Master SPI mode.  Configuration must be done in the associated
 * conf_ili9341.h file.
 */
static void ili9341_interface_init(void)
{
  400e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400e1c:	b084      	sub	sp, #16
	#error Interface for ILI9341 has not been selected or interface not\
	supported, please configure component driver using the conf_ili9341.h\
	file!
#endif

	struct spi_device device = { .id = BOARD_ILI9488_SPI_NPCS, };     	// Board specific chip select configuration
  400e1e:	2703      	movs	r7, #3
  400e20:	ad04      	add	r5, sp, #16
  400e22:	f845 7d04 	str.w	r7, [r5, #-4]!

	spi_master_init(CONF_ILI9341_SPI);
  400e26:	4c10      	ldr	r4, [pc, #64]	; (400e68 <ili9341_interface_init+0x50>)
  400e28:	4620      	mov	r0, r4
  400e2a:	4b10      	ldr	r3, [pc, #64]	; (400e6c <ili9341_interface_init+0x54>)
  400e2c:	4798      	blx	r3
	spi_master_setup_device(CONF_ILI9341_SPI, &device, spi_flags, CONF_ILI9341_CLOCK_SPEED, spi_select_id);
  400e2e:	2600      	movs	r6, #0
  400e30:	9600      	str	r6, [sp, #0]
  400e32:	4b0f      	ldr	r3, [pc, #60]	; (400e70 <ili9341_interface_init+0x58>)
  400e34:	4632      	mov	r2, r6
  400e36:	4629      	mov	r1, r5
  400e38:	4620      	mov	r0, r4
  400e3a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 400e84 <ili9341_interface_init+0x6c>
  400e3e:	47c0      	blx	r8
 	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  400e40:	4632      	mov	r2, r6
  400e42:	4639      	mov	r1, r7
  400e44:	4620      	mov	r0, r4
  400e46:	4b0b      	ldr	r3, [pc, #44]	; (400e74 <ili9341_interface_init+0x5c>)
  400e48:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400e4a:	2601      	movs	r6, #1
  400e4c:	6026      	str	r6, [r4, #0]
	spi_enable(CONF_ILI9341_SPI);
  spi_select_device(CONF_ILI9341_SPI, &device);
  400e4e:	4629      	mov	r1, r5
  400e50:	4620      	mov	r0, r4
  400e52:	4b09      	ldr	r3, [pc, #36]	; (400e78 <ili9341_interface_init+0x60>)
  400e54:	4798      	blx	r3
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400e56:	23f0      	movs	r3, #240	; 0xf0
  400e58:	60e3      	str	r3, [r4, #12]
  400e5a:	60e6      	str	r6, [r4, #12]
	/* Send one dummy byte for the spi_is_tx_ok() to work as expected */
	spi_write_single(CONF_ILI9341_SPI, 0xF0);
  
  // from adafruit lib: https://github.com/adafruit/Adafruit_ILI9341/blob/1e4305308aae231bb5c475de9afc671e78caa722/Adafruit_ILI9341.cpp#L194
  spi_write_single(CONF_ILI9341_SPI, ILI9341_CMD_SOFTWARE_RESET); // Engage software reset
  delay_ms(150);
  400e5c:	4807      	ldr	r0, [pc, #28]	; (400e7c <ili9341_interface_init+0x64>)
  400e5e:	4b08      	ldr	r3, [pc, #32]	; (400e80 <ili9341_interface_init+0x68>)
  400e60:	4798      	blx	r3
}
  400e62:	b004      	add	sp, #16
  400e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e68:	40008000 	.word	0x40008000
  400e6c:	00424cad 	.word	0x00424cad
  400e70:	02625a00 	.word	0x02625a00
  400e74:	0042566d 	.word	0x0042566d
  400e78:	00424d81 	.word	0x00424d81
  400e7c:	0073c0b7 	.word	0x0073c0b7
  400e80:	20400001 	.word	0x20400001
  400e84:	00424d01 	.word	0x00424d01

00400e88 <ili9341_reset_display>:
 * \brief Reset the display using the digital control interface
 *
 * Controls the reset pin of the display controller to reset the display.
 */
static void ili9341_reset_display(void)
{
  400e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e8a:	4d07      	ldr	r5, [pc, #28]	; (400ea8 <ili9341_reset_display+0x20>)
  400e8c:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
  400e90:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(LCD_SPI_RESET_PIO, true);
	delay_ms(10);
  400e92:	4f06      	ldr	r7, [pc, #24]	; (400eac <ili9341_reset_display+0x24>)
  400e94:	4638      	mov	r0, r7
  400e96:	4c06      	ldr	r4, [pc, #24]	; (400eb0 <ili9341_reset_display+0x28>)
  400e98:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400e9a:	636e      	str	r6, [r5, #52]	; 0x34
	ioport_set_pin_level(LCD_SPI_RESET_PIO, false);
	delay_ms(10);
  400e9c:	4638      	mov	r0, r7
  400e9e:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ea0:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(LCD_SPI_RESET_PIO, true);
	delay_ms(150);
  400ea2:	4804      	ldr	r0, [pc, #16]	; (400eb4 <ili9341_reset_display+0x2c>)
  400ea4:	47a0      	blx	r4
  400ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ea8:	400e0e00 	.word	0x400e0e00
  400eac:	0007b784 	.word	0x0007b784
  400eb0:	20400001 	.word	0x20400001
  400eb4:	0073c0b7 	.word	0x0073c0b7

00400eb8 <ili9341_exit_standby>:
{
  400eb8:	b570      	push	{r4, r5, r6, lr}
	ili9341_send_command(ILI9341_CMD_SLEEP_OUT);
  400eba:	2011      	movs	r0, #17
  400ebc:	4e06      	ldr	r6, [pc, #24]	; (400ed8 <ili9341_exit_standby+0x20>)
  400ebe:	47b0      	blx	r6
  400ec0:	4c06      	ldr	r4, [pc, #24]	; (400edc <ili9341_exit_standby+0x24>)
  400ec2:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  400ec6:	6325      	str	r5, [r4, #48]	; 0x30
	delay_ms(150);
  400ec8:	4805      	ldr	r0, [pc, #20]	; (400ee0 <ili9341_exit_standby+0x28>)
  400eca:	4b06      	ldr	r3, [pc, #24]	; (400ee4 <ili9341_exit_standby+0x2c>)
  400ecc:	4798      	blx	r3
	ili9341_send_command(ILI9341_CMD_DISPLAY_ON);
  400ece:	2029      	movs	r0, #41	; 0x29
  400ed0:	47b0      	blx	r6
  400ed2:	6325      	str	r5, [r4, #48]	; 0x30
  400ed4:	bd70      	pop	{r4, r5, r6, pc}
  400ed6:	bf00      	nop
  400ed8:	00400c71 	.word	0x00400c71
  400edc:	400e1400 	.word	0x400e1400
  400ee0:	0073c0b7 	.word	0x0073c0b7
  400ee4:	20400001 	.word	0x20400001

00400ee8 <ili9341_set_top_left_limit>:
{
  400ee8:	b508      	push	{r3, lr}
	limit_start_x = x;
  400eea:	4b04      	ldr	r3, [pc, #16]	; (400efc <ili9341_set_top_left_limit+0x14>)
  400eec:	8018      	strh	r0, [r3, #0]
	limit_start_y = y;
  400eee:	4b04      	ldr	r3, [pc, #16]	; (400f00 <ili9341_set_top_left_limit+0x18>)
  400ef0:	8019      	strh	r1, [r3, #0]
	ili9341_send_draw_limits(false);
  400ef2:	2000      	movs	r0, #0
  400ef4:	4b03      	ldr	r3, [pc, #12]	; (400f04 <ili9341_set_top_left_limit+0x1c>)
  400ef6:	4798      	blx	r3
  400ef8:	bd08      	pop	{r3, pc}
  400efa:	bf00      	nop
  400efc:	20400aa4 	.word	0x20400aa4
  400f00:	20400aa6 	.word	0x20400aa6
  400f04:	00400cbd 	.word	0x00400cbd

00400f08 <ili9341_set_bottom_right_limit>:
{
  400f08:	b508      	push	{r3, lr}
	limit_end_x = x;
  400f0a:	4b04      	ldr	r3, [pc, #16]	; (400f1c <ili9341_set_bottom_right_limit+0x14>)
  400f0c:	8018      	strh	r0, [r3, #0]
	limit_end_y = y;
  400f0e:	4b04      	ldr	r3, [pc, #16]	; (400f20 <ili9341_set_bottom_right_limit+0x18>)
  400f10:	8019      	strh	r1, [r3, #0]
	ili9341_send_draw_limits(true);
  400f12:	2001      	movs	r0, #1
  400f14:	4b03      	ldr	r3, [pc, #12]	; (400f24 <ili9341_set_bottom_right_limit+0x1c>)
  400f16:	4798      	blx	r3
  400f18:	bd08      	pop	{r3, pc}
  400f1a:	bf00      	nop
  400f1c:	20400aa0 	.word	0x20400aa0
  400f20:	20400aa2 	.word	0x20400aa2
  400f24:	00400cbd 	.word	0x00400cbd

00400f28 <ili9341_set_limits>:
{
  400f28:	b510      	push	{r4, lr}
	limit_start_x = start_x;
  400f2a:	4c06      	ldr	r4, [pc, #24]	; (400f44 <ili9341_set_limits+0x1c>)
  400f2c:	8020      	strh	r0, [r4, #0]
	limit_start_y = start_y;
  400f2e:	4806      	ldr	r0, [pc, #24]	; (400f48 <ili9341_set_limits+0x20>)
  400f30:	8001      	strh	r1, [r0, #0]
	limit_end_x = end_x;
  400f32:	4906      	ldr	r1, [pc, #24]	; (400f4c <ili9341_set_limits+0x24>)
  400f34:	800a      	strh	r2, [r1, #0]
	limit_end_y = end_y;
  400f36:	4a06      	ldr	r2, [pc, #24]	; (400f50 <ili9341_set_limits+0x28>)
  400f38:	8013      	strh	r3, [r2, #0]
	ili9341_send_draw_limits(true);
  400f3a:	2001      	movs	r0, #1
  400f3c:	4b05      	ldr	r3, [pc, #20]	; (400f54 <ili9341_set_limits+0x2c>)
  400f3e:	4798      	blx	r3
  400f40:	bd10      	pop	{r4, pc}
  400f42:	bf00      	nop
  400f44:	20400aa4 	.word	0x20400aa4
  400f48:	20400aa6 	.word	0x20400aa6
  400f4c:	20400aa0 	.word	0x20400aa0
  400f50:	20400aa2 	.word	0x20400aa2
  400f54:	00400cbd 	.word	0x00400cbd

00400f58 <ili9341_copy_pixels_to_screen>:
{
  400f58:	b538      	push	{r3, r4, r5, lr}
  400f5a:	4605      	mov	r5, r0
  400f5c:	460c      	mov	r4, r1
	ili9341_send_command(ILI9341_CMD_MEMORY_WRITE);
  400f5e:	202c      	movs	r0, #44	; 0x2c
  400f60:	4b18      	ldr	r3, [pc, #96]	; (400fc4 <ili9341_copy_pixels_to_screen+0x6c>)
  400f62:	4798      	blx	r3
	while (count--) {
  400f64:	e018      	b.n	400f98 <ili9341_copy_pixels_to_screen+0x40>
		ili9341_send_byte(*pixel);
  400f66:	782a      	ldrb	r2, [r5, #0]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f68:	4b17      	ldr	r3, [pc, #92]	; (400fc8 <ili9341_copy_pixels_to_screen+0x70>)
  400f6a:	691b      	ldr	r3, [r3, #16]
  400f6c:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f70:	d122      	bne.n	400fb8 <ili9341_copy_pixels_to_screen+0x60>
		return 0;
  400f72:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400f74:	2b00      	cmp	r3, #0
  400f76:	d0f7      	beq.n	400f68 <ili9341_copy_pixels_to_screen+0x10>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400f78:	4b13      	ldr	r3, [pc, #76]	; (400fc8 <ili9341_copy_pixels_to_screen+0x70>)
  400f7a:	60da      	str	r2, [r3, #12]
		ili9341_send_byte(*pixel >> 8);
  400f7c:	882a      	ldrh	r2, [r5, #0]
  400f7e:	0a12      	lsrs	r2, r2, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f80:	4b11      	ldr	r3, [pc, #68]	; (400fc8 <ili9341_copy_pixels_to_screen+0x70>)
  400f82:	691b      	ldr	r3, [r3, #16]
  400f84:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f88:	d118      	bne.n	400fbc <ili9341_copy_pixels_to_screen+0x64>
		return 0;
  400f8a:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400f8c:	2b00      	cmp	r3, #0
  400f8e:	d0f7      	beq.n	400f80 <ili9341_copy_pixels_to_screen+0x28>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400f90:	4b0d      	ldr	r3, [pc, #52]	; (400fc8 <ili9341_copy_pixels_to_screen+0x70>)
  400f92:	60da      	str	r2, [r3, #12]
		pixel++;
  400f94:	3502      	adds	r5, #2
	while (count--) {
  400f96:	460c      	mov	r4, r1
  400f98:	1e61      	subs	r1, r4, #1
  400f9a:	2c00      	cmp	r4, #0
  400f9c:	d1e3      	bne.n	400f66 <ili9341_copy_pixels_to_screen+0xe>
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f9e:	4b0a      	ldr	r3, [pc, #40]	; (400fc8 <ili9341_copy_pixels_to_screen+0x70>)
  400fa0:	691b      	ldr	r3, [r3, #16]
  400fa2:	f413 7f00 	tst.w	r3, #512	; 0x200
  400fa6:	d10b      	bne.n	400fc0 <ili9341_copy_pixels_to_screen+0x68>
		return 0;
  400fa8:	4623      	mov	r3, r4
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400faa:	2b00      	cmp	r3, #0
  400fac:	d0f7      	beq.n	400f9e <ili9341_copy_pixels_to_screen+0x46>
  400fae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400fb2:	4b06      	ldr	r3, [pc, #24]	; (400fcc <ili9341_copy_pixels_to_screen+0x74>)
  400fb4:	631a      	str	r2, [r3, #48]	; 0x30
  400fb6:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
  400fb8:	2301      	movs	r3, #1
  400fba:	e7db      	b.n	400f74 <ili9341_copy_pixels_to_screen+0x1c>
  400fbc:	2301      	movs	r3, #1
  400fbe:	e7e5      	b.n	400f8c <ili9341_copy_pixels_to_screen+0x34>
  400fc0:	2301      	movs	r3, #1
  400fc2:	e7f2      	b.n	400faa <ili9341_copy_pixels_to_screen+0x52>
  400fc4:	00400c71 	.word	0x00400c71
  400fc8:	40008000 	.word	0x40008000
  400fcc:	400e1400 	.word	0x400e1400

00400fd0 <ili9341_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9341_FLIP_X, \ref ILI9341_FLIP_Y
 *        and \ref ILI9341_SWITCH_XY.
 */
void ili9341_set_orientation(uint8_t flags)
{
  400fd0:	b510      	push	{r4, lr}
	uint8_t madctl = 0x48;

	/* Pretend the display is in landscape mode by default to match other display drivers */
	flags ^= ILI9341_SWITCH_XY | ILI9341_FLIP_X;
  400fd2:	f080 0005 	eor.w	r0, r0, #5

	if (flags & ILI9341_FLIP_X) {
  400fd6:	f010 0f01 	tst.w	r0, #1
  400fda:	d124      	bne.n	401026 <ili9341_set_orientation+0x56>
	uint8_t madctl = 0x48;
  400fdc:	2448      	movs	r4, #72	; 0x48
		madctl &= ~(1 << 6);
	}

	if (flags & ILI9341_FLIP_Y) {
  400fde:	f010 0f02 	tst.w	r0, #2
  400fe2:	d001      	beq.n	400fe8 <ili9341_set_orientation+0x18>
		madctl |= 1 << 7;
  400fe4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	}

	if (flags & ILI9341_SWITCH_XY) {
  400fe8:	f010 0f04 	tst.w	r0, #4
  400fec:	d001      	beq.n	400ff2 <ili9341_set_orientation+0x22>
		madctl |= 1 << 5;
  400fee:	f044 0420 	orr.w	r4, r4, #32
	}

	ili9341_send_command(ILI9341_CMD_MEMORY_ACCESS_CONTROL);
  400ff2:	2036      	movs	r0, #54	; 0x36
  400ff4:	4b0f      	ldr	r3, [pc, #60]	; (401034 <ili9341_set_orientation+0x64>)
  400ff6:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400ff8:	4b0f      	ldr	r3, [pc, #60]	; (401038 <ili9341_set_orientation+0x68>)
  400ffa:	691b      	ldr	r3, [r3, #16]
  400ffc:	f413 7f00 	tst.w	r3, #512	; 0x200
  401000:	d113      	bne.n	40102a <ili9341_set_orientation+0x5a>
		return 0;
  401002:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  401004:	2b00      	cmp	r3, #0
  401006:	d0f7      	beq.n	400ff8 <ili9341_set_orientation+0x28>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401008:	4b0b      	ldr	r3, [pc, #44]	; (401038 <ili9341_set_orientation+0x68>)
  40100a:	60dc      	str	r4, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40100c:	4b0a      	ldr	r3, [pc, #40]	; (401038 <ili9341_set_orientation+0x68>)
  40100e:	691b      	ldr	r3, [r3, #16]
  401010:	f413 7f00 	tst.w	r3, #512	; 0x200
  401014:	d10b      	bne.n	40102e <ili9341_set_orientation+0x5e>
		return 0;
  401016:	2300      	movs	r3, #0
  401018:	2b00      	cmp	r3, #0
  40101a:	d0f7      	beq.n	40100c <ili9341_set_orientation+0x3c>
  40101c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401020:	4b06      	ldr	r3, [pc, #24]	; (40103c <ili9341_set_orientation+0x6c>)
  401022:	631a      	str	r2, [r3, #48]	; 0x30
  401024:	bd10      	pop	{r4, pc}
		madctl &= ~(1 << 6);
  401026:	2408      	movs	r4, #8
  401028:	e7d9      	b.n	400fde <ili9341_set_orientation+0xe>
		return 1;
  40102a:	2301      	movs	r3, #1
  40102c:	e7ea      	b.n	401004 <ili9341_set_orientation+0x34>
  40102e:	2301      	movs	r3, #1
  401030:	e7f2      	b.n	401018 <ili9341_set_orientation+0x48>
  401032:	bf00      	nop
  401034:	00400c71 	.word	0x00400c71
  401038:	40008000 	.word	0x40008000
  40103c:	400e1400 	.word	0x400e1400

00401040 <ili9341_controller_init_registers>:
{
  401040:	b510      	push	{r4, lr}
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_A);
  401042:	20cd      	movs	r0, #205	; 0xcd
  401044:	4ba9      	ldr	r3, [pc, #676]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  401046:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401048:	4ba9      	ldr	r3, [pc, #676]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40104a:	691b      	ldr	r3, [r3, #16]
  40104c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401050:	f040 8195 	bne.w	40137e <ili9341_controller_init_registers+0x33e>
		return 0;
  401054:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  401056:	2b00      	cmp	r3, #0
  401058:	d0f6      	beq.n	401048 <ili9341_controller_init_registers+0x8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40105a:	2239      	movs	r2, #57	; 0x39
  40105c:	4ba4      	ldr	r3, [pc, #656]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40105e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401060:	4ba3      	ldr	r3, [pc, #652]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401062:	691b      	ldr	r3, [r3, #16]
  401064:	f413 7f00 	tst.w	r3, #512	; 0x200
  401068:	f040 818b 	bne.w	401382 <ili9341_controller_init_registers+0x342>
		return 0;
  40106c:	2300      	movs	r3, #0
  40106e:	2b00      	cmp	r3, #0
  401070:	d0f6      	beq.n	401060 <ili9341_controller_init_registers+0x20>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401072:	222c      	movs	r2, #44	; 0x2c
  401074:	4b9e      	ldr	r3, [pc, #632]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401076:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401078:	4b9d      	ldr	r3, [pc, #628]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40107a:	691b      	ldr	r3, [r3, #16]
  40107c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401080:	f040 8181 	bne.w	401386 <ili9341_controller_init_registers+0x346>
		return 0;
  401084:	2300      	movs	r3, #0
  401086:	2b00      	cmp	r3, #0
  401088:	d0f6      	beq.n	401078 <ili9341_controller_init_registers+0x38>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40108a:	2200      	movs	r2, #0
  40108c:	4b98      	ldr	r3, [pc, #608]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40108e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401090:	4b97      	ldr	r3, [pc, #604]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401092:	691b      	ldr	r3, [r3, #16]
  401094:	f413 7f00 	tst.w	r3, #512	; 0x200
  401098:	f040 8177 	bne.w	40138a <ili9341_controller_init_registers+0x34a>
		return 0;
  40109c:	2300      	movs	r3, #0
  40109e:	2b00      	cmp	r3, #0
  4010a0:	d0f6      	beq.n	401090 <ili9341_controller_init_registers+0x50>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4010a2:	2234      	movs	r2, #52	; 0x34
  4010a4:	4b92      	ldr	r3, [pc, #584]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010a6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4010a8:	4b91      	ldr	r3, [pc, #580]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010aa:	691b      	ldr	r3, [r3, #16]
  4010ac:	f413 7f00 	tst.w	r3, #512	; 0x200
  4010b0:	f040 816d 	bne.w	40138e <ili9341_controller_init_registers+0x34e>
		return 0;
  4010b4:	2300      	movs	r3, #0
  4010b6:	2b00      	cmp	r3, #0
  4010b8:	d0f6      	beq.n	4010a8 <ili9341_controller_init_registers+0x68>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4010ba:	2202      	movs	r2, #2
  4010bc:	4b8c      	ldr	r3, [pc, #560]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010be:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4010c0:	4b8b      	ldr	r3, [pc, #556]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010c2:	691b      	ldr	r3, [r3, #16]
  4010c4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4010c8:	f040 8163 	bne.w	401392 <ili9341_controller_init_registers+0x352>
		return 0;
  4010cc:	2300      	movs	r3, #0
  4010ce:	2b00      	cmp	r3, #0
  4010d0:	d0f6      	beq.n	4010c0 <ili9341_controller_init_registers+0x80>
  4010d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4010d6:	4b87      	ldr	r3, [pc, #540]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  4010d8:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_B);
  4010da:	20cf      	movs	r0, #207	; 0xcf
  4010dc:	4b83      	ldr	r3, [pc, #524]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  4010de:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4010e0:	4b83      	ldr	r3, [pc, #524]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010e2:	691b      	ldr	r3, [r3, #16]
  4010e4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4010e8:	f040 8155 	bne.w	401396 <ili9341_controller_init_registers+0x356>
		return 0;
  4010ec:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4010ee:	2b00      	cmp	r3, #0
  4010f0:	d0f6      	beq.n	4010e0 <ili9341_controller_init_registers+0xa0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4010f2:	2200      	movs	r2, #0
  4010f4:	4b7e      	ldr	r3, [pc, #504]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010f6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4010f8:	4b7d      	ldr	r3, [pc, #500]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010fa:	691b      	ldr	r3, [r3, #16]
  4010fc:	f413 7f00 	tst.w	r3, #512	; 0x200
  401100:	f040 814b 	bne.w	40139a <ili9341_controller_init_registers+0x35a>
		return 0;
  401104:	2300      	movs	r3, #0
  401106:	2b00      	cmp	r3, #0
  401108:	d0f6      	beq.n	4010f8 <ili9341_controller_init_registers+0xb8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40110a:	22aa      	movs	r2, #170	; 0xaa
  40110c:	4b78      	ldr	r3, [pc, #480]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40110e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401110:	4b77      	ldr	r3, [pc, #476]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401112:	691b      	ldr	r3, [r3, #16]
  401114:	f413 7f00 	tst.w	r3, #512	; 0x200
  401118:	f040 8141 	bne.w	40139e <ili9341_controller_init_registers+0x35e>
		return 0;
  40111c:	2300      	movs	r3, #0
  40111e:	2b00      	cmp	r3, #0
  401120:	d0f6      	beq.n	401110 <ili9341_controller_init_registers+0xd0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401122:	22b0      	movs	r2, #176	; 0xb0
  401124:	4b72      	ldr	r3, [pc, #456]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401126:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401128:	4b71      	ldr	r3, [pc, #452]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40112a:	691b      	ldr	r3, [r3, #16]
  40112c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401130:	f040 8137 	bne.w	4013a2 <ili9341_controller_init_registers+0x362>
		return 0;
  401134:	2300      	movs	r3, #0
  401136:	2b00      	cmp	r3, #0
  401138:	d0f6      	beq.n	401128 <ili9341_controller_init_registers+0xe8>
  40113a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40113e:	4b6d      	ldr	r3, [pc, #436]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  401140:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_PUMP_RATIO_CONTROL);
  401142:	20f7      	movs	r0, #247	; 0xf7
  401144:	4b69      	ldr	r3, [pc, #420]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  401146:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401148:	4b69      	ldr	r3, [pc, #420]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40114a:	691b      	ldr	r3, [r3, #16]
  40114c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401150:	f040 8129 	bne.w	4013a6 <ili9341_controller_init_registers+0x366>
		return 0;
  401154:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  401156:	2b00      	cmp	r3, #0
  401158:	d0f6      	beq.n	401148 <ili9341_controller_init_registers+0x108>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40115a:	2230      	movs	r2, #48	; 0x30
  40115c:	4b64      	ldr	r3, [pc, #400]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40115e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401160:	4b63      	ldr	r3, [pc, #396]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401162:	691b      	ldr	r3, [r3, #16]
  401164:	f413 7f00 	tst.w	r3, #512	; 0x200
  401168:	f040 811f 	bne.w	4013aa <ili9341_controller_init_registers+0x36a>
		return 0;
  40116c:	2300      	movs	r3, #0
  40116e:	2b00      	cmp	r3, #0
  401170:	d0f6      	beq.n	401160 <ili9341_controller_init_registers+0x120>
  401172:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401176:	4b5f      	ldr	r3, [pc, #380]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  401178:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_1);
  40117a:	20c0      	movs	r0, #192	; 0xc0
  40117c:	4b5b      	ldr	r3, [pc, #364]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  40117e:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401180:	4b5b      	ldr	r3, [pc, #364]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401182:	691b      	ldr	r3, [r3, #16]
  401184:	f413 7f00 	tst.w	r3, #512	; 0x200
  401188:	f040 8111 	bne.w	4013ae <ili9341_controller_init_registers+0x36e>
		return 0;
  40118c:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  40118e:	2b00      	cmp	r3, #0
  401190:	d0f6      	beq.n	401180 <ili9341_controller_init_registers+0x140>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401192:	2225      	movs	r2, #37	; 0x25
  401194:	4b56      	ldr	r3, [pc, #344]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401196:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401198:	4b55      	ldr	r3, [pc, #340]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40119a:	691b      	ldr	r3, [r3, #16]
  40119c:	f413 7f00 	tst.w	r3, #512	; 0x200
  4011a0:	f040 8107 	bne.w	4013b2 <ili9341_controller_init_registers+0x372>
		return 0;
  4011a4:	2300      	movs	r3, #0
  4011a6:	2b00      	cmp	r3, #0
  4011a8:	d0f6      	beq.n	401198 <ili9341_controller_init_registers+0x158>
  4011aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4011ae:	4b51      	ldr	r3, [pc, #324]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  4011b0:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_2);
  4011b2:	20c1      	movs	r0, #193	; 0xc1
  4011b4:	4b4d      	ldr	r3, [pc, #308]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  4011b6:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4011b8:	4b4d      	ldr	r3, [pc, #308]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4011ba:	691b      	ldr	r3, [r3, #16]
  4011bc:	f413 7f00 	tst.w	r3, #512	; 0x200
  4011c0:	f040 80f9 	bne.w	4013b6 <ili9341_controller_init_registers+0x376>
		return 0;
  4011c4:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4011c6:	2b00      	cmp	r3, #0
  4011c8:	d0f6      	beq.n	4011b8 <ili9341_controller_init_registers+0x178>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4011ca:	2211      	movs	r2, #17
  4011cc:	4b48      	ldr	r3, [pc, #288]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4011ce:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4011d0:	4b47      	ldr	r3, [pc, #284]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4011d2:	691b      	ldr	r3, [r3, #16]
  4011d4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4011d8:	f040 80ef 	bne.w	4013ba <ili9341_controller_init_registers+0x37a>
		return 0;
  4011dc:	2300      	movs	r3, #0
  4011de:	2b00      	cmp	r3, #0
  4011e0:	d0f6      	beq.n	4011d0 <ili9341_controller_init_registers+0x190>
  4011e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4011e6:	4b43      	ldr	r3, [pc, #268]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  4011e8:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_1);
  4011ea:	20c5      	movs	r0, #197	; 0xc5
  4011ec:	4b3f      	ldr	r3, [pc, #252]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  4011ee:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4011f0:	4b3f      	ldr	r3, [pc, #252]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4011f2:	691b      	ldr	r3, [r3, #16]
  4011f4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4011f8:	f040 80e1 	bne.w	4013be <ili9341_controller_init_registers+0x37e>
		return 0;
  4011fc:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4011fe:	2b00      	cmp	r3, #0
  401200:	d0f6      	beq.n	4011f0 <ili9341_controller_init_registers+0x1b0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401202:	225c      	movs	r2, #92	; 0x5c
  401204:	4b3a      	ldr	r3, [pc, #232]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401206:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401208:	4b39      	ldr	r3, [pc, #228]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40120a:	691b      	ldr	r3, [r3, #16]
  40120c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401210:	f040 80d7 	bne.w	4013c2 <ili9341_controller_init_registers+0x382>
		return 0;
  401214:	2300      	movs	r3, #0
  401216:	2b00      	cmp	r3, #0
  401218:	d0f6      	beq.n	401208 <ili9341_controller_init_registers+0x1c8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40121a:	224c      	movs	r2, #76	; 0x4c
  40121c:	4b34      	ldr	r3, [pc, #208]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40121e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401220:	4b33      	ldr	r3, [pc, #204]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401222:	691b      	ldr	r3, [r3, #16]
  401224:	f413 7f00 	tst.w	r3, #512	; 0x200
  401228:	f040 80cd 	bne.w	4013c6 <ili9341_controller_init_registers+0x386>
		return 0;
  40122c:	2300      	movs	r3, #0
  40122e:	2b00      	cmp	r3, #0
  401230:	d0f6      	beq.n	401220 <ili9341_controller_init_registers+0x1e0>
  401232:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401236:	4b2f      	ldr	r3, [pc, #188]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  401238:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_2);
  40123a:	20c7      	movs	r0, #199	; 0xc7
  40123c:	4b2b      	ldr	r3, [pc, #172]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  40123e:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401240:	4b2b      	ldr	r3, [pc, #172]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401242:	691b      	ldr	r3, [r3, #16]
  401244:	f413 7f00 	tst.w	r3, #512	; 0x200
  401248:	f040 80bf 	bne.w	4013ca <ili9341_controller_init_registers+0x38a>
		return 0;
  40124c:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  40124e:	2b00      	cmp	r3, #0
  401250:	d0f6      	beq.n	401240 <ili9341_controller_init_registers+0x200>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401252:	2294      	movs	r2, #148	; 0x94
  401254:	4b26      	ldr	r3, [pc, #152]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401256:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401258:	4b25      	ldr	r3, [pc, #148]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40125a:	691b      	ldr	r3, [r3, #16]
  40125c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401260:	f040 80b5 	bne.w	4013ce <ili9341_controller_init_registers+0x38e>
		return 0;
  401264:	2300      	movs	r3, #0
  401266:	2b00      	cmp	r3, #0
  401268:	d0f6      	beq.n	401258 <ili9341_controller_init_registers+0x218>
  40126a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40126e:	4b21      	ldr	r3, [pc, #132]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  401270:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_A);
  401272:	20e8      	movs	r0, #232	; 0xe8
  401274:	4b1d      	ldr	r3, [pc, #116]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  401276:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401278:	4b1d      	ldr	r3, [pc, #116]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40127a:	691b      	ldr	r3, [r3, #16]
  40127c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401280:	f040 80a7 	bne.w	4013d2 <ili9341_controller_init_registers+0x392>
		return 0;
  401284:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  401286:	2b00      	cmp	r3, #0
  401288:	d0f6      	beq.n	401278 <ili9341_controller_init_registers+0x238>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40128a:	2285      	movs	r2, #133	; 0x85
  40128c:	4b18      	ldr	r3, [pc, #96]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40128e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401290:	4b17      	ldr	r3, [pc, #92]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401292:	691b      	ldr	r3, [r3, #16]
  401294:	f413 7f00 	tst.w	r3, #512	; 0x200
  401298:	f040 809d 	bne.w	4013d6 <ili9341_controller_init_registers+0x396>
		return 0;
  40129c:	2300      	movs	r3, #0
  40129e:	2b00      	cmp	r3, #0
  4012a0:	d0f6      	beq.n	401290 <ili9341_controller_init_registers+0x250>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4012a2:	2201      	movs	r2, #1
  4012a4:	4b12      	ldr	r3, [pc, #72]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4012a6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4012a8:	4b11      	ldr	r3, [pc, #68]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4012aa:	691b      	ldr	r3, [r3, #16]
  4012ac:	f413 7f00 	tst.w	r3, #512	; 0x200
  4012b0:	f040 8093 	bne.w	4013da <ili9341_controller_init_registers+0x39a>
		return 0;
  4012b4:	2300      	movs	r3, #0
  4012b6:	2b00      	cmp	r3, #0
  4012b8:	d0f6      	beq.n	4012a8 <ili9341_controller_init_registers+0x268>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4012ba:	2278      	movs	r2, #120	; 0x78
  4012bc:	4b0c      	ldr	r3, [pc, #48]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4012be:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4012c0:	4b0b      	ldr	r3, [pc, #44]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4012c2:	691b      	ldr	r3, [r3, #16]
  4012c4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4012c8:	f040 8089 	bne.w	4013de <ili9341_controller_init_registers+0x39e>
		return 0;
  4012cc:	2300      	movs	r3, #0
  4012ce:	2b00      	cmp	r3, #0
  4012d0:	d0f6      	beq.n	4012c0 <ili9341_controller_init_registers+0x280>
  4012d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4012d6:	4b07      	ldr	r3, [pc, #28]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  4012d8:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_B);
  4012da:	20ea      	movs	r0, #234	; 0xea
  4012dc:	4b03      	ldr	r3, [pc, #12]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  4012de:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4012e0:	4b03      	ldr	r3, [pc, #12]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4012e2:	691b      	ldr	r3, [r3, #16]
  4012e4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4012e8:	e006      	b.n	4012f8 <ili9341_controller_init_registers+0x2b8>
  4012ea:	bf00      	nop
  4012ec:	00400c71 	.word	0x00400c71
  4012f0:	40008000 	.word	0x40008000
  4012f4:	400e1400 	.word	0x400e1400
  4012f8:	d173      	bne.n	4013e2 <ili9341_controller_init_registers+0x3a2>
		return 0;
  4012fa:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4012fc:	2b00      	cmp	r3, #0
  4012fe:	d0ef      	beq.n	4012e0 <ili9341_controller_init_registers+0x2a0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401300:	2200      	movs	r2, #0
  401302:	4b3d      	ldr	r3, [pc, #244]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  401304:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401306:	4b3c      	ldr	r3, [pc, #240]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  401308:	691b      	ldr	r3, [r3, #16]
  40130a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40130e:	d16a      	bne.n	4013e6 <ili9341_controller_init_registers+0x3a6>
		return 0;
  401310:	2300      	movs	r3, #0
  401312:	2b00      	cmp	r3, #0
  401314:	d0f7      	beq.n	401306 <ili9341_controller_init_registers+0x2c6>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401316:	2200      	movs	r2, #0
  401318:	4b37      	ldr	r3, [pc, #220]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  40131a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40131c:	4b36      	ldr	r3, [pc, #216]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  40131e:	691b      	ldr	r3, [r3, #16]
  401320:	f413 7f00 	tst.w	r3, #512	; 0x200
  401324:	d161      	bne.n	4013ea <ili9341_controller_init_registers+0x3aa>
		return 0;
  401326:	2300      	movs	r3, #0
  401328:	2b00      	cmp	r3, #0
  40132a:	d0f7      	beq.n	40131c <ili9341_controller_init_registers+0x2dc>
  40132c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401330:	4b32      	ldr	r3, [pc, #200]	; (4013fc <ili9341_controller_init_registers+0x3bc>)
  401332:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_COLMOD_PIXEL_FORMAT_SET);
  401334:	203a      	movs	r0, #58	; 0x3a
  401336:	4b32      	ldr	r3, [pc, #200]	; (401400 <ili9341_controller_init_registers+0x3c0>)
  401338:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40133a:	4b2f      	ldr	r3, [pc, #188]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  40133c:	691b      	ldr	r3, [r3, #16]
  40133e:	f413 7f00 	tst.w	r3, #512	; 0x200
  401342:	d154      	bne.n	4013ee <ili9341_controller_init_registers+0x3ae>
		return 0;
  401344:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  401346:	2b00      	cmp	r3, #0
  401348:	d0f7      	beq.n	40133a <ili9341_controller_init_registers+0x2fa>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40134a:	2255      	movs	r2, #85	; 0x55
  40134c:	4b2a      	ldr	r3, [pc, #168]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  40134e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401350:	4b29      	ldr	r3, [pc, #164]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  401352:	691b      	ldr	r3, [r3, #16]
  401354:	f413 7f00 	tst.w	r3, #512	; 0x200
  401358:	d14b      	bne.n	4013f2 <ili9341_controller_init_registers+0x3b2>
		return 0;
  40135a:	2300      	movs	r3, #0
  40135c:	2b00      	cmp	r3, #0
  40135e:	d0f7      	beq.n	401350 <ili9341_controller_init_registers+0x310>
  401360:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401364:	4b25      	ldr	r3, [pc, #148]	; (4013fc <ili9341_controller_init_registers+0x3bc>)
  401366:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_set_orientation(0);
  401368:	2000      	movs	r0, #0
  40136a:	4b26      	ldr	r3, [pc, #152]	; (401404 <ili9341_controller_init_registers+0x3c4>)
  40136c:	4798      	blx	r3
	ili9341_set_limits(0, 0, ILI9341_DEFAULT_WIDTH,
  40136e:	23f0      	movs	r3, #240	; 0xf0
  401370:	f44f 72a0 	mov.w	r2, #320	; 0x140
  401374:	2100      	movs	r1, #0
  401376:	4608      	mov	r0, r1
  401378:	4c23      	ldr	r4, [pc, #140]	; (401408 <ili9341_controller_init_registers+0x3c8>)
  40137a:	47a0      	blx	r4
  40137c:	bd10      	pop	{r4, pc}
		return 1;
  40137e:	2301      	movs	r3, #1
  401380:	e669      	b.n	401056 <ili9341_controller_init_registers+0x16>
  401382:	2301      	movs	r3, #1
  401384:	e673      	b.n	40106e <ili9341_controller_init_registers+0x2e>
  401386:	2301      	movs	r3, #1
  401388:	e67d      	b.n	401086 <ili9341_controller_init_registers+0x46>
  40138a:	2301      	movs	r3, #1
  40138c:	e687      	b.n	40109e <ili9341_controller_init_registers+0x5e>
  40138e:	2301      	movs	r3, #1
  401390:	e691      	b.n	4010b6 <ili9341_controller_init_registers+0x76>
  401392:	2301      	movs	r3, #1
  401394:	e69b      	b.n	4010ce <ili9341_controller_init_registers+0x8e>
  401396:	2301      	movs	r3, #1
  401398:	e6a9      	b.n	4010ee <ili9341_controller_init_registers+0xae>
  40139a:	2301      	movs	r3, #1
  40139c:	e6b3      	b.n	401106 <ili9341_controller_init_registers+0xc6>
  40139e:	2301      	movs	r3, #1
  4013a0:	e6bd      	b.n	40111e <ili9341_controller_init_registers+0xde>
  4013a2:	2301      	movs	r3, #1
  4013a4:	e6c7      	b.n	401136 <ili9341_controller_init_registers+0xf6>
  4013a6:	2301      	movs	r3, #1
  4013a8:	e6d5      	b.n	401156 <ili9341_controller_init_registers+0x116>
  4013aa:	2301      	movs	r3, #1
  4013ac:	e6df      	b.n	40116e <ili9341_controller_init_registers+0x12e>
  4013ae:	2301      	movs	r3, #1
  4013b0:	e6ed      	b.n	40118e <ili9341_controller_init_registers+0x14e>
  4013b2:	2301      	movs	r3, #1
  4013b4:	e6f7      	b.n	4011a6 <ili9341_controller_init_registers+0x166>
  4013b6:	2301      	movs	r3, #1
  4013b8:	e705      	b.n	4011c6 <ili9341_controller_init_registers+0x186>
  4013ba:	2301      	movs	r3, #1
  4013bc:	e70f      	b.n	4011de <ili9341_controller_init_registers+0x19e>
  4013be:	2301      	movs	r3, #1
  4013c0:	e71d      	b.n	4011fe <ili9341_controller_init_registers+0x1be>
  4013c2:	2301      	movs	r3, #1
  4013c4:	e727      	b.n	401216 <ili9341_controller_init_registers+0x1d6>
  4013c6:	2301      	movs	r3, #1
  4013c8:	e731      	b.n	40122e <ili9341_controller_init_registers+0x1ee>
  4013ca:	2301      	movs	r3, #1
  4013cc:	e73f      	b.n	40124e <ili9341_controller_init_registers+0x20e>
  4013ce:	2301      	movs	r3, #1
  4013d0:	e749      	b.n	401266 <ili9341_controller_init_registers+0x226>
  4013d2:	2301      	movs	r3, #1
  4013d4:	e757      	b.n	401286 <ili9341_controller_init_registers+0x246>
  4013d6:	2301      	movs	r3, #1
  4013d8:	e761      	b.n	40129e <ili9341_controller_init_registers+0x25e>
  4013da:	2301      	movs	r3, #1
  4013dc:	e76b      	b.n	4012b6 <ili9341_controller_init_registers+0x276>
  4013de:	2301      	movs	r3, #1
  4013e0:	e775      	b.n	4012ce <ili9341_controller_init_registers+0x28e>
  4013e2:	2301      	movs	r3, #1
  4013e4:	e78a      	b.n	4012fc <ili9341_controller_init_registers+0x2bc>
  4013e6:	2301      	movs	r3, #1
  4013e8:	e793      	b.n	401312 <ili9341_controller_init_registers+0x2d2>
  4013ea:	2301      	movs	r3, #1
  4013ec:	e79c      	b.n	401328 <ili9341_controller_init_registers+0x2e8>
  4013ee:	2301      	movs	r3, #1
  4013f0:	e7a9      	b.n	401346 <ili9341_controller_init_registers+0x306>
  4013f2:	2301      	movs	r3, #1
  4013f4:	e7b2      	b.n	40135c <ili9341_controller_init_registers+0x31c>
  4013f6:	bf00      	nop
  4013f8:	40008000 	.word	0x40008000
  4013fc:	400e1400 	.word	0x400e1400
  401400:	00400c71 	.word	0x00400c71
  401404:	00400fd1 	.word	0x00400fd1
  401408:	00400f29 	.word	0x00400f29

0040140c <ili9341_init>:
{
  40140c:	b508      	push	{r3, lr}
	ili9341_interface_init();
  40140e:	4b04      	ldr	r3, [pc, #16]	; (401420 <ili9341_init+0x14>)
  401410:	4798      	blx	r3
	ili9341_reset_display();
  401412:	4b04      	ldr	r3, [pc, #16]	; (401424 <ili9341_init+0x18>)
  401414:	4798      	blx	r3
	ili9341_exit_standby();
  401416:	4b04      	ldr	r3, [pc, #16]	; (401428 <ili9341_init+0x1c>)
  401418:	4798      	blx	r3
	ili9341_controller_init_registers();
  40141a:	4b04      	ldr	r3, [pc, #16]	; (40142c <ili9341_init+0x20>)
  40141c:	4798      	blx	r3
  40141e:	bd08      	pop	{r3, pc}
  401420:	00400e19 	.word	0x00400e19
  401424:	00400e89 	.word	0x00400e89
  401428:	00400eb9 	.word	0x00400eb9
  40142c:	00401041 	.word	0x00401041

00401430 <afec_find_inst_num>:
 * \return   AFEC instance number
 */
static uint32_t afec_find_inst_num(Afec *const afec)
{
#if defined(AFEC1)
	if (afec == AFEC1) {
  401430:	4b03      	ldr	r3, [pc, #12]	; (401440 <afec_find_inst_num+0x10>)
  401432:	4298      	cmp	r0, r3
  401434:	d001      	beq.n	40143a <afec_find_inst_num+0xa>
		return 1;
	}
#endif
#if defined(AFEC0)
	if (afec == AFEC0) {
		return 0;
  401436:	2000      	movs	r0, #0
	}
#endif
	return 0;
}
  401438:	4770      	bx	lr
		return 1;
  40143a:	2001      	movs	r0, #1
  40143c:	4770      	bx	lr
  40143e:	bf00      	nop
  401440:	40064000 	.word	0x40064000

00401444 <afec_find_pid>:
 * \return   AFEC Peripheral ID
 */
static uint32_t afec_find_pid(Afec *const afec)
{
#if defined(ID_AFEC1)
	if (afec == AFEC1) {
  401444:	4b03      	ldr	r3, [pc, #12]	; (401454 <afec_find_pid+0x10>)
  401446:	4298      	cmp	r0, r3
  401448:	d001      	beq.n	40144e <afec_find_pid+0xa>
		return ID_AFEC1;
	}
#endif
#if defined(ID_AFEC0)
	if (afec == AFEC0) {
		return ID_AFEC0;
  40144a:	201d      	movs	r0, #29
	}
#endif
	return ID_AFEC0;
}
  40144c:	4770      	bx	lr
		return ID_AFEC1;
  40144e:	2028      	movs	r0, #40	; 0x28
  401450:	4770      	bx	lr
  401452:	bf00      	nop
  401454:	40064000 	.word	0x40064000

00401458 <afec_set_config>:
 *
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
  401458:	b410      	push	{r4}
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40145a:	7ccb      	ldrb	r3, [r1, #19]
  40145c:	b373      	cbz	r3, 4014bc <afec_set_config+0x64>
  40145e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  401462:	684a      	ldr	r2, [r1, #4]
  401464:	688c      	ldr	r4, [r1, #8]
  401466:	fbb2 f2f4 	udiv	r2, r2, r4
  40146a:	3a01      	subs	r2, #1
  40146c:	0212      	lsls	r2, r2, #8
  40146e:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  401470:	4313      	orrs	r3, r2
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  401472:	7c0a      	ldrb	r2, [r1, #16]
  401474:	0612      	lsls	r2, r2, #24
  401476:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
			AFEC_MR_ONE |
  40147a:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  40147c:	7c4a      	ldrb	r2, [r1, #17]
  40147e:	0712      	lsls	r2, r2, #28
  401480:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
			AFEC_MR_TRACKTIM(config->tracktim) |
  401484:	4313      	orrs	r3, r2
			(config->startup_time);
  401486:	68ca      	ldr	r2, [r1, #12]
			AFEC_MR_TRANSFER(config->transfer) |
  401488:	4313      	orrs	r3, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40148a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000

	afec->AFEC_MR = reg;
  40148e:	6043      	str	r3, [r0, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  401490:	7d0b      	ldrb	r3, [r1, #20]
  401492:	b1ab      	cbz	r3, 4014c0 <afec_set_config+0x68>
  401494:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
			(config->resolution) |
  401498:	680a      	ldr	r2, [r1, #0]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40149a:	431a      	orrs	r2, r3
			(config->stm ? AFEC_EMR_STM : 0);
  40149c:	7d4b      	ldrb	r3, [r1, #21]
  40149e:	b98b      	cbnz	r3, 4014c4 <afec_set_config+0x6c>
  4014a0:	2300      	movs	r3, #0
			(config->resolution) |
  4014a2:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4014a4:	6083      	str	r3, [r0, #8]
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  4014a6:	7d8b      	ldrb	r3, [r1, #22]
  4014a8:	021b      	lsls	r3, r3, #8
  4014aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4014ae:	f043 030c 	orr.w	r3, r3, #12
  4014b2:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
  #else
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  #endif
}
  4014b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4014ba:	4770      	bx	lr
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4014bc:	2300      	movs	r3, #0
  4014be:	e7d0      	b.n	401462 <afec_set_config+0xa>
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4014c0:	2300      	movs	r3, #0
  4014c2:	e7e9      	b.n	401498 <afec_set_config+0x40>
			(config->stm ? AFEC_EMR_STM : 0);
  4014c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  4014c8:	e7eb      	b.n	4014a2 <afec_set_config+0x4a>
	...

004014cc <afec_interrupt>:
 * \param inst_num AFEC instance number to handle interrupt for
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
  4014cc:	b508      	push	{r3, lr}
	if (afec_callback_pointer[inst_num][source]) {
  4014ce:	eb01 1100 	add.w	r1, r1, r0, lsl #4
  4014d2:	4b03      	ldr	r3, [pc, #12]	; (4014e0 <afec_interrupt+0x14>)
  4014d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  4014d8:	b103      	cbz	r3, 4014dc <afec_interrupt+0x10>
		afec_callback_pointer[inst_num][source]();
  4014da:	4798      	blx	r3
  4014dc:	bd08      	pop	{r3, pc}
  4014de:	bf00      	nop
  4014e0:	2043a188 	.word	0x2043a188

004014e4 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4014e4:	b530      	push	{r4, r5, lr}
  4014e6:	b083      	sub	sp, #12
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4014e8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4014ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4014ec:	400b      	ands	r3, r1
  4014ee:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);
  4014f0:	4b17      	ldr	r3, [pc, #92]	; (401550 <afec_process_callback+0x6c>)
  4014f2:	4798      	blx	r3
  4014f4:	4605      	mov	r5, r0

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4014f6:	2400      	movs	r4, #0
  4014f8:	e009      	b.n	40150e <afec_process_callback+0x2a>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4014fa:	2c0e      	cmp	r4, #14
  4014fc:	d81a      	bhi.n	401534 <afec_process_callback+0x50>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4014fe:	f104 020c 	add.w	r2, r4, #12
  401502:	2301      	movs	r3, #1
  401504:	4093      	lsls	r3, r2
  401506:	9a01      	ldr	r2, [sp, #4]
  401508:	4213      	tst	r3, r2
  40150a:	d10e      	bne.n	40152a <afec_process_callback+0x46>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40150c:	3401      	adds	r4, #1
  40150e:	2c0f      	cmp	r4, #15
  401510:	d81c      	bhi.n	40154c <afec_process_callback+0x68>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  401512:	2c0b      	cmp	r4, #11
  401514:	d8f1      	bhi.n	4014fa <afec_process_callback+0x16>
			if (status & (1 << cnt)) {
  401516:	2301      	movs	r3, #1
  401518:	40a3      	lsls	r3, r4
  40151a:	9a01      	ldr	r2, [sp, #4]
  40151c:	4213      	tst	r3, r2
  40151e:	d0f5      	beq.n	40150c <afec_process_callback+0x28>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  401520:	4621      	mov	r1, r4
  401522:	b2e8      	uxtb	r0, r5
  401524:	4b0b      	ldr	r3, [pc, #44]	; (401554 <afec_process_callback+0x70>)
  401526:	4798      	blx	r3
  401528:	e7f0      	b.n	40150c <afec_process_callback+0x28>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  40152a:	4621      	mov	r1, r4
  40152c:	b2e8      	uxtb	r0, r5
  40152e:	4b09      	ldr	r3, [pc, #36]	; (401554 <afec_process_callback+0x70>)
  401530:	4798      	blx	r3
  401532:	e7eb      	b.n	40150c <afec_process_callback+0x28>
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  401534:	f104 020f 	add.w	r2, r4, #15
  401538:	2301      	movs	r3, #1
  40153a:	4093      	lsls	r3, r2
  40153c:	9a01      	ldr	r2, [sp, #4]
  40153e:	4213      	tst	r3, r2
  401540:	d0e4      	beq.n	40150c <afec_process_callback+0x28>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  401542:	4621      	mov	r1, r4
  401544:	b2e8      	uxtb	r0, r5
  401546:	4b03      	ldr	r3, [pc, #12]	; (401554 <afec_process_callback+0x70>)
  401548:	4798      	blx	r3
  40154a:	e7df      	b.n	40150c <afec_process_callback+0x28>
			}
		}
	}
}
  40154c:	b003      	add	sp, #12
  40154e:	bd30      	pop	{r4, r5, pc}
  401550:	00401431 	.word	0x00401431
  401554:	004014cd 	.word	0x004014cd

00401558 <afec_ch_set_config>:
{
  401558:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  40155a:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  40155c:	2301      	movs	r3, #1
  40155e:	408b      	lsls	r3, r1
  401560:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  401564:	7815      	ldrb	r5, [r2, #0]
  401566:	b175      	cbz	r5, 401586 <afec_ch_set_config+0x2e>
  401568:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40156a:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  40156c:	6d43      	ldr	r3, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40156e:	004c      	lsls	r4, r1, #1
  401570:	2103      	movs	r1, #3
  401572:	40a1      	lsls	r1, r4
  401574:	ea23 0101 	bic.w	r1, r3, r1
	reg |= (config->gain) << (2 * channel);
  401578:	7853      	ldrb	r3, [r2, #1]
  40157a:	fa03 f404 	lsl.w	r4, r3, r4
  40157e:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  401580:	6541      	str	r1, [r0, #84]	; 0x54
}
  401582:	bc30      	pop	{r4, r5}
  401584:	4770      	bx	lr
	reg |= (config->diff) ? (0x1u << channel) : 0;
  401586:	2300      	movs	r3, #0
  401588:	e7ee      	b.n	401568 <afec_ch_set_config+0x10>

0040158a <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  40158a:	780b      	ldrb	r3, [r1, #0]
  40158c:	b94b      	cbnz	r3, 4015a2 <afec_temp_sensor_set_config+0x18>
  40158e:	2300      	movs	r3, #0
  401590:	784a      	ldrb	r2, [r1, #1]
  401592:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  401594:	6703      	str	r3, [r0, #112]	; 0x70
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  401596:	884b      	ldrh	r3, [r1, #2]
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  401598:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  40159a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40159e:	6743      	str	r3, [r0, #116]	; 0x74
  4015a0:	4770      	bx	lr
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  4015a2:	2301      	movs	r3, #1
  4015a4:	e7f4      	b.n	401590 <afec_temp_sensor_set_config+0x6>
	...

004015a8 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  4015a8:	2200      	movs	r2, #0
  4015aa:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4015ac:	4b08      	ldr	r3, [pc, #32]	; (4015d0 <afec_get_config_defaults+0x28>)
  4015ae:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  4015b0:	4b08      	ldr	r3, [pc, #32]	; (4015d4 <afec_get_config_defaults+0x2c>)
  4015b2:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  4015b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4015b8:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  4015ba:	2302      	movs	r3, #2
  4015bc:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  4015be:	2301      	movs	r3, #1
  4015c0:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  4015c2:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  4015c4:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  4015c6:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  4015c8:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  4015ca:	7583      	strb	r3, [r0, #22]
  4015cc:	4770      	bx	lr
  4015ce:	bf00      	nop
  4015d0:	11e1a300 	.word	0x11e1a300
  4015d4:	005b8d80 	.word	0x005b8d80

004015d8 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4015d8:	2300      	movs	r3, #0
  4015da:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4015dc:	2301      	movs	r3, #1
  4015de:	7043      	strb	r3, [r0, #1]
  4015e0:	4770      	bx	lr

004015e2 <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  4015e2:	2300      	movs	r3, #0
  4015e4:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  4015e6:	2320      	movs	r3, #32
  4015e8:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  4015ea:	23ff      	movs	r3, #255	; 0xff
  4015ec:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  4015ee:	f640 73ff 	movw	r3, #4095	; 0xfff
  4015f2:	8083      	strh	r3, [r0, #4]
  4015f4:	4770      	bx	lr
	...

004015f8 <afec_init>:
	return afec->AFEC_ISR;
  4015f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4015fa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4015fe:	d001      	beq.n	401604 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  401600:	2019      	movs	r0, #25
  401602:	4770      	bx	lr
{
  401604:	b510      	push	{r4, lr}
  401606:	4604      	mov	r4, r0
	afec->AFEC_CR = AFEC_CR_SWRST;
  401608:	2301      	movs	r3, #1
  40160a:	6003      	str	r3, [r0, #0]
	afec_set_config(afec, config);
  40160c:	4b10      	ldr	r3, [pc, #64]	; (401650 <afec_init+0x58>)
  40160e:	4798      	blx	r3
	if(afec == AFEC0) {
  401610:	4b10      	ldr	r3, [pc, #64]	; (401654 <afec_init+0x5c>)
  401612:	429c      	cmp	r4, r3
  401614:	d00c      	beq.n	401630 <afec_init+0x38>
	if(afec == AFEC1) {
  401616:	4b10      	ldr	r3, [pc, #64]	; (401658 <afec_init+0x60>)
  401618:	429c      	cmp	r4, r3
  40161a:	d00b      	beq.n	401634 <afec_init+0x3c>
	return STATUS_OK;
  40161c:	2000      	movs	r0, #0
  40161e:	bd10      	pop	{r4, pc}
			afec_callback_pointer[0][i] = 0;
  401620:	2100      	movs	r1, #0
  401622:	4a0e      	ldr	r2, [pc, #56]	; (40165c <afec_init+0x64>)
  401624:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  401628:	3301      	adds	r3, #1
  40162a:	2b0f      	cmp	r3, #15
  40162c:	d9f8      	bls.n	401620 <afec_init+0x28>
  40162e:	e7f2      	b.n	401616 <afec_init+0x1e>
  401630:	2300      	movs	r3, #0
  401632:	e7fa      	b.n	40162a <afec_init+0x32>
  401634:	2300      	movs	r3, #0
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  401636:	2b0f      	cmp	r3, #15
  401638:	d807      	bhi.n	40164a <afec_init+0x52>
			afec_callback_pointer[1][i] = 0;
  40163a:	f103 0110 	add.w	r1, r3, #16
  40163e:	2000      	movs	r0, #0
  401640:	4a06      	ldr	r2, [pc, #24]	; (40165c <afec_init+0x64>)
  401642:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  401646:	3301      	adds	r3, #1
  401648:	e7f5      	b.n	401636 <afec_init+0x3e>
	return STATUS_OK;
  40164a:	2000      	movs	r0, #0
  40164c:	bd10      	pop	{r4, pc}
  40164e:	bf00      	nop
  401650:	00401459 	.word	0x00401459
  401654:	4003c000 	.word	0x4003c000
  401658:	40064000 	.word	0x40064000
  40165c:	2043a188 	.word	0x2043a188

00401660 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  401660:	4b0f      	ldr	r3, [pc, #60]	; (4016a0 <afec_enable_interrupt+0x40>)
  401662:	4299      	cmp	r1, r3
  401664:	d007      	beq.n	401676 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  401666:	290b      	cmp	r1, #11
  401668:	d80b      	bhi.n	401682 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40166a:	d006      	beq.n	40167a <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  40166c:	2301      	movs	r3, #1
  40166e:	fa03 f101 	lsl.w	r1, r3, r1
  401672:	6241      	str	r1, [r0, #36]	; 0x24
  401674:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  401676:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  401678:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  40167a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40167e:	6243      	str	r3, [r0, #36]	; 0x24
  401680:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  401682:	290e      	cmp	r1, #14
  401684:	d905      	bls.n	401692 <afec_enable_interrupt+0x32>
				+ AFEC_INTERRUPT_GAP2);
  401686:	310f      	adds	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  401688:	2301      	movs	r3, #1
  40168a:	fa03 f101 	lsl.w	r1, r3, r1
  40168e:	6241      	str	r1, [r0, #36]	; 0x24
  401690:	4770      	bx	lr
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  401692:	310c      	adds	r1, #12
  401694:	2301      	movs	r3, #1
  401696:	fa03 f101 	lsl.w	r1, r3, r1
  40169a:	6241      	str	r1, [r0, #36]	; 0x24
  40169c:	4770      	bx	lr
  40169e:	bf00      	nop
  4016a0:	47000fff 	.word	0x47000fff

004016a4 <afec_set_callback>:
{
  4016a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4016a6:	4606      	mov	r6, r0
  4016a8:	460d      	mov	r5, r1
  4016aa:	4617      	mov	r7, r2
  4016ac:	461c      	mov	r4, r3
	uint32_t i = afec_find_inst_num(afec);
  4016ae:	4b12      	ldr	r3, [pc, #72]	; (4016f8 <afec_set_callback+0x54>)
  4016b0:	4798      	blx	r3
	afec_callback_pointer[i][source] = callback;
  4016b2:	eb05 1200 	add.w	r2, r5, r0, lsl #4
  4016b6:	4b11      	ldr	r3, [pc, #68]	; (4016fc <afec_set_callback+0x58>)
  4016b8:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
	if (!i) {
  4016bc:	b160      	cbz	r0, 4016d8 <afec_set_callback+0x34>
	} else if (i == 1) {
  4016be:	2801      	cmp	r0, #1
  4016c0:	d114      	bne.n	4016ec <afec_set_callback+0x48>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4016c2:	4b0f      	ldr	r3, [pc, #60]	; (401700 <afec_set_callback+0x5c>)
  4016c4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4016c8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4016cc:	0164      	lsls	r4, r4, #5
  4016ce:	b2e4      	uxtb	r4, r4
  4016d0:	f883 4328 	strb.w	r4, [r3, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4016d4:	605a      	str	r2, [r3, #4]
  4016d6:	e009      	b.n	4016ec <afec_set_callback+0x48>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4016d8:	4b09      	ldr	r3, [pc, #36]	; (401700 <afec_set_callback+0x5c>)
  4016da:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4016de:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4016e2:	0164      	lsls	r4, r4, #5
  4016e4:	b2e4      	uxtb	r4, r4
  4016e6:	f883 431d 	strb.w	r4, [r3, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4016ea:	601a      	str	r2, [r3, #0]
	afec_enable_interrupt(afec, source);
  4016ec:	4629      	mov	r1, r5
  4016ee:	4630      	mov	r0, r6
  4016f0:	4b04      	ldr	r3, [pc, #16]	; (401704 <afec_set_callback+0x60>)
  4016f2:	4798      	blx	r3
  4016f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4016f6:	bf00      	nop
  4016f8:	00401431 	.word	0x00401431
  4016fc:	2043a188 	.word	0x2043a188
  401700:	e000e100 	.word	0xe000e100
  401704:	00401661 	.word	0x00401661

00401708 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  401708:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40170a:	4802      	ldr	r0, [pc, #8]	; (401714 <AFEC0_Handler+0xc>)
  40170c:	4b02      	ldr	r3, [pc, #8]	; (401718 <AFEC0_Handler+0x10>)
  40170e:	4798      	blx	r3
  401710:	bd08      	pop	{r3, pc}
  401712:	bf00      	nop
  401714:	4003c000 	.word	0x4003c000
  401718:	004014e5 	.word	0x004014e5

0040171c <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  40171c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40171e:	4802      	ldr	r0, [pc, #8]	; (401728 <AFEC1_Handler+0xc>)
  401720:	4b02      	ldr	r3, [pc, #8]	; (40172c <AFEC1_Handler+0x10>)
  401722:	4798      	blx	r3
  401724:	bd08      	pop	{r3, pc}
  401726:	bf00      	nop
  401728:	40064000 	.word	0x40064000
  40172c:	004014e5 	.word	0x004014e5

00401730 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  401730:	b500      	push	{lr}
  401732:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
  401734:	4b11      	ldr	r3, [pc, #68]	; (40177c <afec_enable+0x4c>)
  401736:	4798      	blx	r3
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  401738:	4b11      	ldr	r3, [pc, #68]	; (401780 <afec_enable+0x50>)
  40173a:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40173c:	4b11      	ldr	r3, [pc, #68]	; (401784 <afec_enable+0x54>)
  40173e:	789b      	ldrb	r3, [r3, #2]
  401740:	2bff      	cmp	r3, #255	; 0xff
  401742:	d01a      	beq.n	40177a <afec_enable+0x4a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401744:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401748:	fab3 f383 	clz	r3, r3
  40174c:	095b      	lsrs	r3, r3, #5
  40174e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401750:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401752:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401756:	2200      	movs	r2, #0
  401758:	4b0b      	ldr	r3, [pc, #44]	; (401788 <afec_enable+0x58>)
  40175a:	701a      	strb	r2, [r3, #0]
	return flags;
  40175c:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  40175e:	4a09      	ldr	r2, [pc, #36]	; (401784 <afec_enable+0x54>)
  401760:	7893      	ldrb	r3, [r2, #2]
  401762:	3301      	adds	r3, #1
  401764:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401766:	b129      	cbz	r1, 401774 <afec_enable+0x44>
		cpu_irq_enable();
  401768:	2201      	movs	r2, #1
  40176a:	4b07      	ldr	r3, [pc, #28]	; (401788 <afec_enable+0x58>)
  40176c:	701a      	strb	r2, [r3, #0]
  40176e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401772:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  401774:	b003      	add	sp, #12
  401776:	f85d fb04 	ldr.w	pc, [sp], #4
  40177a:	e7fe      	b.n	40177a <afec_enable+0x4a>
  40177c:	00401445 	.word	0x00401445
  401780:	004255b5 	.word	0x004255b5
  401784:	2043a180 	.word	0x2043a180
  401788:	204000c8 	.word	0x204000c8

0040178c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40178c:	f100 0308 	add.w	r3, r0, #8
  401790:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401792:	f04f 32ff 	mov.w	r2, #4294967295
  401796:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401798:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40179a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  40179c:	2300      	movs	r3, #0
  40179e:	6003      	str	r3, [r0, #0]
  4017a0:	4770      	bx	lr

004017a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4017a2:	2300      	movs	r3, #0
  4017a4:	6103      	str	r3, [r0, #16]
  4017a6:	4770      	bx	lr

004017a8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  4017a8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  4017aa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4017ac:	689a      	ldr	r2, [r3, #8]
  4017ae:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  4017b0:	689a      	ldr	r2, [r3, #8]
  4017b2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  4017b4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4017b6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4017b8:	6803      	ldr	r3, [r0, #0]
  4017ba:	3301      	adds	r3, #1
  4017bc:	6003      	str	r3, [r0, #0]
  4017be:	4770      	bx	lr

004017c0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4017c0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4017c2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4017c4:	f1b5 3fff 	cmp.w	r5, #4294967295
  4017c8:	d002      	beq.n	4017d0 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4017ca:	f100 0208 	add.w	r2, r0, #8
  4017ce:	e002      	b.n	4017d6 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4017d0:	6902      	ldr	r2, [r0, #16]
  4017d2:	e004      	b.n	4017de <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4017d4:	461a      	mov	r2, r3
  4017d6:	6853      	ldr	r3, [r2, #4]
  4017d8:	681c      	ldr	r4, [r3, #0]
  4017da:	42a5      	cmp	r5, r4
  4017dc:	d2fa      	bcs.n	4017d4 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4017de:	6853      	ldr	r3, [r2, #4]
  4017e0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4017e2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4017e4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4017e6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4017e8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4017ea:	6803      	ldr	r3, [r0, #0]
  4017ec:	3301      	adds	r3, #1
  4017ee:	6003      	str	r3, [r0, #0]
}
  4017f0:	bc30      	pop	{r4, r5}
  4017f2:	4770      	bx	lr

004017f4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4017f4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4017f6:	6842      	ldr	r2, [r0, #4]
  4017f8:	6881      	ldr	r1, [r0, #8]
  4017fa:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4017fc:	6882      	ldr	r2, [r0, #8]
  4017fe:	6841      	ldr	r1, [r0, #4]
  401800:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  401802:	685a      	ldr	r2, [r3, #4]
  401804:	4290      	cmp	r0, r2
  401806:	d005      	beq.n	401814 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  401808:	2200      	movs	r2, #0
  40180a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  40180c:	6818      	ldr	r0, [r3, #0]
  40180e:	3801      	subs	r0, #1
  401810:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  401812:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  401814:	6882      	ldr	r2, [r0, #8]
  401816:	605a      	str	r2, [r3, #4]
  401818:	e7f6      	b.n	401808 <uxListRemove+0x14>
	...

0040181c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  40181c:	4b0d      	ldr	r3, [pc, #52]	; (401854 <prvTaskExitError+0x38>)
  40181e:	681b      	ldr	r3, [r3, #0]
  401820:	f1b3 3fff 	cmp.w	r3, #4294967295
  401824:	d00a      	beq.n	40183c <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401826:	f04f 0380 	mov.w	r3, #128	; 0x80
  40182a:	b672      	cpsid	i
  40182c:	f383 8811 	msr	BASEPRI, r3
  401830:	f3bf 8f6f 	isb	sy
  401834:	f3bf 8f4f 	dsb	sy
  401838:	b662      	cpsie	i
  40183a:	e7fe      	b.n	40183a <prvTaskExitError+0x1e>
  40183c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401840:	b672      	cpsid	i
  401842:	f383 8811 	msr	BASEPRI, r3
  401846:	f3bf 8f6f 	isb	sy
  40184a:	f3bf 8f4f 	dsb	sy
  40184e:	b662      	cpsie	i
  401850:	e7fe      	b.n	401850 <prvTaskExitError+0x34>
  401852:	bf00      	nop
  401854:	2040006c 	.word	0x2040006c

00401858 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401858:	4806      	ldr	r0, [pc, #24]	; (401874 <prvPortStartFirstTask+0x1c>)
  40185a:	6800      	ldr	r0, [r0, #0]
  40185c:	6800      	ldr	r0, [r0, #0]
  40185e:	f380 8808 	msr	MSP, r0
  401862:	b662      	cpsie	i
  401864:	b661      	cpsie	f
  401866:	f3bf 8f4f 	dsb	sy
  40186a:	f3bf 8f6f 	isb	sy
  40186e:	df00      	svc	0
  401870:	bf00      	nop
  401872:	0000      	.short	0x0000
  401874:	e000ed08 	.word	0xe000ed08

00401878 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401878:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401888 <vPortEnableVFP+0x10>
  40187c:	6801      	ldr	r1, [r0, #0]
  40187e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401882:	6001      	str	r1, [r0, #0]
  401884:	4770      	bx	lr
  401886:	0000      	.short	0x0000
  401888:	e000ed88 	.word	0xe000ed88

0040188c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  40188c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401890:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401894:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401898:	4b05      	ldr	r3, [pc, #20]	; (4018b0 <pxPortInitialiseStack+0x24>)
  40189a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40189e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4018a2:	f06f 0302 	mvn.w	r3, #2
  4018a6:	f840 3c24 	str.w	r3, [r0, #-36]
}
  4018aa:	3844      	subs	r0, #68	; 0x44
  4018ac:	4770      	bx	lr
  4018ae:	bf00      	nop
  4018b0:	0040181d 	.word	0x0040181d

004018b4 <SVC_Handler>:
	__asm volatile (
  4018b4:	4b06      	ldr	r3, [pc, #24]	; (4018d0 <pxCurrentTCBConst2>)
  4018b6:	6819      	ldr	r1, [r3, #0]
  4018b8:	6808      	ldr	r0, [r1, #0]
  4018ba:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4018be:	f380 8809 	msr	PSP, r0
  4018c2:	f3bf 8f6f 	isb	sy
  4018c6:	f04f 0000 	mov.w	r0, #0
  4018ca:	f380 8811 	msr	BASEPRI, r0
  4018ce:	4770      	bx	lr

004018d0 <pxCurrentTCBConst2>:
  4018d0:	2040c2b8 	.word	0x2040c2b8
  4018d4:	4770      	bx	lr
  4018d6:	bf00      	nop

004018d8 <vPortEnterCritical>:
  4018d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018dc:	b672      	cpsid	i
  4018de:	f383 8811 	msr	BASEPRI, r3
  4018e2:	f3bf 8f6f 	isb	sy
  4018e6:	f3bf 8f4f 	dsb	sy
  4018ea:	b662      	cpsie	i
	uxCriticalNesting++;
  4018ec:	4a0b      	ldr	r2, [pc, #44]	; (40191c <vPortEnterCritical+0x44>)
  4018ee:	6813      	ldr	r3, [r2, #0]
  4018f0:	3301      	adds	r3, #1
  4018f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4018f4:	2b01      	cmp	r3, #1
  4018f6:	d10f      	bne.n	401918 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4018f8:	4b09      	ldr	r3, [pc, #36]	; (401920 <vPortEnterCritical+0x48>)
  4018fa:	681b      	ldr	r3, [r3, #0]
  4018fc:	f013 0fff 	tst.w	r3, #255	; 0xff
  401900:	d00a      	beq.n	401918 <vPortEnterCritical+0x40>
  401902:	f04f 0380 	mov.w	r3, #128	; 0x80
  401906:	b672      	cpsid	i
  401908:	f383 8811 	msr	BASEPRI, r3
  40190c:	f3bf 8f6f 	isb	sy
  401910:	f3bf 8f4f 	dsb	sy
  401914:	b662      	cpsie	i
  401916:	e7fe      	b.n	401916 <vPortEnterCritical+0x3e>
  401918:	4770      	bx	lr
  40191a:	bf00      	nop
  40191c:	2040006c 	.word	0x2040006c
  401920:	e000ed04 	.word	0xe000ed04

00401924 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401924:	4b0a      	ldr	r3, [pc, #40]	; (401950 <vPortExitCritical+0x2c>)
  401926:	681b      	ldr	r3, [r3, #0]
  401928:	b953      	cbnz	r3, 401940 <vPortExitCritical+0x1c>
  40192a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40192e:	b672      	cpsid	i
  401930:	f383 8811 	msr	BASEPRI, r3
  401934:	f3bf 8f6f 	isb	sy
  401938:	f3bf 8f4f 	dsb	sy
  40193c:	b662      	cpsie	i
  40193e:	e7fe      	b.n	40193e <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  401940:	3b01      	subs	r3, #1
  401942:	4a03      	ldr	r2, [pc, #12]	; (401950 <vPortExitCritical+0x2c>)
  401944:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401946:	b90b      	cbnz	r3, 40194c <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401948:	f383 8811 	msr	BASEPRI, r3
  40194c:	4770      	bx	lr
  40194e:	bf00      	nop
  401950:	2040006c 	.word	0x2040006c

00401954 <PendSV_Handler>:
	__asm volatile
  401954:	f3ef 8009 	mrs	r0, PSP
  401958:	f3bf 8f6f 	isb	sy
  40195c:	4b15      	ldr	r3, [pc, #84]	; (4019b4 <pxCurrentTCBConst>)
  40195e:	681a      	ldr	r2, [r3, #0]
  401960:	f01e 0f10 	tst.w	lr, #16
  401964:	bf08      	it	eq
  401966:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40196a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40196e:	6010      	str	r0, [r2, #0]
  401970:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401974:	f04f 0080 	mov.w	r0, #128	; 0x80
  401978:	b672      	cpsid	i
  40197a:	f380 8811 	msr	BASEPRI, r0
  40197e:	f3bf 8f4f 	dsb	sy
  401982:	f3bf 8f6f 	isb	sy
  401986:	b662      	cpsie	i
  401988:	f001 f960 	bl	402c4c <vTaskSwitchContext>
  40198c:	f04f 0000 	mov.w	r0, #0
  401990:	f380 8811 	msr	BASEPRI, r0
  401994:	bc08      	pop	{r3}
  401996:	6819      	ldr	r1, [r3, #0]
  401998:	6808      	ldr	r0, [r1, #0]
  40199a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40199e:	f01e 0f10 	tst.w	lr, #16
  4019a2:	bf08      	it	eq
  4019a4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4019a8:	f380 8809 	msr	PSP, r0
  4019ac:	f3bf 8f6f 	isb	sy
  4019b0:	4770      	bx	lr
  4019b2:	bf00      	nop

004019b4 <pxCurrentTCBConst>:
  4019b4:	2040c2b8 	.word	0x2040c2b8
  4019b8:	4770      	bx	lr
  4019ba:	bf00      	nop

004019bc <SysTick_Handler>:
{
  4019bc:	b508      	push	{r3, lr}
	__asm volatile
  4019be:	f3ef 8311 	mrs	r3, BASEPRI
  4019c2:	f04f 0280 	mov.w	r2, #128	; 0x80
  4019c6:	b672      	cpsid	i
  4019c8:	f382 8811 	msr	BASEPRI, r2
  4019cc:	f3bf 8f6f 	isb	sy
  4019d0:	f3bf 8f4f 	dsb	sy
  4019d4:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4019d6:	4b05      	ldr	r3, [pc, #20]	; (4019ec <SysTick_Handler+0x30>)
  4019d8:	4798      	blx	r3
  4019da:	b118      	cbz	r0, 4019e4 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4019dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019e0:	4b03      	ldr	r3, [pc, #12]	; (4019f0 <SysTick_Handler+0x34>)
  4019e2:	601a      	str	r2, [r3, #0]
	__asm volatile
  4019e4:	2300      	movs	r3, #0
  4019e6:	f383 8811 	msr	BASEPRI, r3
  4019ea:	bd08      	pop	{r3, pc}
  4019ec:	004028c1 	.word	0x004028c1
  4019f0:	e000ed04 	.word	0xe000ed04

004019f4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4019f4:	4a03      	ldr	r2, [pc, #12]	; (401a04 <vPortSetupTimerInterrupt+0x10>)
  4019f6:	4b04      	ldr	r3, [pc, #16]	; (401a08 <vPortSetupTimerInterrupt+0x14>)
  4019f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4019fa:	2207      	movs	r2, #7
  4019fc:	3b04      	subs	r3, #4
  4019fe:	601a      	str	r2, [r3, #0]
  401a00:	4770      	bx	lr
  401a02:	bf00      	nop
  401a04:	0003a97f 	.word	0x0003a97f
  401a08:	e000e014 	.word	0xe000e014

00401a0c <xPortStartScheduler>:
{
  401a0c:	b500      	push	{lr}
  401a0e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  401a10:	4b22      	ldr	r3, [pc, #136]	; (401a9c <xPortStartScheduler+0x90>)
  401a12:	781a      	ldrb	r2, [r3, #0]
  401a14:	b2d2      	uxtb	r2, r2
  401a16:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  401a18:	22ff      	movs	r2, #255	; 0xff
  401a1a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401a1c:	781b      	ldrb	r3, [r3, #0]
  401a1e:	b2db      	uxtb	r3, r3
  401a20:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401a24:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401a2c:	4a1c      	ldr	r2, [pc, #112]	; (401aa0 <xPortStartScheduler+0x94>)
  401a2e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401a30:	2207      	movs	r2, #7
  401a32:	4b1c      	ldr	r3, [pc, #112]	; (401aa4 <xPortStartScheduler+0x98>)
  401a34:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401a36:	e009      	b.n	401a4c <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
  401a38:	4a1a      	ldr	r2, [pc, #104]	; (401aa4 <xPortStartScheduler+0x98>)
  401a3a:	6813      	ldr	r3, [r2, #0]
  401a3c:	3b01      	subs	r3, #1
  401a3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  401a40:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401a44:	005b      	lsls	r3, r3, #1
  401a46:	b2db      	uxtb	r3, r3
  401a48:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401a4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401a50:	f013 0f80 	tst.w	r3, #128	; 0x80
  401a54:	d1f0      	bne.n	401a38 <xPortStartScheduler+0x2c>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401a56:	4a13      	ldr	r2, [pc, #76]	; (401aa4 <xPortStartScheduler+0x98>)
  401a58:	6813      	ldr	r3, [r2, #0]
  401a5a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401a5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401a60:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401a62:	9b01      	ldr	r3, [sp, #4]
  401a64:	b2db      	uxtb	r3, r3
  401a66:	4a0d      	ldr	r2, [pc, #52]	; (401a9c <xPortStartScheduler+0x90>)
  401a68:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401a6a:	4b0f      	ldr	r3, [pc, #60]	; (401aa8 <xPortStartScheduler+0x9c>)
  401a6c:	681a      	ldr	r2, [r3, #0]
  401a6e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401a72:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401a74:	681a      	ldr	r2, [r3, #0]
  401a76:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401a7a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401a7c:	4b0b      	ldr	r3, [pc, #44]	; (401aac <xPortStartScheduler+0xa0>)
  401a7e:	4798      	blx	r3
	uxCriticalNesting = 0;
  401a80:	2200      	movs	r2, #0
  401a82:	4b0b      	ldr	r3, [pc, #44]	; (401ab0 <xPortStartScheduler+0xa4>)
  401a84:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  401a86:	4b0b      	ldr	r3, [pc, #44]	; (401ab4 <xPortStartScheduler+0xa8>)
  401a88:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  401a8a:	4a0b      	ldr	r2, [pc, #44]	; (401ab8 <xPortStartScheduler+0xac>)
  401a8c:	6813      	ldr	r3, [r2, #0]
  401a8e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401a92:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401a94:	4b09      	ldr	r3, [pc, #36]	; (401abc <xPortStartScheduler+0xb0>)
  401a96:	4798      	blx	r3
	prvTaskExitError();
  401a98:	4b09      	ldr	r3, [pc, #36]	; (401ac0 <xPortStartScheduler+0xb4>)
  401a9a:	4798      	blx	r3
  401a9c:	e000e400 	.word	0xe000e400
  401aa0:	20400aa8 	.word	0x20400aa8
  401aa4:	20400aac 	.word	0x20400aac
  401aa8:	e000ed20 	.word	0xe000ed20
  401aac:	004019f5 	.word	0x004019f5
  401ab0:	2040006c 	.word	0x2040006c
  401ab4:	00401879 	.word	0x00401879
  401ab8:	e000ef34 	.word	0xe000ef34
  401abc:	00401859 	.word	0x00401859
  401ac0:	0040181d 	.word	0x0040181d

00401ac4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401ac4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401ac8:	2b0f      	cmp	r3, #15
  401aca:	d911      	bls.n	401af0 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401acc:	4a12      	ldr	r2, [pc, #72]	; (401b18 <vPortValidateInterruptPriority+0x54>)
  401ace:	5c9b      	ldrb	r3, [r3, r2]
  401ad0:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401ad2:	4a12      	ldr	r2, [pc, #72]	; (401b1c <vPortValidateInterruptPriority+0x58>)
  401ad4:	7812      	ldrb	r2, [r2, #0]
  401ad6:	4293      	cmp	r3, r2
  401ad8:	d20a      	bcs.n	401af0 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  401ada:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ade:	b672      	cpsid	i
  401ae0:	f383 8811 	msr	BASEPRI, r3
  401ae4:	f3bf 8f6f 	isb	sy
  401ae8:	f3bf 8f4f 	dsb	sy
  401aec:	b662      	cpsie	i
  401aee:	e7fe      	b.n	401aee <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401af0:	4b0b      	ldr	r3, [pc, #44]	; (401b20 <vPortValidateInterruptPriority+0x5c>)
  401af2:	681b      	ldr	r3, [r3, #0]
  401af4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401af8:	4a0a      	ldr	r2, [pc, #40]	; (401b24 <vPortValidateInterruptPriority+0x60>)
  401afa:	6812      	ldr	r2, [r2, #0]
  401afc:	4293      	cmp	r3, r2
  401afe:	d90a      	bls.n	401b16 <vPortValidateInterruptPriority+0x52>
  401b00:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b04:	b672      	cpsid	i
  401b06:	f383 8811 	msr	BASEPRI, r3
  401b0a:	f3bf 8f6f 	isb	sy
  401b0e:	f3bf 8f4f 	dsb	sy
  401b12:	b662      	cpsie	i
  401b14:	e7fe      	b.n	401b14 <vPortValidateInterruptPriority+0x50>
  401b16:	4770      	bx	lr
  401b18:	e000e3f0 	.word	0xe000e3f0
  401b1c:	20400aa8 	.word	0x20400aa8
  401b20:	e000ed0c 	.word	0xe000ed0c
  401b24:	20400aac 	.word	0x20400aac

00401b28 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401b28:	b538      	push	{r3, r4, r5, lr}
  401b2a:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  401b2c:	f010 0f07 	tst.w	r0, #7
  401b30:	d002      	beq.n	401b38 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  401b32:	f020 0407 	bic.w	r4, r0, #7
  401b36:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  401b38:	4b12      	ldr	r3, [pc, #72]	; (401b84 <pvPortMalloc+0x5c>)
  401b3a:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  401b3c:	4b12      	ldr	r3, [pc, #72]	; (401b88 <pvPortMalloc+0x60>)
  401b3e:	681b      	ldr	r3, [r3, #0]
  401b40:	b193      	cbz	r3, 401b68 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  401b42:	4b12      	ldr	r3, [pc, #72]	; (401b8c <pvPortMalloc+0x64>)
  401b44:	681b      	ldr	r3, [r3, #0]
  401b46:	441c      	add	r4, r3
  401b48:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  401b4c:	4294      	cmp	r4, r2
  401b4e:	d811      	bhi.n	401b74 <pvPortMalloc+0x4c>
  401b50:	42a3      	cmp	r3, r4
  401b52:	d211      	bcs.n	401b78 <pvPortMalloc+0x50>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  401b54:	4a0c      	ldr	r2, [pc, #48]	; (401b88 <pvPortMalloc+0x60>)
  401b56:	6815      	ldr	r5, [r2, #0]
  401b58:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  401b5a:	4b0c      	ldr	r3, [pc, #48]	; (401b8c <pvPortMalloc+0x64>)
  401b5c:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401b5e:	4b0c      	ldr	r3, [pc, #48]	; (401b90 <pvPortMalloc+0x68>)
  401b60:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401b62:	b15d      	cbz	r5, 401b7c <pvPortMalloc+0x54>
		}
	}
	#endif

	return pvReturn;
}
  401b64:	4628      	mov	r0, r5
  401b66:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  401b68:	4b0a      	ldr	r3, [pc, #40]	; (401b94 <pvPortMalloc+0x6c>)
  401b6a:	f023 0307 	bic.w	r3, r3, #7
  401b6e:	4a06      	ldr	r2, [pc, #24]	; (401b88 <pvPortMalloc+0x60>)
  401b70:	6013      	str	r3, [r2, #0]
  401b72:	e7e6      	b.n	401b42 <pvPortMalloc+0x1a>
void *pvReturn = NULL;
  401b74:	2500      	movs	r5, #0
  401b76:	e7f2      	b.n	401b5e <pvPortMalloc+0x36>
  401b78:	2500      	movs	r5, #0
  401b7a:	e7f0      	b.n	401b5e <pvPortMalloc+0x36>
			vApplicationMallocFailedHook();
  401b7c:	4b06      	ldr	r3, [pc, #24]	; (401b98 <pvPortMalloc+0x70>)
  401b7e:	4798      	blx	r3
	return pvReturn;
  401b80:	e7f0      	b.n	401b64 <pvPortMalloc+0x3c>
  401b82:	bf00      	nop
  401b84:	004028a5 	.word	0x004028a5
  401b88:	20400ab0 	.word	0x20400ab0
  401b8c:	2040c2b4 	.word	0x2040c2b4
  401b90:	00402a05 	.word	0x00402a05
  401b94:	20400abc 	.word	0x20400abc
  401b98:	00426b9f 	.word	0x00426b9f

00401b9c <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  401b9c:	b150      	cbz	r0, 401bb4 <vPortFree+0x18>
  401b9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ba2:	b672      	cpsid	i
  401ba4:	f383 8811 	msr	BASEPRI, r3
  401ba8:	f3bf 8f6f 	isb	sy
  401bac:	f3bf 8f4f 	dsb	sy
  401bb0:	b662      	cpsie	i
  401bb2:	e7fe      	b.n	401bb2 <vPortFree+0x16>
  401bb4:	4770      	bx	lr
	...

00401bb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
  401bb8:	b510      	push	{r4, lr}
  401bba:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401bbc:	4b06      	ldr	r3, [pc, #24]	; (401bd8 <prvIsQueueFull+0x20>)
  401bbe:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401bc0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401bc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401bc4:	429a      	cmp	r2, r3
  401bc6:	d004      	beq.n	401bd2 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
  401bc8:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
  401bca:	4b04      	ldr	r3, [pc, #16]	; (401bdc <prvIsQueueFull+0x24>)
  401bcc:	4798      	blx	r3

	return xReturn;
}
  401bce:	4620      	mov	r0, r4
  401bd0:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
  401bd2:	2401      	movs	r4, #1
  401bd4:	e7f9      	b.n	401bca <prvIsQueueFull+0x12>
  401bd6:	bf00      	nop
  401bd8:	004018d9 	.word	0x004018d9
  401bdc:	00401925 	.word	0x00401925

00401be0 <prvIsQueueEmpty>:
{
  401be0:	b510      	push	{r4, lr}
  401be2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401be4:	4b05      	ldr	r3, [pc, #20]	; (401bfc <prvIsQueueEmpty+0x1c>)
  401be6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401be8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401bea:	b123      	cbz	r3, 401bf6 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
  401bec:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401bee:	4b04      	ldr	r3, [pc, #16]	; (401c00 <prvIsQueueEmpty+0x20>)
  401bf0:	4798      	blx	r3
}
  401bf2:	4620      	mov	r0, r4
  401bf4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
  401bf6:	2401      	movs	r4, #1
  401bf8:	e7f9      	b.n	401bee <prvIsQueueEmpty+0xe>
  401bfa:	bf00      	nop
  401bfc:	004018d9 	.word	0x004018d9
  401c00:	00401925 	.word	0x00401925

00401c04 <prvCopyDataToQueue>:
{
  401c04:	b538      	push	{r3, r4, r5, lr}
  401c06:	4604      	mov	r4, r0
  401c08:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401c0a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401c0c:	b95a      	cbnz	r2, 401c26 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401c0e:	6803      	ldr	r3, [r0, #0]
  401c10:	2b00      	cmp	r3, #0
  401c12:	d12e      	bne.n	401c72 <prvCopyDataToQueue+0x6e>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401c14:	6840      	ldr	r0, [r0, #4]
  401c16:	4b1b      	ldr	r3, [pc, #108]	; (401c84 <prvCopyDataToQueue+0x80>)
  401c18:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401c1a:	2300      	movs	r3, #0
  401c1c:	6063      	str	r3, [r4, #4]
	++( pxQueue->uxMessagesWaiting );
  401c1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c20:	3301      	adds	r3, #1
  401c22:	63a3      	str	r3, [r4, #56]	; 0x38
}
  401c24:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401c26:	b96d      	cbnz	r5, 401c44 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401c28:	6880      	ldr	r0, [r0, #8]
  401c2a:	4b17      	ldr	r3, [pc, #92]	; (401c88 <prvCopyDataToQueue+0x84>)
  401c2c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401c2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401c30:	68a3      	ldr	r3, [r4, #8]
  401c32:	4413      	add	r3, r2
  401c34:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401c36:	6862      	ldr	r2, [r4, #4]
  401c38:	4293      	cmp	r3, r2
  401c3a:	d31c      	bcc.n	401c76 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401c3c:	6823      	ldr	r3, [r4, #0]
  401c3e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401c40:	2000      	movs	r0, #0
  401c42:	e7ec      	b.n	401c1e <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401c44:	68c0      	ldr	r0, [r0, #12]
  401c46:	4b10      	ldr	r3, [pc, #64]	; (401c88 <prvCopyDataToQueue+0x84>)
  401c48:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401c4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401c4c:	425b      	negs	r3, r3
  401c4e:	68e2      	ldr	r2, [r4, #12]
  401c50:	441a      	add	r2, r3
  401c52:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401c54:	6821      	ldr	r1, [r4, #0]
  401c56:	428a      	cmp	r2, r1
  401c58:	d202      	bcs.n	401c60 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401c5a:	6862      	ldr	r2, [r4, #4]
  401c5c:	4413      	add	r3, r2
  401c5e:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401c60:	2d02      	cmp	r5, #2
  401c62:	d10a      	bne.n	401c7a <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401c64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c66:	b153      	cbz	r3, 401c7e <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  401c68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c6a:	3b01      	subs	r3, #1
  401c6c:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401c6e:	2000      	movs	r0, #0
  401c70:	e7d5      	b.n	401c1e <prvCopyDataToQueue+0x1a>
  401c72:	2000      	movs	r0, #0
  401c74:	e7d3      	b.n	401c1e <prvCopyDataToQueue+0x1a>
  401c76:	2000      	movs	r0, #0
  401c78:	e7d1      	b.n	401c1e <prvCopyDataToQueue+0x1a>
  401c7a:	2000      	movs	r0, #0
  401c7c:	e7cf      	b.n	401c1e <prvCopyDataToQueue+0x1a>
  401c7e:	2000      	movs	r0, #0
  401c80:	e7cd      	b.n	401c1e <prvCopyDataToQueue+0x1a>
  401c82:	bf00      	nop
  401c84:	00403059 	.word	0x00403059
  401c88:	00428601 	.word	0x00428601

00401c8c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401c8c:	b530      	push	{r4, r5, lr}
  401c8e:	b083      	sub	sp, #12
  401c90:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401c92:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401c94:	b174      	cbz	r4, 401cb4 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  401c96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401c98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401c9a:	429a      	cmp	r2, r3
  401c9c:	d315      	bcc.n	401cca <prvNotifyQueueSetContainer+0x3e>
  401c9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ca2:	b672      	cpsid	i
  401ca4:	f383 8811 	msr	BASEPRI, r3
  401ca8:	f3bf 8f6f 	isb	sy
  401cac:	f3bf 8f4f 	dsb	sy
  401cb0:	b662      	cpsie	i
  401cb2:	e7fe      	b.n	401cb2 <prvNotifyQueueSetContainer+0x26>
  401cb4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cb8:	b672      	cpsid	i
  401cba:	f383 8811 	msr	BASEPRI, r3
  401cbe:	f3bf 8f6f 	isb	sy
  401cc2:	f3bf 8f4f 	dsb	sy
  401cc6:	b662      	cpsie	i
  401cc8:	e7fe      	b.n	401cc8 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401cca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401ccc:	4293      	cmp	r3, r2
  401cce:	d803      	bhi.n	401cd8 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401cd0:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401cd2:	4628      	mov	r0, r5
  401cd4:	b003      	add	sp, #12
  401cd6:	bd30      	pop	{r4, r5, pc}
  401cd8:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401cda:	a901      	add	r1, sp, #4
  401cdc:	4620      	mov	r0, r4
  401cde:	4b0b      	ldr	r3, [pc, #44]	; (401d0c <prvNotifyQueueSetContainer+0x80>)
  401ce0:	4798      	blx	r3
  401ce2:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401ce4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
  401cea:	d10a      	bne.n	401d02 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401cee:	2b00      	cmp	r3, #0
  401cf0:	d0ef      	beq.n	401cd2 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401cf2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401cf6:	4b06      	ldr	r3, [pc, #24]	; (401d10 <prvNotifyQueueSetContainer+0x84>)
  401cf8:	4798      	blx	r3
  401cfa:	2800      	cmp	r0, #0
  401cfc:	d0e9      	beq.n	401cd2 <prvNotifyQueueSetContainer+0x46>
						xReturn = pdTRUE;
  401cfe:	2501      	movs	r5, #1
		return xReturn;
  401d00:	e7e7      	b.n	401cd2 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  401d02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d04:	3301      	adds	r3, #1
  401d06:	64a3      	str	r3, [r4, #72]	; 0x48
  401d08:	e7e3      	b.n	401cd2 <prvNotifyQueueSetContainer+0x46>
  401d0a:	bf00      	nop
  401d0c:	00401c05 	.word	0x00401c05
  401d10:	00402e25 	.word	0x00402e25

00401d14 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401d14:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401d16:	b172      	cbz	r2, 401d36 <prvCopyDataFromQueue+0x22>
{
  401d18:	b510      	push	{r4, lr}
  401d1a:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401d1c:	68c4      	ldr	r4, [r0, #12]
  401d1e:	4414      	add	r4, r2
  401d20:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401d22:	6840      	ldr	r0, [r0, #4]
  401d24:	4284      	cmp	r4, r0
  401d26:	d301      	bcc.n	401d2c <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401d28:	6818      	ldr	r0, [r3, #0]
  401d2a:	60d8      	str	r0, [r3, #12]
  401d2c:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401d2e:	68d9      	ldr	r1, [r3, #12]
  401d30:	4b01      	ldr	r3, [pc, #4]	; (401d38 <prvCopyDataFromQueue+0x24>)
  401d32:	4798      	blx	r3
  401d34:	bd10      	pop	{r4, pc}
  401d36:	4770      	bx	lr
  401d38:	00428601 	.word	0x00428601

00401d3c <prvUnlockQueue>:
{
  401d3c:	b510      	push	{r4, lr}
  401d3e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401d40:	4b1e      	ldr	r3, [pc, #120]	; (401dbc <prvUnlockQueue+0x80>)
  401d42:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401d44:	e009      	b.n	401d5a <prvUnlockQueue+0x1e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401d48:	b1cb      	cbz	r3, 401d7e <prvUnlockQueue+0x42>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401d4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d4e:	4b1c      	ldr	r3, [pc, #112]	; (401dc0 <prvUnlockQueue+0x84>)
  401d50:	4798      	blx	r3
  401d52:	b988      	cbnz	r0, 401d78 <prvUnlockQueue+0x3c>
			--( pxQueue->xTxLock );
  401d54:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d56:	3b01      	subs	r3, #1
  401d58:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401d5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d5c:	2b00      	cmp	r3, #0
  401d5e:	dd0e      	ble.n	401d7e <prvUnlockQueue+0x42>
				if( pxQueue->pxQueueSetContainer != NULL )
  401d60:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401d62:	2b00      	cmp	r3, #0
  401d64:	d0ef      	beq.n	401d46 <prvUnlockQueue+0xa>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401d66:	2100      	movs	r1, #0
  401d68:	4620      	mov	r0, r4
  401d6a:	4b16      	ldr	r3, [pc, #88]	; (401dc4 <prvUnlockQueue+0x88>)
  401d6c:	4798      	blx	r3
  401d6e:	2801      	cmp	r0, #1
  401d70:	d1f0      	bne.n	401d54 <prvUnlockQueue+0x18>
						vTaskMissedYield();
  401d72:	4b15      	ldr	r3, [pc, #84]	; (401dc8 <prvUnlockQueue+0x8c>)
  401d74:	4798      	blx	r3
  401d76:	e7ed      	b.n	401d54 <prvUnlockQueue+0x18>
							vTaskMissedYield();
  401d78:	4b13      	ldr	r3, [pc, #76]	; (401dc8 <prvUnlockQueue+0x8c>)
  401d7a:	4798      	blx	r3
  401d7c:	e7ea      	b.n	401d54 <prvUnlockQueue+0x18>
		pxQueue->xTxLock = queueUNLOCKED;
  401d7e:	f04f 33ff 	mov.w	r3, #4294967295
  401d82:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401d84:	4b11      	ldr	r3, [pc, #68]	; (401dcc <prvUnlockQueue+0x90>)
  401d86:	4798      	blx	r3
	taskENTER_CRITICAL();
  401d88:	4b0c      	ldr	r3, [pc, #48]	; (401dbc <prvUnlockQueue+0x80>)
  401d8a:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401d8c:	e002      	b.n	401d94 <prvUnlockQueue+0x58>
				--( pxQueue->xRxLock );
  401d8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401d90:	3b01      	subs	r3, #1
  401d92:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401d94:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401d96:	2b00      	cmp	r3, #0
  401d98:	dd0a      	ble.n	401db0 <prvUnlockQueue+0x74>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401d9a:	6923      	ldr	r3, [r4, #16]
  401d9c:	b143      	cbz	r3, 401db0 <prvUnlockQueue+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401d9e:	f104 0010 	add.w	r0, r4, #16
  401da2:	4b07      	ldr	r3, [pc, #28]	; (401dc0 <prvUnlockQueue+0x84>)
  401da4:	4798      	blx	r3
  401da6:	2800      	cmp	r0, #0
  401da8:	d0f1      	beq.n	401d8e <prvUnlockQueue+0x52>
					vTaskMissedYield();
  401daa:	4b07      	ldr	r3, [pc, #28]	; (401dc8 <prvUnlockQueue+0x8c>)
  401dac:	4798      	blx	r3
  401dae:	e7ee      	b.n	401d8e <prvUnlockQueue+0x52>
		pxQueue->xRxLock = queueUNLOCKED;
  401db0:	f04f 33ff 	mov.w	r3, #4294967295
  401db4:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401db6:	4b05      	ldr	r3, [pc, #20]	; (401dcc <prvUnlockQueue+0x90>)
  401db8:	4798      	blx	r3
  401dba:	bd10      	pop	{r4, pc}
  401dbc:	004018d9 	.word	0x004018d9
  401dc0:	00402e25 	.word	0x00402e25
  401dc4:	00401c8d 	.word	0x00401c8d
  401dc8:	00402f81 	.word	0x00402f81
  401dcc:	00401925 	.word	0x00401925

00401dd0 <xQueueGenericReset>:
{
  401dd0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  401dd2:	b308      	cbz	r0, 401e18 <xQueueGenericReset+0x48>
  401dd4:	4604      	mov	r4, r0
  401dd6:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401dd8:	4b1d      	ldr	r3, [pc, #116]	; (401e50 <xQueueGenericReset+0x80>)
  401dda:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401ddc:	6821      	ldr	r1, [r4, #0]
  401dde:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401de0:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401de2:	fb03 1002 	mla	r0, r3, r2, r1
  401de6:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401de8:	2000      	movs	r0, #0
  401dea:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401dec:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401dee:	3a01      	subs	r2, #1
  401df0:	fb02 1303 	mla	r3, r2, r3, r1
  401df4:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401df6:	f04f 33ff 	mov.w	r3, #4294967295
  401dfa:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401dfc:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401dfe:	b9fd      	cbnz	r5, 401e40 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401e00:	6923      	ldr	r3, [r4, #16]
  401e02:	b12b      	cbz	r3, 401e10 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401e04:	f104 0010 	add.w	r0, r4, #16
  401e08:	4b12      	ldr	r3, [pc, #72]	; (401e54 <xQueueGenericReset+0x84>)
  401e0a:	4798      	blx	r3
  401e0c:	2801      	cmp	r0, #1
  401e0e:	d00e      	beq.n	401e2e <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401e10:	4b11      	ldr	r3, [pc, #68]	; (401e58 <xQueueGenericReset+0x88>)
  401e12:	4798      	blx	r3
}
  401e14:	2001      	movs	r0, #1
  401e16:	bd38      	pop	{r3, r4, r5, pc}
  401e18:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e1c:	b672      	cpsid	i
  401e1e:	f383 8811 	msr	BASEPRI, r3
  401e22:	f3bf 8f6f 	isb	sy
  401e26:	f3bf 8f4f 	dsb	sy
  401e2a:	b662      	cpsie	i
  401e2c:	e7fe      	b.n	401e2c <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e32:	4b0a      	ldr	r3, [pc, #40]	; (401e5c <xQueueGenericReset+0x8c>)
  401e34:	601a      	str	r2, [r3, #0]
  401e36:	f3bf 8f4f 	dsb	sy
  401e3a:	f3bf 8f6f 	isb	sy
  401e3e:	e7e7      	b.n	401e10 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401e40:	f104 0010 	add.w	r0, r4, #16
  401e44:	4d06      	ldr	r5, [pc, #24]	; (401e60 <xQueueGenericReset+0x90>)
  401e46:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401e48:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e4c:	47a8      	blx	r5
  401e4e:	e7df      	b.n	401e10 <xQueueGenericReset+0x40>
  401e50:	004018d9 	.word	0x004018d9
  401e54:	00402e25 	.word	0x00402e25
  401e58:	00401925 	.word	0x00401925
  401e5c:	e000ed04 	.word	0xe000ed04
  401e60:	0040178d 	.word	0x0040178d

00401e64 <xQueueGenericCreate>:
{
  401e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401e66:	b950      	cbnz	r0, 401e7e <xQueueGenericCreate+0x1a>
  401e68:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e6c:	b672      	cpsid	i
  401e6e:	f383 8811 	msr	BASEPRI, r3
  401e72:	f3bf 8f6f 	isb	sy
  401e76:	f3bf 8f4f 	dsb	sy
  401e7a:	b662      	cpsie	i
  401e7c:	e7fe      	b.n	401e7c <xQueueGenericCreate+0x18>
  401e7e:	4606      	mov	r6, r0
	if( uxItemSize == ( UBaseType_t ) 0 )
  401e80:	b119      	cbz	r1, 401e8a <xQueueGenericCreate+0x26>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401e82:	fb01 f000 	mul.w	r0, r1, r0
  401e86:	3001      	adds	r0, #1
  401e88:	e000      	b.n	401e8c <xQueueGenericCreate+0x28>
		xQueueSizeInBytes = ( size_t ) 0;
  401e8a:	2000      	movs	r0, #0
  401e8c:	4617      	mov	r7, r2
  401e8e:	460d      	mov	r5, r1
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401e90:	3058      	adds	r0, #88	; 0x58
  401e92:	4b12      	ldr	r3, [pc, #72]	; (401edc <xQueueGenericCreate+0x78>)
  401e94:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401e96:	4604      	mov	r4, r0
  401e98:	b190      	cbz	r0, 401ec0 <xQueueGenericCreate+0x5c>
		if( uxItemSize == ( UBaseType_t ) 0 )
  401e9a:	b96d      	cbnz	r5, 401eb8 <xQueueGenericCreate+0x54>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401e9c:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401e9e:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401ea0:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401ea2:	2101      	movs	r1, #1
  401ea4:	4620      	mov	r0, r4
  401ea6:	4b0e      	ldr	r3, [pc, #56]	; (401ee0 <xQueueGenericCreate+0x7c>)
  401ea8:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  401eaa:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401eae:	2300      	movs	r3, #0
  401eb0:	6563      	str	r3, [r4, #84]	; 0x54
		xReturn = pxNewQueue;
  401eb2:	4620      	mov	r0, r4
	configASSERT( xReturn );
  401eb4:	b130      	cbz	r0, 401ec4 <xQueueGenericCreate+0x60>
}
  401eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401eb8:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401ebc:	6003      	str	r3, [r0, #0]
  401ebe:	e7ee      	b.n	401e9e <xQueueGenericCreate+0x3a>
QueueHandle_t xReturn = NULL;
  401ec0:	2000      	movs	r0, #0
  401ec2:	e7f7      	b.n	401eb4 <xQueueGenericCreate+0x50>
  401ec4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ec8:	b672      	cpsid	i
  401eca:	f383 8811 	msr	BASEPRI, r3
  401ece:	f3bf 8f6f 	isb	sy
  401ed2:	f3bf 8f4f 	dsb	sy
  401ed6:	b662      	cpsie	i
  401ed8:	e7fe      	b.n	401ed8 <xQueueGenericCreate+0x74>
  401eda:	bf00      	nop
  401edc:	00401b29 	.word	0x00401b29
  401ee0:	00401dd1 	.word	0x00401dd1

00401ee4 <xQueueGenericSend>:
{
  401ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
  401ee6:	b085      	sub	sp, #20
  401ee8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401eea:	b170      	cbz	r0, 401f0a <xQueueGenericSend+0x26>
  401eec:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401eee:	b1b9      	cbz	r1, 401f20 <xQueueGenericSend+0x3c>
  401ef0:	2501      	movs	r5, #1
  401ef2:	b9dd      	cbnz	r5, 401f2c <xQueueGenericSend+0x48>
  401ef4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ef8:	b672      	cpsid	i
  401efa:	f383 8811 	msr	BASEPRI, r3
  401efe:	f3bf 8f6f 	isb	sy
  401f02:	f3bf 8f4f 	dsb	sy
  401f06:	b662      	cpsie	i
  401f08:	e7fe      	b.n	401f08 <xQueueGenericSend+0x24>
  401f0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f0e:	b672      	cpsid	i
  401f10:	f383 8811 	msr	BASEPRI, r3
  401f14:	f3bf 8f6f 	isb	sy
  401f18:	f3bf 8f4f 	dsb	sy
  401f1c:	b662      	cpsie	i
  401f1e:	e7fe      	b.n	401f1e <xQueueGenericSend+0x3a>
  401f20:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401f22:	b90a      	cbnz	r2, 401f28 <xQueueGenericSend+0x44>
  401f24:	2501      	movs	r5, #1
  401f26:	e7e4      	b.n	401ef2 <xQueueGenericSend+0xe>
  401f28:	2500      	movs	r5, #0
  401f2a:	e7e2      	b.n	401ef2 <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401f2c:	2b02      	cmp	r3, #2
  401f2e:	d00b      	beq.n	401f48 <xQueueGenericSend+0x64>
  401f30:	b97d      	cbnz	r5, 401f52 <xQueueGenericSend+0x6e>
  401f32:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f36:	b672      	cpsid	i
  401f38:	f383 8811 	msr	BASEPRI, r3
  401f3c:	f3bf 8f6f 	isb	sy
  401f40:	f3bf 8f4f 	dsb	sy
  401f44:	b662      	cpsie	i
  401f46:	e7fe      	b.n	401f46 <xQueueGenericSend+0x62>
  401f48:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401f4a:	2a01      	cmp	r2, #1
  401f4c:	d0f0      	beq.n	401f30 <xQueueGenericSend+0x4c>
  401f4e:	2500      	movs	r5, #0
  401f50:	e7ee      	b.n	401f30 <xQueueGenericSend+0x4c>
  401f52:	461e      	mov	r6, r3
  401f54:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401f56:	4b4e      	ldr	r3, [pc, #312]	; (402090 <xQueueGenericSend+0x1ac>)
  401f58:	4798      	blx	r3
  401f5a:	b910      	cbnz	r0, 401f62 <xQueueGenericSend+0x7e>
  401f5c:	9b01      	ldr	r3, [sp, #4]
  401f5e:	b103      	cbz	r3, 401f62 <xQueueGenericSend+0x7e>
  401f60:	2500      	movs	r5, #0
  401f62:	b955      	cbnz	r5, 401f7a <xQueueGenericSend+0x96>
  401f64:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f68:	b672      	cpsid	i
  401f6a:	f383 8811 	msr	BASEPRI, r3
  401f6e:	f3bf 8f6f 	isb	sy
  401f72:	f3bf 8f4f 	dsb	sy
  401f76:	b662      	cpsie	i
  401f78:	e7fe      	b.n	401f78 <xQueueGenericSend+0x94>
  401f7a:	2500      	movs	r5, #0
  401f7c:	e03e      	b.n	401ffc <xQueueGenericSend+0x118>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401f7e:	4632      	mov	r2, r6
  401f80:	4639      	mov	r1, r7
  401f82:	4620      	mov	r0, r4
  401f84:	4b43      	ldr	r3, [pc, #268]	; (402094 <xQueueGenericSend+0x1b0>)
  401f86:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401f88:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401f8a:	b193      	cbz	r3, 401fb2 <xQueueGenericSend+0xce>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401f8c:	4631      	mov	r1, r6
  401f8e:	4620      	mov	r0, r4
  401f90:	4b41      	ldr	r3, [pc, #260]	; (402098 <xQueueGenericSend+0x1b4>)
  401f92:	4798      	blx	r3
  401f94:	2801      	cmp	r0, #1
  401f96:	d107      	bne.n	401fa8 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f9c:	4b3f      	ldr	r3, [pc, #252]	; (40209c <xQueueGenericSend+0x1b8>)
  401f9e:	601a      	str	r2, [r3, #0]
  401fa0:	f3bf 8f4f 	dsb	sy
  401fa4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401fa8:	4b3d      	ldr	r3, [pc, #244]	; (4020a0 <xQueueGenericSend+0x1bc>)
  401faa:	4798      	blx	r3
				return pdPASS;
  401fac:	2001      	movs	r0, #1
}
  401fae:	b005      	add	sp, #20
  401fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401fb4:	b173      	cbz	r3, 401fd4 <xQueueGenericSend+0xf0>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401fb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401fba:	4b3a      	ldr	r3, [pc, #232]	; (4020a4 <xQueueGenericSend+0x1c0>)
  401fbc:	4798      	blx	r3
  401fbe:	2801      	cmp	r0, #1
  401fc0:	d1f2      	bne.n	401fa8 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fc6:	4b35      	ldr	r3, [pc, #212]	; (40209c <xQueueGenericSend+0x1b8>)
  401fc8:	601a      	str	r2, [r3, #0]
  401fca:	f3bf 8f4f 	dsb	sy
  401fce:	f3bf 8f6f 	isb	sy
  401fd2:	e7e9      	b.n	401fa8 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  401fd4:	2800      	cmp	r0, #0
  401fd6:	d0e7      	beq.n	401fa8 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fdc:	4b2f      	ldr	r3, [pc, #188]	; (40209c <xQueueGenericSend+0x1b8>)
  401fde:	601a      	str	r2, [r3, #0]
  401fe0:	f3bf 8f4f 	dsb	sy
  401fe4:	f3bf 8f6f 	isb	sy
  401fe8:	e7de      	b.n	401fa8 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401fea:	4b2d      	ldr	r3, [pc, #180]	; (4020a0 <xQueueGenericSend+0x1bc>)
  401fec:	4798      	blx	r3
					return errQUEUE_FULL;
  401fee:	2000      	movs	r0, #0
  401ff0:	e7dd      	b.n	401fae <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401ff2:	4620      	mov	r0, r4
  401ff4:	4b2c      	ldr	r3, [pc, #176]	; (4020a8 <xQueueGenericSend+0x1c4>)
  401ff6:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401ff8:	4b2c      	ldr	r3, [pc, #176]	; (4020ac <xQueueGenericSend+0x1c8>)
  401ffa:	4798      	blx	r3
		taskENTER_CRITICAL();
  401ffc:	4b2c      	ldr	r3, [pc, #176]	; (4020b0 <xQueueGenericSend+0x1cc>)
  401ffe:	4798      	blx	r3
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402000:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402002:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402004:	429a      	cmp	r2, r3
  402006:	d3ba      	bcc.n	401f7e <xQueueGenericSend+0x9a>
  402008:	2e02      	cmp	r6, #2
  40200a:	d0b8      	beq.n	401f7e <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  40200c:	9b01      	ldr	r3, [sp, #4]
  40200e:	2b00      	cmp	r3, #0
  402010:	d0eb      	beq.n	401fea <xQueueGenericSend+0x106>
				else if( xEntryTimeSet == pdFALSE )
  402012:	b91d      	cbnz	r5, 40201c <xQueueGenericSend+0x138>
					vTaskSetTimeOutState( &xTimeOut );
  402014:	a802      	add	r0, sp, #8
  402016:	4b27      	ldr	r3, [pc, #156]	; (4020b4 <xQueueGenericSend+0x1d0>)
  402018:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  40201a:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
  40201c:	4b20      	ldr	r3, [pc, #128]	; (4020a0 <xQueueGenericSend+0x1bc>)
  40201e:	4798      	blx	r3
		vTaskSuspendAll();
  402020:	4b25      	ldr	r3, [pc, #148]	; (4020b8 <xQueueGenericSend+0x1d4>)
  402022:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402024:	4b22      	ldr	r3, [pc, #136]	; (4020b0 <xQueueGenericSend+0x1cc>)
  402026:	4798      	blx	r3
  402028:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40202a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40202e:	d101      	bne.n	402034 <xQueueGenericSend+0x150>
  402030:	2300      	movs	r3, #0
  402032:	6463      	str	r3, [r4, #68]	; 0x44
  402034:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402036:	f1b3 3fff 	cmp.w	r3, #4294967295
  40203a:	d101      	bne.n	402040 <xQueueGenericSend+0x15c>
  40203c:	2300      	movs	r3, #0
  40203e:	64a3      	str	r3, [r4, #72]	; 0x48
  402040:	4b17      	ldr	r3, [pc, #92]	; (4020a0 <xQueueGenericSend+0x1bc>)
  402042:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402044:	a901      	add	r1, sp, #4
  402046:	a802      	add	r0, sp, #8
  402048:	4b1c      	ldr	r3, [pc, #112]	; (4020bc <xQueueGenericSend+0x1d8>)
  40204a:	4798      	blx	r3
  40204c:	b9c8      	cbnz	r0, 402082 <xQueueGenericSend+0x19e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40204e:	4620      	mov	r0, r4
  402050:	4b1b      	ldr	r3, [pc, #108]	; (4020c0 <xQueueGenericSend+0x1dc>)
  402052:	4798      	blx	r3
  402054:	2800      	cmp	r0, #0
  402056:	d0cc      	beq.n	401ff2 <xQueueGenericSend+0x10e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  402058:	9901      	ldr	r1, [sp, #4]
  40205a:	f104 0010 	add.w	r0, r4, #16
  40205e:	4b19      	ldr	r3, [pc, #100]	; (4020c4 <xQueueGenericSend+0x1e0>)
  402060:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402062:	4620      	mov	r0, r4
  402064:	4b10      	ldr	r3, [pc, #64]	; (4020a8 <xQueueGenericSend+0x1c4>)
  402066:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402068:	4b10      	ldr	r3, [pc, #64]	; (4020ac <xQueueGenericSend+0x1c8>)
  40206a:	4798      	blx	r3
  40206c:	2800      	cmp	r0, #0
  40206e:	d1c5      	bne.n	401ffc <xQueueGenericSend+0x118>
					portYIELD_WITHIN_API();
  402070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402074:	4b09      	ldr	r3, [pc, #36]	; (40209c <xQueueGenericSend+0x1b8>)
  402076:	601a      	str	r2, [r3, #0]
  402078:	f3bf 8f4f 	dsb	sy
  40207c:	f3bf 8f6f 	isb	sy
  402080:	e7bc      	b.n	401ffc <xQueueGenericSend+0x118>
			prvUnlockQueue( pxQueue );
  402082:	4620      	mov	r0, r4
  402084:	4b08      	ldr	r3, [pc, #32]	; (4020a8 <xQueueGenericSend+0x1c4>)
  402086:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402088:	4b08      	ldr	r3, [pc, #32]	; (4020ac <xQueueGenericSend+0x1c8>)
  40208a:	4798      	blx	r3
			return errQUEUE_FULL;
  40208c:	2000      	movs	r0, #0
  40208e:	e78e      	b.n	401fae <xQueueGenericSend+0xca>
  402090:	00402f8d 	.word	0x00402f8d
  402094:	00401c05 	.word	0x00401c05
  402098:	00401c8d 	.word	0x00401c8d
  40209c:	e000ed04 	.word	0xe000ed04
  4020a0:	00401925 	.word	0x00401925
  4020a4:	00402e25 	.word	0x00402e25
  4020a8:	00401d3d 	.word	0x00401d3d
  4020ac:	00402a05 	.word	0x00402a05
  4020b0:	004018d9 	.word	0x004018d9
  4020b4:	00402ebd 	.word	0x00402ebd
  4020b8:	004028a5 	.word	0x004028a5
  4020bc:	00402eed 	.word	0x00402eed
  4020c0:	00401bb9 	.word	0x00401bb9
  4020c4:	00402d21 	.word	0x00402d21

004020c8 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  4020c8:	b180      	cbz	r0, 4020ec <xQueueGenericSendFromISR+0x24>
{
  4020ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4020ce:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4020d0:	b1b9      	cbz	r1, 402102 <xQueueGenericSendFromISR+0x3a>
  4020d2:	2001      	movs	r0, #1
  4020d4:	b9d8      	cbnz	r0, 40210e <xQueueGenericSendFromISR+0x46>
  4020d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020da:	b672      	cpsid	i
  4020dc:	f383 8811 	msr	BASEPRI, r3
  4020e0:	f3bf 8f6f 	isb	sy
  4020e4:	f3bf 8f4f 	dsb	sy
  4020e8:	b662      	cpsie	i
  4020ea:	e7fe      	b.n	4020ea <xQueueGenericSendFromISR+0x22>
  4020ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020f0:	b672      	cpsid	i
  4020f2:	f383 8811 	msr	BASEPRI, r3
  4020f6:	f3bf 8f6f 	isb	sy
  4020fa:	f3bf 8f4f 	dsb	sy
  4020fe:	b662      	cpsie	i
  402100:	e7fe      	b.n	402100 <xQueueGenericSendFromISR+0x38>
  402102:	6c00      	ldr	r0, [r0, #64]	; 0x40
  402104:	b908      	cbnz	r0, 40210a <xQueueGenericSendFromISR+0x42>
  402106:	2001      	movs	r0, #1
  402108:	e7e4      	b.n	4020d4 <xQueueGenericSendFromISR+0xc>
  40210a:	2000      	movs	r0, #0
  40210c:	e7e2      	b.n	4020d4 <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40210e:	2b02      	cmp	r3, #2
  402110:	d00b      	beq.n	40212a <xQueueGenericSendFromISR+0x62>
  402112:	b978      	cbnz	r0, 402134 <xQueueGenericSendFromISR+0x6c>
  402114:	f04f 0380 	mov.w	r3, #128	; 0x80
  402118:	b672      	cpsid	i
  40211a:	f383 8811 	msr	BASEPRI, r3
  40211e:	f3bf 8f6f 	isb	sy
  402122:	f3bf 8f4f 	dsb	sy
  402126:	b662      	cpsie	i
  402128:	e7fe      	b.n	402128 <xQueueGenericSendFromISR+0x60>
  40212a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  40212c:	2d01      	cmp	r5, #1
  40212e:	d0f0      	beq.n	402112 <xQueueGenericSendFromISR+0x4a>
  402130:	2000      	movs	r0, #0
  402132:	e7ee      	b.n	402112 <xQueueGenericSendFromISR+0x4a>
  402134:	461e      	mov	r6, r3
  402136:	4615      	mov	r5, r2
  402138:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  40213a:	4b23      	ldr	r3, [pc, #140]	; (4021c8 <xQueueGenericSendFromISR+0x100>)
  40213c:	4798      	blx	r3
	__asm volatile
  40213e:	f3ef 8711 	mrs	r7, BASEPRI
  402142:	f04f 0380 	mov.w	r3, #128	; 0x80
  402146:	b672      	cpsid	i
  402148:	f383 8811 	msr	BASEPRI, r3
  40214c:	f3bf 8f6f 	isb	sy
  402150:	f3bf 8f4f 	dsb	sy
  402154:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402156:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402158:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40215a:	429a      	cmp	r2, r3
  40215c:	d301      	bcc.n	402162 <xQueueGenericSendFromISR+0x9a>
  40215e:	2e02      	cmp	r6, #2
  402160:	d126      	bne.n	4021b0 <xQueueGenericSendFromISR+0xe8>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402162:	4632      	mov	r2, r6
  402164:	4641      	mov	r1, r8
  402166:	4620      	mov	r0, r4
  402168:	4b18      	ldr	r3, [pc, #96]	; (4021cc <xQueueGenericSendFromISR+0x104>)
  40216a:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  40216c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40216e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402172:	d118      	bne.n	4021a6 <xQueueGenericSendFromISR+0xde>
					if( pxQueue->pxQueueSetContainer != NULL )
  402174:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402176:	b15b      	cbz	r3, 402190 <xQueueGenericSendFromISR+0xc8>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402178:	4631      	mov	r1, r6
  40217a:	4620      	mov	r0, r4
  40217c:	4b14      	ldr	r3, [pc, #80]	; (4021d0 <xQueueGenericSendFromISR+0x108>)
  40217e:	4798      	blx	r3
  402180:	2801      	cmp	r0, #1
  402182:	d117      	bne.n	4021b4 <xQueueGenericSendFromISR+0xec>
							if( pxHigherPriorityTaskWoken != NULL )
  402184:	b1c5      	cbz	r5, 4021b8 <xQueueGenericSendFromISR+0xf0>
								*pxHigherPriorityTaskWoken = pdTRUE;
  402186:	6028      	str	r0, [r5, #0]
	__asm volatile
  402188:	f387 8811 	msr	BASEPRI, r7
}
  40218c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402190:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402192:	b19b      	cbz	r3, 4021bc <xQueueGenericSendFromISR+0xf4>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402194:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402198:	4b0e      	ldr	r3, [pc, #56]	; (4021d4 <xQueueGenericSendFromISR+0x10c>)
  40219a:	4798      	blx	r3
  40219c:	b180      	cbz	r0, 4021c0 <xQueueGenericSendFromISR+0xf8>
								if( pxHigherPriorityTaskWoken != NULL )
  40219e:	b18d      	cbz	r5, 4021c4 <xQueueGenericSendFromISR+0xfc>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4021a0:	2001      	movs	r0, #1
  4021a2:	6028      	str	r0, [r5, #0]
  4021a4:	e7f0      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
				++( pxQueue->xTxLock );
  4021a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4021a8:	3301      	adds	r3, #1
  4021aa:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  4021ac:	2001      	movs	r0, #1
  4021ae:	e7eb      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
			xReturn = errQUEUE_FULL;
  4021b0:	2000      	movs	r0, #0
  4021b2:	e7e9      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
			xReturn = pdPASS;
  4021b4:	2001      	movs	r0, #1
  4021b6:	e7e7      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
  4021b8:	2001      	movs	r0, #1
  4021ba:	e7e5      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
  4021bc:	2001      	movs	r0, #1
  4021be:	e7e3      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
  4021c0:	2001      	movs	r0, #1
  4021c2:	e7e1      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
  4021c4:	2001      	movs	r0, #1
  4021c6:	e7df      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
  4021c8:	00401ac5 	.word	0x00401ac5
  4021cc:	00401c05 	.word	0x00401c05
  4021d0:	00401c8d 	.word	0x00401c8d
  4021d4:	00402e25 	.word	0x00402e25

004021d8 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  4021d8:	b170      	cbz	r0, 4021f8 <xQueueGiveFromISR+0x20>
{
  4021da:	b570      	push	{r4, r5, r6, lr}
  4021dc:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  4021de:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4021e0:	b1ab      	cbz	r3, 40220e <xQueueGiveFromISR+0x36>
	__asm volatile
  4021e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021e6:	b672      	cpsid	i
  4021e8:	f383 8811 	msr	BASEPRI, r3
  4021ec:	f3bf 8f6f 	isb	sy
  4021f0:	f3bf 8f4f 	dsb	sy
  4021f4:	b662      	cpsie	i
  4021f6:	e7fe      	b.n	4021f6 <xQueueGiveFromISR+0x1e>
  4021f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021fc:	b672      	cpsid	i
  4021fe:	f383 8811 	msr	BASEPRI, r3
  402202:	f3bf 8f6f 	isb	sy
  402206:	f3bf 8f4f 	dsb	sy
  40220a:	b662      	cpsie	i
  40220c:	e7fe      	b.n	40220c <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  40220e:	6803      	ldr	r3, [r0, #0]
  402210:	b163      	cbz	r3, 40222c <xQueueGiveFromISR+0x54>
  402212:	2301      	movs	r3, #1
  402214:	b983      	cbnz	r3, 402238 <xQueueGiveFromISR+0x60>
  402216:	f04f 0380 	mov.w	r3, #128	; 0x80
  40221a:	b672      	cpsid	i
  40221c:	f383 8811 	msr	BASEPRI, r3
  402220:	f3bf 8f6f 	isb	sy
  402224:	f3bf 8f4f 	dsb	sy
  402228:	b662      	cpsie	i
  40222a:	e7fe      	b.n	40222a <xQueueGiveFromISR+0x52>
  40222c:	6843      	ldr	r3, [r0, #4]
  40222e:	b90b      	cbnz	r3, 402234 <xQueueGiveFromISR+0x5c>
  402230:	2301      	movs	r3, #1
  402232:	e7ef      	b.n	402214 <xQueueGiveFromISR+0x3c>
  402234:	2300      	movs	r3, #0
  402236:	e7ed      	b.n	402214 <xQueueGiveFromISR+0x3c>
  402238:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  40223a:	4b21      	ldr	r3, [pc, #132]	; (4022c0 <xQueueGiveFromISR+0xe8>)
  40223c:	4798      	blx	r3
	__asm volatile
  40223e:	f3ef 8611 	mrs	r6, BASEPRI
  402242:	f04f 0380 	mov.w	r3, #128	; 0x80
  402246:	b672      	cpsid	i
  402248:	f383 8811 	msr	BASEPRI, r3
  40224c:	f3bf 8f6f 	isb	sy
  402250:	f3bf 8f4f 	dsb	sy
  402254:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  402256:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402258:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40225a:	429a      	cmp	r2, r3
  40225c:	d223      	bcs.n	4022a6 <xQueueGiveFromISR+0xce>
			++( pxQueue->uxMessagesWaiting );
  40225e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402260:	3301      	adds	r3, #1
  402262:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  402264:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402266:	f1b3 3fff 	cmp.w	r3, #4294967295
  40226a:	d117      	bne.n	40229c <xQueueGiveFromISR+0xc4>
					if( pxQueue->pxQueueSetContainer != NULL )
  40226c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40226e:	b153      	cbz	r3, 402286 <xQueueGiveFromISR+0xae>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  402270:	2100      	movs	r1, #0
  402272:	4620      	mov	r0, r4
  402274:	4b13      	ldr	r3, [pc, #76]	; (4022c4 <xQueueGiveFromISR+0xec>)
  402276:	4798      	blx	r3
  402278:	2801      	cmp	r0, #1
  40227a:	d116      	bne.n	4022aa <xQueueGiveFromISR+0xd2>
							if( pxHigherPriorityTaskWoken != NULL )
  40227c:	b1bd      	cbz	r5, 4022ae <xQueueGiveFromISR+0xd6>
								*pxHigherPriorityTaskWoken = pdTRUE;
  40227e:	6028      	str	r0, [r5, #0]
	__asm volatile
  402280:	f386 8811 	msr	BASEPRI, r6
}
  402284:	bd70      	pop	{r4, r5, r6, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402286:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402288:	b19b      	cbz	r3, 4022b2 <xQueueGiveFromISR+0xda>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40228a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40228e:	4b0e      	ldr	r3, [pc, #56]	; (4022c8 <xQueueGiveFromISR+0xf0>)
  402290:	4798      	blx	r3
  402292:	b180      	cbz	r0, 4022b6 <xQueueGiveFromISR+0xde>
								if( pxHigherPriorityTaskWoken != NULL )
  402294:	b18d      	cbz	r5, 4022ba <xQueueGiveFromISR+0xe2>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402296:	2001      	movs	r0, #1
  402298:	6028      	str	r0, [r5, #0]
  40229a:	e7f1      	b.n	402280 <xQueueGiveFromISR+0xa8>
				++( pxQueue->xTxLock );
  40229c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40229e:	3301      	adds	r3, #1
  4022a0:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  4022a2:	2001      	movs	r0, #1
  4022a4:	e7ec      	b.n	402280 <xQueueGiveFromISR+0xa8>
			xReturn = errQUEUE_FULL;
  4022a6:	2000      	movs	r0, #0
  4022a8:	e7ea      	b.n	402280 <xQueueGiveFromISR+0xa8>
			xReturn = pdPASS;
  4022aa:	2001      	movs	r0, #1
  4022ac:	e7e8      	b.n	402280 <xQueueGiveFromISR+0xa8>
  4022ae:	2001      	movs	r0, #1
  4022b0:	e7e6      	b.n	402280 <xQueueGiveFromISR+0xa8>
  4022b2:	2001      	movs	r0, #1
  4022b4:	e7e4      	b.n	402280 <xQueueGiveFromISR+0xa8>
  4022b6:	2001      	movs	r0, #1
  4022b8:	e7e2      	b.n	402280 <xQueueGiveFromISR+0xa8>
  4022ba:	2001      	movs	r0, #1
  4022bc:	e7e0      	b.n	402280 <xQueueGiveFromISR+0xa8>
  4022be:	bf00      	nop
  4022c0:	00401ac5 	.word	0x00401ac5
  4022c4:	00401c8d 	.word	0x00401c8d
  4022c8:	00402e25 	.word	0x00402e25

004022cc <xQueueGenericReceive>:
{
  4022cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4022ce:	b085      	sub	sp, #20
  4022d0:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4022d2:	b170      	cbz	r0, 4022f2 <xQueueGenericReceive+0x26>
  4022d4:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4022d6:	b1b9      	cbz	r1, 402308 <xQueueGenericReceive+0x3c>
  4022d8:	2501      	movs	r5, #1
  4022da:	b9dd      	cbnz	r5, 402314 <xQueueGenericReceive+0x48>
	__asm volatile
  4022dc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022e0:	b672      	cpsid	i
  4022e2:	f383 8811 	msr	BASEPRI, r3
  4022e6:	f3bf 8f6f 	isb	sy
  4022ea:	f3bf 8f4f 	dsb	sy
  4022ee:	b662      	cpsie	i
  4022f0:	e7fe      	b.n	4022f0 <xQueueGenericReceive+0x24>
  4022f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022f6:	b672      	cpsid	i
  4022f8:	f383 8811 	msr	BASEPRI, r3
  4022fc:	f3bf 8f6f 	isb	sy
  402300:	f3bf 8f4f 	dsb	sy
  402304:	b662      	cpsie	i
  402306:	e7fe      	b.n	402306 <xQueueGenericReceive+0x3a>
  402308:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40230a:	b90a      	cbnz	r2, 402310 <xQueueGenericReceive+0x44>
  40230c:	2501      	movs	r5, #1
  40230e:	e7e4      	b.n	4022da <xQueueGenericReceive+0xe>
  402310:	2500      	movs	r5, #0
  402312:	e7e2      	b.n	4022da <xQueueGenericReceive+0xe>
  402314:	461f      	mov	r7, r3
  402316:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402318:	4b52      	ldr	r3, [pc, #328]	; (402464 <xQueueGenericReceive+0x198>)
  40231a:	4798      	blx	r3
  40231c:	b910      	cbnz	r0, 402324 <xQueueGenericReceive+0x58>
  40231e:	9b01      	ldr	r3, [sp, #4]
  402320:	b103      	cbz	r3, 402324 <xQueueGenericReceive+0x58>
  402322:	2500      	movs	r5, #0
  402324:	b955      	cbnz	r5, 40233c <xQueueGenericReceive+0x70>
  402326:	f04f 0380 	mov.w	r3, #128	; 0x80
  40232a:	b672      	cpsid	i
  40232c:	f383 8811 	msr	BASEPRI, r3
  402330:	f3bf 8f6f 	isb	sy
  402334:	f3bf 8f4f 	dsb	sy
  402338:	b662      	cpsie	i
  40233a:	e7fe      	b.n	40233a <xQueueGenericReceive+0x6e>
  40233c:	2500      	movs	r5, #0
  40233e:	e046      	b.n	4023ce <xQueueGenericReceive+0x102>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  402340:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  402342:	4631      	mov	r1, r6
  402344:	4620      	mov	r0, r4
  402346:	4b48      	ldr	r3, [pc, #288]	; (402468 <xQueueGenericReceive+0x19c>)
  402348:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  40234a:	b9e7      	cbnz	r7, 402386 <xQueueGenericReceive+0xba>
					--( pxQueue->uxMessagesWaiting );
  40234c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40234e:	3b01      	subs	r3, #1
  402350:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402352:	6823      	ldr	r3, [r4, #0]
  402354:	b913      	cbnz	r3, 40235c <xQueueGenericReceive+0x90>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  402356:	4b45      	ldr	r3, [pc, #276]	; (40246c <xQueueGenericReceive+0x1a0>)
  402358:	4798      	blx	r3
  40235a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40235c:	6923      	ldr	r3, [r4, #16]
  40235e:	b16b      	cbz	r3, 40237c <xQueueGenericReceive+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  402360:	f104 0010 	add.w	r0, r4, #16
  402364:	4b42      	ldr	r3, [pc, #264]	; (402470 <xQueueGenericReceive+0x1a4>)
  402366:	4798      	blx	r3
  402368:	2801      	cmp	r0, #1
  40236a:	d107      	bne.n	40237c <xQueueGenericReceive+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
  40236c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402370:	4b40      	ldr	r3, [pc, #256]	; (402474 <xQueueGenericReceive+0x1a8>)
  402372:	601a      	str	r2, [r3, #0]
  402374:	f3bf 8f4f 	dsb	sy
  402378:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  40237c:	4b3e      	ldr	r3, [pc, #248]	; (402478 <xQueueGenericReceive+0x1ac>)
  40237e:	4798      	blx	r3
				return pdPASS;
  402380:	2001      	movs	r0, #1
}
  402382:	b005      	add	sp, #20
  402384:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  402386:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402388:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40238a:	2b00      	cmp	r3, #0
  40238c:	d0f6      	beq.n	40237c <xQueueGenericReceive+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40238e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402392:	4b37      	ldr	r3, [pc, #220]	; (402470 <xQueueGenericReceive+0x1a4>)
  402394:	4798      	blx	r3
  402396:	2800      	cmp	r0, #0
  402398:	d0f0      	beq.n	40237c <xQueueGenericReceive+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
  40239a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40239e:	4b35      	ldr	r3, [pc, #212]	; (402474 <xQueueGenericReceive+0x1a8>)
  4023a0:	601a      	str	r2, [r3, #0]
  4023a2:	f3bf 8f4f 	dsb	sy
  4023a6:	f3bf 8f6f 	isb	sy
  4023aa:	e7e7      	b.n	40237c <xQueueGenericReceive+0xb0>
					taskEXIT_CRITICAL();
  4023ac:	4b32      	ldr	r3, [pc, #200]	; (402478 <xQueueGenericReceive+0x1ac>)
  4023ae:	4798      	blx	r3
					return errQUEUE_EMPTY;
  4023b0:	2000      	movs	r0, #0
  4023b2:	e7e6      	b.n	402382 <xQueueGenericReceive+0xb6>
						taskENTER_CRITICAL();
  4023b4:	4b31      	ldr	r3, [pc, #196]	; (40247c <xQueueGenericReceive+0x1b0>)
  4023b6:	4798      	blx	r3
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4023b8:	6860      	ldr	r0, [r4, #4]
  4023ba:	4b31      	ldr	r3, [pc, #196]	; (402480 <xQueueGenericReceive+0x1b4>)
  4023bc:	4798      	blx	r3
						taskEXIT_CRITICAL();
  4023be:	4b2e      	ldr	r3, [pc, #184]	; (402478 <xQueueGenericReceive+0x1ac>)
  4023c0:	4798      	blx	r3
  4023c2:	e032      	b.n	40242a <xQueueGenericReceive+0x15e>
				prvUnlockQueue( pxQueue );
  4023c4:	4620      	mov	r0, r4
  4023c6:	4b2f      	ldr	r3, [pc, #188]	; (402484 <xQueueGenericReceive+0x1b8>)
  4023c8:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4023ca:	4b2f      	ldr	r3, [pc, #188]	; (402488 <xQueueGenericReceive+0x1bc>)
  4023cc:	4798      	blx	r3
		taskENTER_CRITICAL();
  4023ce:	4b2b      	ldr	r3, [pc, #172]	; (40247c <xQueueGenericReceive+0x1b0>)
  4023d0:	4798      	blx	r3
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4023d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4023d4:	2b00      	cmp	r3, #0
  4023d6:	d1b3      	bne.n	402340 <xQueueGenericReceive+0x74>
				if( xTicksToWait == ( TickType_t ) 0 )
  4023d8:	9b01      	ldr	r3, [sp, #4]
  4023da:	2b00      	cmp	r3, #0
  4023dc:	d0e6      	beq.n	4023ac <xQueueGenericReceive+0xe0>
				else if( xEntryTimeSet == pdFALSE )
  4023de:	b91d      	cbnz	r5, 4023e8 <xQueueGenericReceive+0x11c>
					vTaskSetTimeOutState( &xTimeOut );
  4023e0:	a802      	add	r0, sp, #8
  4023e2:	4b2a      	ldr	r3, [pc, #168]	; (40248c <xQueueGenericReceive+0x1c0>)
  4023e4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  4023e6:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
  4023e8:	4b23      	ldr	r3, [pc, #140]	; (402478 <xQueueGenericReceive+0x1ac>)
  4023ea:	4798      	blx	r3
		vTaskSuspendAll();
  4023ec:	4b28      	ldr	r3, [pc, #160]	; (402490 <xQueueGenericReceive+0x1c4>)
  4023ee:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4023f0:	4b22      	ldr	r3, [pc, #136]	; (40247c <xQueueGenericReceive+0x1b0>)
  4023f2:	4798      	blx	r3
  4023f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4023f6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4023fa:	d101      	bne.n	402400 <xQueueGenericReceive+0x134>
  4023fc:	2300      	movs	r3, #0
  4023fe:	6463      	str	r3, [r4, #68]	; 0x44
  402400:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402402:	f1b3 3fff 	cmp.w	r3, #4294967295
  402406:	d101      	bne.n	40240c <xQueueGenericReceive+0x140>
  402408:	2300      	movs	r3, #0
  40240a:	64a3      	str	r3, [r4, #72]	; 0x48
  40240c:	4b1a      	ldr	r3, [pc, #104]	; (402478 <xQueueGenericReceive+0x1ac>)
  40240e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402410:	a901      	add	r1, sp, #4
  402412:	a802      	add	r0, sp, #8
  402414:	4b1f      	ldr	r3, [pc, #124]	; (402494 <xQueueGenericReceive+0x1c8>)
  402416:	4798      	blx	r3
  402418:	b9e0      	cbnz	r0, 402454 <xQueueGenericReceive+0x188>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40241a:	4620      	mov	r0, r4
  40241c:	4b1e      	ldr	r3, [pc, #120]	; (402498 <xQueueGenericReceive+0x1cc>)
  40241e:	4798      	blx	r3
  402420:	2800      	cmp	r0, #0
  402422:	d0cf      	beq.n	4023c4 <xQueueGenericReceive+0xf8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402424:	6823      	ldr	r3, [r4, #0]
  402426:	2b00      	cmp	r3, #0
  402428:	d0c4      	beq.n	4023b4 <xQueueGenericReceive+0xe8>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40242a:	9901      	ldr	r1, [sp, #4]
  40242c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402430:	4b1a      	ldr	r3, [pc, #104]	; (40249c <xQueueGenericReceive+0x1d0>)
  402432:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402434:	4620      	mov	r0, r4
  402436:	4b13      	ldr	r3, [pc, #76]	; (402484 <xQueueGenericReceive+0x1b8>)
  402438:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40243a:	4b13      	ldr	r3, [pc, #76]	; (402488 <xQueueGenericReceive+0x1bc>)
  40243c:	4798      	blx	r3
  40243e:	2800      	cmp	r0, #0
  402440:	d1c5      	bne.n	4023ce <xQueueGenericReceive+0x102>
					portYIELD_WITHIN_API();
  402442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402446:	4b0b      	ldr	r3, [pc, #44]	; (402474 <xQueueGenericReceive+0x1a8>)
  402448:	601a      	str	r2, [r3, #0]
  40244a:	f3bf 8f4f 	dsb	sy
  40244e:	f3bf 8f6f 	isb	sy
  402452:	e7bc      	b.n	4023ce <xQueueGenericReceive+0x102>
			prvUnlockQueue( pxQueue );
  402454:	4620      	mov	r0, r4
  402456:	4b0b      	ldr	r3, [pc, #44]	; (402484 <xQueueGenericReceive+0x1b8>)
  402458:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40245a:	4b0b      	ldr	r3, [pc, #44]	; (402488 <xQueueGenericReceive+0x1bc>)
  40245c:	4798      	blx	r3
			return errQUEUE_EMPTY;
  40245e:	2000      	movs	r0, #0
  402460:	e78f      	b.n	402382 <xQueueGenericReceive+0xb6>
  402462:	bf00      	nop
  402464:	00402f8d 	.word	0x00402f8d
  402468:	00401d15 	.word	0x00401d15
  40246c:	0040311d 	.word	0x0040311d
  402470:	00402e25 	.word	0x00402e25
  402474:	e000ed04 	.word	0xe000ed04
  402478:	00401925 	.word	0x00401925
  40247c:	004018d9 	.word	0x004018d9
  402480:	00402fad 	.word	0x00402fad
  402484:	00401d3d 	.word	0x00401d3d
  402488:	00402a05 	.word	0x00402a05
  40248c:	00402ebd 	.word	0x00402ebd
  402490:	004028a5 	.word	0x004028a5
  402494:	00402eed 	.word	0x00402eed
  402498:	00401be1 	.word	0x00401be1
  40249c:	00402d21 	.word	0x00402d21

004024a0 <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4024a0:	2300      	movs	r3, #0
  4024a2:	2b07      	cmp	r3, #7
  4024a4:	d80c      	bhi.n	4024c0 <vQueueAddToRegistry+0x20>
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4024a6:	4a07      	ldr	r2, [pc, #28]	; (4024c4 <vQueueAddToRegistry+0x24>)
  4024a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  4024ac:	b10a      	cbz	r2, 4024b2 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4024ae:	3301      	adds	r3, #1
  4024b0:	e7f7      	b.n	4024a2 <vQueueAddToRegistry+0x2>
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4024b2:	4a04      	ldr	r2, [pc, #16]	; (4024c4 <vQueueAddToRegistry+0x24>)
  4024b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4024b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4024bc:	6058      	str	r0, [r3, #4]
				break;
  4024be:	4770      	bx	lr
  4024c0:	4770      	bx	lr
  4024c2:	bf00      	nop
  4024c4:	2043a208 	.word	0x2043a208

004024c8 <vQueueWaitForMessageRestricted>:
	{
  4024c8:	b570      	push	{r4, r5, r6, lr}
  4024ca:	4604      	mov	r4, r0
  4024cc:	460d      	mov	r5, r1
  4024ce:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  4024d0:	4b0f      	ldr	r3, [pc, #60]	; (402510 <vQueueWaitForMessageRestricted+0x48>)
  4024d2:	4798      	blx	r3
  4024d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4024d6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4024da:	d00b      	beq.n	4024f4 <vQueueWaitForMessageRestricted+0x2c>
  4024dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4024de:	f1b3 3fff 	cmp.w	r3, #4294967295
  4024e2:	d00a      	beq.n	4024fa <vQueueWaitForMessageRestricted+0x32>
  4024e4:	4b0b      	ldr	r3, [pc, #44]	; (402514 <vQueueWaitForMessageRestricted+0x4c>)
  4024e6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  4024e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4024ea:	b14b      	cbz	r3, 402500 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  4024ec:	4620      	mov	r0, r4
  4024ee:	4b0a      	ldr	r3, [pc, #40]	; (402518 <vQueueWaitForMessageRestricted+0x50>)
  4024f0:	4798      	blx	r3
  4024f2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  4024f4:	2300      	movs	r3, #0
  4024f6:	6463      	str	r3, [r4, #68]	; 0x44
  4024f8:	e7f0      	b.n	4024dc <vQueueWaitForMessageRestricted+0x14>
  4024fa:	2300      	movs	r3, #0
  4024fc:	64a3      	str	r3, [r4, #72]	; 0x48
  4024fe:	e7f1      	b.n	4024e4 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402500:	4632      	mov	r2, r6
  402502:	4629      	mov	r1, r5
  402504:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402508:	4b04      	ldr	r3, [pc, #16]	; (40251c <vQueueWaitForMessageRestricted+0x54>)
  40250a:	4798      	blx	r3
  40250c:	e7ee      	b.n	4024ec <vQueueWaitForMessageRestricted+0x24>
  40250e:	bf00      	nop
  402510:	004018d9 	.word	0x004018d9
  402514:	00401925 	.word	0x00401925
  402518:	00401d3d 	.word	0x00401d3d
  40251c:	00402da5 	.word	0x00402da5

00402520 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402520:	4b0a      	ldr	r3, [pc, #40]	; (40254c <prvResetNextTaskUnblockTime+0x2c>)
  402522:	681b      	ldr	r3, [r3, #0]
  402524:	681b      	ldr	r3, [r3, #0]
  402526:	b94b      	cbnz	r3, 40253c <prvResetNextTaskUnblockTime+0x1c>
  402528:	2301      	movs	r3, #1
  40252a:	b94b      	cbnz	r3, 402540 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40252c:	4b07      	ldr	r3, [pc, #28]	; (40254c <prvResetNextTaskUnblockTime+0x2c>)
  40252e:	681b      	ldr	r3, [r3, #0]
  402530:	68db      	ldr	r3, [r3, #12]
  402532:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  402534:	685a      	ldr	r2, [r3, #4]
  402536:	4b06      	ldr	r3, [pc, #24]	; (402550 <prvResetNextTaskUnblockTime+0x30>)
  402538:	601a      	str	r2, [r3, #0]
  40253a:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40253c:	2300      	movs	r3, #0
  40253e:	e7f4      	b.n	40252a <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
  402540:	f04f 32ff 	mov.w	r2, #4294967295
  402544:	4b02      	ldr	r3, [pc, #8]	; (402550 <prvResetNextTaskUnblockTime+0x30>)
  402546:	601a      	str	r2, [r3, #0]
  402548:	4770      	bx	lr
  40254a:	bf00      	nop
  40254c:	2040c2bc 	.word	0x2040c2bc
  402550:	2040c368 	.word	0x2040c368

00402554 <prvDeleteTCB>:
	{
  402554:	b538      	push	{r3, r4, r5, lr}
  402556:	4605      	mov	r5, r0
			vPortFreeAligned( pxTCB->pxStack );
  402558:	6b00      	ldr	r0, [r0, #48]	; 0x30
  40255a:	4c02      	ldr	r4, [pc, #8]	; (402564 <prvDeleteTCB+0x10>)
  40255c:	47a0      	blx	r4
		vPortFree( pxTCB );
  40255e:	4628      	mov	r0, r5
  402560:	47a0      	blx	r4
  402562:	bd38      	pop	{r3, r4, r5, pc}
  402564:	00401b9d 	.word	0x00401b9d

00402568 <prvAllocateTCBAndStack>:
{
  402568:	b570      	push	{r4, r5, r6, lr}
  40256a:	4606      	mov	r6, r0
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40256c:	460c      	mov	r4, r1
  40256e:	b919      	cbnz	r1, 402578 <prvAllocateTCBAndStack+0x10>
  402570:	0080      	lsls	r0, r0, #2
  402572:	4b0c      	ldr	r3, [pc, #48]	; (4025a4 <prvAllocateTCBAndStack+0x3c>)
  402574:	4798      	blx	r3
  402576:	4604      	mov	r4, r0
		if( pxStack != NULL )
  402578:	b18c      	cbz	r4, 40259e <prvAllocateTCBAndStack+0x36>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  40257a:	2058      	movs	r0, #88	; 0x58
  40257c:	4b09      	ldr	r3, [pc, #36]	; (4025a4 <prvAllocateTCBAndStack+0x3c>)
  40257e:	4798      	blx	r3
			if( pxNewTCB != NULL )
  402580:	4605      	mov	r5, r0
  402582:	b140      	cbz	r0, 402596 <prvAllocateTCBAndStack+0x2e>
				pxNewTCB->pxStack = pxStack;
  402584:	6304      	str	r4, [r0, #48]	; 0x30
	if( pxNewTCB != NULL )
  402586:	b125      	cbz	r5, 402592 <prvAllocateTCBAndStack+0x2a>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402588:	00b2      	lsls	r2, r6, #2
  40258a:	21a5      	movs	r1, #165	; 0xa5
  40258c:	6b28      	ldr	r0, [r5, #48]	; 0x30
  40258e:	4b06      	ldr	r3, [pc, #24]	; (4025a8 <prvAllocateTCBAndStack+0x40>)
  402590:	4798      	blx	r3
}
  402592:	4628      	mov	r0, r5
  402594:	bd70      	pop	{r4, r5, r6, pc}
				vPortFree( pxStack );
  402596:	4620      	mov	r0, r4
  402598:	4b04      	ldr	r3, [pc, #16]	; (4025ac <prvAllocateTCBAndStack+0x44>)
  40259a:	4798      	blx	r3
  40259c:	e7f3      	b.n	402586 <prvAllocateTCBAndStack+0x1e>
			pxNewTCB = NULL;
  40259e:	2500      	movs	r5, #0
  4025a0:	e7f1      	b.n	402586 <prvAllocateTCBAndStack+0x1e>
  4025a2:	bf00      	nop
  4025a4:	00401b29 	.word	0x00401b29
  4025a8:	00428735 	.word	0x00428735
  4025ac:	00401b9d 	.word	0x00401b9d

004025b0 <prvInitialiseTCBVariables>:
{
  4025b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4025b2:	4604      	mov	r4, r0
  4025b4:	4615      	mov	r5, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4025b6:	2300      	movs	r3, #0
  4025b8:	2b09      	cmp	r3, #9
  4025ba:	d918      	bls.n	4025ee <prvInitialiseTCBVariables+0x3e>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4025bc:	2300      	movs	r3, #0
  4025be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
  4025c2:	2d04      	cmp	r5, #4
  4025c4:	d900      	bls.n	4025c8 <prvInitialiseTCBVariables+0x18>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
  4025c6:	2504      	movs	r5, #4
	pxTCB->uxPriority = uxPriority;
  4025c8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  4025ca:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  4025cc:	2600      	movs	r6, #0
  4025ce:	64e6      	str	r6, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4025d0:	1d20      	adds	r0, r4, #4
  4025d2:	4f0b      	ldr	r7, [pc, #44]	; (402600 <prvInitialiseTCBVariables+0x50>)
  4025d4:	47b8      	blx	r7
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4025d6:	f104 0018 	add.w	r0, r4, #24
  4025da:	47b8      	blx	r7
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4025dc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4025de:	f1c5 0505 	rsb	r5, r5, #5
  4025e2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4025e4:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  4025e6:	6526      	str	r6, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  4025e8:	f884 6054 	strb.w	r6, [r4, #84]	; 0x54
  4025ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4025ee:	5cc8      	ldrb	r0, [r1, r3]
  4025f0:	18e2      	adds	r2, r4, r3
  4025f2:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  4025f6:	5cca      	ldrb	r2, [r1, r3]
  4025f8:	2a00      	cmp	r2, #0
  4025fa:	d0df      	beq.n	4025bc <prvInitialiseTCBVariables+0xc>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4025fc:	3301      	adds	r3, #1
  4025fe:	e7db      	b.n	4025b8 <prvInitialiseTCBVariables+0x8>
  402600:	004017a3 	.word	0x004017a3

00402604 <prvInitialiseTaskLists>:
{
  402604:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  402606:	2400      	movs	r4, #0
  402608:	2c04      	cmp	r4, #4
  40260a:	d911      	bls.n	402630 <prvInitialiseTaskLists+0x2c>
	vListInitialise( &xDelayedTaskList1 );
  40260c:	4e0c      	ldr	r6, [pc, #48]	; (402640 <prvInitialiseTaskLists+0x3c>)
  40260e:	4630      	mov	r0, r6
  402610:	4c0c      	ldr	r4, [pc, #48]	; (402644 <prvInitialiseTaskLists+0x40>)
  402612:	47a0      	blx	r4
	vListInitialise( &xDelayedTaskList2 );
  402614:	4d0c      	ldr	r5, [pc, #48]	; (402648 <prvInitialiseTaskLists+0x44>)
  402616:	4628      	mov	r0, r5
  402618:	47a0      	blx	r4
	vListInitialise( &xPendingReadyList );
  40261a:	480c      	ldr	r0, [pc, #48]	; (40264c <prvInitialiseTaskLists+0x48>)
  40261c:	47a0      	blx	r4
		vListInitialise( &xTasksWaitingTermination );
  40261e:	480c      	ldr	r0, [pc, #48]	; (402650 <prvInitialiseTaskLists+0x4c>)
  402620:	47a0      	blx	r4
		vListInitialise( &xSuspendedTaskList );
  402622:	480c      	ldr	r0, [pc, #48]	; (402654 <prvInitialiseTaskLists+0x50>)
  402624:	47a0      	blx	r4
	pxDelayedTaskList = &xDelayedTaskList1;
  402626:	4b0c      	ldr	r3, [pc, #48]	; (402658 <prvInitialiseTaskLists+0x54>)
  402628:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  40262a:	4b0c      	ldr	r3, [pc, #48]	; (40265c <prvInitialiseTaskLists+0x58>)
  40262c:	601d      	str	r5, [r3, #0]
  40262e:	bd70      	pop	{r4, r5, r6, pc}
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402630:	2014      	movs	r0, #20
  402632:	4b0b      	ldr	r3, [pc, #44]	; (402660 <prvInitialiseTaskLists+0x5c>)
  402634:	fb00 3004 	mla	r0, r0, r4, r3
  402638:	4b02      	ldr	r3, [pc, #8]	; (402644 <prvInitialiseTaskLists+0x40>)
  40263a:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  40263c:	3401      	adds	r4, #1
  40263e:	e7e3      	b.n	402608 <prvInitialiseTaskLists+0x4>
  402640:	2040c340 	.word	0x2040c340
  402644:	0040178d 	.word	0x0040178d
  402648:	2040c354 	.word	0x2040c354
  40264c:	2040c370 	.word	0x2040c370
  402650:	2040c39c 	.word	0x2040c39c
  402654:	2040c388 	.word	0x2040c388
  402658:	2040c2bc 	.word	0x2040c2bc
  40265c:	2040c2c0 	.word	0x2040c2c0
  402660:	2040c2c4 	.word	0x2040c2c4

00402664 <prvAddCurrentTaskToDelayedList>:
{
  402664:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  402666:	4b0f      	ldr	r3, [pc, #60]	; (4026a4 <prvAddCurrentTaskToDelayedList+0x40>)
  402668:	681b      	ldr	r3, [r3, #0]
  40266a:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  40266c:	4b0e      	ldr	r3, [pc, #56]	; (4026a8 <prvAddCurrentTaskToDelayedList+0x44>)
  40266e:	681b      	ldr	r3, [r3, #0]
  402670:	4298      	cmp	r0, r3
  402672:	d30e      	bcc.n	402692 <prvAddCurrentTaskToDelayedList+0x2e>
  402674:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402676:	4b0d      	ldr	r3, [pc, #52]	; (4026ac <prvAddCurrentTaskToDelayedList+0x48>)
  402678:	6818      	ldr	r0, [r3, #0]
  40267a:	4b0a      	ldr	r3, [pc, #40]	; (4026a4 <prvAddCurrentTaskToDelayedList+0x40>)
  40267c:	6819      	ldr	r1, [r3, #0]
  40267e:	3104      	adds	r1, #4
  402680:	4b0b      	ldr	r3, [pc, #44]	; (4026b0 <prvAddCurrentTaskToDelayedList+0x4c>)
  402682:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  402684:	4b0b      	ldr	r3, [pc, #44]	; (4026b4 <prvAddCurrentTaskToDelayedList+0x50>)
  402686:	681b      	ldr	r3, [r3, #0]
  402688:	429c      	cmp	r4, r3
  40268a:	d201      	bcs.n	402690 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  40268c:	4b09      	ldr	r3, [pc, #36]	; (4026b4 <prvAddCurrentTaskToDelayedList+0x50>)
  40268e:	601c      	str	r4, [r3, #0]
  402690:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402692:	4b09      	ldr	r3, [pc, #36]	; (4026b8 <prvAddCurrentTaskToDelayedList+0x54>)
  402694:	6818      	ldr	r0, [r3, #0]
  402696:	4b03      	ldr	r3, [pc, #12]	; (4026a4 <prvAddCurrentTaskToDelayedList+0x40>)
  402698:	6819      	ldr	r1, [r3, #0]
  40269a:	3104      	adds	r1, #4
  40269c:	4b04      	ldr	r3, [pc, #16]	; (4026b0 <prvAddCurrentTaskToDelayedList+0x4c>)
  40269e:	4798      	blx	r3
  4026a0:	bd10      	pop	{r4, pc}
  4026a2:	bf00      	nop
  4026a4:	2040c2b8 	.word	0x2040c2b8
  4026a8:	2040c3b0 	.word	0x2040c3b0
  4026ac:	2040c2bc 	.word	0x2040c2bc
  4026b0:	004017c1 	.word	0x004017c1
  4026b4:	2040c368 	.word	0x2040c368
  4026b8:	2040c2c0 	.word	0x2040c2c0

004026bc <xTaskGenericCreate>:
{
  4026bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026c0:	b083      	sub	sp, #12
  4026c2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4026c4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
	configASSERT( pxTaskCode );
  4026c8:	b168      	cbz	r0, 4026e6 <xTaskGenericCreate+0x2a>
  4026ca:	4680      	mov	r8, r0
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4026cc:	2f04      	cmp	r7, #4
  4026ce:	d915      	bls.n	4026fc <xTaskGenericCreate+0x40>
  4026d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026d4:	b672      	cpsid	i
  4026d6:	f383 8811 	msr	BASEPRI, r3
  4026da:	f3bf 8f6f 	isb	sy
  4026de:	f3bf 8f4f 	dsb	sy
  4026e2:	b662      	cpsie	i
  4026e4:	e7fe      	b.n	4026e4 <xTaskGenericCreate+0x28>
  4026e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026ea:	b672      	cpsid	i
  4026ec:	f383 8811 	msr	BASEPRI, r3
  4026f0:	f3bf 8f6f 	isb	sy
  4026f4:	f3bf 8f4f 	dsb	sy
  4026f8:	b662      	cpsie	i
  4026fa:	e7fe      	b.n	4026fa <xTaskGenericCreate+0x3e>
  4026fc:	4699      	mov	r9, r3
  4026fe:	4616      	mov	r6, r2
  402700:	468a      	mov	sl, r1
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  402702:	990e      	ldr	r1, [sp, #56]	; 0x38
  402704:	4610      	mov	r0, r2
  402706:	4b35      	ldr	r3, [pc, #212]	; (4027dc <xTaskGenericCreate+0x120>)
  402708:	4798      	blx	r3
	if( pxNewTCB != NULL )
  40270a:	4604      	mov	r4, r0
  40270c:	2800      	cmp	r0, #0
  40270e:	d062      	beq.n	4027d6 <xTaskGenericCreate+0x11a>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402710:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402712:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  402716:	4435      	add	r5, r6
  402718:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  40271c:	f023 0507 	bic.w	r5, r3, #7
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  402720:	9600      	str	r6, [sp, #0]
  402722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402724:	463a      	mov	r2, r7
  402726:	4651      	mov	r1, sl
  402728:	4e2d      	ldr	r6, [pc, #180]	; (4027e0 <xTaskGenericCreate+0x124>)
  40272a:	47b0      	blx	r6
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40272c:	464a      	mov	r2, r9
  40272e:	4641      	mov	r1, r8
  402730:	4628      	mov	r0, r5
  402732:	4b2c      	ldr	r3, [pc, #176]	; (4027e4 <xTaskGenericCreate+0x128>)
  402734:	4798      	blx	r3
  402736:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  402738:	f1bb 0f00 	cmp.w	fp, #0
  40273c:	d001      	beq.n	402742 <xTaskGenericCreate+0x86>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40273e:	f8cb 4000 	str.w	r4, [fp]
		taskENTER_CRITICAL();
  402742:	4b29      	ldr	r3, [pc, #164]	; (4027e8 <xTaskGenericCreate+0x12c>)
  402744:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  402746:	4a29      	ldr	r2, [pc, #164]	; (4027ec <xTaskGenericCreate+0x130>)
  402748:	6813      	ldr	r3, [r2, #0]
  40274a:	3301      	adds	r3, #1
  40274c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  40274e:	4b28      	ldr	r3, [pc, #160]	; (4027f0 <xTaskGenericCreate+0x134>)
  402750:	681b      	ldr	r3, [r3, #0]
  402752:	2b00      	cmp	r3, #0
  402754:	d133      	bne.n	4027be <xTaskGenericCreate+0x102>
				pxCurrentTCB =  pxNewTCB;
  402756:	4b26      	ldr	r3, [pc, #152]	; (4027f0 <xTaskGenericCreate+0x134>)
  402758:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  40275a:	6813      	ldr	r3, [r2, #0]
  40275c:	2b01      	cmp	r3, #1
  40275e:	d101      	bne.n	402764 <xTaskGenericCreate+0xa8>
					prvInitialiseTaskLists();
  402760:	4b24      	ldr	r3, [pc, #144]	; (4027f4 <xTaskGenericCreate+0x138>)
  402762:	4798      	blx	r3
			uxTaskNumber++;
  402764:	4a24      	ldr	r2, [pc, #144]	; (4027f8 <xTaskGenericCreate+0x13c>)
  402766:	6813      	ldr	r3, [r2, #0]
  402768:	3301      	adds	r3, #1
  40276a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40276c:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  40276e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402770:	2501      	movs	r5, #1
  402772:	fa05 f203 	lsl.w	r2, r5, r3
  402776:	4921      	ldr	r1, [pc, #132]	; (4027fc <xTaskGenericCreate+0x140>)
  402778:	6808      	ldr	r0, [r1, #0]
  40277a:	4302      	orrs	r2, r0
  40277c:	600a      	str	r2, [r1, #0]
  40277e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402782:	009a      	lsls	r2, r3, #2
  402784:	1d21      	adds	r1, r4, #4
  402786:	481e      	ldr	r0, [pc, #120]	; (402800 <xTaskGenericCreate+0x144>)
  402788:	4410      	add	r0, r2
  40278a:	4b1e      	ldr	r3, [pc, #120]	; (402804 <xTaskGenericCreate+0x148>)
  40278c:	4798      	blx	r3
		taskEXIT_CRITICAL();
  40278e:	4b1e      	ldr	r3, [pc, #120]	; (402808 <xTaskGenericCreate+0x14c>)
  402790:	4798      	blx	r3
			xReturn = pdPASS;
  402792:	4628      	mov	r0, r5
	if( xReturn == pdPASS )
  402794:	2801      	cmp	r0, #1
  402796:	d10f      	bne.n	4027b8 <xTaskGenericCreate+0xfc>
		if( xSchedulerRunning != pdFALSE )
  402798:	4b1c      	ldr	r3, [pc, #112]	; (40280c <xTaskGenericCreate+0x150>)
  40279a:	681b      	ldr	r3, [r3, #0]
  40279c:	b163      	cbz	r3, 4027b8 <xTaskGenericCreate+0xfc>
			if( pxCurrentTCB->uxPriority < uxPriority )
  40279e:	4b14      	ldr	r3, [pc, #80]	; (4027f0 <xTaskGenericCreate+0x134>)
  4027a0:	681b      	ldr	r3, [r3, #0]
  4027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4027a4:	429f      	cmp	r7, r3
  4027a6:	d907      	bls.n	4027b8 <xTaskGenericCreate+0xfc>
				taskYIELD_IF_USING_PREEMPTION();
  4027a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4027ac:	4b18      	ldr	r3, [pc, #96]	; (402810 <xTaskGenericCreate+0x154>)
  4027ae:	601a      	str	r2, [r3, #0]
  4027b0:	f3bf 8f4f 	dsb	sy
  4027b4:	f3bf 8f6f 	isb	sy
}
  4027b8:	b003      	add	sp, #12
  4027ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( xSchedulerRunning == pdFALSE )
  4027be:	4b13      	ldr	r3, [pc, #76]	; (40280c <xTaskGenericCreate+0x150>)
  4027c0:	681b      	ldr	r3, [r3, #0]
  4027c2:	2b00      	cmp	r3, #0
  4027c4:	d1ce      	bne.n	402764 <xTaskGenericCreate+0xa8>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4027c6:	4b0a      	ldr	r3, [pc, #40]	; (4027f0 <xTaskGenericCreate+0x134>)
  4027c8:	681b      	ldr	r3, [r3, #0]
  4027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4027cc:	429f      	cmp	r7, r3
  4027ce:	d3c9      	bcc.n	402764 <xTaskGenericCreate+0xa8>
						pxCurrentTCB = pxNewTCB;
  4027d0:	4b07      	ldr	r3, [pc, #28]	; (4027f0 <xTaskGenericCreate+0x134>)
  4027d2:	601c      	str	r4, [r3, #0]
  4027d4:	e7c6      	b.n	402764 <xTaskGenericCreate+0xa8>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4027d6:	f04f 30ff 	mov.w	r0, #4294967295
  4027da:	e7db      	b.n	402794 <xTaskGenericCreate+0xd8>
  4027dc:	00402569 	.word	0x00402569
  4027e0:	004025b1 	.word	0x004025b1
  4027e4:	0040188d 	.word	0x0040188d
  4027e8:	004018d9 	.word	0x004018d9
  4027ec:	2040c328 	.word	0x2040c328
  4027f0:	2040c2b8 	.word	0x2040c2b8
  4027f4:	00402605 	.word	0x00402605
  4027f8:	2040c334 	.word	0x2040c334
  4027fc:	2040c33c 	.word	0x2040c33c
  402800:	2040c2c4 	.word	0x2040c2c4
  402804:	004017a9 	.word	0x004017a9
  402808:	00401925 	.word	0x00401925
  40280c:	2040c384 	.word	0x2040c384
  402810:	e000ed04 	.word	0xe000ed04

00402814 <vTaskStartScheduler>:
{
  402814:	b510      	push	{r4, lr}
  402816:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402818:	2300      	movs	r3, #0
  40281a:	9303      	str	r3, [sp, #12]
  40281c:	9302      	str	r3, [sp, #8]
  40281e:	9301      	str	r3, [sp, #4]
  402820:	9300      	str	r3, [sp, #0]
  402822:	2282      	movs	r2, #130	; 0x82
  402824:	4917      	ldr	r1, [pc, #92]	; (402884 <vTaskStartScheduler+0x70>)
  402826:	4818      	ldr	r0, [pc, #96]	; (402888 <vTaskStartScheduler+0x74>)
  402828:	4c18      	ldr	r4, [pc, #96]	; (40288c <vTaskStartScheduler+0x78>)
  40282a:	47a0      	blx	r4
		if( xReturn == pdPASS )
  40282c:	2801      	cmp	r0, #1
  40282e:	d00d      	beq.n	40284c <vTaskStartScheduler+0x38>
	if( xReturn == pdPASS )
  402830:	2801      	cmp	r0, #1
  402832:	d00e      	beq.n	402852 <vTaskStartScheduler+0x3e>
		configASSERT( xReturn );
  402834:	bb18      	cbnz	r0, 40287e <vTaskStartScheduler+0x6a>
  402836:	f04f 0380 	mov.w	r3, #128	; 0x80
  40283a:	b672      	cpsid	i
  40283c:	f383 8811 	msr	BASEPRI, r3
  402840:	f3bf 8f6f 	isb	sy
  402844:	f3bf 8f4f 	dsb	sy
  402848:	b662      	cpsie	i
  40284a:	e7fe      	b.n	40284a <vTaskStartScheduler+0x36>
			xReturn = xTimerCreateTimerTask();
  40284c:	4b10      	ldr	r3, [pc, #64]	; (402890 <vTaskStartScheduler+0x7c>)
  40284e:	4798      	blx	r3
  402850:	e7ee      	b.n	402830 <vTaskStartScheduler+0x1c>
  402852:	f04f 0380 	mov.w	r3, #128	; 0x80
  402856:	b672      	cpsid	i
  402858:	f383 8811 	msr	BASEPRI, r3
  40285c:	f3bf 8f6f 	isb	sy
  402860:	f3bf 8f4f 	dsb	sy
  402864:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402866:	f04f 32ff 	mov.w	r2, #4294967295
  40286a:	4b0a      	ldr	r3, [pc, #40]	; (402894 <vTaskStartScheduler+0x80>)
  40286c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40286e:	2201      	movs	r2, #1
  402870:	4b09      	ldr	r3, [pc, #36]	; (402898 <vTaskStartScheduler+0x84>)
  402872:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402874:	2200      	movs	r2, #0
  402876:	4b09      	ldr	r3, [pc, #36]	; (40289c <vTaskStartScheduler+0x88>)
  402878:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40287a:	4b09      	ldr	r3, [pc, #36]	; (4028a0 <vTaskStartScheduler+0x8c>)
  40287c:	4798      	blx	r3
}
  40287e:	b004      	add	sp, #16
  402880:	bd10      	pop	{r4, pc}
  402882:	bf00      	nop
  402884:	0042e534 	.word	0x0042e534
  402888:	00402c21 	.word	0x00402c21
  40288c:	004026bd 	.word	0x004026bd
  402890:	00403231 	.word	0x00403231
  402894:	2040c368 	.word	0x2040c368
  402898:	2040c384 	.word	0x2040c384
  40289c:	2040c3b0 	.word	0x2040c3b0
  4028a0:	00401a0d 	.word	0x00401a0d

004028a4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4028a4:	4a02      	ldr	r2, [pc, #8]	; (4028b0 <vTaskSuspendAll+0xc>)
  4028a6:	6813      	ldr	r3, [r2, #0]
  4028a8:	3301      	adds	r3, #1
  4028aa:	6013      	str	r3, [r2, #0]
  4028ac:	4770      	bx	lr
  4028ae:	bf00      	nop
  4028b0:	2040c330 	.word	0x2040c330

004028b4 <xTaskGetTickCount>:
		xTicks = xTickCount;
  4028b4:	4b01      	ldr	r3, [pc, #4]	; (4028bc <xTaskGetTickCount+0x8>)
  4028b6:	6818      	ldr	r0, [r3, #0]
}
  4028b8:	4770      	bx	lr
  4028ba:	bf00      	nop
  4028bc:	2040c3b0 	.word	0x2040c3b0

004028c0 <xTaskIncrementTick>:
{
  4028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4028c2:	4b41      	ldr	r3, [pc, #260]	; (4029c8 <xTaskIncrementTick+0x108>)
  4028c4:	681b      	ldr	r3, [r3, #0]
  4028c6:	2b00      	cmp	r3, #0
  4028c8:	d175      	bne.n	4029b6 <xTaskIncrementTick+0xf6>
		++xTickCount;
  4028ca:	4b40      	ldr	r3, [pc, #256]	; (4029cc <xTaskIncrementTick+0x10c>)
  4028cc:	681a      	ldr	r2, [r3, #0]
  4028ce:	3201      	adds	r2, #1
  4028d0:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4028d2:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4028d4:	b9d6      	cbnz	r6, 40290c <xTaskIncrementTick+0x4c>
				taskSWITCH_DELAYED_LISTS();
  4028d6:	4b3e      	ldr	r3, [pc, #248]	; (4029d0 <xTaskIncrementTick+0x110>)
  4028d8:	681b      	ldr	r3, [r3, #0]
  4028da:	681b      	ldr	r3, [r3, #0]
  4028dc:	b153      	cbz	r3, 4028f4 <xTaskIncrementTick+0x34>
  4028de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028e2:	b672      	cpsid	i
  4028e4:	f383 8811 	msr	BASEPRI, r3
  4028e8:	f3bf 8f6f 	isb	sy
  4028ec:	f3bf 8f4f 	dsb	sy
  4028f0:	b662      	cpsie	i
  4028f2:	e7fe      	b.n	4028f2 <xTaskIncrementTick+0x32>
  4028f4:	4a36      	ldr	r2, [pc, #216]	; (4029d0 <xTaskIncrementTick+0x110>)
  4028f6:	6811      	ldr	r1, [r2, #0]
  4028f8:	4b36      	ldr	r3, [pc, #216]	; (4029d4 <xTaskIncrementTick+0x114>)
  4028fa:	6818      	ldr	r0, [r3, #0]
  4028fc:	6010      	str	r0, [r2, #0]
  4028fe:	6019      	str	r1, [r3, #0]
  402900:	4a35      	ldr	r2, [pc, #212]	; (4029d8 <xTaskIncrementTick+0x118>)
  402902:	6813      	ldr	r3, [r2, #0]
  402904:	3301      	adds	r3, #1
  402906:	6013      	str	r3, [r2, #0]
  402908:	4b34      	ldr	r3, [pc, #208]	; (4029dc <xTaskIncrementTick+0x11c>)
  40290a:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  40290c:	4b34      	ldr	r3, [pc, #208]	; (4029e0 <xTaskIncrementTick+0x120>)
  40290e:	681b      	ldr	r3, [r3, #0]
  402910:	429e      	cmp	r6, r3
  402912:	d244      	bcs.n	40299e <xTaskIncrementTick+0xde>
BaseType_t xSwitchRequired = pdFALSE;
  402914:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402916:	4b33      	ldr	r3, [pc, #204]	; (4029e4 <xTaskIncrementTick+0x124>)
  402918:	681b      	ldr	r3, [r3, #0]
  40291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40291c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402920:	009a      	lsls	r2, r3, #2
  402922:	4b31      	ldr	r3, [pc, #196]	; (4029e8 <xTaskIncrementTick+0x128>)
  402924:	589b      	ldr	r3, [r3, r2]
  402926:	2b01      	cmp	r3, #1
  402928:	d900      	bls.n	40292c <xTaskIncrementTick+0x6c>
				xSwitchRequired = pdTRUE;
  40292a:	2401      	movs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  40292c:	4b2f      	ldr	r3, [pc, #188]	; (4029ec <xTaskIncrementTick+0x12c>)
  40292e:	681b      	ldr	r3, [r3, #0]
  402930:	b90b      	cbnz	r3, 402936 <xTaskIncrementTick+0x76>
				vApplicationTickHook();
  402932:	4b2f      	ldr	r3, [pc, #188]	; (4029f0 <xTaskIncrementTick+0x130>)
  402934:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402936:	4b2f      	ldr	r3, [pc, #188]	; (4029f4 <xTaskIncrementTick+0x134>)
  402938:	681b      	ldr	r3, [r3, #0]
  40293a:	b103      	cbz	r3, 40293e <xTaskIncrementTick+0x7e>
			xSwitchRequired = pdTRUE;
  40293c:	2401      	movs	r4, #1
}
  40293e:	4620      	mov	r0, r4
  402940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
								xSwitchRequired = pdTRUE;
  402942:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402944:	4b22      	ldr	r3, [pc, #136]	; (4029d0 <xTaskIncrementTick+0x110>)
  402946:	681b      	ldr	r3, [r3, #0]
  402948:	681b      	ldr	r3, [r3, #0]
  40294a:	b353      	cbz	r3, 4029a2 <xTaskIncrementTick+0xe2>
  40294c:	2300      	movs	r3, #0
  40294e:	bb53      	cbnz	r3, 4029a6 <xTaskIncrementTick+0xe6>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402950:	4b1f      	ldr	r3, [pc, #124]	; (4029d0 <xTaskIncrementTick+0x110>)
  402952:	681b      	ldr	r3, [r3, #0]
  402954:	68db      	ldr	r3, [r3, #12]
  402956:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402958:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  40295a:	429e      	cmp	r6, r3
  40295c:	d328      	bcc.n	4029b0 <xTaskIncrementTick+0xf0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40295e:	1d2f      	adds	r7, r5, #4
  402960:	4638      	mov	r0, r7
  402962:	4b25      	ldr	r3, [pc, #148]	; (4029f8 <xTaskIncrementTick+0x138>)
  402964:	4798      	blx	r3
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402966:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402968:	b11b      	cbz	r3, 402972 <xTaskIncrementTick+0xb2>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40296a:	f105 0018 	add.w	r0, r5, #24
  40296e:	4b22      	ldr	r3, [pc, #136]	; (4029f8 <xTaskIncrementTick+0x138>)
  402970:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
  402972:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  402974:	2201      	movs	r2, #1
  402976:	409a      	lsls	r2, r3
  402978:	4920      	ldr	r1, [pc, #128]	; (4029fc <xTaskIncrementTick+0x13c>)
  40297a:	6808      	ldr	r0, [r1, #0]
  40297c:	4302      	orrs	r2, r0
  40297e:	600a      	str	r2, [r1, #0]
  402980:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402984:	009a      	lsls	r2, r3, #2
  402986:	4639      	mov	r1, r7
  402988:	4817      	ldr	r0, [pc, #92]	; (4029e8 <xTaskIncrementTick+0x128>)
  40298a:	4410      	add	r0, r2
  40298c:	4b1c      	ldr	r3, [pc, #112]	; (402a00 <xTaskIncrementTick+0x140>)
  40298e:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402990:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402992:	4b14      	ldr	r3, [pc, #80]	; (4029e4 <xTaskIncrementTick+0x124>)
  402994:	681b      	ldr	r3, [r3, #0]
  402996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402998:	429a      	cmp	r2, r3
  40299a:	d2d2      	bcs.n	402942 <xTaskIncrementTick+0x82>
  40299c:	e7d2      	b.n	402944 <xTaskIncrementTick+0x84>
  40299e:	2400      	movs	r4, #0
  4029a0:	e7d0      	b.n	402944 <xTaskIncrementTick+0x84>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4029a2:	2301      	movs	r3, #1
  4029a4:	e7d3      	b.n	40294e <xTaskIncrementTick+0x8e>
						xNextTaskUnblockTime = portMAX_DELAY;
  4029a6:	f04f 32ff 	mov.w	r2, #4294967295
  4029aa:	4b0d      	ldr	r3, [pc, #52]	; (4029e0 <xTaskIncrementTick+0x120>)
  4029ac:	601a      	str	r2, [r3, #0]
						break;
  4029ae:	e7b2      	b.n	402916 <xTaskIncrementTick+0x56>
							xNextTaskUnblockTime = xItemValue;
  4029b0:	4a0b      	ldr	r2, [pc, #44]	; (4029e0 <xTaskIncrementTick+0x120>)
  4029b2:	6013      	str	r3, [r2, #0]
							break;
  4029b4:	e7af      	b.n	402916 <xTaskIncrementTick+0x56>
		++uxPendedTicks;
  4029b6:	4a0d      	ldr	r2, [pc, #52]	; (4029ec <xTaskIncrementTick+0x12c>)
  4029b8:	6813      	ldr	r3, [r2, #0]
  4029ba:	3301      	adds	r3, #1
  4029bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  4029be:	4b0c      	ldr	r3, [pc, #48]	; (4029f0 <xTaskIncrementTick+0x130>)
  4029c0:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  4029c2:	2400      	movs	r4, #0
  4029c4:	e7b7      	b.n	402936 <xTaskIncrementTick+0x76>
  4029c6:	bf00      	nop
  4029c8:	2040c330 	.word	0x2040c330
  4029cc:	2040c3b0 	.word	0x2040c3b0
  4029d0:	2040c2bc 	.word	0x2040c2bc
  4029d4:	2040c2c0 	.word	0x2040c2c0
  4029d8:	2040c36c 	.word	0x2040c36c
  4029dc:	00402521 	.word	0x00402521
  4029e0:	2040c368 	.word	0x2040c368
  4029e4:	2040c2b8 	.word	0x2040c2b8
  4029e8:	2040c2c4 	.word	0x2040c2c4
  4029ec:	2040c32c 	.word	0x2040c32c
  4029f0:	00426b9d 	.word	0x00426b9d
  4029f4:	2040c3b4 	.word	0x2040c3b4
  4029f8:	004017f5 	.word	0x004017f5
  4029fc:	2040c33c 	.word	0x2040c33c
  402a00:	004017a9 	.word	0x004017a9

00402a04 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
  402a04:	4b35      	ldr	r3, [pc, #212]	; (402adc <xTaskResumeAll+0xd8>)
  402a06:	681b      	ldr	r3, [r3, #0]
  402a08:	b953      	cbnz	r3, 402a20 <xTaskResumeAll+0x1c>
  402a0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a0e:	b672      	cpsid	i
  402a10:	f383 8811 	msr	BASEPRI, r3
  402a14:	f3bf 8f6f 	isb	sy
  402a18:	f3bf 8f4f 	dsb	sy
  402a1c:	b662      	cpsie	i
  402a1e:	e7fe      	b.n	402a1e <xTaskResumeAll+0x1a>
{
  402a20:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
  402a22:	4b2f      	ldr	r3, [pc, #188]	; (402ae0 <xTaskResumeAll+0xdc>)
  402a24:	4798      	blx	r3
		--uxSchedulerSuspended;
  402a26:	4b2d      	ldr	r3, [pc, #180]	; (402adc <xTaskResumeAll+0xd8>)
  402a28:	681a      	ldr	r2, [r3, #0]
  402a2a:	3a01      	subs	r2, #1
  402a2c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402a2e:	681b      	ldr	r3, [r3, #0]
  402a30:	2b00      	cmp	r3, #0
  402a32:	d14f      	bne.n	402ad4 <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402a34:	4b2b      	ldr	r3, [pc, #172]	; (402ae4 <xTaskResumeAll+0xe0>)
  402a36:	681b      	ldr	r3, [r3, #0]
  402a38:	bb1b      	cbnz	r3, 402a82 <xTaskResumeAll+0x7e>
BaseType_t xAlreadyYielded = pdFALSE;
  402a3a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402a3c:	4b2a      	ldr	r3, [pc, #168]	; (402ae8 <xTaskResumeAll+0xe4>)
  402a3e:	4798      	blx	r3
}
  402a40:	4620      	mov	r0, r4
  402a42:	bd70      	pop	{r4, r5, r6, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  402a44:	4b29      	ldr	r3, [pc, #164]	; (402aec <xTaskResumeAll+0xe8>)
  402a46:	68db      	ldr	r3, [r3, #12]
  402a48:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402a4a:	f104 0018 	add.w	r0, r4, #24
  402a4e:	4e28      	ldr	r6, [pc, #160]	; (402af0 <xTaskResumeAll+0xec>)
  402a50:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402a52:	1d25      	adds	r5, r4, #4
  402a54:	4628      	mov	r0, r5
  402a56:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402a58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402a5a:	2201      	movs	r2, #1
  402a5c:	409a      	lsls	r2, r3
  402a5e:	4925      	ldr	r1, [pc, #148]	; (402af4 <xTaskResumeAll+0xf0>)
  402a60:	6808      	ldr	r0, [r1, #0]
  402a62:	4302      	orrs	r2, r0
  402a64:	600a      	str	r2, [r1, #0]
  402a66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402a6a:	009a      	lsls	r2, r3, #2
  402a6c:	4629      	mov	r1, r5
  402a6e:	4822      	ldr	r0, [pc, #136]	; (402af8 <xTaskResumeAll+0xf4>)
  402a70:	4410      	add	r0, r2
  402a72:	4b22      	ldr	r3, [pc, #136]	; (402afc <xTaskResumeAll+0xf8>)
  402a74:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402a76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402a78:	4b21      	ldr	r3, [pc, #132]	; (402b00 <xTaskResumeAll+0xfc>)
  402a7a:	681b      	ldr	r3, [r3, #0]
  402a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402a7e:	429a      	cmp	r2, r3
  402a80:	d214      	bcs.n	402aac <xTaskResumeAll+0xa8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402a82:	4b1a      	ldr	r3, [pc, #104]	; (402aec <xTaskResumeAll+0xe8>)
  402a84:	681b      	ldr	r3, [r3, #0]
  402a86:	2b00      	cmp	r3, #0
  402a88:	d1dc      	bne.n	402a44 <xTaskResumeAll+0x40>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402a8a:	4b1e      	ldr	r3, [pc, #120]	; (402b04 <xTaskResumeAll+0x100>)
  402a8c:	681b      	ldr	r3, [r3, #0]
  402a8e:	b9ab      	cbnz	r3, 402abc <xTaskResumeAll+0xb8>
				if( xYieldPending == pdTRUE )
  402a90:	4b1d      	ldr	r3, [pc, #116]	; (402b08 <xTaskResumeAll+0x104>)
  402a92:	681b      	ldr	r3, [r3, #0]
  402a94:	2b01      	cmp	r3, #1
  402a96:	d11f      	bne.n	402ad8 <xTaskResumeAll+0xd4>
					taskYIELD_IF_USING_PREEMPTION();
  402a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402a9c:	4b1b      	ldr	r3, [pc, #108]	; (402b0c <xTaskResumeAll+0x108>)
  402a9e:	601a      	str	r2, [r3, #0]
  402aa0:	f3bf 8f4f 	dsb	sy
  402aa4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  402aa8:	2401      	movs	r4, #1
  402aaa:	e7c7      	b.n	402a3c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
  402aac:	2201      	movs	r2, #1
  402aae:	4b16      	ldr	r3, [pc, #88]	; (402b08 <xTaskResumeAll+0x104>)
  402ab0:	601a      	str	r2, [r3, #0]
  402ab2:	e7e6      	b.n	402a82 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  402ab4:	4a13      	ldr	r2, [pc, #76]	; (402b04 <xTaskResumeAll+0x100>)
  402ab6:	6813      	ldr	r3, [r2, #0]
  402ab8:	3b01      	subs	r3, #1
  402aba:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402abc:	4b11      	ldr	r3, [pc, #68]	; (402b04 <xTaskResumeAll+0x100>)
  402abe:	681b      	ldr	r3, [r3, #0]
  402ac0:	2b00      	cmp	r3, #0
  402ac2:	d0e5      	beq.n	402a90 <xTaskResumeAll+0x8c>
						if( xTaskIncrementTick() != pdFALSE )
  402ac4:	4b12      	ldr	r3, [pc, #72]	; (402b10 <xTaskResumeAll+0x10c>)
  402ac6:	4798      	blx	r3
  402ac8:	2800      	cmp	r0, #0
  402aca:	d0f3      	beq.n	402ab4 <xTaskResumeAll+0xb0>
							xYieldPending = pdTRUE;
  402acc:	2201      	movs	r2, #1
  402ace:	4b0e      	ldr	r3, [pc, #56]	; (402b08 <xTaskResumeAll+0x104>)
  402ad0:	601a      	str	r2, [r3, #0]
  402ad2:	e7ef      	b.n	402ab4 <xTaskResumeAll+0xb0>
BaseType_t xAlreadyYielded = pdFALSE;
  402ad4:	2400      	movs	r4, #0
  402ad6:	e7b1      	b.n	402a3c <xTaskResumeAll+0x38>
  402ad8:	2400      	movs	r4, #0
  402ada:	e7af      	b.n	402a3c <xTaskResumeAll+0x38>
  402adc:	2040c330 	.word	0x2040c330
  402ae0:	004018d9 	.word	0x004018d9
  402ae4:	2040c328 	.word	0x2040c328
  402ae8:	00401925 	.word	0x00401925
  402aec:	2040c370 	.word	0x2040c370
  402af0:	004017f5 	.word	0x004017f5
  402af4:	2040c33c 	.word	0x2040c33c
  402af8:	2040c2c4 	.word	0x2040c2c4
  402afc:	004017a9 	.word	0x004017a9
  402b00:	2040c2b8 	.word	0x2040c2b8
  402b04:	2040c32c 	.word	0x2040c32c
  402b08:	2040c3b4 	.word	0x2040c3b4
  402b0c:	e000ed04 	.word	0xe000ed04
  402b10:	004028c1 	.word	0x004028c1

00402b14 <vTaskDelay>:
	{
  402b14:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  402b16:	2800      	cmp	r0, #0
  402b18:	d02a      	beq.n	402b70 <vTaskDelay+0x5c>
  402b1a:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402b1c:	4b1a      	ldr	r3, [pc, #104]	; (402b88 <vTaskDelay+0x74>)
  402b1e:	681b      	ldr	r3, [r3, #0]
  402b20:	b153      	cbz	r3, 402b38 <vTaskDelay+0x24>
  402b22:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b26:	b672      	cpsid	i
  402b28:	f383 8811 	msr	BASEPRI, r3
  402b2c:	f3bf 8f6f 	isb	sy
  402b30:	f3bf 8f4f 	dsb	sy
  402b34:	b662      	cpsie	i
  402b36:	e7fe      	b.n	402b36 <vTaskDelay+0x22>
			vTaskSuspendAll();
  402b38:	4b14      	ldr	r3, [pc, #80]	; (402b8c <vTaskDelay+0x78>)
  402b3a:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  402b3c:	4b14      	ldr	r3, [pc, #80]	; (402b90 <vTaskDelay+0x7c>)
  402b3e:	681b      	ldr	r3, [r3, #0]
  402b40:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402b42:	4b14      	ldr	r3, [pc, #80]	; (402b94 <vTaskDelay+0x80>)
  402b44:	6818      	ldr	r0, [r3, #0]
  402b46:	3004      	adds	r0, #4
  402b48:	4b13      	ldr	r3, [pc, #76]	; (402b98 <vTaskDelay+0x84>)
  402b4a:	4798      	blx	r3
  402b4c:	b950      	cbnz	r0, 402b64 <vTaskDelay+0x50>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402b4e:	4b11      	ldr	r3, [pc, #68]	; (402b94 <vTaskDelay+0x80>)
  402b50:	681b      	ldr	r3, [r3, #0]
  402b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402b54:	2301      	movs	r3, #1
  402b56:	fa03 f202 	lsl.w	r2, r3, r2
  402b5a:	4910      	ldr	r1, [pc, #64]	; (402b9c <vTaskDelay+0x88>)
  402b5c:	680b      	ldr	r3, [r1, #0]
  402b5e:	ea23 0302 	bic.w	r3, r3, r2
  402b62:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402b64:	4620      	mov	r0, r4
  402b66:	4b0e      	ldr	r3, [pc, #56]	; (402ba0 <vTaskDelay+0x8c>)
  402b68:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  402b6a:	4b0e      	ldr	r3, [pc, #56]	; (402ba4 <vTaskDelay+0x90>)
  402b6c:	4798      	blx	r3
  402b6e:	e000      	b.n	402b72 <vTaskDelay+0x5e>
	BaseType_t xAlreadyYielded = pdFALSE;
  402b70:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
  402b72:	b938      	cbnz	r0, 402b84 <vTaskDelay+0x70>
			portYIELD_WITHIN_API();
  402b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402b78:	4b0b      	ldr	r3, [pc, #44]	; (402ba8 <vTaskDelay+0x94>)
  402b7a:	601a      	str	r2, [r3, #0]
  402b7c:	f3bf 8f4f 	dsb	sy
  402b80:	f3bf 8f6f 	isb	sy
  402b84:	bd10      	pop	{r4, pc}
  402b86:	bf00      	nop
  402b88:	2040c330 	.word	0x2040c330
  402b8c:	004028a5 	.word	0x004028a5
  402b90:	2040c3b0 	.word	0x2040c3b0
  402b94:	2040c2b8 	.word	0x2040c2b8
  402b98:	004017f5 	.word	0x004017f5
  402b9c:	2040c33c 	.word	0x2040c33c
  402ba0:	00402665 	.word	0x00402665
  402ba4:	00402a05 	.word	0x00402a05
  402ba8:	e000ed04 	.word	0xe000ed04

00402bac <prvCheckTasksWaitingTermination>:
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402bac:	4b13      	ldr	r3, [pc, #76]	; (402bfc <prvCheckTasksWaitingTermination+0x50>)
  402bae:	681b      	ldr	r3, [r3, #0]
  402bb0:	b313      	cbz	r3, 402bf8 <prvCheckTasksWaitingTermination+0x4c>
{
  402bb2:	b510      	push	{r4, lr}
			vTaskSuspendAll();
  402bb4:	4b12      	ldr	r3, [pc, #72]	; (402c00 <prvCheckTasksWaitingTermination+0x54>)
  402bb6:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402bb8:	4b12      	ldr	r3, [pc, #72]	; (402c04 <prvCheckTasksWaitingTermination+0x58>)
  402bba:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
  402bbc:	4b12      	ldr	r3, [pc, #72]	; (402c08 <prvCheckTasksWaitingTermination+0x5c>)
  402bbe:	4798      	blx	r3
			if( xListIsEmpty == pdFALSE )
  402bc0:	b924      	cbnz	r4, 402bcc <prvCheckTasksWaitingTermination+0x20>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402bc2:	4b0e      	ldr	r3, [pc, #56]	; (402bfc <prvCheckTasksWaitingTermination+0x50>)
  402bc4:	681b      	ldr	r3, [r3, #0]
  402bc6:	2b00      	cmp	r3, #0
  402bc8:	d1f4      	bne.n	402bb4 <prvCheckTasksWaitingTermination+0x8>
}
  402bca:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
  402bcc:	4b0f      	ldr	r3, [pc, #60]	; (402c0c <prvCheckTasksWaitingTermination+0x60>)
  402bce:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  402bd0:	4b0c      	ldr	r3, [pc, #48]	; (402c04 <prvCheckTasksWaitingTermination+0x58>)
  402bd2:	68db      	ldr	r3, [r3, #12]
  402bd4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402bd6:	1d20      	adds	r0, r4, #4
  402bd8:	4b0d      	ldr	r3, [pc, #52]	; (402c10 <prvCheckTasksWaitingTermination+0x64>)
  402bda:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402bdc:	4a0d      	ldr	r2, [pc, #52]	; (402c14 <prvCheckTasksWaitingTermination+0x68>)
  402bde:	6813      	ldr	r3, [r2, #0]
  402be0:	3b01      	subs	r3, #1
  402be2:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402be4:	4a05      	ldr	r2, [pc, #20]	; (402bfc <prvCheckTasksWaitingTermination+0x50>)
  402be6:	6813      	ldr	r3, [r2, #0]
  402be8:	3b01      	subs	r3, #1
  402bea:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
  402bec:	4b0a      	ldr	r3, [pc, #40]	; (402c18 <prvCheckTasksWaitingTermination+0x6c>)
  402bee:	4798      	blx	r3
				prvDeleteTCB( pxTCB );
  402bf0:	4620      	mov	r0, r4
  402bf2:	4b0a      	ldr	r3, [pc, #40]	; (402c1c <prvCheckTasksWaitingTermination+0x70>)
  402bf4:	4798      	blx	r3
  402bf6:	e7e4      	b.n	402bc2 <prvCheckTasksWaitingTermination+0x16>
  402bf8:	4770      	bx	lr
  402bfa:	bf00      	nop
  402bfc:	2040c338 	.word	0x2040c338
  402c00:	004028a5 	.word	0x004028a5
  402c04:	2040c39c 	.word	0x2040c39c
  402c08:	00402a05 	.word	0x00402a05
  402c0c:	004018d9 	.word	0x004018d9
  402c10:	004017f5 	.word	0x004017f5
  402c14:	2040c328 	.word	0x2040c328
  402c18:	00401925 	.word	0x00401925
  402c1c:	00402555 	.word	0x00402555

00402c20 <prvIdleTask>:
{
  402c20:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
  402c22:	4b07      	ldr	r3, [pc, #28]	; (402c40 <prvIdleTask+0x20>)
  402c24:	4798      	blx	r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  402c26:	4b07      	ldr	r3, [pc, #28]	; (402c44 <prvIdleTask+0x24>)
  402c28:	681b      	ldr	r3, [r3, #0]
  402c2a:	2b01      	cmp	r3, #1
  402c2c:	d9f9      	bls.n	402c22 <prvIdleTask+0x2>
				taskYIELD();
  402c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402c32:	4b05      	ldr	r3, [pc, #20]	; (402c48 <prvIdleTask+0x28>)
  402c34:	601a      	str	r2, [r3, #0]
  402c36:	f3bf 8f4f 	dsb	sy
  402c3a:	f3bf 8f6f 	isb	sy
  402c3e:	e7f0      	b.n	402c22 <prvIdleTask+0x2>
  402c40:	00402bad 	.word	0x00402bad
  402c44:	2040c2c4 	.word	0x2040c2c4
  402c48:	e000ed04 	.word	0xe000ed04

00402c4c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402c4c:	4b2e      	ldr	r3, [pc, #184]	; (402d08 <vTaskSwitchContext+0xbc>)
  402c4e:	681b      	ldr	r3, [r3, #0]
  402c50:	2b00      	cmp	r3, #0
  402c52:	d12c      	bne.n	402cae <vTaskSwitchContext+0x62>
{
  402c54:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  402c56:	2200      	movs	r2, #0
  402c58:	4b2c      	ldr	r3, [pc, #176]	; (402d0c <vTaskSwitchContext+0xc0>)
  402c5a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402c5c:	4b2c      	ldr	r3, [pc, #176]	; (402d10 <vTaskSwitchContext+0xc4>)
  402c5e:	681b      	ldr	r3, [r3, #0]
  402c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c62:	681a      	ldr	r2, [r3, #0]
  402c64:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402c68:	d103      	bne.n	402c72 <vTaskSwitchContext+0x26>
  402c6a:	685a      	ldr	r2, [r3, #4]
  402c6c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402c70:	d021      	beq.n	402cb6 <vTaskSwitchContext+0x6a>
  402c72:	4b27      	ldr	r3, [pc, #156]	; (402d10 <vTaskSwitchContext+0xc4>)
  402c74:	6818      	ldr	r0, [r3, #0]
  402c76:	6819      	ldr	r1, [r3, #0]
  402c78:	3134      	adds	r1, #52	; 0x34
  402c7a:	4b26      	ldr	r3, [pc, #152]	; (402d14 <vTaskSwitchContext+0xc8>)
  402c7c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402c7e:	4b26      	ldr	r3, [pc, #152]	; (402d18 <vTaskSwitchContext+0xcc>)
  402c80:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402c82:	fab3 f383 	clz	r3, r3
  402c86:	b2db      	uxtb	r3, r3
  402c88:	f1c3 031f 	rsb	r3, r3, #31
  402c8c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402c90:	008a      	lsls	r2, r1, #2
  402c92:	4922      	ldr	r1, [pc, #136]	; (402d1c <vTaskSwitchContext+0xd0>)
  402c94:	588a      	ldr	r2, [r1, r2]
  402c96:	b9ba      	cbnz	r2, 402cc8 <vTaskSwitchContext+0x7c>
	__asm volatile
  402c98:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c9c:	b672      	cpsid	i
  402c9e:	f383 8811 	msr	BASEPRI, r3
  402ca2:	f3bf 8f6f 	isb	sy
  402ca6:	f3bf 8f4f 	dsb	sy
  402caa:	b662      	cpsie	i
  402cac:	e7fe      	b.n	402cac <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  402cae:	2201      	movs	r2, #1
  402cb0:	4b16      	ldr	r3, [pc, #88]	; (402d0c <vTaskSwitchContext+0xc0>)
  402cb2:	601a      	str	r2, [r3, #0]
  402cb4:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402cb6:	689a      	ldr	r2, [r3, #8]
  402cb8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402cbc:	d1d9      	bne.n	402c72 <vTaskSwitchContext+0x26>
  402cbe:	68db      	ldr	r3, [r3, #12]
  402cc0:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402cc4:	d1d5      	bne.n	402c72 <vTaskSwitchContext+0x26>
  402cc6:	e7da      	b.n	402c7e <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402cc8:	4814      	ldr	r0, [pc, #80]	; (402d1c <vTaskSwitchContext+0xd0>)
  402cca:	009a      	lsls	r2, r3, #2
  402ccc:	18d4      	adds	r4, r2, r3
  402cce:	00a1      	lsls	r1, r4, #2
  402cd0:	4401      	add	r1, r0
  402cd2:	684c      	ldr	r4, [r1, #4]
  402cd4:	6864      	ldr	r4, [r4, #4]
  402cd6:	604c      	str	r4, [r1, #4]
  402cd8:	441a      	add	r2, r3
  402cda:	0091      	lsls	r1, r2, #2
  402cdc:	3108      	adds	r1, #8
  402cde:	4408      	add	r0, r1
  402ce0:	4284      	cmp	r4, r0
  402ce2:	d009      	beq.n	402cf8 <vTaskSwitchContext+0xac>
  402ce4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402ce8:	009a      	lsls	r2, r3, #2
  402cea:	4b0c      	ldr	r3, [pc, #48]	; (402d1c <vTaskSwitchContext+0xd0>)
  402cec:	4413      	add	r3, r2
  402cee:	685b      	ldr	r3, [r3, #4]
  402cf0:	68da      	ldr	r2, [r3, #12]
  402cf2:	4b07      	ldr	r3, [pc, #28]	; (402d10 <vTaskSwitchContext+0xc4>)
  402cf4:	601a      	str	r2, [r3, #0]
  402cf6:	bd10      	pop	{r4, pc}
  402cf8:	6860      	ldr	r0, [r4, #4]
  402cfa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402cfe:	0091      	lsls	r1, r2, #2
  402d00:	4a06      	ldr	r2, [pc, #24]	; (402d1c <vTaskSwitchContext+0xd0>)
  402d02:	440a      	add	r2, r1
  402d04:	6050      	str	r0, [r2, #4]
  402d06:	e7ed      	b.n	402ce4 <vTaskSwitchContext+0x98>
  402d08:	2040c330 	.word	0x2040c330
  402d0c:	2040c3b4 	.word	0x2040c3b4
  402d10:	2040c2b8 	.word	0x2040c2b8
  402d14:	00426b85 	.word	0x00426b85
  402d18:	2040c33c 	.word	0x2040c33c
  402d1c:	2040c2c4 	.word	0x2040c2c4

00402d20 <vTaskPlaceOnEventList>:
{
  402d20:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  402d22:	b1e8      	cbz	r0, 402d60 <vTaskPlaceOnEventList+0x40>
  402d24:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402d26:	4d17      	ldr	r5, [pc, #92]	; (402d84 <vTaskPlaceOnEventList+0x64>)
  402d28:	6829      	ldr	r1, [r5, #0]
  402d2a:	3118      	adds	r1, #24
  402d2c:	4b16      	ldr	r3, [pc, #88]	; (402d88 <vTaskPlaceOnEventList+0x68>)
  402d2e:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402d30:	6828      	ldr	r0, [r5, #0]
  402d32:	3004      	adds	r0, #4
  402d34:	4b15      	ldr	r3, [pc, #84]	; (402d8c <vTaskPlaceOnEventList+0x6c>)
  402d36:	4798      	blx	r3
  402d38:	b948      	cbnz	r0, 402d4e <vTaskPlaceOnEventList+0x2e>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402d3a:	682b      	ldr	r3, [r5, #0]
  402d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402d3e:	2301      	movs	r3, #1
  402d40:	fa03 f202 	lsl.w	r2, r3, r2
  402d44:	4912      	ldr	r1, [pc, #72]	; (402d90 <vTaskPlaceOnEventList+0x70>)
  402d46:	680b      	ldr	r3, [r1, #0]
  402d48:	ea23 0302 	bic.w	r3, r3, r2
  402d4c:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402d4e:	f1b4 3fff 	cmp.w	r4, #4294967295
  402d52:	d010      	beq.n	402d76 <vTaskPlaceOnEventList+0x56>
			xTimeToWake = xTickCount + xTicksToWait;
  402d54:	4b0f      	ldr	r3, [pc, #60]	; (402d94 <vTaskPlaceOnEventList+0x74>)
  402d56:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402d58:	4420      	add	r0, r4
  402d5a:	4b0f      	ldr	r3, [pc, #60]	; (402d98 <vTaskPlaceOnEventList+0x78>)
  402d5c:	4798      	blx	r3
  402d5e:	bd38      	pop	{r3, r4, r5, pc}
  402d60:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d64:	b672      	cpsid	i
  402d66:	f383 8811 	msr	BASEPRI, r3
  402d6a:	f3bf 8f6f 	isb	sy
  402d6e:	f3bf 8f4f 	dsb	sy
  402d72:	b662      	cpsie	i
  402d74:	e7fe      	b.n	402d74 <vTaskPlaceOnEventList+0x54>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402d76:	4b03      	ldr	r3, [pc, #12]	; (402d84 <vTaskPlaceOnEventList+0x64>)
  402d78:	6819      	ldr	r1, [r3, #0]
  402d7a:	3104      	adds	r1, #4
  402d7c:	4807      	ldr	r0, [pc, #28]	; (402d9c <vTaskPlaceOnEventList+0x7c>)
  402d7e:	4b08      	ldr	r3, [pc, #32]	; (402da0 <vTaskPlaceOnEventList+0x80>)
  402d80:	4798      	blx	r3
  402d82:	bd38      	pop	{r3, r4, r5, pc}
  402d84:	2040c2b8 	.word	0x2040c2b8
  402d88:	004017c1 	.word	0x004017c1
  402d8c:	004017f5 	.word	0x004017f5
  402d90:	2040c33c 	.word	0x2040c33c
  402d94:	2040c3b0 	.word	0x2040c3b0
  402d98:	00402665 	.word	0x00402665
  402d9c:	2040c388 	.word	0x2040c388
  402da0:	004017a9 	.word	0x004017a9

00402da4 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402da4:	b1f0      	cbz	r0, 402de4 <vTaskPlaceOnEventListRestricted+0x40>
	{
  402da6:	b570      	push	{r4, r5, r6, lr}
  402da8:	4615      	mov	r5, r2
  402daa:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402dac:	4e16      	ldr	r6, [pc, #88]	; (402e08 <vTaskPlaceOnEventListRestricted+0x64>)
  402dae:	6831      	ldr	r1, [r6, #0]
  402db0:	3118      	adds	r1, #24
  402db2:	4b16      	ldr	r3, [pc, #88]	; (402e0c <vTaskPlaceOnEventListRestricted+0x68>)
  402db4:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402db6:	6830      	ldr	r0, [r6, #0]
  402db8:	3004      	adds	r0, #4
  402dba:	4b15      	ldr	r3, [pc, #84]	; (402e10 <vTaskPlaceOnEventListRestricted+0x6c>)
  402dbc:	4798      	blx	r3
  402dbe:	b948      	cbnz	r0, 402dd4 <vTaskPlaceOnEventListRestricted+0x30>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402dc0:	6833      	ldr	r3, [r6, #0]
  402dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402dc4:	2301      	movs	r3, #1
  402dc6:	fa03 f202 	lsl.w	r2, r3, r2
  402dca:	4912      	ldr	r1, [pc, #72]	; (402e14 <vTaskPlaceOnEventListRestricted+0x70>)
  402dcc:	680b      	ldr	r3, [r1, #0]
  402dce:	ea23 0302 	bic.w	r3, r3, r2
  402dd2:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  402dd4:	2d01      	cmp	r5, #1
  402dd6:	d010      	beq.n	402dfa <vTaskPlaceOnEventListRestricted+0x56>
				xTimeToWake = xTickCount + xTicksToWait;
  402dd8:	4b0f      	ldr	r3, [pc, #60]	; (402e18 <vTaskPlaceOnEventListRestricted+0x74>)
  402dda:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402ddc:	4420      	add	r0, r4
  402dde:	4b0f      	ldr	r3, [pc, #60]	; (402e1c <vTaskPlaceOnEventListRestricted+0x78>)
  402de0:	4798      	blx	r3
  402de2:	bd70      	pop	{r4, r5, r6, pc}
  402de4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402de8:	b672      	cpsid	i
  402dea:	f383 8811 	msr	BASEPRI, r3
  402dee:	f3bf 8f6f 	isb	sy
  402df2:	f3bf 8f4f 	dsb	sy
  402df6:	b662      	cpsie	i
  402df8:	e7fe      	b.n	402df8 <vTaskPlaceOnEventListRestricted+0x54>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402dfa:	4b03      	ldr	r3, [pc, #12]	; (402e08 <vTaskPlaceOnEventListRestricted+0x64>)
  402dfc:	6819      	ldr	r1, [r3, #0]
  402dfe:	3104      	adds	r1, #4
  402e00:	4807      	ldr	r0, [pc, #28]	; (402e20 <vTaskPlaceOnEventListRestricted+0x7c>)
  402e02:	4b02      	ldr	r3, [pc, #8]	; (402e0c <vTaskPlaceOnEventListRestricted+0x68>)
  402e04:	4798      	blx	r3
  402e06:	bd70      	pop	{r4, r5, r6, pc}
  402e08:	2040c2b8 	.word	0x2040c2b8
  402e0c:	004017a9 	.word	0x004017a9
  402e10:	004017f5 	.word	0x004017f5
  402e14:	2040c33c 	.word	0x2040c33c
  402e18:	2040c3b0 	.word	0x2040c3b0
  402e1c:	00402665 	.word	0x00402665
  402e20:	2040c388 	.word	0x2040c388

00402e24 <xTaskRemoveFromEventList>:
{
  402e24:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402e26:	68c3      	ldr	r3, [r0, #12]
  402e28:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402e2a:	b324      	cbz	r4, 402e76 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402e2c:	f104 0518 	add.w	r5, r4, #24
  402e30:	4628      	mov	r0, r5
  402e32:	4b1a      	ldr	r3, [pc, #104]	; (402e9c <xTaskRemoveFromEventList+0x78>)
  402e34:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402e36:	4b1a      	ldr	r3, [pc, #104]	; (402ea0 <xTaskRemoveFromEventList+0x7c>)
  402e38:	681b      	ldr	r3, [r3, #0]
  402e3a:	bb3b      	cbnz	r3, 402e8c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402e3c:	1d25      	adds	r5, r4, #4
  402e3e:	4628      	mov	r0, r5
  402e40:	4b16      	ldr	r3, [pc, #88]	; (402e9c <xTaskRemoveFromEventList+0x78>)
  402e42:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402e44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402e46:	2201      	movs	r2, #1
  402e48:	409a      	lsls	r2, r3
  402e4a:	4916      	ldr	r1, [pc, #88]	; (402ea4 <xTaskRemoveFromEventList+0x80>)
  402e4c:	6808      	ldr	r0, [r1, #0]
  402e4e:	4302      	orrs	r2, r0
  402e50:	600a      	str	r2, [r1, #0]
  402e52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402e56:	009a      	lsls	r2, r3, #2
  402e58:	4629      	mov	r1, r5
  402e5a:	4813      	ldr	r0, [pc, #76]	; (402ea8 <xTaskRemoveFromEventList+0x84>)
  402e5c:	4410      	add	r0, r2
  402e5e:	4b13      	ldr	r3, [pc, #76]	; (402eac <xTaskRemoveFromEventList+0x88>)
  402e60:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402e62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402e64:	4b12      	ldr	r3, [pc, #72]	; (402eb0 <xTaskRemoveFromEventList+0x8c>)
  402e66:	681b      	ldr	r3, [r3, #0]
  402e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402e6a:	429a      	cmp	r2, r3
  402e6c:	d913      	bls.n	402e96 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402e6e:	2001      	movs	r0, #1
  402e70:	4b10      	ldr	r3, [pc, #64]	; (402eb4 <xTaskRemoveFromEventList+0x90>)
  402e72:	6018      	str	r0, [r3, #0]
  402e74:	bd38      	pop	{r3, r4, r5, pc}
  402e76:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e7a:	b672      	cpsid	i
  402e7c:	f383 8811 	msr	BASEPRI, r3
  402e80:	f3bf 8f6f 	isb	sy
  402e84:	f3bf 8f4f 	dsb	sy
  402e88:	b662      	cpsie	i
  402e8a:	e7fe      	b.n	402e8a <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402e8c:	4629      	mov	r1, r5
  402e8e:	480a      	ldr	r0, [pc, #40]	; (402eb8 <xTaskRemoveFromEventList+0x94>)
  402e90:	4b06      	ldr	r3, [pc, #24]	; (402eac <xTaskRemoveFromEventList+0x88>)
  402e92:	4798      	blx	r3
  402e94:	e7e5      	b.n	402e62 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402e96:	2000      	movs	r0, #0
}
  402e98:	bd38      	pop	{r3, r4, r5, pc}
  402e9a:	bf00      	nop
  402e9c:	004017f5 	.word	0x004017f5
  402ea0:	2040c330 	.word	0x2040c330
  402ea4:	2040c33c 	.word	0x2040c33c
  402ea8:	2040c2c4 	.word	0x2040c2c4
  402eac:	004017a9 	.word	0x004017a9
  402eb0:	2040c2b8 	.word	0x2040c2b8
  402eb4:	2040c3b4 	.word	0x2040c3b4
  402eb8:	2040c370 	.word	0x2040c370

00402ebc <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402ebc:	b130      	cbz	r0, 402ecc <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402ebe:	4a09      	ldr	r2, [pc, #36]	; (402ee4 <vTaskSetTimeOutState+0x28>)
  402ec0:	6812      	ldr	r2, [r2, #0]
  402ec2:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402ec4:	4a08      	ldr	r2, [pc, #32]	; (402ee8 <vTaskSetTimeOutState+0x2c>)
  402ec6:	6812      	ldr	r2, [r2, #0]
  402ec8:	6042      	str	r2, [r0, #4]
  402eca:	4770      	bx	lr
  402ecc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ed0:	b672      	cpsid	i
  402ed2:	f383 8811 	msr	BASEPRI, r3
  402ed6:	f3bf 8f6f 	isb	sy
  402eda:	f3bf 8f4f 	dsb	sy
  402ede:	b662      	cpsie	i
  402ee0:	e7fe      	b.n	402ee0 <vTaskSetTimeOutState+0x24>
  402ee2:	bf00      	nop
  402ee4:	2040c36c 	.word	0x2040c36c
  402ee8:	2040c3b0 	.word	0x2040c3b0

00402eec <xTaskCheckForTimeOut>:
{
  402eec:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  402eee:	b1c0      	cbz	r0, 402f22 <xTaskCheckForTimeOut+0x36>
  402ef0:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  402ef2:	b309      	cbz	r1, 402f38 <xTaskCheckForTimeOut+0x4c>
  402ef4:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402ef6:	4b1d      	ldr	r3, [pc, #116]	; (402f6c <xTaskCheckForTimeOut+0x80>)
  402ef8:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402efa:	4b1d      	ldr	r3, [pc, #116]	; (402f70 <xTaskCheckForTimeOut+0x84>)
  402efc:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402efe:	682b      	ldr	r3, [r5, #0]
  402f00:	f1b3 3fff 	cmp.w	r3, #4294967295
  402f04:	d02e      	beq.n	402f64 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402f06:	6820      	ldr	r0, [r4, #0]
  402f08:	4a1a      	ldr	r2, [pc, #104]	; (402f74 <xTaskCheckForTimeOut+0x88>)
  402f0a:	6812      	ldr	r2, [r2, #0]
  402f0c:	4290      	cmp	r0, r2
  402f0e:	d002      	beq.n	402f16 <xTaskCheckForTimeOut+0x2a>
  402f10:	6862      	ldr	r2, [r4, #4]
  402f12:	4291      	cmp	r1, r2
  402f14:	d228      	bcs.n	402f68 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402f16:	6862      	ldr	r2, [r4, #4]
  402f18:	1a88      	subs	r0, r1, r2
  402f1a:	4283      	cmp	r3, r0
  402f1c:	d817      	bhi.n	402f4e <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  402f1e:	2401      	movs	r4, #1
  402f20:	e01c      	b.n	402f5c <xTaskCheckForTimeOut+0x70>
  402f22:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f26:	b672      	cpsid	i
  402f28:	f383 8811 	msr	BASEPRI, r3
  402f2c:	f3bf 8f6f 	isb	sy
  402f30:	f3bf 8f4f 	dsb	sy
  402f34:	b662      	cpsie	i
  402f36:	e7fe      	b.n	402f36 <xTaskCheckForTimeOut+0x4a>
  402f38:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f3c:	b672      	cpsid	i
  402f3e:	f383 8811 	msr	BASEPRI, r3
  402f42:	f3bf 8f6f 	isb	sy
  402f46:	f3bf 8f4f 	dsb	sy
  402f4a:	b662      	cpsie	i
  402f4c:	e7fe      	b.n	402f4c <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402f4e:	1a52      	subs	r2, r2, r1
  402f50:	4413      	add	r3, r2
  402f52:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402f54:	4620      	mov	r0, r4
  402f56:	4b08      	ldr	r3, [pc, #32]	; (402f78 <xTaskCheckForTimeOut+0x8c>)
  402f58:	4798      	blx	r3
			xReturn = pdFALSE;
  402f5a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402f5c:	4b07      	ldr	r3, [pc, #28]	; (402f7c <xTaskCheckForTimeOut+0x90>)
  402f5e:	4798      	blx	r3
}
  402f60:	4620      	mov	r0, r4
  402f62:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  402f64:	2400      	movs	r4, #0
  402f66:	e7f9      	b.n	402f5c <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  402f68:	2401      	movs	r4, #1
  402f6a:	e7f7      	b.n	402f5c <xTaskCheckForTimeOut+0x70>
  402f6c:	004018d9 	.word	0x004018d9
  402f70:	2040c3b0 	.word	0x2040c3b0
  402f74:	2040c36c 	.word	0x2040c36c
  402f78:	00402ebd 	.word	0x00402ebd
  402f7c:	00401925 	.word	0x00401925

00402f80 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402f80:	2201      	movs	r2, #1
  402f82:	4b01      	ldr	r3, [pc, #4]	; (402f88 <vTaskMissedYield+0x8>)
  402f84:	601a      	str	r2, [r3, #0]
  402f86:	4770      	bx	lr
  402f88:	2040c3b4 	.word	0x2040c3b4

00402f8c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402f8c:	4b05      	ldr	r3, [pc, #20]	; (402fa4 <xTaskGetSchedulerState+0x18>)
  402f8e:	681b      	ldr	r3, [r3, #0]
  402f90:	b123      	cbz	r3, 402f9c <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402f92:	4b05      	ldr	r3, [pc, #20]	; (402fa8 <xTaskGetSchedulerState+0x1c>)
  402f94:	681b      	ldr	r3, [r3, #0]
  402f96:	b91b      	cbnz	r3, 402fa0 <xTaskGetSchedulerState+0x14>
			{
				xReturn = taskSCHEDULER_RUNNING;
  402f98:	2002      	movs	r0, #2
  402f9a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402f9c:	2001      	movs	r0, #1
  402f9e:	4770      	bx	lr
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402fa0:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
  402fa2:	4770      	bx	lr
  402fa4:	2040c384 	.word	0x2040c384
  402fa8:	2040c330 	.word	0x2040c330

00402fac <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402fac:	2800      	cmp	r0, #0
  402fae:	d047      	beq.n	403040 <vTaskPriorityInherit+0x94>
	{
  402fb0:	b538      	push	{r3, r4, r5, lr}
  402fb2:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402fb4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402fb6:	4923      	ldr	r1, [pc, #140]	; (403044 <vTaskPriorityInherit+0x98>)
  402fb8:	6809      	ldr	r1, [r1, #0]
  402fba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402fbc:	428b      	cmp	r3, r1
  402fbe:	d216      	bcs.n	402fee <vTaskPriorityInherit+0x42>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402fc0:	6981      	ldr	r1, [r0, #24]
  402fc2:	2900      	cmp	r1, #0
  402fc4:	db05      	blt.n	402fd2 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402fc6:	491f      	ldr	r1, [pc, #124]	; (403044 <vTaskPriorityInherit+0x98>)
  402fc8:	6809      	ldr	r1, [r1, #0]
  402fca:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402fcc:	f1c1 0105 	rsb	r1, r1, #5
  402fd0:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402fd2:	6960      	ldr	r0, [r4, #20]
  402fd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402fd8:	0099      	lsls	r1, r3, #2
  402fda:	4b1b      	ldr	r3, [pc, #108]	; (403048 <vTaskPriorityInherit+0x9c>)
  402fdc:	440b      	add	r3, r1
  402fde:	4298      	cmp	r0, r3
  402fe0:	d006      	beq.n	402ff0 <vTaskPriorityInherit+0x44>
  402fe2:	2300      	movs	r3, #0
  402fe4:	b933      	cbnz	r3, 402ff4 <vTaskPriorityInherit+0x48>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402fe6:	4b17      	ldr	r3, [pc, #92]	; (403044 <vTaskPriorityInherit+0x98>)
  402fe8:	681b      	ldr	r3, [r3, #0]
  402fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402fec:	62e3      	str	r3, [r4, #44]	; 0x2c
  402fee:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402ff0:	2301      	movs	r3, #1
  402ff2:	e7f7      	b.n	402fe4 <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402ff4:	1d25      	adds	r5, r4, #4
  402ff6:	4628      	mov	r0, r5
  402ff8:	4b14      	ldr	r3, [pc, #80]	; (40304c <vTaskPriorityInherit+0xa0>)
  402ffa:	4798      	blx	r3
  402ffc:	b968      	cbnz	r0, 40301a <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402ffe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403000:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403004:	008a      	lsls	r2, r1, #2
  403006:	4910      	ldr	r1, [pc, #64]	; (403048 <vTaskPriorityInherit+0x9c>)
  403008:	588a      	ldr	r2, [r1, r2]
  40300a:	b932      	cbnz	r2, 40301a <vTaskPriorityInherit+0x6e>
  40300c:	2201      	movs	r2, #1
  40300e:	409a      	lsls	r2, r3
  403010:	490f      	ldr	r1, [pc, #60]	; (403050 <vTaskPriorityInherit+0xa4>)
  403012:	680b      	ldr	r3, [r1, #0]
  403014:	ea23 0302 	bic.w	r3, r3, r2
  403018:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40301a:	4b0a      	ldr	r3, [pc, #40]	; (403044 <vTaskPriorityInherit+0x98>)
  40301c:	681b      	ldr	r3, [r3, #0]
  40301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403020:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  403022:	2201      	movs	r2, #1
  403024:	409a      	lsls	r2, r3
  403026:	490a      	ldr	r1, [pc, #40]	; (403050 <vTaskPriorityInherit+0xa4>)
  403028:	6808      	ldr	r0, [r1, #0]
  40302a:	4302      	orrs	r2, r0
  40302c:	600a      	str	r2, [r1, #0]
  40302e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403032:	009a      	lsls	r2, r3, #2
  403034:	4629      	mov	r1, r5
  403036:	4804      	ldr	r0, [pc, #16]	; (403048 <vTaskPriorityInherit+0x9c>)
  403038:	4410      	add	r0, r2
  40303a:	4b06      	ldr	r3, [pc, #24]	; (403054 <vTaskPriorityInherit+0xa8>)
  40303c:	4798      	blx	r3
  40303e:	bd38      	pop	{r3, r4, r5, pc}
  403040:	4770      	bx	lr
  403042:	bf00      	nop
  403044:	2040c2b8 	.word	0x2040c2b8
  403048:	2040c2c4 	.word	0x2040c2c4
  40304c:	004017f5 	.word	0x004017f5
  403050:	2040c33c 	.word	0x2040c33c
  403054:	004017a9 	.word	0x004017a9

00403058 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  403058:	2800      	cmp	r0, #0
  40305a:	d04f      	beq.n	4030fc <xTaskPriorityDisinherit+0xa4>
	{
  40305c:	b538      	push	{r3, r4, r5, lr}
  40305e:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  403060:	4a29      	ldr	r2, [pc, #164]	; (403108 <xTaskPriorityDisinherit+0xb0>)
  403062:	6812      	ldr	r2, [r2, #0]
  403064:	4290      	cmp	r0, r2
  403066:	d00a      	beq.n	40307e <xTaskPriorityDisinherit+0x26>
  403068:	f04f 0380 	mov.w	r3, #128	; 0x80
  40306c:	b672      	cpsid	i
  40306e:	f383 8811 	msr	BASEPRI, r3
  403072:	f3bf 8f6f 	isb	sy
  403076:	f3bf 8f4f 	dsb	sy
  40307a:	b662      	cpsie	i
  40307c:	e7fe      	b.n	40307c <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  40307e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  403080:	b952      	cbnz	r2, 403098 <xTaskPriorityDisinherit+0x40>
  403082:	f04f 0380 	mov.w	r3, #128	; 0x80
  403086:	b672      	cpsid	i
  403088:	f383 8811 	msr	BASEPRI, r3
  40308c:	f3bf 8f6f 	isb	sy
  403090:	f3bf 8f4f 	dsb	sy
  403094:	b662      	cpsie	i
  403096:	e7fe      	b.n	403096 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  403098:	3a01      	subs	r2, #1
  40309a:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40309c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  40309e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  4030a0:	4288      	cmp	r0, r1
  4030a2:	d02d      	beq.n	403100 <xTaskPriorityDisinherit+0xa8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4030a4:	2a00      	cmp	r2, #0
  4030a6:	d12d      	bne.n	403104 <xTaskPriorityDisinherit+0xac>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4030a8:	1d25      	adds	r5, r4, #4
  4030aa:	4628      	mov	r0, r5
  4030ac:	4b17      	ldr	r3, [pc, #92]	; (40310c <xTaskPriorityDisinherit+0xb4>)
  4030ae:	4798      	blx	r3
  4030b0:	b970      	cbnz	r0, 4030d0 <xTaskPriorityDisinherit+0x78>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4030b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4030b4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  4030b8:	008b      	lsls	r3, r1, #2
  4030ba:	4915      	ldr	r1, [pc, #84]	; (403110 <xTaskPriorityDisinherit+0xb8>)
  4030bc:	58cb      	ldr	r3, [r1, r3]
  4030be:	b93b      	cbnz	r3, 4030d0 <xTaskPriorityDisinherit+0x78>
  4030c0:	2301      	movs	r3, #1
  4030c2:	fa03 f202 	lsl.w	r2, r3, r2
  4030c6:	4913      	ldr	r1, [pc, #76]	; (403114 <xTaskPriorityDisinherit+0xbc>)
  4030c8:	680b      	ldr	r3, [r1, #0]
  4030ca:	ea23 0302 	bic.w	r3, r3, r2
  4030ce:	600b      	str	r3, [r1, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4030d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4030d2:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4030d4:	f1c3 0205 	rsb	r2, r3, #5
  4030d8:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4030da:	2401      	movs	r4, #1
  4030dc:	fa04 f203 	lsl.w	r2, r4, r3
  4030e0:	490c      	ldr	r1, [pc, #48]	; (403114 <xTaskPriorityDisinherit+0xbc>)
  4030e2:	6808      	ldr	r0, [r1, #0]
  4030e4:	4302      	orrs	r2, r0
  4030e6:	600a      	str	r2, [r1, #0]
  4030e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4030ec:	009a      	lsls	r2, r3, #2
  4030ee:	4629      	mov	r1, r5
  4030f0:	4807      	ldr	r0, [pc, #28]	; (403110 <xTaskPriorityDisinherit+0xb8>)
  4030f2:	4410      	add	r0, r2
  4030f4:	4b08      	ldr	r3, [pc, #32]	; (403118 <xTaskPriorityDisinherit+0xc0>)
  4030f6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  4030f8:	4620      	mov	r0, r4
  4030fa:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  4030fc:	2000      	movs	r0, #0
  4030fe:	4770      	bx	lr
  403100:	2000      	movs	r0, #0
  403102:	bd38      	pop	{r3, r4, r5, pc}
  403104:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  403106:	bd38      	pop	{r3, r4, r5, pc}
  403108:	2040c2b8 	.word	0x2040c2b8
  40310c:	004017f5 	.word	0x004017f5
  403110:	2040c2c4 	.word	0x2040c2c4
  403114:	2040c33c 	.word	0x2040c33c
  403118:	004017a9 	.word	0x004017a9

0040311c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  40311c:	4b05      	ldr	r3, [pc, #20]	; (403134 <pvTaskIncrementMutexHeldCount+0x18>)
  40311e:	681b      	ldr	r3, [r3, #0]
  403120:	b123      	cbz	r3, 40312c <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  403122:	4b04      	ldr	r3, [pc, #16]	; (403134 <pvTaskIncrementMutexHeldCount+0x18>)
  403124:	681a      	ldr	r2, [r3, #0]
  403126:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  403128:	3301      	adds	r3, #1
  40312a:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  40312c:	4b01      	ldr	r3, [pc, #4]	; (403134 <pvTaskIncrementMutexHeldCount+0x18>)
  40312e:	6818      	ldr	r0, [r3, #0]
	}
  403130:	4770      	bx	lr
  403132:	bf00      	nop
  403134:	2040c2b8 	.word	0x2040c2b8

00403138 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  403138:	4b06      	ldr	r3, [pc, #24]	; (403154 <prvGetNextExpireTime+0x1c>)
  40313a:	681a      	ldr	r2, [r3, #0]
  40313c:	6813      	ldr	r3, [r2, #0]
  40313e:	fab3 f383 	clz	r3, r3
  403142:	095b      	lsrs	r3, r3, #5
  403144:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
  403146:	b913      	cbnz	r3, 40314e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403148:	68d3      	ldr	r3, [r2, #12]
  40314a:	6818      	ldr	r0, [r3, #0]
  40314c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
  40314e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
  403150:	4770      	bx	lr
  403152:	bf00      	nop
  403154:	2040c3b8 	.word	0x2040c3b8

00403158 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  403158:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40315a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40315c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  40315e:	4291      	cmp	r1, r2
  403160:	d80c      	bhi.n	40317c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  403162:	1ad2      	subs	r2, r2, r3
  403164:	6983      	ldr	r3, [r0, #24]
  403166:	429a      	cmp	r2, r3
  403168:	d301      	bcc.n	40316e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40316a:	2001      	movs	r0, #1
  40316c:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40316e:	1d01      	adds	r1, r0, #4
  403170:	4b0b      	ldr	r3, [pc, #44]	; (4031a0 <prvInsertTimerInActiveList+0x48>)
  403172:	6818      	ldr	r0, [r3, #0]
  403174:	4b0b      	ldr	r3, [pc, #44]	; (4031a4 <prvInsertTimerInActiveList+0x4c>)
  403176:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403178:	2000      	movs	r0, #0
  40317a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  40317c:	429a      	cmp	r2, r3
  40317e:	bf2c      	ite	cs
  403180:	2200      	movcs	r2, #0
  403182:	2201      	movcc	r2, #1
  403184:	4299      	cmp	r1, r3
  403186:	bf38      	it	cc
  403188:	2200      	movcc	r2, #0
  40318a:	b10a      	cbz	r2, 403190 <prvInsertTimerInActiveList+0x38>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  40318c:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  40318e:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403190:	1d01      	adds	r1, r0, #4
  403192:	4b05      	ldr	r3, [pc, #20]	; (4031a8 <prvInsertTimerInActiveList+0x50>)
  403194:	6818      	ldr	r0, [r3, #0]
  403196:	4b03      	ldr	r3, [pc, #12]	; (4031a4 <prvInsertTimerInActiveList+0x4c>)
  403198:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  40319a:	2000      	movs	r0, #0
  40319c:	bd08      	pop	{r3, pc}
  40319e:	bf00      	nop
  4031a0:	2040c3bc 	.word	0x2040c3bc
  4031a4:	004017c1 	.word	0x004017c1
  4031a8:	2040c3b8 	.word	0x2040c3b8

004031ac <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4031ac:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4031ae:	4b15      	ldr	r3, [pc, #84]	; (403204 <prvCheckForValidListAndQueue+0x58>)
  4031b0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4031b2:	4b15      	ldr	r3, [pc, #84]	; (403208 <prvCheckForValidListAndQueue+0x5c>)
  4031b4:	681b      	ldr	r3, [r3, #0]
  4031b6:	b113      	cbz	r3, 4031be <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4031b8:	4b14      	ldr	r3, [pc, #80]	; (40320c <prvCheckForValidListAndQueue+0x60>)
  4031ba:	4798      	blx	r3
  4031bc:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4031be:	4d14      	ldr	r5, [pc, #80]	; (403210 <prvCheckForValidListAndQueue+0x64>)
  4031c0:	4628      	mov	r0, r5
  4031c2:	4e14      	ldr	r6, [pc, #80]	; (403214 <prvCheckForValidListAndQueue+0x68>)
  4031c4:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4031c6:	4c14      	ldr	r4, [pc, #80]	; (403218 <prvCheckForValidListAndQueue+0x6c>)
  4031c8:	4620      	mov	r0, r4
  4031ca:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4031cc:	4b13      	ldr	r3, [pc, #76]	; (40321c <prvCheckForValidListAndQueue+0x70>)
  4031ce:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4031d0:	4b13      	ldr	r3, [pc, #76]	; (403220 <prvCheckForValidListAndQueue+0x74>)
  4031d2:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4031d4:	2200      	movs	r2, #0
  4031d6:	2110      	movs	r1, #16
  4031d8:	2005      	movs	r0, #5
  4031da:	4b12      	ldr	r3, [pc, #72]	; (403224 <prvCheckForValidListAndQueue+0x78>)
  4031dc:	4798      	blx	r3
  4031de:	4b0a      	ldr	r3, [pc, #40]	; (403208 <prvCheckForValidListAndQueue+0x5c>)
  4031e0:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  4031e2:	b118      	cbz	r0, 4031ec <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4031e4:	4910      	ldr	r1, [pc, #64]	; (403228 <prvCheckForValidListAndQueue+0x7c>)
  4031e6:	4b11      	ldr	r3, [pc, #68]	; (40322c <prvCheckForValidListAndQueue+0x80>)
  4031e8:	4798      	blx	r3
  4031ea:	e7e5      	b.n	4031b8 <prvCheckForValidListAndQueue+0xc>
  4031ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4031f0:	b672      	cpsid	i
  4031f2:	f383 8811 	msr	BASEPRI, r3
  4031f6:	f3bf 8f6f 	isb	sy
  4031fa:	f3bf 8f4f 	dsb	sy
  4031fe:	b662      	cpsie	i
  403200:	e7fe      	b.n	403200 <prvCheckForValidListAndQueue+0x54>
  403202:	bf00      	nop
  403204:	004018d9 	.word	0x004018d9
  403208:	2040c3ec 	.word	0x2040c3ec
  40320c:	00401925 	.word	0x00401925
  403210:	2040c3c0 	.word	0x2040c3c0
  403214:	0040178d 	.word	0x0040178d
  403218:	2040c3d4 	.word	0x2040c3d4
  40321c:	2040c3b8 	.word	0x2040c3b8
  403220:	2040c3bc 	.word	0x2040c3bc
  403224:	00401e65 	.word	0x00401e65
  403228:	0042e53c 	.word	0x0042e53c
  40322c:	004024a1 	.word	0x004024a1

00403230 <xTimerCreateTimerTask>:
{
  403230:	b510      	push	{r4, lr}
  403232:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  403234:	4b10      	ldr	r3, [pc, #64]	; (403278 <xTimerCreateTimerTask+0x48>)
  403236:	4798      	blx	r3
	if( xTimerQueue != NULL )
  403238:	4b10      	ldr	r3, [pc, #64]	; (40327c <xTimerCreateTimerTask+0x4c>)
  40323a:	681b      	ldr	r3, [r3, #0]
  40323c:	b1bb      	cbz	r3, 40326e <xTimerCreateTimerTask+0x3e>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  40323e:	2300      	movs	r3, #0
  403240:	9303      	str	r3, [sp, #12]
  403242:	9302      	str	r3, [sp, #8]
  403244:	9301      	str	r3, [sp, #4]
  403246:	2204      	movs	r2, #4
  403248:	9200      	str	r2, [sp, #0]
  40324a:	f44f 7282 	mov.w	r2, #260	; 0x104
  40324e:	490c      	ldr	r1, [pc, #48]	; (403280 <xTimerCreateTimerTask+0x50>)
  403250:	480c      	ldr	r0, [pc, #48]	; (403284 <xTimerCreateTimerTask+0x54>)
  403252:	4c0d      	ldr	r4, [pc, #52]	; (403288 <xTimerCreateTimerTask+0x58>)
  403254:	47a0      	blx	r4
	configASSERT( xReturn );
  403256:	b960      	cbnz	r0, 403272 <xTimerCreateTimerTask+0x42>
  403258:	f04f 0380 	mov.w	r3, #128	; 0x80
  40325c:	b672      	cpsid	i
  40325e:	f383 8811 	msr	BASEPRI, r3
  403262:	f3bf 8f6f 	isb	sy
  403266:	f3bf 8f4f 	dsb	sy
  40326a:	b662      	cpsie	i
  40326c:	e7fe      	b.n	40326c <xTimerCreateTimerTask+0x3c>
BaseType_t xReturn = pdFAIL;
  40326e:	2000      	movs	r0, #0
  403270:	e7f1      	b.n	403256 <xTimerCreateTimerTask+0x26>
}
  403272:	b004      	add	sp, #16
  403274:	bd10      	pop	{r4, pc}
  403276:	bf00      	nop
  403278:	004031ad 	.word	0x004031ad
  40327c:	2040c3ec 	.word	0x2040c3ec
  403280:	0042e544 	.word	0x0042e544
  403284:	00403635 	.word	0x00403635
  403288:	004026bd 	.word	0x004026bd

0040328c <xTimerCreate>:
{
  40328c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
  403290:	460d      	mov	r5, r1
  403292:	b1f9      	cbz	r1, 4032d4 <xTimerCreate+0x48>
  403294:	4680      	mov	r8, r0
  403296:	4617      	mov	r7, r2
  403298:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
  40329a:	202c      	movs	r0, #44	; 0x2c
  40329c:	4b10      	ldr	r3, [pc, #64]	; (4032e0 <xTimerCreate+0x54>)
  40329e:	4798      	blx	r3
		if( pxNewTimer != NULL )
  4032a0:	4604      	mov	r4, r0
  4032a2:	b158      	cbz	r0, 4032bc <xTimerCreate+0x30>
			prvCheckForValidListAndQueue();
  4032a4:	4b0f      	ldr	r3, [pc, #60]	; (4032e4 <xTimerCreate+0x58>)
  4032a6:	4798      	blx	r3
			pxNewTimer->pcTimerName = pcTimerName;
  4032a8:	f8c4 8000 	str.w	r8, [r4]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  4032ac:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
  4032ae:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  4032b0:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  4032b2:	9b06      	ldr	r3, [sp, #24]
  4032b4:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  4032b6:	1d20      	adds	r0, r4, #4
  4032b8:	4b0b      	ldr	r3, [pc, #44]	; (4032e8 <xTimerCreate+0x5c>)
  4032ba:	4798      	blx	r3
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
  4032bc:	b965      	cbnz	r5, 4032d8 <xTimerCreate+0x4c>
  4032be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032c2:	b672      	cpsid	i
  4032c4:	f383 8811 	msr	BASEPRI, r3
  4032c8:	f3bf 8f6f 	isb	sy
  4032cc:	f3bf 8f4f 	dsb	sy
  4032d0:	b662      	cpsie	i
  4032d2:	e7fe      	b.n	4032d2 <xTimerCreate+0x46>
		pxNewTimer = NULL;
  4032d4:	2400      	movs	r4, #0
  4032d6:	e7f1      	b.n	4032bc <xTimerCreate+0x30>
}
  4032d8:	4620      	mov	r0, r4
  4032da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4032de:	bf00      	nop
  4032e0:	00401b29 	.word	0x00401b29
  4032e4:	004031ad 	.word	0x004031ad
  4032e8:	004017a3 	.word	0x004017a3

004032ec <xTimerGenericCommand>:
	configASSERT( xTimer );
  4032ec:	b1c8      	cbz	r0, 403322 <xTimerGenericCommand+0x36>
{
  4032ee:	b530      	push	{r4, r5, lr}
  4032f0:	b085      	sub	sp, #20
  4032f2:	4615      	mov	r5, r2
  4032f4:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  4032f6:	4a18      	ldr	r2, [pc, #96]	; (403358 <xTimerGenericCommand+0x6c>)
  4032f8:	6810      	ldr	r0, [r2, #0]
  4032fa:	2800      	cmp	r0, #0
  4032fc:	d02a      	beq.n	403354 <xTimerGenericCommand+0x68>
  4032fe:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  403300:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  403302:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  403304:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  403306:	2905      	cmp	r1, #5
  403308:	dc1e      	bgt.n	403348 <xTimerGenericCommand+0x5c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40330a:	4b14      	ldr	r3, [pc, #80]	; (40335c <xTimerGenericCommand+0x70>)
  40330c:	4798      	blx	r3
  40330e:	2802      	cmp	r0, #2
  403310:	d012      	beq.n	403338 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  403312:	2300      	movs	r3, #0
  403314:	461a      	mov	r2, r3
  403316:	4669      	mov	r1, sp
  403318:	480f      	ldr	r0, [pc, #60]	; (403358 <xTimerGenericCommand+0x6c>)
  40331a:	6800      	ldr	r0, [r0, #0]
  40331c:	4c10      	ldr	r4, [pc, #64]	; (403360 <xTimerGenericCommand+0x74>)
  40331e:	47a0      	blx	r4
  403320:	e016      	b.n	403350 <xTimerGenericCommand+0x64>
  403322:	f04f 0380 	mov.w	r3, #128	; 0x80
  403326:	b672      	cpsid	i
  403328:	f383 8811 	msr	BASEPRI, r3
  40332c:	f3bf 8f6f 	isb	sy
  403330:	f3bf 8f4f 	dsb	sy
  403334:	b662      	cpsie	i
  403336:	e7fe      	b.n	403336 <xTimerGenericCommand+0x4a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  403338:	2300      	movs	r3, #0
  40333a:	9a08      	ldr	r2, [sp, #32]
  40333c:	4669      	mov	r1, sp
  40333e:	4806      	ldr	r0, [pc, #24]	; (403358 <xTimerGenericCommand+0x6c>)
  403340:	6800      	ldr	r0, [r0, #0]
  403342:	4c07      	ldr	r4, [pc, #28]	; (403360 <xTimerGenericCommand+0x74>)
  403344:	47a0      	blx	r4
  403346:	e003      	b.n	403350 <xTimerGenericCommand+0x64>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  403348:	2300      	movs	r3, #0
  40334a:	4669      	mov	r1, sp
  40334c:	4c05      	ldr	r4, [pc, #20]	; (403364 <xTimerGenericCommand+0x78>)
  40334e:	47a0      	blx	r4
}
  403350:	b005      	add	sp, #20
  403352:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
  403354:	2000      	movs	r0, #0
	return xReturn;
  403356:	e7fb      	b.n	403350 <xTimerGenericCommand+0x64>
  403358:	2040c3ec 	.word	0x2040c3ec
  40335c:	00402f8d 	.word	0x00402f8d
  403360:	00401ee5 	.word	0x00401ee5
  403364:	004020c9 	.word	0x004020c9

00403368 <prvSwitchTimerLists>:
{
  403368:	b570      	push	{r4, r5, r6, lr}
  40336a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40336c:	4b1c      	ldr	r3, [pc, #112]	; (4033e0 <prvSwitchTimerLists+0x78>)
  40336e:	681b      	ldr	r3, [r3, #0]
  403370:	681a      	ldr	r2, [r3, #0]
  403372:	2a00      	cmp	r2, #0
  403374:	d02c      	beq.n	4033d0 <prvSwitchTimerLists+0x68>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403376:	68db      	ldr	r3, [r3, #12]
  403378:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40337a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40337c:	1d25      	adds	r5, r4, #4
  40337e:	4628      	mov	r0, r5
  403380:	4b18      	ldr	r3, [pc, #96]	; (4033e4 <prvSwitchTimerLists+0x7c>)
  403382:	4798      	blx	r3
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403384:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403386:	4620      	mov	r0, r4
  403388:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40338a:	69e3      	ldr	r3, [r4, #28]
  40338c:	2b01      	cmp	r3, #1
  40338e:	d1ed      	bne.n	40336c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  403390:	69a3      	ldr	r3, [r4, #24]
  403392:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
  403394:	429e      	cmp	r6, r3
  403396:	d207      	bcs.n	4033a8 <prvSwitchTimerLists+0x40>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  403398:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40339a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40339c:	4629      	mov	r1, r5
  40339e:	4b10      	ldr	r3, [pc, #64]	; (4033e0 <prvSwitchTimerLists+0x78>)
  4033a0:	6818      	ldr	r0, [r3, #0]
  4033a2:	4b11      	ldr	r3, [pc, #68]	; (4033e8 <prvSwitchTimerLists+0x80>)
  4033a4:	4798      	blx	r3
  4033a6:	e7e1      	b.n	40336c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4033a8:	2100      	movs	r1, #0
  4033aa:	9100      	str	r1, [sp, #0]
  4033ac:	460b      	mov	r3, r1
  4033ae:	4632      	mov	r2, r6
  4033b0:	4620      	mov	r0, r4
  4033b2:	4c0e      	ldr	r4, [pc, #56]	; (4033ec <prvSwitchTimerLists+0x84>)
  4033b4:	47a0      	blx	r4
				configASSERT( xResult );
  4033b6:	2800      	cmp	r0, #0
  4033b8:	d1d8      	bne.n	40336c <prvSwitchTimerLists+0x4>
  4033ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4033be:	b672      	cpsid	i
  4033c0:	f383 8811 	msr	BASEPRI, r3
  4033c4:	f3bf 8f6f 	isb	sy
  4033c8:	f3bf 8f4f 	dsb	sy
  4033cc:	b662      	cpsie	i
  4033ce:	e7fe      	b.n	4033ce <prvSwitchTimerLists+0x66>
	pxCurrentTimerList = pxOverflowTimerList;
  4033d0:	4a07      	ldr	r2, [pc, #28]	; (4033f0 <prvSwitchTimerLists+0x88>)
  4033d2:	6810      	ldr	r0, [r2, #0]
  4033d4:	4902      	ldr	r1, [pc, #8]	; (4033e0 <prvSwitchTimerLists+0x78>)
  4033d6:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  4033d8:	6013      	str	r3, [r2, #0]
}
  4033da:	b002      	add	sp, #8
  4033dc:	bd70      	pop	{r4, r5, r6, pc}
  4033de:	bf00      	nop
  4033e0:	2040c3b8 	.word	0x2040c3b8
  4033e4:	004017f5 	.word	0x004017f5
  4033e8:	004017c1 	.word	0x004017c1
  4033ec:	004032ed 	.word	0x004032ed
  4033f0:	2040c3bc 	.word	0x2040c3bc

004033f4 <prvSampleTimeNow>:
{
  4033f4:	b538      	push	{r3, r4, r5, lr}
  4033f6:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
  4033f8:	4b08      	ldr	r3, [pc, #32]	; (40341c <prvSampleTimeNow+0x28>)
  4033fa:	4798      	blx	r3
  4033fc:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
  4033fe:	4b08      	ldr	r3, [pc, #32]	; (403420 <prvSampleTimeNow+0x2c>)
  403400:	681b      	ldr	r3, [r3, #0]
  403402:	4298      	cmp	r0, r3
  403404:	d305      	bcc.n	403412 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
  403406:	2300      	movs	r3, #0
  403408:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
  40340a:	4b05      	ldr	r3, [pc, #20]	; (403420 <prvSampleTimeNow+0x2c>)
  40340c:	601c      	str	r4, [r3, #0]
}
  40340e:	4620      	mov	r0, r4
  403410:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
  403412:	4b04      	ldr	r3, [pc, #16]	; (403424 <prvSampleTimeNow+0x30>)
  403414:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  403416:	2301      	movs	r3, #1
  403418:	602b      	str	r3, [r5, #0]
  40341a:	e7f6      	b.n	40340a <prvSampleTimeNow+0x16>
  40341c:	004028b5 	.word	0x004028b5
  403420:	2040c3e8 	.word	0x2040c3e8
  403424:	00403369 	.word	0x00403369

00403428 <prvProcessExpiredTimer>:
{
  403428:	b570      	push	{r4, r5, r6, lr}
  40342a:	b082      	sub	sp, #8
  40342c:	4605      	mov	r5, r0
  40342e:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403430:	4b15      	ldr	r3, [pc, #84]	; (403488 <prvProcessExpiredTimer+0x60>)
  403432:	681b      	ldr	r3, [r3, #0]
  403434:	68db      	ldr	r3, [r3, #12]
  403436:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403438:	1d20      	adds	r0, r4, #4
  40343a:	4b14      	ldr	r3, [pc, #80]	; (40348c <prvProcessExpiredTimer+0x64>)
  40343c:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40343e:	69e3      	ldr	r3, [r4, #28]
  403440:	2b01      	cmp	r3, #1
  403442:	d004      	beq.n	40344e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403444:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403446:	4620      	mov	r0, r4
  403448:	4798      	blx	r3
}
  40344a:	b002      	add	sp, #8
  40344c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  40344e:	69a1      	ldr	r1, [r4, #24]
  403450:	462b      	mov	r3, r5
  403452:	4632      	mov	r2, r6
  403454:	4429      	add	r1, r5
  403456:	4620      	mov	r0, r4
  403458:	4e0d      	ldr	r6, [pc, #52]	; (403490 <prvProcessExpiredTimer+0x68>)
  40345a:	47b0      	blx	r6
  40345c:	2801      	cmp	r0, #1
  40345e:	d1f1      	bne.n	403444 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403460:	2100      	movs	r1, #0
  403462:	9100      	str	r1, [sp, #0]
  403464:	460b      	mov	r3, r1
  403466:	462a      	mov	r2, r5
  403468:	4620      	mov	r0, r4
  40346a:	4d0a      	ldr	r5, [pc, #40]	; (403494 <prvProcessExpiredTimer+0x6c>)
  40346c:	47a8      	blx	r5
			configASSERT( xResult );
  40346e:	2800      	cmp	r0, #0
  403470:	d1e8      	bne.n	403444 <prvProcessExpiredTimer+0x1c>
  403472:	f04f 0380 	mov.w	r3, #128	; 0x80
  403476:	b672      	cpsid	i
  403478:	f383 8811 	msr	BASEPRI, r3
  40347c:	f3bf 8f6f 	isb	sy
  403480:	f3bf 8f4f 	dsb	sy
  403484:	b662      	cpsie	i
  403486:	e7fe      	b.n	403486 <prvProcessExpiredTimer+0x5e>
  403488:	2040c3b8 	.word	0x2040c3b8
  40348c:	004017f5 	.word	0x004017f5
  403490:	00403159 	.word	0x00403159
  403494:	004032ed 	.word	0x004032ed

00403498 <prvProcessTimerOrBlockTask>:
{
  403498:	b570      	push	{r4, r5, r6, lr}
  40349a:	b082      	sub	sp, #8
  40349c:	4606      	mov	r6, r0
  40349e:	460c      	mov	r4, r1
	vTaskSuspendAll();
  4034a0:	4b17      	ldr	r3, [pc, #92]	; (403500 <prvProcessTimerOrBlockTask+0x68>)
  4034a2:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4034a4:	a801      	add	r0, sp, #4
  4034a6:	4b17      	ldr	r3, [pc, #92]	; (403504 <prvProcessTimerOrBlockTask+0x6c>)
  4034a8:	4798      	blx	r3
		if( xTimerListsWereSwitched == pdFALSE )
  4034aa:	9b01      	ldr	r3, [sp, #4]
  4034ac:	bb23      	cbnz	r3, 4034f8 <prvProcessTimerOrBlockTask+0x60>
  4034ae:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4034b0:	42b0      	cmp	r0, r6
  4034b2:	bf28      	it	cs
  4034b4:	2c00      	cmpcs	r4, #0
  4034b6:	d018      	beq.n	4034ea <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
  4034b8:	b12c      	cbz	r4, 4034c6 <prvProcessTimerOrBlockTask+0x2e>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4034ba:	4b13      	ldr	r3, [pc, #76]	; (403508 <prvProcessTimerOrBlockTask+0x70>)
  4034bc:	681b      	ldr	r3, [r3, #0]
  4034be:	681c      	ldr	r4, [r3, #0]
  4034c0:	fab4 f484 	clz	r4, r4
  4034c4:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4034c6:	4622      	mov	r2, r4
  4034c8:	1b71      	subs	r1, r6, r5
  4034ca:	4b10      	ldr	r3, [pc, #64]	; (40350c <prvProcessTimerOrBlockTask+0x74>)
  4034cc:	6818      	ldr	r0, [r3, #0]
  4034ce:	4b10      	ldr	r3, [pc, #64]	; (403510 <prvProcessTimerOrBlockTask+0x78>)
  4034d0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4034d2:	4b10      	ldr	r3, [pc, #64]	; (403514 <prvProcessTimerOrBlockTask+0x7c>)
  4034d4:	4798      	blx	r3
  4034d6:	b988      	cbnz	r0, 4034fc <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
  4034d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4034dc:	4b0e      	ldr	r3, [pc, #56]	; (403518 <prvProcessTimerOrBlockTask+0x80>)
  4034de:	601a      	str	r2, [r3, #0]
  4034e0:	f3bf 8f4f 	dsb	sy
  4034e4:	f3bf 8f6f 	isb	sy
  4034e8:	e008      	b.n	4034fc <prvProcessTimerOrBlockTask+0x64>
				( void ) xTaskResumeAll();
  4034ea:	4b0a      	ldr	r3, [pc, #40]	; (403514 <prvProcessTimerOrBlockTask+0x7c>)
  4034ec:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  4034ee:	4629      	mov	r1, r5
  4034f0:	4630      	mov	r0, r6
  4034f2:	4b0a      	ldr	r3, [pc, #40]	; (40351c <prvProcessTimerOrBlockTask+0x84>)
  4034f4:	4798      	blx	r3
  4034f6:	e001      	b.n	4034fc <prvProcessTimerOrBlockTask+0x64>
			( void ) xTaskResumeAll();
  4034f8:	4b06      	ldr	r3, [pc, #24]	; (403514 <prvProcessTimerOrBlockTask+0x7c>)
  4034fa:	4798      	blx	r3
}
  4034fc:	b002      	add	sp, #8
  4034fe:	bd70      	pop	{r4, r5, r6, pc}
  403500:	004028a5 	.word	0x004028a5
  403504:	004033f5 	.word	0x004033f5
  403508:	2040c3bc 	.word	0x2040c3bc
  40350c:	2040c3ec 	.word	0x2040c3ec
  403510:	004024c9 	.word	0x004024c9
  403514:	00402a05 	.word	0x00402a05
  403518:	e000ed04 	.word	0xe000ed04
  40351c:	00403429 	.word	0x00403429

00403520 <prvProcessReceivedCommands>:
{
  403520:	b530      	push	{r4, r5, lr}
  403522:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403524:	e002      	b.n	40352c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403526:	9b04      	ldr	r3, [sp, #16]
  403528:	2b00      	cmp	r3, #0
  40352a:	da10      	bge.n	40354e <prvProcessReceivedCommands+0x2e>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40352c:	2300      	movs	r3, #0
  40352e:	461a      	mov	r2, r3
  403530:	a904      	add	r1, sp, #16
  403532:	4839      	ldr	r0, [pc, #228]	; (403618 <prvProcessReceivedCommands+0xf8>)
  403534:	6800      	ldr	r0, [r0, #0]
  403536:	4c39      	ldr	r4, [pc, #228]	; (40361c <prvProcessReceivedCommands+0xfc>)
  403538:	47a0      	blx	r4
  40353a:	2800      	cmp	r0, #0
  40353c:	d069      	beq.n	403612 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  40353e:	9b04      	ldr	r3, [sp, #16]
  403540:	2b00      	cmp	r3, #0
  403542:	daf0      	bge.n	403526 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  403544:	9907      	ldr	r1, [sp, #28]
  403546:	9806      	ldr	r0, [sp, #24]
  403548:	9b05      	ldr	r3, [sp, #20]
  40354a:	4798      	blx	r3
  40354c:	e7eb      	b.n	403526 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40354e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  403550:	6963      	ldr	r3, [r4, #20]
  403552:	b113      	cbz	r3, 40355a <prvProcessReceivedCommands+0x3a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403554:	1d20      	adds	r0, r4, #4
  403556:	4b32      	ldr	r3, [pc, #200]	; (403620 <prvProcessReceivedCommands+0x100>)
  403558:	4798      	blx	r3
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40355a:	a803      	add	r0, sp, #12
  40355c:	4b31      	ldr	r3, [pc, #196]	; (403624 <prvProcessReceivedCommands+0x104>)
  40355e:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403560:	9b04      	ldr	r3, [sp, #16]
  403562:	2b09      	cmp	r3, #9
  403564:	d8e2      	bhi.n	40352c <prvProcessReceivedCommands+0xc>
  403566:	a201      	add	r2, pc, #4	; (adr r2, 40356c <prvProcessReceivedCommands+0x4c>)
  403568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40356c:	00403595 	.word	0x00403595
  403570:	00403595 	.word	0x00403595
  403574:	00403595 	.word	0x00403595
  403578:	0040352d 	.word	0x0040352d
  40357c:	004035e1 	.word	0x004035e1
  403580:	0040360b 	.word	0x0040360b
  403584:	00403595 	.word	0x00403595
  403588:	00403595 	.word	0x00403595
  40358c:	0040352d 	.word	0x0040352d
  403590:	004035e1 	.word	0x004035e1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  403594:	9905      	ldr	r1, [sp, #20]
  403596:	69a5      	ldr	r5, [r4, #24]
  403598:	460b      	mov	r3, r1
  40359a:	4602      	mov	r2, r0
  40359c:	4429      	add	r1, r5
  40359e:	4620      	mov	r0, r4
  4035a0:	4d21      	ldr	r5, [pc, #132]	; (403628 <prvProcessReceivedCommands+0x108>)
  4035a2:	47a8      	blx	r5
  4035a4:	2801      	cmp	r0, #1
  4035a6:	d1c1      	bne.n	40352c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4035a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4035aa:	4620      	mov	r0, r4
  4035ac:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4035ae:	69e3      	ldr	r3, [r4, #28]
  4035b0:	2b01      	cmp	r3, #1
  4035b2:	d1bb      	bne.n	40352c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4035b4:	69a2      	ldr	r2, [r4, #24]
  4035b6:	2100      	movs	r1, #0
  4035b8:	9100      	str	r1, [sp, #0]
  4035ba:	460b      	mov	r3, r1
  4035bc:	9805      	ldr	r0, [sp, #20]
  4035be:	4402      	add	r2, r0
  4035c0:	4620      	mov	r0, r4
  4035c2:	4c1a      	ldr	r4, [pc, #104]	; (40362c <prvProcessReceivedCommands+0x10c>)
  4035c4:	47a0      	blx	r4
							configASSERT( xResult );
  4035c6:	2800      	cmp	r0, #0
  4035c8:	d1b0      	bne.n	40352c <prvProcessReceivedCommands+0xc>
  4035ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035ce:	b672      	cpsid	i
  4035d0:	f383 8811 	msr	BASEPRI, r3
  4035d4:	f3bf 8f6f 	isb	sy
  4035d8:	f3bf 8f4f 	dsb	sy
  4035dc:	b662      	cpsie	i
  4035de:	e7fe      	b.n	4035de <prvProcessReceivedCommands+0xbe>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4035e0:	9905      	ldr	r1, [sp, #20]
  4035e2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4035e4:	b131      	cbz	r1, 4035f4 <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4035e6:	4603      	mov	r3, r0
  4035e8:	4602      	mov	r2, r0
  4035ea:	4401      	add	r1, r0
  4035ec:	4620      	mov	r0, r4
  4035ee:	4c0e      	ldr	r4, [pc, #56]	; (403628 <prvProcessReceivedCommands+0x108>)
  4035f0:	47a0      	blx	r4
					break;
  4035f2:	e79b      	b.n	40352c <prvProcessReceivedCommands+0xc>
  4035f4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035f8:	b672      	cpsid	i
  4035fa:	f383 8811 	msr	BASEPRI, r3
  4035fe:	f3bf 8f6f 	isb	sy
  403602:	f3bf 8f4f 	dsb	sy
  403606:	b662      	cpsie	i
  403608:	e7fe      	b.n	403608 <prvProcessReceivedCommands+0xe8>
					vPortFree( pxTimer );
  40360a:	4620      	mov	r0, r4
  40360c:	4b08      	ldr	r3, [pc, #32]	; (403630 <prvProcessReceivedCommands+0x110>)
  40360e:	4798      	blx	r3
					break;
  403610:	e78c      	b.n	40352c <prvProcessReceivedCommands+0xc>
}
  403612:	b009      	add	sp, #36	; 0x24
  403614:	bd30      	pop	{r4, r5, pc}
  403616:	bf00      	nop
  403618:	2040c3ec 	.word	0x2040c3ec
  40361c:	004022cd 	.word	0x004022cd
  403620:	004017f5 	.word	0x004017f5
  403624:	004033f5 	.word	0x004033f5
  403628:	00403159 	.word	0x00403159
  40362c:	004032ed 	.word	0x004032ed
  403630:	00401b9d 	.word	0x00401b9d

00403634 <prvTimerTask>:
{
  403634:	b500      	push	{lr}
  403636:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  403638:	a801      	add	r0, sp, #4
  40363a:	4b04      	ldr	r3, [pc, #16]	; (40364c <prvTimerTask+0x18>)
  40363c:	4798      	blx	r3
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  40363e:	9901      	ldr	r1, [sp, #4]
  403640:	4b03      	ldr	r3, [pc, #12]	; (403650 <prvTimerTask+0x1c>)
  403642:	4798      	blx	r3
		prvProcessReceivedCommands();
  403644:	4b03      	ldr	r3, [pc, #12]	; (403654 <prvTimerTask+0x20>)
  403646:	4798      	blx	r3
  403648:	e7f6      	b.n	403638 <prvTimerTask+0x4>
  40364a:	bf00      	nop
  40364c:	00403139 	.word	0x00403139
  403650:	00403499 	.word	0x00403499
  403654:	00403521 	.word	0x00403521

00403658 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
  403658:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  40365a:	4603      	mov	r3, r0
  40365c:	b110      	cbz	r0, 403664 <lv_disp_get_scr_act+0xc>
    if(!disp) {
  40365e:	b12b      	cbz	r3, 40366c <lv_disp_get_scr_act+0x14>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
  403660:	6c58      	ldr	r0, [r3, #68]	; 0x44
  403662:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  403664:	4b02      	ldr	r3, [pc, #8]	; (403670 <lv_disp_get_scr_act+0x18>)
  403666:	4798      	blx	r3
  403668:	4603      	mov	r3, r0
  40366a:	e7f8      	b.n	40365e <lv_disp_get_scr_act+0x6>
        return NULL;
  40366c:	2000      	movs	r0, #0
}
  40366e:	bd08      	pop	{r3, pc}
  403670:	00415c15 	.word	0x00415c15

00403674 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
  403674:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  403676:	4603      	mov	r3, r0
  403678:	b110      	cbz	r0, 403680 <lv_disp_get_scr_prev+0xc>
    if(!disp) {
  40367a:	b12b      	cbz	r3, 403688 <lv_disp_get_scr_prev+0x14>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
  40367c:	6c98      	ldr	r0, [r3, #72]	; 0x48
  40367e:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  403680:	4b02      	ldr	r3, [pc, #8]	; (40368c <lv_disp_get_scr_prev+0x18>)
  403682:	4798      	blx	r3
  403684:	4603      	mov	r3, r0
  403686:	e7f8      	b.n	40367a <lv_disp_get_scr_prev+0x6>
        return NULL;
  403688:	2000      	movs	r0, #0
}
  40368a:	bd08      	pop	{r3, pc}
  40368c:	00415c15 	.word	0x00415c15

00403690 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
  403690:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  403692:	4603      	mov	r3, r0
  403694:	b110      	cbz	r0, 40369c <lv_disp_get_layer_top+0xc>
    if(!disp) {
  403696:	b12b      	cbz	r3, 4036a4 <lv_disp_get_layer_top+0x14>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
  403698:	6d18      	ldr	r0, [r3, #80]	; 0x50
  40369a:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  40369c:	4b02      	ldr	r3, [pc, #8]	; (4036a8 <lv_disp_get_layer_top+0x18>)
  40369e:	4798      	blx	r3
  4036a0:	4603      	mov	r3, r0
  4036a2:	e7f8      	b.n	403696 <lv_disp_get_layer_top+0x6>
        return NULL;
  4036a4:	2000      	movs	r0, #0
}
  4036a6:	bd08      	pop	{r3, pc}
  4036a8:	00415c15 	.word	0x00415c15

004036ac <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
  4036ac:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  4036ae:	4603      	mov	r3, r0
  4036b0:	b110      	cbz	r0, 4036b8 <lv_disp_get_layer_sys+0xc>
    if(!disp) {
  4036b2:	b12b      	cbz	r3, 4036c0 <lv_disp_get_layer_sys+0x14>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
  4036b4:	6d58      	ldr	r0, [r3, #84]	; 0x54
  4036b6:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  4036b8:	4b02      	ldr	r3, [pc, #8]	; (4036c4 <lv_disp_get_layer_sys+0x18>)
  4036ba:	4798      	blx	r3
  4036bc:	4603      	mov	r3, r0
  4036be:	e7f8      	b.n	4036b2 <lv_disp_get_layer_sys+0x6>
        return NULL;
  4036c0:	2000      	movs	r0, #0
}
  4036c2:	bd08      	pop	{r3, pc}
  4036c4:	00415c15 	.word	0x00415c15

004036c8 <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
  4036c8:	b510      	push	{r4, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
  4036ca:	2400      	movs	r4, #0
    while(i != NULL) {
  4036cc:	e001      	b.n	4036d2 <obj_to_foreground+0xa>
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
  4036ce:	4b07      	ldr	r3, [pc, #28]	; (4036ec <obj_to_foreground+0x24>)
  4036d0:	4798      	blx	r3
    while(i != NULL) {
  4036d2:	b130      	cbz	r0, 4036e2 <obj_to_foreground+0x1a>
        if(i->top != 0) last_top = i;
  4036d4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  4036d8:	f013 0f20 	tst.w	r3, #32
  4036dc:	d0f7      	beq.n	4036ce <obj_to_foreground+0x6>
  4036de:	4604      	mov	r4, r0
  4036e0:	e7f5      	b.n	4036ce <obj_to_foreground+0x6>
    }

    if(last_top != NULL) {
  4036e2:	b114      	cbz	r4, 4036ea <obj_to_foreground+0x22>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
  4036e4:	4620      	mov	r0, r4
  4036e6:	4b02      	ldr	r3, [pc, #8]	; (4036f0 <obj_to_foreground+0x28>)
  4036e8:	4798      	blx	r3
  4036ea:	bd10      	pop	{r4, pc}
  4036ec:	00405955 	.word	0x00405955
  4036f0:	00405f7d 	.word	0x00405f7d

004036f4 <focus_next_core>:
{
  4036f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(group->frozen) return;
  4036f8:	7d03      	ldrb	r3, [r0, #20]
  4036fa:	f013 0f01 	tst.w	r3, #1
  4036fe:	d15f      	bne.n	4037c0 <focus_next_core+0xcc>
  403700:	4690      	mov	r8, r2
  403702:	4689      	mov	r9, r1
  403704:	4606      	mov	r6, r0
    lv_obj_t ** obj_next     = group->obj_focus;
  403706:	68c4      	ldr	r4, [r0, #12]
    bool can_begin           = true;
  403708:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
  40370a:	2500      	movs	r5, #0
        if(obj_next == NULL) {
  40370c:	2c00      	cmp	r4, #0
  40370e:	d042      	beq.n	403796 <focus_next_core+0xa2>
  403710:	2301      	movs	r3, #1
        if(obj_sentinel == NULL) {
  403712:	2d00      	cmp	r5, #0
  403714:	d04b      	beq.n	4037ae <focus_next_core+0xba>
        if(can_move) {
  403716:	2b00      	cmp	r3, #0
  403718:	d14c      	bne.n	4037b4 <focus_next_core+0xc0>
        if(obj_next == NULL) continue;
  40371a:	2c00      	cmp	r4, #0
  40371c:	d0f6      	beq.n	40370c <focus_next_core+0x18>
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
  40371e:	2100      	movs	r1, #0
  403720:	6820      	ldr	r0, [r4, #0]
  403722:	4b28      	ldr	r3, [pc, #160]	; (4037c4 <focus_next_core+0xd0>)
  403724:	4798      	blx	r3
  403726:	f010 0f20 	tst.w	r0, #32
  40372a:	d1ef      	bne.n	40370c <focus_next_core+0x18>
        if(!lv_obj_get_hidden(*obj_next)) break;
  40372c:	6820      	ldr	r0, [r4, #0]
  40372e:	4b26      	ldr	r3, [pc, #152]	; (4037c8 <focus_next_core+0xd4>)
  403730:	4798      	blx	r3
  403732:	2800      	cmp	r0, #0
  403734:	d1ea      	bne.n	40370c <focus_next_core+0x18>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
  403736:	68f3      	ldr	r3, [r6, #12]
  403738:	429c      	cmp	r4, r3
  40373a:	d041      	beq.n	4037c0 <focus_next_core+0xcc>
    if(group->obj_focus) {
  40373c:	b183      	cbz	r3, 403760 <focus_next_core+0x6c>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  40373e:	6818      	ldr	r0, [r3, #0]
  403740:	69c3      	ldr	r3, [r0, #28]
  403742:	2200      	movs	r2, #0
  403744:	2117      	movs	r1, #23
  403746:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
  403748:	68f3      	ldr	r3, [r6, #12]
  40374a:	2200      	movs	r2, #0
  40374c:	210e      	movs	r1, #14
  40374e:	6818      	ldr	r0, [r3, #0]
  403750:	4b1e      	ldr	r3, [pc, #120]	; (4037cc <focus_next_core+0xd8>)
  403752:	4798      	blx	r3
        if(res != LV_RES_OK) return;
  403754:	2801      	cmp	r0, #1
  403756:	d133      	bne.n	4037c0 <focus_next_core+0xcc>
        lv_obj_invalidate(*group->obj_focus);
  403758:	68f3      	ldr	r3, [r6, #12]
  40375a:	6818      	ldr	r0, [r3, #0]
  40375c:	4b1c      	ldr	r3, [pc, #112]	; (4037d0 <focus_next_core+0xdc>)
  40375e:	4798      	blx	r3
    group->obj_focus = obj_next;
  403760:	60f4      	str	r4, [r6, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
  403762:	6820      	ldr	r0, [r4, #0]
  403764:	69c3      	ldr	r3, [r0, #28]
  403766:	2200      	movs	r2, #0
  403768:	2116      	movs	r1, #22
  40376a:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
  40376c:	68f3      	ldr	r3, [r6, #12]
  40376e:	2200      	movs	r2, #0
  403770:	210d      	movs	r1, #13
  403772:	6818      	ldr	r0, [r3, #0]
  403774:	4b15      	ldr	r3, [pc, #84]	; (4037cc <focus_next_core+0xd8>)
  403776:	4798      	blx	r3
    if(res != LV_RES_OK) return;
  403778:	2801      	cmp	r0, #1
  40377a:	d121      	bne.n	4037c0 <focus_next_core+0xcc>
    obj_to_foreground(*group->obj_focus);
  40377c:	68f3      	ldr	r3, [r6, #12]
  40377e:	6818      	ldr	r0, [r3, #0]
  403780:	4b14      	ldr	r3, [pc, #80]	; (4037d4 <focus_next_core+0xe0>)
  403782:	4798      	blx	r3
    lv_obj_invalidate(*group->obj_focus);
  403784:	68f3      	ldr	r3, [r6, #12]
  403786:	6818      	ldr	r0, [r3, #0]
  403788:	4b11      	ldr	r3, [pc, #68]	; (4037d0 <focus_next_core+0xdc>)
  40378a:	4798      	blx	r3
    if(group->focus_cb) group->focus_cb(group);
  40378c:	6933      	ldr	r3, [r6, #16]
  40378e:	b1bb      	cbz	r3, 4037c0 <focus_next_core+0xcc>
  403790:	4630      	mov	r0, r6
  403792:	4798      	blx	r3
  403794:	e014      	b.n	4037c0 <focus_next_core+0xcc>
            if(group->wrap || obj_sentinel == NULL) {
  403796:	7d33      	ldrb	r3, [r6, #20]
  403798:	f013 0f10 	tst.w	r3, #16
  40379c:	d100      	bne.n	4037a0 <focus_next_core+0xac>
  40379e:	b97d      	cbnz	r5, 4037c0 <focus_next_core+0xcc>
                if(!can_begin) return;
  4037a0:	b177      	cbz	r7, 4037c0 <focus_next_core+0xcc>
                obj_next  = begin(&group->obj_ll);
  4037a2:	4630      	mov	r0, r6
  4037a4:	47c8      	blx	r9
  4037a6:	4604      	mov	r4, r0
                can_begin = false;
  4037a8:	2700      	movs	r7, #0
                can_move  = false;
  4037aa:	463b      	mov	r3, r7
                can_begin = false;
  4037ac:	e7b1      	b.n	403712 <focus_next_core+0x1e>
            if(obj_sentinel == NULL) return; /*Group is empty*/
  4037ae:	b13c      	cbz	r4, 4037c0 <focus_next_core+0xcc>
            obj_sentinel = obj_next;
  4037b0:	4625      	mov	r5, r4
  4037b2:	e7b0      	b.n	403716 <focus_next_core+0x22>
            obj_next = move(&group->obj_ll, obj_next);
  4037b4:	4621      	mov	r1, r4
  4037b6:	4630      	mov	r0, r6
  4037b8:	47c0      	blx	r8
  4037ba:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return;
  4037bc:	4285      	cmp	r5, r0
  4037be:	d1ac      	bne.n	40371a <focus_next_core+0x26>
  4037c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4037c4:	00406d89 	.word	0x00406d89
  4037c8:	00405d71 	.word	0x00405d71
  4037cc:	00405845 	.word	0x00405845
  4037d0:	00405f01 	.word	0x00405f01
  4037d4:	004036c9 	.word	0x004036c9

004037d8 <_lv_group_init>:
{
  4037d8:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
  4037da:	2118      	movs	r1, #24
  4037dc:	4801      	ldr	r0, [pc, #4]	; (4037e4 <_lv_group_init+0xc>)
  4037de:	4b02      	ldr	r3, [pc, #8]	; (4037e8 <_lv_group_init+0x10>)
  4037e0:	4798      	blx	r3
  4037e2:	bd08      	pop	{r3, pc}
  4037e4:	2043a3b8 	.word	0x2043a3b8
  4037e8:	0041700f 	.word	0x0041700f

004037ec <lv_group_focus_next>:
{
  4037ec:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
  4037ee:	4a02      	ldr	r2, [pc, #8]	; (4037f8 <lv_group_focus_next+0xc>)
  4037f0:	4902      	ldr	r1, [pc, #8]	; (4037fc <lv_group_focus_next+0x10>)
  4037f2:	4b03      	ldr	r3, [pc, #12]	; (403800 <lv_group_focus_next+0x14>)
  4037f4:	4798      	blx	r3
  4037f6:	bd08      	pop	{r3, pc}
  4037f8:	004170cd 	.word	0x004170cd
  4037fc:	004170b9 	.word	0x004170b9
  403800:	004036f5 	.word	0x004036f5

00403804 <lv_group_focus_prev>:
{
  403804:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
  403806:	4a02      	ldr	r2, [pc, #8]	; (403810 <lv_group_focus_prev+0xc>)
  403808:	4902      	ldr	r1, [pc, #8]	; (403814 <lv_group_focus_prev+0x10>)
  40380a:	4b03      	ldr	r3, [pc, #12]	; (403818 <lv_group_focus_prev+0x14>)
  40380c:	4798      	blx	r3
  40380e:	bd08      	pop	{r3, pc}
  403810:	004170db 	.word	0x004170db
  403814:	004170c3 	.word	0x004170c3
  403818:	004036f5 	.word	0x004036f5

0040381c <lv_group_refocus>:
{
  40381c:	b538      	push	{r3, r4, r5, lr}
  40381e:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
  403820:	7d03      	ldrb	r3, [r0, #20]
  403822:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
  403826:	f043 0310 	orr.w	r3, r3, #16
  40382a:	7503      	strb	r3, [r0, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
  40382c:	f013 0f08 	tst.w	r3, #8
  403830:	d006      	beq.n	403840 <lv_group_refocus+0x24>
        lv_group_focus_prev(g);
  403832:	4b05      	ldr	r3, [pc, #20]	; (403848 <lv_group_refocus+0x2c>)
  403834:	4798      	blx	r3
    g->wrap = temp_wrap;
  403836:	7d23      	ldrb	r3, [r4, #20]
  403838:	f365 1304 	bfi	r3, r5, #4, #1
  40383c:	7523      	strb	r3, [r4, #20]
  40383e:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_next(g);
  403840:	4b02      	ldr	r3, [pc, #8]	; (40384c <lv_group_refocus+0x30>)
  403842:	4798      	blx	r3
  403844:	e7f7      	b.n	403836 <lv_group_refocus+0x1a>
  403846:	bf00      	nop
  403848:	00403805 	.word	0x00403805
  40384c:	004037ed 	.word	0x004037ed

00403850 <lv_group_add_obj>:
    if(group == NULL) return;
  403850:	2800      	cmp	r0, #0
  403852:	d031      	beq.n	4038b8 <lv_group_add_obj+0x68>
{
  403854:	b570      	push	{r4, r5, r6, lr}
  403856:	4605      	mov	r5, r0
  403858:	460c      	mov	r4, r1
    _LV_LL_READ(group->obj_ll, obj_i) {
  40385a:	4606      	mov	r6, r0
  40385c:	4b17      	ldr	r3, [pc, #92]	; (4038bc <lv_group_add_obj+0x6c>)
  40385e:	4798      	blx	r3
  403860:	b138      	cbz	r0, 403872 <lv_group_add_obj+0x22>
        if((*obj_i) == obj) {
  403862:	6803      	ldr	r3, [r0, #0]
  403864:	42a3      	cmp	r3, r4
  403866:	d01c      	beq.n	4038a2 <lv_group_add_obj+0x52>
    _LV_LL_READ(group->obj_ll, obj_i) {
  403868:	4601      	mov	r1, r0
  40386a:	4630      	mov	r0, r6
  40386c:	4b14      	ldr	r3, [pc, #80]	; (4038c0 <lv_group_add_obj+0x70>)
  40386e:	4798      	blx	r3
  403870:	e7f6      	b.n	403860 <lv_group_add_obj+0x10>
    if(obj->group_p) {
  403872:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403874:	b133      	cbz	r3, 403884 <lv_group_add_obj+0x34>
        if(lv_obj_is_focused(obj)) {
  403876:	4620      	mov	r0, r4
  403878:	4b12      	ldr	r3, [pc, #72]	; (4038c4 <lv_group_add_obj+0x74>)
  40387a:	4798      	blx	r3
  40387c:	b110      	cbz	r0, 403884 <lv_group_add_obj+0x34>
            lv_group_refocus(obj->group_p);
  40387e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  403880:	4b11      	ldr	r3, [pc, #68]	; (4038c8 <lv_group_add_obj+0x78>)
  403882:	4798      	blx	r3
    obj->group_p     = group;
  403884:	63a5      	str	r5, [r4, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
  403886:	4628      	mov	r0, r5
  403888:	4b10      	ldr	r3, [pc, #64]	; (4038cc <lv_group_add_obj+0x7c>)
  40388a:	4798      	blx	r3
  40388c:	4606      	mov	r6, r0
    LV_ASSERT_MEM(next);
  40388e:	4b10      	ldr	r3, [pc, #64]	; (4038d0 <lv_group_add_obj+0x80>)
  403890:	4798      	blx	r3
  403892:	b138      	cbz	r0, 4038a4 <lv_group_add_obj+0x54>
    if(next == NULL) return;
  403894:	b12e      	cbz	r6, 4038a2 <lv_group_add_obj+0x52>
    *next = obj;
  403896:	6034      	str	r4, [r6, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
  403898:	4628      	mov	r0, r5
  40389a:	4b08      	ldr	r3, [pc, #32]	; (4038bc <lv_group_add_obj+0x6c>)
  40389c:	4798      	blx	r3
  40389e:	4286      	cmp	r6, r0
  4038a0:	d006      	beq.n	4038b0 <lv_group_add_obj+0x60>
  4038a2:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(next);
  4038a4:	4632      	mov	r2, r6
  4038a6:	2300      	movs	r3, #0
  4038a8:	480a      	ldr	r0, [pc, #40]	; (4038d4 <lv_group_add_obj+0x84>)
  4038aa:	490b      	ldr	r1, [pc, #44]	; (4038d8 <lv_group_add_obj+0x88>)
  4038ac:	4788      	blx	r1
  4038ae:	e7fe      	b.n	4038ae <lv_group_add_obj+0x5e>
        lv_group_refocus(group);
  4038b0:	4628      	mov	r0, r5
  4038b2:	4b05      	ldr	r3, [pc, #20]	; (4038c8 <lv_group_add_obj+0x78>)
  4038b4:	4798      	blx	r3
  4038b6:	e7f4      	b.n	4038a2 <lv_group_add_obj+0x52>
  4038b8:	4770      	bx	lr
  4038ba:	bf00      	nop
  4038bc:	004170b9 	.word	0x004170b9
  4038c0:	004170cd 	.word	0x004170cd
  4038c4:	004081d9 	.word	0x004081d9
  4038c8:	0040381d 	.word	0x0040381d
  4038cc:	0041706d 	.word	0x0041706d
  4038d0:	00416da9 	.word	0x00416da9
  4038d4:	0042e54c 	.word	0x0042e54c
  4038d8:	00416db5 	.word	0x00416db5

004038dc <lv_group_remove_obj>:
{
  4038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_group_t * g = obj->group_p;
  4038de:	6b87      	ldr	r7, [r0, #56]	; 0x38
    if(g == NULL) return;
  4038e0:	2f00      	cmp	r7, #0
  4038e2:	d043      	beq.n	40396c <lv_group_remove_obj+0x90>
  4038e4:	4605      	mov	r5, r0
    if(*g->obj_focus == obj) {
  4038e6:	68fb      	ldr	r3, [r7, #12]
  4038e8:	681b      	ldr	r3, [r3, #0]
  4038ea:	4298      	cmp	r0, r3
  4038ec:	d013      	beq.n	403916 <lv_group_remove_obj+0x3a>
    if(*g->obj_focus == obj) {
  4038ee:	68fb      	ldr	r3, [r7, #12]
  4038f0:	681b      	ldr	r3, [r3, #0]
  4038f2:	429d      	cmp	r5, r3
  4038f4:	d02d      	beq.n	403952 <lv_group_remove_obj+0x76>
    _LV_LL_READ(g->obj_ll, i) {
  4038f6:	463e      	mov	r6, r7
  4038f8:	4638      	mov	r0, r7
  4038fa:	4b1d      	ldr	r3, [pc, #116]	; (403970 <lv_group_remove_obj+0x94>)
  4038fc:	4798      	blx	r3
  4038fe:	4604      	mov	r4, r0
  403900:	2c00      	cmp	r4, #0
  403902:	d033      	beq.n	40396c <lv_group_remove_obj+0x90>
        if(*i == obj) {
  403904:	6823      	ldr	r3, [r4, #0]
  403906:	429d      	cmp	r5, r3
  403908:	d026      	beq.n	403958 <lv_group_remove_obj+0x7c>
    _LV_LL_READ(g->obj_ll, i) {
  40390a:	4621      	mov	r1, r4
  40390c:	4630      	mov	r0, r6
  40390e:	4b19      	ldr	r3, [pc, #100]	; (403974 <lv_group_remove_obj+0x98>)
  403910:	4798      	blx	r3
  403912:	4604      	mov	r4, r0
  403914:	e7f4      	b.n	403900 <lv_group_remove_obj+0x24>
        if(g->frozen) g->frozen = 0;
  403916:	7d3b      	ldrb	r3, [r7, #20]
  403918:	f013 0f01 	tst.w	r3, #1
  40391c:	d003      	beq.n	403926 <lv_group_remove_obj+0x4a>
  40391e:	7d3b      	ldrb	r3, [r7, #20]
  403920:	f36f 0300 	bfc	r3, #0, #1
  403924:	753b      	strb	r3, [r7, #20]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
  403926:	4638      	mov	r0, r7
  403928:	4b11      	ldr	r3, [pc, #68]	; (403970 <lv_group_remove_obj+0x94>)
  40392a:	4798      	blx	r3
  40392c:	68fb      	ldr	r3, [r7, #12]
  40392e:	4283      	cmp	r3, r0
  403930:	d003      	beq.n	40393a <lv_group_remove_obj+0x5e>
            lv_group_refocus(g);
  403932:	4638      	mov	r0, r7
  403934:	4b10      	ldr	r3, [pc, #64]	; (403978 <lv_group_remove_obj+0x9c>)
  403936:	4798      	blx	r3
  403938:	e7d9      	b.n	4038ee <lv_group_remove_obj+0x12>
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
  40393a:	4638      	mov	r0, r7
  40393c:	4b0f      	ldr	r3, [pc, #60]	; (40397c <lv_group_remove_obj+0xa0>)
  40393e:	4798      	blx	r3
  403940:	68fb      	ldr	r3, [r7, #12]
  403942:	4283      	cmp	r3, r0
  403944:	d1f5      	bne.n	403932 <lv_group_remove_obj+0x56>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  403946:	6818      	ldr	r0, [r3, #0]
  403948:	69c3      	ldr	r3, [r0, #28]
  40394a:	2200      	movs	r2, #0
  40394c:	2117      	movs	r1, #23
  40394e:	4798      	blx	r3
  403950:	e7cd      	b.n	4038ee <lv_group_remove_obj+0x12>
        g->obj_focus = NULL;
  403952:	2300      	movs	r3, #0
  403954:	60fb      	str	r3, [r7, #12]
  403956:	e7ce      	b.n	4038f6 <lv_group_remove_obj+0x1a>
            _lv_ll_remove(&g->obj_ll, i);
  403958:	4621      	mov	r1, r4
  40395a:	4638      	mov	r0, r7
  40395c:	4b08      	ldr	r3, [pc, #32]	; (403980 <lv_group_remove_obj+0xa4>)
  40395e:	4798      	blx	r3
            lv_mem_free(i);
  403960:	4620      	mov	r0, r4
  403962:	4b08      	ldr	r3, [pc, #32]	; (403984 <lv_group_remove_obj+0xa8>)
  403964:	4798      	blx	r3
            obj->group_p = NULL;
  403966:	2300      	movs	r3, #0
  403968:	63ab      	str	r3, [r5, #56]	; 0x38
            break;
  40396a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40396c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40396e:	bf00      	nop
  403970:	004170b9 	.word	0x004170b9
  403974:	004170cd 	.word	0x004170cd
  403978:	0040381d 	.word	0x0040381d
  40397c:	004170c3 	.word	0x004170c3
  403980:	00417175 	.word	0x00417175
  403984:	004175b1 	.word	0x004175b1

00403988 <lv_group_get_focused>:
    if(!group) return NULL;
  403988:	b118      	cbz	r0, 403992 <lv_group_get_focused+0xa>
    if(group->obj_focus == NULL) return NULL;
  40398a:	68c3      	ldr	r3, [r0, #12]
  40398c:	b11b      	cbz	r3, 403996 <lv_group_get_focused+0xe>
    return *group->obj_focus;
  40398e:	6818      	ldr	r0, [r3, #0]
  403990:	4770      	bx	lr
    if(!group) return NULL;
  403992:	2000      	movs	r0, #0
  403994:	4770      	bx	lr
    if(group->obj_focus == NULL) return NULL;
  403996:	2000      	movs	r0, #0
}
  403998:	4770      	bx	lr
	...

0040399c <lv_group_send_data>:
{
  40399c:	b510      	push	{r4, lr}
  40399e:	b082      	sub	sp, #8
  4039a0:	9101      	str	r1, [sp, #4]
    lv_obj_t * act = lv_group_get_focused(group);
  4039a2:	4b0a      	ldr	r3, [pc, #40]	; (4039cc <lv_group_send_data+0x30>)
  4039a4:	4798      	blx	r3
    if(act == NULL) return LV_RES_OK;
  4039a6:	b170      	cbz	r0, 4039c6 <lv_group_send_data+0x2a>
  4039a8:	4604      	mov	r4, r0
    res = act->signal_cb(act, LV_SIGNAL_CONTROL, &c);
  4039aa:	69c3      	ldr	r3, [r0, #28]
  4039ac:	aa01      	add	r2, sp, #4
  4039ae:	2118      	movs	r1, #24
  4039b0:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
  4039b2:	2801      	cmp	r0, #1
  4039b4:	d001      	beq.n	4039ba <lv_group_send_data+0x1e>
}
  4039b6:	b002      	add	sp, #8
  4039b8:	bd10      	pop	{r4, pc}
    res = lv_event_send(act, LV_EVENT_KEY, &c);
  4039ba:	aa01      	add	r2, sp, #4
  4039bc:	210c      	movs	r1, #12
  4039be:	4620      	mov	r0, r4
  4039c0:	4b03      	ldr	r3, [pc, #12]	; (4039d0 <lv_group_send_data+0x34>)
  4039c2:	4798      	blx	r3
  4039c4:	e7f7      	b.n	4039b6 <lv_group_send_data+0x1a>
    if(act == NULL) return LV_RES_OK;
  4039c6:	2001      	movs	r0, #1
  4039c8:	e7f5      	b.n	4039b6 <lv_group_send_data+0x1a>
  4039ca:	bf00      	nop
  4039cc:	00403989 	.word	0x00403989
  4039d0:	00405845 	.word	0x00405845

004039d4 <lv_group_set_editing>:
    if(group == NULL) return;
  4039d4:	b1f8      	cbz	r0, 403a16 <lv_group_set_editing+0x42>
{
  4039d6:	b538      	push	{r3, r4, r5, lr}
  4039d8:	4604      	mov	r4, r0
    if(en_val == group->editing) return; /*Do not set the same mode again*/
  4039da:	7d03      	ldrb	r3, [r0, #20]
  4039dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
  4039e0:	4299      	cmp	r1, r3
  4039e2:	d013      	beq.n	403a0c <lv_group_set_editing+0x38>
    group->editing     = en_val;
  4039e4:	7d03      	ldrb	r3, [r0, #20]
  4039e6:	f361 0341 	bfi	r3, r1, #1, #1
  4039ea:	7503      	strb	r3, [r0, #20]
    lv_obj_t * focused = lv_group_get_focused(group);
  4039ec:	4b0a      	ldr	r3, [pc, #40]	; (403a18 <lv_group_set_editing+0x44>)
  4039ee:	4798      	blx	r3
    if(focused) {
  4039f0:	4605      	mov	r5, r0
  4039f2:	b158      	cbz	r0, 403a0c <lv_group_set_editing+0x38>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
  4039f4:	69c3      	ldr	r3, [r0, #28]
  4039f6:	2200      	movs	r2, #0
  4039f8:	2116      	movs	r1, #22
  4039fa:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
  4039fc:	68e3      	ldr	r3, [r4, #12]
  4039fe:	2200      	movs	r2, #0
  403a00:	210d      	movs	r1, #13
  403a02:	6818      	ldr	r0, [r3, #0]
  403a04:	4b05      	ldr	r3, [pc, #20]	; (403a1c <lv_group_set_editing+0x48>)
  403a06:	4798      	blx	r3
        if(res != LV_RES_OK) return;
  403a08:	2801      	cmp	r0, #1
  403a0a:	d000      	beq.n	403a0e <lv_group_set_editing+0x3a>
  403a0c:	bd38      	pop	{r3, r4, r5, pc}
        lv_obj_invalidate(focused);
  403a0e:	4628      	mov	r0, r5
  403a10:	4b03      	ldr	r3, [pc, #12]	; (403a20 <lv_group_set_editing+0x4c>)
  403a12:	4798      	blx	r3
  403a14:	e7fa      	b.n	403a0c <lv_group_set_editing+0x38>
  403a16:	4770      	bx	lr
  403a18:	00403989 	.word	0x00403989
  403a1c:	00405845 	.word	0x00405845
  403a20:	00405f01 	.word	0x00405f01

00403a24 <lv_group_focus_obj>:
    if(obj == NULL) return;
  403a24:	2800      	cmp	r0, #0
  403a26:	d04e      	beq.n	403ac6 <lv_group_focus_obj+0xa2>
{
  403a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403a2a:	4605      	mov	r5, r0
    lv_group_t * g = obj->group_p;
  403a2c:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if(g == NULL) return;
  403a2e:	b356      	cbz	r6, 403a86 <lv_group_focus_obj+0x62>
    if(g->frozen != 0) return;
  403a30:	7d33      	ldrb	r3, [r6, #20]
  403a32:	f013 0f01 	tst.w	r3, #1
  403a36:	d126      	bne.n	403a86 <lv_group_focus_obj+0x62>
    if(g->obj_focus != NULL && obj == *g->obj_focus) return;
  403a38:	68f3      	ldr	r3, [r6, #12]
  403a3a:	b113      	cbz	r3, 403a42 <lv_group_focus_obj+0x1e>
  403a3c:	681b      	ldr	r3, [r3, #0]
  403a3e:	4298      	cmp	r0, r3
  403a40:	d021      	beq.n	403a86 <lv_group_focus_obj+0x62>
    lv_group_set_editing(g, false);
  403a42:	2100      	movs	r1, #0
  403a44:	4630      	mov	r0, r6
  403a46:	4b20      	ldr	r3, [pc, #128]	; (403ac8 <lv_group_focus_obj+0xa4>)
  403a48:	4798      	blx	r3
    _LV_LL_READ(g->obj_ll, i) {
  403a4a:	4637      	mov	r7, r6
  403a4c:	4630      	mov	r0, r6
  403a4e:	4b1f      	ldr	r3, [pc, #124]	; (403acc <lv_group_focus_obj+0xa8>)
  403a50:	4798      	blx	r3
  403a52:	4604      	mov	r4, r0
  403a54:	b1bc      	cbz	r4, 403a86 <lv_group_focus_obj+0x62>
        if(*i == obj) {
  403a56:	6823      	ldr	r3, [r4, #0]
  403a58:	429d      	cmp	r5, r3
  403a5a:	d005      	beq.n	403a68 <lv_group_focus_obj+0x44>
    _LV_LL_READ(g->obj_ll, i) {
  403a5c:	4621      	mov	r1, r4
  403a5e:	4638      	mov	r0, r7
  403a60:	4b1b      	ldr	r3, [pc, #108]	; (403ad0 <lv_group_focus_obj+0xac>)
  403a62:	4798      	blx	r3
  403a64:	4604      	mov	r4, r0
  403a66:	e7f5      	b.n	403a54 <lv_group_focus_obj+0x30>
            if(g->obj_focus != NULL) {
  403a68:	68f3      	ldr	r3, [r6, #12]
  403a6a:	b18b      	cbz	r3, 403a90 <lv_group_focus_obj+0x6c>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  403a6c:	6818      	ldr	r0, [r3, #0]
  403a6e:	69c3      	ldr	r3, [r0, #28]
  403a70:	2200      	movs	r2, #0
  403a72:	2117      	movs	r1, #23
  403a74:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, NULL);
  403a76:	68f3      	ldr	r3, [r6, #12]
  403a78:	2200      	movs	r2, #0
  403a7a:	210e      	movs	r1, #14
  403a7c:	6818      	ldr	r0, [r3, #0]
  403a7e:	4b15      	ldr	r3, [pc, #84]	; (403ad4 <lv_group_focus_obj+0xb0>)
  403a80:	4798      	blx	r3
                if(res != LV_RES_OK) return;
  403a82:	2801      	cmp	r0, #1
  403a84:	d000      	beq.n	403a88 <lv_group_focus_obj+0x64>
  403a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_obj_invalidate(*g->obj_focus);
  403a88:	68f3      	ldr	r3, [r6, #12]
  403a8a:	6818      	ldr	r0, [r3, #0]
  403a8c:	4b12      	ldr	r3, [pc, #72]	; (403ad8 <lv_group_focus_obj+0xb4>)
  403a8e:	4798      	blx	r3
            g->obj_focus = i;
  403a90:	60f4      	str	r4, [r6, #12]
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
  403a92:	6820      	ldr	r0, [r4, #0]
  403a94:	69c3      	ldr	r3, [r0, #28]
  403a96:	2200      	movs	r2, #0
  403a98:	2116      	movs	r1, #22
  403a9a:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
  403a9c:	6933      	ldr	r3, [r6, #16]
  403a9e:	b10b      	cbz	r3, 403aa4 <lv_group_focus_obj+0x80>
  403aa0:	4630      	mov	r0, r6
  403aa2:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, NULL);
  403aa4:	68f3      	ldr	r3, [r6, #12]
  403aa6:	2200      	movs	r2, #0
  403aa8:	210d      	movs	r1, #13
  403aaa:	6818      	ldr	r0, [r3, #0]
  403aac:	4b09      	ldr	r3, [pc, #36]	; (403ad4 <lv_group_focus_obj+0xb0>)
  403aae:	4798      	blx	r3
                if(res != LV_RES_OK) return;
  403ab0:	2801      	cmp	r0, #1
  403ab2:	d1e8      	bne.n	403a86 <lv_group_focus_obj+0x62>
                lv_obj_invalidate(*g->obj_focus);
  403ab4:	68f3      	ldr	r3, [r6, #12]
  403ab6:	6818      	ldr	r0, [r3, #0]
  403ab8:	4b07      	ldr	r3, [pc, #28]	; (403ad8 <lv_group_focus_obj+0xb4>)
  403aba:	4798      	blx	r3
                obj_to_foreground(*g->obj_focus);
  403abc:	68f3      	ldr	r3, [r6, #12]
  403abe:	6818      	ldr	r0, [r3, #0]
  403ac0:	4b06      	ldr	r3, [pc, #24]	; (403adc <lv_group_focus_obj+0xb8>)
  403ac2:	4798      	blx	r3
  403ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403ac6:	4770      	bx	lr
  403ac8:	004039d5 	.word	0x004039d5
  403acc:	004170b9 	.word	0x004170b9
  403ad0:	004170cd 	.word	0x004170cd
  403ad4:	00405845 	.word	0x00405845
  403ad8:	00405f01 	.word	0x00405f01
  403adc:	004036c9 	.word	0x004036c9

00403ae0 <lv_group_get_editing>:
    if(!group) return false;
  403ae0:	b118      	cbz	r0, 403aea <lv_group_get_editing+0xa>
    return group->editing ? true : false;
  403ae2:	7d00      	ldrb	r0, [r0, #20]
  403ae4:	f3c0 0040 	ubfx	r0, r0, #1, #1
  403ae8:	4770      	bx	lr
    if(!group) return false;
  403aea:	2000      	movs	r0, #0
}
  403aec:	4770      	bx	lr
	...

00403af0 <indev_proc_reset_query_handler>:
 * Reset input device if a reset query has been sent to it
 * @param indev pointer to an input device
 */
static void indev_proc_reset_query_handler(lv_indev_t * indev)
{
    if(indev->proc.reset_query) {
  403af0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  403af4:	f013 0f02 	tst.w	r3, #2
  403af8:	d022      	beq.n	403b40 <indev_proc_reset_query_handler+0x50>
{
  403afa:	b410      	push	{r4}
        indev->proc.types.pointer.act_obj           = NULL;
  403afc:	2300      	movs	r3, #0
  403afe:	6343      	str	r3, [r0, #52]	; 0x34
        indev->proc.types.pointer.last_obj          = NULL;
  403b00:	6383      	str	r3, [r0, #56]	; 0x38
        indev->proc.types.pointer.drag_limit_out    = 0;
  403b02:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
        indev->proc.types.pointer.drag_in_prog      = 0;
        indev->proc.long_pr_sent                    = 0;
  403b06:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
        indev->proc.pr_timestamp                    = 0;
  403b0a:	6483      	str	r3, [r0, #72]	; 0x48
        indev->proc.longpr_rep_timestamp            = 0;
  403b0c:	64c3      	str	r3, [r0, #76]	; 0x4c
        indev->proc.types.pointer.drag_sum.x        = 0;
  403b0e:	8583      	strh	r3, [r0, #44]	; 0x2c
        indev->proc.types.pointer.drag_sum.y        = 0;
  403b10:	85c3      	strh	r3, [r0, #46]	; 0x2e
        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  403b12:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  403b16:	2403      	movs	r4, #3
  403b18:	f364 0184 	bfi	r1, r4, #2, #3
  403b1c:	f880 1046 	strb.w	r1, [r0, #70]	; 0x46
        indev->proc.types.pointer.drag_throw_vect.x = 0;
  403b20:	8603      	strh	r3, [r0, #48]	; 0x30
        indev->proc.types.pointer.drag_throw_vect.y = 0;
  403b22:	8643      	strh	r3, [r0, #50]	; 0x32
        indev->proc.types.pointer.gesture_sum.x     = 0;
  403b24:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        indev->proc.types.pointer.gesture_sum.y     = 0;
  403b28:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        indev->proc.reset_query                     = 0;
  403b2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  403b30:	f363 0241 	bfi	r2, r3, #1, #1
  403b34:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        indev_obj_act                               = NULL;
  403b38:	4a02      	ldr	r2, [pc, #8]	; (403b44 <indev_proc_reset_query_handler+0x54>)
  403b3a:	6013      	str	r3, [r2, #0]
    }
}
  403b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
  403b40:	4770      	bx	lr
  403b42:	bf00      	nop
  403b44:	2040c3f4 	.word	0x2040c3f4

00403b48 <indev_reset_check>:
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
  403b48:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
  403b4c:	f010 0002 	ands.w	r0, r0, #2
  403b50:	d002      	beq.n	403b58 <indev_reset_check+0x10>
        indev_obj_act = NULL;
  403b52:	2200      	movs	r2, #0
  403b54:	4b02      	ldr	r3, [pc, #8]	; (403b60 <indev_reset_check+0x18>)
  403b56:	601a      	str	r2, [r3, #0]
    }

    return proc->reset_query ? true : false;
}
  403b58:	3000      	adds	r0, #0
  403b5a:	bf18      	it	ne
  403b5c:	2001      	movne	r0, #1
  403b5e:	4770      	bx	lr
  403b60:	2040c3f4 	.word	0x2040c3f4

00403b64 <get_dragged_obj>:
{
  403b64:	b510      	push	{r4, lr}
    if(obj == NULL) return NULL;
  403b66:	4604      	mov	r4, r0
  403b68:	b920      	cbnz	r0, 403b74 <get_dragged_obj+0x10>
  403b6a:	e009      	b.n	403b80 <get_dragged_obj+0x1c>
        drag_obj = lv_obj_get_parent(drag_obj);
  403b6c:	4620      	mov	r0, r4
  403b6e:	4b05      	ldr	r3, [pc, #20]	; (403b84 <get_dragged_obj+0x20>)
  403b70:	4798      	blx	r3
  403b72:	4604      	mov	r4, r0
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
  403b74:	4620      	mov	r0, r4
  403b76:	4b04      	ldr	r3, [pc, #16]	; (403b88 <get_dragged_obj+0x24>)
  403b78:	4798      	blx	r3
  403b7a:	b108      	cbz	r0, 403b80 <get_dragged_obj+0x1c>
  403b7c:	2c00      	cmp	r4, #0
  403b7e:	d1f5      	bne.n	403b6c <get_dragged_obj+0x8>
}
  403b80:	4620      	mov	r0, r4
  403b82:	bd10      	pop	{r4, pc}
  403b84:	00405955 	.word	0x00405955
  403b88:	00406775 	.word	0x00406775

00403b8c <indev_drag_throw>:
    if(proc->types.pointer.drag_in_prog == 0) return;
  403b8c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
  403b90:	f013 0f02 	tst.w	r3, #2
  403b94:	d100      	bne.n	403b98 <indev_drag_throw+0xc>
  403b96:	4770      	bx	lr
{
  403b98:	b5f0      	push	{r4, r5, r6, r7, lr}
  403b9a:	b085      	sub	sp, #20
  403b9c:	4604      	mov	r4, r0
    lv_obj_t * drag_obj = get_dragged_obj(proc->types.pointer.last_obj);
  403b9e:	69c0      	ldr	r0, [r0, #28]
  403ba0:	4b64      	ldr	r3, [pc, #400]	; (403d34 <indev_drag_throw+0x1a8>)
  403ba2:	4798      	blx	r3
    if(drag_obj == NULL) return;
  403ba4:	4605      	mov	r5, r0
  403ba6:	b190      	cbz	r0, 403bce <indev_drag_throw+0x42>
    if(lv_obj_get_drag_throw(drag_obj) == false) {
  403ba8:	4b63      	ldr	r3, [pc, #396]	; (403d38 <indev_drag_throw+0x1ac>)
  403baa:	4798      	blx	r3
  403bac:	b9b8      	cbnz	r0, 403bde <indev_drag_throw+0x52>
        proc->types.pointer.drag_in_prog = 0;
  403bae:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403bb2:	f36f 0341 	bfc	r3, #1, #1
  403bb6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  403bba:	69eb      	ldr	r3, [r5, #28]
  403bbc:	4a5f      	ldr	r2, [pc, #380]	; (403d3c <indev_drag_throw+0x1b0>)
  403bbe:	6812      	ldr	r2, [r2, #0]
  403bc0:	2113      	movs	r1, #19
  403bc2:	4628      	mov	r0, r5
  403bc4:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403bc6:	4620      	mov	r0, r4
  403bc8:	4b5d      	ldr	r3, [pc, #372]	; (403d40 <indev_drag_throw+0x1b4>)
  403bca:	4798      	blx	r3
  403bcc:	b108      	cbz	r0, 403bd2 <indev_drag_throw+0x46>
}
  403bce:	b005      	add	sp, #20
  403bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  403bd2:	2200      	movs	r2, #0
  403bd4:	2109      	movs	r1, #9
  403bd6:	4628      	mov	r0, r5
  403bd8:	4b5a      	ldr	r3, [pc, #360]	; (403d44 <indev_drag_throw+0x1b8>)
  403bda:	4798      	blx	r3
        return;
  403bdc:	e7f7      	b.n	403bce <indev_drag_throw+0x42>
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
  403bde:	4628      	mov	r0, r5
  403be0:	4b59      	ldr	r3, [pc, #356]	; (403d48 <indev_drag_throw+0x1bc>)
  403be2:	4798      	blx	r3
  403be4:	4606      	mov	r6, r0
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
  403be6:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
  403bea:	4a54      	ldr	r2, [pc, #336]	; (403d3c <indev_drag_throw+0x1b0>)
  403bec:	6812      	ldr	r2, [r2, #0]
  403bee:	7d51      	ldrb	r1, [r2, #21]
  403bf0:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
  403bf4:	fb01 f103 	mul.w	r1, r1, r3
  403bf8:	4854      	ldr	r0, [pc, #336]	; (403d4c <indev_drag_throw+0x1c0>)
  403bfa:	fb80 7301 	smull	r7, r3, r0, r1
  403bfe:	17c9      	asrs	r1, r1, #31
  403c00:	ebc1 1163 	rsb	r1, r1, r3, asr #5
    proc->types.pointer.drag_throw_vect.x =
  403c04:	82a1      	strh	r1, [r4, #20]
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
  403c06:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
  403c0a:	7d53      	ldrb	r3, [r2, #21]
  403c0c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  403c10:	fb03 f301 	mul.w	r3, r3, r1
  403c14:	fb80 1003 	smull	r1, r0, r0, r3
  403c18:	17db      	asrs	r3, r3, #31
  403c1a:	ebc3 1360 	rsb	r3, r3, r0, asr #5
    proc->types.pointer.drag_throw_vect.y =
  403c1e:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
  403c20:	6963      	ldr	r3, [r4, #20]
  403c22:	2b00      	cmp	r3, #0
  403c24:	d06c      	beq.n	403d00 <indev_drag_throw+0x174>
        lv_obj_get_coords(drag_obj, &coords_ori);
  403c26:	4669      	mov	r1, sp
  403c28:	4628      	mov	r0, r5
  403c2a:	4b49      	ldr	r3, [pc, #292]	; (403d50 <indev_drag_throw+0x1c4>)
  403c2c:	4798      	blx	r3
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
  403c2e:	4628      	mov	r0, r5
  403c30:	4b48      	ldr	r3, [pc, #288]	; (403d54 <indev_drag_throw+0x1c8>)
  403c32:	4798      	blx	r3
  403c34:	8aa3      	ldrh	r3, [r4, #20]
  403c36:	fa13 f080 	uxtah	r0, r3, r0
  403c3a:	b207      	sxth	r7, r0
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
  403c3c:	4628      	mov	r0, r5
  403c3e:	4b46      	ldr	r3, [pc, #280]	; (403d58 <indev_drag_throw+0x1cc>)
  403c40:	4798      	blx	r3
  403c42:	8ae2      	ldrh	r2, [r4, #22]
  403c44:	fa12 f280 	uxtah	r2, r2, r0
  403c48:	b212      	sxth	r2, r2
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
  403c4a:	2e03      	cmp	r6, #3
  403c4c:	d03c      	beq.n	403cc8 <indev_drag_throw+0x13c>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
  403c4e:	2e01      	cmp	r6, #1
  403c50:	d03f      	beq.n	403cd2 <indev_drag_throw+0x146>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
  403c52:	2e02      	cmp	r6, #2
  403c54:	d042      	beq.n	403cdc <indev_drag_throw+0x150>
        else if(allowed_dirs == LV_DRAG_DIR_ONE) {
  403c56:	2e04      	cmp	r6, #4
  403c58:	d045      	beq.n	403ce6 <indev_drag_throw+0x15a>
        lv_obj_get_coords(drag_obj, &coord_new);
  403c5a:	a902      	add	r1, sp, #8
  403c5c:	4628      	mov	r0, r5
  403c5e:	4b3c      	ldr	r3, [pc, #240]	; (403d50 <indev_drag_throw+0x1c4>)
  403c60:	4798      	blx	r3
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
  403c62:	f9bd 2000 	ldrsh.w	r2, [sp]
  403c66:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
  403c6a:	429a      	cmp	r2, r3
  403c6c:	d003      	beq.n	403c76 <indev_drag_throw+0xea>
  403c6e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
  403c72:	2b00      	cmp	r3, #0
  403c74:	d1ab      	bne.n	403bce <indev_drag_throw+0x42>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
  403c76:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  403c7a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
  403c7e:	429a      	cmp	r2, r3
  403c80:	d003      	beq.n	403c8a <indev_drag_throw+0xfe>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
  403c82:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
  403c86:	2b00      	cmp	r3, #0
  403c88:	d1a1      	bne.n	403bce <indev_drag_throw+0x42>
            proc->types.pointer.drag_in_prog      = 0;
  403c8a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403c8e:	f36f 0341 	bfc	r3, #1, #1
  403c92:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            proc->types.pointer.vect.x            = 0;
  403c96:	2300      	movs	r3, #0
  403c98:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y            = 0;
  403c9a:	81e3      	strh	r3, [r4, #14]
            proc->types.pointer.drag_throw_vect.x = 0;
  403c9c:	82a3      	strh	r3, [r4, #20]
            proc->types.pointer.drag_throw_vect.y = 0;
  403c9e:	82e3      	strh	r3, [r4, #22]
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  403ca0:	69eb      	ldr	r3, [r5, #28]
  403ca2:	4a26      	ldr	r2, [pc, #152]	; (403d3c <indev_drag_throw+0x1b0>)
  403ca4:	6812      	ldr	r2, [r2, #0]
  403ca6:	2113      	movs	r1, #19
  403ca8:	4628      	mov	r0, r5
  403caa:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403cac:	4620      	mov	r0, r4
  403cae:	4b24      	ldr	r3, [pc, #144]	; (403d40 <indev_drag_throw+0x1b4>)
  403cb0:	4798      	blx	r3
  403cb2:	2800      	cmp	r0, #0
  403cb4:	d18b      	bne.n	403bce <indev_drag_throw+0x42>
            lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  403cb6:	2200      	movs	r2, #0
  403cb8:	2109      	movs	r1, #9
  403cba:	4628      	mov	r0, r5
  403cbc:	4b21      	ldr	r3, [pc, #132]	; (403d44 <indev_drag_throw+0x1b8>)
  403cbe:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403cc0:	4620      	mov	r0, r4
  403cc2:	4b1f      	ldr	r3, [pc, #124]	; (403d40 <indev_drag_throw+0x1b4>)
  403cc4:	4798      	blx	r3
  403cc6:	e782      	b.n	403bce <indev_drag_throw+0x42>
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
  403cc8:	4639      	mov	r1, r7
  403cca:	4628      	mov	r0, r5
  403ccc:	4b23      	ldr	r3, [pc, #140]	; (403d5c <indev_drag_throw+0x1d0>)
  403cce:	4798      	blx	r3
  403cd0:	e7c3      	b.n	403c5a <indev_drag_throw+0xce>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
  403cd2:	4639      	mov	r1, r7
  403cd4:	4628      	mov	r0, r5
  403cd6:	4b22      	ldr	r3, [pc, #136]	; (403d60 <indev_drag_throw+0x1d4>)
  403cd8:	4798      	blx	r3
  403cda:	e7be      	b.n	403c5a <indev_drag_throw+0xce>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
  403cdc:	4611      	mov	r1, r2
  403cde:	4628      	mov	r0, r5
  403ce0:	4b20      	ldr	r3, [pc, #128]	; (403d64 <indev_drag_throw+0x1d8>)
  403ce2:	4798      	blx	r3
  403ce4:	e7b9      	b.n	403c5a <indev_drag_throw+0xce>
            if(proc->types.pointer.drag_sum.x) lv_obj_set_x(drag_obj, act_x);
  403ce6:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  403cea:	b123      	cbz	r3, 403cf6 <indev_drag_throw+0x16a>
  403cec:	4639      	mov	r1, r7
  403cee:	4628      	mov	r0, r5
  403cf0:	4b1b      	ldr	r3, [pc, #108]	; (403d60 <indev_drag_throw+0x1d4>)
  403cf2:	4798      	blx	r3
  403cf4:	e7b1      	b.n	403c5a <indev_drag_throw+0xce>
            else lv_obj_set_y(drag_obj, act_y);
  403cf6:	4611      	mov	r1, r2
  403cf8:	4628      	mov	r0, r5
  403cfa:	4b1a      	ldr	r3, [pc, #104]	; (403d64 <indev_drag_throw+0x1d8>)
  403cfc:	4798      	blx	r3
  403cfe:	e7ac      	b.n	403c5a <indev_drag_throw+0xce>
        proc->types.pointer.drag_in_prog = 0;
  403d00:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403d04:	f36f 0341 	bfc	r3, #1, #1
  403d08:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  403d0c:	69eb      	ldr	r3, [r5, #28]
  403d0e:	2113      	movs	r1, #19
  403d10:	4628      	mov	r0, r5
  403d12:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403d14:	4620      	mov	r0, r4
  403d16:	4b0a      	ldr	r3, [pc, #40]	; (403d40 <indev_drag_throw+0x1b4>)
  403d18:	4798      	blx	r3
  403d1a:	2800      	cmp	r0, #0
  403d1c:	f47f af57 	bne.w	403bce <indev_drag_throw+0x42>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  403d20:	2200      	movs	r2, #0
  403d22:	2109      	movs	r1, #9
  403d24:	4628      	mov	r0, r5
  403d26:	4b07      	ldr	r3, [pc, #28]	; (403d44 <indev_drag_throw+0x1b8>)
  403d28:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403d2a:	4620      	mov	r0, r4
  403d2c:	4b04      	ldr	r3, [pc, #16]	; (403d40 <indev_drag_throw+0x1b4>)
  403d2e:	4798      	blx	r3
  403d30:	e74d      	b.n	403bce <indev_drag_throw+0x42>
  403d32:	bf00      	nop
  403d34:	00403b65 	.word	0x00403b65
  403d38:	00406749 	.word	0x00406749
  403d3c:	2040c3f0 	.word	0x2040c3f0
  403d40:	00403b49 	.word	0x00403b49
  403d44:	00405845 	.word	0x00405845
  403d48:	0040671d 	.word	0x0040671d
  403d4c:	51eb851f 	.word	0x51eb851f
  403d50:	00405a69 	.word	0x00405a69
  403d54:	00405aa9 	.word	0x00405aa9
  403d58:	00405ae9 	.word	0x00405ae9
  403d5c:	00405fe5 	.word	0x00405fe5
  403d60:	0040609d 	.word	0x0040609d
  403d64:	004060dd 	.word	0x004060dd

00403d68 <indev_proc_release>:
{
  403d68:	b538      	push	{r3, r4, r5, lr}
  403d6a:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) {
  403d6c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  403d70:	f013 0f08 	tst.w	r3, #8
  403d74:	d00a      	beq.n	403d8c <indev_proc_release+0x24>
        proc->types.pointer.act_obj  = NULL;
  403d76:	2300      	movs	r3, #0
  403d78:	6183      	str	r3, [r0, #24]
        proc->types.pointer.last_obj = NULL;
  403d7a:	61c3      	str	r3, [r0, #28]
        proc->pr_timestamp           = 0;
  403d7c:	62c3      	str	r3, [r0, #44]	; 0x2c
        proc->longpr_rep_timestamp   = 0;
  403d7e:	6303      	str	r3, [r0, #48]	; 0x30
        proc->wait_until_release     = 0;
  403d80:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
  403d84:	f363 02c3 	bfi	r2, r3, #3, #1
  403d88:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    indev_obj_act = proc->types.pointer.act_obj;
  403d8c:	69a0      	ldr	r0, [r4, #24]
  403d8e:	4b59      	ldr	r3, [pc, #356]	; (403ef4 <indev_proc_release+0x18c>)
  403d90:	6018      	str	r0, [r3, #0]
    if(indev_obj_act) {
  403d92:	2800      	cmp	r0, #0
  403d94:	f000 8093 	beq.w	403ebe <indev_proc_release+0x156>
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
  403d98:	2110      	movs	r1, #16
  403d9a:	4b57      	ldr	r3, [pc, #348]	; (403ef8 <indev_proc_release+0x190>)
  403d9c:	4798      	blx	r3
  403d9e:	2800      	cmp	r0, #0
  403da0:	d038      	beq.n	403e14 <indev_proc_release+0xac>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
  403da2:	4b54      	ldr	r3, [pc, #336]	; (403ef4 <indev_proc_release+0x18c>)
  403da4:	6818      	ldr	r0, [r3, #0]
  403da6:	69c3      	ldr	r3, [r0, #28]
  403da8:	4a54      	ldr	r2, [pc, #336]	; (403efc <indev_proc_release+0x194>)
  403daa:	6812      	ldr	r2, [r2, #0]
  403dac:	210e      	movs	r1, #14
  403dae:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403db0:	4620      	mov	r0, r4
  403db2:	4b53      	ldr	r3, [pc, #332]	; (403f00 <indev_proc_release+0x198>)
  403db4:	4798      	blx	r3
  403db6:	2800      	cmp	r0, #0
  403db8:	f040 8088 	bne.w	403ecc <indev_proc_release+0x164>
            if(proc->types.pointer.drag_in_prog == 0) {
  403dbc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403dc0:	f013 0f02 	tst.w	r3, #2
  403dc4:	d11a      	bne.n	403dfc <indev_proc_release+0x94>
                if(proc->long_pr_sent == 0) {
  403dc6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  403dca:	f013 0f01 	tst.w	r3, #1
  403dce:	d10a      	bne.n	403de6 <indev_proc_release+0x7e>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  403dd0:	2200      	movs	r2, #0
  403dd2:	2103      	movs	r1, #3
  403dd4:	4b47      	ldr	r3, [pc, #284]	; (403ef4 <indev_proc_release+0x18c>)
  403dd6:	6818      	ldr	r0, [r3, #0]
  403dd8:	4b4a      	ldr	r3, [pc, #296]	; (403f04 <indev_proc_release+0x19c>)
  403dda:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403ddc:	4620      	mov	r0, r4
  403dde:	4b48      	ldr	r3, [pc, #288]	; (403f00 <indev_proc_release+0x198>)
  403de0:	4798      	blx	r3
  403de2:	2800      	cmp	r0, #0
  403de4:	d172      	bne.n	403ecc <indev_proc_release+0x164>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  403de6:	2200      	movs	r2, #0
  403de8:	2106      	movs	r1, #6
  403dea:	4b42      	ldr	r3, [pc, #264]	; (403ef4 <indev_proc_release+0x18c>)
  403dec:	6818      	ldr	r0, [r3, #0]
  403dee:	4b45      	ldr	r3, [pc, #276]	; (403f04 <indev_proc_release+0x19c>)
  403df0:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403df2:	4620      	mov	r0, r4
  403df4:	4b42      	ldr	r3, [pc, #264]	; (403f00 <indev_proc_release+0x198>)
  403df6:	4798      	blx	r3
  403df8:	2800      	cmp	r0, #0
  403dfa:	d167      	bne.n	403ecc <indev_proc_release+0x164>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  403dfc:	2200      	movs	r2, #0
  403dfe:	2107      	movs	r1, #7
  403e00:	4b3c      	ldr	r3, [pc, #240]	; (403ef4 <indev_proc_release+0x18c>)
  403e02:	6818      	ldr	r0, [r3, #0]
  403e04:	4b3f      	ldr	r3, [pc, #252]	; (403f04 <indev_proc_release+0x19c>)
  403e06:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403e08:	4620      	mov	r0, r4
  403e0a:	4b3d      	ldr	r3, [pc, #244]	; (403f00 <indev_proc_release+0x198>)
  403e0c:	4798      	blx	r3
  403e0e:	2800      	cmp	r0, #0
  403e10:	d030      	beq.n	403e74 <indev_proc_release+0x10c>
  403e12:	bd38      	pop	{r3, r4, r5, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
  403e14:	4b37      	ldr	r3, [pc, #220]	; (403ef4 <indev_proc_release+0x18c>)
  403e16:	6818      	ldr	r0, [r3, #0]
  403e18:	69c3      	ldr	r3, [r0, #28]
  403e1a:	4a38      	ldr	r2, [pc, #224]	; (403efc <indev_proc_release+0x194>)
  403e1c:	6812      	ldr	r2, [r2, #0]
  403e1e:	210e      	movs	r1, #14
  403e20:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403e22:	4620      	mov	r0, r4
  403e24:	4b36      	ldr	r3, [pc, #216]	; (403f00 <indev_proc_release+0x198>)
  403e26:	4798      	blx	r3
  403e28:	2800      	cmp	r0, #0
  403e2a:	d14f      	bne.n	403ecc <indev_proc_release+0x164>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
  403e2c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  403e30:	f013 0f01 	tst.w	r3, #1
  403e34:	d104      	bne.n	403e40 <indev_proc_release+0xd8>
  403e36:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403e3a:	f013 0f02 	tst.w	r3, #2
  403e3e:	d046      	beq.n	403ece <indev_proc_release+0x166>
            if(proc->types.pointer.drag_in_prog == 0) {
  403e40:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403e44:	f013 0f02 	tst.w	r3, #2
  403e48:	d10a      	bne.n	403e60 <indev_proc_release+0xf8>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  403e4a:	2200      	movs	r2, #0
  403e4c:	2106      	movs	r1, #6
  403e4e:	4b29      	ldr	r3, [pc, #164]	; (403ef4 <indev_proc_release+0x18c>)
  403e50:	6818      	ldr	r0, [r3, #0]
  403e52:	4b2c      	ldr	r3, [pc, #176]	; (403f04 <indev_proc_release+0x19c>)
  403e54:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403e56:	4620      	mov	r0, r4
  403e58:	4b29      	ldr	r3, [pc, #164]	; (403f00 <indev_proc_release+0x198>)
  403e5a:	4798      	blx	r3
  403e5c:	2800      	cmp	r0, #0
  403e5e:	d135      	bne.n	403ecc <indev_proc_release+0x164>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  403e60:	2200      	movs	r2, #0
  403e62:	2107      	movs	r1, #7
  403e64:	4b23      	ldr	r3, [pc, #140]	; (403ef4 <indev_proc_release+0x18c>)
  403e66:	6818      	ldr	r0, [r3, #0]
  403e68:	4b26      	ldr	r3, [pc, #152]	; (403f04 <indev_proc_release+0x19c>)
  403e6a:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403e6c:	4620      	mov	r0, r4
  403e6e:	4b24      	ldr	r3, [pc, #144]	; (403f00 <indev_proc_release+0x198>)
  403e70:	4798      	blx	r3
  403e72:	bb58      	cbnz	r0, 403ecc <indev_proc_release+0x164>
        lv_obj_t * drag_obj = get_dragged_obj(indev_obj_act);
  403e74:	4b1f      	ldr	r3, [pc, #124]	; (403ef4 <indev_proc_release+0x18c>)
  403e76:	6818      	ldr	r0, [r3, #0]
  403e78:	4b23      	ldr	r3, [pc, #140]	; (403f08 <indev_proc_release+0x1a0>)
  403e7a:	4798      	blx	r3
        if(drag_obj) {
  403e7c:	4605      	mov	r5, r0
  403e7e:	b1d0      	cbz	r0, 403eb6 <indev_proc_release+0x14e>
            if(lv_obj_get_drag_throw(drag_obj) && proc->types.pointer.drag_in_prog) {
  403e80:	4b22      	ldr	r3, [pc, #136]	; (403f0c <indev_proc_release+0x1a4>)
  403e82:	4798      	blx	r3
  403e84:	b1b8      	cbz	r0, 403eb6 <indev_proc_release+0x14e>
  403e86:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403e8a:	f013 0f02 	tst.w	r3, #2
  403e8e:	d012      	beq.n	403eb6 <indev_proc_release+0x14e>
                if(drag_obj->signal_cb) drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_THROW_BEGIN, NULL);
  403e90:	69eb      	ldr	r3, [r5, #28]
  403e92:	b11b      	cbz	r3, 403e9c <indev_proc_release+0x134>
  403e94:	2200      	movs	r2, #0
  403e96:	2112      	movs	r1, #18
  403e98:	4628      	mov	r0, r5
  403e9a:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403e9c:	4620      	mov	r0, r4
  403e9e:	4b18      	ldr	r3, [pc, #96]	; (403f00 <indev_proc_release+0x198>)
  403ea0:	4798      	blx	r3
  403ea2:	b998      	cbnz	r0, 403ecc <indev_proc_release+0x164>
                lv_event_send(drag_obj, LV_EVENT_DRAG_THROW_BEGIN, NULL);
  403ea4:	2200      	movs	r2, #0
  403ea6:	210a      	movs	r1, #10
  403ea8:	4628      	mov	r0, r5
  403eaa:	4b16      	ldr	r3, [pc, #88]	; (403f04 <indev_proc_release+0x19c>)
  403eac:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403eae:	4620      	mov	r0, r4
  403eb0:	4b13      	ldr	r3, [pc, #76]	; (403f00 <indev_proc_release+0x198>)
  403eb2:	4798      	blx	r3
  403eb4:	b950      	cbnz	r0, 403ecc <indev_proc_release+0x164>
        proc->types.pointer.act_obj = NULL;
  403eb6:	2300      	movs	r3, #0
  403eb8:	61a3      	str	r3, [r4, #24]
        proc->pr_timestamp          = 0;
  403eba:	62e3      	str	r3, [r4, #44]	; 0x2c
        proc->longpr_rep_timestamp  = 0;
  403ebc:	6323      	str	r3, [r4, #48]	; 0x30
    if(proc->types.pointer.last_obj != NULL && proc->reset_query == 0) {
  403ebe:	69e3      	ldr	r3, [r4, #28]
  403ec0:	b123      	cbz	r3, 403ecc <indev_proc_release+0x164>
  403ec2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  403ec6:	f013 0f02 	tst.w	r3, #2
  403eca:	d00c      	beq.n	403ee6 <indev_proc_release+0x17e>
  403ecc:	bd38      	pop	{r3, r4, r5, pc}
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  403ece:	2200      	movs	r2, #0
  403ed0:	2103      	movs	r1, #3
  403ed2:	4b08      	ldr	r3, [pc, #32]	; (403ef4 <indev_proc_release+0x18c>)
  403ed4:	6818      	ldr	r0, [r3, #0]
  403ed6:	4b0b      	ldr	r3, [pc, #44]	; (403f04 <indev_proc_release+0x19c>)
  403ed8:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403eda:	4620      	mov	r0, r4
  403edc:	4b08      	ldr	r3, [pc, #32]	; (403f00 <indev_proc_release+0x198>)
  403ede:	4798      	blx	r3
  403ee0:	2800      	cmp	r0, #0
  403ee2:	d0ad      	beq.n	403e40 <indev_proc_release+0xd8>
  403ee4:	e7f2      	b.n	403ecc <indev_proc_release+0x164>
        indev_drag_throw(proc);
  403ee6:	4620      	mov	r0, r4
  403ee8:	4b09      	ldr	r3, [pc, #36]	; (403f10 <indev_proc_release+0x1a8>)
  403eea:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403eec:	4620      	mov	r0, r4
  403eee:	4b04      	ldr	r3, [pc, #16]	; (403f00 <indev_proc_release+0x198>)
  403ef0:	4798      	blx	r3
  403ef2:	e7eb      	b.n	403ecc <indev_proc_release+0x164>
  403ef4:	2040c3f4 	.word	0x2040c3f4
  403ef8:	00406d55 	.word	0x00406d55
  403efc:	2040c3f0 	.word	0x2040c3f0
  403f00:	00403b49 	.word	0x00403b49
  403f04:	00405845 	.word	0x00405845
  403f08:	00403b65 	.word	0x00403b65
  403f0c:	00406749 	.word	0x00406749
  403f10:	00403b8d 	.word	0x00403b8d

00403f14 <indev_click_focus>:
{
  403f14:	b570      	push	{r4, r5, r6, lr}
  403f16:	4604      	mov	r4, r0
    lv_obj_t * obj_to_focus = lv_obj_get_focused_obj(indev_obj_act);
  403f18:	4d58      	ldr	r5, [pc, #352]	; (40407c <indev_click_focus+0x168>)
  403f1a:	6828      	ldr	r0, [r5, #0]
  403f1c:	4b58      	ldr	r3, [pc, #352]	; (404080 <indev_click_focus+0x16c>)
  403f1e:	4798      	blx	r3
  403f20:	4606      	mov	r6, r0
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
  403f22:	2120      	movs	r1, #32
  403f24:	6828      	ldr	r0, [r5, #0]
  403f26:	4b57      	ldr	r3, [pc, #348]	; (404084 <indev_click_focus+0x170>)
  403f28:	4798      	blx	r3
  403f2a:	b9e8      	cbnz	r0, 403f68 <indev_click_focus+0x54>
       proc->types.pointer.last_pressed != obj_to_focus) {
  403f2c:	6a23      	ldr	r3, [r4, #32]
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
  403f2e:	429e      	cmp	r6, r3
  403f30:	d01a      	beq.n	403f68 <indev_click_focus+0x54>
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
  403f32:	4630      	mov	r0, r6
  403f34:	4b54      	ldr	r3, [pc, #336]	; (404088 <indev_click_focus+0x174>)
  403f36:	4798      	blx	r3
  403f38:	4605      	mov	r5, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
  403f3a:	6a20      	ldr	r0, [r4, #32]
  403f3c:	b1a8      	cbz	r0, 403f6a <indev_click_focus+0x56>
  403f3e:	4b52      	ldr	r3, [pc, #328]	; (404088 <indev_click_focus+0x174>)
  403f40:	4798      	blx	r3
  403f42:	4603      	mov	r3, r0
        if(g_act == g_prev) {
  403f44:	42ab      	cmp	r3, r5
  403f46:	d012      	beq.n	403f6e <indev_click_focus+0x5a>
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
  403f48:	2b00      	cmp	r3, #0
  403f4a:	d044      	beq.n	403fd6 <indev_click_focus+0xc2>
                if(proc->types.pointer.last_pressed) {
  403f4c:	6a20      	ldr	r0, [r4, #32]
  403f4e:	2800      	cmp	r0, #0
  403f50:	d074      	beq.n	40403c <indev_click_focus+0x128>
                    if(g_prev == NULL) {
  403f52:	2b00      	cmp	r3, #0
  403f54:	d055      	beq.n	404002 <indev_click_focus+0xee>
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_LEAVE, NULL);
  403f56:	2200      	movs	r2, #0
  403f58:	2115      	movs	r1, #21
  403f5a:	4b4c      	ldr	r3, [pc, #304]	; (40408c <indev_click_focus+0x178>)
  403f5c:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403f5e:	4620      	mov	r0, r4
  403f60:	4b4b      	ldr	r3, [pc, #300]	; (404090 <indev_click_focus+0x17c>)
  403f62:	4798      	blx	r3
  403f64:	2800      	cmp	r0, #0
  403f66:	d05f      	beq.n	404028 <indev_click_focus+0x114>
  403f68:	bd70      	pop	{r4, r5, r6, pc}
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
  403f6a:	2300      	movs	r3, #0
  403f6c:	e7ea      	b.n	403f44 <indev_click_focus+0x30>
            if(g_act) {
  403f6e:	b145      	cbz	r5, 403f82 <indev_click_focus+0x6e>
                lv_group_focus_obj(obj_to_focus);
  403f70:	4630      	mov	r0, r6
  403f72:	4b48      	ldr	r3, [pc, #288]	; (404094 <indev_click_focus+0x180>)
  403f74:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403f76:	4620      	mov	r0, r4
  403f78:	4b45      	ldr	r3, [pc, #276]	; (404090 <indev_click_focus+0x17c>)
  403f7a:	4798      	blx	r3
  403f7c:	2800      	cmp	r0, #0
  403f7e:	d065      	beq.n	40404c <indev_click_focus+0x138>
  403f80:	bd70      	pop	{r4, r5, r6, pc}
                if(proc->types.pointer.last_pressed) {
  403f82:	6a20      	ldr	r0, [r4, #32]
  403f84:	b190      	cbz	r0, 403fac <indev_click_focus+0x98>
                    lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  403f86:	2200      	movs	r2, #0
  403f88:	2117      	movs	r1, #23
  403f8a:	4b40      	ldr	r3, [pc, #256]	; (40408c <indev_click_focus+0x178>)
  403f8c:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403f8e:	4620      	mov	r0, r4
  403f90:	4b3f      	ldr	r3, [pc, #252]	; (404090 <indev_click_focus+0x17c>)
  403f92:	4798      	blx	r3
  403f94:	2800      	cmp	r0, #0
  403f96:	d1e7      	bne.n	403f68 <indev_click_focus+0x54>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  403f98:	2200      	movs	r2, #0
  403f9a:	210e      	movs	r1, #14
  403f9c:	6a20      	ldr	r0, [r4, #32]
  403f9e:	4b3e      	ldr	r3, [pc, #248]	; (404098 <indev_click_focus+0x184>)
  403fa0:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403fa2:	4620      	mov	r0, r4
  403fa4:	4b3a      	ldr	r3, [pc, #232]	; (404090 <indev_click_focus+0x17c>)
  403fa6:	4798      	blx	r3
  403fa8:	2800      	cmp	r0, #0
  403faa:	d1dd      	bne.n	403f68 <indev_click_focus+0x54>
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
  403fac:	2200      	movs	r2, #0
  403fae:	2116      	movs	r1, #22
  403fb0:	4630      	mov	r0, r6
  403fb2:	4b36      	ldr	r3, [pc, #216]	; (40408c <indev_click_focus+0x178>)
  403fb4:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403fb6:	4620      	mov	r0, r4
  403fb8:	4b35      	ldr	r3, [pc, #212]	; (404090 <indev_click_focus+0x17c>)
  403fba:	4798      	blx	r3
  403fbc:	2800      	cmp	r0, #0
  403fbe:	d1d3      	bne.n	403f68 <indev_click_focus+0x54>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
  403fc0:	2200      	movs	r2, #0
  403fc2:	210d      	movs	r1, #13
  403fc4:	4630      	mov	r0, r6
  403fc6:	4b34      	ldr	r3, [pc, #208]	; (404098 <indev_click_focus+0x184>)
  403fc8:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403fca:	4620      	mov	r0, r4
  403fcc:	4b30      	ldr	r3, [pc, #192]	; (404090 <indev_click_focus+0x17c>)
  403fce:	4798      	blx	r3
  403fd0:	2800      	cmp	r0, #0
  403fd2:	d03b      	beq.n	40404c <indev_click_focus+0x138>
  403fd4:	bd70      	pop	{r4, r5, r6, pc}
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
  403fd6:	6a20      	ldr	r0, [r4, #32]
  403fd8:	2800      	cmp	r0, #0
  403fda:	d0b7      	beq.n	403f4c <indev_click_focus+0x38>
                lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  403fdc:	2200      	movs	r2, #0
  403fde:	2117      	movs	r1, #23
  403fe0:	4b2a      	ldr	r3, [pc, #168]	; (40408c <indev_click_focus+0x178>)
  403fe2:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403fe4:	4620      	mov	r0, r4
  403fe6:	4b2a      	ldr	r3, [pc, #168]	; (404090 <indev_click_focus+0x17c>)
  403fe8:	4798      	blx	r3
  403fea:	2800      	cmp	r0, #0
  403fec:	d1bc      	bne.n	403f68 <indev_click_focus+0x54>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  403fee:	2200      	movs	r2, #0
  403ff0:	210e      	movs	r1, #14
  403ff2:	6a20      	ldr	r0, [r4, #32]
  403ff4:	4b28      	ldr	r3, [pc, #160]	; (404098 <indev_click_focus+0x184>)
  403ff6:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403ff8:	4620      	mov	r0, r4
  403ffa:	4b25      	ldr	r3, [pc, #148]	; (404090 <indev_click_focus+0x17c>)
  403ffc:	4798      	blx	r3
  403ffe:	b1e8      	cbz	r0, 40403c <indev_click_focus+0x128>
  404000:	bd70      	pop	{r4, r5, r6, pc}
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  404002:	2200      	movs	r2, #0
  404004:	2117      	movs	r1, #23
  404006:	4b21      	ldr	r3, [pc, #132]	; (40408c <indev_click_focus+0x178>)
  404008:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  40400a:	4620      	mov	r0, r4
  40400c:	4b20      	ldr	r3, [pc, #128]	; (404090 <indev_click_focus+0x17c>)
  40400e:	4798      	blx	r3
  404010:	2800      	cmp	r0, #0
  404012:	d1a9      	bne.n	403f68 <indev_click_focus+0x54>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  404014:	2200      	movs	r2, #0
  404016:	210e      	movs	r1, #14
  404018:	6a20      	ldr	r0, [r4, #32]
  40401a:	4b1f      	ldr	r3, [pc, #124]	; (404098 <indev_click_focus+0x184>)
  40401c:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  40401e:	4620      	mov	r0, r4
  404020:	4b1b      	ldr	r3, [pc, #108]	; (404090 <indev_click_focus+0x17c>)
  404022:	4798      	blx	r3
  404024:	b150      	cbz	r0, 40403c <indev_click_focus+0x128>
  404026:	bd70      	pop	{r4, r5, r6, pc}
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, NULL);
  404028:	2200      	movs	r2, #0
  40402a:	210f      	movs	r1, #15
  40402c:	6a20      	ldr	r0, [r4, #32]
  40402e:	4b1a      	ldr	r3, [pc, #104]	; (404098 <indev_click_focus+0x184>)
  404030:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  404032:	4620      	mov	r0, r4
  404034:	4b16      	ldr	r3, [pc, #88]	; (404090 <indev_click_focus+0x17c>)
  404036:	4798      	blx	r3
  404038:	2800      	cmp	r0, #0
  40403a:	d195      	bne.n	403f68 <indev_click_focus+0x54>
            if(g_act) {
  40403c:	b14d      	cbz	r5, 404052 <indev_click_focus+0x13e>
                lv_group_focus_obj(obj_to_focus);
  40403e:	4630      	mov	r0, r6
  404040:	4b14      	ldr	r3, [pc, #80]	; (404094 <indev_click_focus+0x180>)
  404042:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404044:	4620      	mov	r0, r4
  404046:	4b12      	ldr	r3, [pc, #72]	; (404090 <indev_click_focus+0x17c>)
  404048:	4798      	blx	r3
  40404a:	b908      	cbnz	r0, 404050 <indev_click_focus+0x13c>
        proc->types.pointer.last_pressed = obj_to_focus;
  40404c:	6226      	str	r6, [r4, #32]
  40404e:	e78b      	b.n	403f68 <indev_click_focus+0x54>
  404050:	bd70      	pop	{r4, r5, r6, pc}
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
  404052:	2200      	movs	r2, #0
  404054:	2116      	movs	r1, #22
  404056:	4630      	mov	r0, r6
  404058:	4b0c      	ldr	r3, [pc, #48]	; (40408c <indev_click_focus+0x178>)
  40405a:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  40405c:	4620      	mov	r0, r4
  40405e:	4b0c      	ldr	r3, [pc, #48]	; (404090 <indev_click_focus+0x17c>)
  404060:	4798      	blx	r3
  404062:	2800      	cmp	r0, #0
  404064:	d180      	bne.n	403f68 <indev_click_focus+0x54>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
  404066:	2200      	movs	r2, #0
  404068:	210d      	movs	r1, #13
  40406a:	4630      	mov	r0, r6
  40406c:	4b0a      	ldr	r3, [pc, #40]	; (404098 <indev_click_focus+0x184>)
  40406e:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404070:	4620      	mov	r0, r4
  404072:	4b07      	ldr	r3, [pc, #28]	; (404090 <indev_click_focus+0x17c>)
  404074:	4798      	blx	r3
  404076:	2800      	cmp	r0, #0
  404078:	d0e8      	beq.n	40404c <indev_click_focus+0x138>
  40407a:	e775      	b.n	403f68 <indev_click_focus+0x54>
  40407c:	2040c3f4 	.word	0x2040c3f4
  404080:	00409199 	.word	0x00409199
  404084:	00406d55 	.word	0x00406d55
  404088:	00408025 	.word	0x00408025
  40408c:	004058ad 	.word	0x004058ad
  404090:	00403b49 	.word	0x00403b49
  404094:	00403a25 	.word	0x00403a25
  404098:	00405845 	.word	0x00405845

0040409c <indev_drag>:
{
  40409c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4040a0:	b083      	sub	sp, #12
  4040a2:	4604      	mov	r4, r0
    lv_obj_t * drag_obj    = get_dragged_obj(proc->types.pointer.act_obj);
  4040a4:	6980      	ldr	r0, [r0, #24]
  4040a6:	4bb3      	ldr	r3, [pc, #716]	; (404374 <indev_drag+0x2d8>)
  4040a8:	4798      	blx	r3
    if(drag_obj == NULL) return;
  4040aa:	b120      	cbz	r0, 4040b6 <indev_drag+0x1a>
  4040ac:	4605      	mov	r5, r0
    if(lv_obj_get_drag(drag_obj) == false) return;
  4040ae:	4bb2      	ldr	r3, [pc, #712]	; (404378 <indev_drag+0x2dc>)
  4040b0:	4798      	blx	r3
  4040b2:	4680      	mov	r8, r0
  4040b4:	b910      	cbnz	r0, 4040bc <indev_drag+0x20>
}
  4040b6:	b003      	add	sp, #12
  4040b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
  4040bc:	4628      	mov	r0, r5
  4040be:	4baf      	ldr	r3, [pc, #700]	; (40437c <indev_drag+0x2e0>)
  4040c0:	4798      	blx	r3
  4040c2:	4606      	mov	r6, r0
    if(proc->types.pointer.drag_limit_out == 0) {
  4040c4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4040c8:	f013 0f01 	tst.w	r3, #1
  4040cc:	d142      	bne.n	404154 <indev_drag+0xb8>
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
  4040ce:	89a3      	ldrh	r3, [r4, #12]
  4040d0:	8a22      	ldrh	r2, [r4, #16]
  4040d2:	4413      	add	r3, r2
  4040d4:	b21b      	sxth	r3, r3
  4040d6:	8223      	strh	r3, [r4, #16]
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
  4040d8:	89e2      	ldrh	r2, [r4, #14]
  4040da:	8a61      	ldrh	r1, [r4, #18]
  4040dc:	440a      	add	r2, r1
  4040de:	b211      	sxth	r1, r2
  4040e0:	8261      	strh	r1, [r4, #18]
        if(allowed_dirs == LV_DRAG_DIR_HOR || allowed_dirs == LV_DRAG_DIR_BOTH) {
  4040e2:	2803      	cmp	r0, #3
  4040e4:	bf18      	it	ne
  4040e6:	2801      	cmpne	r0, #1
  4040e8:	bf0c      	ite	eq
  4040ea:	2001      	moveq	r0, #1
  4040ec:	2000      	movne	r0, #0
        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
  4040ee:	1eb2      	subs	r2, r6, #2
  4040f0:	b2d2      	uxtb	r2, r2
  4040f2:	2a01      	cmp	r2, #1
  4040f4:	d91e      	bls.n	404134 <indev_drag+0x98>
        bool ver_en = false;
  4040f6:	2700      	movs	r7, #0
        if(allowed_dirs == LV_DRAG_DIR_ONE) {
  4040f8:	2e04      	cmp	r6, #4
  4040fa:	d01d      	beq.n	404138 <indev_drag+0x9c>
        if((hor_en && LV_MATH_ABS(proc->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
  4040fc:	b138      	cbz	r0, 40410e <indev_drag+0x72>
  4040fe:	2b00      	cmp	r3, #0
  404100:	bfb8      	it	lt
  404102:	425b      	neglt	r3, r3
  404104:	4a9e      	ldr	r2, [pc, #632]	; (404380 <indev_drag+0x2e4>)
  404106:	6812      	ldr	r2, [r2, #0]
  404108:	7d12      	ldrb	r2, [r2, #20]
  40410a:	4293      	cmp	r3, r2
  40410c:	da0a      	bge.n	404124 <indev_drag+0x88>
  40410e:	b317      	cbz	r7, 404156 <indev_drag+0xba>
           (ver_en && LV_MATH_ABS(proc->types.pointer.drag_sum.y) >= indev_act->driver.drag_limit)) {
  404110:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
  404114:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
  404118:	4b99      	ldr	r3, [pc, #612]	; (404380 <indev_drag+0x2e4>)
  40411a:	681b      	ldr	r3, [r3, #0]
  40411c:	7d1b      	ldrb	r3, [r3, #20]
  40411e:	429a      	cmp	r2, r3
  404120:	f2c0 808d 	blt.w	40423e <indev_drag+0x1a2>
            proc->types.pointer.drag_limit_out = 1;
  404124:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  404128:	f043 0301 	orr.w	r3, r3, #1
  40412c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            drag_just_started                   = true;
  404130:	4647      	mov	r7, r8
  404132:	e010      	b.n	404156 <indev_drag+0xba>
            ver_en = true;
  404134:	4647      	mov	r7, r8
  404136:	e7df      	b.n	4040f8 <indev_drag+0x5c>
            if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
  404138:	ea83 7ee3 	eor.w	lr, r3, r3, asr #31
  40413c:	ebae 7ee3 	sub.w	lr, lr, r3, asr #31
  404140:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
  404144:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
  404148:	4596      	cmp	lr, r2
  40414a:	dd01      	ble.n	404150 <indev_drag+0xb4>
                hor_en = true;
  40414c:	4640      	mov	r0, r8
  40414e:	e7d5      	b.n	4040fc <indev_drag+0x60>
                ver_en = true;
  404150:	4647      	mov	r7, r8
  404152:	e7d3      	b.n	4040fc <indev_drag+0x60>
    bool drag_just_started = false;
  404154:	2700      	movs	r7, #0
    if(proc->types.pointer.drag_limit_out != 0) {
  404156:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40415a:	f013 0f01 	tst.w	r3, #1
  40415e:	d0aa      	beq.n	4040b6 <indev_drag+0x1a>
        if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
  404160:	68e3      	ldr	r3, [r4, #12]
  404162:	2b00      	cmp	r3, #0
  404164:	d0a7      	beq.n	4040b6 <indev_drag+0x1a>
            lv_coord_t prev_x     = drag_obj->coords.x1;
  404166:	f9b5 a010 	ldrsh.w	sl, [r5, #16]
            lv_coord_t prev_y     = drag_obj->coords.y1;
  40416a:	f9b5 b012 	ldrsh.w	fp, [r5, #18]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
  40416e:	4628      	mov	r0, r5
  404170:	f8df 8234 	ldr.w	r8, [pc, #564]	; 4043a8 <indev_drag+0x30c>
  404174:	47c0      	blx	r8
  404176:	4b83      	ldr	r3, [pc, #524]	; (404384 <indev_drag+0x2e8>)
  404178:	4798      	blx	r3
  40417a:	9000      	str	r0, [sp, #0]
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
  40417c:	4628      	mov	r0, r5
  40417e:	47c0      	blx	r8
  404180:	4b81      	ldr	r3, [pc, #516]	; (404388 <indev_drag+0x2ec>)
  404182:	4798      	blx	r3
  404184:	9001      	str	r0, [sp, #4]
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
  404186:	4628      	mov	r0, r5
  404188:	4b80      	ldr	r3, [pc, #512]	; (40438c <indev_drag+0x2f0>)
  40418a:	4798      	blx	r3
  40418c:	4680      	mov	r8, r0
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
  40418e:	4628      	mov	r0, r5
  404190:	4b7f      	ldr	r3, [pc, #508]	; (404390 <indev_drag+0x2f4>)
  404192:	4798      	blx	r3
  404194:	4681      	mov	r9, r0
            if(allowed_dirs == LV_DRAG_DIR_BOTH) {
  404196:	2e03      	cmp	r6, #3
  404198:	d053      	beq.n	404242 <indev_drag+0x1a6>
            else if(allowed_dirs == LV_DRAG_DIR_HOR) {
  40419a:	2e01      	cmp	r6, #1
  40419c:	d063      	beq.n	404266 <indev_drag+0x1ca>
            else if(allowed_dirs == LV_DRAG_DIR_VER) {
  40419e:	2e02      	cmp	r6, #2
  4041a0:	d071      	beq.n	404286 <indev_drag+0x1ea>
            else if(allowed_dirs == LV_DRAG_DIR_ONE) {
  4041a2:	2e04      	cmp	r6, #4
  4041a4:	d07f      	beq.n	4042a6 <indev_drag+0x20a>
            if(allowed_dirs == LV_DRAG_DIR_HOR ||
  4041a6:	2e03      	cmp	r6, #3
  4041a8:	bf18      	it	ne
  4041aa:	2e01      	cmpne	r6, #1
  4041ac:	d00d      	beq.n	4041ca <indev_drag+0x12e>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
  4041ae:	2e04      	cmp	r6, #4
  4041b0:	d10f      	bne.n	4041d2 <indev_drag+0x136>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
  4041b2:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  4041b6:	2a00      	cmp	r2, #0
  4041b8:	bfb8      	it	lt
  4041ba:	4252      	neglt	r2, r2
  4041bc:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  4041c0:	2b00      	cmp	r3, #0
  4041c2:	bfb8      	it	lt
  4041c4:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
  4041c6:	429a      	cmp	r2, r3
  4041c8:	dd03      	ble.n	4041d2 <indev_drag+0x136>
                act_x += proc->types.pointer.vect.x;
  4041ca:	89a3      	ldrh	r3, [r4, #12]
  4041cc:	4498      	add	r8, r3
  4041ce:	fa0f f888 	sxth.w	r8, r8
            if(allowed_dirs == LV_DRAG_DIR_VER ||
  4041d2:	1eb3      	subs	r3, r6, #2
  4041d4:	b2db      	uxtb	r3, r3
  4041d6:	2b01      	cmp	r3, #1
  4041d8:	f240 809f 	bls.w	40431a <indev_drag+0x27e>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
  4041dc:	2e04      	cmp	r6, #4
  4041de:	f000 808f 	beq.w	404300 <indev_drag+0x264>
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
  4041e2:	4b67      	ldr	r3, [pc, #412]	; (404380 <indev_drag+0x2e4>)
  4041e4:	681b      	ldr	r3, [r3, #0]
            uint16_t inv_buf_size =
  4041e6:	68d8      	ldr	r0, [r3, #12]
  4041e8:	4b6a      	ldr	r3, [pc, #424]	; (404394 <indev_drag+0x2f8>)
  4041ea:	4798      	blx	r3
  4041ec:	4606      	mov	r6, r0
            lv_obj_set_pos(drag_obj, act_x, act_y);
  4041ee:	464a      	mov	r2, r9
  4041f0:	4641      	mov	r1, r8
  4041f2:	4628      	mov	r0, r5
  4041f4:	4b68      	ldr	r3, [pc, #416]	; (404398 <indev_drag+0x2fc>)
  4041f6:	4798      	blx	r3
            proc->types.pointer.drag_in_prog = 1;
  4041f8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4041fc:	f043 0302 	orr.w	r3, r3, #2
  404200:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
  404204:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
  404208:	459a      	cmp	sl, r3
  40420a:	f000 808b 	beq.w	404324 <indev_drag+0x288>
            if(drag_just_started) {
  40420e:	2f00      	cmp	r7, #0
  404210:	f43f af51 	beq.w	4040b6 <indev_drag+0x1a>
                drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_BEGIN, indev_act);
  404214:	69eb      	ldr	r3, [r5, #28]
  404216:	4a5a      	ldr	r2, [pc, #360]	; (404380 <indev_drag+0x2e4>)
  404218:	6812      	ldr	r2, [r2, #0]
  40421a:	2111      	movs	r1, #17
  40421c:	4628      	mov	r0, r5
  40421e:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404220:	4620      	mov	r0, r4
  404222:	4b5e      	ldr	r3, [pc, #376]	; (40439c <indev_drag+0x300>)
  404224:	4798      	blx	r3
  404226:	2800      	cmp	r0, #0
  404228:	f47f af45 	bne.w	4040b6 <indev_drag+0x1a>
                lv_event_send(drag_obj, LV_EVENT_DRAG_BEGIN, NULL);
  40422c:	2200      	movs	r2, #0
  40422e:	2108      	movs	r1, #8
  404230:	4628      	mov	r0, r5
  404232:	4b5b      	ldr	r3, [pc, #364]	; (4043a0 <indev_drag+0x304>)
  404234:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404236:	4620      	mov	r0, r4
  404238:	4b58      	ldr	r3, [pc, #352]	; (40439c <indev_drag+0x300>)
  40423a:	4798      	blx	r3
  40423c:	e73b      	b.n	4040b6 <indev_drag+0x1a>
    bool drag_just_started = false;
  40423e:	2700      	movs	r7, #0
  404240:	e789      	b.n	404156 <indev_drag+0xba>
                if(drag_just_started) {
  404242:	2f00      	cmp	r7, #0
  404244:	d0af      	beq.n	4041a6 <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  404246:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40424a:	2203      	movs	r2, #3
  40424c:	f362 0384 	bfi	r3, r2, #2, #3
  404250:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    act_x += proc->types.pointer.drag_sum.x;
  404254:	8a23      	ldrh	r3, [r4, #16]
  404256:	4498      	add	r8, r3
  404258:	fa0f f888 	sxth.w	r8, r8
                    act_y += proc->types.pointer.drag_sum.y;
  40425c:	8a63      	ldrh	r3, [r4, #18]
  40425e:	4499      	add	r9, r3
  404260:	fa0f f989 	sxth.w	r9, r9
  404264:	e79f      	b.n	4041a6 <indev_drag+0x10a>
                if(drag_just_started) {
  404266:	2f00      	cmp	r7, #0
  404268:	d09d      	beq.n	4041a6 <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
  40426a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40426e:	2201      	movs	r2, #1
  404270:	f362 0384 	bfi	r3, r2, #2, #3
  404274:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.y = 0;
  404278:	2300      	movs	r3, #0
  40427a:	8263      	strh	r3, [r4, #18]
                    act_x += proc->types.pointer.drag_sum.x;
  40427c:	8a23      	ldrh	r3, [r4, #16]
  40427e:	4498      	add	r8, r3
  404280:	fa0f f888 	sxth.w	r8, r8
  404284:	e78f      	b.n	4041a6 <indev_drag+0x10a>
                if(drag_just_started) {
  404286:	2f00      	cmp	r7, #0
  404288:	d08d      	beq.n	4041a6 <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
  40428a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40428e:	2202      	movs	r2, #2
  404290:	f362 0384 	bfi	r3, r2, #2, #3
  404294:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.x = 0;
  404298:	2300      	movs	r3, #0
  40429a:	8223      	strh	r3, [r4, #16]
                    act_y += proc->types.pointer.drag_sum.y;
  40429c:	8a63      	ldrh	r3, [r4, #18]
  40429e:	4499      	add	r9, r3
  4042a0:	fa0f f989 	sxth.w	r9, r9
  4042a4:	e77f      	b.n	4041a6 <indev_drag+0x10a>
                if(drag_just_started) {
  4042a6:	2f00      	cmp	r7, #0
  4042a8:	f43f af7d 	beq.w	4041a6 <indev_drag+0x10a>
                    if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
  4042ac:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  4042b0:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
  4042b4:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
  4042b8:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  4042bc:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
  4042c0:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
  4042c4:	4288      	cmp	r0, r1
  4042c6:	dd0d      	ble.n	4042e4 <indev_drag+0x248>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
  4042c8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4042cc:	2101      	movs	r1, #1
  4042ce:	f361 0384 	bfi	r3, r1, #2, #3
  4042d2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.y = 0;
  4042d6:	2300      	movs	r3, #0
  4042d8:	8263      	strh	r3, [r4, #18]
                        act_x += proc->types.pointer.drag_sum.x;
  4042da:	fa18 f882 	uxtah	r8, r8, r2
  4042de:	fa0f f888 	sxth.w	r8, r8
  4042e2:	e760      	b.n	4041a6 <indev_drag+0x10a>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
  4042e4:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
  4042e8:	2102      	movs	r1, #2
  4042ea:	f361 0284 	bfi	r2, r1, #2, #3
  4042ee:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.x = 0;
  4042f2:	2200      	movs	r2, #0
  4042f4:	8222      	strh	r2, [r4, #16]
                        act_y += proc->types.pointer.drag_sum.y;
  4042f6:	fa19 f983 	uxtah	r9, r9, r3
  4042fa:	fa0f f989 	sxth.w	r9, r9
  4042fe:	e752      	b.n	4041a6 <indev_drag+0x10a>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) < LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
  404300:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  404304:	2a00      	cmp	r2, #0
  404306:	bfb8      	it	lt
  404308:	4252      	neglt	r2, r2
  40430a:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  40430e:	2b00      	cmp	r3, #0
  404310:	bfb8      	it	lt
  404312:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
  404314:	429a      	cmp	r2, r3
  404316:	f6bf af64 	bge.w	4041e2 <indev_drag+0x146>
                act_y += proc->types.pointer.vect.y;
  40431a:	89e3      	ldrh	r3, [r4, #14]
  40431c:	4499      	add	r9, r3
  40431e:	fa0f f989 	sxth.w	r9, r9
  404322:	e75e      	b.n	4041e2 <indev_drag+0x146>
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
  404324:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
  404328:	459b      	cmp	fp, r3
  40432a:	f47f af70 	bne.w	40420e <indev_drag+0x172>
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
  40432e:	4628      	mov	r0, r5
  404330:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4043a8 <indev_drag+0x30c>
  404334:	47c0      	blx	r8
  404336:	4b13      	ldr	r3, [pc, #76]	; (404384 <indev_drag+0x2e8>)
  404338:	4798      	blx	r3
  40433a:	4681      	mov	r9, r0
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
  40433c:	4628      	mov	r0, r5
  40433e:	47c0      	blx	r8
  404340:	4b11      	ldr	r3, [pc, #68]	; (404388 <indev_drag+0x2ec>)
  404342:	4798      	blx	r3
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
  404344:	9b00      	ldr	r3, [sp, #0]
  404346:	461a      	mov	r2, r3
  404348:	9b01      	ldr	r3, [sp, #4]
  40434a:	454a      	cmp	r2, r9
  40434c:	bf08      	it	eq
  40434e:	4283      	cmpeq	r3, r0
  404350:	f47f af5d 	bne.w	40420e <indev_drag+0x172>
                    uint16_t new_inv_buf_size = lv_disp_get_inv_buf_size(indev_act->driver.disp);
  404354:	f8df 8028 	ldr.w	r8, [pc, #40]	; 404380 <indev_drag+0x2e4>
  404358:	f8d8 3000 	ldr.w	r3, [r8]
  40435c:	68d8      	ldr	r0, [r3, #12]
  40435e:	4b0d      	ldr	r3, [pc, #52]	; (404394 <indev_drag+0x2f8>)
  404360:	4798      	blx	r3
                    _lv_disp_pop_from_inv_buf(indev_act->driver.disp, new_inv_buf_size - inv_buf_size);
  404362:	f8d8 3000 	ldr.w	r3, [r8]
  404366:	1b81      	subs	r1, r0, r6
  404368:	b289      	uxth	r1, r1
  40436a:	68d8      	ldr	r0, [r3, #12]
  40436c:	4b0d      	ldr	r3, [pc, #52]	; (4043a4 <indev_drag+0x308>)
  40436e:	4798      	blx	r3
  404370:	e74d      	b.n	40420e <indev_drag+0x172>
  404372:	bf00      	nop
  404374:	00403b65 	.word	0x00403b65
  404378:	004066f1 	.word	0x004066f1
  40437c:	0040671d 	.word	0x0040671d
  404380:	2040c3f0 	.word	0x2040c3f0
  404384:	00405b29 	.word	0x00405b29
  404388:	00405b59 	.word	0x00405b59
  40438c:	00405aa9 	.word	0x00405aa9
  404390:	00405ae9 	.word	0x00405ae9
  404394:	00415d29 	.word	0x00415d29
  404398:	00405fe5 	.word	0x00405fe5
  40439c:	00403b49 	.word	0x00403b49
  4043a0:	00405845 	.word	0x00405845
  4043a4:	00415d33 	.word	0x00415d33
  4043a8:	00405955 	.word	0x00405955

004043ac <indev_gesture>:
{
  4043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(proc->types.pointer.gesture_sent) return;
  4043ae:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
  4043b2:	f013 0f20 	tst.w	r3, #32
  4043b6:	d153      	bne.n	404460 <indev_gesture+0xb4>
  4043b8:	4605      	mov	r5, r0
    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
  4043ba:	6984      	ldr	r4, [r0, #24]
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
  4043bc:	e003      	b.n	4043c6 <indev_gesture+0x1a>
        gesture_obj = lv_obj_get_parent(gesture_obj);
  4043be:	4620      	mov	r0, r4
  4043c0:	4b33      	ldr	r3, [pc, #204]	; (404490 <indev_gesture+0xe4>)
  4043c2:	4798      	blx	r3
  4043c4:	4604      	mov	r4, r0
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
  4043c6:	b124      	cbz	r4, 4043d2 <indev_gesture+0x26>
  4043c8:	4620      	mov	r0, r4
  4043ca:	4b32      	ldr	r3, [pc, #200]	; (404494 <indev_gesture+0xe8>)
  4043cc:	4798      	blx	r3
  4043ce:	2800      	cmp	r0, #0
  4043d0:	d1f5      	bne.n	4043be <indev_gesture+0x12>
    if(gesture_obj == NULL) return;
  4043d2:	2c00      	cmp	r4, #0
  4043d4:	d044      	beq.n	404460 <indev_gesture+0xb4>
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
  4043d6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4043da:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  4043de:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
  4043e2:	4a2d      	ldr	r2, [pc, #180]	; (404498 <indev_gesture+0xec>)
  4043e4:	6812      	ldr	r2, [r2, #0]
  4043e6:	7d91      	ldrb	r1, [r2, #22]
  4043e8:	4288      	cmp	r0, r1
  4043ea:	da09      	bge.n	404400 <indev_gesture+0x54>
       (LV_MATH_ABS(proc->types.pointer.vect.y) < indev_act->driver.gesture_min_velocity)) {
  4043ec:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
  4043f0:	2800      	cmp	r0, #0
  4043f2:	bfb8      	it	lt
  4043f4:	4240      	neglt	r0, r0
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
  4043f6:	4281      	cmp	r1, r0
  4043f8:	dd02      	ble.n	404400 <indev_gesture+0x54>
        proc->types.pointer.gesture_sum.x = 0;
  4043fa:	2100      	movs	r1, #0
  4043fc:	84e9      	strh	r1, [r5, #38]	; 0x26
        proc->types.pointer.gesture_sum.y = 0;
  4043fe:	8529      	strh	r1, [r5, #40]	; 0x28
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
  404400:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
  404402:	fa11 f383 	uxtah	r3, r1, r3
  404406:	b21b      	sxth	r3, r3
  404408:	84eb      	strh	r3, [r5, #38]	; 0x26
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
  40440a:	89e9      	ldrh	r1, [r5, #14]
  40440c:	8d28      	ldrh	r0, [r5, #40]	; 0x28
  40440e:	4401      	add	r1, r0
  404410:	b209      	sxth	r1, r1
  404412:	8529      	strh	r1, [r5, #40]	; 0x28
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
  404414:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
  404418:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
  40441c:	7dd0      	ldrb	r0, [r2, #23]
  40441e:	4286      	cmp	r6, r0
  404420:	dc05      	bgt.n	40442e <indev_gesture+0x82>
       (LV_MATH_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver.gesture_limit)) {
  404422:	ea81 77e1 	eor.w	r7, r1, r1, asr #31
  404426:	eba7 77e1 	sub.w	r7, r7, r1, asr #31
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
  40442a:	42b8      	cmp	r0, r7
  40442c:	da18      	bge.n	404460 <indev_gesture+0xb4>
        proc->types.pointer.gesture_sent = 1;
  40442e:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
  404432:	f040 0020 	orr.w	r0, r0, #32
  404436:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
        if(LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > LV_MATH_ABS(proc->types.pointer.gesture_sum.y)) {
  40443a:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
  40443e:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
  404442:	4286      	cmp	r6, r0
  404444:	dd11      	ble.n	40446a <indev_gesture+0xbe>
            if(proc->types.pointer.gesture_sum.x > 0)
  404446:	2b00      	cmp	r3, #0
  404448:	dd0b      	ble.n	404462 <indev_gesture+0xb6>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_RIGHT;
  40444a:	2303      	movs	r3, #3
  40444c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
        gesture_obj->signal_cb(gesture_obj, LV_SIGNAL_GESTURE, indev_act);
  404450:	69e3      	ldr	r3, [r4, #28]
  404452:	2114      	movs	r1, #20
  404454:	4620      	mov	r0, r4
  404456:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404458:	4628      	mov	r0, r5
  40445a:	4b10      	ldr	r3, [pc, #64]	; (40449c <indev_gesture+0xf0>)
  40445c:	4798      	blx	r3
  40445e:	b170      	cbz	r0, 40447e <indev_gesture+0xd2>
  404460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_LEFT;
  404462:	2302      	movs	r3, #2
  404464:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  404468:	e7f2      	b.n	404450 <indev_gesture+0xa4>
            if(proc->types.pointer.gesture_sum.y > 0)
  40446a:	2900      	cmp	r1, #0
  40446c:	dd03      	ble.n	404476 <indev_gesture+0xca>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_BOTTOM;
  40446e:	2301      	movs	r3, #1
  404470:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  404474:	e7ec      	b.n	404450 <indev_gesture+0xa4>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_TOP;
  404476:	2300      	movs	r3, #0
  404478:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  40447c:	e7e8      	b.n	404450 <indev_gesture+0xa4>
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, NULL);
  40447e:	2200      	movs	r2, #0
  404480:	210b      	movs	r1, #11
  404482:	4620      	mov	r0, r4
  404484:	4b06      	ldr	r3, [pc, #24]	; (4044a0 <indev_gesture+0xf4>)
  404486:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404488:	4628      	mov	r0, r5
  40448a:	4b04      	ldr	r3, [pc, #16]	; (40449c <indev_gesture+0xf0>)
  40448c:	4798      	blx	r3
  40448e:	e7e7      	b.n	404460 <indev_gesture+0xb4>
  404490:	00405955 	.word	0x00405955
  404494:	0040677f 	.word	0x0040677f
  404498:	2040c3f0 	.word	0x2040c3f0
  40449c:	00403b49 	.word	0x00403b49
  4044a0:	00405845 	.word	0x00405845

004044a4 <indev_keypad_proc>:
{
  4044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  4044a6:	7b8b      	ldrb	r3, [r1, #14]
  4044a8:	2b01      	cmp	r3, #1
  4044aa:	d02f      	beq.n	40450c <indev_keypad_proc+0x68>
    if(i->proc.wait_until_release) {
  4044ac:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  4044b0:	f013 0f08 	tst.w	r3, #8
  4044b4:	d00b      	beq.n	4044ce <indev_keypad_proc+0x2a>
        i->proc.wait_until_release      = 0;
  4044b6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
  4044ba:	2200      	movs	r2, #0
  4044bc:	6482      	str	r2, [r0, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
  4044be:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  4044c2:	f362 0300 	bfi	r3, r2, #0, #1
  4044c6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
  4044ca:	f880 2020 	strb.w	r2, [r0, #32]
    lv_group_t * g = i->group;
  4044ce:	6d86      	ldr	r6, [r0, #88]	; 0x58
    if(g == NULL) return;
  4044d0:	b1de      	cbz	r6, 40450a <indev_keypad_proc+0x66>
  4044d2:	460d      	mov	r5, r1
  4044d4:	4604      	mov	r4, r0
    indev_obj_act = lv_group_get_focused(g);
  4044d6:	4630      	mov	r0, r6
  4044d8:	4b95      	ldr	r3, [pc, #596]	; (404730 <indev_keypad_proc+0x28c>)
  4044da:	4798      	blx	r3
  4044dc:	4b95      	ldr	r3, [pc, #596]	; (404734 <indev_keypad_proc+0x290>)
  4044de:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  4044e0:	b198      	cbz	r0, 40450a <indev_keypad_proc+0x66>
    uint32_t prev_key = i->proc.types.keypad.last_key;
  4044e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    i->proc.types.keypad.last_key = data->key;
  4044e4:	686b      	ldr	r3, [r5, #4]
  4044e6:	6263      	str	r3, [r4, #36]	; 0x24
    uint32_t prev_state             = i->proc.types.keypad.last_state;
  4044e8:	f894 2020 	ldrb.w	r2, [r4, #32]
    i->proc.types.keypad.last_state = data->state;
  4044ec:	7bab      	ldrb	r3, [r5, #14]
  4044ee:	f884 3020 	strb.w	r3, [r4, #32]
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
  4044f2:	7bab      	ldrb	r3, [r5, #14]
  4044f4:	2b01      	cmp	r3, #1
  4044f6:	d00f      	beq.n	404518 <indev_keypad_proc+0x74>
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
  4044f8:	2b01      	cmp	r3, #1
  4044fa:	d066      	beq.n	4045ca <indev_keypad_proc+0x126>
    else if(data->state == LV_INDEV_STATE_REL && prev_state == LV_INDEV_STATE_PR) {
  4044fc:	b913      	cbnz	r3, 404504 <indev_keypad_proc+0x60>
  4044fe:	2a01      	cmp	r2, #1
  404500:	f000 810a 	beq.w	404718 <indev_keypad_proc+0x274>
    indev_obj_act = NULL;
  404504:	2200      	movs	r2, #0
  404506:	4b8b      	ldr	r3, [pc, #556]	; (404734 <indev_keypad_proc+0x290>)
  404508:	601a      	str	r2, [r3, #0]
  40450a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  40450c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404510:	f013 0f08 	tst.w	r3, #8
  404514:	d0ca      	beq.n	4044ac <indev_keypad_proc+0x8>
  404516:	e7f8      	b.n	40450a <indev_keypad_proc+0x66>
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
  404518:	2a00      	cmp	r2, #0
  40451a:	d1ed      	bne.n	4044f8 <indev_keypad_proc+0x54>
        i->proc.pr_timestamp = lv_tick_get();
  40451c:	4b86      	ldr	r3, [pc, #536]	; (404738 <indev_keypad_proc+0x294>)
  40451e:	4798      	blx	r3
  404520:	64a0      	str	r0, [r4, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
  404522:	6869      	ldr	r1, [r5, #4]
  404524:	290a      	cmp	r1, #10
  404526:	d009      	beq.n	40453c <indev_keypad_proc+0x98>
        else if(data->key == LV_KEY_ESC) {
  404528:	291b      	cmp	r1, #27
  40452a:	d022      	beq.n	404572 <indev_keypad_proc+0xce>
        else if(data->key == LV_KEY_NEXT) {
  40452c:	2909      	cmp	r1, #9
  40452e:	d030      	beq.n	404592 <indev_keypad_proc+0xee>
        else if(data->key == LV_KEY_PREV) {
  404530:	290b      	cmp	r1, #11
  404532:	d03c      	beq.n	4045ae <indev_keypad_proc+0x10a>
            lv_group_send_data(g, data->key);
  404534:	4630      	mov	r0, r6
  404536:	4b81      	ldr	r3, [pc, #516]	; (40473c <indev_keypad_proc+0x298>)
  404538:	4798      	blx	r3
  40453a:	e7e3      	b.n	404504 <indev_keypad_proc+0x60>
            lv_group_send_data(g, LV_KEY_ENTER);
  40453c:	4630      	mov	r0, r6
  40453e:	4b7f      	ldr	r3, [pc, #508]	; (40473c <indev_keypad_proc+0x298>)
  404540:	4798      	blx	r3
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
  404542:	4b7c      	ldr	r3, [pc, #496]	; (404734 <indev_keypad_proc+0x290>)
  404544:	6818      	ldr	r0, [r3, #0]
  404546:	69c3      	ldr	r3, [r0, #28]
  404548:	2200      	movs	r2, #0
  40454a:	210b      	movs	r1, #11
  40454c:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  40454e:	341c      	adds	r4, #28
  404550:	4620      	mov	r0, r4
  404552:	4b7b      	ldr	r3, [pc, #492]	; (404740 <indev_keypad_proc+0x29c>)
  404554:	4798      	blx	r3
  404556:	2800      	cmp	r0, #0
  404558:	d1d7      	bne.n	40450a <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  40455a:	2200      	movs	r2, #0
  40455c:	4611      	mov	r1, r2
  40455e:	4b75      	ldr	r3, [pc, #468]	; (404734 <indev_keypad_proc+0x290>)
  404560:	6818      	ldr	r0, [r3, #0]
  404562:	4b78      	ldr	r3, [pc, #480]	; (404744 <indev_keypad_proc+0x2a0>)
  404564:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404566:	4620      	mov	r0, r4
  404568:	4b75      	ldr	r3, [pc, #468]	; (404740 <indev_keypad_proc+0x29c>)
  40456a:	4798      	blx	r3
  40456c:	2800      	cmp	r0, #0
  40456e:	d0c9      	beq.n	404504 <indev_keypad_proc+0x60>
  404570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_send_data(g, LV_KEY_ESC);
  404572:	4630      	mov	r0, r6
  404574:	4b71      	ldr	r3, [pc, #452]	; (40473c <indev_keypad_proc+0x298>)
  404576:	4798      	blx	r3
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
  404578:	2200      	movs	r2, #0
  40457a:	2114      	movs	r1, #20
  40457c:	4b6d      	ldr	r3, [pc, #436]	; (404734 <indev_keypad_proc+0x290>)
  40457e:	6818      	ldr	r0, [r3, #0]
  404580:	4b70      	ldr	r3, [pc, #448]	; (404744 <indev_keypad_proc+0x2a0>)
  404582:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404584:	f104 001c 	add.w	r0, r4, #28
  404588:	4b6d      	ldr	r3, [pc, #436]	; (404740 <indev_keypad_proc+0x29c>)
  40458a:	4798      	blx	r3
  40458c:	2800      	cmp	r0, #0
  40458e:	d0b9      	beq.n	404504 <indev_keypad_proc+0x60>
  404590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  404592:	2100      	movs	r1, #0
  404594:	4630      	mov	r0, r6
  404596:	4b6c      	ldr	r3, [pc, #432]	; (404748 <indev_keypad_proc+0x2a4>)
  404598:	4798      	blx	r3
            lv_group_focus_next(g);
  40459a:	4630      	mov	r0, r6
  40459c:	4b6b      	ldr	r3, [pc, #428]	; (40474c <indev_keypad_proc+0x2a8>)
  40459e:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4045a0:	f104 001c 	add.w	r0, r4, #28
  4045a4:	4b66      	ldr	r3, [pc, #408]	; (404740 <indev_keypad_proc+0x29c>)
  4045a6:	4798      	blx	r3
  4045a8:	2800      	cmp	r0, #0
  4045aa:	d0ab      	beq.n	404504 <indev_keypad_proc+0x60>
  4045ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  4045ae:	2100      	movs	r1, #0
  4045b0:	4630      	mov	r0, r6
  4045b2:	4b65      	ldr	r3, [pc, #404]	; (404748 <indev_keypad_proc+0x2a4>)
  4045b4:	4798      	blx	r3
            lv_group_focus_prev(g);
  4045b6:	4630      	mov	r0, r6
  4045b8:	4b65      	ldr	r3, [pc, #404]	; (404750 <indev_keypad_proc+0x2ac>)
  4045ba:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4045bc:	f104 001c 	add.w	r0, r4, #28
  4045c0:	4b5f      	ldr	r3, [pc, #380]	; (404740 <indev_keypad_proc+0x29c>)
  4045c2:	4798      	blx	r3
  4045c4:	2800      	cmp	r0, #0
  4045c6:	d09d      	beq.n	404504 <indev_keypad_proc+0x60>
  4045c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
  4045ca:	2a01      	cmp	r2, #1
  4045cc:	d196      	bne.n	4044fc <indev_keypad_proc+0x58>
        if(data->key == LV_KEY_ENTER) {
  4045ce:	686b      	ldr	r3, [r5, #4]
  4045d0:	2b0a      	cmp	r3, #10
  4045d2:	d024      	beq.n	40461e <indev_keypad_proc+0x17a>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  4045d4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4045d8:	f013 0f01 	tst.w	r3, #1
  4045dc:	d037      	beq.n	40464e <indev_keypad_proc+0x1aa>
        else if(i->proc.long_pr_sent != 0 &&
  4045de:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4045e2:	f013 0f01 	tst.w	r3, #1
  4045e6:	d08d      	beq.n	404504 <indev_keypad_proc+0x60>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
  4045e8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
  4045ea:	4b5a      	ldr	r3, [pc, #360]	; (404754 <indev_keypad_proc+0x2b0>)
  4045ec:	4798      	blx	r3
  4045ee:	8b63      	ldrh	r3, [r4, #26]
        else if(i->proc.long_pr_sent != 0 &&
  4045f0:	4298      	cmp	r0, r3
  4045f2:	d987      	bls.n	404504 <indev_keypad_proc+0x60>
            i->proc.longpr_rep_timestamp = lv_tick_get();
  4045f4:	4b50      	ldr	r3, [pc, #320]	; (404738 <indev_keypad_proc+0x294>)
  4045f6:	4798      	blx	r3
  4045f8:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  4045fa:	6869      	ldr	r1, [r5, #4]
  4045fc:	290a      	cmp	r1, #10
  4045fe:	d053      	beq.n	4046a8 <indev_keypad_proc+0x204>
            else if(data->key == LV_KEY_NEXT) {
  404600:	2909      	cmp	r1, #9
  404602:	d06b      	beq.n	4046dc <indev_keypad_proc+0x238>
            else if(data->key == LV_KEY_PREV) {
  404604:	290b      	cmp	r1, #11
  404606:	d078      	beq.n	4046fa <indev_keypad_proc+0x256>
                lv_group_send_data(g, data->key);
  404608:	4630      	mov	r0, r6
  40460a:	4b4c      	ldr	r3, [pc, #304]	; (40473c <indev_keypad_proc+0x298>)
  40460c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40460e:	f104 001c 	add.w	r0, r4, #28
  404612:	4b4b      	ldr	r3, [pc, #300]	; (404740 <indev_keypad_proc+0x29c>)
  404614:	4798      	blx	r3
  404616:	2800      	cmp	r0, #0
  404618:	f43f af74 	beq.w	404504 <indev_keypad_proc+0x60>
  40461c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, NULL);
  40461e:	69c3      	ldr	r3, [r0, #28]
  404620:	2200      	movs	r2, #0
  404622:	210c      	movs	r1, #12
  404624:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404626:	f104 071c 	add.w	r7, r4, #28
  40462a:	4638      	mov	r0, r7
  40462c:	4b44      	ldr	r3, [pc, #272]	; (404740 <indev_keypad_proc+0x29c>)
  40462e:	4798      	blx	r3
  404630:	2800      	cmp	r0, #0
  404632:	f47f af6a 	bne.w	40450a <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
  404636:	2200      	movs	r2, #0
  404638:	2101      	movs	r1, #1
  40463a:	4b3e      	ldr	r3, [pc, #248]	; (404734 <indev_keypad_proc+0x290>)
  40463c:	6818      	ldr	r0, [r3, #0]
  40463e:	4b41      	ldr	r3, [pc, #260]	; (404744 <indev_keypad_proc+0x2a0>)
  404640:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404642:	4638      	mov	r0, r7
  404644:	4b3e      	ldr	r3, [pc, #248]	; (404740 <indev_keypad_proc+0x29c>)
  404646:	4798      	blx	r3
  404648:	2800      	cmp	r0, #0
  40464a:	d0c3      	beq.n	4045d4 <indev_keypad_proc+0x130>
  40464c:	e75d      	b.n	40450a <indev_keypad_proc+0x66>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  40464e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  404650:	4b40      	ldr	r3, [pc, #256]	; (404754 <indev_keypad_proc+0x2b0>)
  404652:	4798      	blx	r3
  404654:	8b23      	ldrh	r3, [r4, #24]
  404656:	4298      	cmp	r0, r3
  404658:	d9c1      	bls.n	4045de <indev_keypad_proc+0x13a>
            i->proc.long_pr_sent = 1;
  40465a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  40465e:	f043 0301 	orr.w	r3, r3, #1
  404662:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            if(data->key == LV_KEY_ENTER) {
  404666:	686b      	ldr	r3, [r5, #4]
  404668:	2b0a      	cmp	r3, #10
  40466a:	f47f af4b 	bne.w	404504 <indev_keypad_proc+0x60>
                i->proc.longpr_rep_timestamp = lv_tick_get();
  40466e:	4b32      	ldr	r3, [pc, #200]	; (404738 <indev_keypad_proc+0x294>)
  404670:	4798      	blx	r3
  404672:	64e0      	str	r0, [r4, #76]	; 0x4c
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
  404674:	4b2f      	ldr	r3, [pc, #188]	; (404734 <indev_keypad_proc+0x290>)
  404676:	6818      	ldr	r0, [r3, #0]
  404678:	69c3      	ldr	r3, [r0, #28]
  40467a:	2200      	movs	r2, #0
  40467c:	210f      	movs	r1, #15
  40467e:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404680:	341c      	adds	r4, #28
  404682:	4620      	mov	r0, r4
  404684:	4b2e      	ldr	r3, [pc, #184]	; (404740 <indev_keypad_proc+0x29c>)
  404686:	4798      	blx	r3
  404688:	2800      	cmp	r0, #0
  40468a:	f47f af3e 	bne.w	40450a <indev_keypad_proc+0x66>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  40468e:	2200      	movs	r2, #0
  404690:	2104      	movs	r1, #4
  404692:	4b28      	ldr	r3, [pc, #160]	; (404734 <indev_keypad_proc+0x290>)
  404694:	6818      	ldr	r0, [r3, #0]
  404696:	4b2b      	ldr	r3, [pc, #172]	; (404744 <indev_keypad_proc+0x2a0>)
  404698:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40469a:	4620      	mov	r0, r4
  40469c:	4b28      	ldr	r3, [pc, #160]	; (404740 <indev_keypad_proc+0x29c>)
  40469e:	4798      	blx	r3
  4046a0:	2800      	cmp	r0, #0
  4046a2:	f43f af2f 	beq.w	404504 <indev_keypad_proc+0x60>
  4046a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
  4046a8:	4b22      	ldr	r3, [pc, #136]	; (404734 <indev_keypad_proc+0x290>)
  4046aa:	6818      	ldr	r0, [r3, #0]
  4046ac:	69c3      	ldr	r3, [r0, #28]
  4046ae:	2200      	movs	r2, #0
  4046b0:	2110      	movs	r1, #16
  4046b2:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4046b4:	341c      	adds	r4, #28
  4046b6:	4620      	mov	r0, r4
  4046b8:	4b21      	ldr	r3, [pc, #132]	; (404740 <indev_keypad_proc+0x29c>)
  4046ba:	4798      	blx	r3
  4046bc:	2800      	cmp	r0, #0
  4046be:	f47f af24 	bne.w	40450a <indev_keypad_proc+0x66>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  4046c2:	2200      	movs	r2, #0
  4046c4:	2105      	movs	r1, #5
  4046c6:	4b1b      	ldr	r3, [pc, #108]	; (404734 <indev_keypad_proc+0x290>)
  4046c8:	6818      	ldr	r0, [r3, #0]
  4046ca:	4b1e      	ldr	r3, [pc, #120]	; (404744 <indev_keypad_proc+0x2a0>)
  4046cc:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4046ce:	4620      	mov	r0, r4
  4046d0:	4b1b      	ldr	r3, [pc, #108]	; (404740 <indev_keypad_proc+0x29c>)
  4046d2:	4798      	blx	r3
  4046d4:	2800      	cmp	r0, #0
  4046d6:	f43f af15 	beq.w	404504 <indev_keypad_proc+0x60>
  4046da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  4046dc:	2100      	movs	r1, #0
  4046de:	4630      	mov	r0, r6
  4046e0:	4b19      	ldr	r3, [pc, #100]	; (404748 <indev_keypad_proc+0x2a4>)
  4046e2:	4798      	blx	r3
                lv_group_focus_next(g);
  4046e4:	4630      	mov	r0, r6
  4046e6:	4b19      	ldr	r3, [pc, #100]	; (40474c <indev_keypad_proc+0x2a8>)
  4046e8:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4046ea:	f104 001c 	add.w	r0, r4, #28
  4046ee:	4b14      	ldr	r3, [pc, #80]	; (404740 <indev_keypad_proc+0x29c>)
  4046f0:	4798      	blx	r3
  4046f2:	2800      	cmp	r0, #0
  4046f4:	f43f af06 	beq.w	404504 <indev_keypad_proc+0x60>
  4046f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  4046fa:	2100      	movs	r1, #0
  4046fc:	4630      	mov	r0, r6
  4046fe:	4b12      	ldr	r3, [pc, #72]	; (404748 <indev_keypad_proc+0x2a4>)
  404700:	4798      	blx	r3
                lv_group_focus_prev(g);
  404702:	4630      	mov	r0, r6
  404704:	4b12      	ldr	r3, [pc, #72]	; (404750 <indev_keypad_proc+0x2ac>)
  404706:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404708:	f104 001c 	add.w	r0, r4, #28
  40470c:	4b0c      	ldr	r3, [pc, #48]	; (404740 <indev_keypad_proc+0x29c>)
  40470e:	4798      	blx	r3
  404710:	2800      	cmp	r0, #0
  404712:	f43f aef7 	beq.w	404504 <indev_keypad_proc+0x60>
  404716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        data->key = prev_key;
  404718:	6069      	str	r1, [r5, #4]
        if(data->key == LV_KEY_ENTER) {
  40471a:	290a      	cmp	r1, #10
  40471c:	d01c      	beq.n	404758 <indev_keypad_proc+0x2b4>
        i->proc.pr_timestamp = 0;
  40471e:	2200      	movs	r2, #0
  404720:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent = 0;
  404722:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404726:	f362 0300 	bfi	r3, r2, #0, #1
  40472a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  40472e:	e6e9      	b.n	404504 <indev_keypad_proc+0x60>
  404730:	00403989 	.word	0x00403989
  404734:	2040c3f4 	.word	0x2040c3f4
  404738:	0041602d 	.word	0x0041602d
  40473c:	0040399d 	.word	0x0040399d
  404740:	00403b49 	.word	0x00403b49
  404744:	00405845 	.word	0x00405845
  404748:	004039d5 	.word	0x004039d5
  40474c:	004037ed 	.word	0x004037ed
  404750:	00403805 	.word	0x00403805
  404754:	00416049 	.word	0x00416049
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  404758:	69c3      	ldr	r3, [r0, #28]
  40475a:	2200      	movs	r2, #0
  40475c:	210e      	movs	r1, #14
  40475e:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404760:	f104 051c 	add.w	r5, r4, #28
  404764:	4628      	mov	r0, r5
  404766:	4b17      	ldr	r3, [pc, #92]	; (4047c4 <indev_keypad_proc+0x320>)
  404768:	4798      	blx	r3
  40476a:	2800      	cmp	r0, #0
  40476c:	f47f aecd 	bne.w	40450a <indev_keypad_proc+0x66>
            if(i->proc.long_pr_sent == 0) {
  404770:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404774:	f013 0f01 	tst.w	r3, #1
  404778:	d10b      	bne.n	404792 <indev_keypad_proc+0x2ee>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  40477a:	2200      	movs	r2, #0
  40477c:	2103      	movs	r1, #3
  40477e:	4b12      	ldr	r3, [pc, #72]	; (4047c8 <indev_keypad_proc+0x324>)
  404780:	6818      	ldr	r0, [r3, #0]
  404782:	4b12      	ldr	r3, [pc, #72]	; (4047cc <indev_keypad_proc+0x328>)
  404784:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404786:	4628      	mov	r0, r5
  404788:	4b0e      	ldr	r3, [pc, #56]	; (4047c4 <indev_keypad_proc+0x320>)
  40478a:	4798      	blx	r3
  40478c:	2800      	cmp	r0, #0
  40478e:	f47f aebc 	bne.w	40450a <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  404792:	2200      	movs	r2, #0
  404794:	2106      	movs	r1, #6
  404796:	4b0c      	ldr	r3, [pc, #48]	; (4047c8 <indev_keypad_proc+0x324>)
  404798:	6818      	ldr	r0, [r3, #0]
  40479a:	4b0c      	ldr	r3, [pc, #48]	; (4047cc <indev_keypad_proc+0x328>)
  40479c:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  40479e:	4628      	mov	r0, r5
  4047a0:	4b08      	ldr	r3, [pc, #32]	; (4047c4 <indev_keypad_proc+0x320>)
  4047a2:	4798      	blx	r3
  4047a4:	2800      	cmp	r0, #0
  4047a6:	f47f aeb0 	bne.w	40450a <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  4047aa:	2200      	movs	r2, #0
  4047ac:	2107      	movs	r1, #7
  4047ae:	4b06      	ldr	r3, [pc, #24]	; (4047c8 <indev_keypad_proc+0x324>)
  4047b0:	6818      	ldr	r0, [r3, #0]
  4047b2:	4b06      	ldr	r3, [pc, #24]	; (4047cc <indev_keypad_proc+0x328>)
  4047b4:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4047b6:	4628      	mov	r0, r5
  4047b8:	4b02      	ldr	r3, [pc, #8]	; (4047c4 <indev_keypad_proc+0x320>)
  4047ba:	4798      	blx	r3
  4047bc:	2800      	cmp	r0, #0
  4047be:	d0ae      	beq.n	40471e <indev_keypad_proc+0x27a>
  4047c0:	e6a3      	b.n	40450a <indev_keypad_proc+0x66>
  4047c2:	bf00      	nop
  4047c4:	00403b49 	.word	0x00403b49
  4047c8:	2040c3f4 	.word	0x2040c3f4
  4047cc:	00405845 	.word	0x00405845

004047d0 <indev_encoder_proc>:
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  4047d0:	7b8b      	ldrb	r3, [r1, #14]
  4047d2:	2b01      	cmp	r3, #1
  4047d4:	d040      	beq.n	404858 <indev_encoder_proc+0x88>
{
  4047d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4047d8:	b083      	sub	sp, #12
    if(i->proc.wait_until_release) {
  4047da:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  4047de:	f013 0f08 	tst.w	r3, #8
  4047e2:	d00b      	beq.n	4047fc <indev_encoder_proc+0x2c>
        i->proc.wait_until_release      = 0;
  4047e4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
  4047e8:	2200      	movs	r2, #0
  4047ea:	6482      	str	r2, [r0, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
  4047ec:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  4047f0:	f362 0300 	bfi	r3, r2, #0, #1
  4047f4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
  4047f8:	f880 2020 	strb.w	r2, [r0, #32]
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
  4047fc:	f890 7020 	ldrb.w	r7, [r0, #32]
    i->proc.types.keypad.last_state = data->state;
  404800:	7b8b      	ldrb	r3, [r1, #14]
  404802:	f880 3020 	strb.w	r3, [r0, #32]
    i->proc.types.keypad.last_key   = data->key;
  404806:	684b      	ldr	r3, [r1, #4]
  404808:	6243      	str	r3, [r0, #36]	; 0x24
    lv_group_t * g = i->group;
  40480a:	6d86      	ldr	r6, [r0, #88]	; 0x58
    if(g == NULL) return;
  40480c:	b316      	cbz	r6, 404854 <indev_encoder_proc+0x84>
  40480e:	460c      	mov	r4, r1
  404810:	4605      	mov	r5, r0
    indev_obj_act = lv_group_get_focused(g);
  404812:	4630      	mov	r0, r6
  404814:	4b90      	ldr	r3, [pc, #576]	; (404a58 <indev_encoder_proc+0x288>)
  404816:	4798      	blx	r3
  404818:	4b90      	ldr	r3, [pc, #576]	; (404a5c <indev_encoder_proc+0x28c>)
  40481a:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  40481c:	b1d0      	cbz	r0, 404854 <indev_encoder_proc+0x84>
    if(data->state != LV_INDEV_STATE_REL) {
  40481e:	7ba3      	ldrb	r3, [r4, #14]
  404820:	b10b      	cbz	r3, 404826 <indev_encoder_proc+0x56>
        data->enc_diff = 0;
  404822:	2300      	movs	r3, #0
  404824:	81a3      	strh	r3, [r4, #12]
    indev_obj_act = lv_group_get_focused(g);
  404826:	4630      	mov	r0, r6
  404828:	4b8b      	ldr	r3, [pc, #556]	; (404a58 <indev_encoder_proc+0x288>)
  40482a:	4798      	blx	r3
  40482c:	4b8b      	ldr	r3, [pc, #556]	; (404a5c <indev_encoder_proc+0x28c>)
  40482e:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  404830:	b180      	cbz	r0, 404854 <indev_encoder_proc+0x84>
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
  404832:	7ba3      	ldrb	r3, [r4, #14]
  404834:	2b01      	cmp	r3, #1
  404836:	d015      	beq.n	404864 <indev_encoder_proc+0x94>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
  404838:	2b01      	cmp	r3, #1
  40483a:	d068      	beq.n	40490e <indev_encoder_proc+0x13e>
    else if(data->state == LV_INDEV_STATE_REL && last_state == LV_INDEV_STATE_PR) {
  40483c:	b913      	cbnz	r3, 404844 <indev_encoder_proc+0x74>
  40483e:	2f01      	cmp	r7, #1
  404840:	f000 80fe 	beq.w	404a40 <indev_encoder_proc+0x270>
    indev_obj_act = NULL;
  404844:	2200      	movs	r2, #0
  404846:	4b85      	ldr	r3, [pc, #532]	; (404a5c <indev_encoder_proc+0x28c>)
  404848:	601a      	str	r2, [r3, #0]
    if(data->enc_diff != 0) {
  40484a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40484e:	2b00      	cmp	r3, #0
  404850:	f040 81aa 	bne.w	404ba8 <indev_encoder_proc+0x3d8>
}
  404854:	b003      	add	sp, #12
  404856:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  404858:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  40485c:	f013 0f08 	tst.w	r3, #8
  404860:	d0b9      	beq.n	4047d6 <indev_encoder_proc+0x6>
  404862:	4770      	bx	lr
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
  404864:	2f00      	cmp	r7, #0
  404866:	d1e7      	bne.n	404838 <indev_encoder_proc+0x68>
        i->proc.pr_timestamp = lv_tick_get();
  404868:	4b7d      	ldr	r3, [pc, #500]	; (404a60 <indev_encoder_proc+0x290>)
  40486a:	4798      	blx	r3
  40486c:	64a8      	str	r0, [r5, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
  40486e:	6861      	ldr	r1, [r4, #4]
  404870:	290a      	cmp	r1, #10
  404872:	d009      	beq.n	404888 <indev_encoder_proc+0xb8>
        else if(data->key == LV_KEY_LEFT) {
  404874:	2914      	cmp	r1, #20
  404876:	d030      	beq.n	4048da <indev_encoder_proc+0x10a>
        else if(data->key == LV_KEY_RIGHT) {
  404878:	2913      	cmp	r1, #19
  40487a:	d033      	beq.n	4048e4 <indev_encoder_proc+0x114>
        else if(data->key == LV_KEY_ESC) {
  40487c:	291b      	cmp	r1, #27
  40487e:	d036      	beq.n	4048ee <indev_encoder_proc+0x11e>
            lv_group_send_data(g, data->key);
  404880:	4630      	mov	r0, r6
  404882:	4b78      	ldr	r3, [pc, #480]	; (404a64 <indev_encoder_proc+0x294>)
  404884:	4798      	blx	r3
  404886:	e7dd      	b.n	404844 <indev_encoder_proc+0x74>
            bool editable = false;
  404888:	aa02      	add	r2, sp, #8
  40488a:	2300      	movs	r3, #0
  40488c:	f802 3d01 	strb.w	r3, [r2, #-1]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  404890:	4b72      	ldr	r3, [pc, #456]	; (404a5c <indev_encoder_proc+0x28c>)
  404892:	6818      	ldr	r0, [r3, #0]
  404894:	69c3      	ldr	r3, [r0, #28]
  404896:	2119      	movs	r1, #25
  404898:	4798      	blx	r3
            if(lv_group_get_editing(g) == true || editable == false) {
  40489a:	4630      	mov	r0, r6
  40489c:	4b72      	ldr	r3, [pc, #456]	; (404a68 <indev_encoder_proc+0x298>)
  40489e:	4798      	blx	r3
  4048a0:	b918      	cbnz	r0, 4048aa <indev_encoder_proc+0xda>
  4048a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4048a6:	2b00      	cmp	r3, #0
  4048a8:	d1cc      	bne.n	404844 <indev_encoder_proc+0x74>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
  4048aa:	4b6c      	ldr	r3, [pc, #432]	; (404a5c <indev_encoder_proc+0x28c>)
  4048ac:	6818      	ldr	r0, [r3, #0]
  4048ae:	69c3      	ldr	r3, [r0, #28]
  4048b0:	2200      	movs	r2, #0
  4048b2:	210b      	movs	r1, #11
  4048b4:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4048b6:	351c      	adds	r5, #28
  4048b8:	4628      	mov	r0, r5
  4048ba:	4b6c      	ldr	r3, [pc, #432]	; (404a6c <indev_encoder_proc+0x29c>)
  4048bc:	4798      	blx	r3
  4048be:	2800      	cmp	r0, #0
  4048c0:	d1c8      	bne.n	404854 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  4048c2:	2200      	movs	r2, #0
  4048c4:	4611      	mov	r1, r2
  4048c6:	4b65      	ldr	r3, [pc, #404]	; (404a5c <indev_encoder_proc+0x28c>)
  4048c8:	6818      	ldr	r0, [r3, #0]
  4048ca:	4b69      	ldr	r3, [pc, #420]	; (404a70 <indev_encoder_proc+0x2a0>)
  4048cc:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4048ce:	4628      	mov	r0, r5
  4048d0:	4b66      	ldr	r3, [pc, #408]	; (404a6c <indev_encoder_proc+0x29c>)
  4048d2:	4798      	blx	r3
  4048d4:	2800      	cmp	r0, #0
  4048d6:	d0b5      	beq.n	404844 <indev_encoder_proc+0x74>
  4048d8:	e7bc      	b.n	404854 <indev_encoder_proc+0x84>
            data->enc_diff--;
  4048da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4048de:	3b01      	subs	r3, #1
  4048e0:	81a3      	strh	r3, [r4, #12]
  4048e2:	e7af      	b.n	404844 <indev_encoder_proc+0x74>
            data->enc_diff++;
  4048e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4048e8:	3301      	adds	r3, #1
  4048ea:	81a3      	strh	r3, [r4, #12]
  4048ec:	e7aa      	b.n	404844 <indev_encoder_proc+0x74>
            lv_group_send_data(g, LV_KEY_ESC);
  4048ee:	4630      	mov	r0, r6
  4048f0:	4b5c      	ldr	r3, [pc, #368]	; (404a64 <indev_encoder_proc+0x294>)
  4048f2:	4798      	blx	r3
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
  4048f4:	2200      	movs	r2, #0
  4048f6:	2114      	movs	r1, #20
  4048f8:	4b58      	ldr	r3, [pc, #352]	; (404a5c <indev_encoder_proc+0x28c>)
  4048fa:	6818      	ldr	r0, [r3, #0]
  4048fc:	4b5c      	ldr	r3, [pc, #368]	; (404a70 <indev_encoder_proc+0x2a0>)
  4048fe:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404900:	f105 001c 	add.w	r0, r5, #28
  404904:	4b59      	ldr	r3, [pc, #356]	; (404a6c <indev_encoder_proc+0x29c>)
  404906:	4798      	blx	r3
  404908:	2800      	cmp	r0, #0
  40490a:	d09b      	beq.n	404844 <indev_encoder_proc+0x74>
  40490c:	e7a2      	b.n	404854 <indev_encoder_proc+0x84>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
  40490e:	2f01      	cmp	r7, #1
  404910:	d194      	bne.n	40483c <indev_encoder_proc+0x6c>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  404912:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404916:	f013 0f01 	tst.w	r3, #1
  40491a:	d01f      	beq.n	40495c <indev_encoder_proc+0x18c>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
  40491c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404920:	f013 0f01 	tst.w	r3, #1
  404924:	d08e      	beq.n	404844 <indev_encoder_proc+0x74>
  404926:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
  404928:	4b52      	ldr	r3, [pc, #328]	; (404a74 <indev_encoder_proc+0x2a4>)
  40492a:	4798      	blx	r3
  40492c:	8b6b      	ldrh	r3, [r5, #26]
  40492e:	4298      	cmp	r0, r3
  404930:	d988      	bls.n	404844 <indev_encoder_proc+0x74>
            i->proc.longpr_rep_timestamp = lv_tick_get();
  404932:	4b4b      	ldr	r3, [pc, #300]	; (404a60 <indev_encoder_proc+0x290>)
  404934:	4798      	blx	r3
  404936:	64e8      	str	r0, [r5, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  404938:	6861      	ldr	r1, [r4, #4]
  40493a:	290a      	cmp	r1, #10
  40493c:	d05c      	beq.n	4049f8 <indev_encoder_proc+0x228>
            else if(data->key == LV_KEY_LEFT) {
  40493e:	2914      	cmp	r1, #20
  404940:	d074      	beq.n	404a2c <indev_encoder_proc+0x25c>
            else if(data->key == LV_KEY_RIGHT) {
  404942:	2913      	cmp	r1, #19
  404944:	d077      	beq.n	404a36 <indev_encoder_proc+0x266>
                lv_group_send_data(g, data->key);
  404946:	4630      	mov	r0, r6
  404948:	4b46      	ldr	r3, [pc, #280]	; (404a64 <indev_encoder_proc+0x294>)
  40494a:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40494c:	f105 001c 	add.w	r0, r5, #28
  404950:	4b46      	ldr	r3, [pc, #280]	; (404a6c <indev_encoder_proc+0x29c>)
  404952:	4798      	blx	r3
  404954:	2800      	cmp	r0, #0
  404956:	f43f af75 	beq.w	404844 <indev_encoder_proc+0x74>
  40495a:	e77b      	b.n	404854 <indev_encoder_proc+0x84>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  40495c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  40495e:	4b45      	ldr	r3, [pc, #276]	; (404a74 <indev_encoder_proc+0x2a4>)
  404960:	4798      	blx	r3
  404962:	8b2b      	ldrh	r3, [r5, #24]
  404964:	4298      	cmp	r0, r3
  404966:	d9d9      	bls.n	40491c <indev_encoder_proc+0x14c>
            i->proc.long_pr_sent = 1;
  404968:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  40496c:	f043 0301 	orr.w	r3, r3, #1
  404970:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
            i->proc.longpr_rep_timestamp = lv_tick_get();
  404974:	4b3a      	ldr	r3, [pc, #232]	; (404a60 <indev_encoder_proc+0x290>)
  404976:	4798      	blx	r3
  404978:	64e8      	str	r0, [r5, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  40497a:	6863      	ldr	r3, [r4, #4]
  40497c:	2b0a      	cmp	r3, #10
  40497e:	d006      	beq.n	40498e <indev_encoder_proc+0x1be>
            i->proc.long_pr_sent = 1;
  404980:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404984:	f043 0301 	orr.w	r3, r3, #1
  404988:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  40498c:	e75a      	b.n	404844 <indev_encoder_proc+0x74>
                bool editable = false;
  40498e:	aa02      	add	r2, sp, #8
  404990:	2300      	movs	r3, #0
  404992:	f802 3d01 	strb.w	r3, [r2, #-1]!
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  404996:	4b31      	ldr	r3, [pc, #196]	; (404a5c <indev_encoder_proc+0x28c>)
  404998:	6818      	ldr	r0, [r3, #0]
  40499a:	69c3      	ldr	r3, [r0, #28]
  40499c:	2119      	movs	r1, #25
  40499e:	4798      	blx	r3
                if(editable) {
  4049a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4049a4:	b173      	cbz	r3, 4049c4 <indev_encoder_proc+0x1f4>
                    if(_lv_ll_get_len(&g->obj_ll) > 1) {
  4049a6:	4630      	mov	r0, r6
  4049a8:	4b33      	ldr	r3, [pc, #204]	; (404a78 <indev_encoder_proc+0x2a8>)
  4049aa:	4798      	blx	r3
  4049ac:	2801      	cmp	r0, #1
  4049ae:	d9e7      	bls.n	404980 <indev_encoder_proc+0x1b0>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
  4049b0:	4630      	mov	r0, r6
  4049b2:	4b2d      	ldr	r3, [pc, #180]	; (404a68 <indev_encoder_proc+0x298>)
  4049b4:	4798      	blx	r3
  4049b6:	f080 0101 	eor.w	r1, r0, #1
  4049ba:	b2c9      	uxtb	r1, r1
  4049bc:	4630      	mov	r0, r6
  4049be:	4b2f      	ldr	r3, [pc, #188]	; (404a7c <indev_encoder_proc+0x2ac>)
  4049c0:	4798      	blx	r3
  4049c2:	e7dd      	b.n	404980 <indev_encoder_proc+0x1b0>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
  4049c4:	4b25      	ldr	r3, [pc, #148]	; (404a5c <indev_encoder_proc+0x28c>)
  4049c6:	6818      	ldr	r0, [r3, #0]
  4049c8:	69c3      	ldr	r3, [r0, #28]
  4049ca:	2200      	movs	r2, #0
  4049cc:	210f      	movs	r1, #15
  4049ce:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  4049d0:	f105 071c 	add.w	r7, r5, #28
  4049d4:	4638      	mov	r0, r7
  4049d6:	4b25      	ldr	r3, [pc, #148]	; (404a6c <indev_encoder_proc+0x29c>)
  4049d8:	4798      	blx	r3
  4049da:	2800      	cmp	r0, #0
  4049dc:	f47f af3a 	bne.w	404854 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  4049e0:	2200      	movs	r2, #0
  4049e2:	2104      	movs	r1, #4
  4049e4:	4b1d      	ldr	r3, [pc, #116]	; (404a5c <indev_encoder_proc+0x28c>)
  4049e6:	6818      	ldr	r0, [r3, #0]
  4049e8:	4b21      	ldr	r3, [pc, #132]	; (404a70 <indev_encoder_proc+0x2a0>)
  4049ea:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  4049ec:	4638      	mov	r0, r7
  4049ee:	4b1f      	ldr	r3, [pc, #124]	; (404a6c <indev_encoder_proc+0x29c>)
  4049f0:	4798      	blx	r3
  4049f2:	2800      	cmp	r0, #0
  4049f4:	d0c4      	beq.n	404980 <indev_encoder_proc+0x1b0>
  4049f6:	e72d      	b.n	404854 <indev_encoder_proc+0x84>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
  4049f8:	4b18      	ldr	r3, [pc, #96]	; (404a5c <indev_encoder_proc+0x28c>)
  4049fa:	6818      	ldr	r0, [r3, #0]
  4049fc:	69c3      	ldr	r3, [r0, #28]
  4049fe:	2200      	movs	r2, #0
  404a00:	2110      	movs	r1, #16
  404a02:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404a04:	351c      	adds	r5, #28
  404a06:	4628      	mov	r0, r5
  404a08:	4b18      	ldr	r3, [pc, #96]	; (404a6c <indev_encoder_proc+0x29c>)
  404a0a:	4798      	blx	r3
  404a0c:	2800      	cmp	r0, #0
  404a0e:	f47f af21 	bne.w	404854 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  404a12:	2200      	movs	r2, #0
  404a14:	2105      	movs	r1, #5
  404a16:	4b11      	ldr	r3, [pc, #68]	; (404a5c <indev_encoder_proc+0x28c>)
  404a18:	6818      	ldr	r0, [r3, #0]
  404a1a:	4b15      	ldr	r3, [pc, #84]	; (404a70 <indev_encoder_proc+0x2a0>)
  404a1c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404a1e:	4628      	mov	r0, r5
  404a20:	4b12      	ldr	r3, [pc, #72]	; (404a6c <indev_encoder_proc+0x29c>)
  404a22:	4798      	blx	r3
  404a24:	2800      	cmp	r0, #0
  404a26:	f43f af0d 	beq.w	404844 <indev_encoder_proc+0x74>
  404a2a:	e713      	b.n	404854 <indev_encoder_proc+0x84>
                data->enc_diff--;
  404a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a30:	3b01      	subs	r3, #1
  404a32:	81a3      	strh	r3, [r4, #12]
  404a34:	e706      	b.n	404844 <indev_encoder_proc+0x74>
                data->enc_diff++;
  404a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a3a:	3301      	adds	r3, #1
  404a3c:	81a3      	strh	r3, [r4, #12]
  404a3e:	e701      	b.n	404844 <indev_encoder_proc+0x74>
        if(data->key == LV_KEY_ENTER) {
  404a40:	6863      	ldr	r3, [r4, #4]
  404a42:	2b0a      	cmp	r3, #10
  404a44:	d01c      	beq.n	404a80 <indev_encoder_proc+0x2b0>
        i->proc.pr_timestamp = 0;
  404a46:	2200      	movs	r2, #0
  404a48:	64aa      	str	r2, [r5, #72]	; 0x48
        i->proc.long_pr_sent = 0;
  404a4a:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404a4e:	f362 0300 	bfi	r3, r2, #0, #1
  404a52:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  404a56:	e6f5      	b.n	404844 <indev_encoder_proc+0x74>
  404a58:	00403989 	.word	0x00403989
  404a5c:	2040c3f4 	.word	0x2040c3f4
  404a60:	0041602d 	.word	0x0041602d
  404a64:	0040399d 	.word	0x0040399d
  404a68:	00403ae1 	.word	0x00403ae1
  404a6c:	00403b49 	.word	0x00403b49
  404a70:	00405845 	.word	0x00405845
  404a74:	00416049 	.word	0x00416049
  404a78:	004172bd 	.word	0x004172bd
  404a7c:	004039d5 	.word	0x004039d5
            bool editable = false;
  404a80:	aa02      	add	r2, sp, #8
  404a82:	2300      	movs	r3, #0
  404a84:	f802 3d01 	strb.w	r3, [r2, #-1]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  404a88:	69c3      	ldr	r3, [r0, #28]
  404a8a:	2119      	movs	r1, #25
  404a8c:	4798      	blx	r3
            if(editable == false) {
  404a8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404a92:	2b00      	cmp	r3, #0
  404a94:	d044      	beq.n	404b20 <indev_encoder_proc+0x350>
            else if(g->editing) {
  404a96:	7d33      	ldrb	r3, [r6, #20]
  404a98:	f013 0f02 	tst.w	r3, #2
  404a9c:	d079      	beq.n	404b92 <indev_encoder_proc+0x3c2>
                if(!i->proc.long_pr_sent || _lv_ll_get_len(&g->obj_ll) <= 1) {
  404a9e:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404aa2:	f013 0f01 	tst.w	r3, #1
  404aa6:	d004      	beq.n	404ab2 <indev_encoder_proc+0x2e2>
  404aa8:	4630      	mov	r0, r6
  404aaa:	4b60      	ldr	r3, [pc, #384]	; (404c2c <indev_encoder_proc+0x45c>)
  404aac:	4798      	blx	r3
  404aae:	2801      	cmp	r0, #1
  404ab0:	d8c9      	bhi.n	404a46 <indev_encoder_proc+0x276>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  404ab2:	4b5f      	ldr	r3, [pc, #380]	; (404c30 <indev_encoder_proc+0x460>)
  404ab4:	6818      	ldr	r0, [r3, #0]
  404ab6:	69c3      	ldr	r3, [r0, #28]
  404ab8:	2200      	movs	r2, #0
  404aba:	210e      	movs	r1, #14
  404abc:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404abe:	f105 071c 	add.w	r7, r5, #28
  404ac2:	4638      	mov	r0, r7
  404ac4:	4b5b      	ldr	r3, [pc, #364]	; (404c34 <indev_encoder_proc+0x464>)
  404ac6:	4798      	blx	r3
  404ac8:	2800      	cmp	r0, #0
  404aca:	f47f aec3 	bne.w	404854 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  404ace:	2200      	movs	r2, #0
  404ad0:	2103      	movs	r1, #3
  404ad2:	4b57      	ldr	r3, [pc, #348]	; (404c30 <indev_encoder_proc+0x460>)
  404ad4:	6818      	ldr	r0, [r3, #0]
  404ad6:	4b58      	ldr	r3, [pc, #352]	; (404c38 <indev_encoder_proc+0x468>)
  404ad8:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404ada:	4638      	mov	r0, r7
  404adc:	4b55      	ldr	r3, [pc, #340]	; (404c34 <indev_encoder_proc+0x464>)
  404ade:	4798      	blx	r3
  404ae0:	2800      	cmp	r0, #0
  404ae2:	f47f aeb7 	bne.w	404854 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  404ae6:	2200      	movs	r2, #0
  404ae8:	2106      	movs	r1, #6
  404aea:	4b51      	ldr	r3, [pc, #324]	; (404c30 <indev_encoder_proc+0x460>)
  404aec:	6818      	ldr	r0, [r3, #0]
  404aee:	4b52      	ldr	r3, [pc, #328]	; (404c38 <indev_encoder_proc+0x468>)
  404af0:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404af2:	4638      	mov	r0, r7
  404af4:	4b4f      	ldr	r3, [pc, #316]	; (404c34 <indev_encoder_proc+0x464>)
  404af6:	4798      	blx	r3
  404af8:	2800      	cmp	r0, #0
  404afa:	f47f aeab 	bne.w	404854 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  404afe:	2200      	movs	r2, #0
  404b00:	2107      	movs	r1, #7
  404b02:	4b4b      	ldr	r3, [pc, #300]	; (404c30 <indev_encoder_proc+0x460>)
  404b04:	6818      	ldr	r0, [r3, #0]
  404b06:	4b4c      	ldr	r3, [pc, #304]	; (404c38 <indev_encoder_proc+0x468>)
  404b08:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404b0a:	4638      	mov	r0, r7
  404b0c:	4b49      	ldr	r3, [pc, #292]	; (404c34 <indev_encoder_proc+0x464>)
  404b0e:	4798      	blx	r3
  404b10:	2800      	cmp	r0, #0
  404b12:	f47f ae9f 	bne.w	404854 <indev_encoder_proc+0x84>
                    lv_group_send_data(g, LV_KEY_ENTER);
  404b16:	210a      	movs	r1, #10
  404b18:	4630      	mov	r0, r6
  404b1a:	4b48      	ldr	r3, [pc, #288]	; (404c3c <indev_encoder_proc+0x46c>)
  404b1c:	4798      	blx	r3
  404b1e:	e792      	b.n	404a46 <indev_encoder_proc+0x276>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  404b20:	4b43      	ldr	r3, [pc, #268]	; (404c30 <indev_encoder_proc+0x460>)
  404b22:	6818      	ldr	r0, [r3, #0]
  404b24:	69c3      	ldr	r3, [r0, #28]
  404b26:	2200      	movs	r2, #0
  404b28:	210e      	movs	r1, #14
  404b2a:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404b2c:	f105 071c 	add.w	r7, r5, #28
  404b30:	4638      	mov	r0, r7
  404b32:	4b40      	ldr	r3, [pc, #256]	; (404c34 <indev_encoder_proc+0x464>)
  404b34:	4798      	blx	r3
  404b36:	2800      	cmp	r0, #0
  404b38:	f47f ae8c 	bne.w	404854 <indev_encoder_proc+0x84>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  404b3c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404b40:	f013 0f01 	tst.w	r3, #1
  404b44:	d01e      	beq.n	404b84 <indev_encoder_proc+0x3b4>
                if(indev_reset_check(&i->proc)) return;
  404b46:	4638      	mov	r0, r7
  404b48:	4b3a      	ldr	r3, [pc, #232]	; (404c34 <indev_encoder_proc+0x464>)
  404b4a:	4798      	blx	r3
  404b4c:	2800      	cmp	r0, #0
  404b4e:	f47f ae81 	bne.w	404854 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  404b52:	2200      	movs	r2, #0
  404b54:	2106      	movs	r1, #6
  404b56:	4b36      	ldr	r3, [pc, #216]	; (404c30 <indev_encoder_proc+0x460>)
  404b58:	6818      	ldr	r0, [r3, #0]
  404b5a:	4b37      	ldr	r3, [pc, #220]	; (404c38 <indev_encoder_proc+0x468>)
  404b5c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404b5e:	4638      	mov	r0, r7
  404b60:	4b34      	ldr	r3, [pc, #208]	; (404c34 <indev_encoder_proc+0x464>)
  404b62:	4798      	blx	r3
  404b64:	2800      	cmp	r0, #0
  404b66:	f47f ae75 	bne.w	404854 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  404b6a:	2200      	movs	r2, #0
  404b6c:	2107      	movs	r1, #7
  404b6e:	4b30      	ldr	r3, [pc, #192]	; (404c30 <indev_encoder_proc+0x460>)
  404b70:	6818      	ldr	r0, [r3, #0]
  404b72:	4b31      	ldr	r3, [pc, #196]	; (404c38 <indev_encoder_proc+0x468>)
  404b74:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404b76:	4638      	mov	r0, r7
  404b78:	4b2e      	ldr	r3, [pc, #184]	; (404c34 <indev_encoder_proc+0x464>)
  404b7a:	4798      	blx	r3
  404b7c:	2800      	cmp	r0, #0
  404b7e:	f43f af62 	beq.w	404a46 <indev_encoder_proc+0x276>
  404b82:	e667      	b.n	404854 <indev_encoder_proc+0x84>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  404b84:	2200      	movs	r2, #0
  404b86:	2103      	movs	r1, #3
  404b88:	4b29      	ldr	r3, [pc, #164]	; (404c30 <indev_encoder_proc+0x460>)
  404b8a:	6818      	ldr	r0, [r3, #0]
  404b8c:	4b2a      	ldr	r3, [pc, #168]	; (404c38 <indev_encoder_proc+0x468>)
  404b8e:	4798      	blx	r3
  404b90:	e7d9      	b.n	404b46 <indev_encoder_proc+0x376>
            else if(editable && !g->editing && !i->proc.long_pr_sent) {
  404b92:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404b96:	f013 0f01 	tst.w	r3, #1
  404b9a:	f47f af54 	bne.w	404a46 <indev_encoder_proc+0x276>
                lv_group_set_editing(g, true); /*Set edit mode*/
  404b9e:	2101      	movs	r1, #1
  404ba0:	4630      	mov	r0, r6
  404ba2:	4b27      	ldr	r3, [pc, #156]	; (404c40 <indev_encoder_proc+0x470>)
  404ba4:	4798      	blx	r3
  404ba6:	e74e      	b.n	404a46 <indev_encoder_proc+0x276>
        if(lv_group_get_editing(g)) {
  404ba8:	4630      	mov	r0, r6
  404baa:	4b26      	ldr	r3, [pc, #152]	; (404c44 <indev_encoder_proc+0x474>)
  404bac:	4798      	blx	r3
  404bae:	b1f8      	cbz	r0, 404bf0 <indev_encoder_proc+0x420>
            if(data->enc_diff < 0) {
  404bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bb4:	2b00      	cmp	r3, #0
  404bb6:	db0f      	blt.n	404bd8 <indev_encoder_proc+0x408>
            else if(data->enc_diff > 0) {
  404bb8:	2b00      	cmp	r3, #0
  404bba:	f77f ae4b 	ble.w	404854 <indev_encoder_proc+0x84>
  404bbe:	2500      	movs	r5, #0
  404bc0:	e011      	b.n	404be6 <indev_encoder_proc+0x416>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
  404bc2:	2114      	movs	r1, #20
  404bc4:	4630      	mov	r0, r6
  404bc6:	4b1d      	ldr	r3, [pc, #116]	; (404c3c <indev_encoder_proc+0x46c>)
  404bc8:	4798      	blx	r3
  404bca:	3501      	adds	r5, #1
  404bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bd0:	425b      	negs	r3, r3
  404bd2:	429d      	cmp	r5, r3
  404bd4:	dbf5      	blt.n	404bc2 <indev_encoder_proc+0x3f2>
  404bd6:	e63d      	b.n	404854 <indev_encoder_proc+0x84>
  404bd8:	2500      	movs	r5, #0
  404bda:	e7f7      	b.n	404bcc <indev_encoder_proc+0x3fc>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
  404bdc:	2113      	movs	r1, #19
  404bde:	4630      	mov	r0, r6
  404be0:	4b16      	ldr	r3, [pc, #88]	; (404c3c <indev_encoder_proc+0x46c>)
  404be2:	4798      	blx	r3
  404be4:	3501      	adds	r5, #1
  404be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bea:	429d      	cmp	r5, r3
  404bec:	dbf6      	blt.n	404bdc <indev_encoder_proc+0x40c>
  404bee:	e631      	b.n	404854 <indev_encoder_proc+0x84>
            if(data->enc_diff < 0) {
  404bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bf4:	2b00      	cmp	r3, #0
  404bf6:	db0e      	blt.n	404c16 <indev_encoder_proc+0x446>
            else if(data->enc_diff > 0) {
  404bf8:	2b00      	cmp	r3, #0
  404bfa:	f77f ae2b 	ble.w	404854 <indev_encoder_proc+0x84>
  404bfe:	2500      	movs	r5, #0
  404c00:	e00f      	b.n	404c22 <indev_encoder_proc+0x452>
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
  404c02:	4630      	mov	r0, r6
  404c04:	4b10      	ldr	r3, [pc, #64]	; (404c48 <indev_encoder_proc+0x478>)
  404c06:	4798      	blx	r3
  404c08:	3501      	adds	r5, #1
  404c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c0e:	425b      	negs	r3, r3
  404c10:	429d      	cmp	r5, r3
  404c12:	dbf6      	blt.n	404c02 <indev_encoder_proc+0x432>
  404c14:	e61e      	b.n	404854 <indev_encoder_proc+0x84>
  404c16:	2500      	movs	r5, #0
  404c18:	e7f7      	b.n	404c0a <indev_encoder_proc+0x43a>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
  404c1a:	4630      	mov	r0, r6
  404c1c:	4b0b      	ldr	r3, [pc, #44]	; (404c4c <indev_encoder_proc+0x47c>)
  404c1e:	4798      	blx	r3
  404c20:	3501      	adds	r5, #1
  404c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c26:	429d      	cmp	r5, r3
  404c28:	dbf7      	blt.n	404c1a <indev_encoder_proc+0x44a>
  404c2a:	e613      	b.n	404854 <indev_encoder_proc+0x84>
  404c2c:	004172bd 	.word	0x004172bd
  404c30:	2040c3f4 	.word	0x2040c3f4
  404c34:	00403b49 	.word	0x00403b49
  404c38:	00405845 	.word	0x00405845
  404c3c:	0040399d 	.word	0x0040399d
  404c40:	004039d5 	.word	0x004039d5
  404c44:	00403ae1 	.word	0x00403ae1
  404c48:	00403805 	.word	0x00403805
  404c4c:	004037ed 	.word	0x004037ed

00404c50 <lv_indev_get_act>:
}
  404c50:	4b01      	ldr	r3, [pc, #4]	; (404c58 <lv_indev_get_act+0x8>)
  404c52:	6818      	ldr	r0, [r3, #0]
  404c54:	4770      	bx	lr
  404c56:	bf00      	nop
  404c58:	2040c3f0 	.word	0x2040c3f0

00404c5c <lv_indev_reset>:
    if(indev) {
  404c5c:	b1b0      	cbz	r0, 404c8c <lv_indev_reset+0x30>
  404c5e:	4603      	mov	r3, r0
        indev->proc.reset_query = 1;
  404c60:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
  404c64:	f042 0202 	orr.w	r2, r2, #2
  404c68:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
  404c6c:	4a17      	ldr	r2, [pc, #92]	; (404ccc <lv_indev_reset+0x70>)
  404c6e:	6812      	ldr	r2, [r2, #0]
  404c70:	4290      	cmp	r0, r2
  404c72:	d004      	beq.n	404c7e <lv_indev_reset+0x22>
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
  404c74:	b139      	cbz	r1, 404c86 <lv_indev_reset+0x2a>
  404c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  404c78:	4291      	cmp	r1, r2
  404c7a:	d004      	beq.n	404c86 <lv_indev_reset+0x2a>
  404c7c:	4770      	bx	lr
        if(indev_act == indev) indev_obj_act = NULL;
  404c7e:	2000      	movs	r0, #0
  404c80:	4a13      	ldr	r2, [pc, #76]	; (404cd0 <lv_indev_reset+0x74>)
  404c82:	6010      	str	r0, [r2, #0]
  404c84:	e7f6      	b.n	404c74 <lv_indev_reset+0x18>
            indev->proc.types.pointer.last_pressed = NULL;
  404c86:	2200      	movs	r2, #0
  404c88:	63da      	str	r2, [r3, #60]	; 0x3c
  404c8a:	4770      	bx	lr
{
  404c8c:	b510      	push	{r4, lr}
  404c8e:	460c      	mov	r4, r1
        lv_indev_t * i = lv_indev_get_next(NULL);
  404c90:	2000      	movs	r0, #0
  404c92:	4b10      	ldr	r3, [pc, #64]	; (404cd4 <lv_indev_reset+0x78>)
  404c94:	4798      	blx	r3
        while(i) {
  404c96:	e007      	b.n	404ca8 <lv_indev_reset+0x4c>
            if(indev_act == i) indev_obj_act = NULL;
  404c98:	2200      	movs	r2, #0
  404c9a:	4b0d      	ldr	r3, [pc, #52]	; (404cd0 <lv_indev_reset+0x74>)
  404c9c:	601a      	str	r2, [r3, #0]
  404c9e:	e00e      	b.n	404cbe <lv_indev_reset+0x62>
                i->proc.types.pointer.last_pressed = NULL;
  404ca0:	2300      	movs	r3, #0
  404ca2:	63c3      	str	r3, [r0, #60]	; 0x3c
            i = lv_indev_get_next(i);
  404ca4:	4b0b      	ldr	r3, [pc, #44]	; (404cd4 <lv_indev_reset+0x78>)
  404ca6:	4798      	blx	r3
        while(i) {
  404ca8:	b178      	cbz	r0, 404cca <lv_indev_reset+0x6e>
            i->proc.reset_query = 1;
  404caa:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404cae:	f043 0302 	orr.w	r3, r3, #2
  404cb2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
  404cb6:	4b05      	ldr	r3, [pc, #20]	; (404ccc <lv_indev_reset+0x70>)
  404cb8:	681b      	ldr	r3, [r3, #0]
  404cba:	4298      	cmp	r0, r3
  404cbc:	d0ec      	beq.n	404c98 <lv_indev_reset+0x3c>
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
  404cbe:	2c00      	cmp	r4, #0
  404cc0:	d0ee      	beq.n	404ca0 <lv_indev_reset+0x44>
  404cc2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  404cc4:	429c      	cmp	r4, r3
  404cc6:	d1ed      	bne.n	404ca4 <lv_indev_reset+0x48>
  404cc8:	e7ea      	b.n	404ca0 <lv_indev_reset+0x44>
  404cca:	bd10      	pop	{r4, pc}
  404ccc:	2040c3f0 	.word	0x2040c3f0
  404cd0:	2040c3f4 	.word	0x2040c3f4
  404cd4:	00415fa1 	.word	0x00415fa1

00404cd8 <_lv_indev_init>:
{
  404cd8:	b508      	push	{r3, lr}
    lv_indev_reset(NULL, NULL); /*Reset all input devices*/
  404cda:	2100      	movs	r1, #0
  404cdc:	4608      	mov	r0, r1
  404cde:	4b01      	ldr	r3, [pc, #4]	; (404ce4 <_lv_indev_init+0xc>)
  404ce0:	4798      	blx	r3
  404ce2:	bd08      	pop	{r3, pc}
  404ce4:	00404c5d 	.word	0x00404c5d

00404ce8 <lv_indev_is_dragging>:
    if(indev == NULL) return false;
  404ce8:	b148      	cbz	r0, 404cfe <lv_indev_is_dragging+0x16>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
  404cea:	7803      	ldrb	r3, [r0, #0]
  404cec:	2b01      	cmp	r3, #1
  404cee:	bf18      	it	ne
  404cf0:	2b03      	cmpne	r3, #3
  404cf2:	d106      	bne.n	404d02 <lv_indev_is_dragging+0x1a>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
  404cf4:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
  404cf8:	f3c0 0040 	ubfx	r0, r0, #1, #1
  404cfc:	4770      	bx	lr
    if(indev == NULL) return false;
  404cfe:	2000      	movs	r0, #0
  404d00:	4770      	bx	lr
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
  404d02:	2000      	movs	r0, #0
}
  404d04:	4770      	bx	lr
	...

00404d08 <lv_indev_get_obj_act>:
}
  404d08:	4b01      	ldr	r3, [pc, #4]	; (404d10 <lv_indev_get_obj_act+0x8>)
  404d0a:	6818      	ldr	r0, [r3, #0]
  404d0c:	4770      	bx	lr
  404d0e:	bf00      	nop
  404d10:	2040c3f4 	.word	0x2040c3f4

00404d14 <lv_indev_search_obj>:
{
  404d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404d18:	4680      	mov	r8, r0
  404d1a:	460f      	mov	r7, r1
    if(lv_obj_hittest(obj, point)) {
  404d1c:	4b21      	ldr	r3, [pc, #132]	; (404da4 <lv_indev_search_obj+0x90>)
  404d1e:	4798      	blx	r3
  404d20:	2800      	cmp	r0, #0
  404d22:	d03c      	beq.n	404d9e <lv_indev_search_obj+0x8a>
        _LV_LL_READ(obj->child_ll, i) {
  404d24:	f108 0604 	add.w	r6, r8, #4
  404d28:	4630      	mov	r0, r6
  404d2a:	4b1f      	ldr	r3, [pc, #124]	; (404da8 <lv_indev_search_obj+0x94>)
  404d2c:	4798      	blx	r3
  404d2e:	4604      	mov	r4, r0
    lv_obj_t * found_p = NULL;
  404d30:	2500      	movs	r5, #0
        _LV_LL_READ(obj->child_ll, i) {
  404d32:	b15c      	cbz	r4, 404d4c <lv_indev_search_obj+0x38>
            found_p = lv_indev_search_obj(i, point);
  404d34:	4639      	mov	r1, r7
  404d36:	4620      	mov	r0, r4
  404d38:	f7ff ffec 	bl	404d14 <lv_indev_search_obj>
            if(found_p != NULL) {
  404d3c:	4605      	mov	r5, r0
  404d3e:	b928      	cbnz	r0, 404d4c <lv_indev_search_obj+0x38>
        _LV_LL_READ(obj->child_ll, i) {
  404d40:	4621      	mov	r1, r4
  404d42:	4630      	mov	r0, r6
  404d44:	4b19      	ldr	r3, [pc, #100]	; (404dac <lv_indev_search_obj+0x98>)
  404d46:	4798      	blx	r3
  404d48:	4604      	mov	r4, r0
  404d4a:	e7f2      	b.n	404d32 <lv_indev_search_obj+0x1e>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
  404d4c:	b115      	cbz	r5, 404d54 <lv_indev_search_obj+0x40>
}
  404d4e:	4628      	mov	r0, r5
  404d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
  404d54:	4640      	mov	r0, r8
  404d56:	4b16      	ldr	r3, [pc, #88]	; (404db0 <lv_indev_search_obj+0x9c>)
  404d58:	4798      	blx	r3
  404d5a:	2800      	cmp	r0, #0
  404d5c:	d0f7      	beq.n	404d4e <lv_indev_search_obj+0x3a>
  404d5e:	4644      	mov	r4, r8
  404d60:	e003      	b.n	404d6a <lv_indev_search_obj+0x56>
                hidden_i = lv_obj_get_parent(hidden_i);
  404d62:	4620      	mov	r0, r4
  404d64:	4b13      	ldr	r3, [pc, #76]	; (404db4 <lv_indev_search_obj+0xa0>)
  404d66:	4798      	blx	r3
  404d68:	4604      	mov	r4, r0
            while(hidden_i != NULL) {
  404d6a:	b124      	cbz	r4, 404d76 <lv_indev_search_obj+0x62>
                if(lv_obj_get_hidden(hidden_i) == true) break;
  404d6c:	4620      	mov	r0, r4
  404d6e:	4b12      	ldr	r3, [pc, #72]	; (404db8 <lv_indev_search_obj+0xa4>)
  404d70:	4798      	blx	r3
  404d72:	2800      	cmp	r0, #0
  404d74:	d0f5      	beq.n	404d62 <lv_indev_search_obj+0x4e>
            if(lv_obj_is_protected(obj, LV_PROTECT_EVENT_TO_DISABLED) == false) {
  404d76:	2140      	movs	r1, #64	; 0x40
  404d78:	4640      	mov	r0, r8
  404d7a:	4b10      	ldr	r3, [pc, #64]	; (404dbc <lv_indev_search_obj+0xa8>)
  404d7c:	4798      	blx	r3
  404d7e:	b950      	cbnz	r0, 404d96 <lv_indev_search_obj+0x82>
                if(hidden_i == NULL && (lv_obj_get_state(obj, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) == false) found_p = obj;
  404d80:	2c00      	cmp	r4, #0
  404d82:	d1e4      	bne.n	404d4e <lv_indev_search_obj+0x3a>
  404d84:	2100      	movs	r1, #0
  404d86:	4640      	mov	r0, r8
  404d88:	4b0d      	ldr	r3, [pc, #52]	; (404dc0 <lv_indev_search_obj+0xac>)
  404d8a:	4798      	blx	r3
  404d8c:	f010 0f20 	tst.w	r0, #32
  404d90:	d1dd      	bne.n	404d4e <lv_indev_search_obj+0x3a>
  404d92:	4645      	mov	r5, r8
  404d94:	e7db      	b.n	404d4e <lv_indev_search_obj+0x3a>
                if(hidden_i == NULL) found_p = obj;
  404d96:	2c00      	cmp	r4, #0
  404d98:	d1d9      	bne.n	404d4e <lv_indev_search_obj+0x3a>
  404d9a:	4645      	mov	r5, r8
    return found_p;
  404d9c:	e7d7      	b.n	404d4e <lv_indev_search_obj+0x3a>
    lv_obj_t * found_p = NULL;
  404d9e:	2500      	movs	r5, #0
  404da0:	e7d5      	b.n	404d4e <lv_indev_search_obj+0x3a>
  404da2:	bf00      	nop
  404da4:	00408259 	.word	0x00408259
  404da8:	004170b9 	.word	0x004170b9
  404dac:	004170cd 	.word	0x004170cd
  404db0:	004066c5 	.word	0x004066c5
  404db4:	00405955 	.word	0x00405955
  404db8:	00405d71 	.word	0x00405d71
  404dbc:	00406d55 	.word	0x00406d55
  404dc0:	00406d89 	.word	0x00406d89

00404dc4 <indev_proc_press>:
    indev_obj_act = proc->types.pointer.act_obj;
  404dc4:	6983      	ldr	r3, [r0, #24]
  404dc6:	4a5d      	ldr	r2, [pc, #372]	; (404f3c <indev_proc_press+0x178>)
  404dc8:	6013      	str	r3, [r2, #0]
    if(proc->wait_until_release != 0) return;
  404dca:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
  404dce:	f012 0f08 	tst.w	r2, #8
  404dd2:	f040 81bc 	bne.w	40514e <indev_proc_press+0x38a>
{
  404dd6:	b570      	push	{r4, r5, r6, lr}
  404dd8:	4604      	mov	r4, r0
    lv_disp_t * disp = indev_act->driver.disp;
  404dda:	4a59      	ldr	r2, [pc, #356]	; (404f40 <indev_proc_press+0x17c>)
  404ddc:	6812      	ldr	r2, [r2, #0]
  404dde:	68d5      	ldr	r5, [r2, #12]
    if(indev_obj_act == NULL) {
  404de0:	b343      	cbz	r3, 404e34 <indev_proc_press+0x70>
    else if(proc->types.pointer.drag_in_prog == 0 &&
  404de2:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
  404de6:	f012 0f02 	tst.w	r2, #2
  404dea:	d045      	beq.n	404e78 <indev_proc_press+0xb4>
    bool new_obj_searched = false;
  404dec:	2300      	movs	r3, #0
    if(new_obj_searched && proc->types.pointer.last_obj) {
  404dee:	b13b      	cbz	r3, 404e00 <indev_proc_press+0x3c>
  404df0:	69e3      	ldr	r3, [r4, #28]
  404df2:	b12b      	cbz	r3, 404e00 <indev_proc_press+0x3c>
        proc->types.pointer.drag_throw_vect.x = 0;
  404df4:	2300      	movs	r3, #0
  404df6:	82a3      	strh	r3, [r4, #20]
        proc->types.pointer.drag_throw_vect.y = 0;
  404df8:	82e3      	strh	r3, [r4, #22]
        indev_drag_throw(proc);
  404dfa:	4620      	mov	r0, r4
  404dfc:	4b51      	ldr	r3, [pc, #324]	; (404f44 <indev_proc_press+0x180>)
  404dfe:	4798      	blx	r3
    if(indev_obj_act != proc->types.pointer.act_obj) {
  404e00:	69a5      	ldr	r5, [r4, #24]
  404e02:	4b4e      	ldr	r3, [pc, #312]	; (404f3c <indev_proc_press+0x178>)
  404e04:	681b      	ldr	r3, [r3, #0]
  404e06:	429d      	cmp	r5, r3
  404e08:	f000 80de 	beq.w	404fc8 <indev_proc_press+0x204>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
  404e0c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  404e10:	8123      	strh	r3, [r4, #8]
        proc->types.pointer.last_point.y = proc->types.pointer.act_point.y;
  404e12:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  404e16:	8163      	strh	r3, [r4, #10]
        if(proc->types.pointer.act_obj != NULL) {
  404e18:	2d00      	cmp	r5, #0
  404e1a:	d060      	beq.n	404ede <indev_proc_press+0x11a>
            last_obj->signal_cb(last_obj, LV_SIGNAL_PRESS_LOST, indev_act);
  404e1c:	69eb      	ldr	r3, [r5, #28]
  404e1e:	4a48      	ldr	r2, [pc, #288]	; (404f40 <indev_proc_press+0x17c>)
  404e20:	6812      	ldr	r2, [r2, #0]
  404e22:	210d      	movs	r1, #13
  404e24:	4628      	mov	r0, r5
  404e26:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404e28:	4620      	mov	r0, r4
  404e2a:	4b47      	ldr	r3, [pc, #284]	; (404f48 <indev_proc_press+0x184>)
  404e2c:	4798      	blx	r3
  404e2e:	2800      	cmp	r0, #0
  404e30:	d04b      	beq.n	404eca <indev_proc_press+0x106>
  404e32:	bd70      	pop	{r4, r5, r6, pc}
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
  404e34:	4628      	mov	r0, r5
  404e36:	4b45      	ldr	r3, [pc, #276]	; (404f4c <indev_proc_press+0x188>)
  404e38:	4798      	blx	r3
  404e3a:	1d26      	adds	r6, r4, #4
  404e3c:	4631      	mov	r1, r6
  404e3e:	4b44      	ldr	r3, [pc, #272]	; (404f50 <indev_proc_press+0x18c>)
  404e40:	4798      	blx	r3
  404e42:	4b3e      	ldr	r3, [pc, #248]	; (404f3c <indev_proc_press+0x178>)
  404e44:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404e46:	b120      	cbz	r0, 404e52 <indev_proc_press+0x8e>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404e48:	4b3c      	ldr	r3, [pc, #240]	; (404f3c <indev_proc_press+0x178>)
  404e4a:	681b      	ldr	r3, [r3, #0]
  404e4c:	b153      	cbz	r3, 404e64 <indev_proc_press+0xa0>
        new_obj_searched = true;
  404e4e:	2301      	movs	r3, #1
  404e50:	e7cd      	b.n	404dee <indev_proc_press+0x2a>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404e52:	4628      	mov	r0, r5
  404e54:	4b3f      	ldr	r3, [pc, #252]	; (404f54 <indev_proc_press+0x190>)
  404e56:	4798      	blx	r3
  404e58:	4631      	mov	r1, r6
  404e5a:	4b3d      	ldr	r3, [pc, #244]	; (404f50 <indev_proc_press+0x18c>)
  404e5c:	4798      	blx	r3
  404e5e:	4b37      	ldr	r3, [pc, #220]	; (404f3c <indev_proc_press+0x178>)
  404e60:	6018      	str	r0, [r3, #0]
  404e62:	e7f1      	b.n	404e48 <indev_proc_press+0x84>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404e64:	4628      	mov	r0, r5
  404e66:	4b3c      	ldr	r3, [pc, #240]	; (404f58 <indev_proc_press+0x194>)
  404e68:	4798      	blx	r3
  404e6a:	4631      	mov	r1, r6
  404e6c:	4b38      	ldr	r3, [pc, #224]	; (404f50 <indev_proc_press+0x18c>)
  404e6e:	4798      	blx	r3
  404e70:	4b32      	ldr	r3, [pc, #200]	; (404f3c <indev_proc_press+0x178>)
  404e72:	6018      	str	r0, [r3, #0]
        new_obj_searched = true;
  404e74:	2301      	movs	r3, #1
  404e76:	e7ba      	b.n	404dee <indev_proc_press+0x2a>
            lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST) == false) {
  404e78:	2110      	movs	r1, #16
  404e7a:	4618      	mov	r0, r3
  404e7c:	4b37      	ldr	r3, [pc, #220]	; (404f5c <indev_proc_press+0x198>)
  404e7e:	4798      	blx	r3
    else if(proc->types.pointer.drag_in_prog == 0 &&
  404e80:	b108      	cbz	r0, 404e86 <indev_proc_press+0xc2>
    bool new_obj_searched = false;
  404e82:	2300      	movs	r3, #0
  404e84:	e7b3      	b.n	404dee <indev_proc_press+0x2a>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
  404e86:	4628      	mov	r0, r5
  404e88:	4b30      	ldr	r3, [pc, #192]	; (404f4c <indev_proc_press+0x188>)
  404e8a:	4798      	blx	r3
  404e8c:	1d26      	adds	r6, r4, #4
  404e8e:	4631      	mov	r1, r6
  404e90:	4b2f      	ldr	r3, [pc, #188]	; (404f50 <indev_proc_press+0x18c>)
  404e92:	4798      	blx	r3
  404e94:	4b29      	ldr	r3, [pc, #164]	; (404f3c <indev_proc_press+0x178>)
  404e96:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404e98:	b120      	cbz	r0, 404ea4 <indev_proc_press+0xe0>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404e9a:	4b28      	ldr	r3, [pc, #160]	; (404f3c <indev_proc_press+0x178>)
  404e9c:	681b      	ldr	r3, [r3, #0]
  404e9e:	b153      	cbz	r3, 404eb6 <indev_proc_press+0xf2>
        new_obj_searched = true;
  404ea0:	2301      	movs	r3, #1
  404ea2:	e7a4      	b.n	404dee <indev_proc_press+0x2a>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404ea4:	4628      	mov	r0, r5
  404ea6:	4b2b      	ldr	r3, [pc, #172]	; (404f54 <indev_proc_press+0x190>)
  404ea8:	4798      	blx	r3
  404eaa:	4631      	mov	r1, r6
  404eac:	4b28      	ldr	r3, [pc, #160]	; (404f50 <indev_proc_press+0x18c>)
  404eae:	4798      	blx	r3
  404eb0:	4b22      	ldr	r3, [pc, #136]	; (404f3c <indev_proc_press+0x178>)
  404eb2:	6018      	str	r0, [r3, #0]
  404eb4:	e7f1      	b.n	404e9a <indev_proc_press+0xd6>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404eb6:	4628      	mov	r0, r5
  404eb8:	4b27      	ldr	r3, [pc, #156]	; (404f58 <indev_proc_press+0x194>)
  404eba:	4798      	blx	r3
  404ebc:	4631      	mov	r1, r6
  404ebe:	4b24      	ldr	r3, [pc, #144]	; (404f50 <indev_proc_press+0x18c>)
  404ec0:	4798      	blx	r3
  404ec2:	4b1e      	ldr	r3, [pc, #120]	; (404f3c <indev_proc_press+0x178>)
  404ec4:	6018      	str	r0, [r3, #0]
        new_obj_searched = true;
  404ec6:	2301      	movs	r3, #1
  404ec8:	e791      	b.n	404dee <indev_proc_press+0x2a>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, NULL);
  404eca:	2200      	movs	r2, #0
  404ecc:	2102      	movs	r1, #2
  404ece:	4628      	mov	r0, r5
  404ed0:	4b23      	ldr	r3, [pc, #140]	; (404f60 <indev_proc_press+0x19c>)
  404ed2:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404ed4:	4620      	mov	r0, r4
  404ed6:	4b1c      	ldr	r3, [pc, #112]	; (404f48 <indev_proc_press+0x184>)
  404ed8:	4798      	blx	r3
  404eda:	2800      	cmp	r0, #0
  404edc:	d1a9      	bne.n	404e32 <indev_proc_press+0x6e>
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
  404ede:	4b17      	ldr	r3, [pc, #92]	; (404f3c <indev_proc_press+0x178>)
  404ee0:	681b      	ldr	r3, [r3, #0]
  404ee2:	61a3      	str	r3, [r4, #24]
        proc->types.pointer.last_obj = indev_obj_act;
  404ee4:	61e3      	str	r3, [r4, #28]
        if(indev_obj_act != NULL) {
  404ee6:	2b00      	cmp	r3, #0
  404ee8:	d06e      	beq.n	404fc8 <indev_proc_press+0x204>
            proc->pr_timestamp                 = lv_tick_get();
  404eea:	4b1e      	ldr	r3, [pc, #120]	; (404f64 <indev_proc_press+0x1a0>)
  404eec:	4798      	blx	r3
  404eee:	62e0      	str	r0, [r4, #44]	; 0x2c
            proc->long_pr_sent                 = 0;
  404ef0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404ef4:	f36f 0300 	bfc	r3, #0, #1
  404ef8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            proc->types.pointer.drag_limit_out = 0;
  404efc:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
            proc->types.pointer.drag_sum.x     = 0;
  404f00:	2300      	movs	r3, #0
  404f02:	8223      	strh	r3, [r4, #16]
            proc->types.pointer.drag_sum.y     = 0;
  404f04:	8263      	strh	r3, [r4, #18]
            proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  404f06:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
  404f0a:	2103      	movs	r1, #3
  404f0c:	f361 0284 	bfi	r2, r1, #2, #3
            proc->types.pointer.gesture_sent   = 0;
  404f10:	f363 1245 	bfi	r2, r3, #5, #1
  404f14:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
            proc->types.pointer.gesture_sum.x  = 0;
  404f18:	84e3      	strh	r3, [r4, #38]	; 0x26
            proc->types.pointer.gesture_sum.y  = 0;
  404f1a:	8523      	strh	r3, [r4, #40]	; 0x28
            proc->types.pointer.vect.x         = 0;
  404f1c:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y         = 0;
  404f1e:	81e3      	strh	r3, [r4, #14]
            lv_obj_t * i        = indev_obj_act;
  404f20:	4a06      	ldr	r2, [pc, #24]	; (404f3c <indev_proc_press+0x178>)
  404f22:	6810      	ldr	r0, [r2, #0]
            lv_obj_t * last_top = NULL;
  404f24:	461d      	mov	r5, r3
            while(i != NULL) {
  404f26:	e001      	b.n	404f2c <indev_proc_press+0x168>
                i = lv_obj_get_parent(i);
  404f28:	4b0f      	ldr	r3, [pc, #60]	; (404f68 <indev_proc_press+0x1a4>)
  404f2a:	4798      	blx	r3
            while(i != NULL) {
  404f2c:	b1f0      	cbz	r0, 404f6c <indev_proc_press+0x1a8>
                if(i->top) last_top = i;
  404f2e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  404f32:	f013 0f20 	tst.w	r3, #32
  404f36:	d0f7      	beq.n	404f28 <indev_proc_press+0x164>
  404f38:	4605      	mov	r5, r0
  404f3a:	e7f5      	b.n	404f28 <indev_proc_press+0x164>
  404f3c:	2040c3f4 	.word	0x2040c3f4
  404f40:	2040c3f0 	.word	0x2040c3f0
  404f44:	00403b8d 	.word	0x00403b8d
  404f48:	00403b49 	.word	0x00403b49
  404f4c:	004036ad 	.word	0x004036ad
  404f50:	00404d15 	.word	0x00404d15
  404f54:	00403691 	.word	0x00403691
  404f58:	00403659 	.word	0x00403659
  404f5c:	00406d55 	.word	0x00406d55
  404f60:	00405845 	.word	0x00405845
  404f64:	0041602d 	.word	0x0041602d
  404f68:	00405955 	.word	0x00405955
            if(last_top != NULL) {
  404f6c:	b115      	cbz	r5, 404f74 <indev_proc_press+0x1b0>
                lv_obj_move_foreground(last_top);
  404f6e:	4628      	mov	r0, r5
  404f70:	4b77      	ldr	r3, [pc, #476]	; (405150 <indev_proc_press+0x38c>)
  404f72:	4798      	blx	r3
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, indev_act);
  404f74:	4b77      	ldr	r3, [pc, #476]	; (405154 <indev_proc_press+0x390>)
  404f76:	6818      	ldr	r0, [r3, #0]
  404f78:	69c3      	ldr	r3, [r0, #28]
  404f7a:	4a77      	ldr	r2, [pc, #476]	; (405158 <indev_proc_press+0x394>)
  404f7c:	6812      	ldr	r2, [r2, #0]
  404f7e:	210b      	movs	r1, #11
  404f80:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404f82:	4620      	mov	r0, r4
  404f84:	4b75      	ldr	r3, [pc, #468]	; (40515c <indev_proc_press+0x398>)
  404f86:	4798      	blx	r3
  404f88:	2800      	cmp	r0, #0
  404f8a:	f47f af52 	bne.w	404e32 <indev_proc_press+0x6e>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  404f8e:	2200      	movs	r2, #0
  404f90:	4611      	mov	r1, r2
  404f92:	4b70      	ldr	r3, [pc, #448]	; (405154 <indev_proc_press+0x390>)
  404f94:	6818      	ldr	r0, [r3, #0]
  404f96:	4b72      	ldr	r3, [pc, #456]	; (405160 <indev_proc_press+0x39c>)
  404f98:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404f9a:	4620      	mov	r0, r4
  404f9c:	4b6f      	ldr	r3, [pc, #444]	; (40515c <indev_proc_press+0x398>)
  404f9e:	4798      	blx	r3
  404fa0:	2800      	cmp	r0, #0
  404fa2:	f47f af46 	bne.w	404e32 <indev_proc_press+0x6e>
            if(indev_act->proc.wait_until_release) return;
  404fa6:	4b6c      	ldr	r3, [pc, #432]	; (405158 <indev_proc_press+0x394>)
  404fa8:	6818      	ldr	r0, [r3, #0]
  404faa:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404fae:	f013 0f08 	tst.w	r3, #8
  404fb2:	f47f af3e 	bne.w	404e32 <indev_proc_press+0x6e>
            indev_click_focus(&indev_act->proc);
  404fb6:	301c      	adds	r0, #28
  404fb8:	4b6a      	ldr	r3, [pc, #424]	; (405164 <indev_proc_press+0x3a0>)
  404fba:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404fbc:	4620      	mov	r0, r4
  404fbe:	4b67      	ldr	r3, [pc, #412]	; (40515c <indev_proc_press+0x398>)
  404fc0:	4798      	blx	r3
  404fc2:	2800      	cmp	r0, #0
  404fc4:	f47f af35 	bne.w	404e32 <indev_proc_press+0x6e>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
  404fc8:	88a0      	ldrh	r0, [r4, #4]
  404fca:	8923      	ldrh	r3, [r4, #8]
  404fcc:	1ac0      	subs	r0, r0, r3
  404fce:	b200      	sxth	r0, r0
  404fd0:	81a0      	strh	r0, [r4, #12]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
  404fd2:	88e1      	ldrh	r1, [r4, #6]
  404fd4:	8963      	ldrh	r3, [r4, #10]
  404fd6:	1ac9      	subs	r1, r1, r3
  404fd8:	b209      	sxth	r1, r1
  404fda:	81e1      	strh	r1, [r4, #14]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
  404fdc:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
  404fe0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  404fe4:	10d2      	asrs	r2, r2, #3
  404fe6:	82a2      	strh	r2, [r4, #20]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
  404fe8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
  404fec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  404ff0:	10db      	asrs	r3, r3, #3
  404ff2:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x < 0)
  404ff4:	2a00      	cmp	r2, #0
  404ff6:	db7b      	blt.n	4050f0 <indev_proc_press+0x32c>
    else if(proc->types.pointer.drag_throw_vect.x > 0)
  404ff8:	2a00      	cmp	r2, #0
  404ffa:	dd01      	ble.n	405000 <indev_proc_press+0x23c>
        proc->types.pointer.drag_throw_vect.x--;
  404ffc:	3a01      	subs	r2, #1
  404ffe:	82a2      	strh	r2, [r4, #20]
    if(proc->types.pointer.drag_throw_vect.y < 0)
  405000:	2b00      	cmp	r3, #0
  405002:	db78      	blt.n	4050f6 <indev_proc_press+0x332>
    else if(proc->types.pointer.drag_throw_vect.y > 0)
  405004:	2b00      	cmp	r3, #0
  405006:	dd01      	ble.n	40500c <indev_proc_press+0x248>
        proc->types.pointer.drag_throw_vect.y--;
  405008:	3b01      	subs	r3, #1
  40500a:	82e3      	strh	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
  40500c:	8aa3      	ldrh	r3, [r4, #20]
  40500e:	eb03 0060 	add.w	r0, r3, r0, asr #1
  405012:	82a0      	strh	r0, [r4, #20]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
  405014:	8ae3      	ldrh	r3, [r4, #22]
  405016:	eb03 0161 	add.w	r1, r3, r1, asr #1
  40501a:	82e1      	strh	r1, [r4, #22]
    if(indev_obj_act != NULL) {
  40501c:	4b4d      	ldr	r3, [pc, #308]	; (405154 <indev_proc_press+0x390>)
  40501e:	6818      	ldr	r0, [r3, #0]
  405020:	2800      	cmp	r0, #0
  405022:	f43f af06 	beq.w	404e32 <indev_proc_press+0x6e>
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, indev_act);
  405026:	69c3      	ldr	r3, [r0, #28]
  405028:	4a4b      	ldr	r2, [pc, #300]	; (405158 <indev_proc_press+0x394>)
  40502a:	6812      	ldr	r2, [r2, #0]
  40502c:	210c      	movs	r1, #12
  40502e:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  405030:	4620      	mov	r0, r4
  405032:	4b4a      	ldr	r3, [pc, #296]	; (40515c <indev_proc_press+0x398>)
  405034:	4798      	blx	r3
  405036:	2800      	cmp	r0, #0
  405038:	f47f aefb 	bne.w	404e32 <indev_proc_press+0x6e>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
  40503c:	2200      	movs	r2, #0
  40503e:	2101      	movs	r1, #1
  405040:	4b44      	ldr	r3, [pc, #272]	; (405154 <indev_proc_press+0x390>)
  405042:	6818      	ldr	r0, [r3, #0]
  405044:	4b46      	ldr	r3, [pc, #280]	; (405160 <indev_proc_press+0x39c>)
  405046:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  405048:	4620      	mov	r0, r4
  40504a:	4b44      	ldr	r3, [pc, #272]	; (40515c <indev_proc_press+0x398>)
  40504c:	4798      	blx	r3
  40504e:	2800      	cmp	r0, #0
  405050:	f47f aeef 	bne.w	404e32 <indev_proc_press+0x6e>
        if(indev_act->proc.wait_until_release) return;
  405054:	4b40      	ldr	r3, [pc, #256]	; (405158 <indev_proc_press+0x394>)
  405056:	681b      	ldr	r3, [r3, #0]
  405058:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
  40505c:	f013 0f08 	tst.w	r3, #8
  405060:	f47f aee7 	bne.w	404e32 <indev_proc_press+0x6e>
        indev_drag(proc);
  405064:	4620      	mov	r0, r4
  405066:	4b40      	ldr	r3, [pc, #256]	; (405168 <indev_proc_press+0x3a4>)
  405068:	4798      	blx	r3
        indev_gesture(proc);
  40506a:	4620      	mov	r0, r4
  40506c:	4b3f      	ldr	r3, [pc, #252]	; (40516c <indev_proc_press+0x3a8>)
  40506e:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  405070:	4620      	mov	r0, r4
  405072:	4b3a      	ldr	r3, [pc, #232]	; (40515c <indev_proc_press+0x398>)
  405074:	4798      	blx	r3
  405076:	2800      	cmp	r0, #0
  405078:	f47f aedb 	bne.w	404e32 <indev_proc_press+0x6e>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 0) {
  40507c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  405080:	f013 0f02 	tst.w	r3, #2
  405084:	d104      	bne.n	405090 <indev_proc_press+0x2cc>
  405086:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  40508a:	f013 0f01 	tst.w	r3, #1
  40508e:	d035      	beq.n	4050fc <indev_proc_press+0x338>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
  405090:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  405094:	f013 0f02 	tst.w	r3, #2
  405098:	f47f aecb 	bne.w	404e32 <indev_proc_press+0x6e>
  40509c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4050a0:	f013 0f01 	tst.w	r3, #1
  4050a4:	f43f aec5 	beq.w	404e32 <indev_proc_press+0x6e>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver.long_press_rep_time) {
  4050a8:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4050aa:	4b31      	ldr	r3, [pc, #196]	; (405170 <indev_proc_press+0x3ac>)
  4050ac:	4798      	blx	r3
  4050ae:	4b2a      	ldr	r3, [pc, #168]	; (405158 <indev_proc_press+0x394>)
  4050b0:	681a      	ldr	r2, [r3, #0]
  4050b2:	8b53      	ldrh	r3, [r2, #26]
  4050b4:	4298      	cmp	r0, r3
  4050b6:	f67f aebc 	bls.w	404e32 <indev_proc_press+0x6e>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, indev_act);
  4050ba:	4b26      	ldr	r3, [pc, #152]	; (405154 <indev_proc_press+0x390>)
  4050bc:	6818      	ldr	r0, [r3, #0]
  4050be:	69c3      	ldr	r3, [r0, #28]
  4050c0:	2110      	movs	r1, #16
  4050c2:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  4050c4:	4620      	mov	r0, r4
  4050c6:	4b25      	ldr	r3, [pc, #148]	; (40515c <indev_proc_press+0x398>)
  4050c8:	4798      	blx	r3
  4050ca:	2800      	cmp	r0, #0
  4050cc:	f47f aeb1 	bne.w	404e32 <indev_proc_press+0x6e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  4050d0:	2200      	movs	r2, #0
  4050d2:	2105      	movs	r1, #5
  4050d4:	4b1f      	ldr	r3, [pc, #124]	; (405154 <indev_proc_press+0x390>)
  4050d6:	6818      	ldr	r0, [r3, #0]
  4050d8:	4b21      	ldr	r3, [pc, #132]	; (405160 <indev_proc_press+0x39c>)
  4050da:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  4050dc:	4620      	mov	r0, r4
  4050de:	4b1f      	ldr	r3, [pc, #124]	; (40515c <indev_proc_press+0x398>)
  4050e0:	4798      	blx	r3
  4050e2:	2800      	cmp	r0, #0
  4050e4:	f47f aea5 	bne.w	404e32 <indev_proc_press+0x6e>
                proc->longpr_rep_timestamp = lv_tick_get();
  4050e8:	4b22      	ldr	r3, [pc, #136]	; (405174 <indev_proc_press+0x3b0>)
  4050ea:	4798      	blx	r3
  4050ec:	6320      	str	r0, [r4, #48]	; 0x30
  4050ee:	e6a0      	b.n	404e32 <indev_proc_press+0x6e>
        proc->types.pointer.drag_throw_vect.x++;
  4050f0:	3201      	adds	r2, #1
  4050f2:	82a2      	strh	r2, [r4, #20]
  4050f4:	e784      	b.n	405000 <indev_proc_press+0x23c>
        proc->types.pointer.drag_throw_vect.y++;
  4050f6:	3301      	adds	r3, #1
  4050f8:	82e3      	strh	r3, [r4, #22]
  4050fa:	e787      	b.n	40500c <indev_proc_press+0x248>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver.long_press_time) {
  4050fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4050fe:	4b1c      	ldr	r3, [pc, #112]	; (405170 <indev_proc_press+0x3ac>)
  405100:	4798      	blx	r3
  405102:	4b15      	ldr	r3, [pc, #84]	; (405158 <indev_proc_press+0x394>)
  405104:	681a      	ldr	r2, [r3, #0]
  405106:	8b13      	ldrh	r3, [r2, #24]
  405108:	4298      	cmp	r0, r3
  40510a:	d9c1      	bls.n	405090 <indev_proc_press+0x2cc>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, indev_act);
  40510c:	4b11      	ldr	r3, [pc, #68]	; (405154 <indev_proc_press+0x390>)
  40510e:	6818      	ldr	r0, [r3, #0]
  405110:	69c3      	ldr	r3, [r0, #28]
  405112:	210f      	movs	r1, #15
  405114:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  405116:	4620      	mov	r0, r4
  405118:	4b10      	ldr	r3, [pc, #64]	; (40515c <indev_proc_press+0x398>)
  40511a:	4798      	blx	r3
  40511c:	2800      	cmp	r0, #0
  40511e:	f47f ae88 	bne.w	404e32 <indev_proc_press+0x6e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  405122:	2200      	movs	r2, #0
  405124:	2104      	movs	r1, #4
  405126:	4b0b      	ldr	r3, [pc, #44]	; (405154 <indev_proc_press+0x390>)
  405128:	6818      	ldr	r0, [r3, #0]
  40512a:	4b0d      	ldr	r3, [pc, #52]	; (405160 <indev_proc_press+0x39c>)
  40512c:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  40512e:	4620      	mov	r0, r4
  405130:	4b0a      	ldr	r3, [pc, #40]	; (40515c <indev_proc_press+0x398>)
  405132:	4798      	blx	r3
  405134:	2800      	cmp	r0, #0
  405136:	f47f ae7c 	bne.w	404e32 <indev_proc_press+0x6e>
                proc->long_pr_sent = 1;
  40513a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  40513e:	f043 0301 	orr.w	r3, r3, #1
  405142:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                proc->longpr_rep_timestamp = lv_tick_get();
  405146:	4b0b      	ldr	r3, [pc, #44]	; (405174 <indev_proc_press+0x3b0>)
  405148:	4798      	blx	r3
  40514a:	6320      	str	r0, [r4, #48]	; 0x30
  40514c:	e7a0      	b.n	405090 <indev_proc_press+0x2cc>
  40514e:	4770      	bx	lr
  405150:	00405f7d 	.word	0x00405f7d
  405154:	2040c3f4 	.word	0x2040c3f4
  405158:	2040c3f0 	.word	0x2040c3f0
  40515c:	00403b49 	.word	0x00403b49
  405160:	00405845 	.word	0x00405845
  405164:	00403f15 	.word	0x00403f15
  405168:	0040409d 	.word	0x0040409d
  40516c:	004043ad 	.word	0x004043ad
  405170:	00416049 	.word	0x00416049
  405174:	0041602d 	.word	0x0041602d

00405178 <indev_pointer_proc>:
{
  405178:	b538      	push	{r3, r4, r5, lr}
  40517a:	4604      	mov	r4, r0
  40517c:	460d      	mov	r5, r1
    if(i->cursor != NULL &&
  40517e:	6d40      	ldr	r0, [r0, #84]	; 0x54
  405180:	b148      	cbz	r0, 405196 <indev_pointer_proc+0x1e>
       (i->proc.types.pointer.last_point.x != data->point.x || i->proc.types.pointer.last_point.y != data->point.y)) {
  405182:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405184:	680b      	ldr	r3, [r1, #0]
    if(i->cursor != NULL &&
  405186:	429a      	cmp	r2, r3
  405188:	d005      	beq.n	405196 <indev_pointer_proc+0x1e>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
  40518a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  40518e:	f9b1 1000 	ldrsh.w	r1, [r1]
  405192:	4b0d      	ldr	r3, [pc, #52]	; (4051c8 <indev_pointer_proc+0x50>)
  405194:	4798      	blx	r3
    i->proc.types.pointer.act_point.x = data->point.x;
  405196:	f9b5 3000 	ldrsh.w	r3, [r5]
  40519a:	8423      	strh	r3, [r4, #32]
    i->proc.types.pointer.act_point.y = data->point.y;
  40519c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  4051a0:	8463      	strh	r3, [r4, #34]	; 0x22
    if(i->proc.state == LV_INDEV_STATE_PR) {
  4051a2:	7f23      	ldrb	r3, [r4, #28]
  4051a4:	2b01      	cmp	r3, #1
  4051a6:	d00a      	beq.n	4051be <indev_pointer_proc+0x46>
        indev_proc_release(&i->proc);
  4051a8:	f104 001c 	add.w	r0, r4, #28
  4051ac:	4b07      	ldr	r3, [pc, #28]	; (4051cc <indev_pointer_proc+0x54>)
  4051ae:	4798      	blx	r3
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
  4051b0:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  4051b4:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
  4051b6:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  4051ba:	84e3      	strh	r3, [r4, #38]	; 0x26
  4051bc:	bd38      	pop	{r3, r4, r5, pc}
        indev_proc_press(&i->proc);
  4051be:	f104 001c 	add.w	r0, r4, #28
  4051c2:	4b03      	ldr	r3, [pc, #12]	; (4051d0 <indev_pointer_proc+0x58>)
  4051c4:	4798      	blx	r3
  4051c6:	e7f3      	b.n	4051b0 <indev_pointer_proc+0x38>
  4051c8:	00405fe5 	.word	0x00405fe5
  4051cc:	00403d69 	.word	0x00403d69
  4051d0:	00404dc5 	.word	0x00404dc5

004051d4 <indev_button_proc>:
    if(i->btn_points == NULL) {
  4051d4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  4051d6:	2b00      	cmp	r3, #0
  4051d8:	d03a      	beq.n	405250 <indev_button_proc+0x7c>
{
  4051da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4051de:	460d      	mov	r5, r1
  4051e0:	4604      	mov	r4, r0
    lv_coord_t x = i->btn_points[data->btn_id].x;
  4051e2:	688a      	ldr	r2, [r1, #8]
  4051e4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4051e8:	f933 7022 	ldrsh.w	r7, [r3, r2, lsl #2]
    lv_coord_t y = i->btn_points[data->btn_id].y;
  4051ec:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
    if(data->state == LV_INDEV_STATE_PR) {
  4051f0:	7bab      	ldrb	r3, [r5, #14]
  4051f2:	2b01      	cmp	r3, #1
  4051f4:	d01a      	beq.n	40522c <indev_button_proc+0x58>
    if(indev_reset_check(&i->proc)) return;
  4051f6:	f104 061c 	add.w	r6, r4, #28
  4051fa:	4630      	mov	r0, r6
  4051fc:	4b15      	ldr	r3, [pc, #84]	; (405254 <indev_button_proc+0x80>)
  4051fe:	4798      	blx	r3
  405200:	b990      	cbnz	r0, 405228 <indev_button_proc+0x54>
    i->proc.types.pointer.act_point.x = x;
  405202:	8427      	strh	r7, [r4, #32]
    i->proc.types.pointer.act_point.y = y;
  405204:	f8a4 8022 	strh.w	r8, [r4, #34]	; 0x22
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
  405208:	7bab      	ldrb	r3, [r5, #14]
  40520a:	2b01      	cmp	r3, #1
  40520c:	d01c      	beq.n	405248 <indev_button_proc+0x74>
    else indev_proc_release(&i->proc);
  40520e:	4630      	mov	r0, r6
  405210:	4b11      	ldr	r3, [pc, #68]	; (405258 <indev_button_proc+0x84>)
  405212:	4798      	blx	r3
    if(indev_reset_check(&i->proc)) return;
  405214:	4630      	mov	r0, r6
  405216:	4b0f      	ldr	r3, [pc, #60]	; (405254 <indev_button_proc+0x80>)
  405218:	4798      	blx	r3
  40521a:	b928      	cbnz	r0, 405228 <indev_button_proc+0x54>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
  40521c:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  405220:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
  405222:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  405226:	84e3      	strh	r3, [r4, #38]	; 0x26
  405228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(i->proc.types.pointer.last_point.x != x ||
  40522c:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
  405230:	429f      	cmp	r7, r3
  405232:	d004      	beq.n	40523e <indev_button_proc+0x6a>
            indev_proc_release(&i->proc);
  405234:	f104 001c 	add.w	r0, r4, #28
  405238:	4b07      	ldr	r3, [pc, #28]	; (405258 <indev_button_proc+0x84>)
  40523a:	4798      	blx	r3
  40523c:	e7db      	b.n	4051f6 <indev_button_proc+0x22>
           i->proc.types.pointer.last_point.y != y) {
  40523e:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
        if(i->proc.types.pointer.last_point.x != x ||
  405242:	4598      	cmp	r8, r3
  405244:	d1f6      	bne.n	405234 <indev_button_proc+0x60>
  405246:	e7d6      	b.n	4051f6 <indev_button_proc+0x22>
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
  405248:	4630      	mov	r0, r6
  40524a:	4b04      	ldr	r3, [pc, #16]	; (40525c <indev_button_proc+0x88>)
  40524c:	4798      	blx	r3
  40524e:	e7e1      	b.n	405214 <indev_button_proc+0x40>
  405250:	4770      	bx	lr
  405252:	bf00      	nop
  405254:	00403b49 	.word	0x00403b49
  405258:	00403d69 	.word	0x00403d69
  40525c:	00404dc5 	.word	0x00404dc5

00405260 <_lv_indev_read_task>:
    indev_act = task->user_data;
  405260:	68c0      	ldr	r0, [r0, #12]
  405262:	4b2e      	ldr	r3, [pc, #184]	; (40531c <_lv_indev_read_task+0xbc>)
  405264:	6018      	str	r0, [r3, #0]
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
  405266:	68c3      	ldr	r3, [r0, #12]
  405268:	2b00      	cmp	r3, #0
  40526a:	d055      	beq.n	405318 <_lv_indev_read_task+0xb8>
{
  40526c:	b530      	push	{r4, r5, lr}
  40526e:	b085      	sub	sp, #20
    indev_proc_reset_query_handler(indev_act);
  405270:	4b2b      	ldr	r3, [pc, #172]	; (405320 <_lv_indev_read_task+0xc0>)
  405272:	4798      	blx	r3
    if(indev_act->proc.disabled) return;
  405274:	4b29      	ldr	r3, [pc, #164]	; (40531c <_lv_indev_read_task+0xbc>)
  405276:	681b      	ldr	r3, [r3, #0]
  405278:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
  40527c:	f013 0f04 	tst.w	r3, #4
  405280:	d018      	beq.n	4052b4 <_lv_indev_read_task+0x54>
}
  405282:	b005      	add	sp, #20
  405284:	bd30      	pop	{r4, r5, pc}
            indev_act->driver.disp->last_activity_time = lv_tick_get();
  405286:	68dc      	ldr	r4, [r3, #12]
  405288:	4b26      	ldr	r3, [pc, #152]	; (405324 <_lv_indev_read_task+0xc4>)
  40528a:	4798      	blx	r3
  40528c:	f8c4 0184 	str.w	r0, [r4, #388]	; 0x184
  405290:	e025      	b.n	4052de <_lv_indev_read_task+0x7e>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
  405292:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
  405296:	b312      	cbz	r2, 4052de <_lv_indev_read_task+0x7e>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
  405298:	68dc      	ldr	r4, [r3, #12]
  40529a:	4b22      	ldr	r3, [pc, #136]	; (405324 <_lv_indev_read_task+0xc4>)
  40529c:	4798      	blx	r3
  40529e:	f8c4 0184 	str.w	r0, [r4, #388]	; 0x184
  4052a2:	e01c      	b.n	4052de <_lv_indev_read_task+0x7e>
            indev_pointer_proc(indev_act, &data);
  4052a4:	4669      	mov	r1, sp
  4052a6:	4b20      	ldr	r3, [pc, #128]	; (405328 <_lv_indev_read_task+0xc8>)
  4052a8:	4798      	blx	r3
        indev_proc_reset_query_handler(indev_act);
  4052aa:	4b1c      	ldr	r3, [pc, #112]	; (40531c <_lv_indev_read_task+0xbc>)
  4052ac:	6818      	ldr	r0, [r3, #0]
  4052ae:	4b1c      	ldr	r3, [pc, #112]	; (405320 <_lv_indev_read_task+0xc0>)
  4052b0:	4798      	blx	r3
    } while(more_to_read);
  4052b2:	b35d      	cbz	r5, 40530c <_lv_indev_read_task+0xac>
        more_to_read = _lv_indev_read(indev_act, &data);
  4052b4:	4c19      	ldr	r4, [pc, #100]	; (40531c <_lv_indev_read_task+0xbc>)
  4052b6:	4669      	mov	r1, sp
  4052b8:	6820      	ldr	r0, [r4, #0]
  4052ba:	4b1c      	ldr	r3, [pc, #112]	; (40532c <_lv_indev_read_task+0xcc>)
  4052bc:	4798      	blx	r3
  4052be:	4605      	mov	r5, r0
        indev_proc_reset_query_handler(indev_act);
  4052c0:	6820      	ldr	r0, [r4, #0]
  4052c2:	4b17      	ldr	r3, [pc, #92]	; (405320 <_lv_indev_read_task+0xc0>)
  4052c4:	4798      	blx	r3
        indev_obj_act = NULL;
  4052c6:	2200      	movs	r2, #0
  4052c8:	4b19      	ldr	r3, [pc, #100]	; (405330 <_lv_indev_read_task+0xd0>)
  4052ca:	601a      	str	r2, [r3, #0]
        indev_act->proc.state = data.state;
  4052cc:	6823      	ldr	r3, [r4, #0]
  4052ce:	f89d 200e 	ldrb.w	r2, [sp, #14]
  4052d2:	771a      	strb	r2, [r3, #28]
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
  4052d4:	2a01      	cmp	r2, #1
  4052d6:	d0d6      	beq.n	405286 <_lv_indev_read_task+0x26>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
  4052d8:	781a      	ldrb	r2, [r3, #0]
  4052da:	2a04      	cmp	r2, #4
  4052dc:	d0d9      	beq.n	405292 <_lv_indev_read_task+0x32>
        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
  4052de:	4b0f      	ldr	r3, [pc, #60]	; (40531c <_lv_indev_read_task+0xbc>)
  4052e0:	6818      	ldr	r0, [r3, #0]
  4052e2:	7803      	ldrb	r3, [r0, #0]
  4052e4:	2b01      	cmp	r3, #1
  4052e6:	d0dd      	beq.n	4052a4 <_lv_indev_read_task+0x44>
        else if(indev_act->driver.type == LV_INDEV_TYPE_KEYPAD) {
  4052e8:	2b02      	cmp	r3, #2
  4052ea:	d007      	beq.n	4052fc <_lv_indev_read_task+0x9c>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER) {
  4052ec:	2b04      	cmp	r3, #4
  4052ee:	d009      	beq.n	405304 <_lv_indev_read_task+0xa4>
        else if(indev_act->driver.type == LV_INDEV_TYPE_BUTTON) {
  4052f0:	2b03      	cmp	r3, #3
  4052f2:	d1da      	bne.n	4052aa <_lv_indev_read_task+0x4a>
            indev_button_proc(indev_act, &data);
  4052f4:	4669      	mov	r1, sp
  4052f6:	4b0f      	ldr	r3, [pc, #60]	; (405334 <_lv_indev_read_task+0xd4>)
  4052f8:	4798      	blx	r3
  4052fa:	e7d6      	b.n	4052aa <_lv_indev_read_task+0x4a>
            indev_keypad_proc(indev_act, &data);
  4052fc:	4669      	mov	r1, sp
  4052fe:	4b0e      	ldr	r3, [pc, #56]	; (405338 <_lv_indev_read_task+0xd8>)
  405300:	4798      	blx	r3
  405302:	e7d2      	b.n	4052aa <_lv_indev_read_task+0x4a>
            indev_encoder_proc(indev_act, &data);
  405304:	4669      	mov	r1, sp
  405306:	4b0d      	ldr	r3, [pc, #52]	; (40533c <_lv_indev_read_task+0xdc>)
  405308:	4798      	blx	r3
  40530a:	e7ce      	b.n	4052aa <_lv_indev_read_task+0x4a>
    indev_act     = NULL;
  40530c:	2300      	movs	r3, #0
  40530e:	4a03      	ldr	r2, [pc, #12]	; (40531c <_lv_indev_read_task+0xbc>)
  405310:	6013      	str	r3, [r2, #0]
    indev_obj_act = NULL;
  405312:	4a07      	ldr	r2, [pc, #28]	; (405330 <_lv_indev_read_task+0xd0>)
  405314:	6013      	str	r3, [r2, #0]
  405316:	e7b4      	b.n	405282 <_lv_indev_read_task+0x22>
  405318:	4770      	bx	lr
  40531a:	bf00      	nop
  40531c:	2040c3f0 	.word	0x2040c3f0
  405320:	00403af1 	.word	0x00403af1
  405324:	0041602d 	.word	0x0041602d
  405328:	00405179 	.word	0x00405179
  40532c:	00415fc5 	.word	0x00415fc5
  405330:	2040c3f4 	.word	0x2040c3f4
  405334:	004051d5 	.word	0x004051d5
  405338:	004044a5 	.word	0x004044a5
  40533c:	004047d1 	.word	0x004047d1

00405340 <lv_event_mark_deleted>:

#endif

static void lv_event_mark_deleted(lv_obj_t * obj)
{
    lv_event_temp_data_t * t = event_temp_data_head;
  405340:	4b05      	ldr	r3, [pc, #20]	; (405358 <lv_event_mark_deleted+0x18>)
  405342:	681b      	ldr	r3, [r3, #0]

    while(t) {
  405344:	e000      	b.n	405348 <lv_event_mark_deleted+0x8>
        if(t->obj == obj) t->deleted = true;
        t = t->prev;
  405346:	689b      	ldr	r3, [r3, #8]
    while(t) {
  405348:	b12b      	cbz	r3, 405356 <lv_event_mark_deleted+0x16>
        if(t->obj == obj) t->deleted = true;
  40534a:	681a      	ldr	r2, [r3, #0]
  40534c:	4282      	cmp	r2, r0
  40534e:	d1fa      	bne.n	405346 <lv_event_mark_deleted+0x6>
  405350:	2201      	movs	r2, #1
  405352:	711a      	strb	r2, [r3, #4]
  405354:	e7f7      	b.n	405346 <lv_event_mark_deleted+0x6>
    }
}
  405356:	4770      	bx	lr
  405358:	2040c3fc 	.word	0x2040c3fc

0040535c <style_prop_is_cacheble>:
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{

    switch(prop) {
  40535c:	2850      	cmp	r0, #80	; 0x50
  40535e:	d017      	beq.n	405390 <style_prop_is_cacheble+0x34>
  405360:	d90c      	bls.n	40537c <style_prop_is_cacheble+0x20>
  405362:	28ff      	cmp	r0, #255	; 0xff
  405364:	d014      	beq.n	405390 <style_prop_is_cacheble+0x34>
  405366:	d82e      	bhi.n	4053c6 <style_prop_is_cacheble+0x6a>
  405368:	286e      	cmp	r0, #110	; 0x6e
  40536a:	d011      	beq.n	405390 <style_prop_is_cacheble+0x34>
  40536c:	d926      	bls.n	4053bc <style_prop_is_cacheble+0x60>
  40536e:	287f      	cmp	r0, #127	; 0x7f
  405370:	d00e      	beq.n	405390 <style_prop_is_cacheble+0x34>
  405372:	2891      	cmp	r0, #145	; 0x91
  405374:	d00c      	beq.n	405390 <style_prop_is_cacheble+0x34>
  405376:	2872      	cmp	r0, #114	; 0x72
  405378:	d115      	bne.n	4053a6 <style_prop_is_cacheble+0x4a>
  40537a:	e009      	b.n	405390 <style_prop_is_cacheble+0x34>
  40537c:	2818      	cmp	r0, #24
  40537e:	d909      	bls.n	405394 <style_prop_is_cacheble+0x38>
  405380:	2833      	cmp	r0, #51	; 0x33
  405382:	d816      	bhi.n	4053b2 <style_prop_is_cacheble+0x56>
  405384:	2830      	cmp	r0, #48	; 0x30
  405386:	d203      	bcs.n	405390 <style_prop_is_cacheble+0x34>
  405388:	2820      	cmp	r0, #32
  40538a:	d001      	beq.n	405390 <style_prop_is_cacheble+0x34>
  40538c:	282c      	cmp	r0, #44	; 0x2c
  40538e:	d10a      	bne.n	4053a6 <style_prop_is_cacheble+0x4a>
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
  405390:	2001      	movs	r0, #1
  405392:	4770      	bx	lr
    switch(prop) {
  405394:	2815      	cmp	r0, #21
  405396:	d2fb      	bcs.n	405390 <style_prop_is_cacheble+0x34>
  405398:	2807      	cmp	r0, #7
  40539a:	d806      	bhi.n	4053aa <style_prop_is_cacheble+0x4e>
  40539c:	2804      	cmp	r0, #4
  40539e:	d2f7      	bcs.n	405390 <style_prop_is_cacheble+0x34>
  4053a0:	3801      	subs	r0, #1
  4053a2:	2801      	cmp	r0, #1
  4053a4:	d9f4      	bls.n	405390 <style_prop_is_cacheble+0x34>
            break;
        default:
            return false;
  4053a6:	2000      	movs	r0, #0
    }
}
  4053a8:	4770      	bx	lr
    switch(prop) {
  4053aa:	3810      	subs	r0, #16
  4053ac:	2803      	cmp	r0, #3
  4053ae:	d8fa      	bhi.n	4053a6 <style_prop_is_cacheble+0x4a>
  4053b0:	e7ee      	b.n	405390 <style_prop_is_cacheble+0x34>
  4053b2:	2840      	cmp	r0, #64	; 0x40
  4053b4:	d0ec      	beq.n	405390 <style_prop_is_cacheble+0x34>
  4053b6:	2842      	cmp	r0, #66	; 0x42
  4053b8:	d1f5      	bne.n	4053a6 <style_prop_is_cacheble+0x4a>
  4053ba:	e7e9      	b.n	405390 <style_prop_is_cacheble+0x34>
  4053bc:	2854      	cmp	r0, #84	; 0x54
  4053be:	d0e7      	beq.n	405390 <style_prop_is_cacheble+0x34>
  4053c0:	2860      	cmp	r0, #96	; 0x60
  4053c2:	d1f0      	bne.n	4053a6 <style_prop_is_cacheble+0x4a>
  4053c4:	e7e4      	b.n	405390 <style_prop_is_cacheble+0x34>
  4053c6:	f248 0383 	movw	r3, #32899	; 0x8083
  4053ca:	4298      	cmp	r0, r3
  4053cc:	d0e0      	beq.n	405390 <style_prop_is_cacheble+0x34>
  4053ce:	d90c      	bls.n	4053ea <style_prop_is_cacheble+0x8e>
  4053d0:	f248 03a0 	movw	r3, #32928	; 0x80a0
  4053d4:	4298      	cmp	r0, r3
  4053d6:	d0db      	beq.n	405390 <style_prop_is_cacheble+0x34>
  4053d8:	f248 03ad 	movw	r3, #32941	; 0x80ad
  4053dc:	4298      	cmp	r0, r3
  4053de:	d0d7      	beq.n	405390 <style_prop_is_cacheble+0x34>
  4053e0:	f248 038e 	movw	r3, #32910	; 0x808e
  4053e4:	4298      	cmp	r0, r3
  4053e6:	d1de      	bne.n	4053a6 <style_prop_is_cacheble+0x4a>
  4053e8:	e7d2      	b.n	405390 <style_prop_is_cacheble+0x34>
  4053ea:	f248 030c 	movw	r3, #32780	; 0x800c
  4053ee:	4298      	cmp	r0, r3
  4053f0:	d0ce      	beq.n	405390 <style_prop_is_cacheble+0x34>
  4053f2:	d3d8      	bcc.n	4053a6 <style_prop_is_cacheble+0x4a>
  4053f4:	4b02      	ldr	r3, [pc, #8]	; (405400 <style_prop_is_cacheble+0xa4>)
  4053f6:	4403      	add	r3, r0
  4053f8:	2b01      	cmp	r3, #1
  4053fa:	d8d4      	bhi.n	4053a6 <style_prop_is_cacheble+0x4a>
  4053fc:	e7c8      	b.n	405390 <style_prop_is_cacheble+0x34>
  4053fe:	bf00      	nop
  405400:	ffff7f80 	.word	0xffff7f80

00405404 <refresh_children_position>:
{
  405404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405406:	460e      	mov	r6, r1
  405408:	4615      	mov	r5, r2
    _LV_LL_READ(obj->child_ll, i) {
  40540a:	1d07      	adds	r7, r0, #4
  40540c:	4638      	mov	r0, r7
  40540e:	4b0f      	ldr	r3, [pc, #60]	; (40544c <refresh_children_position+0x48>)
  405410:	4798      	blx	r3
  405412:	4604      	mov	r4, r0
  405414:	e017      	b.n	405446 <refresh_children_position+0x42>
        i->coords.x1 += x_diff;
  405416:	b2b2      	uxth	r2, r6
  405418:	8a23      	ldrh	r3, [r4, #16]
  40541a:	4413      	add	r3, r2
  40541c:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
  40541e:	b2ab      	uxth	r3, r5
  405420:	8a61      	ldrh	r1, [r4, #18]
  405422:	4419      	add	r1, r3
  405424:	8261      	strh	r1, [r4, #18]
        i->coords.x2 += x_diff;
  405426:	8aa1      	ldrh	r1, [r4, #20]
  405428:	440a      	add	r2, r1
  40542a:	82a2      	strh	r2, [r4, #20]
        i->coords.y2 += y_diff;
  40542c:	8ae2      	ldrh	r2, [r4, #22]
  40542e:	4413      	add	r3, r2
  405430:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
  405432:	462a      	mov	r2, r5
  405434:	4631      	mov	r1, r6
  405436:	4620      	mov	r0, r4
  405438:	f7ff ffe4 	bl	405404 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
  40543c:	4621      	mov	r1, r4
  40543e:	4638      	mov	r0, r7
  405440:	4b03      	ldr	r3, [pc, #12]	; (405450 <refresh_children_position+0x4c>)
  405442:	4798      	blx	r3
  405444:	4604      	mov	r4, r0
  405446:	2c00      	cmp	r4, #0
  405448:	d1e5      	bne.n	405416 <refresh_children_position+0x12>
}
  40544a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40544c:	004170b9 	.word	0x004170b9
  405450:	004170cd 	.word	0x004170cd

00405454 <style_snapshot_compare>:
    _lv_obj_disable_style_caching(obj, false);
    list->skip_trans = trans_ori;
}

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
  405454:	b538      	push	{r3, r4, r5, lr}
  405456:	4604      	mov	r4, r0
  405458:	460d      	mov	r5, r1
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
  40545a:	22bc      	movs	r2, #188	; 0xbc
  40545c:	4b55      	ldr	r3, [pc, #340]	; (4055b4 <style_snapshot_compare+0x160>)
  40545e:	4798      	blx	r3
  405460:	2800      	cmp	r0, #0
  405462:	f000 8086 	beq.w	405572 <style_snapshot_compare+0x11e>

    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
  405466:	f9b4 2092 	ldrsh.w	r2, [r4, #146]	; 0x92
  40546a:	f9b5 3092 	ldrsh.w	r3, [r5, #146]	; 0x92
  40546e:	429a      	cmp	r2, r3
  405470:	d001      	beq.n	405476 <style_snapshot_compare+0x22>
  405472:	2002      	movs	r0, #2
  405474:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
  405476:	f9b4 2094 	ldrsh.w	r2, [r4, #148]	; 0x94
  40547a:	f9b5 3094 	ldrsh.w	r3, [r5, #148]	; 0x94
  40547e:	429a      	cmp	r2, r3
  405480:	d001      	beq.n	405486 <style_snapshot_compare+0x32>
  405482:	2002      	movs	r0, #2
  405484:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
  405486:	f9b4 2098 	ldrsh.w	r2, [r4, #152]	; 0x98
  40548a:	f9b5 3096 	ldrsh.w	r3, [r5, #150]	; 0x96
  40548e:	429a      	cmp	r2, r3
  405490:	d001      	beq.n	405496 <style_snapshot_compare+0x42>
  405492:	2002      	movs	r0, #2
  405494:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
  405496:	f9b4 2096 	ldrsh.w	r2, [r4, #150]	; 0x96
  40549a:	4293      	cmp	r3, r2
  40549c:	d001      	beq.n	4054a2 <style_snapshot_compare+0x4e>
  40549e:	2002      	movs	r0, #2
  4054a0:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
  4054a2:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
  4054a6:	f9b5 309a 	ldrsh.w	r3, [r5, #154]	; 0x9a
  4054aa:	429a      	cmp	r2, r3
  4054ac:	d001      	beq.n	4054b2 <style_snapshot_compare+0x5e>
  4054ae:	2002      	movs	r0, #2
  4054b0:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
  4054b2:	f9b4 209c 	ldrsh.w	r2, [r4, #156]	; 0x9c
  4054b6:	f9b5 309c 	ldrsh.w	r3, [r5, #156]	; 0x9c
  4054ba:	429a      	cmp	r2, r3
  4054bc:	d001      	beq.n	4054c2 <style_snapshot_compare+0x6e>
  4054be:	2002      	movs	r0, #2
  4054c0:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
  4054c2:	f9b4 209e 	ldrsh.w	r2, [r4, #158]	; 0x9e
  4054c6:	f9b5 309e 	ldrsh.w	r3, [r5, #158]	; 0x9e
  4054ca:	429a      	cmp	r2, r3
  4054cc:	d153      	bne.n	405576 <style_snapshot_compare+0x122>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
  4054ce:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
  4054d2:	f9b5 30a2 	ldrsh.w	r3, [r5, #162]	; 0xa2
  4054d6:	429a      	cmp	r2, r3
  4054d8:	d14f      	bne.n	40557a <style_snapshot_compare+0x126>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
  4054da:	f9b4 20a2 	ldrsh.w	r2, [r4, #162]	; 0xa2
  4054de:	4293      	cmp	r3, r2
  4054e0:	d14d      	bne.n	40557e <style_snapshot_compare+0x12a>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
  4054e2:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
  4054e6:	f9b5 30a6 	ldrsh.w	r3, [r5, #166]	; 0xa6
  4054ea:	429a      	cmp	r2, r3
  4054ec:	d149      	bne.n	405582 <style_snapshot_compare+0x12e>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
  4054ee:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
  4054f2:	f9b5 30a8 	ldrsh.w	r3, [r5, #168]	; 0xa8
  4054f6:	429a      	cmp	r2, r3
  4054f8:	d145      	bne.n	405586 <style_snapshot_compare+0x132>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
  4054fa:	f9b4 20aa 	ldrsh.w	r2, [r4, #170]	; 0xaa
  4054fe:	f9b5 30aa 	ldrsh.w	r3, [r5, #170]	; 0xaa
  405502:	429a      	cmp	r2, r3
  405504:	d141      	bne.n	40558a <style_snapshot_compare+0x136>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
  405506:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
  40550a:	f9b5 30ac 	ldrsh.w	r3, [r5, #172]	; 0xac
  40550e:	429a      	cmp	r2, r3
  405510:	d13d      	bne.n	40558e <style_snapshot_compare+0x13a>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
  405512:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
  405516:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
  40551a:	429a      	cmp	r2, r3
  40551c:	d139      	bne.n	405592 <style_snapshot_compare+0x13e>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
  40551e:	f9b4 201c 	ldrsh.w	r2, [r4, #28]
  405522:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
  405526:	429a      	cmp	r2, r3
  405528:	d135      	bne.n	405596 <style_snapshot_compare+0x142>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
  40552a:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40552c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  40552e:	429a      	cmp	r2, r3
  405530:	d133      	bne.n	40559a <style_snapshot_compare+0x146>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
  405532:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  405536:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  40553a:	429a      	cmp	r2, r3
  40553c:	d12f      	bne.n	40559e <style_snapshot_compare+0x14a>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
  40553e:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
  405542:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
  405546:	429a      	cmp	r2, r3
  405548:	d12b      	bne.n	4055a2 <style_snapshot_compare+0x14e>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
  40554a:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
  40554e:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  405552:	429a      	cmp	r2, r3
  405554:	d127      	bne.n	4055a6 <style_snapshot_compare+0x152>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
  405556:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
  40555a:	f9b5 3024 	ldrsh.w	r3, [r5, #36]	; 0x24
  40555e:	429a      	cmp	r2, r3
  405560:	d123      	bne.n	4055aa <style_snapshot_compare+0x156>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
  405562:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
  405566:	f9b5 3026 	ldrsh.w	r3, [r5, #38]	; 0x26
  40556a:	429a      	cmp	r2, r3
  40556c:	d01f      	beq.n	4055ae <style_snapshot_compare+0x15a>
  40556e:	2002      	movs	r0, #2
  405570:	bd38      	pop	{r3, r4, r5, pc}
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
  405572:	2000      	movs	r0, #0
  405574:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
  405576:	2002      	movs	r0, #2
  405578:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
  40557a:	2002      	movs	r0, #2
  40557c:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
  40557e:	2002      	movs	r0, #2
  405580:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
  405582:	2002      	movs	r0, #2
  405584:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
  405586:	2002      	movs	r0, #2
  405588:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
  40558a:	2002      	movs	r0, #2
  40558c:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
  40558e:	2002      	movs	r0, #2
  405590:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
  405592:	2002      	movs	r0, #2
  405594:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
  405596:	2002      	movs	r0, #2
  405598:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
  40559a:	2002      	movs	r0, #2
  40559c:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
  40559e:	2002      	movs	r0, #2
  4055a0:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
  4055a2:	2002      	movs	r0, #2
  4055a4:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
  4055a6:	2002      	movs	r0, #2
  4055a8:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
  4055aa:	2002      	movs	r0, #2
  4055ac:	bd38      	pop	{r3, r4, r5, pc}

    /*If not returned earlier its just a visual difference, a simple redraw is enough*/
    return STYLE_COMPARE_VISUAL_DIFF;
  4055ae:	2001      	movs	r0, #1
}
  4055b0:	bd38      	pop	{r3, r4, r5, pc}
  4055b2:	bf00      	nop
  4055b4:	004285a1 	.word	0x004285a1

004055b8 <lv_init>:
    if(lv_initialized) {
  4055b8:	4b22      	ldr	r3, [pc, #136]	; (405644 <lv_init+0x8c>)
  4055ba:	781b      	ldrb	r3, [r3, #0]
  4055bc:	b103      	cbz	r3, 4055c0 <lv_init+0x8>
  4055be:	4770      	bx	lr
{
  4055c0:	b510      	push	{r4, lr}
  4055c2:	b084      	sub	sp, #16
    _lv_mem_init();
  4055c4:	4b20      	ldr	r3, [pc, #128]	; (405648 <lv_init+0x90>)
  4055c6:	4798      	blx	r3
    _lv_task_core_init();
  4055c8:	4b20      	ldr	r3, [pc, #128]	; (40564c <lv_init+0x94>)
  4055ca:	4798      	blx	r3
    _lv_fs_init();
  4055cc:	4b20      	ldr	r3, [pc, #128]	; (405650 <lv_init+0x98>)
  4055ce:	4798      	blx	r3
    _lv_anim_core_init();
  4055d0:	4b20      	ldr	r3, [pc, #128]	; (405654 <lv_init+0x9c>)
  4055d2:	4798      	blx	r3
    _lv_group_init();
  4055d4:	4b20      	ldr	r3, [pc, #128]	; (405658 <lv_init+0xa0>)
  4055d6:	4798      	blx	r3
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
  4055d8:	2110      	movs	r1, #16
  4055da:	4820      	ldr	r0, [pc, #128]	; (40565c <lv_init+0xa4>)
  4055dc:	4c20      	ldr	r4, [pc, #128]	; (405660 <lv_init+0xa8>)
  4055de:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
  4055e0:	f44f 71c4 	mov.w	r1, #392	; 0x188
  4055e4:	481f      	ldr	r0, [pc, #124]	; (405664 <lv_init+0xac>)
  4055e6:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
  4055e8:	2160      	movs	r1, #96	; 0x60
  4055ea:	481f      	ldr	r0, [pc, #124]	; (405668 <lv_init+0xb0>)
  4055ec:	47a0      	blx	r4
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  4055ee:	f04f 0000 	mov.w	r0, #0
  4055f2:	2316      	movs	r3, #22
  4055f4:	f363 00c7 	bfi	r0, r3, #3, #5
  4055f8:	2214      	movs	r2, #20
  4055fa:	f362 200c 	bfi	r0, r2, #8, #5
  4055fe:	f36f 304f 	bfc	r0, #13, #3
  405602:	f04f 0100 	mov.w	r1, #0
  405606:	220d      	movs	r2, #13
  405608:	f362 01c7 	bfi	r1, r2, #3, #5
  40560c:	f363 210c 	bfi	r1, r3, #8, #5
  405610:	f36f 314f 	bfc	r1, #13, #3
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
  405614:	4b15      	ldr	r3, [pc, #84]	; (40566c <lv_init+0xb4>)
  405616:	9302      	str	r3, [sp, #8]
  405618:	9301      	str	r3, [sp, #4]
  40561a:	9300      	str	r3, [sp, #0]
  40561c:	2202      	movs	r2, #2
  40561e:	4c14      	ldr	r4, [pc, #80]	; (405670 <lv_init+0xb8>)
  405620:	47a0      	blx	r4
    lv_theme_set_act(th);
  405622:	4b14      	ldr	r3, [pc, #80]	; (405674 <lv_init+0xbc>)
  405624:	4798      	blx	r3
    _lv_refr_init();
  405626:	4b14      	ldr	r3, [pc, #80]	; (405678 <lv_init+0xc0>)
  405628:	4798      	blx	r3
    _lv_indev_init();
  40562a:	4b14      	ldr	r3, [pc, #80]	; (40567c <lv_init+0xc4>)
  40562c:	4798      	blx	r3
    _lv_img_decoder_init();
  40562e:	4b14      	ldr	r3, [pc, #80]	; (405680 <lv_init+0xc8>)
  405630:	4798      	blx	r3
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
  405632:	2001      	movs	r0, #1
  405634:	4b13      	ldr	r3, [pc, #76]	; (405684 <lv_init+0xcc>)
  405636:	4798      	blx	r3
    lv_initialized = true;
  405638:	2201      	movs	r2, #1
  40563a:	4b02      	ldr	r3, [pc, #8]	; (405644 <lv_init+0x8c>)
  40563c:	701a      	strb	r2, [r3, #0]
}
  40563e:	b004      	add	sp, #16
  405640:	bd10      	pop	{r4, pc}
  405642:	bf00      	nop
  405644:	2040c400 	.word	0x2040c400
  405648:	004174c9 	.word	0x004174c9
  40564c:	00418845 	.word	0x00418845
  405650:	00416e39 	.word	0x00416e39
  405654:	00416269 	.word	0x00416269
  405658:	004037d9 	.word	0x004037d9
  40565c:	2043a308 	.word	0x2043a308
  405660:	0041700f 	.word	0x0041700f
  405664:	2043a264 	.word	0x2043a264
  405668:	2043a258 	.word	0x2043a258
  40566c:	2040008c 	.word	0x2040008c
  405670:	0041e8d1 	.word	0x0041e8d1
  405674:	00419299 	.word	0x00419299
  405678:	004095f9 	.word	0x004095f9
  40567c:	00404cd9 	.word	0x00404cd9
  405680:	004149dd 	.word	0x004149dd
  405684:	00413fcd 	.word	0x00413fcd

00405688 <lv_obj_set_adv_hittest>:
{
  405688:	b538      	push	{r3, r4, r5, lr}
  40568a:	4604      	mov	r4, r0
  40568c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40568e:	4b0a      	ldr	r3, [pc, #40]	; (4056b8 <lv_obj_set_adv_hittest+0x30>)
  405690:	4798      	blx	r3
  405692:	b140      	cbz	r0, 4056a6 <lv_obj_set_adv_hittest+0x1e>
    obj->adv_hittest = en == false ? 0 : 1;
  405694:	b96d      	cbnz	r5, 4056b2 <lv_obj_set_adv_hittest+0x2a>
  405696:	2200      	movs	r2, #0
  405698:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  40569c:	f362 13c7 	bfi	r3, r2, #7, #1
  4056a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  4056a4:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4056a6:	4622      	mov	r2, r4
  4056a8:	2300      	movs	r3, #0
  4056aa:	4804      	ldr	r0, [pc, #16]	; (4056bc <lv_obj_set_adv_hittest+0x34>)
  4056ac:	4904      	ldr	r1, [pc, #16]	; (4056c0 <lv_obj_set_adv_hittest+0x38>)
  4056ae:	4788      	blx	r1
  4056b0:	e7fe      	b.n	4056b0 <lv_obj_set_adv_hittest+0x28>
    obj->adv_hittest = en == false ? 0 : 1;
  4056b2:	2201      	movs	r2, #1
  4056b4:	e7f0      	b.n	405698 <lv_obj_set_adv_hittest+0x10>
  4056b6:	bf00      	nop
  4056b8:	00416da9 	.word	0x00416da9
  4056bc:	0042e560 	.word	0x0042e560
  4056c0:	00416db5 	.word	0x00416db5

004056c4 <lv_obj_set_click>:
{
  4056c4:	b538      	push	{r3, r4, r5, lr}
  4056c6:	4604      	mov	r4, r0
  4056c8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4056ca:	4b08      	ldr	r3, [pc, #32]	; (4056ec <lv_obj_set_click+0x28>)
  4056cc:	4798      	blx	r3
  4056ce:	b130      	cbz	r0, 4056de <lv_obj_set_click+0x1a>
    obj->click = (en == true ? 1 : 0);
  4056d0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4056d4:	f365 0300 	bfi	r3, r5, #0, #1
  4056d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  4056dc:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4056de:	4622      	mov	r2, r4
  4056e0:	2300      	movs	r3, #0
  4056e2:	4803      	ldr	r0, [pc, #12]	; (4056f0 <lv_obj_set_click+0x2c>)
  4056e4:	4903      	ldr	r1, [pc, #12]	; (4056f4 <lv_obj_set_click+0x30>)
  4056e6:	4788      	blx	r1
  4056e8:	e7fe      	b.n	4056e8 <lv_obj_set_click+0x24>
  4056ea:	bf00      	nop
  4056ec:	00416da9 	.word	0x00416da9
  4056f0:	0042e560 	.word	0x0042e560
  4056f4:	00416db5 	.word	0x00416db5

004056f8 <lv_obj_add_protect>:
{
  4056f8:	b538      	push	{r3, r4, r5, lr}
  4056fa:	4604      	mov	r4, r0
  4056fc:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4056fe:	4b07      	ldr	r3, [pc, #28]	; (40571c <lv_obj_add_protect+0x24>)
  405700:	4798      	blx	r3
  405702:	b128      	cbz	r0, 405710 <lv_obj_add_protect+0x18>
    obj->protect |= prot;
  405704:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  405708:	431d      	orrs	r5, r3
  40570a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  40570e:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405710:	4622      	mov	r2, r4
  405712:	2300      	movs	r3, #0
  405714:	4802      	ldr	r0, [pc, #8]	; (405720 <lv_obj_add_protect+0x28>)
  405716:	4903      	ldr	r1, [pc, #12]	; (405724 <lv_obj_add_protect+0x2c>)
  405718:	4788      	blx	r1
  40571a:	e7fe      	b.n	40571a <lv_obj_add_protect+0x22>
  40571c:	00416da9 	.word	0x00416da9
  405720:	0042e560 	.word	0x0042e560
  405724:	00416db5 	.word	0x00416db5

00405728 <lv_obj_clear_protect>:
{
  405728:	b538      	push	{r3, r4, r5, lr}
  40572a:	4604      	mov	r4, r0
  40572c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40572e:	4b08      	ldr	r3, [pc, #32]	; (405750 <lv_obj_clear_protect+0x28>)
  405730:	4798      	blx	r3
  405732:	b130      	cbz	r0, 405742 <lv_obj_clear_protect+0x1a>
    obj->protect &= prot;
  405734:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  405738:	ea23 0305 	bic.w	r3, r3, r5
  40573c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  405740:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405742:	4622      	mov	r2, r4
  405744:	2300      	movs	r3, #0
  405746:	4803      	ldr	r0, [pc, #12]	; (405754 <lv_obj_clear_protect+0x2c>)
  405748:	4903      	ldr	r1, [pc, #12]	; (405758 <lv_obj_clear_protect+0x30>)
  40574a:	4788      	blx	r1
  40574c:	e7fe      	b.n	40574c <lv_obj_clear_protect+0x24>
  40574e:	bf00      	nop
  405750:	00416da9 	.word	0x00416da9
  405754:	0042e560 	.word	0x0042e560
  405758:	00416db5 	.word	0x00416db5

0040575c <lv_obj_set_event_cb>:
{
  40575c:	b538      	push	{r3, r4, r5, lr}
  40575e:	4604      	mov	r4, r0
  405760:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405762:	4b05      	ldr	r3, [pc, #20]	; (405778 <lv_obj_set_event_cb+0x1c>)
  405764:	4798      	blx	r3
  405766:	b108      	cbz	r0, 40576c <lv_obj_set_event_cb+0x10>
    obj->event_cb = event_cb;
  405768:	61a5      	str	r5, [r4, #24]
  40576a:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40576c:	4622      	mov	r2, r4
  40576e:	2300      	movs	r3, #0
  405770:	4802      	ldr	r0, [pc, #8]	; (40577c <lv_obj_set_event_cb+0x20>)
  405772:	4903      	ldr	r1, [pc, #12]	; (405780 <lv_obj_set_event_cb+0x24>)
  405774:	4788      	blx	r1
  405776:	e7fe      	b.n	405776 <lv_obj_set_event_cb+0x1a>
  405778:	00416da9 	.word	0x00416da9
  40577c:	0042e560 	.word	0x0042e560
  405780:	00416db5 	.word	0x00416db5

00405784 <lv_event_send_func>:
{
  405784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405788:	b084      	sub	sp, #16
  40578a:	4607      	mov	r7, r0
  40578c:	4615      	mov	r5, r2
  40578e:	461e      	mov	r6, r3
    if(obj != NULL) {
  405790:	460c      	mov	r4, r1
  405792:	b121      	cbz	r1, 40579e <lv_event_send_func+0x1a>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405794:	4608      	mov	r0, r1
  405796:	4b24      	ldr	r3, [pc, #144]	; (405828 <lv_event_send_func+0xa4>)
  405798:	4798      	blx	r3
  40579a:	2800      	cmp	r0, #0
  40579c:	d034      	beq.n	405808 <lv_event_send_func+0x84>
    event_temp_data.obj     = obj;
  40579e:	9401      	str	r4, [sp, #4]
    event_temp_data.deleted = false;
  4057a0:	2300      	movs	r3, #0
  4057a2:	f88d 3008 	strb.w	r3, [sp, #8]
    event_temp_data.prev    = NULL;
  4057a6:	9303      	str	r3, [sp, #12]
    if(event_temp_data_head) {
  4057a8:	4b20      	ldr	r3, [pc, #128]	; (40582c <lv_event_send_func+0xa8>)
  4057aa:	681b      	ldr	r3, [r3, #0]
  4057ac:	b103      	cbz	r3, 4057b0 <lv_event_send_func+0x2c>
        event_temp_data.prev = event_temp_data_head;
  4057ae:	9303      	str	r3, [sp, #12]
    event_temp_data_head = &event_temp_data;
  4057b0:	aa01      	add	r2, sp, #4
  4057b2:	4b1e      	ldr	r3, [pc, #120]	; (40582c <lv_event_send_func+0xa8>)
  4057b4:	601a      	str	r2, [r3, #0]
    const void * event_act_data_save = event_act_data;
  4057b6:	4b1e      	ldr	r3, [pc, #120]	; (405830 <lv_event_send_func+0xac>)
  4057b8:	f8d3 8000 	ldr.w	r8, [r3]
    event_act_data                   = data;
  4057bc:	601e      	str	r6, [r3, #0]
    lv_indev_t * indev_act = lv_indev_get_act();
  4057be:	4b1d      	ldr	r3, [pc, #116]	; (405834 <lv_event_send_func+0xb0>)
  4057c0:	4798      	blx	r3
    if(indev_act) {
  4057c2:	b118      	cbz	r0, 4057cc <lv_event_send_func+0x48>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
  4057c4:	6883      	ldr	r3, [r0, #8]
  4057c6:	b10b      	cbz	r3, 4057cc <lv_event_send_func+0x48>
  4057c8:	4629      	mov	r1, r5
  4057ca:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
  4057cc:	b117      	cbz	r7, 4057d4 <lv_event_send_func+0x50>
  4057ce:	4629      	mov	r1, r5
  4057d0:	4620      	mov	r0, r4
  4057d2:	47b8      	blx	r7
    event_act_data = event_act_data_save;
  4057d4:	4b16      	ldr	r3, [pc, #88]	; (405830 <lv_event_send_func+0xac>)
  4057d6:	f8c3 8000 	str.w	r8, [r3]
    event_temp_data_head = event_temp_data_head->prev;
  4057da:	4b14      	ldr	r3, [pc, #80]	; (40582c <lv_event_send_func+0xa8>)
  4057dc:	681a      	ldr	r2, [r3, #0]
  4057de:	6892      	ldr	r2, [r2, #8]
  4057e0:	601a      	str	r2, [r3, #0]
    if(event_temp_data.deleted) {
  4057e2:	f89d 3008 	ldrb.w	r3, [sp, #8]
  4057e6:	b9ab      	cbnz	r3, 405814 <lv_event_send_func+0x90>
    if(obj) {
  4057e8:	b1c4      	cbz	r4, 40581c <lv_event_send_func+0x98>
        if(obj->parent_event && obj->parent) {
  4057ea:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4057ee:	f013 0f40 	tst.w	r3, #64	; 0x40
  4057f2:	d015      	beq.n	405820 <lv_event_send_func+0x9c>
  4057f4:	6820      	ldr	r0, [r4, #0]
  4057f6:	b1a8      	cbz	r0, 405824 <lv_event_send_func+0xa0>
            lv_res_t res = lv_event_send(obj->parent, event, data);
  4057f8:	4632      	mov	r2, r6
  4057fa:	4629      	mov	r1, r5
  4057fc:	4b0e      	ldr	r3, [pc, #56]	; (405838 <lv_event_send_func+0xb4>)
  4057fe:	4798      	blx	r3
            if(res != LV_RES_OK) {
  405800:	2801      	cmp	r0, #1
  405802:	d008      	beq.n	405816 <lv_event_send_func+0x92>
                return LV_RES_INV;
  405804:	2000      	movs	r0, #0
  405806:	e006      	b.n	405816 <lv_event_send_func+0x92>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405808:	4622      	mov	r2, r4
  40580a:	2300      	movs	r3, #0
  40580c:	480b      	ldr	r0, [pc, #44]	; (40583c <lv_event_send_func+0xb8>)
  40580e:	490c      	ldr	r1, [pc, #48]	; (405840 <lv_event_send_func+0xbc>)
  405810:	4788      	blx	r1
  405812:	e7fe      	b.n	405812 <lv_event_send_func+0x8e>
        return LV_RES_INV;
  405814:	2000      	movs	r0, #0
}
  405816:	b004      	add	sp, #16
  405818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_RES_OK;
  40581c:	2001      	movs	r0, #1
  40581e:	e7fa      	b.n	405816 <lv_event_send_func+0x92>
  405820:	2001      	movs	r0, #1
  405822:	e7f8      	b.n	405816 <lv_event_send_func+0x92>
  405824:	2001      	movs	r0, #1
  405826:	e7f6      	b.n	405816 <lv_event_send_func+0x92>
  405828:	00416da9 	.word	0x00416da9
  40582c:	2040c3fc 	.word	0x2040c3fc
  405830:	2040c3f8 	.word	0x2040c3f8
  405834:	00404c51 	.word	0x00404c51
  405838:	00405845 	.word	0x00405845
  40583c:	0042e560 	.word	0x0042e560
  405840:	00416db5 	.word	0x00416db5

00405844 <lv_event_send>:
    if(obj == NULL) return LV_RES_OK;
  405844:	b198      	cbz	r0, 40586e <lv_event_send+0x2a>
{
  405846:	b570      	push	{r4, r5, r6, lr}
  405848:	4604      	mov	r4, r0
  40584a:	4616      	mov	r6, r2
  40584c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40584e:	4b09      	ldr	r3, [pc, #36]	; (405874 <lv_event_send+0x30>)
  405850:	4798      	blx	r3
  405852:	b928      	cbnz	r0, 405860 <lv_event_send+0x1c>
  405854:	4622      	mov	r2, r4
  405856:	2300      	movs	r3, #0
  405858:	4807      	ldr	r0, [pc, #28]	; (405878 <lv_event_send+0x34>)
  40585a:	4908      	ldr	r1, [pc, #32]	; (40587c <lv_event_send+0x38>)
  40585c:	4788      	blx	r1
  40585e:	e7fe      	b.n	40585e <lv_event_send+0x1a>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
  405860:	4633      	mov	r3, r6
  405862:	462a      	mov	r2, r5
  405864:	4621      	mov	r1, r4
  405866:	69a0      	ldr	r0, [r4, #24]
  405868:	4c05      	ldr	r4, [pc, #20]	; (405880 <lv_event_send+0x3c>)
  40586a:	47a0      	blx	r4
    return res;
  40586c:	bd70      	pop	{r4, r5, r6, pc}
    if(obj == NULL) return LV_RES_OK;
  40586e:	2001      	movs	r0, #1
  405870:	4770      	bx	lr
  405872:	bf00      	nop
  405874:	00416da9 	.word	0x00416da9
  405878:	0042e560 	.word	0x0042e560
  40587c:	00416db5 	.word	0x00416db5
  405880:	00405785 	.word	0x00405785

00405884 <lv_obj_set_signal_cb>:
{
  405884:	b538      	push	{r3, r4, r5, lr}
  405886:	4604      	mov	r4, r0
  405888:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40588a:	4b05      	ldr	r3, [pc, #20]	; (4058a0 <lv_obj_set_signal_cb+0x1c>)
  40588c:	4798      	blx	r3
  40588e:	b108      	cbz	r0, 405894 <lv_obj_set_signal_cb+0x10>
    obj->signal_cb = signal_cb;
  405890:	61e5      	str	r5, [r4, #28]
  405892:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405894:	4622      	mov	r2, r4
  405896:	2300      	movs	r3, #0
  405898:	4802      	ldr	r0, [pc, #8]	; (4058a4 <lv_obj_set_signal_cb+0x20>)
  40589a:	4903      	ldr	r1, [pc, #12]	; (4058a8 <lv_obj_set_signal_cb+0x24>)
  40589c:	4788      	blx	r1
  40589e:	e7fe      	b.n	40589e <lv_obj_set_signal_cb+0x1a>
  4058a0:	00416da9 	.word	0x00416da9
  4058a4:	0042e560 	.word	0x0042e560
  4058a8:	00416db5 	.word	0x00416db5

004058ac <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
  4058ac:	b120      	cbz	r0, 4058b8 <lv_signal_send+0xc>
{
  4058ae:	b510      	push	{r4, lr}
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
  4058b0:	69c4      	ldr	r4, [r0, #28]
  4058b2:	b11c      	cbz	r4, 4058bc <lv_signal_send+0x10>
  4058b4:	47a0      	blx	r4
  4058b6:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
  4058b8:	2001      	movs	r0, #1
  4058ba:	4770      	bx	lr
    lv_res_t res = LV_RES_OK;
  4058bc:	2001      	movs	r0, #1
}
  4058be:	bd10      	pop	{r4, pc}

004058c0 <lv_obj_set_design_cb>:
{
  4058c0:	b538      	push	{r3, r4, r5, lr}
  4058c2:	4604      	mov	r4, r0
  4058c4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4058c6:	4b05      	ldr	r3, [pc, #20]	; (4058dc <lv_obj_set_design_cb+0x1c>)
  4058c8:	4798      	blx	r3
  4058ca:	b108      	cbz	r0, 4058d0 <lv_obj_set_design_cb+0x10>
    obj->design_cb = design_cb;
  4058cc:	6225      	str	r5, [r4, #32]
  4058ce:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4058d0:	4622      	mov	r2, r4
  4058d2:	2300      	movs	r3, #0
  4058d4:	4802      	ldr	r0, [pc, #8]	; (4058e0 <lv_obj_set_design_cb+0x20>)
  4058d6:	4903      	ldr	r1, [pc, #12]	; (4058e4 <lv_obj_set_design_cb+0x24>)
  4058d8:	4788      	blx	r1
  4058da:	e7fe      	b.n	4058da <lv_obj_set_design_cb+0x1a>
  4058dc:	00416da9 	.word	0x00416da9
  4058e0:	0042e560 	.word	0x0042e560
  4058e4:	00416db5 	.word	0x00416db5

004058e8 <lv_obj_allocate_ext_attr>:
{
  4058e8:	b538      	push	{r3, r4, r5, lr}
  4058ea:	4604      	mov	r4, r0
  4058ec:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4058ee:	4b09      	ldr	r3, [pc, #36]	; (405914 <lv_obj_allocate_ext_attr+0x2c>)
  4058f0:	4798      	blx	r3
  4058f2:	b928      	cbnz	r0, 405900 <lv_obj_allocate_ext_attr+0x18>
  4058f4:	4622      	mov	r2, r4
  4058f6:	2300      	movs	r3, #0
  4058f8:	4807      	ldr	r0, [pc, #28]	; (405918 <lv_obj_allocate_ext_attr+0x30>)
  4058fa:	4908      	ldr	r1, [pc, #32]	; (40591c <lv_obj_allocate_ext_attr+0x34>)
  4058fc:	4788      	blx	r1
  4058fe:	e7fe      	b.n	4058fe <lv_obj_allocate_ext_attr+0x16>
    void * new_ext = lv_mem_realloc(obj->ext_attr, ext_size);
  405900:	4629      	mov	r1, r5
  405902:	6a60      	ldr	r0, [r4, #36]	; 0x24
  405904:	4b06      	ldr	r3, [pc, #24]	; (405920 <lv_obj_allocate_ext_attr+0x38>)
  405906:	4798      	blx	r3
    if(new_ext == NULL) return NULL;
  405908:	4603      	mov	r3, r0
  40590a:	b100      	cbz	r0, 40590e <lv_obj_allocate_ext_attr+0x26>
    obj->ext_attr = new_ext;
  40590c:	6260      	str	r0, [r4, #36]	; 0x24
}
  40590e:	4618      	mov	r0, r3
  405910:	bd38      	pop	{r3, r4, r5, pc}
  405912:	bf00      	nop
  405914:	00416da9 	.word	0x00416da9
  405918:	0042e560 	.word	0x0042e560
  40591c:	00416db5 	.word	0x00416db5
  405920:	0041781d 	.word	0x0041781d

00405924 <lv_obj_refresh_ext_draw_pad>:
{
  405924:	b510      	push	{r4, lr}
  405926:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405928:	4b07      	ldr	r3, [pc, #28]	; (405948 <lv_obj_refresh_ext_draw_pad+0x24>)
  40592a:	4798      	blx	r3
  40592c:	b928      	cbnz	r0, 40593a <lv_obj_refresh_ext_draw_pad+0x16>
  40592e:	4622      	mov	r2, r4
  405930:	2300      	movs	r3, #0
  405932:	4806      	ldr	r0, [pc, #24]	; (40594c <lv_obj_refresh_ext_draw_pad+0x28>)
  405934:	4906      	ldr	r1, [pc, #24]	; (405950 <lv_obj_refresh_ext_draw_pad+0x2c>)
  405936:	4788      	blx	r1
  405938:	e7fe      	b.n	405938 <lv_obj_refresh_ext_draw_pad+0x14>
    obj->ext_draw_pad = 0;
  40593a:	2200      	movs	r2, #0
  40593c:	8662      	strh	r2, [r4, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
  40593e:	69e3      	ldr	r3, [r4, #28]
  405940:	2106      	movs	r1, #6
  405942:	4620      	mov	r0, r4
  405944:	4798      	blx	r3
  405946:	bd10      	pop	{r4, pc}
  405948:	00416da9 	.word	0x00416da9
  40594c:	0042e560 	.word	0x0042e560
  405950:	00416db5 	.word	0x00416db5

00405954 <lv_obj_get_parent>:
{
  405954:	b510      	push	{r4, lr}
  405956:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405958:	4b05      	ldr	r3, [pc, #20]	; (405970 <lv_obj_get_parent+0x1c>)
  40595a:	4798      	blx	r3
  40595c:	b108      	cbz	r0, 405962 <lv_obj_get_parent+0xe>
}
  40595e:	6820      	ldr	r0, [r4, #0]
  405960:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405962:	4622      	mov	r2, r4
  405964:	2300      	movs	r3, #0
  405966:	4803      	ldr	r0, [pc, #12]	; (405974 <lv_obj_get_parent+0x20>)
  405968:	4903      	ldr	r1, [pc, #12]	; (405978 <lv_obj_get_parent+0x24>)
  40596a:	4788      	blx	r1
  40596c:	e7fe      	b.n	40596c <lv_obj_get_parent+0x18>
  40596e:	bf00      	nop
  405970:	00416da9 	.word	0x00416da9
  405974:	0042e560 	.word	0x0042e560
  405978:	00416db5 	.word	0x00416db5

0040597c <lv_obj_get_screen>:
{
  40597c:	b510      	push	{r4, lr}
  40597e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405980:	4b08      	ldr	r3, [pc, #32]	; (4059a4 <lv_obj_get_screen+0x28>)
  405982:	4798      	blx	r3
  405984:	b930      	cbnz	r0, 405994 <lv_obj_get_screen+0x18>
  405986:	4622      	mov	r2, r4
  405988:	2300      	movs	r3, #0
  40598a:	4807      	ldr	r0, [pc, #28]	; (4059a8 <lv_obj_get_screen+0x2c>)
  40598c:	4907      	ldr	r1, [pc, #28]	; (4059ac <lv_obj_get_screen+0x30>)
  40598e:	4788      	blx	r1
  405990:	e7fe      	b.n	405990 <lv_obj_get_screen+0x14>
        par   = lv_obj_get_parent(act_p);
  405992:	461c      	mov	r4, r3
  405994:	4620      	mov	r0, r4
  405996:	4b06      	ldr	r3, [pc, #24]	; (4059b0 <lv_obj_get_screen+0x34>)
  405998:	4798      	blx	r3
    } while(par != NULL);
  40599a:	4603      	mov	r3, r0
  40599c:	2800      	cmp	r0, #0
  40599e:	d1f8      	bne.n	405992 <lv_obj_get_screen+0x16>
}
  4059a0:	4620      	mov	r0, r4
  4059a2:	bd10      	pop	{r4, pc}
  4059a4:	00416da9 	.word	0x00416da9
  4059a8:	0042e560 	.word	0x0042e560
  4059ac:	00416db5 	.word	0x00416db5
  4059b0:	00405955 	.word	0x00405955

004059b4 <lv_obj_get_disp>:
{
  4059b4:	b570      	push	{r4, r5, r6, lr}
  4059b6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4059b8:	4b14      	ldr	r3, [pc, #80]	; (405a0c <lv_obj_get_disp+0x58>)
  4059ba:	4798      	blx	r3
  4059bc:	b1b8      	cbz	r0, 4059ee <lv_obj_get_disp+0x3a>
    if(obj->parent == NULL)
  4059be:	6823      	ldr	r3, [r4, #0]
  4059c0:	b11b      	cbz	r3, 4059ca <lv_obj_get_disp+0x16>
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
  4059c2:	4620      	mov	r0, r4
  4059c4:	4b12      	ldr	r3, [pc, #72]	; (405a10 <lv_obj_get_disp+0x5c>)
  4059c6:	4798      	blx	r3
  4059c8:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
  4059ca:	4812      	ldr	r0, [pc, #72]	; (405a14 <lv_obj_get_disp+0x60>)
  4059cc:	4b12      	ldr	r3, [pc, #72]	; (405a18 <lv_obj_get_disp+0x64>)
  4059ce:	4798      	blx	r3
  4059d0:	4605      	mov	r5, r0
  4059d2:	b1c5      	cbz	r5, 405a06 <lv_obj_get_disp+0x52>
        _LV_LL_READ(d->scr_ll, s) {
  4059d4:	f105 0638 	add.w	r6, r5, #56	; 0x38
  4059d8:	4630      	mov	r0, r6
  4059da:	4b0f      	ldr	r3, [pc, #60]	; (405a18 <lv_obj_get_disp+0x64>)
  4059dc:	4798      	blx	r3
  4059de:	b160      	cbz	r0, 4059fa <lv_obj_get_disp+0x46>
            if(s == scr) return d;
  4059e0:	4284      	cmp	r4, r0
  4059e2:	d010      	beq.n	405a06 <lv_obj_get_disp+0x52>
        _LV_LL_READ(d->scr_ll, s) {
  4059e4:	4601      	mov	r1, r0
  4059e6:	4630      	mov	r0, r6
  4059e8:	4b0c      	ldr	r3, [pc, #48]	; (405a1c <lv_obj_get_disp+0x68>)
  4059ea:	4798      	blx	r3
  4059ec:	e7f7      	b.n	4059de <lv_obj_get_disp+0x2a>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4059ee:	4622      	mov	r2, r4
  4059f0:	2300      	movs	r3, #0
  4059f2:	480b      	ldr	r0, [pc, #44]	; (405a20 <lv_obj_get_disp+0x6c>)
  4059f4:	490b      	ldr	r1, [pc, #44]	; (405a24 <lv_obj_get_disp+0x70>)
  4059f6:	4788      	blx	r1
  4059f8:	e7fe      	b.n	4059f8 <lv_obj_get_disp+0x44>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
  4059fa:	4629      	mov	r1, r5
  4059fc:	4805      	ldr	r0, [pc, #20]	; (405a14 <lv_obj_get_disp+0x60>)
  4059fe:	4b07      	ldr	r3, [pc, #28]	; (405a1c <lv_obj_get_disp+0x68>)
  405a00:	4798      	blx	r3
  405a02:	4605      	mov	r5, r0
  405a04:	e7e5      	b.n	4059d2 <lv_obj_get_disp+0x1e>
}
  405a06:	4628      	mov	r0, r5
  405a08:	bd70      	pop	{r4, r5, r6, pc}
  405a0a:	bf00      	nop
  405a0c:	00416da9 	.word	0x00416da9
  405a10:	0040597d 	.word	0x0040597d
  405a14:	2043a264 	.word	0x2043a264
  405a18:	004170b9 	.word	0x004170b9
  405a1c:	004170cd 	.word	0x004170cd
  405a20:	0042e560 	.word	0x0042e560
  405a24:	00416db5 	.word	0x00416db5

00405a28 <lv_obj_get_child>:
{
  405a28:	b538      	push	{r3, r4, r5, lr}
  405a2a:	4604      	mov	r4, r0
  405a2c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405a2e:	4b09      	ldr	r3, [pc, #36]	; (405a54 <lv_obj_get_child+0x2c>)
  405a30:	4798      	blx	r3
  405a32:	b128      	cbz	r0, 405a40 <lv_obj_get_child+0x18>
    if(child == NULL) {
  405a34:	b155      	cbz	r5, 405a4c <lv_obj_get_child+0x24>
        result = _lv_ll_get_next(&obj->child_ll, child);
  405a36:	4629      	mov	r1, r5
  405a38:	1d20      	adds	r0, r4, #4
  405a3a:	4b07      	ldr	r3, [pc, #28]	; (405a58 <lv_obj_get_child+0x30>)
  405a3c:	4798      	blx	r3
}
  405a3e:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405a40:	4622      	mov	r2, r4
  405a42:	2300      	movs	r3, #0
  405a44:	4805      	ldr	r0, [pc, #20]	; (405a5c <lv_obj_get_child+0x34>)
  405a46:	4906      	ldr	r1, [pc, #24]	; (405a60 <lv_obj_get_child+0x38>)
  405a48:	4788      	blx	r1
  405a4a:	e7fe      	b.n	405a4a <lv_obj_get_child+0x22>
        result = _lv_ll_get_head(&obj->child_ll);
  405a4c:	1d20      	adds	r0, r4, #4
  405a4e:	4b05      	ldr	r3, [pc, #20]	; (405a64 <lv_obj_get_child+0x3c>)
  405a50:	4798      	blx	r3
  405a52:	bd38      	pop	{r3, r4, r5, pc}
  405a54:	00416da9 	.word	0x00416da9
  405a58:	004170cd 	.word	0x004170cd
  405a5c:	0042e560 	.word	0x0042e560
  405a60:	00416db5 	.word	0x00416db5
  405a64:	004170b9 	.word	0x004170b9

00405a68 <lv_obj_get_coords>:
{
  405a68:	b538      	push	{r3, r4, r5, lr}
  405a6a:	4604      	mov	r4, r0
  405a6c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405a6e:	4b0b      	ldr	r3, [pc, #44]	; (405a9c <lv_obj_get_coords+0x34>)
  405a70:	4798      	blx	r3
  405a72:	b120      	cbz	r0, 405a7e <lv_obj_get_coords+0x16>
    lv_area_copy(cords_p, &obj->coords);
  405a74:	f104 0310 	add.w	r3, r4, #16
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  405a78:	4629      	mov	r1, r5
  405a7a:	2208      	movs	r2, #8
  405a7c:	e00a      	b.n	405a94 <lv_obj_get_coords+0x2c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405a7e:	4622      	mov	r2, r4
  405a80:	2300      	movs	r3, #0
  405a82:	4807      	ldr	r0, [pc, #28]	; (405aa0 <lv_obj_get_coords+0x38>)
  405a84:	4907      	ldr	r1, [pc, #28]	; (405aa4 <lv_obj_get_coords+0x3c>)
  405a86:	4788      	blx	r1
  405a88:	e7fe      	b.n	405a88 <lv_obj_get_coords+0x20>
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  405a8a:	f813 0b01 	ldrb.w	r0, [r3], #1
  405a8e:	f801 0b01 	strb.w	r0, [r1], #1
        d8++;
        s8++;
        len--;
  405a92:	3a01      	subs	r2, #1
    while(len) {
  405a94:	2a00      	cmp	r2, #0
  405a96:	d1f8      	bne.n	405a8a <lv_obj_get_coords+0x22>
}
  405a98:	bd38      	pop	{r3, r4, r5, pc}
  405a9a:	bf00      	nop
  405a9c:	00416da9 	.word	0x00416da9
  405aa0:	0042e560 	.word	0x0042e560
  405aa4:	00416db5 	.word	0x00416db5

00405aa8 <lv_obj_get_x>:
{
  405aa8:	b510      	push	{r4, lr}
  405aaa:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405aac:	4b0a      	ldr	r3, [pc, #40]	; (405ad8 <lv_obj_get_x+0x30>)
  405aae:	4798      	blx	r3
  405ab0:	b928      	cbnz	r0, 405abe <lv_obj_get_x+0x16>
  405ab2:	4622      	mov	r2, r4
  405ab4:	2300      	movs	r3, #0
  405ab6:	4809      	ldr	r0, [pc, #36]	; (405adc <lv_obj_get_x+0x34>)
  405ab8:	4909      	ldr	r1, [pc, #36]	; (405ae0 <lv_obj_get_x+0x38>)
  405aba:	4788      	blx	r1
  405abc:	e7fe      	b.n	405abc <lv_obj_get_x+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  405abe:	4620      	mov	r0, r4
  405ac0:	4b08      	ldr	r3, [pc, #32]	; (405ae4 <lv_obj_get_x+0x3c>)
  405ac2:	4798      	blx	r3
    if(parent) {
  405ac4:	4603      	mov	r3, r0
  405ac6:	b120      	cbz	r0, 405ad2 <lv_obj_get_x+0x2a>
        rel_x             = obj->coords.x1 - parent->coords.x1;
  405ac8:	8a20      	ldrh	r0, [r4, #16]
  405aca:	8a1b      	ldrh	r3, [r3, #16]
  405acc:	1ac0      	subs	r0, r0, r3
  405ace:	b200      	sxth	r0, r0
  405ad0:	bd10      	pop	{r4, pc}
        rel_x = obj->coords.x1;
  405ad2:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
}
  405ad6:	bd10      	pop	{r4, pc}
  405ad8:	00416da9 	.word	0x00416da9
  405adc:	0042e560 	.word	0x0042e560
  405ae0:	00416db5 	.word	0x00416db5
  405ae4:	00405955 	.word	0x00405955

00405ae8 <lv_obj_get_y>:
{
  405ae8:	b510      	push	{r4, lr}
  405aea:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405aec:	4b0a      	ldr	r3, [pc, #40]	; (405b18 <lv_obj_get_y+0x30>)
  405aee:	4798      	blx	r3
  405af0:	b928      	cbnz	r0, 405afe <lv_obj_get_y+0x16>
  405af2:	4622      	mov	r2, r4
  405af4:	2300      	movs	r3, #0
  405af6:	4809      	ldr	r0, [pc, #36]	; (405b1c <lv_obj_get_y+0x34>)
  405af8:	4909      	ldr	r1, [pc, #36]	; (405b20 <lv_obj_get_y+0x38>)
  405afa:	4788      	blx	r1
  405afc:	e7fe      	b.n	405afc <lv_obj_get_y+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  405afe:	4620      	mov	r0, r4
  405b00:	4b08      	ldr	r3, [pc, #32]	; (405b24 <lv_obj_get_y+0x3c>)
  405b02:	4798      	blx	r3
    if(parent) {
  405b04:	4603      	mov	r3, r0
  405b06:	b120      	cbz	r0, 405b12 <lv_obj_get_y+0x2a>
        rel_y             = obj->coords.y1 - parent->coords.y1;
  405b08:	8a60      	ldrh	r0, [r4, #18]
  405b0a:	8a5b      	ldrh	r3, [r3, #18]
  405b0c:	1ac0      	subs	r0, r0, r3
  405b0e:	b200      	sxth	r0, r0
  405b10:	bd10      	pop	{r4, pc}
        rel_y = obj->coords.y1;
  405b12:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
}
  405b16:	bd10      	pop	{r4, pc}
  405b18:	00416da9 	.word	0x00416da9
  405b1c:	0042e560 	.word	0x0042e560
  405b20:	00416db5 	.word	0x00416db5
  405b24:	00405955 	.word	0x00405955

00405b28 <lv_obj_get_width>:
{
  405b28:	b510      	push	{r4, lr}
  405b2a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405b2c:	4b07      	ldr	r3, [pc, #28]	; (405b4c <lv_obj_get_width+0x24>)
  405b2e:	4798      	blx	r3
  405b30:	b130      	cbz	r0, 405b40 <lv_obj_get_width+0x18>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  405b32:	8aa0      	ldrh	r0, [r4, #20]
  405b34:	8a23      	ldrh	r3, [r4, #16]
  405b36:	1ac0      	subs	r0, r0, r3
  405b38:	b280      	uxth	r0, r0
  405b3a:	3001      	adds	r0, #1
}
  405b3c:	b200      	sxth	r0, r0
  405b3e:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405b40:	4622      	mov	r2, r4
  405b42:	2300      	movs	r3, #0
  405b44:	4802      	ldr	r0, [pc, #8]	; (405b50 <lv_obj_get_width+0x28>)
  405b46:	4903      	ldr	r1, [pc, #12]	; (405b54 <lv_obj_get_width+0x2c>)
  405b48:	4788      	blx	r1
  405b4a:	e7fe      	b.n	405b4a <lv_obj_get_width+0x22>
  405b4c:	00416da9 	.word	0x00416da9
  405b50:	0042e560 	.word	0x0042e560
  405b54:	00416db5 	.word	0x00416db5

00405b58 <lv_obj_get_height>:
{
  405b58:	b510      	push	{r4, lr}
  405b5a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405b5c:	4b07      	ldr	r3, [pc, #28]	; (405b7c <lv_obj_get_height+0x24>)
  405b5e:	4798      	blx	r3
  405b60:	b130      	cbz	r0, 405b70 <lv_obj_get_height+0x18>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  405b62:	8ae0      	ldrh	r0, [r4, #22]
  405b64:	8a63      	ldrh	r3, [r4, #18]
  405b66:	1ac0      	subs	r0, r0, r3
  405b68:	b280      	uxth	r0, r0
  405b6a:	3001      	adds	r0, #1
}
  405b6c:	b200      	sxth	r0, r0
  405b6e:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405b70:	4622      	mov	r2, r4
  405b72:	2300      	movs	r3, #0
  405b74:	4802      	ldr	r0, [pc, #8]	; (405b80 <lv_obj_get_height+0x28>)
  405b76:	4903      	ldr	r1, [pc, #12]	; (405b84 <lv_obj_get_height+0x2c>)
  405b78:	4788      	blx	r1
  405b7a:	e7fe      	b.n	405b7a <lv_obj_get_height+0x22>
  405b7c:	00416da9 	.word	0x00416da9
  405b80:	0042e560 	.word	0x0042e560
  405b84:	00416db5 	.word	0x00416db5

00405b88 <lv_obj_get_auto_realign>:
{
  405b88:	b510      	push	{r4, lr}
  405b8a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405b8c:	4b06      	ldr	r3, [pc, #24]	; (405ba8 <lv_obj_get_auto_realign+0x20>)
  405b8e:	4798      	blx	r3
  405b90:	b120      	cbz	r0, 405b9c <lv_obj_get_auto_realign+0x14>
    return obj->realign.auto_realign ? true : false;
  405b92:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
}
  405b96:	f000 0001 	and.w	r0, r0, #1
  405b9a:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405b9c:	4622      	mov	r2, r4
  405b9e:	2300      	movs	r3, #0
  405ba0:	4802      	ldr	r0, [pc, #8]	; (405bac <lv_obj_get_auto_realign+0x24>)
  405ba2:	4903      	ldr	r1, [pc, #12]	; (405bb0 <lv_obj_get_auto_realign+0x28>)
  405ba4:	4788      	blx	r1
  405ba6:	e7fe      	b.n	405ba6 <lv_obj_get_auto_realign+0x1e>
  405ba8:	00416da9 	.word	0x00416da9
  405bac:	0042e560 	.word	0x0042e560
  405bb0:	00416db5 	.word	0x00416db5

00405bb4 <lv_obj_get_style_list>:
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
  405bb4:	b909      	cbnz	r1, 405bba <lv_obj_get_style_list+0x6>
  405bb6:	3028      	adds	r0, #40	; 0x28
  405bb8:	4770      	bx	lr
{
  405bba:	b500      	push	{lr}
  405bbc:	b083      	sub	sp, #12
    info.part = part;
  405bbe:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
  405bc2:	2300      	movs	r3, #0
  405bc4:	9301      	str	r3, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
  405bc6:	466a      	mov	r2, sp
  405bc8:	2108      	movs	r1, #8
  405bca:	4b05      	ldr	r3, [pc, #20]	; (405be0 <lv_obj_get_style_list+0x2c>)
  405bcc:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
  405bce:	2801      	cmp	r0, #1
  405bd0:	d103      	bne.n	405bda <lv_obj_get_style_list+0x26>
    return info.result;
  405bd2:	9801      	ldr	r0, [sp, #4]
}
  405bd4:	b003      	add	sp, #12
  405bd6:	f85d fb04 	ldr.w	pc, [sp], #4
    if(res != LV_RES_OK) return NULL;
  405bda:	2000      	movs	r0, #0
  405bdc:	e7fa      	b.n	405bd4 <lv_obj_get_style_list+0x20>
  405bde:	bf00      	nop
  405be0:	004058ad 	.word	0x004058ad

00405be4 <trans_del>:
{
  405be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405be8:	4607      	mov	r7, r0
  405bea:	4688      	mov	r8, r1
  405bec:	4691      	mov	r9, r2
  405bee:	461e      	mov	r6, r3
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  405bf0:	4819      	ldr	r0, [pc, #100]	; (405c58 <trans_del+0x74>)
  405bf2:	4b1a      	ldr	r3, [pc, #104]	; (405c5c <trans_del+0x78>)
  405bf4:	4798      	blx	r3
  405bf6:	4604      	mov	r4, r0
    while(tr != NULL) {
  405bf8:	e006      	b.n	405c08 <trans_del+0x24>
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
  405bfa:	88a3      	ldrh	r3, [r4, #4]
  405bfc:	454b      	cmp	r3, r9
  405bfe:	d015      	beq.n	405c2c <trans_del+0x48>
  405c00:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
  405c04:	d012      	beq.n	405c2c <trans_del+0x48>
{
  405c06:	462c      	mov	r4, r5
    while(tr != NULL) {
  405c08:	b31c      	cbz	r4, 405c52 <trans_del+0x6e>
        if(tr == tr_limit) break;
  405c0a:	42b4      	cmp	r4, r6
  405c0c:	d021      	beq.n	405c52 <trans_del+0x6e>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  405c0e:	4621      	mov	r1, r4
  405c10:	4811      	ldr	r0, [pc, #68]	; (405c58 <trans_del+0x74>)
  405c12:	4b13      	ldr	r3, [pc, #76]	; (405c60 <trans_del+0x7c>)
  405c14:	4798      	blx	r3
  405c16:	4605      	mov	r5, r0
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
  405c18:	6820      	ldr	r0, [r4, #0]
  405c1a:	42b8      	cmp	r0, r7
  405c1c:	d1f3      	bne.n	405c06 <trans_del+0x22>
  405c1e:	79a1      	ldrb	r1, [r4, #6]
  405c20:	4541      	cmp	r1, r8
  405c22:	d0ea      	beq.n	405bfa <trans_del+0x16>
  405c24:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  405c28:	d1ed      	bne.n	405c06 <trans_del+0x22>
  405c2a:	e7e6      	b.n	405bfa <trans_del+0x16>
            lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  405c2c:	4b0d      	ldr	r3, [pc, #52]	; (405c64 <trans_del+0x80>)
  405c2e:	4798      	blx	r3
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
  405c30:	4b0d      	ldr	r3, [pc, #52]	; (405c68 <trans_del+0x84>)
  405c32:	4798      	blx	r3
            lv_style_remove_prop(style_trans, tr->prop);
  405c34:	88a1      	ldrh	r1, [r4, #4]
  405c36:	4b0d      	ldr	r3, [pc, #52]	; (405c6c <trans_del+0x88>)
  405c38:	4798      	blx	r3
            lv_anim_del(tr, NULL);
  405c3a:	2100      	movs	r1, #0
  405c3c:	4620      	mov	r0, r4
  405c3e:	4b0c      	ldr	r3, [pc, #48]	; (405c70 <trans_del+0x8c>)
  405c40:	4798      	blx	r3
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  405c42:	4621      	mov	r1, r4
  405c44:	4804      	ldr	r0, [pc, #16]	; (405c58 <trans_del+0x74>)
  405c46:	4b0b      	ldr	r3, [pc, #44]	; (405c74 <trans_del+0x90>)
  405c48:	4798      	blx	r3
            lv_mem_free(tr);
  405c4a:	4620      	mov	r0, r4
  405c4c:	4b0a      	ldr	r3, [pc, #40]	; (405c78 <trans_del+0x94>)
  405c4e:	4798      	blx	r3
  405c50:	e7d9      	b.n	405c06 <trans_del+0x22>
  405c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405c56:	bf00      	nop
  405c58:	2043a308 	.word	0x2043a308
  405c5c:	004170c3 	.word	0x004170c3
  405c60:	004170db 	.word	0x004170db
  405c64:	00405bb5 	.word	0x00405bb5
  405c68:	0040ab95 	.word	0x0040ab95
  405c6c:	00409ff1 	.word	0x00409ff1
  405c70:	00416309 	.word	0x00416309
  405c74:	00417175 	.word	0x00417175
  405c78:	004175b1 	.word	0x004175b1

00405c7c <lv_obj_clean_style_list>:
{
  405c7c:	b538      	push	{r3, r4, r5, lr}
  405c7e:	4604      	mov	r4, r0
  405c80:	460d      	mov	r5, r1
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  405c82:	4b06      	ldr	r3, [pc, #24]	; (405c9c <lv_obj_clean_style_list+0x20>)
  405c84:	4798      	blx	r3
    if(style_dsc == NULL) {
  405c86:	b138      	cbz	r0, 405c98 <lv_obj_clean_style_list+0x1c>
    _lv_style_list_reset(style_dsc);
  405c88:	4b05      	ldr	r3, [pc, #20]	; (405ca0 <lv_obj_clean_style_list+0x24>)
  405c8a:	4798      	blx	r3
    trans_del(obj, part, 0xFF, NULL);
  405c8c:	2300      	movs	r3, #0
  405c8e:	22ff      	movs	r2, #255	; 0xff
  405c90:	4629      	mov	r1, r5
  405c92:	4620      	mov	r0, r4
  405c94:	4c03      	ldr	r4, [pc, #12]	; (405ca4 <lv_obj_clean_style_list+0x28>)
  405c96:	47a0      	blx	r4
  405c98:	bd38      	pop	{r3, r4, r5, pc}
  405c9a:	bf00      	nop
  405c9c:	00405bb5 	.word	0x00405bb5
  405ca0:	0040aba9 	.word	0x0040aba9
  405ca4:	00405be5 	.word	0x00405be5

00405ca8 <_lv_obj_disable_style_caching>:
{
  405ca8:	b570      	push	{r4, r5, r6, lr}
  405caa:	4605      	mov	r5, r0
  405cac:	460e      	mov	r6, r1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  405cae:	2400      	movs	r4, #0
  405cb0:	2c3f      	cmp	r4, #63	; 0x3f
  405cb2:	d80b      	bhi.n	405ccc <_lv_obj_disable_style_caching+0x24>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  405cb4:	4621      	mov	r1, r4
  405cb6:	4628      	mov	r0, r5
  405cb8:	4b0c      	ldr	r3, [pc, #48]	; (405cec <_lv_obj_disable_style_caching+0x44>)
  405cba:	4798      	blx	r3
        if(list == NULL) break;
  405cbc:	b130      	cbz	r0, 405ccc <_lv_obj_disable_style_caching+0x24>
        list->ignore_cache = dis;
  405cbe:	7942      	ldrb	r2, [r0, #5]
  405cc0:	f366 02c3 	bfi	r2, r6, #3, #1
  405cc4:	7142      	strb	r2, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  405cc6:	3401      	adds	r4, #1
  405cc8:	b2e4      	uxtb	r4, r4
  405cca:	e7f1      	b.n	405cb0 <_lv_obj_disable_style_caching+0x8>
  405ccc:	2440      	movs	r4, #64	; 0x40
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  405cce:	2cff      	cmp	r4, #255	; 0xff
  405cd0:	d00b      	beq.n	405cea <_lv_obj_disable_style_caching+0x42>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  405cd2:	4621      	mov	r1, r4
  405cd4:	4628      	mov	r0, r5
  405cd6:	4b05      	ldr	r3, [pc, #20]	; (405cec <_lv_obj_disable_style_caching+0x44>)
  405cd8:	4798      	blx	r3
        if(list == NULL) break;
  405cda:	b130      	cbz	r0, 405cea <_lv_obj_disable_style_caching+0x42>
        list->ignore_cache = dis;
  405cdc:	7942      	ldrb	r2, [r0, #5]
  405cde:	f366 02c3 	bfi	r2, r6, #3, #1
  405ce2:	7142      	strb	r2, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  405ce4:	3401      	adds	r4, #1
  405ce6:	b2e4      	uxtb	r4, r4
  405ce8:	e7f1      	b.n	405cce <_lv_obj_disable_style_caching+0x26>
  405cea:	bd70      	pop	{r4, r5, r6, pc}
  405cec:	00405bb5 	.word	0x00405bb5

00405cf0 <trans_anim_ready_cb>:
{
  405cf0:	b538      	push	{r3, r4, r5, lr}
    lv_style_trans_t * tr = a->var;
  405cf2:	6804      	ldr	r4, [r0, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
  405cf4:	4816      	ldr	r0, [pc, #88]	; (405d50 <trans_anim_ready_cb+0x60>)
  405cf6:	4b17      	ldr	r3, [pc, #92]	; (405d54 <trans_anim_ready_cb+0x64>)
  405cf8:	4798      	blx	r3
    bool running = false;
  405cfa:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
  405cfc:	e003      	b.n	405d06 <trans_anim_ready_cb+0x16>
  405cfe:	4601      	mov	r1, r0
  405d00:	4813      	ldr	r0, [pc, #76]	; (405d50 <trans_anim_ready_cb+0x60>)
  405d02:	4b15      	ldr	r3, [pc, #84]	; (405d58 <trans_anim_ready_cb+0x68>)
  405d04:	4798      	blx	r3
  405d06:	b178      	cbz	r0, 405d28 <trans_anim_ready_cb+0x38>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
  405d08:	42a0      	cmp	r0, r4
  405d0a:	d0f8      	beq.n	405cfe <trans_anim_ready_cb+0xe>
  405d0c:	6802      	ldr	r2, [r0, #0]
  405d0e:	6823      	ldr	r3, [r4, #0]
  405d10:	429a      	cmp	r2, r3
  405d12:	d1f4      	bne.n	405cfe <trans_anim_ready_cb+0xe>
  405d14:	6843      	ldr	r3, [r0, #4]
  405d16:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  405d1a:	6863      	ldr	r3, [r4, #4]
  405d1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  405d20:	429a      	cmp	r2, r3
  405d22:	d1ec      	bne.n	405cfe <trans_anim_ready_cb+0xe>
            running = true;
  405d24:	2501      	movs	r5, #1
  405d26:	e7ea      	b.n	405cfe <trans_anim_ready_cb+0xe>
    if(!running) {
  405d28:	b13d      	cbz	r5, 405d3a <trans_anim_ready_cb+0x4a>
    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  405d2a:	4621      	mov	r1, r4
  405d2c:	4808      	ldr	r0, [pc, #32]	; (405d50 <trans_anim_ready_cb+0x60>)
  405d2e:	4b0b      	ldr	r3, [pc, #44]	; (405d5c <trans_anim_ready_cb+0x6c>)
  405d30:	4798      	blx	r3
    lv_mem_free(tr);
  405d32:	4620      	mov	r0, r4
  405d34:	4b0a      	ldr	r3, [pc, #40]	; (405d60 <trans_anim_ready_cb+0x70>)
  405d36:	4798      	blx	r3
  405d38:	bd38      	pop	{r3, r4, r5, pc}
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  405d3a:	79a1      	ldrb	r1, [r4, #6]
  405d3c:	6820      	ldr	r0, [r4, #0]
  405d3e:	4b09      	ldr	r3, [pc, #36]	; (405d64 <trans_anim_ready_cb+0x74>)
  405d40:	4798      	blx	r3
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
  405d42:	4b09      	ldr	r3, [pc, #36]	; (405d68 <trans_anim_ready_cb+0x78>)
  405d44:	4798      	blx	r3
        lv_style_remove_prop(style_trans, tr->prop);
  405d46:	88a1      	ldrh	r1, [r4, #4]
  405d48:	4b08      	ldr	r3, [pc, #32]	; (405d6c <trans_anim_ready_cb+0x7c>)
  405d4a:	4798      	blx	r3
  405d4c:	e7ed      	b.n	405d2a <trans_anim_ready_cb+0x3a>
  405d4e:	bf00      	nop
  405d50:	2043a308 	.word	0x2043a308
  405d54:	004170b9 	.word	0x004170b9
  405d58:	004170cd 	.word	0x004170cd
  405d5c:	00417175 	.word	0x00417175
  405d60:	004175b1 	.word	0x004175b1
  405d64:	00405bb5 	.word	0x00405bb5
  405d68:	0040ab95 	.word	0x0040ab95
  405d6c:	00409ff1 	.word	0x00409ff1

00405d70 <lv_obj_get_hidden>:
{
  405d70:	b510      	push	{r4, lr}
  405d72:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405d74:	4b06      	ldr	r3, [pc, #24]	; (405d90 <lv_obj_get_hidden+0x20>)
  405d76:	4798      	blx	r3
  405d78:	b120      	cbz	r0, 405d84 <lv_obj_get_hidden+0x14>
    return obj->hidden == 0 ? false : true;
  405d7a:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  405d7e:	f3c0 1000 	ubfx	r0, r0, #4, #1
  405d82:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405d84:	4622      	mov	r2, r4
  405d86:	2300      	movs	r3, #0
  405d88:	4802      	ldr	r0, [pc, #8]	; (405d94 <lv_obj_get_hidden+0x24>)
  405d8a:	4903      	ldr	r1, [pc, #12]	; (405d98 <lv_obj_get_hidden+0x28>)
  405d8c:	4788      	blx	r1
  405d8e:	e7fe      	b.n	405d8e <lv_obj_get_hidden+0x1e>
  405d90:	00416da9 	.word	0x00416da9
  405d94:	0042e560 	.word	0x0042e560
  405d98:	00416db5 	.word	0x00416db5

00405d9c <lv_obj_area_is_visible>:
{
  405d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405da0:	b082      	sub	sp, #8
  405da2:	4604      	mov	r4, r0
  405da4:	460d      	mov	r5, r1
    if(lv_obj_get_hidden(obj)) return false;
  405da6:	4b34      	ldr	r3, [pc, #208]	; (405e78 <lv_obj_area_is_visible+0xdc>)
  405da8:	4798      	blx	r3
  405daa:	b120      	cbz	r0, 405db6 <lv_obj_area_is_visible+0x1a>
  405dac:	2600      	movs	r6, #0
}
  405dae:	4630      	mov	r0, r6
  405db0:	b002      	add	sp, #8
  405db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405db6:	4606      	mov	r6, r0
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
  405db8:	4620      	mov	r0, r4
  405dba:	4b30      	ldr	r3, [pc, #192]	; (405e7c <lv_obj_area_is_visible+0xe0>)
  405dbc:	4798      	blx	r3
  405dbe:	4607      	mov	r7, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
  405dc0:	4b2f      	ldr	r3, [pc, #188]	; (405e80 <lv_obj_area_is_visible+0xe4>)
  405dc2:	4798      	blx	r3
  405dc4:	4680      	mov	r8, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
  405dc6:	4b2f      	ldr	r3, [pc, #188]	; (405e84 <lv_obj_area_is_visible+0xe8>)
  405dc8:	4798      	blx	r3
  405dca:	4287      	cmp	r7, r0
  405dcc:	d010      	beq.n	405df0 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_scr_prev(disp) ||
  405dce:	4640      	mov	r0, r8
  405dd0:	4b2d      	ldr	r3, [pc, #180]	; (405e88 <lv_obj_area_is_visible+0xec>)
  405dd2:	4798      	blx	r3
    if(obj_scr == lv_disp_get_scr_act(disp) ||
  405dd4:	4287      	cmp	r7, r0
  405dd6:	d00b      	beq.n	405df0 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_layer_top(disp) ||
  405dd8:	4640      	mov	r0, r8
  405dda:	4b2c      	ldr	r3, [pc, #176]	; (405e8c <lv_obj_area_is_visible+0xf0>)
  405ddc:	4798      	blx	r3
       obj_scr == lv_disp_get_scr_prev(disp) ||
  405dde:	4287      	cmp	r7, r0
  405de0:	d006      	beq.n	405df0 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_layer_sys(disp)) {
  405de2:	4640      	mov	r0, r8
  405de4:	4b2a      	ldr	r3, [pc, #168]	; (405e90 <lv_obj_area_is_visible+0xf4>)
  405de6:	4798      	blx	r3
       obj_scr == lv_disp_get_layer_top(disp) ||
  405de8:	4287      	cmp	r7, r0
  405dea:	d001      	beq.n	405df0 <lv_obj_area_is_visible+0x54>
    return true;
  405dec:	2601      	movs	r6, #1
  405dee:	e7de      	b.n	405dae <lv_obj_area_is_visible+0x12>
        lv_coord_t ext_size = obj->ext_draw_pad;
  405df0:	f9b4 7032 	ldrsh.w	r7, [r4, #50]	; 0x32
        lv_area_copy(&obj_coords, &obj->coords);
  405df4:	f104 0110 	add.w	r1, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  405df8:	466a      	mov	r2, sp
  405dfa:	2308      	movs	r3, #8
  405dfc:	e004      	b.n	405e08 <lv_obj_area_is_visible+0x6c>
        *d8 = *s8;
  405dfe:	f811 0b01 	ldrb.w	r0, [r1], #1
  405e02:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  405e06:	3b01      	subs	r3, #1
    while(len) {
  405e08:	2b00      	cmp	r3, #0
  405e0a:	d1f8      	bne.n	405dfe <lv_obj_area_is_visible+0x62>
        obj_coords.x1 -= ext_size;
  405e0c:	b2bb      	uxth	r3, r7
  405e0e:	f8bd 2000 	ldrh.w	r2, [sp]
  405e12:	1ad2      	subs	r2, r2, r3
  405e14:	f8ad 2000 	strh.w	r2, [sp]
        obj_coords.y1 -= ext_size;
  405e18:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  405e1c:	1ad2      	subs	r2, r2, r3
  405e1e:	f8ad 2002 	strh.w	r2, [sp, #2]
        obj_coords.x2 += ext_size;
  405e22:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  405e26:	441a      	add	r2, r3
  405e28:	f8ad 2004 	strh.w	r2, [sp, #4]
        obj_coords.y2 += ext_size;
  405e2c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  405e30:	4413      	add	r3, r2
  405e32:	f8ad 3006 	strh.w	r3, [sp, #6]
        is_common = _lv_area_intersect(area, area, &obj_coords);
  405e36:	466a      	mov	r2, sp
  405e38:	4629      	mov	r1, r5
  405e3a:	4628      	mov	r0, r5
  405e3c:	4b15      	ldr	r3, [pc, #84]	; (405e94 <lv_obj_area_is_visible+0xf8>)
  405e3e:	4798      	blx	r3
        if(is_common == false) return false;  /*The area is not on the object*/
  405e40:	4607      	mov	r7, r0
  405e42:	2800      	cmp	r0, #0
  405e44:	d0b3      	beq.n	405dae <lv_obj_area_is_visible+0x12>
        lv_obj_t * par = lv_obj_get_parent(obj);
  405e46:	4620      	mov	r0, r4
  405e48:	4b13      	ldr	r3, [pc, #76]	; (405e98 <lv_obj_area_is_visible+0xfc>)
  405e4a:	4798      	blx	r3
  405e4c:	4604      	mov	r4, r0
        while(par != NULL) {
  405e4e:	b18c      	cbz	r4, 405e74 <lv_obj_area_is_visible+0xd8>
            is_common = _lv_area_intersect(area, area, &par->coords);
  405e50:	f104 0210 	add.w	r2, r4, #16
  405e54:	4629      	mov	r1, r5
  405e56:	4628      	mov	r0, r5
  405e58:	4b0e      	ldr	r3, [pc, #56]	; (405e94 <lv_obj_area_is_visible+0xf8>)
  405e5a:	4798      	blx	r3
            if(is_common == false) return false;       /*If no common parts with parent break;*/
  405e5c:	2800      	cmp	r0, #0
  405e5e:	d0a6      	beq.n	405dae <lv_obj_area_is_visible+0x12>
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
  405e60:	4620      	mov	r0, r4
  405e62:	4b05      	ldr	r3, [pc, #20]	; (405e78 <lv_obj_area_is_visible+0xdc>)
  405e64:	4798      	blx	r3
  405e66:	2800      	cmp	r0, #0
  405e68:	d1a1      	bne.n	405dae <lv_obj_area_is_visible+0x12>
            par = lv_obj_get_parent(par);
  405e6a:	4620      	mov	r0, r4
  405e6c:	4b0a      	ldr	r3, [pc, #40]	; (405e98 <lv_obj_area_is_visible+0xfc>)
  405e6e:	4798      	blx	r3
  405e70:	4604      	mov	r4, r0
  405e72:	e7ec      	b.n	405e4e <lv_obj_area_is_visible+0xb2>
    return true;
  405e74:	463e      	mov	r6, r7
  405e76:	e79a      	b.n	405dae <lv_obj_area_is_visible+0x12>
  405e78:	00405d71 	.word	0x00405d71
  405e7c:	0040597d 	.word	0x0040597d
  405e80:	004059b5 	.word	0x004059b5
  405e84:	00403659 	.word	0x00403659
  405e88:	00403675 	.word	0x00403675
  405e8c:	00403691 	.word	0x00403691
  405e90:	004036ad 	.word	0x004036ad
  405e94:	004164e3 	.word	0x004164e3
  405e98:	00405955 	.word	0x00405955

00405e9c <lv_obj_invalidate_area>:
{
  405e9c:	b530      	push	{r4, r5, lr}
  405e9e:	b083      	sub	sp, #12
  405ea0:	4605      	mov	r5, r0
  405ea2:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405ea4:	4b10      	ldr	r3, [pc, #64]	; (405ee8 <lv_obj_invalidate_area+0x4c>)
  405ea6:	4798      	blx	r3
  405ea8:	b118      	cbz	r0, 405eb2 <lv_obj_invalidate_area+0x16>
  405eaa:	4622      	mov	r2, r4
  405eac:	4669      	mov	r1, sp
  405eae:	2308      	movs	r3, #8
  405eb0:	e00a      	b.n	405ec8 <lv_obj_invalidate_area+0x2c>
  405eb2:	462a      	mov	r2, r5
  405eb4:	2300      	movs	r3, #0
  405eb6:	480d      	ldr	r0, [pc, #52]	; (405eec <lv_obj_invalidate_area+0x50>)
  405eb8:	490d      	ldr	r1, [pc, #52]	; (405ef0 <lv_obj_invalidate_area+0x54>)
  405eba:	4788      	blx	r1
  405ebc:	e7fe      	b.n	405ebc <lv_obj_invalidate_area+0x20>
        *d8 = *s8;
  405ebe:	f812 0b01 	ldrb.w	r0, [r2], #1
  405ec2:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  405ec6:	3b01      	subs	r3, #1
    while(len) {
  405ec8:	2b00      	cmp	r3, #0
  405eca:	d1f8      	bne.n	405ebe <lv_obj_invalidate_area+0x22>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
  405ecc:	4669      	mov	r1, sp
  405ece:	4628      	mov	r0, r5
  405ed0:	4b08      	ldr	r3, [pc, #32]	; (405ef4 <lv_obj_invalidate_area+0x58>)
  405ed2:	4798      	blx	r3
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
  405ed4:	b128      	cbz	r0, 405ee2 <lv_obj_invalidate_area+0x46>
  405ed6:	4628      	mov	r0, r5
  405ed8:	4b07      	ldr	r3, [pc, #28]	; (405ef8 <lv_obj_invalidate_area+0x5c>)
  405eda:	4798      	blx	r3
  405edc:	4669      	mov	r1, sp
  405ede:	4b07      	ldr	r3, [pc, #28]	; (405efc <lv_obj_invalidate_area+0x60>)
  405ee0:	4798      	blx	r3
}
  405ee2:	b003      	add	sp, #12
  405ee4:	bd30      	pop	{r4, r5, pc}
  405ee6:	bf00      	nop
  405ee8:	00416da9 	.word	0x00416da9
  405eec:	0042e560 	.word	0x0042e560
  405ef0:	00416db5 	.word	0x00416db5
  405ef4:	00405d9d 	.word	0x00405d9d
  405ef8:	004059b5 	.word	0x004059b5
  405efc:	004095fd 	.word	0x004095fd

00405f00 <lv_obj_invalidate>:
{
  405f00:	b530      	push	{r4, r5, lr}
  405f02:	b083      	sub	sp, #12
  405f04:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405f06:	4b19      	ldr	r3, [pc, #100]	; (405f6c <lv_obj_invalidate+0x6c>)
  405f08:	4798      	blx	r3
  405f0a:	b130      	cbz	r0, 405f1a <lv_obj_invalidate+0x1a>
    lv_coord_t ext_size = obj->ext_draw_pad;
  405f0c:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    lv_area_copy(&obj_coords, &obj->coords);
  405f10:	f104 0010 	add.w	r0, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  405f14:	4669      	mov	r1, sp
  405f16:	2208      	movs	r2, #8
  405f18:	e00a      	b.n	405f30 <lv_obj_invalidate+0x30>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405f1a:	4622      	mov	r2, r4
  405f1c:	2300      	movs	r3, #0
  405f1e:	4814      	ldr	r0, [pc, #80]	; (405f70 <lv_obj_invalidate+0x70>)
  405f20:	4914      	ldr	r1, [pc, #80]	; (405f74 <lv_obj_invalidate+0x74>)
  405f22:	4788      	blx	r1
  405f24:	e7fe      	b.n	405f24 <lv_obj_invalidate+0x24>
        *d8 = *s8;
  405f26:	f810 5b01 	ldrb.w	r5, [r0], #1
  405f2a:	f801 5b01 	strb.w	r5, [r1], #1
        len--;
  405f2e:	3a01      	subs	r2, #1
    while(len) {
  405f30:	2a00      	cmp	r2, #0
  405f32:	d1f8      	bne.n	405f26 <lv_obj_invalidate+0x26>
    obj_coords.x1 -= ext_size;
  405f34:	b29b      	uxth	r3, r3
  405f36:	f8bd 2000 	ldrh.w	r2, [sp]
  405f3a:	1ad2      	subs	r2, r2, r3
  405f3c:	f8ad 2000 	strh.w	r2, [sp]
    obj_coords.y1 -= ext_size;
  405f40:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  405f44:	1ad2      	subs	r2, r2, r3
  405f46:	f8ad 2002 	strh.w	r2, [sp, #2]
    obj_coords.x2 += ext_size;
  405f4a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  405f4e:	441a      	add	r2, r3
  405f50:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
  405f54:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  405f58:	4413      	add	r3, r2
  405f5a:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
  405f5e:	4669      	mov	r1, sp
  405f60:	4620      	mov	r0, r4
  405f62:	4b05      	ldr	r3, [pc, #20]	; (405f78 <lv_obj_invalidate+0x78>)
  405f64:	4798      	blx	r3
}
  405f66:	b003      	add	sp, #12
  405f68:	bd30      	pop	{r4, r5, pc}
  405f6a:	bf00      	nop
  405f6c:	00416da9 	.word	0x00416da9
  405f70:	0042e560 	.word	0x0042e560
  405f74:	00416db5 	.word	0x00416db5
  405f78:	00405e9d 	.word	0x00405e9d

00405f7c <lv_obj_move_foreground>:
{
  405f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405f7e:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405f80:	4b11      	ldr	r3, [pc, #68]	; (405fc8 <lv_obj_move_foreground+0x4c>)
  405f82:	4798      	blx	r3
  405f84:	b928      	cbnz	r0, 405f92 <lv_obj_move_foreground+0x16>
  405f86:	462a      	mov	r2, r5
  405f88:	2300      	movs	r3, #0
  405f8a:	4810      	ldr	r0, [pc, #64]	; (405fcc <lv_obj_move_foreground+0x50>)
  405f8c:	4910      	ldr	r1, [pc, #64]	; (405fd0 <lv_obj_move_foreground+0x54>)
  405f8e:	4788      	blx	r1
  405f90:	e7fe      	b.n	405f90 <lv_obj_move_foreground+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  405f92:	4628      	mov	r0, r5
  405f94:	4b0f      	ldr	r3, [pc, #60]	; (405fd4 <lv_obj_move_foreground+0x58>)
  405f96:	4798      	blx	r3
  405f98:	4604      	mov	r4, r0
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
  405f9a:	1d06      	adds	r6, r0, #4
  405f9c:	4630      	mov	r0, r6
  405f9e:	4b0e      	ldr	r3, [pc, #56]	; (405fd8 <lv_obj_move_foreground+0x5c>)
  405fa0:	4798      	blx	r3
  405fa2:	4285      	cmp	r5, r0
  405fa4:	d00f      	beq.n	405fc6 <lv_obj_move_foreground+0x4a>
    lv_obj_invalidate(parent);
  405fa6:	4620      	mov	r0, r4
  405fa8:	4f0c      	ldr	r7, [pc, #48]	; (405fdc <lv_obj_move_foreground+0x60>)
  405faa:	47b8      	blx	r7
    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
  405fac:	2301      	movs	r3, #1
  405fae:	462a      	mov	r2, r5
  405fb0:	4631      	mov	r1, r6
  405fb2:	4630      	mov	r0, r6
  405fb4:	4e0a      	ldr	r6, [pc, #40]	; (405fe0 <lv_obj_move_foreground+0x64>)
  405fb6:	47b0      	blx	r6
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
  405fb8:	69e3      	ldr	r3, [r4, #28]
  405fba:	462a      	mov	r2, r5
  405fbc:	2101      	movs	r1, #1
  405fbe:	4620      	mov	r0, r4
  405fc0:	4798      	blx	r3
    lv_obj_invalidate(parent);
  405fc2:	4620      	mov	r0, r4
  405fc4:	47b8      	blx	r7
  405fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405fc8:	00416da9 	.word	0x00416da9
  405fcc:	0042e560 	.word	0x0042e560
  405fd0:	00416db5 	.word	0x00416db5
  405fd4:	00405955 	.word	0x00405955
  405fd8:	004170b9 	.word	0x004170b9
  405fdc:	00405f01 	.word	0x00405f01
  405fe0:	00417249 	.word	0x00417249

00405fe4 <lv_obj_set_pos>:
{
  405fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405fe8:	b083      	sub	sp, #12
  405fea:	4604      	mov	r4, r0
  405fec:	460f      	mov	r7, r1
  405fee:	4615      	mov	r5, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405ff0:	4b24      	ldr	r3, [pc, #144]	; (406084 <lv_obj_set_pos+0xa0>)
  405ff2:	4798      	blx	r3
  405ff4:	2800      	cmp	r0, #0
  405ff6:	d03f      	beq.n	406078 <lv_obj_set_pos+0x94>
    lv_obj_t * par = obj->parent;
  405ff8:	6826      	ldr	r6, [r4, #0]
    if(par) {
  405ffa:	b12e      	cbz	r6, 406008 <lv_obj_set_pos+0x24>
        x = x + par->coords.x1;
  405ffc:	8a33      	ldrh	r3, [r6, #16]
  405ffe:	441f      	add	r7, r3
  406000:	b23f      	sxth	r7, r7
        y = y + par->coords.y1;
  406002:	8a73      	ldrh	r3, [r6, #18]
  406004:	441d      	add	r5, r3
  406006:	b22d      	sxth	r5, r5
    diff.x = x - obj->coords.x1;
  406008:	8a23      	ldrh	r3, [r4, #16]
  40600a:	1afb      	subs	r3, r7, r3
  40600c:	fa1f f883 	uxth.w	r8, r3
  406010:	fa0f f788 	sxth.w	r7, r8
    diff.y = y - obj->coords.y1;
  406014:	8a63      	ldrh	r3, [r4, #18]
  406016:	1aed      	subs	r5, r5, r3
  406018:	b2ad      	uxth	r5, r5
  40601a:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
  40601e:	b917      	cbnz	r7, 406026 <lv_obj_set_pos+0x42>
  406020:	f1b9 0f00 	cmp.w	r9, #0
  406024:	d025      	beq.n	406072 <lv_obj_set_pos+0x8e>
    lv_obj_invalidate(obj);
  406026:	4620      	mov	r0, r4
  406028:	4b17      	ldr	r3, [pc, #92]	; (406088 <lv_obj_set_pos+0xa4>)
  40602a:	4798      	blx	r3
    lv_obj_get_coords(obj, &ori);
  40602c:	4669      	mov	r1, sp
  40602e:	4620      	mov	r0, r4
  406030:	4b16      	ldr	r3, [pc, #88]	; (40608c <lv_obj_set_pos+0xa8>)
  406032:	4798      	blx	r3
    obj->coords.x1 += diff.x;
  406034:	8a23      	ldrh	r3, [r4, #16]
  406036:	4443      	add	r3, r8
  406038:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
  40603a:	8a63      	ldrh	r3, [r4, #18]
  40603c:	442b      	add	r3, r5
  40603e:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
  406040:	8aa3      	ldrh	r3, [r4, #20]
  406042:	4443      	add	r3, r8
  406044:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
  406046:	8ae3      	ldrh	r3, [r4, #22]
  406048:	441d      	add	r5, r3
  40604a:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
  40604c:	464a      	mov	r2, r9
  40604e:	4639      	mov	r1, r7
  406050:	4620      	mov	r0, r4
  406052:	4b0f      	ldr	r3, [pc, #60]	; (406090 <lv_obj_set_pos+0xac>)
  406054:	4798      	blx	r3
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
  406056:	69e3      	ldr	r3, [r4, #28]
  406058:	466a      	mov	r2, sp
  40605a:	2102      	movs	r1, #2
  40605c:	4620      	mov	r0, r4
  40605e:	4798      	blx	r3
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
  406060:	b126      	cbz	r6, 40606c <lv_obj_set_pos+0x88>
  406062:	69f3      	ldr	r3, [r6, #28]
  406064:	4622      	mov	r2, r4
  406066:	2101      	movs	r1, #1
  406068:	4630      	mov	r0, r6
  40606a:	4798      	blx	r3
    lv_obj_invalidate(obj);
  40606c:	4620      	mov	r0, r4
  40606e:	4b06      	ldr	r3, [pc, #24]	; (406088 <lv_obj_set_pos+0xa4>)
  406070:	4798      	blx	r3
}
  406072:	b003      	add	sp, #12
  406074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406078:	4622      	mov	r2, r4
  40607a:	2300      	movs	r3, #0
  40607c:	4805      	ldr	r0, [pc, #20]	; (406094 <lv_obj_set_pos+0xb0>)
  40607e:	4906      	ldr	r1, [pc, #24]	; (406098 <lv_obj_set_pos+0xb4>)
  406080:	4788      	blx	r1
  406082:	e7fe      	b.n	406082 <lv_obj_set_pos+0x9e>
  406084:	00416da9 	.word	0x00416da9
  406088:	00405f01 	.word	0x00405f01
  40608c:	00405a69 	.word	0x00405a69
  406090:	00405405 	.word	0x00405405
  406094:	0042e560 	.word	0x0042e560
  406098:	00416db5 	.word	0x00416db5

0040609c <lv_obj_set_x>:
{
  40609c:	b538      	push	{r3, r4, r5, lr}
  40609e:	4604      	mov	r4, r0
  4060a0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4060a2:	4b09      	ldr	r3, [pc, #36]	; (4060c8 <lv_obj_set_x+0x2c>)
  4060a4:	4798      	blx	r3
  4060a6:	b928      	cbnz	r0, 4060b4 <lv_obj_set_x+0x18>
  4060a8:	4622      	mov	r2, r4
  4060aa:	2300      	movs	r3, #0
  4060ac:	4807      	ldr	r0, [pc, #28]	; (4060cc <lv_obj_set_x+0x30>)
  4060ae:	4908      	ldr	r1, [pc, #32]	; (4060d0 <lv_obj_set_x+0x34>)
  4060b0:	4788      	blx	r1
  4060b2:	e7fe      	b.n	4060b2 <lv_obj_set_x+0x16>
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
  4060b4:	4620      	mov	r0, r4
  4060b6:	4b07      	ldr	r3, [pc, #28]	; (4060d4 <lv_obj_set_x+0x38>)
  4060b8:	4798      	blx	r3
  4060ba:	4602      	mov	r2, r0
  4060bc:	4629      	mov	r1, r5
  4060be:	4620      	mov	r0, r4
  4060c0:	4b05      	ldr	r3, [pc, #20]	; (4060d8 <lv_obj_set_x+0x3c>)
  4060c2:	4798      	blx	r3
  4060c4:	bd38      	pop	{r3, r4, r5, pc}
  4060c6:	bf00      	nop
  4060c8:	00416da9 	.word	0x00416da9
  4060cc:	0042e560 	.word	0x0042e560
  4060d0:	00416db5 	.word	0x00416db5
  4060d4:	00405ae9 	.word	0x00405ae9
  4060d8:	00405fe5 	.word	0x00405fe5

004060dc <lv_obj_set_y>:
{
  4060dc:	b538      	push	{r3, r4, r5, lr}
  4060de:	4604      	mov	r4, r0
  4060e0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4060e2:	4b09      	ldr	r3, [pc, #36]	; (406108 <lv_obj_set_y+0x2c>)
  4060e4:	4798      	blx	r3
  4060e6:	b928      	cbnz	r0, 4060f4 <lv_obj_set_y+0x18>
  4060e8:	4622      	mov	r2, r4
  4060ea:	2300      	movs	r3, #0
  4060ec:	4807      	ldr	r0, [pc, #28]	; (40610c <lv_obj_set_y+0x30>)
  4060ee:	4908      	ldr	r1, [pc, #32]	; (406110 <lv_obj_set_y+0x34>)
  4060f0:	4788      	blx	r1
  4060f2:	e7fe      	b.n	4060f2 <lv_obj_set_y+0x16>
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
  4060f4:	4620      	mov	r0, r4
  4060f6:	4b07      	ldr	r3, [pc, #28]	; (406114 <lv_obj_set_y+0x38>)
  4060f8:	4798      	blx	r3
  4060fa:	462a      	mov	r2, r5
  4060fc:	4601      	mov	r1, r0
  4060fe:	4620      	mov	r0, r4
  406100:	4b05      	ldr	r3, [pc, #20]	; (406118 <lv_obj_set_y+0x3c>)
  406102:	4798      	blx	r3
  406104:	bd38      	pop	{r3, r4, r5, pc}
  406106:	bf00      	nop
  406108:	00416da9 	.word	0x00416da9
  40610c:	0042e560 	.word	0x0042e560
  406110:	00416db5 	.word	0x00416db5
  406114:	00405aa9 	.word	0x00405aa9
  406118:	00405fe5 	.word	0x00405fe5

0040611c <obj_align_core>:
{
  40611c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40611e:	b083      	sub	sp, #12
  406120:	4604      	mov	r4, r0
  406122:	461d      	mov	r5, r3
  406124:	f89d 6020 	ldrb.w	r6, [sp, #32]
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
  406128:	f101 0010 	add.w	r0, r1, #16
  40612c:	ab01      	add	r3, sp, #4
  40612e:	f104 0110 	add.w	r1, r4, #16
  406132:	4f18      	ldr	r7, [pc, #96]	; (406194 <obj_align_core+0x78>)
  406134:	47b8      	blx	r7
    lv_obj_t * par        = lv_obj_get_parent(obj);
  406136:	4620      	mov	r0, r4
  406138:	4b17      	ldr	r3, [pc, #92]	; (406198 <obj_align_core+0x7c>)
  40613a:	4798      	blx	r3
    lv_coord_t par_abs_x  = par->coords.x1;
  40613c:	f9b0 7010 	ldrsh.w	r7, [r0, #16]
    lv_coord_t par_abs_y  = par->coords.y1;
  406140:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_pos.x += x_ofs;
  406144:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  406148:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40614c:	4411      	add	r1, r2
  40614e:	b289      	uxth	r1, r1
    new_pos.y += y_ofs;
  406150:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  406154:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
  406158:	4402      	add	r2, r0
  40615a:	b292      	uxth	r2, r2
    new_pos.x -= par_abs_x;
  40615c:	1bc9      	subs	r1, r1, r7
  40615e:	b209      	sxth	r1, r1
  406160:	f8ad 1004 	strh.w	r1, [sp, #4]
    new_pos.y -= par_abs_y;
  406164:	1ad2      	subs	r2, r2, r3
  406166:	b212      	sxth	r2, r2
  406168:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
  40616c:	4235      	tst	r5, r6
  40616e:	d103      	bne.n	406178 <obj_align_core+0x5c>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
  406170:	b935      	cbnz	r5, 406180 <obj_align_core+0x64>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
  406172:	b94e      	cbnz	r6, 406188 <obj_align_core+0x6c>
}
  406174:	b003      	add	sp, #12
  406176:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
  406178:	4620      	mov	r0, r4
  40617a:	4b08      	ldr	r3, [pc, #32]	; (40619c <obj_align_core+0x80>)
  40617c:	4798      	blx	r3
  40617e:	e7f9      	b.n	406174 <obj_align_core+0x58>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
  406180:	4620      	mov	r0, r4
  406182:	4b07      	ldr	r3, [pc, #28]	; (4061a0 <obj_align_core+0x84>)
  406184:	4798      	blx	r3
  406186:	e7f5      	b.n	406174 <obj_align_core+0x58>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
  406188:	4611      	mov	r1, r2
  40618a:	4620      	mov	r0, r4
  40618c:	4b05      	ldr	r3, [pc, #20]	; (4061a4 <obj_align_core+0x88>)
  40618e:	4798      	blx	r3
}
  406190:	e7f0      	b.n	406174 <obj_align_core+0x58>
  406192:	bf00      	nop
  406194:	00416821 	.word	0x00416821
  406198:	00405955 	.word	0x00405955
  40619c:	00405fe5 	.word	0x00405fe5
  4061a0:	0040609d 	.word	0x0040609d
  4061a4:	004060dd 	.word	0x004060dd

004061a8 <lv_obj_align>:
{
  4061a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4061ac:	b085      	sub	sp, #20
  4061ae:	4604      	mov	r4, r0
  4061b0:	460d      	mov	r5, r1
  4061b2:	4690      	mov	r8, r2
  4061b4:	461f      	mov	r7, r3
  4061b6:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4061ba:	4b19      	ldr	r3, [pc, #100]	; (406220 <lv_obj_align+0x78>)
  4061bc:	4798      	blx	r3
  4061be:	b928      	cbnz	r0, 4061cc <lv_obj_align+0x24>
  4061c0:	4622      	mov	r2, r4
  4061c2:	2300      	movs	r3, #0
  4061c4:	4817      	ldr	r0, [pc, #92]	; (406224 <lv_obj_align+0x7c>)
  4061c6:	4918      	ldr	r1, [pc, #96]	; (406228 <lv_obj_align+0x80>)
  4061c8:	4788      	blx	r1
  4061ca:	e7fe      	b.n	4061ca <lv_obj_align+0x22>
    if(base == NULL) base = lv_obj_get_parent(obj);
  4061cc:	b14d      	cbz	r5, 4061e2 <lv_obj_align+0x3a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
  4061ce:	4628      	mov	r0, r5
  4061d0:	4b13      	ldr	r3, [pc, #76]	; (406220 <lv_obj_align+0x78>)
  4061d2:	4798      	blx	r3
  4061d4:	b950      	cbnz	r0, 4061ec <lv_obj_align+0x44>
  4061d6:	462a      	mov	r2, r5
  4061d8:	2300      	movs	r3, #0
  4061da:	4812      	ldr	r0, [pc, #72]	; (406224 <lv_obj_align+0x7c>)
  4061dc:	4912      	ldr	r1, [pc, #72]	; (406228 <lv_obj_align+0x80>)
  4061de:	4788      	blx	r1
  4061e0:	e7fe      	b.n	4061e0 <lv_obj_align+0x38>
    if(base == NULL) base = lv_obj_get_parent(obj);
  4061e2:	4620      	mov	r0, r4
  4061e4:	4b11      	ldr	r3, [pc, #68]	; (40622c <lv_obj_align+0x84>)
  4061e6:	4798      	blx	r3
  4061e8:	4605      	mov	r5, r0
  4061ea:	e7f0      	b.n	4061ce <lv_obj_align+0x26>
    obj_align_core(obj, base, align, true, true, x_ofs, y_ofs);
  4061ec:	9602      	str	r6, [sp, #8]
  4061ee:	9701      	str	r7, [sp, #4]
  4061f0:	2301      	movs	r3, #1
  4061f2:	9300      	str	r3, [sp, #0]
  4061f4:	4642      	mov	r2, r8
  4061f6:	4629      	mov	r1, r5
  4061f8:	4620      	mov	r0, r4
  4061fa:	f8df 9034 	ldr.w	r9, [pc, #52]	; 406230 <lv_obj_align+0x88>
  4061fe:	47c8      	blx	r9
    obj->realign.align       = align;
  406200:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
  406204:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
  406208:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
  40620c:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 0;
  40620e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  406212:	f36f 0341 	bfc	r3, #1, #1
  406216:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
  40621a:	b005      	add	sp, #20
  40621c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406220:	00416da9 	.word	0x00416da9
  406224:	0042e560 	.word	0x0042e560
  406228:	00416db5 	.word	0x00416db5
  40622c:	00405955 	.word	0x00405955
  406230:	0040611d 	.word	0x0040611d

00406234 <obj_align_mid_core>:
{
  406234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406238:	b083      	sub	sp, #12
  40623a:	4680      	mov	r8, r0
  40623c:	9001      	str	r0, [sp, #4]
  40623e:	460f      	mov	r7, r1
  406240:	4616      	mov	r6, r2
  406242:	469a      	mov	sl, r3
  406244:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
    lv_coord_t new_x = lv_obj_get_x(obj);
  406248:	4ba4      	ldr	r3, [pc, #656]	; (4064dc <obj_align_mid_core+0x2a8>)
  40624a:	4798      	blx	r3
  40624c:	4605      	mov	r5, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
  40624e:	4640      	mov	r0, r8
  406250:	4ba3      	ldr	r3, [pc, #652]	; (4064e0 <obj_align_mid_core+0x2ac>)
  406252:	4798      	blx	r3
  406254:	4604      	mov	r4, r0
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
  406256:	4640      	mov	r0, r8
  406258:	4ba2      	ldr	r3, [pc, #648]	; (4064e4 <obj_align_mid_core+0x2b0>)
  40625a:	4798      	blx	r3
  40625c:	4681      	mov	r9, r0
  40625e:	2800      	cmp	r0, #0
  406260:	db22      	blt.n	4062a8 <obj_align_mid_core+0x74>
  406262:	f349 094f 	sbfx	r9, r9, #1, #16
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
  406266:	9801      	ldr	r0, [sp, #4]
  406268:	4b9f      	ldr	r3, [pc, #636]	; (4064e8 <obj_align_mid_core+0x2b4>)
  40626a:	4798      	blx	r3
  40626c:	4680      	mov	r8, r0
  40626e:	2800      	cmp	r0, #0
  406270:	db1d      	blt.n	4062ae <obj_align_mid_core+0x7a>
  406272:	f348 084f 	sbfx	r8, r8, #1, #16
    switch(align) {
  406276:	2e14      	cmp	r6, #20
  406278:	d82e      	bhi.n	4062d8 <obj_align_mid_core+0xa4>
  40627a:	e8df f016 	tbh	[pc, r6, lsl #1]
  40627e:	001b      	.short	0x001b
  406280:	0062005b 	.word	0x0062005b
  406284:	007c0071 	.word	0x007c0071
  406288:	009a0087 	.word	0x009a0087
  40628c:	00b800a9 	.word	0x00b800a9
  406290:	00d200cb 	.word	0x00d200cb
  406294:	00ec00e1 	.word	0x00ec00e1
  406298:	010a00f7 	.word	0x010a00f7
  40629c:	01200119 	.word	0x01200119
  4062a0:	01440139 	.word	0x01440139
  4062a4:	0162014f 	.word	0x0162014f
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
  4062a8:	f100 0901 	add.w	r9, r0, #1
  4062ac:	e7d9      	b.n	406262 <obj_align_mid_core+0x2e>
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
  4062ae:	f100 0801 	add.w	r8, r0, #1
  4062b2:	e7de      	b.n	406272 <obj_align_mid_core+0x3e>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  4062b4:	4638      	mov	r0, r7
  4062b6:	4b8b      	ldr	r3, [pc, #556]	; (4064e4 <obj_align_mid_core+0x2b0>)
  4062b8:	4798      	blx	r3
  4062ba:	4605      	mov	r5, r0
  4062bc:	2800      	cmp	r0, #0
  4062be:	db35      	blt.n	40632c <obj_align_mid_core+0xf8>
  4062c0:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  4062c4:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  4062c6:	4638      	mov	r0, r7
  4062c8:	4b87      	ldr	r3, [pc, #540]	; (4064e8 <obj_align_mid_core+0x2b4>)
  4062ca:	4798      	blx	r3
  4062cc:	4604      	mov	r4, r0
  4062ce:	2800      	cmp	r0, #0
  4062d0:	db2e      	blt.n	406330 <obj_align_mid_core+0xfc>
  4062d2:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  4062d6:	b224      	sxth	r4, r4
    lv_obj_t * par        = lv_obj_get_parent(obj);
  4062d8:	9801      	ldr	r0, [sp, #4]
  4062da:	4b84      	ldr	r3, [pc, #528]	; (4064ec <obj_align_mid_core+0x2b8>)
  4062dc:	4798      	blx	r3
    lv_coord_t base_abs_x = base->coords.x1;
  4062de:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
    lv_coord_t base_abs_y = base->coords.y1;
  4062e2:	f9b7 e012 	ldrsh.w	lr, [r7, #18]
    lv_coord_t par_abs_x  = par->coords.x1;
  4062e6:	f9b0 7010 	ldrsh.w	r7, [r0, #16]
    lv_coord_t par_abs_y  = par->coords.y1;
  4062ea:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_x += x_ofs + base_abs_x;
  4062ee:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
  4062f2:	4411      	add	r1, r2
  4062f4:	fa15 f181 	uxtah	r1, r5, r1
  4062f8:	b289      	uxth	r1, r1
    new_y += y_ofs + base_abs_y;
  4062fa:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
  4062fe:	4472      	add	r2, lr
  406300:	fa14 f282 	uxtah	r2, r4, r2
  406304:	b292      	uxth	r2, r2
    new_x -= par_abs_x;
  406306:	1bc9      	subs	r1, r1, r7
  406308:	b209      	sxth	r1, r1
    new_y -= par_abs_y;
  40630a:	1ad2      	subs	r2, r2, r3
  40630c:	b212      	sxth	r2, r2
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
  40630e:	ea1a 0f0b 	tst.w	sl, fp
  406312:	f040 8125 	bne.w	406560 <obj_align_mid_core+0x32c>
    else if(x_set) lv_obj_set_x(obj, new_x);
  406316:	f1ba 0f00 	cmp.w	sl, #0
  40631a:	f040 8125 	bne.w	406568 <obj_align_mid_core+0x334>
    else if(y_set) lv_obj_set_y(obj, new_y);
  40631e:	f1bb 0f00 	cmp.w	fp, #0
  406322:	f040 8125 	bne.w	406570 <obj_align_mid_core+0x33c>
}
  406326:	b003      	add	sp, #12
  406328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  40632c:	1c45      	adds	r5, r0, #1
  40632e:	e7c7      	b.n	4062c0 <obj_align_mid_core+0x8c>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406330:	1c44      	adds	r4, r0, #1
  406332:	e7ce      	b.n	4062d2 <obj_align_mid_core+0x9e>
            new_x = -obj_w_half;
  406334:	f1c9 0500 	rsb	r5, r9, #0
  406338:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  40633a:	f1c8 0400 	rsb	r4, r8, #0
  40633e:	b224      	sxth	r4, r4
            break;
  406340:	e7ca      	b.n	4062d8 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  406342:	4638      	mov	r0, r7
  406344:	4b67      	ldr	r3, [pc, #412]	; (4064e4 <obj_align_mid_core+0x2b0>)
  406346:	4798      	blx	r3
  406348:	4605      	mov	r5, r0
  40634a:	2800      	cmp	r0, #0
  40634c:	db06      	blt.n	40635c <obj_align_mid_core+0x128>
  40634e:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  406352:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  406354:	f1c8 0400 	rsb	r4, r8, #0
  406358:	b224      	sxth	r4, r4
            break;
  40635a:	e7bd      	b.n	4062d8 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  40635c:	1c45      	adds	r5, r0, #1
  40635e:	e7f6      	b.n	40634e <obj_align_mid_core+0x11a>
            new_x = lv_obj_get_width(base) - obj_w_half;
  406360:	4638      	mov	r0, r7
  406362:	4b60      	ldr	r3, [pc, #384]	; (4064e4 <obj_align_mid_core+0x2b0>)
  406364:	4798      	blx	r3
  406366:	b285      	uxth	r5, r0
  406368:	eba5 0509 	sub.w	r5, r5, r9
  40636c:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  40636e:	f1c8 0400 	rsb	r4, r8, #0
  406372:	b224      	sxth	r4, r4
            break;
  406374:	e7b0      	b.n	4062d8 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  406376:	f1c9 0500 	rsb	r5, r9, #0
  40637a:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  40637c:	4638      	mov	r0, r7
  40637e:	4b5a      	ldr	r3, [pc, #360]	; (4064e8 <obj_align_mid_core+0x2b4>)
  406380:	4798      	blx	r3
  406382:	b284      	uxth	r4, r0
  406384:	eba4 0408 	sub.w	r4, r4, r8
  406388:	b224      	sxth	r4, r4
            break;
  40638a:	e7a5      	b.n	4062d8 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  40638c:	4638      	mov	r0, r7
  40638e:	4b55      	ldr	r3, [pc, #340]	; (4064e4 <obj_align_mid_core+0x2b0>)
  406390:	4798      	blx	r3
  406392:	4605      	mov	r5, r0
  406394:	2800      	cmp	r0, #0
  406396:	db0a      	blt.n	4063ae <obj_align_mid_core+0x17a>
  406398:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  40639c:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  40639e:	4638      	mov	r0, r7
  4063a0:	4b51      	ldr	r3, [pc, #324]	; (4064e8 <obj_align_mid_core+0x2b4>)
  4063a2:	4798      	blx	r3
  4063a4:	b284      	uxth	r4, r0
  4063a6:	eba4 0408 	sub.w	r4, r4, r8
  4063aa:	b224      	sxth	r4, r4
            break;
  4063ac:	e794      	b.n	4062d8 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  4063ae:	1c45      	adds	r5, r0, #1
  4063b0:	e7f2      	b.n	406398 <obj_align_mid_core+0x164>
            new_x = lv_obj_get_width(base) - obj_w_half;
  4063b2:	4638      	mov	r0, r7
  4063b4:	4b4b      	ldr	r3, [pc, #300]	; (4064e4 <obj_align_mid_core+0x2b0>)
  4063b6:	4798      	blx	r3
  4063b8:	b285      	uxth	r5, r0
  4063ba:	eba5 0509 	sub.w	r5, r5, r9
  4063be:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  4063c0:	4638      	mov	r0, r7
  4063c2:	4b49      	ldr	r3, [pc, #292]	; (4064e8 <obj_align_mid_core+0x2b4>)
  4063c4:	4798      	blx	r3
  4063c6:	b284      	uxth	r4, r0
  4063c8:	eba4 0408 	sub.w	r4, r4, r8
  4063cc:	b224      	sxth	r4, r4
            break;
  4063ce:	e783      	b.n	4062d8 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  4063d0:	f1c9 0500 	rsb	r5, r9, #0
  4063d4:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  4063d6:	4638      	mov	r0, r7
  4063d8:	4b43      	ldr	r3, [pc, #268]	; (4064e8 <obj_align_mid_core+0x2b4>)
  4063da:	4798      	blx	r3
  4063dc:	4604      	mov	r4, r0
  4063de:	2800      	cmp	r0, #0
  4063e0:	db03      	blt.n	4063ea <obj_align_mid_core+0x1b6>
  4063e2:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  4063e6:	b224      	sxth	r4, r4
            break;
  4063e8:	e776      	b.n	4062d8 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  4063ea:	1c44      	adds	r4, r0, #1
  4063ec:	e7f9      	b.n	4063e2 <obj_align_mid_core+0x1ae>
            new_x = lv_obj_get_width(base) - obj_w_half;
  4063ee:	4638      	mov	r0, r7
  4063f0:	4b3c      	ldr	r3, [pc, #240]	; (4064e4 <obj_align_mid_core+0x2b0>)
  4063f2:	4798      	blx	r3
  4063f4:	b285      	uxth	r5, r0
  4063f6:	eba5 0509 	sub.w	r5, r5, r9
  4063fa:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  4063fc:	4638      	mov	r0, r7
  4063fe:	4b3a      	ldr	r3, [pc, #232]	; (4064e8 <obj_align_mid_core+0x2b4>)
  406400:	4798      	blx	r3
  406402:	4604      	mov	r4, r0
  406404:	2800      	cmp	r0, #0
  406406:	db03      	blt.n	406410 <obj_align_mid_core+0x1dc>
  406408:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  40640c:	b224      	sxth	r4, r4
            break;
  40640e:	e763      	b.n	4062d8 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406410:	1c44      	adds	r4, r0, #1
  406412:	e7f9      	b.n	406408 <obj_align_mid_core+0x1d4>
            new_x = -obj_w_half;
  406414:	f1c9 0500 	rsb	r5, r9, #0
  406418:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  40641a:	f1c8 0400 	rsb	r4, r8, #0
  40641e:	b224      	sxth	r4, r4
            break;
  406420:	e75a      	b.n	4062d8 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  406422:	4638      	mov	r0, r7
  406424:	4b2f      	ldr	r3, [pc, #188]	; (4064e4 <obj_align_mid_core+0x2b0>)
  406426:	4798      	blx	r3
  406428:	4605      	mov	r5, r0
  40642a:	2800      	cmp	r0, #0
  40642c:	db06      	blt.n	40643c <obj_align_mid_core+0x208>
  40642e:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  406432:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  406434:	f1c8 0400 	rsb	r4, r8, #0
  406438:	b224      	sxth	r4, r4
            break;
  40643a:	e74d      	b.n	4062d8 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  40643c:	1c45      	adds	r5, r0, #1
  40643e:	e7f6      	b.n	40642e <obj_align_mid_core+0x1fa>
            new_x = lv_obj_get_width(base) - obj_w_half;
  406440:	4638      	mov	r0, r7
  406442:	4b28      	ldr	r3, [pc, #160]	; (4064e4 <obj_align_mid_core+0x2b0>)
  406444:	4798      	blx	r3
  406446:	b285      	uxth	r5, r0
  406448:	eba5 0509 	sub.w	r5, r5, r9
  40644c:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  40644e:	f1c8 0400 	rsb	r4, r8, #0
  406452:	b224      	sxth	r4, r4
            break;
  406454:	e740      	b.n	4062d8 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  406456:	f1c9 0500 	rsb	r5, r9, #0
  40645a:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  40645c:	4638      	mov	r0, r7
  40645e:	4b22      	ldr	r3, [pc, #136]	; (4064e8 <obj_align_mid_core+0x2b4>)
  406460:	4798      	blx	r3
  406462:	b284      	uxth	r4, r0
  406464:	eba4 0408 	sub.w	r4, r4, r8
  406468:	b224      	sxth	r4, r4
            break;
  40646a:	e735      	b.n	4062d8 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  40646c:	4638      	mov	r0, r7
  40646e:	4b1d      	ldr	r3, [pc, #116]	; (4064e4 <obj_align_mid_core+0x2b0>)
  406470:	4798      	blx	r3
  406472:	4605      	mov	r5, r0
  406474:	2800      	cmp	r0, #0
  406476:	db0a      	blt.n	40648e <obj_align_mid_core+0x25a>
  406478:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  40647c:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  40647e:	4638      	mov	r0, r7
  406480:	4b19      	ldr	r3, [pc, #100]	; (4064e8 <obj_align_mid_core+0x2b4>)
  406482:	4798      	blx	r3
  406484:	b284      	uxth	r4, r0
  406486:	eba4 0408 	sub.w	r4, r4, r8
  40648a:	b224      	sxth	r4, r4
            break;
  40648c:	e724      	b.n	4062d8 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  40648e:	1c45      	adds	r5, r0, #1
  406490:	e7f2      	b.n	406478 <obj_align_mid_core+0x244>
            new_x = lv_obj_get_width(base) - obj_w_half;
  406492:	4638      	mov	r0, r7
  406494:	4b13      	ldr	r3, [pc, #76]	; (4064e4 <obj_align_mid_core+0x2b0>)
  406496:	4798      	blx	r3
  406498:	b285      	uxth	r5, r0
  40649a:	eba5 0509 	sub.w	r5, r5, r9
  40649e:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  4064a0:	4638      	mov	r0, r7
  4064a2:	4b11      	ldr	r3, [pc, #68]	; (4064e8 <obj_align_mid_core+0x2b4>)
  4064a4:	4798      	blx	r3
  4064a6:	b284      	uxth	r4, r0
  4064a8:	eba4 0408 	sub.w	r4, r4, r8
  4064ac:	b224      	sxth	r4, r4
            break;
  4064ae:	e713      	b.n	4062d8 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  4064b0:	f1c9 0500 	rsb	r5, r9, #0
  4064b4:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  4064b6:	f1c8 0400 	rsb	r4, r8, #0
  4064ba:	b224      	sxth	r4, r4
            break;
  4064bc:	e70c      	b.n	4062d8 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  4064be:	f1c9 0500 	rsb	r5, r9, #0
  4064c2:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  4064c4:	4638      	mov	r0, r7
  4064c6:	4b08      	ldr	r3, [pc, #32]	; (4064e8 <obj_align_mid_core+0x2b4>)
  4064c8:	4798      	blx	r3
  4064ca:	4604      	mov	r4, r0
  4064cc:	2800      	cmp	r0, #0
  4064ce:	db03      	blt.n	4064d8 <obj_align_mid_core+0x2a4>
  4064d0:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  4064d4:	b224      	sxth	r4, r4
            break;
  4064d6:	e6ff      	b.n	4062d8 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  4064d8:	1c44      	adds	r4, r0, #1
  4064da:	e7f9      	b.n	4064d0 <obj_align_mid_core+0x29c>
  4064dc:	00405aa9 	.word	0x00405aa9
  4064e0:	00405ae9 	.word	0x00405ae9
  4064e4:	00405b29 	.word	0x00405b29
  4064e8:	00405b59 	.word	0x00405b59
  4064ec:	00405955 	.word	0x00405955
            new_x = -obj_w_half;
  4064f0:	f1c9 0500 	rsb	r5, r9, #0
  4064f4:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  4064f6:	4638      	mov	r0, r7
  4064f8:	4b20      	ldr	r3, [pc, #128]	; (40657c <obj_align_mid_core+0x348>)
  4064fa:	4798      	blx	r3
  4064fc:	b284      	uxth	r4, r0
  4064fe:	eba4 0408 	sub.w	r4, r4, r8
  406502:	b224      	sxth	r4, r4
            break;
  406504:	e6e8      	b.n	4062d8 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) - obj_w_half;
  406506:	4638      	mov	r0, r7
  406508:	4b1d      	ldr	r3, [pc, #116]	; (406580 <obj_align_mid_core+0x34c>)
  40650a:	4798      	blx	r3
  40650c:	b285      	uxth	r5, r0
  40650e:	eba5 0509 	sub.w	r5, r5, r9
  406512:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  406514:	f1c8 0400 	rsb	r4, r8, #0
  406518:	b224      	sxth	r4, r4
            break;
  40651a:	e6dd      	b.n	4062d8 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) - obj_w_half;
  40651c:	4638      	mov	r0, r7
  40651e:	4b18      	ldr	r3, [pc, #96]	; (406580 <obj_align_mid_core+0x34c>)
  406520:	4798      	blx	r3
  406522:	b285      	uxth	r5, r0
  406524:	eba5 0509 	sub.w	r5, r5, r9
  406528:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  40652a:	4638      	mov	r0, r7
  40652c:	4b13      	ldr	r3, [pc, #76]	; (40657c <obj_align_mid_core+0x348>)
  40652e:	4798      	blx	r3
  406530:	4604      	mov	r4, r0
  406532:	2800      	cmp	r0, #0
  406534:	db03      	blt.n	40653e <obj_align_mid_core+0x30a>
  406536:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  40653a:	b224      	sxth	r4, r4
            break;
  40653c:	e6cc      	b.n	4062d8 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  40653e:	1c44      	adds	r4, r0, #1
  406540:	e7f9      	b.n	406536 <obj_align_mid_core+0x302>
            new_x = lv_obj_get_width(base) - obj_w_half;
  406542:	4638      	mov	r0, r7
  406544:	4b0e      	ldr	r3, [pc, #56]	; (406580 <obj_align_mid_core+0x34c>)
  406546:	4798      	blx	r3
  406548:	b285      	uxth	r5, r0
  40654a:	eba5 0509 	sub.w	r5, r5, r9
  40654e:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  406550:	4638      	mov	r0, r7
  406552:	4b0a      	ldr	r3, [pc, #40]	; (40657c <obj_align_mid_core+0x348>)
  406554:	4798      	blx	r3
  406556:	b284      	uxth	r4, r0
  406558:	eba4 0408 	sub.w	r4, r4, r8
  40655c:	b224      	sxth	r4, r4
            break;
  40655e:	e6bb      	b.n	4062d8 <obj_align_mid_core+0xa4>
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
  406560:	9801      	ldr	r0, [sp, #4]
  406562:	4b08      	ldr	r3, [pc, #32]	; (406584 <obj_align_mid_core+0x350>)
  406564:	4798      	blx	r3
  406566:	e6de      	b.n	406326 <obj_align_mid_core+0xf2>
    else if(x_set) lv_obj_set_x(obj, new_x);
  406568:	9801      	ldr	r0, [sp, #4]
  40656a:	4b07      	ldr	r3, [pc, #28]	; (406588 <obj_align_mid_core+0x354>)
  40656c:	4798      	blx	r3
  40656e:	e6da      	b.n	406326 <obj_align_mid_core+0xf2>
    else if(y_set) lv_obj_set_y(obj, new_y);
  406570:	4611      	mov	r1, r2
  406572:	9801      	ldr	r0, [sp, #4]
  406574:	4b05      	ldr	r3, [pc, #20]	; (40658c <obj_align_mid_core+0x358>)
  406576:	4798      	blx	r3
}
  406578:	e6d5      	b.n	406326 <obj_align_mid_core+0xf2>
  40657a:	bf00      	nop
  40657c:	00405b59 	.word	0x00405b59
  406580:	00405b29 	.word	0x00405b29
  406584:	00405fe5 	.word	0x00405fe5
  406588:	0040609d 	.word	0x0040609d
  40658c:	004060dd 	.word	0x004060dd

00406590 <lv_obj_align_mid>:
{
  406590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406594:	b085      	sub	sp, #20
  406596:	4604      	mov	r4, r0
  406598:	460d      	mov	r5, r1
  40659a:	4690      	mov	r8, r2
  40659c:	461f      	mov	r7, r3
  40659e:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4065a2:	4b19      	ldr	r3, [pc, #100]	; (406608 <lv_obj_align_mid+0x78>)
  4065a4:	4798      	blx	r3
  4065a6:	b928      	cbnz	r0, 4065b4 <lv_obj_align_mid+0x24>
  4065a8:	4622      	mov	r2, r4
  4065aa:	2300      	movs	r3, #0
  4065ac:	4817      	ldr	r0, [pc, #92]	; (40660c <lv_obj_align_mid+0x7c>)
  4065ae:	4918      	ldr	r1, [pc, #96]	; (406610 <lv_obj_align_mid+0x80>)
  4065b0:	4788      	blx	r1
  4065b2:	e7fe      	b.n	4065b2 <lv_obj_align_mid+0x22>
    if(base == NULL) {
  4065b4:	b14d      	cbz	r5, 4065ca <lv_obj_align_mid+0x3a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
  4065b6:	4628      	mov	r0, r5
  4065b8:	4b13      	ldr	r3, [pc, #76]	; (406608 <lv_obj_align_mid+0x78>)
  4065ba:	4798      	blx	r3
  4065bc:	b950      	cbnz	r0, 4065d4 <lv_obj_align_mid+0x44>
  4065be:	462a      	mov	r2, r5
  4065c0:	2300      	movs	r3, #0
  4065c2:	4812      	ldr	r0, [pc, #72]	; (40660c <lv_obj_align_mid+0x7c>)
  4065c4:	4912      	ldr	r1, [pc, #72]	; (406610 <lv_obj_align_mid+0x80>)
  4065c6:	4788      	blx	r1
  4065c8:	e7fe      	b.n	4065c8 <lv_obj_align_mid+0x38>
        base = lv_obj_get_parent(obj);
  4065ca:	4620      	mov	r0, r4
  4065cc:	4b11      	ldr	r3, [pc, #68]	; (406614 <lv_obj_align_mid+0x84>)
  4065ce:	4798      	blx	r3
  4065d0:	4605      	mov	r5, r0
  4065d2:	e7f0      	b.n	4065b6 <lv_obj_align_mid+0x26>
    obj_align_mid_core(obj, base, align, true, true, x_ofs, y_ofs);
  4065d4:	9602      	str	r6, [sp, #8]
  4065d6:	9701      	str	r7, [sp, #4]
  4065d8:	2301      	movs	r3, #1
  4065da:	9300      	str	r3, [sp, #0]
  4065dc:	4642      	mov	r2, r8
  4065de:	4629      	mov	r1, r5
  4065e0:	4620      	mov	r0, r4
  4065e2:	f8df 9034 	ldr.w	r9, [pc, #52]	; 406618 <lv_obj_align_mid+0x88>
  4065e6:	47c8      	blx	r9
    obj->realign.align       = align;
  4065e8:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
  4065ec:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
  4065f0:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
  4065f4:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 1;
  4065f6:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  4065fa:	f043 0302 	orr.w	r3, r3, #2
  4065fe:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
  406602:	b005      	add	sp, #20
  406604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406608:	00416da9 	.word	0x00416da9
  40660c:	0042e560 	.word	0x0042e560
  406610:	00416db5 	.word	0x00416db5
  406614:	00405955 	.word	0x00405955
  406618:	00406235 	.word	0x00406235

0040661c <lv_obj_realign>:
{
  40661c:	b510      	push	{r4, lr}
  40661e:	b082      	sub	sp, #8
  406620:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406622:	4b13      	ldr	r3, [pc, #76]	; (406670 <lv_obj_realign+0x54>)
  406624:	4798      	blx	r3
  406626:	b188      	cbz	r0, 40664c <lv_obj_realign+0x30>
    if(obj->realign.mid_align)
  406628:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  40662c:	f013 0f02 	tst.w	r3, #2
  406630:	d012      	beq.n	406658 <lv_obj_realign+0x3c>
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
  406632:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  406636:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  40663a:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
  40663e:	9100      	str	r1, [sp, #0]
  406640:	6c21      	ldr	r1, [r4, #64]	; 0x40
  406642:	4620      	mov	r0, r4
  406644:	4c0b      	ldr	r4, [pc, #44]	; (406674 <lv_obj_realign+0x58>)
  406646:	47a0      	blx	r4
}
  406648:	b002      	add	sp, #8
  40664a:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40664c:	4622      	mov	r2, r4
  40664e:	2300      	movs	r3, #0
  406650:	4809      	ldr	r0, [pc, #36]	; (406678 <lv_obj_realign+0x5c>)
  406652:	490a      	ldr	r1, [pc, #40]	; (40667c <lv_obj_realign+0x60>)
  406654:	4788      	blx	r1
  406656:	e7fe      	b.n	406656 <lv_obj_realign+0x3a>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
  406658:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  40665c:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  406660:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
  406664:	9100      	str	r1, [sp, #0]
  406666:	6c21      	ldr	r1, [r4, #64]	; 0x40
  406668:	4620      	mov	r0, r4
  40666a:	4c05      	ldr	r4, [pc, #20]	; (406680 <lv_obj_realign+0x64>)
  40666c:	47a0      	blx	r4
}
  40666e:	e7eb      	b.n	406648 <lv_obj_realign+0x2c>
  406670:	00416da9 	.word	0x00416da9
  406674:	00406591 	.word	0x00406591
  406678:	0042e560 	.word	0x0042e560
  40667c:	00416db5 	.word	0x00416db5
  406680:	004061a9 	.word	0x004061a9

00406684 <refresh_children_style>:
{
  406684:	b570      	push	{r4, r5, r6, lr}
  406686:	4606      	mov	r6, r0
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  406688:	2100      	movs	r1, #0
  40668a:	4b0c      	ldr	r3, [pc, #48]	; (4066bc <refresh_children_style+0x38>)
  40668c:	4798      	blx	r3
  40668e:	4604      	mov	r4, r0
    while(child != NULL) {
  406690:	e011      	b.n	4066b6 <refresh_children_style+0x32>
        lv_obj_invalidate(child);
  406692:	4620      	mov	r0, r4
  406694:	4d0a      	ldr	r5, [pc, #40]	; (4066c0 <refresh_children_style+0x3c>)
  406696:	47a8      	blx	r5
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
  406698:	69e3      	ldr	r3, [r4, #28]
  40669a:	2200      	movs	r2, #0
  40669c:	2104      	movs	r1, #4
  40669e:	4620      	mov	r0, r4
  4066a0:	4798      	blx	r3
        lv_obj_invalidate(child);
  4066a2:	4620      	mov	r0, r4
  4066a4:	47a8      	blx	r5
        refresh_children_style(child); /*Check children too*/
  4066a6:	4620      	mov	r0, r4
  4066a8:	f7ff ffec 	bl	406684 <refresh_children_style>
        child = lv_obj_get_child(obj, child);
  4066ac:	4621      	mov	r1, r4
  4066ae:	4630      	mov	r0, r6
  4066b0:	4b02      	ldr	r3, [pc, #8]	; (4066bc <refresh_children_style+0x38>)
  4066b2:	4798      	blx	r3
  4066b4:	4604      	mov	r4, r0
    while(child != NULL) {
  4066b6:	2c00      	cmp	r4, #0
  4066b8:	d1eb      	bne.n	406692 <refresh_children_style+0xe>
}
  4066ba:	bd70      	pop	{r4, r5, r6, pc}
  4066bc:	00405a29 	.word	0x00405a29
  4066c0:	00405f01 	.word	0x00405f01

004066c4 <lv_obj_get_click>:
{
  4066c4:	b510      	push	{r4, lr}
  4066c6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4066c8:	4b06      	ldr	r3, [pc, #24]	; (4066e4 <lv_obj_get_click+0x20>)
  4066ca:	4798      	blx	r3
  4066cc:	b120      	cbz	r0, 4066d8 <lv_obj_get_click+0x14>
    return obj->click == 0 ? false : true;
  4066ce:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  4066d2:	f000 0001 	and.w	r0, r0, #1
  4066d6:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4066d8:	4622      	mov	r2, r4
  4066da:	2300      	movs	r3, #0
  4066dc:	4802      	ldr	r0, [pc, #8]	; (4066e8 <lv_obj_get_click+0x24>)
  4066de:	4903      	ldr	r1, [pc, #12]	; (4066ec <lv_obj_get_click+0x28>)
  4066e0:	4788      	blx	r1
  4066e2:	e7fe      	b.n	4066e2 <lv_obj_get_click+0x1e>
  4066e4:	00416da9 	.word	0x00416da9
  4066e8:	0042e560 	.word	0x0042e560
  4066ec:	00416db5 	.word	0x00416db5

004066f0 <lv_obj_get_drag>:
{
  4066f0:	b510      	push	{r4, lr}
  4066f2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4066f4:	4b06      	ldr	r3, [pc, #24]	; (406710 <lv_obj_get_drag+0x20>)
  4066f6:	4798      	blx	r3
  4066f8:	b120      	cbz	r0, 406704 <lv_obj_get_drag+0x14>
    return obj->drag == 0 ? false : true;
  4066fa:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  4066fe:	f3c0 0040 	ubfx	r0, r0, #1, #1
  406702:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406704:	4622      	mov	r2, r4
  406706:	2300      	movs	r3, #0
  406708:	4802      	ldr	r0, [pc, #8]	; (406714 <lv_obj_get_drag+0x24>)
  40670a:	4903      	ldr	r1, [pc, #12]	; (406718 <lv_obj_get_drag+0x28>)
  40670c:	4788      	blx	r1
  40670e:	e7fe      	b.n	40670e <lv_obj_get_drag+0x1e>
  406710:	00416da9 	.word	0x00416da9
  406714:	0042e560 	.word	0x0042e560
  406718:	00416db5 	.word	0x00416db5

0040671c <lv_obj_get_drag_dir>:
{
  40671c:	b510      	push	{r4, lr}
  40671e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406720:	4b06      	ldr	r3, [pc, #24]	; (40673c <lv_obj_get_drag_dir+0x20>)
  406722:	4798      	blx	r3
  406724:	b120      	cbz	r0, 406730 <lv_obj_get_drag_dir+0x14>
    return obj->drag_dir;
  406726:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
}
  40672a:	f3c0 0082 	ubfx	r0, r0, #2, #3
  40672e:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406730:	4622      	mov	r2, r4
  406732:	2300      	movs	r3, #0
  406734:	4802      	ldr	r0, [pc, #8]	; (406740 <lv_obj_get_drag_dir+0x24>)
  406736:	4903      	ldr	r1, [pc, #12]	; (406744 <lv_obj_get_drag_dir+0x28>)
  406738:	4788      	blx	r1
  40673a:	e7fe      	b.n	40673a <lv_obj_get_drag_dir+0x1e>
  40673c:	00416da9 	.word	0x00416da9
  406740:	0042e560 	.word	0x0042e560
  406744:	00416db5 	.word	0x00416db5

00406748 <lv_obj_get_drag_throw>:
{
  406748:	b510      	push	{r4, lr}
  40674a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40674c:	4b06      	ldr	r3, [pc, #24]	; (406768 <lv_obj_get_drag_throw+0x20>)
  40674e:	4798      	blx	r3
  406750:	b120      	cbz	r0, 40675c <lv_obj_get_drag_throw+0x14>
    return obj->drag_throw == 0 ? false : true;
  406752:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  406756:	f3c0 0080 	ubfx	r0, r0, #2, #1
  40675a:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40675c:	4622      	mov	r2, r4
  40675e:	2300      	movs	r3, #0
  406760:	4802      	ldr	r0, [pc, #8]	; (40676c <lv_obj_get_drag_throw+0x24>)
  406762:	4903      	ldr	r1, [pc, #12]	; (406770 <lv_obj_get_drag_throw+0x28>)
  406764:	4788      	blx	r1
  406766:	e7fe      	b.n	406766 <lv_obj_get_drag_throw+0x1e>
  406768:	00416da9 	.word	0x00416da9
  40676c:	0042e560 	.word	0x0042e560
  406770:	00416db5 	.word	0x00416db5

00406774 <lv_obj_get_drag_parent>:
    return obj->drag_parent == 0 ? false : true;
  406774:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
}
  406778:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  40677c:	4770      	bx	lr

0040677e <lv_obj_get_gesture_parent>:
    return obj->gesture_parent == 0 ? false : true;
  40677e:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
  406782:	f000 0001 	and.w	r0, r0, #1
  406786:	4770      	bx	lr

00406788 <lv_obj_get_focus_parent>:
    return obj->focus_parent == 0 ? false : true;
  406788:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
  40678c:	f3c0 0040 	ubfx	r0, r0, #1, #1
  406790:	4770      	bx	lr
	...

00406794 <lv_obj_get_base_dir>:
{
  406794:	b510      	push	{r4, lr}
  406796:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406798:	4b05      	ldr	r3, [pc, #20]	; (4067b0 <lv_obj_get_base_dir+0x1c>)
  40679a:	4798      	blx	r3
  40679c:	b108      	cbz	r0, 4067a2 <lv_obj_get_base_dir+0xe>
}
  40679e:	2000      	movs	r0, #0
  4067a0:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4067a2:	4622      	mov	r2, r4
  4067a4:	2300      	movs	r3, #0
  4067a6:	4803      	ldr	r0, [pc, #12]	; (4067b4 <lv_obj_get_base_dir+0x20>)
  4067a8:	4903      	ldr	r1, [pc, #12]	; (4067b8 <lv_obj_get_base_dir+0x24>)
  4067aa:	4788      	blx	r1
  4067ac:	e7fe      	b.n	4067ac <lv_obj_get_base_dir+0x18>
  4067ae:	bf00      	nop
  4067b0:	00416da9 	.word	0x00416da9
  4067b4:	0042e560 	.word	0x0042e560
  4067b8:	00416db5 	.word	0x00416db5

004067bc <lv_obj_create>:
{
  4067bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4067be:	460d      	mov	r5, r1
    if(parent == NULL) {
  4067c0:	4606      	mov	r6, r0
  4067c2:	b150      	cbz	r0, 4067da <lv_obj_create+0x1e>
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
  4067c4:	4b8e      	ldr	r3, [pc, #568]	; (406a00 <lv_obj_create+0x244>)
  4067c6:	4798      	blx	r3
  4067c8:	2800      	cmp	r0, #0
  4067ca:	f040 8086 	bne.w	4068da <lv_obj_create+0x11e>
  4067ce:	4632      	mov	r2, r6
  4067d0:	2300      	movs	r3, #0
  4067d2:	488c      	ldr	r0, [pc, #560]	; (406a04 <lv_obj_create+0x248>)
  4067d4:	498c      	ldr	r1, [pc, #560]	; (406a08 <lv_obj_create+0x24c>)
  4067d6:	4788      	blx	r1
  4067d8:	e7fe      	b.n	4067d8 <lv_obj_create+0x1c>
        lv_disp_t * disp = lv_disp_get_default();
  4067da:	4b8c      	ldr	r3, [pc, #560]	; (406a0c <lv_obj_create+0x250>)
  4067dc:	4798      	blx	r3
        if(!disp) {
  4067de:	2800      	cmp	r0, #0
  4067e0:	f000 81f0 	beq.w	406bc4 <lv_obj_create+0x408>
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
  4067e4:	3038      	adds	r0, #56	; 0x38
  4067e6:	4b8a      	ldr	r3, [pc, #552]	; (406a10 <lv_obj_create+0x254>)
  4067e8:	4798      	blx	r3
  4067ea:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
  4067ec:	4b84      	ldr	r3, [pc, #528]	; (406a00 <lv_obj_create+0x244>)
  4067ee:	4798      	blx	r3
  4067f0:	b928      	cbnz	r0, 4067fe <lv_obj_create+0x42>
  4067f2:	4622      	mov	r2, r4
  4067f4:	2300      	movs	r3, #0
  4067f6:	4887      	ldr	r0, [pc, #540]	; (406a14 <lv_obj_create+0x258>)
  4067f8:	4983      	ldr	r1, [pc, #524]	; (406a08 <lv_obj_create+0x24c>)
  4067fa:	4788      	blx	r1
  4067fc:	e7fe      	b.n	4067fc <lv_obj_create+0x40>
        if(new_obj == NULL) return NULL;
  4067fe:	2c00      	cmp	r4, #0
  406800:	f000 81de 	beq.w	406bc0 <lv_obj_create+0x404>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
  406804:	214c      	movs	r1, #76	; 0x4c
  406806:	4620      	mov	r0, r4
  406808:	4b83      	ldr	r3, [pc, #524]	; (406a18 <lv_obj_create+0x25c>)
  40680a:	4798      	blx	r3
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
  40680c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  406810:	f36f 1346 	bfc	r3, #5, #2
  406814:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
  406818:	4b80      	ldr	r3, [pc, #512]	; (406a1c <lv_obj_create+0x260>)
  40681a:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
  40681c:	4b80      	ldr	r3, [pc, #512]	; (406a20 <lv_obj_create+0x264>)
  40681e:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
  406820:	2700      	movs	r7, #0
  406822:	61a7      	str	r7, [r4, #24]
        new_obj->coords.x1    = 0;
  406824:	8227      	strh	r7, [r4, #16]
        new_obj->coords.y1    = 0;
  406826:	8267      	strh	r7, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
  406828:	4638      	mov	r0, r7
  40682a:	4b7e      	ldr	r3, [pc, #504]	; (406a24 <lv_obj_create+0x268>)
  40682c:	4798      	blx	r3
  40682e:	b283      	uxth	r3, r0
  406830:	3b01      	subs	r3, #1
  406832:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
  406834:	4638      	mov	r0, r7
  406836:	4b7c      	ldr	r3, [pc, #496]	; (406a28 <lv_obj_create+0x26c>)
  406838:	4798      	blx	r3
  40683a:	b283      	uxth	r3, r0
  40683c:	3b01      	subs	r3, #1
  40683e:	82e3      	strh	r3, [r4, #22]
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
  406840:	214c      	movs	r1, #76	; 0x4c
  406842:	1d20      	adds	r0, r4, #4
  406844:	4b79      	ldr	r3, [pc, #484]	; (406a2c <lv_obj_create+0x270>)
  406846:	4798      	blx	r3
    new_obj->ext_draw_pad = 0;
  406848:	2300      	movs	r3, #0
  40684a:	8663      	strh	r3, [r4, #50]	; 0x32
    new_obj->ext_click_pad_hor = 0;
  40684c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    new_obj->ext_click_pad_ver = 0;
  406850:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    new_obj->realign.align        = LV_ALIGN_CENTER;
  406854:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    new_obj->realign.xofs         = 0;
  406858:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    new_obj->realign.yofs         = 0;
  40685c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    new_obj->realign.base         = NULL;
  406860:	6423      	str	r3, [r4, #64]	; 0x40
    new_obj->realign.auto_realign = 0;
  406862:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
  406866:	f363 0200 	bfi	r2, r3, #0, #1
  40686a:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
    new_obj->group_p = NULL;
  40686e:	63a3      	str	r3, [r4, #56]	; 0x38
    new_obj->adv_hittest  = 0;
  406870:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    new_obj->click        = 1;
  406874:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    new_obj->drag         = 0;
  406878:	f041 0101 	orr.w	r1, r1, #1
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
  40687c:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  406880:	2003      	movs	r0, #3
  406882:	f360 0284 	bfi	r2, r0, #2, #3
    new_obj->protect      = LV_PROTECT_NONE;
  406886:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    new_obj->parent_event = 0;
  40688a:	f001 01c1 	and.w	r1, r1, #193	; 0xc1
  40688e:	f363 1186 	bfi	r1, r3, #6, #1
  406892:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    new_obj->gesture_parent = parent ? 1 : 0;
  406896:	1af1      	subs	r1, r6, r3
  406898:	bf18      	it	ne
  40689a:	2101      	movne	r1, #1
  40689c:	f361 0200 	bfi	r2, r1, #0, #1
    new_obj->focus_parent  = 0;
  4068a0:	f363 0241 	bfi	r2, r3, #1, #1
  4068a4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    new_obj->state = LV_STATE_DEFAULT;
  4068a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    new_obj->ext_attr = NULL;
  4068ac:	6263      	str	r3, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
  4068ae:	f104 0728 	add.w	r7, r4, #40	; 0x28
  4068b2:	4638      	mov	r0, r7
  4068b4:	4b5e      	ldr	r3, [pc, #376]	; (406a30 <lv_obj_create+0x274>)
  4068b6:	4798      	blx	r3
    if(copy == NULL) {
  4068b8:	2d00      	cmp	r5, #0
  4068ba:	f000 8096 	beq.w	4069ea <lv_obj_create+0x22e>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
  4068be:	f105 0128 	add.w	r1, r5, #40	; 0x28
  4068c2:	4638      	mov	r0, r7
  4068c4:	4b5b      	ldr	r3, [pc, #364]	; (406a34 <lv_obj_create+0x278>)
  4068c6:	4798      	blx	r3
    if(copy != NULL) {
  4068c8:	2d00      	cmp	r5, #0
  4068ca:	f000 8170 	beq.w	406bae <lv_obj_create+0x3f2>
        lv_area_copy(&new_obj->coords, &copy->coords);
  4068ce:	f105 0110 	add.w	r1, r5, #16
    uint8_t * d8 = (uint8_t *)dst;
  4068d2:	f104 0210 	add.w	r2, r4, #16
  4068d6:	2308      	movs	r3, #8
  4068d8:	e0bb      	b.n	406a52 <lv_obj_create+0x296>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
  4068da:	1d30      	adds	r0, r6, #4
  4068dc:	4b4c      	ldr	r3, [pc, #304]	; (406a10 <lv_obj_create+0x254>)
  4068de:	4798      	blx	r3
  4068e0:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
  4068e2:	4b47      	ldr	r3, [pc, #284]	; (406a00 <lv_obj_create+0x244>)
  4068e4:	4798      	blx	r3
  4068e6:	2800      	cmp	r0, #0
  4068e8:	d047      	beq.n	40697a <lv_obj_create+0x1be>
        if(new_obj == NULL) return NULL;
  4068ea:	2c00      	cmp	r4, #0
  4068ec:	f000 8168 	beq.w	406bc0 <lv_obj_create+0x404>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
  4068f0:	214c      	movs	r1, #76	; 0x4c
  4068f2:	4620      	mov	r0, r4
  4068f4:	4b48      	ldr	r3, [pc, #288]	; (406a18 <lv_obj_create+0x25c>)
  4068f6:	4798      	blx	r3
        new_obj->parent = parent;
  4068f8:	6026      	str	r6, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
  4068fa:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  4068fe:	f36f 1346 	bfc	r3, #5, #2
  406902:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
  406906:	4b45      	ldr	r3, [pc, #276]	; (406a1c <lv_obj_create+0x260>)
  406908:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
  40690a:	4b45      	ldr	r3, [pc, #276]	; (406a20 <lv_obj_create+0x264>)
  40690c:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
  40690e:	2000      	movs	r0, #0
  406910:	61a0      	str	r0, [r4, #24]
        new_obj->coords.y1    = parent->coords.y1;
  406912:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  406916:	8263      	strh	r3, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
  406918:	8a77      	ldrh	r7, [r6, #18]
  40691a:	4b47      	ldr	r3, [pc, #284]	; (406a38 <lv_obj_create+0x27c>)
  40691c:	4798      	blx	r3
  40691e:	2332      	movs	r3, #50	; 0x32
  406920:	fb03 f300 	mul.w	r3, r3, r0
  406924:	3350      	adds	r3, #80	; 0x50
  406926:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  40692a:	da2c      	bge.n	406986 <lv_obj_create+0x1ca>
  40692c:	2301      	movs	r3, #1
  40692e:	443b      	add	r3, r7
  406930:	82e3      	strh	r3, [r4, #22]
        if(lv_obj_get_base_dir(new_obj) == LV_BIDI_DIR_RTL) {
  406932:	4620      	mov	r0, r4
  406934:	4b41      	ldr	r3, [pc, #260]	; (406a3c <lv_obj_create+0x280>)
  406936:	4798      	blx	r3
  406938:	2801      	cmp	r0, #1
  40693a:	d033      	beq.n	4069a4 <lv_obj_create+0x1e8>
            new_obj->coords.x1    = parent->coords.x1;
  40693c:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  406940:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
  406942:	8a37      	ldrh	r7, [r6, #16]
  406944:	2000      	movs	r0, #0
  406946:	4b3c      	ldr	r3, [pc, #240]	; (406a38 <lv_obj_create+0x27c>)
  406948:	4798      	blx	r3
  40694a:	2364      	movs	r3, #100	; 0x64
  40694c:	fb03 f300 	mul.w	r3, r3, r0
  406950:	3350      	adds	r3, #80	; 0x50
  406952:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  406956:	db46      	blt.n	4069e6 <lv_obj_create+0x22a>
  406958:	2000      	movs	r0, #0
  40695a:	4b37      	ldr	r3, [pc, #220]	; (406a38 <lv_obj_create+0x27c>)
  40695c:	4798      	blx	r3
  40695e:	2364      	movs	r3, #100	; 0x64
  406960:	fb03 f300 	mul.w	r3, r3, r0
  406964:	3350      	adds	r3, #80	; 0x50
  406966:	4a36      	ldr	r2, [pc, #216]	; (406a40 <lv_obj_create+0x284>)
  406968:	fb82 1203 	smull	r1, r2, r2, r3
  40696c:	17db      	asrs	r3, r3, #31
  40696e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  406972:	b29b      	uxth	r3, r3
  406974:	443b      	add	r3, r7
  406976:	82a3      	strh	r3, [r4, #20]
  406978:	e762      	b.n	406840 <lv_obj_create+0x84>
        LV_ASSERT_MEM(new_obj);
  40697a:	4622      	mov	r2, r4
  40697c:	2300      	movs	r3, #0
  40697e:	4825      	ldr	r0, [pc, #148]	; (406a14 <lv_obj_create+0x258>)
  406980:	4921      	ldr	r1, [pc, #132]	; (406a08 <lv_obj_create+0x24c>)
  406982:	4788      	blx	r1
  406984:	e7fe      	b.n	406984 <lv_obj_create+0x1c8>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
  406986:	2000      	movs	r0, #0
  406988:	4b2b      	ldr	r3, [pc, #172]	; (406a38 <lv_obj_create+0x27c>)
  40698a:	4798      	blx	r3
  40698c:	2332      	movs	r3, #50	; 0x32
  40698e:	fb03 f300 	mul.w	r3, r3, r0
  406992:	3350      	adds	r3, #80	; 0x50
  406994:	4a2a      	ldr	r2, [pc, #168]	; (406a40 <lv_obj_create+0x284>)
  406996:	fb82 1203 	smull	r1, r2, r2, r3
  40699a:	17db      	asrs	r3, r3, #31
  40699c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  4069a0:	b29b      	uxth	r3, r3
  4069a2:	e7c4      	b.n	40692e <lv_obj_create+0x172>
            new_obj->coords.x2    = parent->coords.x2;
  4069a4:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
  4069a8:	82a3      	strh	r3, [r4, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
  4069aa:	8ab7      	ldrh	r7, [r6, #20]
  4069ac:	2000      	movs	r0, #0
  4069ae:	4b22      	ldr	r3, [pc, #136]	; (406a38 <lv_obj_create+0x27c>)
  4069b0:	4798      	blx	r3
  4069b2:	2364      	movs	r3, #100	; 0x64
  4069b4:	fb03 f300 	mul.w	r3, r3, r0
  4069b8:	3350      	adds	r3, #80	; 0x50
  4069ba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  4069be:	db10      	blt.n	4069e2 <lv_obj_create+0x226>
  4069c0:	2000      	movs	r0, #0
  4069c2:	4b1d      	ldr	r3, [pc, #116]	; (406a38 <lv_obj_create+0x27c>)
  4069c4:	4798      	blx	r3
  4069c6:	2364      	movs	r3, #100	; 0x64
  4069c8:	fb03 f300 	mul.w	r3, r3, r0
  4069cc:	3350      	adds	r3, #80	; 0x50
  4069ce:	4a1c      	ldr	r2, [pc, #112]	; (406a40 <lv_obj_create+0x284>)
  4069d0:	fb82 1203 	smull	r1, r2, r2, r3
  4069d4:	17db      	asrs	r3, r3, #31
  4069d6:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  4069da:	b29b      	uxth	r3, r3
  4069dc:	1afb      	subs	r3, r7, r3
  4069de:	8223      	strh	r3, [r4, #16]
  4069e0:	e72e      	b.n	406840 <lv_obj_create+0x84>
  4069e2:	2301      	movs	r3, #1
  4069e4:	e7fa      	b.n	4069dc <lv_obj_create+0x220>
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
  4069e6:	2301      	movs	r3, #1
  4069e8:	e7c4      	b.n	406974 <lv_obj_create+0x1b8>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
  4069ea:	b126      	cbz	r6, 4069f6 <lv_obj_create+0x23a>
  4069ec:	2102      	movs	r1, #2
  4069ee:	4620      	mov	r0, r4
  4069f0:	4b14      	ldr	r3, [pc, #80]	; (406a44 <lv_obj_create+0x288>)
  4069f2:	4798      	blx	r3
  4069f4:	e768      	b.n	4068c8 <lv_obj_create+0x10c>
        else lv_theme_apply(new_obj, LV_THEME_SCR);
  4069f6:	2101      	movs	r1, #1
  4069f8:	4620      	mov	r0, r4
  4069fa:	4b12      	ldr	r3, [pc, #72]	; (406a44 <lv_obj_create+0x288>)
  4069fc:	4798      	blx	r3
  4069fe:	e763      	b.n	4068c8 <lv_obj_create+0x10c>
  406a00:	00416da9 	.word	0x00416da9
  406a04:	0042e560 	.word	0x0042e560
  406a08:	00416db5 	.word	0x00416db5
  406a0c:	00415c15 	.word	0x00415c15
  406a10:	00417021 	.word	0x00417021
  406a14:	0042e54c 	.word	0x0042e54c
  406a18:	00417a21 	.word	0x00417a21
  406a1c:	004091c9 	.word	0x004091c9
  406a20:	004085f9 	.word	0x004085f9
  406a24:	00415c21 	.word	0x00415c21
  406a28:	00415c51 	.word	0x00415c51
  406a2c:	0041700f 	.word	0x0041700f
  406a30:	00409d49 	.word	0x00409d49
  406a34:	0040ac25 	.word	0x0040ac25
  406a38:	00415c7d 	.word	0x00415c7d
  406a3c:	00406795 	.word	0x00406795
  406a40:	66666667 	.word	0x66666667
  406a44:	004192a5 	.word	0x004192a5
        *d8 = *s8;
  406a48:	f811 0b01 	ldrb.w	r0, [r1], #1
  406a4c:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  406a50:	3b01      	subs	r3, #1
    while(len) {
  406a52:	2b00      	cmp	r3, #0
  406a54:	d1f8      	bne.n	406a48 <lv_obj_create+0x28c>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
  406a56:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
  406a5a:	8663      	strh	r3, [r4, #50]	; 0x32
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
  406a5c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
  406a60:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
  406a64:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
  406a68:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->base_dir = copy->base_dir;
  406a6c:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  406a70:	f3c3 1341 	ubfx	r3, r3, #5, #2
  406a74:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  406a78:	f363 1246 	bfi	r2, r3, #5, #2
  406a7c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->realign.align        = copy->realign.align;
  406a80:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
  406a84:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        new_obj->realign.xofs         = copy->realign.xofs;
  406a88:	f9b5 3044 	ldrsh.w	r3, [r5, #68]	; 0x44
  406a8c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        new_obj->realign.yofs         = copy->realign.yofs;
  406a90:	f9b5 3046 	ldrsh.w	r3, [r5, #70]	; 0x46
  406a94:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        new_obj->realign.base         = copy->realign.base;
  406a98:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  406a9a:	6423      	str	r3, [r4, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
  406a9c:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
  406aa0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  406aa4:	f362 0300 	bfi	r3, r2, #0, #1
  406aa8:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
        new_obj->event_cb = copy->event_cb;
  406aac:	69ab      	ldr	r3, [r5, #24]
  406aae:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
  406ab0:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406ab4:	09db      	lsrs	r3, r3, #7
  406ab6:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  406aba:	f363 12c7 	bfi	r2, r3, #7, #1
  406abe:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->click        = copy->click;
  406ac2:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
  406ac6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  406aca:	f362 0300 	bfi	r3, r2, #0, #1
  406ace:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->drag         = copy->drag;
  406ad2:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406ad6:	f3c3 0340 	ubfx	r3, r3, #1, #1
  406ada:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  406ade:	f363 0241 	bfi	r2, r3, #1, #1
  406ae2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_dir     = copy->drag_dir;
  406ae6:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  406aea:	f3c3 0382 	ubfx	r3, r3, #2, #3
  406aee:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  406af2:	f363 0284 	bfi	r2, r3, #2, #3
  406af6:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->drag_throw   = copy->drag_throw;
  406afa:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406afe:	f3c3 0380 	ubfx	r3, r3, #2, #1
  406b02:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  406b06:	f363 0282 	bfi	r2, r3, #2, #1
  406b0a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_parent  = copy->drag_parent;
  406b0e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406b12:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  406b16:	b2d2      	uxtb	r2, r2
  406b18:	f363 02c3 	bfi	r2, r3, #3, #1
  406b1c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->hidden       = copy->hidden;
  406b20:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406b24:	f3c3 1300 	ubfx	r3, r3, #4, #1
  406b28:	b2d2      	uxtb	r2, r2
  406b2a:	f363 1204 	bfi	r2, r3, #4, #1
  406b2e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->top          = copy->top;
  406b32:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406b36:	f3c3 1340 	ubfx	r3, r3, #5, #1
  406b3a:	b2d2      	uxtb	r2, r2
  406b3c:	f363 1245 	bfi	r2, r3, #5, #1
  406b40:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->parent_event = copy->parent_event;
  406b44:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406b48:	f3c3 1380 	ubfx	r3, r3, #6, #1
  406b4c:	b2d2      	uxtb	r2, r2
  406b4e:	f363 1286 	bfi	r2, r3, #6, #1
  406b52:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->protect      = copy->protect;
  406b56:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
  406b5a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        new_obj->gesture_parent = copy->gesture_parent;
  406b5e:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
  406b62:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  406b66:	f362 0300 	bfi	r3, r2, #0, #1
  406b6a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->focus_parent = copy->focus_parent;
  406b6e:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  406b72:	f3c3 0340 	ubfx	r3, r3, #1, #1
  406b76:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  406b7a:	f363 0241 	bfi	r2, r3, #1, #1
  406b7e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(copy->group_p != NULL) {
  406b82:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  406b84:	b110      	cbz	r0, 406b8c <lv_obj_create+0x3d0>
            lv_group_add_obj(copy->group_p, new_obj);
  406b86:	4621      	mov	r1, r4
  406b88:	4b0f      	ldr	r3, [pc, #60]	; (406bc8 <lv_obj_create+0x40c>)
  406b8a:	4798      	blx	r3
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
  406b8c:	4628      	mov	r0, r5
  406b8e:	4b0f      	ldr	r3, [pc, #60]	; (406bcc <lv_obj_create+0x410>)
  406b90:	4798      	blx	r3
  406b92:	b160      	cbz	r0, 406bae <lv_obj_create+0x3f2>
  406b94:	b15e      	cbz	r6, 406bae <lv_obj_create+0x3f2>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
  406b96:	4628      	mov	r0, r5
  406b98:	4b0d      	ldr	r3, [pc, #52]	; (406bd0 <lv_obj_create+0x414>)
  406b9a:	4798      	blx	r3
  406b9c:	4607      	mov	r7, r0
  406b9e:	4628      	mov	r0, r5
  406ba0:	4b0c      	ldr	r3, [pc, #48]	; (406bd4 <lv_obj_create+0x418>)
  406ba2:	4798      	blx	r3
  406ba4:	4602      	mov	r2, r0
  406ba6:	4639      	mov	r1, r7
  406ba8:	4620      	mov	r0, r4
  406baa:	4b0b      	ldr	r3, [pc, #44]	; (406bd8 <lv_obj_create+0x41c>)
  406bac:	4798      	blx	r3
    if(parent != NULL) {
  406bae:	b13e      	cbz	r6, 406bc0 <lv_obj_create+0x404>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
  406bb0:	69f3      	ldr	r3, [r6, #28]
  406bb2:	4622      	mov	r2, r4
  406bb4:	2101      	movs	r1, #1
  406bb6:	4630      	mov	r0, r6
  406bb8:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
  406bba:	4620      	mov	r0, r4
  406bbc:	4b07      	ldr	r3, [pc, #28]	; (406bdc <lv_obj_create+0x420>)
  406bbe:	4798      	blx	r3
}
  406bc0:	4620      	mov	r0, r4
  406bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NULL;
  406bc4:	4634      	mov	r4, r6
  406bc6:	e7fb      	b.n	406bc0 <lv_obj_create+0x404>
  406bc8:	00403851 	.word	0x00403851
  406bcc:	00405955 	.word	0x00405955
  406bd0:	00405aa9 	.word	0x00405aa9
  406bd4:	00405ae9 	.word	0x00405ae9
  406bd8:	00405fe5 	.word	0x00405fe5
  406bdc:	00405f01 	.word	0x00405f01

00406be0 <lv_obj_set_size>:
{
  406be0:	b570      	push	{r4, r5, r6, lr}
  406be2:	b082      	sub	sp, #8
  406be4:	4604      	mov	r4, r0
  406be6:	460d      	mov	r5, r1
  406be8:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406bea:	4b2e      	ldr	r3, [pc, #184]	; (406ca4 <lv_obj_set_size+0xc4>)
  406bec:	4798      	blx	r3
  406bee:	b928      	cbnz	r0, 406bfc <lv_obj_set_size+0x1c>
  406bf0:	4622      	mov	r2, r4
  406bf2:	2300      	movs	r3, #0
  406bf4:	482c      	ldr	r0, [pc, #176]	; (406ca8 <lv_obj_set_size+0xc8>)
  406bf6:	492d      	ldr	r1, [pc, #180]	; (406cac <lv_obj_set_size+0xcc>)
  406bf8:	4788      	blx	r1
  406bfa:	e7fe      	b.n	406bfa <lv_obj_set_size+0x1a>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
  406bfc:	4620      	mov	r0, r4
  406bfe:	4b2c      	ldr	r3, [pc, #176]	; (406cb0 <lv_obj_set_size+0xd0>)
  406c00:	4798      	blx	r3
  406c02:	42a8      	cmp	r0, r5
  406c04:	d028      	beq.n	406c58 <lv_obj_set_size+0x78>
    lv_obj_invalidate(obj);
  406c06:	4620      	mov	r0, r4
  406c08:	4b2a      	ldr	r3, [pc, #168]	; (406cb4 <lv_obj_set_size+0xd4>)
  406c0a:	4798      	blx	r3
    lv_obj_get_coords(obj, &ori);
  406c0c:	4669      	mov	r1, sp
  406c0e:	4620      	mov	r0, r4
  406c10:	4b29      	ldr	r3, [pc, #164]	; (406cb8 <lv_obj_set_size+0xd8>)
  406c12:	4798      	blx	r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
  406c14:	8a63      	ldrh	r3, [r4, #18]
  406c16:	4433      	add	r3, r6
  406c18:	b29b      	uxth	r3, r3
  406c1a:	3b01      	subs	r3, #1
  406c1c:	82e3      	strh	r3, [r4, #22]
    if(lv_obj_get_base_dir(obj) == LV_BIDI_DIR_RTL) {
  406c1e:	4620      	mov	r0, r4
  406c20:	4b26      	ldr	r3, [pc, #152]	; (406cbc <lv_obj_set_size+0xdc>)
  406c22:	4798      	blx	r3
  406c24:	2801      	cmp	r0, #1
  406c26:	d01d      	beq.n	406c64 <lv_obj_set_size+0x84>
        obj->coords.x2 = obj->coords.x1 + w - 1;
  406c28:	8a23      	ldrh	r3, [r4, #16]
  406c2a:	442b      	add	r3, r5
  406c2c:	b29b      	uxth	r3, r3
  406c2e:	3b01      	subs	r3, #1
  406c30:	82a3      	strh	r3, [r4, #20]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
  406c32:	69e3      	ldr	r3, [r4, #28]
  406c34:	466a      	mov	r2, sp
  406c36:	2102      	movs	r1, #2
  406c38:	4620      	mov	r0, r4
  406c3a:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  406c3c:	4620      	mov	r0, r4
  406c3e:	4b20      	ldr	r3, [pc, #128]	; (406cc0 <lv_obj_set_size+0xe0>)
  406c40:	4798      	blx	r3
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
  406c42:	b118      	cbz	r0, 406c4c <lv_obj_set_size+0x6c>
  406c44:	69c5      	ldr	r5, [r0, #28]
  406c46:	4622      	mov	r2, r4
  406c48:	2101      	movs	r1, #1
  406c4a:	47a8      	blx	r5
    _LV_LL_READ(obj->child_ll, i) {
  406c4c:	1d26      	adds	r6, r4, #4
  406c4e:	4630      	mov	r0, r6
  406c50:	4b1c      	ldr	r3, [pc, #112]	; (406cc4 <lv_obj_set_size+0xe4>)
  406c52:	4798      	blx	r3
  406c54:	4605      	mov	r5, r0
  406c56:	e015      	b.n	406c84 <lv_obj_set_size+0xa4>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
  406c58:	4620      	mov	r0, r4
  406c5a:	4b1b      	ldr	r3, [pc, #108]	; (406cc8 <lv_obj_set_size+0xe8>)
  406c5c:	4798      	blx	r3
  406c5e:	42b0      	cmp	r0, r6
  406c60:	d1d1      	bne.n	406c06 <lv_obj_set_size+0x26>
  406c62:	e019      	b.n	406c98 <lv_obj_set_size+0xb8>
        obj->coords.x1 = obj->coords.x2 - w + 1;
  406c64:	8aa3      	ldrh	r3, [r4, #20]
  406c66:	1b5b      	subs	r3, r3, r5
  406c68:	b29b      	uxth	r3, r3
  406c6a:	3301      	adds	r3, #1
  406c6c:	8223      	strh	r3, [r4, #16]
  406c6e:	e7e0      	b.n	406c32 <lv_obj_set_size+0x52>
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
  406c70:	69eb      	ldr	r3, [r5, #28]
  406c72:	466a      	mov	r2, sp
  406c74:	2103      	movs	r1, #3
  406c76:	4628      	mov	r0, r5
  406c78:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
  406c7a:	4629      	mov	r1, r5
  406c7c:	4630      	mov	r0, r6
  406c7e:	4b13      	ldr	r3, [pc, #76]	; (406ccc <lv_obj_set_size+0xec>)
  406c80:	4798      	blx	r3
  406c82:	4605      	mov	r5, r0
  406c84:	2d00      	cmp	r5, #0
  406c86:	d1f3      	bne.n	406c70 <lv_obj_set_size+0x90>
    lv_obj_invalidate(obj);
  406c88:	4620      	mov	r0, r4
  406c8a:	4b0a      	ldr	r3, [pc, #40]	; (406cb4 <lv_obj_set_size+0xd4>)
  406c8c:	4798      	blx	r3
    if(obj->realign.auto_realign) lv_obj_realign(obj);
  406c8e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  406c92:	f013 0f01 	tst.w	r3, #1
  406c96:	d101      	bne.n	406c9c <lv_obj_set_size+0xbc>
}
  406c98:	b002      	add	sp, #8
  406c9a:	bd70      	pop	{r4, r5, r6, pc}
    if(obj->realign.auto_realign) lv_obj_realign(obj);
  406c9c:	4620      	mov	r0, r4
  406c9e:	4b0c      	ldr	r3, [pc, #48]	; (406cd0 <lv_obj_set_size+0xf0>)
  406ca0:	4798      	blx	r3
  406ca2:	e7f9      	b.n	406c98 <lv_obj_set_size+0xb8>
  406ca4:	00416da9 	.word	0x00416da9
  406ca8:	0042e560 	.word	0x0042e560
  406cac:	00416db5 	.word	0x00416db5
  406cb0:	00405b29 	.word	0x00405b29
  406cb4:	00405f01 	.word	0x00405f01
  406cb8:	00405a69 	.word	0x00405a69
  406cbc:	00406795 	.word	0x00406795
  406cc0:	00405955 	.word	0x00405955
  406cc4:	004170b9 	.word	0x004170b9
  406cc8:	00405b59 	.word	0x00405b59
  406ccc:	004170cd 	.word	0x004170cd
  406cd0:	0040661d 	.word	0x0040661d

00406cd4 <lv_obj_set_width>:
{
  406cd4:	b538      	push	{r3, r4, r5, lr}
  406cd6:	4604      	mov	r4, r0
  406cd8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406cda:	4b09      	ldr	r3, [pc, #36]	; (406d00 <lv_obj_set_width+0x2c>)
  406cdc:	4798      	blx	r3
  406cde:	b928      	cbnz	r0, 406cec <lv_obj_set_width+0x18>
  406ce0:	4622      	mov	r2, r4
  406ce2:	2300      	movs	r3, #0
  406ce4:	4807      	ldr	r0, [pc, #28]	; (406d04 <lv_obj_set_width+0x30>)
  406ce6:	4908      	ldr	r1, [pc, #32]	; (406d08 <lv_obj_set_width+0x34>)
  406ce8:	4788      	blx	r1
  406cea:	e7fe      	b.n	406cea <lv_obj_set_width+0x16>
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
  406cec:	4620      	mov	r0, r4
  406cee:	4b07      	ldr	r3, [pc, #28]	; (406d0c <lv_obj_set_width+0x38>)
  406cf0:	4798      	blx	r3
  406cf2:	4602      	mov	r2, r0
  406cf4:	4629      	mov	r1, r5
  406cf6:	4620      	mov	r0, r4
  406cf8:	4b05      	ldr	r3, [pc, #20]	; (406d10 <lv_obj_set_width+0x3c>)
  406cfa:	4798      	blx	r3
  406cfc:	bd38      	pop	{r3, r4, r5, pc}
  406cfe:	bf00      	nop
  406d00:	00416da9 	.word	0x00416da9
  406d04:	0042e560 	.word	0x0042e560
  406d08:	00416db5 	.word	0x00416db5
  406d0c:	00405b59 	.word	0x00405b59
  406d10:	00406be1 	.word	0x00406be1

00406d14 <lv_obj_set_height>:
{
  406d14:	b538      	push	{r3, r4, r5, lr}
  406d16:	4604      	mov	r4, r0
  406d18:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406d1a:	4b09      	ldr	r3, [pc, #36]	; (406d40 <lv_obj_set_height+0x2c>)
  406d1c:	4798      	blx	r3
  406d1e:	b928      	cbnz	r0, 406d2c <lv_obj_set_height+0x18>
  406d20:	4622      	mov	r2, r4
  406d22:	2300      	movs	r3, #0
  406d24:	4807      	ldr	r0, [pc, #28]	; (406d44 <lv_obj_set_height+0x30>)
  406d26:	4908      	ldr	r1, [pc, #32]	; (406d48 <lv_obj_set_height+0x34>)
  406d28:	4788      	blx	r1
  406d2a:	e7fe      	b.n	406d2a <lv_obj_set_height+0x16>
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
  406d2c:	4620      	mov	r0, r4
  406d2e:	4b07      	ldr	r3, [pc, #28]	; (406d4c <lv_obj_set_height+0x38>)
  406d30:	4798      	blx	r3
  406d32:	462a      	mov	r2, r5
  406d34:	4601      	mov	r1, r0
  406d36:	4620      	mov	r0, r4
  406d38:	4b05      	ldr	r3, [pc, #20]	; (406d50 <lv_obj_set_height+0x3c>)
  406d3a:	4798      	blx	r3
  406d3c:	bd38      	pop	{r3, r4, r5, pc}
  406d3e:	bf00      	nop
  406d40:	00416da9 	.word	0x00416da9
  406d44:	0042e560 	.word	0x0042e560
  406d48:	00416db5 	.word	0x00416db5
  406d4c:	00405b29 	.word	0x00405b29
  406d50:	00406be1 	.word	0x00406be1

00406d54 <lv_obj_is_protected>:
{
  406d54:	b538      	push	{r3, r4, r5, lr}
  406d56:	4604      	mov	r4, r0
  406d58:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406d5a:	4b08      	ldr	r3, [pc, #32]	; (406d7c <lv_obj_is_protected+0x28>)
  406d5c:	4798      	blx	r3
  406d5e:	b130      	cbz	r0, 406d6e <lv_obj_is_protected+0x1a>
    return (obj->protect & prot) == 0 ? false : true;
  406d60:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  406d64:	422b      	tst	r3, r5
}
  406d66:	bf14      	ite	ne
  406d68:	2001      	movne	r0, #1
  406d6a:	2000      	moveq	r0, #0
  406d6c:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406d6e:	4622      	mov	r2, r4
  406d70:	2300      	movs	r3, #0
  406d72:	4803      	ldr	r0, [pc, #12]	; (406d80 <lv_obj_is_protected+0x2c>)
  406d74:	4903      	ldr	r1, [pc, #12]	; (406d84 <lv_obj_is_protected+0x30>)
  406d76:	4788      	blx	r1
  406d78:	e7fe      	b.n	406d78 <lv_obj_is_protected+0x24>
  406d7a:	bf00      	nop
  406d7c:	00416da9 	.word	0x00416da9
  406d80:	0042e560 	.word	0x0042e560
  406d84:	00416db5 	.word	0x00416db5

00406d88 <lv_obj_get_state>:
{
  406d88:	b530      	push	{r4, r5, lr}
  406d8a:	b083      	sub	sp, #12
  406d8c:	4604      	mov	r4, r0
  406d8e:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406d90:	4b0d      	ldr	r3, [pc, #52]	; (406dc8 <lv_obj_get_state+0x40>)
  406d92:	4798      	blx	r3
  406d94:	b128      	cbz	r0, 406da2 <lv_obj_get_state+0x1a>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
  406d96:	2d3f      	cmp	r5, #63	; 0x3f
  406d98:	d809      	bhi.n	406dae <lv_obj_get_state+0x26>
  406d9a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
}
  406d9e:	b003      	add	sp, #12
  406da0:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406da2:	4622      	mov	r2, r4
  406da4:	2300      	movs	r3, #0
  406da6:	4809      	ldr	r0, [pc, #36]	; (406dcc <lv_obj_get_state+0x44>)
  406da8:	4909      	ldr	r1, [pc, #36]	; (406dd0 <lv_obj_get_state+0x48>)
  406daa:	4788      	blx	r1
  406dac:	e7fe      	b.n	406dac <lv_obj_get_state+0x24>
    info.part = part;
  406dae:	f88d 5004 	strb.w	r5, [sp, #4]
    info.result = LV_STATE_DEFAULT;
  406db2:	2300      	movs	r3, #0
  406db4:	f88d 3005 	strb.w	r3, [sp, #5]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
  406db8:	aa01      	add	r2, sp, #4
  406dba:	2109      	movs	r1, #9
  406dbc:	4620      	mov	r0, r4
  406dbe:	4b05      	ldr	r3, [pc, #20]	; (406dd4 <lv_obj_get_state+0x4c>)
  406dc0:	4798      	blx	r3
    return info.result;
  406dc2:	f89d 0005 	ldrb.w	r0, [sp, #5]
  406dc6:	e7ea      	b.n	406d9e <lv_obj_get_state+0x16>
  406dc8:	00416da9 	.word	0x00416da9
  406dcc:	0042e560 	.word	0x0042e560
  406dd0:	00416db5 	.word	0x00416db5
  406dd4:	004058ad 	.word	0x004058ad

00406dd8 <_lv_obj_get_style_color>:
{
  406dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406ddc:	b083      	sub	sp, #12
  406dde:	4606      	mov	r6, r0
  406de0:	460d      	mov	r5, r1
  406de2:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  406de4:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  406de8:	4614      	mov	r4, r2
  406dea:	e006      	b.n	406dfa <_lv_obj_get_style_color+0x22>
        if(res == LV_RES_OK) return value_act;
  406dec:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  406df0:	e026      	b.n	406e40 <_lv_obj_get_style_color+0x68>
        parent = lv_obj_get_parent(parent);
  406df2:	4630      	mov	r0, r6
  406df4:	4b15      	ldr	r3, [pc, #84]	; (406e4c <_lv_obj_get_style_color+0x74>)
  406df6:	4798      	blx	r3
  406df8:	4606      	mov	r6, r0
    while(parent) {
  406dfa:	b1d6      	cbz	r6, 406e32 <_lv_obj_get_style_color+0x5a>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  406dfc:	4629      	mov	r1, r5
  406dfe:	4630      	mov	r0, r6
  406e00:	4b13      	ldr	r3, [pc, #76]	; (406e50 <_lv_obj_get_style_color+0x78>)
  406e02:	4798      	blx	r3
  406e04:	4607      	mov	r7, r0
        lv_state_t state = lv_obj_get_state(parent, part);
  406e06:	4629      	mov	r1, r5
  406e08:	4630      	mov	r0, r6
  406e0a:	4b12      	ldr	r3, [pc, #72]	; (406e54 <_lv_obj_get_style_color+0x7c>)
  406e0c:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  406e0e:	0204      	lsls	r4, r0, #8
  406e10:	b2a4      	uxth	r4, r4
  406e12:	4444      	add	r4, r8
  406e14:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_color(list, prop, &value_act);
  406e16:	aa01      	add	r2, sp, #4
  406e18:	4621      	mov	r1, r4
  406e1a:	4638      	mov	r0, r7
  406e1c:	4b0e      	ldr	r3, [pc, #56]	; (406e58 <_lv_obj_get_style_color+0x80>)
  406e1e:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  406e20:	2801      	cmp	r0, #1
  406e22:	d0e3      	beq.n	406dec <_lv_obj_get_style_color+0x14>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  406e24:	f019 0f80 	tst.w	r9, #128	; 0x80
  406e28:	d003      	beq.n	406e32 <_lv_obj_get_style_color+0x5a>
        if(part != LV_OBJ_PART_MAIN) {
  406e2a:	2d00      	cmp	r5, #0
  406e2c:	d0e1      	beq.n	406df2 <_lv_obj_get_style_color+0x1a>
            part = LV_OBJ_PART_MAIN;
  406e2e:	2500      	movs	r5, #0
  406e30:	e7e3      	b.n	406dfa <_lv_obj_get_style_color+0x22>
    prop = prop & (~LV_STYLE_STATE_MASK);
  406e32:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
  406e36:	3c29      	subs	r4, #41	; 0x29
  406e38:	2c01      	cmp	r4, #1
  406e3a:	d904      	bls.n	406e46 <_lv_obj_get_style_color+0x6e>
    return LV_COLOR_BLACK;
  406e3c:	f04f 0000 	mov.w	r0, #0
}
  406e40:	b003      	add	sp, #12
  406e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return LV_COLOR_WHITE;
  406e46:	4b05      	ldr	r3, [pc, #20]	; (406e5c <_lv_obj_get_style_color+0x84>)
  406e48:	8818      	ldrh	r0, [r3, #0]
  406e4a:	e7f9      	b.n	406e40 <_lv_obj_get_style_color+0x68>
  406e4c:	00405955 	.word	0x00405955
  406e50:	00405bb5 	.word	0x00405bb5
  406e54:	00406d89 	.word	0x00406d89
  406e58:	0040aed5 	.word	0x0040aed5
  406e5c:	0042e55c 	.word	0x0042e55c

00406e60 <_lv_obj_get_style_opa>:
{
  406e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406e64:	b083      	sub	sp, #12
  406e66:	4607      	mov	r7, r0
  406e68:	460e      	mov	r6, r1
  406e6a:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  406e6c:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  406e70:	4614      	mov	r4, r2
  406e72:	e023      	b.n	406ebc <_lv_obj_get_style_opa+0x5c>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406e74:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  406e78:	4631      	mov	r1, r6
  406e7a:	4638      	mov	r0, r7
  406e7c:	4b37      	ldr	r3, [pc, #220]	; (406f5c <_lv_obj_get_style_opa+0xfc>)
  406e7e:	4798      	blx	r3
  406e80:	e02e      	b.n	406ee0 <_lv_obj_get_style_opa+0x80>
                    if(list->opa_scale_cover) def = true;
  406e82:	796b      	ldrb	r3, [r5, #5]
  406e84:	f013 0f20 	tst.w	r3, #32
  406e88:	d147      	bne.n	406f1a <_lv_obj_get_style_opa+0xba>
            bool def = false;
  406e8a:	2300      	movs	r3, #0
            if(def) {
  406e8c:	2b00      	cmp	r3, #0
  406e8e:	d152      	bne.n	406f36 <_lv_obj_get_style_opa+0xd6>
        lv_state_t state = lv_obj_get_state(parent, part);
  406e90:	4631      	mov	r1, r6
  406e92:	4638      	mov	r0, r7
  406e94:	4b32      	ldr	r3, [pc, #200]	; (406f60 <_lv_obj_get_style_opa+0x100>)
  406e96:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  406e98:	0204      	lsls	r4, r0, #8
  406e9a:	b2a4      	uxth	r4, r4
  406e9c:	4444      	add	r4, r8
  406e9e:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_opa(list, prop, &value_act);
  406ea0:	f10d 0207 	add.w	r2, sp, #7
  406ea4:	4621      	mov	r1, r4
  406ea6:	4628      	mov	r0, r5
  406ea8:	4b2e      	ldr	r3, [pc, #184]	; (406f64 <_lv_obj_get_style_opa+0x104>)
  406eaa:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  406eac:	2801      	cmp	r0, #1
  406eae:	d03a      	beq.n	406f26 <_lv_obj_get_style_opa+0xc6>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  406eb0:	f019 0f80 	tst.w	r9, #128	; 0x80
  406eb4:	d03f      	beq.n	406f36 <_lv_obj_get_style_opa+0xd6>
        if(part != LV_OBJ_PART_MAIN) {
  406eb6:	2e00      	cmp	r6, #0
  406eb8:	d038      	beq.n	406f2c <_lv_obj_get_style_opa+0xcc>
            part = LV_OBJ_PART_MAIN;
  406eba:	2600      	movs	r6, #0
    while(parent) {
  406ebc:	2f00      	cmp	r7, #0
  406ebe:	d03a      	beq.n	406f36 <_lv_obj_get_style_opa+0xd6>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  406ec0:	4631      	mov	r1, r6
  406ec2:	4638      	mov	r0, r7
  406ec4:	4b28      	ldr	r3, [pc, #160]	; (406f68 <_lv_obj_get_style_opa+0x108>)
  406ec6:	4798      	blx	r3
  406ec8:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  406eca:	7943      	ldrb	r3, [r0, #5]
  406ecc:	f013 0f08 	tst.w	r3, #8
  406ed0:	d1de      	bne.n	406e90 <_lv_obj_get_style_opa+0x30>
  406ed2:	7902      	ldrb	r2, [r0, #4]
  406ed4:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  406ed8:	d0da      	beq.n	406e90 <_lv_obj_get_style_opa+0x30>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406eda:	f013 0f04 	tst.w	r3, #4
  406ede:	d0c9      	beq.n	406e74 <_lv_obj_get_style_opa+0x14>
            switch(prop & (~LV_STYLE_STATE_MASK)) {
  406ee0:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  406ee4:	f248 020c 	movw	r2, #32780	; 0x800c
  406ee8:	4293      	cmp	r3, r2
  406eea:	d0ca      	beq.n	406e82 <_lv_obj_get_style_opa+0x22>
  406eec:	f248 02ad 	movw	r2, #32941	; 0x80ad
  406ef0:	4293      	cmp	r3, r2
  406ef2:	d00c      	beq.n	406f0e <_lv_obj_get_style_opa+0xae>
  406ef4:	2b2c      	cmp	r3, #44	; 0x2c
  406ef6:	d001      	beq.n	406efc <_lv_obj_get_style_opa+0x9c>
            bool def = false;
  406ef8:	2300      	movs	r3, #0
  406efa:	e7c7      	b.n	406e8c <_lv_obj_get_style_opa+0x2c>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
  406efc:	79ab      	ldrb	r3, [r5, #6]
  406efe:	f013 0f10 	tst.w	r3, #16
  406f02:	d127      	bne.n	406f54 <_lv_obj_get_style_opa+0xf4>
                    if(list->bg_opa_transp) def = true;
  406f04:	f013 0f08 	tst.w	r3, #8
  406f08:	d109      	bne.n	406f1e <_lv_obj_get_style_opa+0xbe>
            bool def = false;
  406f0a:	2300      	movs	r3, #0
  406f0c:	e7be      	b.n	406e8c <_lv_obj_get_style_opa+0x2c>
                    if(list->img_recolor_opa_transp) def = true;
  406f0e:	79eb      	ldrb	r3, [r5, #7]
  406f10:	f013 0f10 	tst.w	r3, #16
  406f14:	d105      	bne.n	406f22 <_lv_obj_get_style_opa+0xc2>
            bool def = false;
  406f16:	2300      	movs	r3, #0
  406f18:	e7b8      	b.n	406e8c <_lv_obj_get_style_opa+0x2c>
                    if(list->opa_scale_cover) def = true;
  406f1a:	2301      	movs	r3, #1
  406f1c:	e7b6      	b.n	406e8c <_lv_obj_get_style_opa+0x2c>
                    if(list->bg_opa_transp) def = true;
  406f1e:	2301      	movs	r3, #1
  406f20:	e7b4      	b.n	406e8c <_lv_obj_get_style_opa+0x2c>
                    if(list->img_recolor_opa_transp) def = true;
  406f22:	2301      	movs	r3, #1
  406f24:	e7b2      	b.n	406e8c <_lv_obj_get_style_opa+0x2c>
        if(res == LV_RES_OK) return value_act;
  406f26:	f89d 0007 	ldrb.w	r0, [sp, #7]
  406f2a:	e014      	b.n	406f56 <_lv_obj_get_style_opa+0xf6>
        parent = lv_obj_get_parent(parent);
  406f2c:	4638      	mov	r0, r7
  406f2e:	4b0f      	ldr	r3, [pc, #60]	; (406f6c <_lv_obj_get_style_opa+0x10c>)
  406f30:	4798      	blx	r3
  406f32:	4607      	mov	r7, r0
  406f34:	e7c2      	b.n	406ebc <_lv_obj_get_style_opa+0x5c>
    prop = prop & (~LV_STYLE_STATE_MASK);
  406f36:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  406f3a:	b2a4      	uxth	r4, r4
    switch(prop) {
  406f3c:	2c6d      	cmp	r4, #109	; 0x6d
  406f3e:	d007      	beq.n	406f50 <_lv_obj_get_style_opa+0xf0>
  406f40:	f248 03ad 	movw	r3, #32941	; 0x80ad
  406f44:	429c      	cmp	r4, r3
  406f46:	d003      	beq.n	406f50 <_lv_obj_get_style_opa+0xf0>
  406f48:	2c2c      	cmp	r4, #44	; 0x2c
  406f4a:	d001      	beq.n	406f50 <_lv_obj_get_style_opa+0xf0>
    return LV_OPA_COVER;
  406f4c:	20ff      	movs	r0, #255	; 0xff
  406f4e:	e002      	b.n	406f56 <_lv_obj_get_style_opa+0xf6>
            return LV_OPA_TRANSP;
  406f50:	2000      	movs	r0, #0
  406f52:	e000      	b.n	406f56 <_lv_obj_get_style_opa+0xf6>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
  406f54:	20ff      	movs	r0, #255	; 0xff
}
  406f56:	b003      	add	sp, #12
  406f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406f5c:	00406f71 	.word	0x00406f71
  406f60:	00406d89 	.word	0x00406d89
  406f64:	0040afa5 	.word	0x0040afa5
  406f68:	00405bb5 	.word	0x00405bb5
  406f6c:	00405955 	.word	0x00405955

00406f70 <update_style_cache>:
{
  406f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406f74:	4605      	mov	r5, r0
  406f76:	460e      	mov	r6, r1
    if(style_prop_is_cacheble(prop) == false) return;
  406f78:	4610      	mov	r0, r2
  406f7a:	4baf      	ldr	r3, [pc, #700]	; (407238 <update_style_cache+0x2c8>)
  406f7c:	4798      	blx	r3
  406f7e:	b908      	cbnz	r0, 406f84 <update_style_cache+0x14>
  406f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  406f84:	4631      	mov	r1, r6
  406f86:	4628      	mov	r0, r5
  406f88:	4bac      	ldr	r3, [pc, #688]	; (40723c <update_style_cache+0x2cc>)
  406f8a:	4798      	blx	r3
  406f8c:	4604      	mov	r4, r0
    bool ignore_cache_ori = list->ignore_cache;
  406f8e:	7943      	ldrb	r3, [r0, #5]
  406f90:	f3c3 08c0 	ubfx	r8, r3, #3, #1
    list->ignore_cache = 1;
  406f94:	f043 0308 	orr.w	r3, r3, #8
  406f98:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  406f9a:	f248 020c 	movw	r2, #32780	; 0x800c
  406f9e:	4631      	mov	r1, r6
  406fa0:	4628      	mov	r0, r5
  406fa2:	4ba7      	ldr	r3, [pc, #668]	; (407240 <update_style_cache+0x2d0>)
  406fa4:	4798      	blx	r3
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
  406fa6:	28ff      	cmp	r0, #255	; 0xff
  406fa8:	bf14      	ite	ne
  406faa:	2000      	movne	r0, #0
  406fac:	2001      	moveq	r0, #1
  406fae:	7963      	ldrb	r3, [r4, #5]
  406fb0:	f360 1345 	bfi	r3, r0, #5, #1
  406fb4:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  406fb6:	f248 0282 	movw	r2, #32898	; 0x8082
  406fba:	4631      	mov	r1, r6
  406fbc:	4628      	mov	r0, r5
  406fbe:	4fa1      	ldr	r7, [pc, #644]	; (407244 <update_style_cache+0x2d4>)
  406fc0:	47b8      	blx	r7
  406fc2:	b2c0      	uxtb	r0, r0
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
  406fc4:	fab0 f080 	clz	r0, r0
  406fc8:	0940      	lsrs	r0, r0, #5
  406fca:	79e3      	ldrb	r3, [r4, #7]
  406fcc:	f360 1386 	bfi	r3, r0, #6, #1
  406fd0:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  406fd2:	f248 028e 	movw	r2, #32910	; 0x808e
  406fd6:	4631      	mov	r1, r6
  406fd8:	4628      	mov	r0, r5
  406fda:	4b9b      	ldr	r3, [pc, #620]	; (407248 <update_style_cache+0x2d8>)
  406fdc:	4798      	blx	r3
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;
  406fde:	4b9b      	ldr	r3, [pc, #620]	; (40724c <update_style_cache+0x2dc>)
  406fe0:	4283      	cmp	r3, r0
  406fe2:	bf14      	ite	ne
  406fe4:	2000      	movne	r0, #0
  406fe6:	2001      	moveq	r0, #1
  406fe8:	79e3      	ldrb	r3, [r4, #7]
  406fea:	f360 13c7 	bfi	r3, r0, #7, #1
    list->text_space_zero = 1;
  406fee:	b2db      	uxtb	r3, r3
  406ff0:	f043 0320 	orr.w	r3, r3, #32
  406ff4:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  406ff6:	f248 0280 	movw	r2, #32896	; 0x8080
  406ffa:	4631      	mov	r1, r6
  406ffc:	4628      	mov	r0, r5
  406ffe:	47b8      	blx	r7
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  407000:	2800      	cmp	r0, #0
  407002:	f000 80cf 	beq.w	4071a4 <update_style_cache+0x234>
        list->text_space_zero = 0;
  407006:	79e3      	ldrb	r3, [r4, #7]
  407008:	f36f 1345 	bfc	r3, #5, #1
  40700c:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  40700e:	222c      	movs	r2, #44	; 0x2c
  407010:	4631      	mov	r1, r6
  407012:	4628      	mov	r0, r5
  407014:	f8df 9228 	ldr.w	r9, [pc, #552]	; 407240 <update_style_cache+0x2d0>
  407018:	47c8      	blx	r9
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
  40701a:	fab0 f280 	clz	r2, r0
  40701e:	0952      	lsrs	r2, r2, #5
  407020:	79a3      	ldrb	r3, [r4, #6]
  407022:	f362 03c3 	bfi	r3, r2, #3, #1
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
  407026:	28ff      	cmp	r0, #255	; 0xff
  407028:	bf14      	ite	ne
  40702a:	2000      	movne	r0, #0
  40702c:	2001      	moveq	r0, #1
  40702e:	f360 1304 	bfi	r3, r0, #4, #1
  407032:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  407034:	2230      	movs	r2, #48	; 0x30
  407036:	4631      	mov	r1, r6
  407038:	4628      	mov	r0, r5
  40703a:	4f82      	ldr	r7, [pc, #520]	; (407244 <update_style_cache+0x2d4>)
  40703c:	47b8      	blx	r7
    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
  40703e:	fab0 f080 	clz	r0, r0
  407042:	0940      	lsrs	r0, r0, #5
  407044:	79a3      	ldrb	r3, [r4, #6]
  407046:	f360 1345 	bfi	r3, r0, #5, #1
  40704a:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  40704c:	2231      	movs	r2, #49	; 0x31
  40704e:	4631      	mov	r1, r6
  407050:	4628      	mov	r0, r5
  407052:	47b8      	blx	r7
  407054:	b2c0      	uxtb	r0, r0
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
  407056:	280f      	cmp	r0, #15
  407058:	bf14      	ite	ne
  40705a:	2000      	movne	r0, #0
  40705c:	2001      	moveq	r0, #1
  40705e:	79a3      	ldrb	r3, [r4, #6]
  407060:	f360 1386 	bfi	r3, r0, #6, #1
  407064:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  407066:	2233      	movs	r2, #51	; 0x33
  407068:	4631      	mov	r1, r6
  40706a:	4628      	mov	r0, r5
  40706c:	47b8      	blx	r7
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
  40706e:	fab0 f080 	clz	r0, r0
  407072:	0940      	lsrs	r0, r0, #5
  407074:	79a3      	ldrb	r3, [r4, #6]
  407076:	f360 13c7 	bfi	r3, r0, #7, #1
  40707a:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  40707c:	2202      	movs	r2, #2
  40707e:	4631      	mov	r1, r6
  407080:	4628      	mov	r0, r5
  407082:	47b8      	blx	r7
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
  407084:	fab0 f080 	clz	r0, r0
  407088:	0940      	lsrs	r0, r0, #5
  40708a:	7963      	ldrb	r3, [r4, #5]
  40708c:	f360 1386 	bfi	r3, r0, #6, #1
  407090:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  407092:	f248 02ad 	movw	r2, #32941	; 0x80ad
  407096:	4631      	mov	r1, r6
  407098:	4628      	mov	r0, r5
  40709a:	47c8      	blx	r9
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
  40709c:	fab0 f080 	clz	r0, r0
  4070a0:	0940      	lsrs	r0, r0, #5
  4070a2:	79e3      	ldrb	r3, [r4, #7]
  4070a4:	f360 1304 	bfi	r3, r0, #4, #1
  4070a8:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  4070aa:	2240      	movs	r2, #64	; 0x40
  4070ac:	4631      	mov	r1, r6
  4070ae:	4628      	mov	r0, r5
  4070b0:	47b8      	blx	r7
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
  4070b2:	fab0 f080 	clz	r0, r0
  4070b6:	0940      	lsrs	r0, r0, #5
  4070b8:	79e3      	ldrb	r3, [r4, #7]
  4070ba:	f360 0300 	bfi	r3, r0, #0, #1
  4070be:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  4070c0:	226e      	movs	r2, #110	; 0x6e
  4070c2:	4631      	mov	r1, r6
  4070c4:	4628      	mov	r0, r5
  4070c6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 407248 <update_style_cache+0x2d8>
  4070ca:	47c8      	blx	r9
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
  4070cc:	fab0 f080 	clz	r0, r0
  4070d0:	0940      	lsrs	r0, r0, #5
  4070d2:	79e3      	ldrb	r3, [r4, #7]
  4070d4:	f360 0341 	bfi	r3, r0, #1, #1
  4070d8:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4070da:	2201      	movs	r2, #1
  4070dc:	4631      	mov	r1, r6
  4070de:	4628      	mov	r0, r5
  4070e0:	47b8      	blx	r7
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
  4070e2:	fab0 f080 	clz	r0, r0
  4070e6:	0940      	lsrs	r0, r0, #5
  4070e8:	7963      	ldrb	r3, [r4, #5]
  4070ea:	f360 1304 	bfi	r3, r0, #4, #1
  4070ee:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  4070f0:	2250      	movs	r2, #80	; 0x50
  4070f2:	4631      	mov	r1, r6
  4070f4:	4628      	mov	r0, r5
  4070f6:	47b8      	blx	r7
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
  4070f8:	fab0 f080 	clz	r0, r0
  4070fc:	0940      	lsrs	r0, r0, #5
  4070fe:	79e3      	ldrb	r3, [r4, #7]
  407100:	f360 0382 	bfi	r3, r0, #2, #1
  407104:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  407106:	227f      	movs	r2, #127	; 0x7f
  407108:	4631      	mov	r1, r6
  40710a:	4628      	mov	r0, r5
  40710c:	47c8      	blx	r9
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
  40710e:	fab0 f080 	clz	r0, r0
  407112:	0940      	lsrs	r0, r0, #5
  407114:	79e3      	ldrb	r3, [r4, #7]
  407116:	f360 03c3 	bfi	r3, r0, #3, #1
  40711a:	71e3      	strb	r3, [r4, #7]
    list->transform_all_zero  = 1;
  40711c:	7963      	ldrb	r3, [r4, #5]
  40711e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407122:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  407124:	2206      	movs	r2, #6
  407126:	4631      	mov	r1, r6
  407128:	4628      	mov	r0, r5
  40712a:	47b8      	blx	r7
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
  40712c:	2800      	cmp	r0, #0
  40712e:	d042      	beq.n	4071b6 <update_style_cache+0x246>
        list->transform_all_zero  = 0;
  407130:	7963      	ldrb	r3, [r4, #5]
  407132:	f36f 13c7 	bfc	r3, #7, #1
  407136:	7163      	strb	r3, [r4, #5]
    list->pad_all_zero  = 1;
  407138:	79a3      	ldrb	r3, [r4, #6]
  40713a:	f043 0301 	orr.w	r3, r3, #1
  40713e:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  407140:	2210      	movs	r2, #16
  407142:	4631      	mov	r1, r6
  407144:	4628      	mov	r0, r5
  407146:	4b3f      	ldr	r3, [pc, #252]	; (407244 <update_style_cache+0x2d4>)
  407148:	4798      	blx	r3
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
  40714a:	2800      	cmp	r0, #0
  40714c:	d047      	beq.n	4071de <update_style_cache+0x26e>
        list->pad_all_zero  = 0;
  40714e:	79a3      	ldrb	r3, [r4, #6]
  407150:	f36f 0300 	bfc	r3, #0, #1
  407154:	71a3      	strb	r3, [r4, #6]
    list->margin_all_zero  = 1;
  407156:	79a3      	ldrb	r3, [r4, #6]
  407158:	f043 0302 	orr.w	r3, r3, #2
  40715c:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  40715e:	2215      	movs	r2, #21
  407160:	4631      	mov	r1, r6
  407162:	4628      	mov	r0, r5
  407164:	4b37      	ldr	r3, [pc, #220]	; (407244 <update_style_cache+0x2d4>)
  407166:	4798      	blx	r3
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
  407168:	2800      	cmp	r0, #0
  40716a:	d04e      	beq.n	40720a <update_style_cache+0x29a>
        list->margin_all_zero  = 0;
  40716c:	79a3      	ldrb	r3, [r4, #6]
  40716e:	f36f 0341 	bfc	r3, #1, #1
  407172:	71a3      	strb	r3, [r4, #6]
    list->blend_mode_all_normal = 1;
  407174:	79a3      	ldrb	r3, [r4, #6]
  407176:	f043 0304 	orr.w	r3, r3, #4
  40717a:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  40717c:	2220      	movs	r2, #32
  40717e:	4631      	mov	r1, r6
  407180:	4628      	mov	r0, r5
  407182:	4b30      	ldr	r3, [pc, #192]	; (407244 <update_style_cache+0x2d4>)
  407184:	4798      	blx	r3
  407186:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  407188:	2800      	cmp	r0, #0
  40718a:	d061      	beq.n	407250 <update_style_cache+0x2e0>
        list->blend_mode_all_normal = 0;
  40718c:	79a3      	ldrb	r3, [r4, #6]
  40718e:	f36f 0382 	bfc	r3, #2, #1
  407192:	71a3      	strb	r3, [r4, #6]
    list->ignore_cache = ignore_cache_ori;
  407194:	7963      	ldrb	r3, [r4, #5]
  407196:	f368 03c3 	bfi	r3, r8, #3, #1
    list->valid_cache = 1;
  40719a:	b2db      	uxtb	r3, r3
  40719c:	f043 0304 	orr.w	r3, r3, #4
  4071a0:	7163      	strb	r3, [r4, #5]
  4071a2:	e6ed      	b.n	406f80 <update_style_cache+0x10>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  4071a4:	f248 0281 	movw	r2, #32897	; 0x8081
  4071a8:	4631      	mov	r1, r6
  4071aa:	4628      	mov	r0, r5
  4071ac:	47b8      	blx	r7
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  4071ae:	2800      	cmp	r0, #0
  4071b0:	f43f af2d 	beq.w	40700e <update_style_cache+0x9e>
  4071b4:	e727      	b.n	407006 <update_style_cache+0x96>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  4071b6:	2204      	movs	r2, #4
  4071b8:	4631      	mov	r1, r6
  4071ba:	4628      	mov	r0, r5
  4071bc:	47b8      	blx	r7
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
  4071be:	2800      	cmp	r0, #0
  4071c0:	d1b6      	bne.n	407130 <update_style_cache+0x1c0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  4071c2:	2205      	movs	r2, #5
  4071c4:	4631      	mov	r1, r6
  4071c6:	4628      	mov	r0, r5
  4071c8:	47b8      	blx	r7
       lv_obj_get_style_transform_width(obj, part) != 0 ||
  4071ca:	2800      	cmp	r0, #0
  4071cc:	d1b0      	bne.n	407130 <update_style_cache+0x1c0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  4071ce:	2207      	movs	r2, #7
  4071d0:	4631      	mov	r1, r6
  4071d2:	4628      	mov	r0, r5
  4071d4:	47b8      	blx	r7
       lv_obj_get_style_transform_height(obj, part) != 0 ||
  4071d6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  4071da:	d1a9      	bne.n	407130 <update_style_cache+0x1c0>
  4071dc:	e7ac      	b.n	407138 <update_style_cache+0x1c8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4071de:	2211      	movs	r2, #17
  4071e0:	4631      	mov	r1, r6
  4071e2:	4628      	mov	r0, r5
  4071e4:	4b17      	ldr	r3, [pc, #92]	; (407244 <update_style_cache+0x2d4>)
  4071e6:	4798      	blx	r3
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
  4071e8:	2800      	cmp	r0, #0
  4071ea:	d1b0      	bne.n	40714e <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4071ec:	2212      	movs	r2, #18
  4071ee:	4631      	mov	r1, r6
  4071f0:	4628      	mov	r0, r5
  4071f2:	4b14      	ldr	r3, [pc, #80]	; (407244 <update_style_cache+0x2d4>)
  4071f4:	4798      	blx	r3
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
  4071f6:	2800      	cmp	r0, #0
  4071f8:	d1a9      	bne.n	40714e <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4071fa:	2213      	movs	r2, #19
  4071fc:	4631      	mov	r1, r6
  4071fe:	4628      	mov	r0, r5
  407200:	4b10      	ldr	r3, [pc, #64]	; (407244 <update_style_cache+0x2d4>)
  407202:	4798      	blx	r3
       lv_obj_get_style_pad_left(obj, part) != 0 ||
  407204:	2800      	cmp	r0, #0
  407206:	d0a6      	beq.n	407156 <update_style_cache+0x1e6>
  407208:	e7a1      	b.n	40714e <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  40720a:	2216      	movs	r2, #22
  40720c:	4631      	mov	r1, r6
  40720e:	4628      	mov	r0, r5
  407210:	4b0c      	ldr	r3, [pc, #48]	; (407244 <update_style_cache+0x2d4>)
  407212:	4798      	blx	r3
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
  407214:	2800      	cmp	r0, #0
  407216:	d1a9      	bne.n	40716c <update_style_cache+0x1fc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  407218:	2217      	movs	r2, #23
  40721a:	4631      	mov	r1, r6
  40721c:	4628      	mov	r0, r5
  40721e:	4b09      	ldr	r3, [pc, #36]	; (407244 <update_style_cache+0x2d4>)
  407220:	4798      	blx	r3
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
  407222:	2800      	cmp	r0, #0
  407224:	d1a2      	bne.n	40716c <update_style_cache+0x1fc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  407226:	2218      	movs	r2, #24
  407228:	4631      	mov	r1, r6
  40722a:	4628      	mov	r0, r5
  40722c:	4b05      	ldr	r3, [pc, #20]	; (407244 <update_style_cache+0x2d4>)
  40722e:	4798      	blx	r3
       lv_obj_get_style_margin_left(obj, part) != 0 ||
  407230:	2800      	cmp	r0, #0
  407232:	d09f      	beq.n	407174 <update_style_cache+0x204>
  407234:	e79a      	b.n	40716c <update_style_cache+0x1fc>
  407236:	bf00      	nop
  407238:	0040535d 	.word	0x0040535d
  40723c:	00405bb5 	.word	0x00405bb5
  407240:	00406e61 	.word	0x00406e61
  407244:	004073ed 	.word	0x004073ed
  407248:	004072e5 	.word	0x004072e5
  40724c:	2040008c 	.word	0x2040008c
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  407250:	2232      	movs	r2, #50	; 0x32
  407252:	4631      	mov	r1, r6
  407254:	4628      	mov	r0, r5
  407256:	4b22      	ldr	r3, [pc, #136]	; (4072e0 <update_style_cache+0x370>)
  407258:	4798      	blx	r3
  40725a:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  40725c:	2800      	cmp	r0, #0
  40725e:	d195      	bne.n	40718c <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
  407260:	2260      	movs	r2, #96	; 0x60
  407262:	4631      	mov	r1, r6
  407264:	4628      	mov	r0, r5
  407266:	4b1e      	ldr	r3, [pc, #120]	; (4072e0 <update_style_cache+0x370>)
  407268:	4798      	blx	r3
  40726a:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_border_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  40726c:	2800      	cmp	r0, #0
  40726e:	d18d      	bne.n	40718c <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
  407270:	2242      	movs	r2, #66	; 0x42
  407272:	4631      	mov	r1, r6
  407274:	4628      	mov	r0, r5
  407276:	4b1a      	ldr	r3, [pc, #104]	; (4072e0 <update_style_cache+0x370>)
  407278:	4798      	blx	r3
  40727a:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_pattern_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  40727c:	2800      	cmp	r0, #0
  40727e:	d185      	bne.n	40718c <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
  407280:	2272      	movs	r2, #114	; 0x72
  407282:	4631      	mov	r1, r6
  407284:	4628      	mov	r0, r5
  407286:	4b16      	ldr	r3, [pc, #88]	; (4072e0 <update_style_cache+0x370>)
  407288:	4798      	blx	r3
  40728a:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_outline_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  40728c:	2800      	cmp	r0, #0
  40728e:	f47f af7d 	bne.w	40718c <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
  407292:	f248 0283 	movw	r2, #32899	; 0x8083
  407296:	4631      	mov	r1, r6
  407298:	4628      	mov	r0, r5
  40729a:	4b11      	ldr	r3, [pc, #68]	; (4072e0 <update_style_cache+0x370>)
  40729c:	4798      	blx	r3
  40729e:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  4072a0:	2800      	cmp	r0, #0
  4072a2:	f47f af73 	bne.w	40718c <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
  4072a6:	2291      	movs	r2, #145	; 0x91
  4072a8:	4631      	mov	r1, r6
  4072aa:	4628      	mov	r0, r5
  4072ac:	4b0c      	ldr	r3, [pc, #48]	; (4072e0 <update_style_cache+0x370>)
  4072ae:	4798      	blx	r3
  4072b0:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  4072b2:	2800      	cmp	r0, #0
  4072b4:	f47f af6a 	bne.w	40718c <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  4072b8:	f248 02a0 	movw	r2, #32928	; 0x80a0
  4072bc:	4631      	mov	r1, r6
  4072be:	4628      	mov	r0, r5
  4072c0:	4b07      	ldr	r3, [pc, #28]	; (4072e0 <update_style_cache+0x370>)
  4072c2:	4798      	blx	r3
  4072c4:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  4072c6:	2800      	cmp	r0, #0
  4072c8:	f47f af60 	bne.w	40718c <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
  4072cc:	2254      	movs	r2, #84	; 0x54
  4072ce:	4631      	mov	r1, r6
  4072d0:	4628      	mov	r0, r5
  4072d2:	4b03      	ldr	r3, [pc, #12]	; (4072e0 <update_style_cache+0x370>)
  4072d4:	4798      	blx	r3
  4072d6:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  4072d8:	2800      	cmp	r0, #0
  4072da:	f43f af5b 	beq.w	407194 <update_style_cache+0x224>
  4072de:	e755      	b.n	40718c <update_style_cache+0x21c>
  4072e0:	004073ed 	.word	0x004073ed

004072e4 <_lv_obj_get_style_ptr>:
{
  4072e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4072e8:	b083      	sub	sp, #12
  4072ea:	4607      	mov	r7, r0
  4072ec:	460e      	mov	r6, r1
  4072ee:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  4072f0:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  4072f4:	4614      	mov	r4, r2
  4072f6:	e02d      	b.n	407354 <_lv_obj_get_style_ptr+0x70>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  4072f8:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  4072fc:	4631      	mov	r1, r6
  4072fe:	4638      	mov	r0, r7
  407300:	4b33      	ldr	r3, [pc, #204]	; (4073d0 <_lv_obj_get_style_ptr+0xec>)
  407302:	4798      	blx	r3
  407304:	e037      	b.n	407376 <_lv_obj_get_style_ptr+0x92>
                    if(list->value_txt_str) def = true;
  407306:	79eb      	ldrb	r3, [r5, #7]
  407308:	f013 0f08 	tst.w	r3, #8
  40730c:	d13f      	bne.n	40738e <_lv_obj_get_style_ptr+0xaa>
            bool def = false;
  40730e:	2300      	movs	r3, #0
  407310:	e00a      	b.n	407328 <_lv_obj_get_style_ptr+0x44>
                    if(list->pattern_img_null) def = true;
  407312:	79eb      	ldrb	r3, [r5, #7]
  407314:	f013 0f02 	tst.w	r3, #2
  407318:	d13b      	bne.n	407392 <_lv_obj_get_style_ptr+0xae>
            bool def = false;
  40731a:	2300      	movs	r3, #0
  40731c:	e004      	b.n	407328 <_lv_obj_get_style_ptr+0x44>
                    if(list->text_font_normal) def = true;
  40731e:	f995 3007 	ldrsb.w	r3, [r5, #7]
  407322:	2b00      	cmp	r3, #0
  407324:	db37      	blt.n	407396 <_lv_obj_get_style_ptr+0xb2>
            bool def = false;
  407326:	2300      	movs	r3, #0
            if(def) {
  407328:	2b00      	cmp	r3, #0
  40732a:	d13f      	bne.n	4073ac <_lv_obj_get_style_ptr+0xc8>
        lv_state_t state = lv_obj_get_state(parent, part);
  40732c:	4631      	mov	r1, r6
  40732e:	4638      	mov	r0, r7
  407330:	4b28      	ldr	r3, [pc, #160]	; (4073d4 <_lv_obj_get_style_ptr+0xf0>)
  407332:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  407334:	0204      	lsls	r4, r0, #8
  407336:	b2a4      	uxth	r4, r4
  407338:	4444      	add	r4, r8
  40733a:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_ptr(list, prop, &value_act);
  40733c:	aa01      	add	r2, sp, #4
  40733e:	4621      	mov	r1, r4
  407340:	4628      	mov	r0, r5
  407342:	4b25      	ldr	r3, [pc, #148]	; (4073d8 <_lv_obj_get_style_ptr+0xf4>)
  407344:	4798      	blx	r3
        if(res == LV_RES_OK)  return value_act;
  407346:	2801      	cmp	r0, #1
  407348:	d027      	beq.n	40739a <_lv_obj_get_style_ptr+0xb6>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  40734a:	f019 0f80 	tst.w	r9, #128	; 0x80
  40734e:	d02d      	beq.n	4073ac <_lv_obj_get_style_ptr+0xc8>
        if(part != LV_OBJ_PART_MAIN) {
  407350:	b33e      	cbz	r6, 4073a2 <_lv_obj_get_style_ptr+0xbe>
            part = LV_OBJ_PART_MAIN;
  407352:	2600      	movs	r6, #0
    while(parent) {
  407354:	b357      	cbz	r7, 4073ac <_lv_obj_get_style_ptr+0xc8>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  407356:	4631      	mov	r1, r6
  407358:	4638      	mov	r0, r7
  40735a:	4b20      	ldr	r3, [pc, #128]	; (4073dc <_lv_obj_get_style_ptr+0xf8>)
  40735c:	4798      	blx	r3
  40735e:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  407360:	7943      	ldrb	r3, [r0, #5]
  407362:	f013 0f08 	tst.w	r3, #8
  407366:	d1e1      	bne.n	40732c <_lv_obj_get_style_ptr+0x48>
  407368:	7902      	ldrb	r2, [r0, #4]
  40736a:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40736e:	d0dd      	beq.n	40732c <_lv_obj_get_style_ptr+0x48>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  407370:	f013 0f04 	tst.w	r3, #4
  407374:	d0c0      	beq.n	4072f8 <_lv_obj_get_style_ptr+0x14>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  407376:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  40737a:	2b7f      	cmp	r3, #127	; 0x7f
  40737c:	d0c3      	beq.n	407306 <_lv_obj_get_style_ptr+0x22>
  40737e:	f248 028e 	movw	r2, #32910	; 0x808e
  407382:	4293      	cmp	r3, r2
  407384:	d0cb      	beq.n	40731e <_lv_obj_get_style_ptr+0x3a>
  407386:	2b6e      	cmp	r3, #110	; 0x6e
  407388:	d0c3      	beq.n	407312 <_lv_obj_get_style_ptr+0x2e>
            bool def = false;
  40738a:	2300      	movs	r3, #0
  40738c:	e7cc      	b.n	407328 <_lv_obj_get_style_ptr+0x44>
                    if(list->value_txt_str) def = true;
  40738e:	2301      	movs	r3, #1
  407390:	e7ca      	b.n	407328 <_lv_obj_get_style_ptr+0x44>
                    if(list->pattern_img_null) def = true;
  407392:	2301      	movs	r3, #1
  407394:	e7c8      	b.n	407328 <_lv_obj_get_style_ptr+0x44>
                    if(list->text_font_normal) def = true;
  407396:	2301      	movs	r3, #1
  407398:	e7c6      	b.n	407328 <_lv_obj_get_style_ptr+0x44>
        if(res == LV_RES_OK)  return value_act;
  40739a:	9801      	ldr	r0, [sp, #4]
}
  40739c:	b003      	add	sp, #12
  40739e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        parent = lv_obj_get_parent(parent);
  4073a2:	4638      	mov	r0, r7
  4073a4:	4b0e      	ldr	r3, [pc, #56]	; (4073e0 <_lv_obj_get_style_ptr+0xfc>)
  4073a6:	4798      	blx	r3
  4073a8:	4607      	mov	r7, r0
  4073aa:	e7d3      	b.n	407354 <_lv_obj_get_style_ptr+0x70>
    prop = prop & (~LV_STYLE_STATE_MASK);
  4073ac:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  4073b0:	b2a4      	uxth	r4, r4
    switch(prop) {
  4073b2:	2cbe      	cmp	r4, #190	; 0xbe
  4073b4:	d007      	beq.n	4073c6 <_lv_obj_get_style_ptr+0xe2>
  4073b6:	f248 038e 	movw	r3, #32910	; 0x808e
  4073ba:	429c      	cmp	r4, r3
  4073bc:	d005      	beq.n	4073ca <_lv_obj_get_style_ptr+0xe6>
  4073be:	2c7e      	cmp	r4, #126	; 0x7e
  4073c0:	d003      	beq.n	4073ca <_lv_obj_get_style_ptr+0xe6>
    return NULL;
  4073c2:	2000      	movs	r0, #0
  4073c4:	e7ea      	b.n	40739c <_lv_obj_get_style_ptr+0xb8>
            return &lv_anim_path_def;
  4073c6:	4807      	ldr	r0, [pc, #28]	; (4073e4 <_lv_obj_get_style_ptr+0x100>)
  4073c8:	e7e8      	b.n	40739c <_lv_obj_get_style_ptr+0xb8>
            return lv_theme_get_font_normal();
  4073ca:	4b07      	ldr	r3, [pc, #28]	; (4073e8 <_lv_obj_get_style_ptr+0x104>)
  4073cc:	4798      	blx	r3
  4073ce:	e7e5      	b.n	40739c <_lv_obj_get_style_ptr+0xb8>
  4073d0:	00406f71 	.word	0x00406f71
  4073d4:	00406d89 	.word	0x00406d89
  4073d8:	0040b079 	.word	0x0040b079
  4073dc:	00405bb5 	.word	0x00405bb5
  4073e0:	00405955 	.word	0x00405955
  4073e4:	00431b30 	.word	0x00431b30
  4073e8:	004192c9 	.word	0x004192c9

004073ec <_lv_obj_get_style_int>:
{
  4073ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4073f0:	b083      	sub	sp, #12
  4073f2:	4607      	mov	r7, r0
  4073f4:	460e      	mov	r6, r1
  4073f6:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  4073f8:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  4073fc:	4614      	mov	r4, r2
  4073fe:	e078      	b.n	4074f2 <_lv_obj_get_style_int+0x106>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  407400:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  407404:	4631      	mov	r1, r6
  407406:	4638      	mov	r0, r7
  407408:	4b82      	ldr	r3, [pc, #520]	; (407614 <_lv_obj_get_style_int+0x228>)
  40740a:	4798      	blx	r3
  40740c:	e084      	b.n	407518 <_lv_obj_get_style_int+0x12c>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  40740e:	3b04      	subs	r3, #4
  407410:	2b03      	cmp	r3, #3
  407412:	d854      	bhi.n	4074be <_lv_obj_get_style_int+0xd2>
                    if(list->transform_all_zero) def = true;
  407414:	f995 3005 	ldrsb.w	r3, [r5, #5]
  407418:	2b00      	cmp	r3, #0
  40741a:	f2c0 80c0 	blt.w	40759e <_lv_obj_get_style_int+0x1b2>
            bool def = false;
  40741e:	2300      	movs	r3, #0
  407420:	e04e      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  407422:	2b20      	cmp	r3, #32
  407424:	d029      	beq.n	40747a <_lv_obj_get_style_int+0x8e>
  407426:	dd0c      	ble.n	407442 <_lv_obj_get_style_int+0x56>
  407428:	2b31      	cmp	r3, #49	; 0x31
  40742a:	f000 809c 	beq.w	407566 <_lv_obj_get_style_int+0x17a>
  40742e:	dc24      	bgt.n	40747a <_lv_obj_get_style_int+0x8e>
  407430:	2b30      	cmp	r3, #48	; 0x30
  407432:	d144      	bne.n	4074be <_lv_obj_get_style_int+0xd2>
                    if(list->border_width_zero) def = true;
  407434:	79ab      	ldrb	r3, [r5, #6]
  407436:	f013 0f20 	tst.w	r3, #32
  40743a:	f040 80b2 	bne.w	4075a2 <_lv_obj_get_style_int+0x1b6>
            bool def = false;
  40743e:	2300      	movs	r3, #0
  407440:	e03e      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  407442:	3b15      	subs	r3, #21
  407444:	2b03      	cmp	r3, #3
  407446:	d83a      	bhi.n	4074be <_lv_obj_get_style_int+0xd2>
                    if(list->margin_all_zero) def = true;
  407448:	79ab      	ldrb	r3, [r5, #6]
  40744a:	f013 0f02 	tst.w	r3, #2
  40744e:	f040 80b6 	bne.w	4075be <_lv_obj_get_style_int+0x1d2>
            bool def = false;
  407452:	2300      	movs	r3, #0
  407454:	e034      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  407456:	2b72      	cmp	r3, #114	; 0x72
  407458:	d00f      	beq.n	40747a <_lv_obj_get_style_int+0x8e>
  40745a:	dc1a      	bgt.n	407492 <_lv_obj_get_style_int+0xa6>
  40745c:	2b50      	cmp	r3, #80	; 0x50
  40745e:	f000 808e 	beq.w	40757e <_lv_obj_get_style_int+0x192>
  407462:	dc11      	bgt.n	407488 <_lv_obj_get_style_int+0x9c>
  407464:	2b40      	cmp	r3, #64	; 0x40
  407466:	d106      	bne.n	407476 <_lv_obj_get_style_int+0x8a>
                    if(list->outline_width_zero) def = true;
  407468:	79eb      	ldrb	r3, [r5, #7]
  40746a:	f013 0f01 	tst.w	r3, #1
  40746e:	f040 809e 	bne.w	4075ae <_lv_obj_get_style_int+0x1c2>
            bool def = false;
  407472:	2300      	movs	r3, #0
  407474:	e024      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  407476:	2b42      	cmp	r3, #66	; 0x42
  407478:	d121      	bne.n	4074be <_lv_obj_get_style_int+0xd2>
                    if(list->blend_mode_all_normal) def = true;
  40747a:	79ab      	ldrb	r3, [r5, #6]
  40747c:	f013 0f04 	tst.w	r3, #4
  407480:	f040 809f 	bne.w	4075c2 <_lv_obj_get_style_int+0x1d6>
            bool def = false;
  407484:	2300      	movs	r3, #0
  407486:	e01b      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  407488:	2b54      	cmp	r3, #84	; 0x54
  40748a:	d0f6      	beq.n	40747a <_lv_obj_get_style_int+0x8e>
  40748c:	2b60      	cmp	r3, #96	; 0x60
  40748e:	d116      	bne.n	4074be <_lv_obj_get_style_int+0xd2>
  407490:	e7f3      	b.n	40747a <_lv_obj_get_style_int+0x8e>
  407492:	f248 0281 	movw	r2, #32897	; 0x8081
  407496:	4293      	cmp	r3, r2
  407498:	dd0b      	ble.n	4074b2 <_lv_obj_get_style_int+0xc6>
  40749a:	f248 0283 	movw	r2, #32899	; 0x8083
  40749e:	4293      	cmp	r3, r2
  4074a0:	d0eb      	beq.n	40747a <_lv_obj_get_style_int+0x8e>
  4074a2:	da4f      	bge.n	407544 <_lv_obj_get_style_int+0x158>
                    if(list->text_decor_none) def = true;
  4074a4:	79eb      	ldrb	r3, [r5, #7]
  4074a6:	f013 0f40 	tst.w	r3, #64	; 0x40
  4074aa:	f040 808c 	bne.w	4075c6 <_lv_obj_get_style_int+0x1da>
            bool def = false;
  4074ae:	2300      	movs	r3, #0
  4074b0:	e006      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  4074b2:	f248 0280 	movw	r2, #32896	; 0x8080
  4074b6:	4293      	cmp	r3, r2
  4074b8:	da4f      	bge.n	40755a <_lv_obj_get_style_int+0x16e>
  4074ba:	2b91      	cmp	r3, #145	; 0x91
  4074bc:	d0dd      	beq.n	40747a <_lv_obj_get_style_int+0x8e>
            bool def = false;
  4074be:	2300      	movs	r3, #0
            if(def) {
  4074c0:	2b00      	cmp	r3, #0
  4074c2:	f040 808c 	bne.w	4075de <_lv_obj_get_style_int+0x1f2>
        lv_state_t state = lv_obj_get_state(parent, part);
  4074c6:	4631      	mov	r1, r6
  4074c8:	4638      	mov	r0, r7
  4074ca:	4b53      	ldr	r3, [pc, #332]	; (407618 <_lv_obj_get_style_int+0x22c>)
  4074cc:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  4074ce:	0204      	lsls	r4, r0, #8
  4074d0:	b2a4      	uxth	r4, r4
  4074d2:	4444      	add	r4, r8
  4074d4:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_int(list, prop, &value_act);
  4074d6:	f10d 0206 	add.w	r2, sp, #6
  4074da:	4621      	mov	r1, r4
  4074dc:	4628      	mov	r0, r5
  4074de:	4b4f      	ldr	r3, [pc, #316]	; (40761c <_lv_obj_get_style_int+0x230>)
  4074e0:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  4074e2:	2801      	cmp	r0, #1
  4074e4:	d071      	beq.n	4075ca <_lv_obj_get_style_int+0x1de>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  4074e6:	f019 0f80 	tst.w	r9, #128	; 0x80
  4074ea:	d078      	beq.n	4075de <_lv_obj_get_style_int+0x1f2>
        if(part != LV_OBJ_PART_MAIN) {
  4074ec:	2e00      	cmp	r6, #0
  4074ee:	d071      	beq.n	4075d4 <_lv_obj_get_style_int+0x1e8>
            part = LV_OBJ_PART_MAIN;
  4074f0:	2600      	movs	r6, #0
    while(parent) {
  4074f2:	2f00      	cmp	r7, #0
  4074f4:	d073      	beq.n	4075de <_lv_obj_get_style_int+0x1f2>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  4074f6:	4631      	mov	r1, r6
  4074f8:	4638      	mov	r0, r7
  4074fa:	4b49      	ldr	r3, [pc, #292]	; (407620 <_lv_obj_get_style_int+0x234>)
  4074fc:	4798      	blx	r3
  4074fe:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  407500:	7943      	ldrb	r3, [r0, #5]
  407502:	f013 0f08 	tst.w	r3, #8
  407506:	d1de      	bne.n	4074c6 <_lv_obj_get_style_int+0xda>
  407508:	7902      	ldrb	r2, [r0, #4]
  40750a:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40750e:	d0da      	beq.n	4074c6 <_lv_obj_get_style_int+0xda>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  407510:	f013 0f04 	tst.w	r3, #4
  407514:	f43f af74 	beq.w	407400 <_lv_obj_get_style_int+0x14>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  407518:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  40751c:	2b33      	cmp	r3, #51	; 0x33
  40751e:	d028      	beq.n	407572 <_lv_obj_get_style_int+0x186>
  407520:	dc99      	bgt.n	407456 <_lv_obj_get_style_int+0x6a>
  407522:	2b13      	cmp	r3, #19
  407524:	f73f af7d 	bgt.w	407422 <_lv_obj_get_style_int+0x36>
  407528:	2b10      	cmp	r3, #16
  40752a:	da2e      	bge.n	40758a <_lv_obj_get_style_int+0x19e>
  40752c:	2b02      	cmp	r3, #2
  40752e:	d00e      	beq.n	40754e <_lv_obj_get_style_int+0x162>
  407530:	f73f af6d 	bgt.w	40740e <_lv_obj_get_style_int+0x22>
  407534:	2b01      	cmp	r3, #1
  407536:	d1c2      	bne.n	4074be <_lv_obj_get_style_int+0xd2>
                    if(list->radius_zero) def = true;
  407538:	796b      	ldrb	r3, [r5, #5]
  40753a:	f013 0f10 	tst.w	r3, #16
  40753e:	d138      	bne.n	4075b2 <_lv_obj_get_style_int+0x1c6>
            bool def = false;
  407540:	2300      	movs	r3, #0
  407542:	e7bd      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  407544:	f248 02a0 	movw	r2, #32928	; 0x80a0
  407548:	4293      	cmp	r3, r2
  40754a:	d1b8      	bne.n	4074be <_lv_obj_get_style_int+0xd2>
  40754c:	e795      	b.n	40747a <_lv_obj_get_style_int+0x8e>
                    if(list->clip_corner_off) def = true;
  40754e:	796b      	ldrb	r3, [r5, #5]
  407550:	f013 0f40 	tst.w	r3, #64	; 0x40
  407554:	d11f      	bne.n	407596 <_lv_obj_get_style_int+0x1aa>
            bool def = false;
  407556:	2300      	movs	r3, #0
  407558:	e7b2      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
                    if(list->text_space_zero) def = true;
  40755a:	79eb      	ldrb	r3, [r5, #7]
  40755c:	f013 0f20 	tst.w	r3, #32
  407560:	d11b      	bne.n	40759a <_lv_obj_get_style_int+0x1ae>
            bool def = false;
  407562:	2300      	movs	r3, #0
  407564:	e7ac      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
                    if(list->border_side_full) def = true;
  407566:	79ab      	ldrb	r3, [r5, #6]
  407568:	f013 0f40 	tst.w	r3, #64	; 0x40
  40756c:	d11b      	bne.n	4075a6 <_lv_obj_get_style_int+0x1ba>
            bool def = false;
  40756e:	2300      	movs	r3, #0
  407570:	e7a6      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
                    if(list->border_post_off) def = true;
  407572:	f995 3006 	ldrsb.w	r3, [r5, #6]
  407576:	2b00      	cmp	r3, #0
  407578:	db17      	blt.n	4075aa <_lv_obj_get_style_int+0x1be>
            bool def = false;
  40757a:	2300      	movs	r3, #0
  40757c:	e7a0      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
                    if(list->shadow_width_zero) def = true;
  40757e:	79eb      	ldrb	r3, [r5, #7]
  407580:	f013 0f04 	tst.w	r3, #4
  407584:	d117      	bne.n	4075b6 <_lv_obj_get_style_int+0x1ca>
            bool def = false;
  407586:	2300      	movs	r3, #0
  407588:	e79a      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
                    if(list->pad_all_zero) def = true;
  40758a:	79ab      	ldrb	r3, [r5, #6]
  40758c:	f013 0f01 	tst.w	r3, #1
  407590:	d113      	bne.n	4075ba <_lv_obj_get_style_int+0x1ce>
            bool def = false;
  407592:	2300      	movs	r3, #0
  407594:	e794      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
                    if(list->clip_corner_off) def = true;
  407596:	2301      	movs	r3, #1
  407598:	e792      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
                    if(list->text_space_zero) def = true;
  40759a:	2301      	movs	r3, #1
  40759c:	e790      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
                    if(list->transform_all_zero) def = true;
  40759e:	2301      	movs	r3, #1
  4075a0:	e78e      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
                    if(list->border_width_zero) def = true;
  4075a2:	2301      	movs	r3, #1
  4075a4:	e78c      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
                    if(list->border_side_full) def = true;
  4075a6:	2301      	movs	r3, #1
  4075a8:	e78a      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
                    if(list->border_post_off) def = true;
  4075aa:	2301      	movs	r3, #1
  4075ac:	e788      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
                    if(list->outline_width_zero) def = true;
  4075ae:	2301      	movs	r3, #1
  4075b0:	e786      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
                    if(list->radius_zero) def = true;
  4075b2:	2301      	movs	r3, #1
  4075b4:	e784      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
                    if(list->shadow_width_zero) def = true;
  4075b6:	2301      	movs	r3, #1
  4075b8:	e782      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
                    if(list->pad_all_zero) def = true;
  4075ba:	2301      	movs	r3, #1
  4075bc:	e780      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
                    if(list->margin_all_zero) def = true;
  4075be:	2301      	movs	r3, #1
  4075c0:	e77e      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
                    if(list->blend_mode_all_normal) def = true;
  4075c2:	2301      	movs	r3, #1
  4075c4:	e77c      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
                    if(list->text_decor_none) def = true;
  4075c6:	2301      	movs	r3, #1
  4075c8:	e77a      	b.n	4074c0 <_lv_obj_get_style_int+0xd4>
        if(res == LV_RES_OK) return value_act;
  4075ca:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
}
  4075ce:	b003      	add	sp, #12
  4075d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        parent = lv_obj_get_parent(parent);
  4075d4:	4638      	mov	r0, r7
  4075d6:	4b13      	ldr	r3, [pc, #76]	; (407624 <_lv_obj_get_style_int+0x238>)
  4075d8:	4798      	blx	r3
  4075da:	4607      	mov	r7, r0
  4075dc:	e789      	b.n	4074f2 <_lv_obj_get_style_int+0x106>
    prop = prop & (~LV_STYLE_STATE_MASK);
  4075de:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  4075e2:	b2a4      	uxth	r4, r4
    switch(prop) {
  4075e4:	2c22      	cmp	r4, #34	; 0x22
  4075e6:	d00f      	beq.n	407608 <_lv_obj_get_style_int+0x21c>
  4075e8:	d806      	bhi.n	4075f8 <_lv_obj_get_style_int+0x20c>
  4075ea:	2c03      	cmp	r4, #3
  4075ec:	d010      	beq.n	407610 <_lv_obj_get_style_int+0x224>
  4075ee:	2c07      	cmp	r4, #7
  4075f0:	d10c      	bne.n	40760c <_lv_obj_get_style_int+0x220>
            return LV_IMG_ZOOM_NONE;
  4075f2:	f44f 7080 	mov.w	r0, #256	; 0x100
  4075f6:	e7ea      	b.n	4075ce <_lv_obj_get_style_int+0x1e2>
    switch(prop) {
  4075f8:	2c31      	cmp	r4, #49	; 0x31
  4075fa:	d003      	beq.n	407604 <_lv_obj_get_style_int+0x218>
  4075fc:	2cc0      	cmp	r4, #192	; 0xc0
  4075fe:	d105      	bne.n	40760c <_lv_obj_get_style_int+0x220>
            return LV_DPI / 8;
  407600:	2012      	movs	r0, #18
  407602:	e7e4      	b.n	4075ce <_lv_obj_get_style_int+0x1e2>
            return LV_BORDER_SIDE_FULL;
  407604:	200f      	movs	r0, #15
  407606:	e7e2      	b.n	4075ce <_lv_obj_get_style_int+0x1e2>
            return 255;
  407608:	20ff      	movs	r0, #255	; 0xff
  40760a:	e7e0      	b.n	4075ce <_lv_obj_get_style_int+0x1e2>
    return 0;
  40760c:	2000      	movs	r0, #0
  40760e:	e7de      	b.n	4075ce <_lv_obj_get_style_int+0x1e2>
            return LV_DPI / 20;
  407610:	2007      	movs	r0, #7
  407612:	e7dc      	b.n	4075ce <_lv_obj_get_style_int+0x1e2>
  407614:	00406f71 	.word	0x00406f71
  407618:	00406d89 	.word	0x00406d89
  40761c:	0040ae01 	.word	0x0040ae01
  407620:	00405bb5 	.word	0x00405bb5
  407624:	00405955 	.word	0x00405955

00407628 <lv_obj_get_width_fit>:
{
  407628:	b570      	push	{r4, r5, r6, lr}
  40762a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40762c:	4b0e      	ldr	r3, [pc, #56]	; (407668 <lv_obj_get_width_fit+0x40>)
  40762e:	4798      	blx	r3
  407630:	b928      	cbnz	r0, 40763e <lv_obj_get_width_fit+0x16>
  407632:	4622      	mov	r2, r4
  407634:	2300      	movs	r3, #0
  407636:	480d      	ldr	r0, [pc, #52]	; (40766c <lv_obj_get_width_fit+0x44>)
  407638:	490d      	ldr	r1, [pc, #52]	; (407670 <lv_obj_get_width_fit+0x48>)
  40763a:	4788      	blx	r1
  40763c:	e7fe      	b.n	40763c <lv_obj_get_width_fit+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  40763e:	2212      	movs	r2, #18
  407640:	2100      	movs	r1, #0
  407642:	4620      	mov	r0, r4
  407644:	4d0b      	ldr	r5, [pc, #44]	; (407674 <lv_obj_get_width_fit+0x4c>)
  407646:	47a8      	blx	r5
  407648:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  40764a:	2213      	movs	r2, #19
  40764c:	2100      	movs	r1, #0
  40764e:	4620      	mov	r0, r4
  407650:	47a8      	blx	r5
  407652:	4605      	mov	r5, r0
    return lv_obj_get_width(obj) - left - right;
  407654:	4620      	mov	r0, r4
  407656:	4b08      	ldr	r3, [pc, #32]	; (407678 <lv_obj_get_width_fit+0x50>)
  407658:	4798      	blx	r3
  40765a:	b280      	uxth	r0, r0
  40765c:	1b80      	subs	r0, r0, r6
  40765e:	b280      	uxth	r0, r0
  407660:	1b40      	subs	r0, r0, r5
}
  407662:	b200      	sxth	r0, r0
  407664:	bd70      	pop	{r4, r5, r6, pc}
  407666:	bf00      	nop
  407668:	00416da9 	.word	0x00416da9
  40766c:	0042e560 	.word	0x0042e560
  407670:	00416db5 	.word	0x00416db5
  407674:	004073ed 	.word	0x004073ed
  407678:	00405b29 	.word	0x00405b29

0040767c <update_style_cache_children>:
{
  40767c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407680:	4606      	mov	r6, r0
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  407682:	2500      	movs	r5, #0
  407684:	e009      	b.n	40769a <update_style_cache_children+0x1e>
            list->text_space_zero = 0;
  407686:	79e3      	ldrb	r3, [r4, #7]
  407688:	f36f 1345 	bfc	r3, #5, #1
  40768c:	71e3      	strb	r3, [r4, #7]
        list->ignore_cache = ignore_cache_ori;
  40768e:	7963      	ldrb	r3, [r4, #5]
  407690:	f368 03c3 	bfi	r3, r8, #3, #1
  407694:	7163      	strb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  407696:	3501      	adds	r5, #1
  407698:	b2ed      	uxtb	r5, r5
  40769a:	2d40      	cmp	r5, #64	; 0x40
  40769c:	d058      	beq.n	407750 <update_style_cache_children+0xd4>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  40769e:	4629      	mov	r1, r5
  4076a0:	4630      	mov	r0, r6
  4076a2:	4b34      	ldr	r3, [pc, #208]	; (407774 <update_style_cache_children+0xf8>)
  4076a4:	4798      	blx	r3
        if(list == NULL) break;
  4076a6:	4604      	mov	r4, r0
  4076a8:	2800      	cmp	r0, #0
  4076aa:	d051      	beq.n	407750 <update_style_cache_children+0xd4>
        bool ignore_cache_ori = list->ignore_cache;
  4076ac:	7943      	ldrb	r3, [r0, #5]
  4076ae:	f3c3 08c0 	ubfx	r8, r3, #3, #1
        list->ignore_cache = 1;
  4076b2:	f043 0308 	orr.w	r3, r3, #8
  4076b6:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  4076b8:	f248 020c 	movw	r2, #32780	; 0x800c
  4076bc:	4629      	mov	r1, r5
  4076be:	4630      	mov	r0, r6
  4076c0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 407788 <update_style_cache_children+0x10c>
  4076c4:	47c8      	blx	r9
        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
  4076c6:	28ff      	cmp	r0, #255	; 0xff
  4076c8:	bf14      	ite	ne
  4076ca:	2000      	movne	r0, #0
  4076cc:	2001      	moveq	r0, #1
  4076ce:	7963      	ldrb	r3, [r4, #5]
  4076d0:	f360 1345 	bfi	r3, r0, #5, #1
  4076d4:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  4076d6:	f248 0282 	movw	r2, #32898	; 0x8082
  4076da:	4629      	mov	r1, r5
  4076dc:	4630      	mov	r0, r6
  4076de:	4f26      	ldr	r7, [pc, #152]	; (407778 <update_style_cache_children+0xfc>)
  4076e0:	47b8      	blx	r7
  4076e2:	b2c0      	uxtb	r0, r0
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
  4076e4:	fab0 f080 	clz	r0, r0
  4076e8:	0940      	lsrs	r0, r0, #5
  4076ea:	79e3      	ldrb	r3, [r4, #7]
  4076ec:	f360 1386 	bfi	r3, r0, #6, #1
  4076f0:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  4076f2:	f248 028e 	movw	r2, #32910	; 0x808e
  4076f6:	4629      	mov	r1, r5
  4076f8:	4630      	mov	r0, r6
  4076fa:	4b20      	ldr	r3, [pc, #128]	; (40777c <update_style_cache_children+0x100>)
  4076fc:	4798      	blx	r3
  4076fe:	4682      	mov	sl, r0
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
  407700:	4b1f      	ldr	r3, [pc, #124]	; (407780 <update_style_cache_children+0x104>)
  407702:	4798      	blx	r3
  407704:	4582      	cmp	sl, r0
  407706:	bf14      	ite	ne
  407708:	2000      	movne	r0, #0
  40770a:	2001      	moveq	r0, #1
  40770c:	79e3      	ldrb	r3, [r4, #7]
  40770e:	f360 13c7 	bfi	r3, r0, #7, #1
  407712:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  407714:	f248 02ad 	movw	r2, #32941	; 0x80ad
  407718:	4629      	mov	r1, r5
  40771a:	4630      	mov	r0, r6
  40771c:	47c8      	blx	r9
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
  40771e:	fab0 f080 	clz	r0, r0
  407722:	0940      	lsrs	r0, r0, #5
  407724:	79e3      	ldrb	r3, [r4, #7]
  407726:	f360 1304 	bfi	r3, r0, #4, #1
        list->text_space_zero = 1;
  40772a:	b2db      	uxtb	r3, r3
  40772c:	f043 0320 	orr.w	r3, r3, #32
  407730:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  407732:	f248 0280 	movw	r2, #32896	; 0x8080
  407736:	4629      	mov	r1, r5
  407738:	4630      	mov	r0, r6
  40773a:	47b8      	blx	r7
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  40773c:	2800      	cmp	r0, #0
  40773e:	d1a2      	bne.n	407686 <update_style_cache_children+0xa>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  407740:	f248 0281 	movw	r2, #32897	; 0x8081
  407744:	4629      	mov	r1, r5
  407746:	4630      	mov	r0, r6
  407748:	47b8      	blx	r7
  40774a:	2800      	cmp	r0, #0
  40774c:	d09f      	beq.n	40768e <update_style_cache_children+0x12>
  40774e:	e79a      	b.n	407686 <update_style_cache_children+0xa>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  407750:	2100      	movs	r1, #0
  407752:	4630      	mov	r0, r6
  407754:	4b0b      	ldr	r3, [pc, #44]	; (407784 <update_style_cache_children+0x108>)
  407756:	4798      	blx	r3
  407758:	4604      	mov	r4, r0
    while(child) {
  40775a:	e007      	b.n	40776c <update_style_cache_children+0xf0>
        update_style_cache_children(child);
  40775c:	4620      	mov	r0, r4
  40775e:	f7ff ff8d 	bl	40767c <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
  407762:	4621      	mov	r1, r4
  407764:	4630      	mov	r0, r6
  407766:	4b07      	ldr	r3, [pc, #28]	; (407784 <update_style_cache_children+0x108>)
  407768:	4798      	blx	r3
  40776a:	4604      	mov	r4, r0
    while(child) {
  40776c:	2c00      	cmp	r4, #0
  40776e:	d1f5      	bne.n	40775c <update_style_cache_children+0xe0>
}
  407770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407774:	00405bb5 	.word	0x00405bb5
  407778:	004073ed 	.word	0x004073ed
  40777c:	004072e5 	.word	0x004072e5
  407780:	004192c9 	.word	0x004192c9
  407784:	00405a29 	.word	0x00405a29
  407788:	00406e61 	.word	0x00406e61

0040778c <invalidate_style_cache>:
{
  40778c:	b538      	push	{r3, r4, r5, lr}
  40778e:	4605      	mov	r5, r0
    if(style_prop_is_cacheble(prop) == false) return;
  407790:	4610      	mov	r0, r2
  407792:	4b19      	ldr	r3, [pc, #100]	; (4077f8 <invalidate_style_cache+0x6c>)
  407794:	4798      	blx	r3
  407796:	b170      	cbz	r0, 4077b6 <invalidate_style_cache+0x2a>
  407798:	2400      	movs	r4, #0
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  40779a:	2c3f      	cmp	r4, #63	; 0x3f
  40779c:	d80c      	bhi.n	4077b8 <invalidate_style_cache+0x2c>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  40779e:	4621      	mov	r1, r4
  4077a0:	4628      	mov	r0, r5
  4077a2:	4b16      	ldr	r3, [pc, #88]	; (4077fc <invalidate_style_cache+0x70>)
  4077a4:	4798      	blx	r3
        if(list == NULL) break;
  4077a6:	b138      	cbz	r0, 4077b8 <invalidate_style_cache+0x2c>
        list->valid_cache = 0;
  4077a8:	7942      	ldrb	r2, [r0, #5]
  4077aa:	f36f 0282 	bfc	r2, #2, #1
  4077ae:	7142      	strb	r2, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  4077b0:	3401      	adds	r4, #1
  4077b2:	b2e4      	uxtb	r4, r4
  4077b4:	e7f1      	b.n	40779a <invalidate_style_cache+0xe>
  4077b6:	bd38      	pop	{r3, r4, r5, pc}
  4077b8:	2440      	movs	r4, #64	; 0x40
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  4077ba:	2cff      	cmp	r4, #255	; 0xff
  4077bc:	d00b      	beq.n	4077d6 <invalidate_style_cache+0x4a>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  4077be:	4621      	mov	r1, r4
  4077c0:	4628      	mov	r0, r5
  4077c2:	4b0e      	ldr	r3, [pc, #56]	; (4077fc <invalidate_style_cache+0x70>)
  4077c4:	4798      	blx	r3
        if(list == NULL) break;
  4077c6:	b130      	cbz	r0, 4077d6 <invalidate_style_cache+0x4a>
        list->valid_cache = 0;
  4077c8:	7942      	ldrb	r2, [r0, #5]
  4077ca:	f36f 0282 	bfc	r2, #2, #1
  4077ce:	7142      	strb	r2, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  4077d0:	3401      	adds	r4, #1
  4077d2:	b2e4      	uxtb	r4, r4
  4077d4:	e7f1      	b.n	4077ba <invalidate_style_cache+0x2e>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  4077d6:	2100      	movs	r1, #0
  4077d8:	4628      	mov	r0, r5
  4077da:	4b09      	ldr	r3, [pc, #36]	; (407800 <invalidate_style_cache+0x74>)
  4077dc:	4798      	blx	r3
  4077de:	4604      	mov	r4, r0
    while(child) {
  4077e0:	e007      	b.n	4077f2 <invalidate_style_cache+0x66>
        update_style_cache_children(child);
  4077e2:	4620      	mov	r0, r4
  4077e4:	4b07      	ldr	r3, [pc, #28]	; (407804 <invalidate_style_cache+0x78>)
  4077e6:	4798      	blx	r3
        child = lv_obj_get_child(obj, child);
  4077e8:	4621      	mov	r1, r4
  4077ea:	4628      	mov	r0, r5
  4077ec:	4b04      	ldr	r3, [pc, #16]	; (407800 <invalidate_style_cache+0x74>)
  4077ee:	4798      	blx	r3
  4077f0:	4604      	mov	r4, r0
    while(child) {
  4077f2:	2c00      	cmp	r4, #0
  4077f4:	d1f5      	bne.n	4077e2 <invalidate_style_cache+0x56>
  4077f6:	bd38      	pop	{r3, r4, r5, pc}
  4077f8:	0040535d 	.word	0x0040535d
  4077fc:	00405bb5 	.word	0x00405bb5
  407800:	00405a29 	.word	0x00405a29
  407804:	0040767d 	.word	0x0040767d

00407808 <lv_obj_refresh_style>:
{
  407808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40780a:	4605      	mov	r5, r0
  40780c:	460f      	mov	r7, r1
  40780e:	4614      	mov	r4, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407810:	4b37      	ldr	r3, [pc, #220]	; (4078f0 <lv_obj_refresh_style+0xe8>)
  407812:	4798      	blx	r3
  407814:	b928      	cbnz	r0, 407822 <lv_obj_refresh_style+0x1a>
  407816:	462a      	mov	r2, r5
  407818:	2300      	movs	r3, #0
  40781a:	4836      	ldr	r0, [pc, #216]	; (4078f4 <lv_obj_refresh_style+0xec>)
  40781c:	4936      	ldr	r1, [pc, #216]	; (4078f8 <lv_obj_refresh_style+0xf0>)
  40781e:	4788      	blx	r1
  407820:	e7fe      	b.n	407820 <lv_obj_refresh_style+0x18>
  407822:	4606      	mov	r6, r0
    invalidate_style_cache(obj, part, prop);
  407824:	4622      	mov	r2, r4
  407826:	4639      	mov	r1, r7
  407828:	4628      	mov	r0, r5
  40782a:	4b34      	ldr	r3, [pc, #208]	; (4078fc <lv_obj_refresh_style+0xf4>)
  40782c:	4798      	blx	r3
    switch(prop) {
  40782e:	2c71      	cmp	r4, #113	; 0x71
  407830:	d83c      	bhi.n	4078ac <lv_obj_refresh_style+0xa4>
  407832:	2c70      	cmp	r4, #112	; 0x70
  407834:	d20c      	bcs.n	407850 <lv_obj_refresh_style+0x48>
  407836:	2c41      	cmp	r4, #65	; 0x41
  407838:	d82e      	bhi.n	407898 <lv_obj_refresh_style+0x90>
  40783a:	2c40      	cmp	r4, #64	; 0x40
  40783c:	d208      	bcs.n	407850 <lv_obj_refresh_style+0x48>
  40783e:	2c02      	cmp	r4, #2
  407840:	d305      	bcc.n	40784e <lv_obj_refresh_style+0x46>
  407842:	2c07      	cmp	r4, #7
  407844:	d904      	bls.n	407850 <lv_obj_refresh_style+0x48>
  407846:	f1a4 0310 	sub.w	r3, r4, #16
  40784a:	2b08      	cmp	r3, #8
  40784c:	d900      	bls.n	407850 <lv_obj_refresh_style+0x48>
            real_refr = false;
  40784e:	2600      	movs	r6, #0
    if(real_refr) {
  407850:	2e00      	cmp	r6, #0
  407852:	d048      	beq.n	4078e6 <lv_obj_refresh_style+0xde>
        lv_obj_invalidate(obj);
  407854:	4628      	mov	r0, r5
  407856:	4b2a      	ldr	r3, [pc, #168]	; (407900 <lv_obj_refresh_style+0xf8>)
  407858:	4798      	blx	r3
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
  40785a:	69eb      	ldr	r3, [r5, #28]
  40785c:	2200      	movs	r2, #0
  40785e:	2104      	movs	r1, #4
  407860:	4628      	mov	r0, r5
  407862:	4798      	blx	r3
        switch(prop) {
  407864:	2c15      	cmp	r4, #21
  407866:	d309      	bcc.n	40787c <lv_obj_refresh_style+0x74>
  407868:	2c18      	cmp	r4, #24
  40786a:	d901      	bls.n	407870 <lv_obj_refresh_style+0x68>
  40786c:	2cff      	cmp	r4, #255	; 0xff
  40786e:	d105      	bne.n	40787c <lv_obj_refresh_style+0x74>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
  407870:	6828      	ldr	r0, [r5, #0]
  407872:	b118      	cbz	r0, 40787c <lv_obj_refresh_style+0x74>
  407874:	69c3      	ldr	r3, [r0, #28]
  407876:	2200      	movs	r2, #0
  407878:	2101      	movs	r1, #1
  40787a:	4798      	blx	r3
        lv_obj_invalidate(obj);
  40787c:	4628      	mov	r0, r5
  40787e:	4b20      	ldr	r3, [pc, #128]	; (407900 <lv_obj_refresh_style+0xf8>)
  407880:	4798      	blx	r3
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
  407882:	0be3      	lsrs	r3, r4, #15
  407884:	2cff      	cmp	r4, #255	; 0xff
  407886:	bf14      	ite	ne
  407888:	461c      	movne	r4, r3
  40788a:	f043 0401 	orreq.w	r4, r3, #1
  40788e:	b36c      	cbz	r4, 4078ec <lv_obj_refresh_style+0xe4>
  407890:	4628      	mov	r0, r5
  407892:	4b1c      	ldr	r3, [pc, #112]	; (407904 <lv_obj_refresh_style+0xfc>)
  407894:	4798      	blx	r3
  407896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(prop) {
  407898:	2c53      	cmp	r4, #83	; 0x53
  40789a:	d804      	bhi.n	4078a6 <lv_obj_refresh_style+0x9e>
  40789c:	2c50      	cmp	r4, #80	; 0x50
  40789e:	d2d7      	bcs.n	407850 <lv_obj_refresh_style+0x48>
  4078a0:	2c4c      	cmp	r4, #76	; 0x4c
  4078a2:	d1d4      	bne.n	40784e <lv_obj_refresh_style+0x46>
  4078a4:	e7d4      	b.n	407850 <lv_obj_refresh_style+0x48>
  4078a6:	2c5c      	cmp	r4, #92	; 0x5c
  4078a8:	d1d1      	bne.n	40784e <lv_obj_refresh_style+0x46>
  4078aa:	e7d1      	b.n	407850 <lv_obj_refresh_style+0x48>
  4078ac:	2c7f      	cmp	r4, #127	; 0x7f
  4078ae:	d90c      	bls.n	4078ca <lv_obj_refresh_style+0xc2>
  4078b0:	f248 0381 	movw	r3, #32897	; 0x8081
  4078b4:	429c      	cmp	r4, r3
  4078b6:	d811      	bhi.n	4078dc <lv_obj_refresh_style+0xd4>
  4078b8:	f248 0380 	movw	r3, #32896	; 0x8080
  4078bc:	429c      	cmp	r4, r3
  4078be:	d2c7      	bcs.n	407850 <lv_obj_refresh_style+0x48>
  4078c0:	2c90      	cmp	r4, #144	; 0x90
  4078c2:	d0c5      	beq.n	407850 <lv_obj_refresh_style+0x48>
  4078c4:	2cff      	cmp	r4, #255	; 0xff
  4078c6:	d1c2      	bne.n	40784e <lv_obj_refresh_style+0x46>
  4078c8:	e7c2      	b.n	407850 <lv_obj_refresh_style+0x48>
  4078ca:	2c7e      	cmp	r4, #126	; 0x7e
  4078cc:	d2c0      	bcs.n	407850 <lv_obj_refresh_style+0x48>
  4078ce:	2c73      	cmp	r4, #115	; 0x73
  4078d0:	d3bd      	bcc.n	40784e <lv_obj_refresh_style+0x46>
  4078d2:	2c75      	cmp	r4, #117	; 0x75
  4078d4:	d9bc      	bls.n	407850 <lv_obj_refresh_style+0x48>
  4078d6:	2c7c      	cmp	r4, #124	; 0x7c
  4078d8:	d1b9      	bne.n	40784e <lv_obj_refresh_style+0x46>
  4078da:	e7b9      	b.n	407850 <lv_obj_refresh_style+0x48>
  4078dc:	f248 038e 	movw	r3, #32910	; 0x808e
  4078e0:	429c      	cmp	r4, r3
  4078e2:	d1b4      	bne.n	40784e <lv_obj_refresh_style+0x46>
  4078e4:	e7b4      	b.n	407850 <lv_obj_refresh_style+0x48>
        lv_obj_invalidate(obj);
  4078e6:	4628      	mov	r0, r5
  4078e8:	4b05      	ldr	r3, [pc, #20]	; (407900 <lv_obj_refresh_style+0xf8>)
  4078ea:	4798      	blx	r3
  4078ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4078ee:	bf00      	nop
  4078f0:	00416da9 	.word	0x00416da9
  4078f4:	0042e560 	.word	0x0042e560
  4078f8:	00416db5 	.word	0x00416db5
  4078fc:	0040778d 	.word	0x0040778d
  407900:	00405f01 	.word	0x00405f01
  407904:	00406685 	.word	0x00406685

00407908 <lv_obj_reset_style_list>:
{
  407908:	b538      	push	{r3, r4, r5, lr}
  40790a:	4604      	mov	r4, r0
  40790c:	460d      	mov	r5, r1
    lv_obj_clean_style_list(obj, part);
  40790e:	4b04      	ldr	r3, [pc, #16]	; (407920 <lv_obj_reset_style_list+0x18>)
  407910:	4798      	blx	r3
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  407912:	22ff      	movs	r2, #255	; 0xff
  407914:	4629      	mov	r1, r5
  407916:	4620      	mov	r0, r4
  407918:	4b02      	ldr	r3, [pc, #8]	; (407924 <lv_obj_reset_style_list+0x1c>)
  40791a:	4798      	blx	r3
  40791c:	bd38      	pop	{r3, r4, r5, pc}
  40791e:	bf00      	nop
  407920:	00405c7d 	.word	0x00405c7d
  407924:	00407809 	.word	0x00407809

00407928 <_lv_obj_set_style_local_int>:
{
  407928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40792a:	4605      	mov	r5, r0
  40792c:	460e      	mov	r6, r1
  40792e:	4614      	mov	r4, r2
  407930:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  407932:	4b09      	ldr	r3, [pc, #36]	; (407958 <_lv_obj_set_style_local_int+0x30>)
  407934:	4798      	blx	r3
    _lv_style_list_set_local_int(style_dsc, prop, value);
  407936:	463a      	mov	r2, r7
  407938:	4621      	mov	r1, r4
  40793a:	4b08      	ldr	r3, [pc, #32]	; (40795c <_lv_obj_set_style_local_int+0x34>)
  40793c:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  40793e:	2300      	movs	r3, #0
  407940:	4622      	mov	r2, r4
  407942:	4631      	mov	r1, r6
  407944:	4628      	mov	r0, r5
  407946:	4f06      	ldr	r7, [pc, #24]	; (407960 <_lv_obj_set_style_local_int+0x38>)
  407948:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  40794a:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  40794e:	4631      	mov	r1, r6
  407950:	4628      	mov	r0, r5
  407952:	4b04      	ldr	r3, [pc, #16]	; (407964 <_lv_obj_set_style_local_int+0x3c>)
  407954:	4798      	blx	r3
  407956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407958:	00405bb5 	.word	0x00405bb5
  40795c:	0040adad 	.word	0x0040adad
  407960:	00405be5 	.word	0x00405be5
  407964:	00407809 	.word	0x00407809

00407968 <_lv_obj_set_style_local_color>:
{
  407968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40796a:	4605      	mov	r5, r0
  40796c:	460e      	mov	r6, r1
  40796e:	4614      	mov	r4, r2
  407970:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  407972:	4b09      	ldr	r3, [pc, #36]	; (407998 <_lv_obj_set_style_local_color+0x30>)
  407974:	4798      	blx	r3
    _lv_style_list_set_local_color(style_dsc, prop, color);
  407976:	463a      	mov	r2, r7
  407978:	4621      	mov	r1, r4
  40797a:	4b08      	ldr	r3, [pc, #32]	; (40799c <_lv_obj_set_style_local_color+0x34>)
  40797c:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  40797e:	2300      	movs	r3, #0
  407980:	4622      	mov	r2, r4
  407982:	4631      	mov	r1, r6
  407984:	4628      	mov	r0, r5
  407986:	4f06      	ldr	r7, [pc, #24]	; (4079a0 <_lv_obj_set_style_local_color+0x38>)
  407988:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  40798a:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  40798e:	4631      	mov	r1, r6
  407990:	4628      	mov	r0, r5
  407992:	4b04      	ldr	r3, [pc, #16]	; (4079a4 <_lv_obj_set_style_local_color+0x3c>)
  407994:	4798      	blx	r3
  407996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407998:	00405bb5 	.word	0x00405bb5
  40799c:	0040adc9 	.word	0x0040adc9
  4079a0:	00405be5 	.word	0x00405be5
  4079a4:	00407809 	.word	0x00407809

004079a8 <_lv_obj_set_style_local_ptr>:
{
  4079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4079aa:	4605      	mov	r5, r0
  4079ac:	460e      	mov	r6, r1
  4079ae:	4614      	mov	r4, r2
  4079b0:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  4079b2:	4b09      	ldr	r3, [pc, #36]	; (4079d8 <_lv_obj_set_style_local_ptr+0x30>)
  4079b4:	4798      	blx	r3
    _lv_style_list_set_local_ptr(style_dsc, prop, value);
  4079b6:	463a      	mov	r2, r7
  4079b8:	4621      	mov	r1, r4
  4079ba:	4b08      	ldr	r3, [pc, #32]	; (4079dc <_lv_obj_set_style_local_ptr+0x34>)
  4079bc:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  4079be:	2300      	movs	r3, #0
  4079c0:	4622      	mov	r2, r4
  4079c2:	4631      	mov	r1, r6
  4079c4:	4628      	mov	r0, r5
  4079c6:	4f06      	ldr	r7, [pc, #24]	; (4079e0 <_lv_obj_set_style_local_ptr+0x38>)
  4079c8:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  4079ca:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  4079ce:	4631      	mov	r1, r6
  4079d0:	4628      	mov	r0, r5
  4079d2:	4b04      	ldr	r3, [pc, #16]	; (4079e4 <_lv_obj_set_style_local_ptr+0x3c>)
  4079d4:	4798      	blx	r3
  4079d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4079d8:	00405bb5 	.word	0x00405bb5
  4079dc:	0040ade5 	.word	0x0040ade5
  4079e0:	00405be5 	.word	0x00405be5
  4079e4:	00407809 	.word	0x00407809

004079e8 <report_style_mod_core>:
{
  4079e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4079ea:	4604      	mov	r4, r0
  4079ec:	460e      	mov	r6, r1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  4079ee:	2500      	movs	r5, #0
  4079f0:	e028      	b.n	407a44 <report_style_mod_core+0x5c>
 */
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
  4079f2:	1c59      	adds	r1, r3, #1
  4079f4:	b2c9      	uxtb	r1, r1
  4079f6:	e012      	b.n	407a1e <report_style_mod_core+0x36>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  4079f8:	2200      	movs	r2, #0
            if(_class == style || style == NULL) {
  4079fa:	2c00      	cmp	r4, #0
  4079fc:	bf18      	it	ne
  4079fe:	4294      	cmpne	r4, r2
  407a00:	d019      	beq.n	407a36 <report_style_mod_core+0x4e>
        for(ci = 0; ci < list->style_cnt; ci++) {
  407a02:	3301      	adds	r3, #1
  407a04:	b2db      	uxtb	r3, r3
  407a06:	793a      	ldrb	r2, [r7, #4]
  407a08:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  407a0c:	4293      	cmp	r3, r2
  407a0e:	da17      	bge.n	407a40 <report_style_mod_core+0x58>
    if(list->has_trans && list->skip_trans) id++;
  407a10:	88b9      	ldrh	r1, [r7, #4]
  407a12:	f401 71c0 	and.w	r1, r1, #384	; 0x180
  407a16:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
  407a1a:	d0ea      	beq.n	4079f2 <report_style_mod_core+0xa>
  407a1c:	4619      	mov	r1, r3
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  407a1e:	7938      	ldrb	r0, [r7, #4]
  407a20:	f010 0f3f 	tst.w	r0, #63	; 0x3f
  407a24:	d0e8      	beq.n	4079f8 <report_style_mod_core+0x10>
  407a26:	428a      	cmp	r2, r1
  407a28:	dd03      	ble.n	407a32 <report_style_mod_core+0x4a>
    return list->style_list[id];
  407a2a:	683a      	ldr	r2, [r7, #0]
  407a2c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  407a30:	e7e3      	b.n	4079fa <report_style_mod_core+0x12>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  407a32:	2200      	movs	r2, #0
  407a34:	e7e1      	b.n	4079fa <report_style_mod_core+0x12>
                lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  407a36:	22ff      	movs	r2, #255	; 0xff
  407a38:	4629      	mov	r1, r5
  407a3a:	4630      	mov	r0, r6
  407a3c:	4b0f      	ldr	r3, [pc, #60]	; (407a7c <report_style_mod_core+0x94>)
  407a3e:	4798      	blx	r3
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  407a40:	3501      	adds	r5, #1
  407a42:	b2ed      	uxtb	r5, r5
  407a44:	2d40      	cmp	r5, #64	; 0x40
  407a46:	d007      	beq.n	407a58 <report_style_mod_core+0x70>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  407a48:	4629      	mov	r1, r5
  407a4a:	4630      	mov	r0, r6
  407a4c:	4b0c      	ldr	r3, [pc, #48]	; (407a80 <report_style_mod_core+0x98>)
  407a4e:	4798      	blx	r3
        if(list == NULL) break;
  407a50:	4607      	mov	r7, r0
  407a52:	b108      	cbz	r0, 407a58 <report_style_mod_core+0x70>
  407a54:	2300      	movs	r3, #0
  407a56:	e7d6      	b.n	407a06 <report_style_mod_core+0x1e>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  407a58:	2100      	movs	r1, #0
  407a5a:	4630      	mov	r0, r6
  407a5c:	4b09      	ldr	r3, [pc, #36]	; (407a84 <report_style_mod_core+0x9c>)
  407a5e:	4798      	blx	r3
  407a60:	4605      	mov	r5, r0
    while(child) {
  407a62:	e008      	b.n	407a76 <report_style_mod_core+0x8e>
        report_style_mod_core(style, child);
  407a64:	4629      	mov	r1, r5
  407a66:	4620      	mov	r0, r4
  407a68:	f7ff ffbe 	bl	4079e8 <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
  407a6c:	4629      	mov	r1, r5
  407a6e:	4630      	mov	r0, r6
  407a70:	4b04      	ldr	r3, [pc, #16]	; (407a84 <report_style_mod_core+0x9c>)
  407a72:	4798      	blx	r3
  407a74:	4605      	mov	r5, r0
    while(child) {
  407a76:	2d00      	cmp	r5, #0
  407a78:	d1f4      	bne.n	407a64 <report_style_mod_core+0x7c>
}
  407a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a7c:	00407809 	.word	0x00407809
  407a80:	00405bb5 	.word	0x00405bb5
  407a84:	00405a29 	.word	0x00405a29

00407a88 <lv_obj_report_style_mod>:
{
  407a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407a8a:	4606      	mov	r6, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
  407a8c:	2000      	movs	r0, #0
  407a8e:	4b0e      	ldr	r3, [pc, #56]	; (407ac8 <lv_obj_report_style_mod+0x40>)
  407a90:	4798      	blx	r3
  407a92:	4607      	mov	r7, r0
    while(d) {
  407a94:	e00e      	b.n	407ab4 <lv_obj_report_style_mod+0x2c>
            report_style_mod_core(style, i);
  407a96:	4621      	mov	r1, r4
  407a98:	4630      	mov	r0, r6
  407a9a:	4b0c      	ldr	r3, [pc, #48]	; (407acc <lv_obj_report_style_mod+0x44>)
  407a9c:	4798      	blx	r3
        _LV_LL_READ(d->scr_ll, i) {
  407a9e:	4621      	mov	r1, r4
  407aa0:	4628      	mov	r0, r5
  407aa2:	4b0b      	ldr	r3, [pc, #44]	; (407ad0 <lv_obj_report_style_mod+0x48>)
  407aa4:	4798      	blx	r3
  407aa6:	4604      	mov	r4, r0
  407aa8:	2c00      	cmp	r4, #0
  407aaa:	d1f4      	bne.n	407a96 <lv_obj_report_style_mod+0xe>
        d = lv_disp_get_next(d);
  407aac:	4638      	mov	r0, r7
  407aae:	4b06      	ldr	r3, [pc, #24]	; (407ac8 <lv_obj_report_style_mod+0x40>)
  407ab0:	4798      	blx	r3
  407ab2:	4607      	mov	r7, r0
    while(d) {
  407ab4:	b137      	cbz	r7, 407ac4 <lv_obj_report_style_mod+0x3c>
        _LV_LL_READ(d->scr_ll, i) {
  407ab6:	f107 0538 	add.w	r5, r7, #56	; 0x38
  407aba:	4628      	mov	r0, r5
  407abc:	4b05      	ldr	r3, [pc, #20]	; (407ad4 <lv_obj_report_style_mod+0x4c>)
  407abe:	4798      	blx	r3
  407ac0:	4604      	mov	r4, r0
  407ac2:	e7f1      	b.n	407aa8 <lv_obj_report_style_mod+0x20>
}
  407ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407ac6:	bf00      	nop
  407ac8:	00415d01 	.word	0x00415d01
  407acc:	004079e9 	.word	0x004079e9
  407ad0:	004170cd 	.word	0x004170cd
  407ad4:	004170b9 	.word	0x004170b9

00407ad8 <trans_anim_cb>:
{
  407ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407adc:	4604      	mov	r4, r0
  407ade:	460d      	mov	r5, r1
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  407ae0:	7981      	ldrb	r1, [r0, #6]
  407ae2:	6800      	ldr	r0, [r0, #0]
  407ae4:	4b4b      	ldr	r3, [pc, #300]	; (407c14 <trans_anim_cb+0x13c>)
  407ae6:	4798      	blx	r3
    lv_style_t * style = _lv_style_list_get_transition_style(list);
  407ae8:	4b4b      	ldr	r3, [pc, #300]	; (407c18 <trans_anim_cb+0x140>)
  407aea:	4798      	blx	r3
    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
  407aec:	88a1      	ldrh	r1, [r4, #4]
  407aee:	f001 030f 	and.w	r3, r1, #15
  407af2:	2b08      	cmp	r3, #8
  407af4:	dc1c      	bgt.n	407b30 <trans_anim_cb+0x58>
        if(v == 0) x = tr->start_value._int;
  407af6:	b955      	cbnz	r5, 407b0e <trans_anim_cb+0x36>
  407af8:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
        _lv_style_set_int(style, tr->prop, x);
  407afc:	4b47      	ldr	r3, [pc, #284]	; (407c1c <trans_anim_cb+0x144>)
  407afe:	4798      	blx	r3
    lv_obj_refresh_style(tr->obj, tr->part, tr->prop);
  407b00:	88a2      	ldrh	r2, [r4, #4]
  407b02:	79a1      	ldrb	r1, [r4, #6]
  407b04:	6820      	ldr	r0, [r4, #0]
  407b06:	4b46      	ldr	r3, [pc, #280]	; (407c20 <trans_anim_cb+0x148>)
  407b08:	4798      	blx	r3
  407b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if(v == 255) x = tr->end_value._int;
  407b0e:	2dff      	cmp	r5, #255	; 0xff
  407b10:	d00b      	beq.n	407b2a <trans_anim_cb+0x52>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
  407b12:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
  407b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407b1a:	1a9b      	subs	r3, r3, r2
  407b1c:	fb03 f505 	mul.w	r5, r3, r5
  407b20:	122d      	asrs	r5, r5, #8
  407b22:	fa15 f282 	uxtah	r2, r5, r2
  407b26:	b212      	sxth	r2, r2
  407b28:	e7e8      	b.n	407afc <trans_anim_cb+0x24>
        else if(v == 255) x = tr->end_value._int;
  407b2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407b2e:	e7e5      	b.n	407afc <trans_anim_cb+0x24>
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  407b30:	2b0b      	cmp	r3, #11
  407b32:	dc50      	bgt.n	407bd6 <trans_anim_cb+0xfe>
        if(v <= 0) x = tr->start_value._color;
  407b34:	2d00      	cmp	r5, #0
  407b36:	dd05      	ble.n	407b44 <trans_anim_cb+0x6c>
        else if(v >= 255) x = tr->end_value._color;
  407b38:	2dfe      	cmp	r5, #254	; 0xfe
  407b3a:	dd05      	ble.n	407b48 <trans_anim_cb+0x70>
  407b3c:	89a2      	ldrh	r2, [r4, #12]
        _lv_style_set_color(style, tr->prop, x);
  407b3e:	4b39      	ldr	r3, [pc, #228]	; (407c24 <trans_anim_cb+0x14c>)
  407b40:	4798      	blx	r3
  407b42:	e7dd      	b.n	407b00 <trans_anim_cb+0x28>
        if(v <= 0) x = tr->start_value._color;
  407b44:	8922      	ldrh	r2, [r4, #8]
  407b46:	e7fa      	b.n	407b3e <trans_anim_cb+0x66>
        else x = lv_color_mix(tr->end_value._color, tr->start_value._color, v);
  407b48:	b2ed      	uxtb	r5, r5
  407b4a:	89a7      	ldrh	r7, [r4, #12]
  407b4c:	8926      	ldrh	r6, [r4, #8]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  407b4e:	f3c7 03c4 	ubfx	r3, r7, #3, #5
  407b52:	f3c6 02c4 	ubfx	r2, r6, #3, #5
  407b56:	f1c5 0eff 	rsb	lr, r5, #255	; 0xff
  407b5a:	fb0e f202 	mul.w	r2, lr, r2
  407b5e:	fb05 2303 	mla	r3, r5, r3, r2
  407b62:	3380      	adds	r3, #128	; 0x80
  407b64:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  407b68:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  407b6c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  407b70:	f04f 0200 	mov.w	r2, #0
  407b74:	f363 02c7 	bfi	r2, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  407b78:	f007 0c07 	and.w	ip, r7, #7
  407b7c:	f3c7 3342 	ubfx	r3, r7, #13, #3
  407b80:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  407b84:	f006 0807 	and.w	r8, r6, #7
  407b88:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  407b8c:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
  407b90:	fb0c fc0e 	mul.w	ip, ip, lr
  407b94:	fb03 c305 	mla	r3, r3, r5, ip
  407b98:	3380      	adds	r3, #128	; 0x80
  407b9a:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
  407b9e:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
  407ba2:	f3c3 6c82 	ubfx	ip, r3, #26, #3
  407ba6:	f36c 0202 	bfi	r2, ip, #0, #3
  407baa:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  407bae:	f363 324f 	bfi	r2, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  407bb2:	f3c7 2704 	ubfx	r7, r7, #8, #5
  407bb6:	f3c6 2604 	ubfx	r6, r6, #8, #5
  407bba:	fb06 fe0e 	mul.w	lr, r6, lr
  407bbe:	fb07 e505 	mla	r5, r7, r5, lr
  407bc2:	3580      	adds	r5, #128	; 0x80
  407bc4:	eb05 2305 	add.w	r3, r5, r5, lsl #8
  407bc8:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
  407bcc:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  407bd0:	f365 220c 	bfi	r2, r5, #8, #5
  407bd4:	e7b3      	b.n	407b3e <trans_anim_cb+0x66>
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  407bd6:	2b0d      	cmp	r3, #13
  407bd8:	dc13      	bgt.n	407c02 <trans_anim_cb+0x12a>
        if(v <= 0) x = tr->start_value._opa;
  407bda:	2d00      	cmp	r5, #0
  407bdc:	dd05      	ble.n	407bea <trans_anim_cb+0x112>
        else if(v >= 255) x = tr->end_value._opa;
  407bde:	2dfe      	cmp	r5, #254	; 0xfe
  407be0:	dd05      	ble.n	407bee <trans_anim_cb+0x116>
  407be2:	7b22      	ldrb	r2, [r4, #12]
        _lv_style_set_opa(style, tr->prop, x);
  407be4:	4b10      	ldr	r3, [pc, #64]	; (407c28 <trans_anim_cb+0x150>)
  407be6:	4798      	blx	r3
  407be8:	e78a      	b.n	407b00 <trans_anim_cb+0x28>
        if(v <= 0) x = tr->start_value._opa;
  407bea:	7a22      	ldrb	r2, [r4, #8]
  407bec:	e7fa      	b.n	407be4 <trans_anim_cb+0x10c>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
  407bee:	7a22      	ldrb	r2, [r4, #8]
  407bf0:	7b23      	ldrb	r3, [r4, #12]
  407bf2:	1a9b      	subs	r3, r3, r2
  407bf4:	fb03 f505 	mul.w	r5, r3, r5
  407bf8:	f3c5 2507 	ubfx	r5, r5, #8, #8
  407bfc:	442a      	add	r2, r5
  407bfe:	b2d2      	uxtb	r2, r2
  407c00:	e7f0      	b.n	407be4 <trans_anim_cb+0x10c>
        if(v < 128) x = tr->start_value._ptr;
  407c02:	2d7f      	cmp	r5, #127	; 0x7f
  407c04:	dc03      	bgt.n	407c0e <trans_anim_cb+0x136>
  407c06:	68a2      	ldr	r2, [r4, #8]
        _lv_style_set_ptr(style, tr->prop, x);
  407c08:	4b08      	ldr	r3, [pc, #32]	; (407c2c <trans_anim_cb+0x154>)
  407c0a:	4798      	blx	r3
  407c0c:	e778      	b.n	407b00 <trans_anim_cb+0x28>
        else x = tr->end_value._ptr;
  407c0e:	68e2      	ldr	r2, [r4, #12]
  407c10:	e7fa      	b.n	407c08 <trans_anim_cb+0x130>
  407c12:	bf00      	nop
  407c14:	00405bb5 	.word	0x00405bb5
  407c18:	0040ab95 	.word	0x0040ab95
  407c1c:	0040a121 	.word	0x0040a121
  407c20:	00407809 	.word	0x00407809
  407c24:	0040a2b1 	.word	0x0040a2b1
  407c28:	0040a441 	.word	0x0040a441
  407c2c:	0040a5d1 	.word	0x0040a5d1

00407c30 <trans_anim_start_cb>:
{
  407c30:	b570      	push	{r4, r5, r6, lr}
    lv_style_trans_t * tr = a->var;
  407c32:	6804      	ldr	r4, [r0, #0]
    lv_style_property_t prop_tmp = tr->prop;
  407c34:	88a5      	ldrh	r5, [r4, #4]
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
  407c36:	f005 030f 	and.w	r3, r5, #15
  407c3a:	2b08      	cmp	r3, #8
  407c3c:	dd13      	ble.n	407c66 <trans_anim_start_cb+0x36>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  407c3e:	2b0b      	cmp	r3, #11
  407c40:	dd18      	ble.n	407c74 <trans_anim_start_cb+0x44>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  407c42:	2b0d      	cmp	r3, #13
  407c44:	dd1d      	ble.n	407c82 <trans_anim_start_cb+0x52>
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
  407c46:	462a      	mov	r2, r5
  407c48:	79a1      	ldrb	r1, [r4, #6]
  407c4a:	6820      	ldr	r0, [r4, #0]
  407c4c:	4b10      	ldr	r3, [pc, #64]	; (407c90 <trans_anim_start_cb+0x60>)
  407c4e:	4798      	blx	r3
  407c50:	60a0      	str	r0, [r4, #8]
    tr->prop = 0;
  407c52:	2300      	movs	r3, #0
  407c54:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, tr->part, prop_tmp, tr);
  407c56:	4623      	mov	r3, r4
  407c58:	462a      	mov	r2, r5
  407c5a:	79a1      	ldrb	r1, [r4, #6]
  407c5c:	6820      	ldr	r0, [r4, #0]
  407c5e:	4e0d      	ldr	r6, [pc, #52]	; (407c94 <trans_anim_start_cb+0x64>)
  407c60:	47b0      	blx	r6
    tr->prop = prop_tmp;
  407c62:	80a5      	strh	r5, [r4, #4]
  407c64:	bd70      	pop	{r4, r5, r6, pc}
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
  407c66:	462a      	mov	r2, r5
  407c68:	79a1      	ldrb	r1, [r4, #6]
  407c6a:	6820      	ldr	r0, [r4, #0]
  407c6c:	4b0a      	ldr	r3, [pc, #40]	; (407c98 <trans_anim_start_cb+0x68>)
  407c6e:	4798      	blx	r3
  407c70:	8120      	strh	r0, [r4, #8]
  407c72:	e7ee      	b.n	407c52 <trans_anim_start_cb+0x22>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
  407c74:	462a      	mov	r2, r5
  407c76:	79a1      	ldrb	r1, [r4, #6]
  407c78:	6820      	ldr	r0, [r4, #0]
  407c7a:	4b08      	ldr	r3, [pc, #32]	; (407c9c <trans_anim_start_cb+0x6c>)
  407c7c:	4798      	blx	r3
  407c7e:	8120      	strh	r0, [r4, #8]
  407c80:	e7e7      	b.n	407c52 <trans_anim_start_cb+0x22>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
  407c82:	462a      	mov	r2, r5
  407c84:	79a1      	ldrb	r1, [r4, #6]
  407c86:	6820      	ldr	r0, [r4, #0]
  407c88:	4b05      	ldr	r3, [pc, #20]	; (407ca0 <trans_anim_start_cb+0x70>)
  407c8a:	4798      	blx	r3
  407c8c:	7220      	strb	r0, [r4, #8]
  407c8e:	e7e0      	b.n	407c52 <trans_anim_start_cb+0x22>
  407c90:	004072e5 	.word	0x004072e5
  407c94:	00405be5 	.word	0x00405be5
  407c98:	004073ed 	.word	0x004073ed
  407c9c:	00406dd9 	.word	0x00406dd9
  407ca0:	00406e61 	.word	0x00406e61

00407ca4 <trans_create>:
{
  407ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407ca8:	b085      	sub	sp, #20
  407caa:	4604      	mov	r4, r0
  407cac:	460d      	mov	r5, r1
  407cae:	4617      	mov	r7, r2
  407cb0:	4699      	mov	r9, r3
  407cb2:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  407cb6:	4611      	mov	r1, r2
  407cb8:	4bab      	ldr	r3, [pc, #684]	; (407f68 <trans_create+0x2c4>)
  407cba:	4798      	blx	r3
  407cbc:	4606      	mov	r6, r0
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
  407cbe:	4bab      	ldr	r3, [pc, #684]	; (407f6c <trans_create+0x2c8>)
  407cc0:	4798      	blx	r3
  407cc2:	9000      	str	r0, [sp, #0]
    bool cache_ori = style_list->ignore_cache;
  407cc4:	f896 a005 	ldrb.w	sl, [r6, #5]
  407cc8:	f3ca 0ac0 	ubfx	sl, sl, #3, #1
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
  407ccc:	f005 030f 	and.w	r3, r5, #15
  407cd0:	2b08      	cmp	r3, #8
  407cd2:	dd41      	ble.n	407d58 <trans_create+0xb4>
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  407cd4:	2b0b      	cmp	r3, #11
  407cd6:	f340 80b2 	ble.w	407e3e <trans_create+0x19a>
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  407cda:	2b0d      	cmp	r3, #13
  407cdc:	f300 80fb 	bgt.w	407ed6 <trans_create+0x232>
        style_list->skip_trans = 1;
  407ce0:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407ce2:	f043 0309 	orr.w	r3, r3, #9
  407ce6:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  407ce8:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
  407cec:	462a      	mov	r2, r5
  407cee:	4639      	mov	r1, r7
  407cf0:	4620      	mov	r0, r4
  407cf2:	f8df b27c 	ldr.w	fp, [pc, #636]	; 407f70 <trans_create+0x2cc>
  407cf6:	47d8      	blx	fp
  407cf8:	9001      	str	r0, [sp, #4]
        obj->state = new_state;
  407cfa:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
  407cfe:	462a      	mov	r2, r5
  407d00:	4639      	mov	r1, r7
  407d02:	4620      	mov	r0, r4
  407d04:	47d8      	blx	fp
  407d06:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  407d08:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  407d0a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407d0e:	f36a 03c3 	bfi	r3, sl, #3, #1
  407d12:	7173      	strb	r3, [r6, #5]
        if(o1 == o2) return NULL;
  407d14:	9b01      	ldr	r3, [sp, #4]
  407d16:	4283      	cmp	r3, r0
  407d18:	f000 8123 	beq.w	407f62 <trans_create+0x2be>
        obj->state = prev_state;
  407d1c:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        o1 = _lv_obj_get_style_opa(obj, part, prop);
  407d20:	462a      	mov	r2, r5
  407d22:	4639      	mov	r1, r7
  407d24:	4620      	mov	r0, r4
  407d26:	4b92      	ldr	r3, [pc, #584]	; (407f70 <trans_create+0x2cc>)
  407d28:	4798      	blx	r3
  407d2a:	4606      	mov	r6, r0
        obj->state = new_state;
  407d2c:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
  407d30:	4602      	mov	r2, r0
  407d32:	4629      	mov	r1, r5
  407d34:	9800      	ldr	r0, [sp, #0]
  407d36:	4b8f      	ldr	r3, [pc, #572]	; (407f74 <trans_create+0x2d0>)
  407d38:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  407d3a:	488f      	ldr	r0, [pc, #572]	; (407f78 <trans_create+0x2d4>)
  407d3c:	4b8f      	ldr	r3, [pc, #572]	; (407f7c <trans_create+0x2d8>)
  407d3e:	4798      	blx	r3
  407d40:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  407d42:	4b8f      	ldr	r3, [pc, #572]	; (407f80 <trans_create+0x2dc>)
  407d44:	4798      	blx	r3
  407d46:	2800      	cmp	r0, #0
  407d48:	f000 80bf 	beq.w	407eca <trans_create+0x226>
        if(tr == NULL) return NULL;
  407d4c:	2c00      	cmp	r4, #0
  407d4e:	d03d      	beq.n	407dcc <trans_create+0x128>
        tr->start_value._opa = o1;
  407d50:	7226      	strb	r6, [r4, #8]
        tr->end_value._opa = o2;
  407d52:	f884 b00c 	strb.w	fp, [r4, #12]
  407d56:	e039      	b.n	407dcc <trans_create+0x128>
        style_list->skip_trans = 1;
  407d58:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407d5a:	f043 0309 	orr.w	r3, r3, #9
  407d5e:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  407d60:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
  407d64:	462a      	mov	r2, r5
  407d66:	4639      	mov	r1, r7
  407d68:	4620      	mov	r0, r4
  407d6a:	f8df b218 	ldr.w	fp, [pc, #536]	; 407f84 <trans_create+0x2e0>
  407d6e:	47d8      	blx	fp
  407d70:	9001      	str	r0, [sp, #4]
        obj->state = new_state;
  407d72:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
  407d76:	462a      	mov	r2, r5
  407d78:	4639      	mov	r1, r7
  407d7a:	4620      	mov	r0, r4
  407d7c:	47d8      	blx	fp
  407d7e:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  407d80:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  407d82:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407d86:	f36a 03c3 	bfi	r3, sl, #3, #1
  407d8a:	7173      	strb	r3, [r6, #5]
        if(int1 == int2)  return NULL;
  407d8c:	9b01      	ldr	r3, [sp, #4]
  407d8e:	4283      	cmp	r3, r0
  407d90:	f000 80e5 	beq.w	407f5e <trans_create+0x2ba>
        obj->state = prev_state;
  407d94:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        int1 = _lv_obj_get_style_int(obj, part, prop);
  407d98:	462a      	mov	r2, r5
  407d9a:	4639      	mov	r1, r7
  407d9c:	4620      	mov	r0, r4
  407d9e:	4b79      	ldr	r3, [pc, #484]	; (407f84 <trans_create+0x2e0>)
  407da0:	4798      	blx	r3
  407da2:	4606      	mov	r6, r0
        obj->state = new_state;
  407da4:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
  407da8:	4602      	mov	r2, r0
  407daa:	4629      	mov	r1, r5
  407dac:	9800      	ldr	r0, [sp, #0]
  407dae:	4b76      	ldr	r3, [pc, #472]	; (407f88 <trans_create+0x2e4>)
  407db0:	4798      	blx	r3
        if(prop == LV_STYLE_RADIUS) {
  407db2:	2d01      	cmp	r5, #1
  407db4:	d00e      	beq.n	407dd4 <trans_create+0x130>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  407db6:	4870      	ldr	r0, [pc, #448]	; (407f78 <trans_create+0x2d4>)
  407db8:	4b70      	ldr	r3, [pc, #448]	; (407f7c <trans_create+0x2d8>)
  407dba:	4798      	blx	r3
  407dbc:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  407dbe:	4b70      	ldr	r3, [pc, #448]	; (407f80 <trans_create+0x2dc>)
  407dc0:	4798      	blx	r3
  407dc2:	b3b0      	cbz	r0, 407e32 <trans_create+0x18e>
        if(tr == NULL) return NULL;
  407dc4:	b114      	cbz	r4, 407dcc <trans_create+0x128>
        tr->start_value._int = int1;
  407dc6:	8126      	strh	r6, [r4, #8]
        tr->end_value._int = int2;
  407dc8:	f8a4 b00c 	strh.w	fp, [r4, #12]
}
  407dcc:	4620      	mov	r0, r4
  407dce:	b005      	add	sp, #20
  407dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
  407dd4:	f647 73ff 	movw	r3, #32767	; 0x7fff
  407dd8:	459b      	cmp	fp, r3
  407dda:	bf18      	it	ne
  407ddc:	429e      	cmpne	r6, r3
  407dde:	d1ea      	bne.n	407db6 <trans_create+0x112>
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
  407de0:	4620      	mov	r0, r4
  407de2:	4b6a      	ldr	r3, [pc, #424]	; (407f8c <trans_create+0x2e8>)
  407de4:	4798      	blx	r3
  407de6:	4605      	mov	r5, r0
  407de8:	2800      	cmp	r0, #0
  407dea:	da00      	bge.n	407dee <trans_create+0x14a>
  407dec:	1c45      	adds	r5, r0, #1
  407dee:	f345 054f 	sbfx	r5, r5, #1, #16
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
  407df2:	4620      	mov	r0, r4
  407df4:	4b65      	ldr	r3, [pc, #404]	; (407f8c <trans_create+0x2e8>)
  407df6:	4798      	blx	r3
  407df8:	4603      	mov	r3, r0
  407dfa:	2800      	cmp	r0, #0
  407dfc:	da00      	bge.n	407e00 <trans_create+0x15c>
  407dfe:	1c43      	adds	r3, r0, #1
  407e00:	f343 034f 	sbfx	r3, r3, #1, #16
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
  407e04:	f647 72ff 	movw	r2, #32767	; 0x7fff
  407e08:	4296      	cmp	r6, r2
  407e0a:	d105      	bne.n	407e18 <trans_create+0x174>
  407e0c:	1c5e      	adds	r6, r3, #1
  407e0e:	1c6a      	adds	r2, r5, #1
  407e10:	4296      	cmp	r6, r2
  407e12:	bfa8      	it	ge
  407e14:	4616      	movge	r6, r2
  407e16:	b236      	sxth	r6, r6
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
  407e18:	f647 72ff 	movw	r2, #32767	; 0x7fff
  407e1c:	4593      	cmp	fp, r2
  407e1e:	d1ca      	bne.n	407db6 <trans_create+0x112>
  407e20:	f103 0b01 	add.w	fp, r3, #1
  407e24:	3501      	adds	r5, #1
  407e26:	45ab      	cmp	fp, r5
  407e28:	bfa8      	it	ge
  407e2a:	46ab      	movge	fp, r5
  407e2c:	fa0f fb8b 	sxth.w	fp, fp
  407e30:	e7c1      	b.n	407db6 <trans_create+0x112>
        LV_ASSERT_MEM(tr);
  407e32:	4622      	mov	r2, r4
  407e34:	2300      	movs	r3, #0
  407e36:	4856      	ldr	r0, [pc, #344]	; (407f90 <trans_create+0x2ec>)
  407e38:	4956      	ldr	r1, [pc, #344]	; (407f94 <trans_create+0x2f0>)
  407e3a:	4788      	blx	r1
  407e3c:	e7fe      	b.n	407e3c <trans_create+0x198>
        style_list->skip_trans = 1;
  407e3e:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407e40:	f043 0309 	orr.w	r3, r3, #9
  407e44:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  407e46:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
  407e4a:	462a      	mov	r2, r5
  407e4c:	4639      	mov	r1, r7
  407e4e:	4620      	mov	r0, r4
  407e50:	f8df b144 	ldr.w	fp, [pc, #324]	; 407f98 <trans_create+0x2f4>
  407e54:	47d8      	blx	fp
  407e56:	f8ad 0004 	strh.w	r0, [sp, #4]
        obj->state = new_state;
  407e5a:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
  407e5e:	462a      	mov	r2, r5
  407e60:	4639      	mov	r1, r7
  407e62:	4620      	mov	r0, r4
  407e64:	47d8      	blx	fp
  407e66:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  407e68:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  407e6a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407e6e:	f36a 03c3 	bfi	r3, sl, #3, #1
  407e72:	7173      	strb	r3, [r6, #5]
        if(c1.full == c2.full) return NULL;
  407e74:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  407e78:	b283      	uxth	r3, r0
  407e7a:	429a      	cmp	r2, r3
  407e7c:	d023      	beq.n	407ec6 <trans_create+0x222>
        obj->state = prev_state;
  407e7e:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        c1 = _lv_obj_get_style_color(obj, part, prop);
  407e82:	462a      	mov	r2, r5
  407e84:	4639      	mov	r1, r7
  407e86:	4620      	mov	r0, r4
  407e88:	4b43      	ldr	r3, [pc, #268]	; (407f98 <trans_create+0x2f4>)
  407e8a:	4798      	blx	r3
  407e8c:	4602      	mov	r2, r0
  407e8e:	f8ad 0004 	strh.w	r0, [sp, #4]
        obj->state = new_state;
  407e92:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
  407e96:	4629      	mov	r1, r5
  407e98:	9800      	ldr	r0, [sp, #0]
  407e9a:	4b40      	ldr	r3, [pc, #256]	; (407f9c <trans_create+0x2f8>)
  407e9c:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  407e9e:	4836      	ldr	r0, [pc, #216]	; (407f78 <trans_create+0x2d4>)
  407ea0:	4b36      	ldr	r3, [pc, #216]	; (407f7c <trans_create+0x2d8>)
  407ea2:	4798      	blx	r3
  407ea4:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  407ea6:	4b36      	ldr	r3, [pc, #216]	; (407f80 <trans_create+0x2dc>)
  407ea8:	4798      	blx	r3
  407eaa:	b928      	cbnz	r0, 407eb8 <trans_create+0x214>
  407eac:	4622      	mov	r2, r4
  407eae:	2300      	movs	r3, #0
  407eb0:	4837      	ldr	r0, [pc, #220]	; (407f90 <trans_create+0x2ec>)
  407eb2:	4938      	ldr	r1, [pc, #224]	; (407f94 <trans_create+0x2f0>)
  407eb4:	4788      	blx	r1
  407eb6:	e7fe      	b.n	407eb6 <trans_create+0x212>
        if(tr == NULL) return NULL;
  407eb8:	b12c      	cbz	r4, 407ec6 <trans_create+0x222>
        tr->start_value._color = c1;
  407eba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  407ebe:	8123      	strh	r3, [r4, #8]
        tr->end_value._color = c2;
  407ec0:	f8a4 b00c 	strh.w	fp, [r4, #12]
  407ec4:	e782      	b.n	407dcc <trans_create+0x128>
        if(c1.full == c2.full) return NULL;
  407ec6:	2400      	movs	r4, #0
  407ec8:	e780      	b.n	407dcc <trans_create+0x128>
        LV_ASSERT_MEM(tr);
  407eca:	4622      	mov	r2, r4
  407ecc:	2300      	movs	r3, #0
  407ece:	4830      	ldr	r0, [pc, #192]	; (407f90 <trans_create+0x2ec>)
  407ed0:	4930      	ldr	r1, [pc, #192]	; (407f94 <trans_create+0x2f0>)
  407ed2:	4788      	blx	r1
  407ed4:	e7fe      	b.n	407ed4 <trans_create+0x230>
        obj->state = prev_state;
  407ed6:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        style_list->skip_trans = 1;
  407eda:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407edc:	f043 0309 	orr.w	r3, r3, #9
  407ee0:	7173      	strb	r3, [r6, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
  407ee2:	462a      	mov	r2, r5
  407ee4:	4639      	mov	r1, r7
  407ee6:	4620      	mov	r0, r4
  407ee8:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 407fa8 <trans_create+0x304>
  407eec:	47d8      	blx	fp
  407eee:	9002      	str	r0, [sp, #8]
        obj->state = new_state;
  407ef0:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
  407ef4:	462a      	mov	r2, r5
  407ef6:	4639      	mov	r1, r7
  407ef8:	4620      	mov	r0, r4
  407efa:	47d8      	blx	fp
  407efc:	a904      	add	r1, sp, #16
  407efe:	f841 0d04 	str.w	r0, [r1, #-4]!
        style_list->skip_trans = 0;
  407f02:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  407f04:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407f08:	f36a 03c3 	bfi	r3, sl, #3, #1
  407f0c:	7173      	strb	r3, [r6, #5]
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
  407f0e:	2204      	movs	r2, #4
  407f10:	a802      	add	r0, sp, #8
  407f12:	4b23      	ldr	r3, [pc, #140]	; (407fa0 <trans_create+0x2fc>)
  407f14:	4798      	blx	r3
  407f16:	b300      	cbz	r0, 407f5a <trans_create+0x2b6>
        obj->state = prev_state;
  407f18:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
  407f1c:	462a      	mov	r2, r5
  407f1e:	4639      	mov	r1, r7
  407f20:	4620      	mov	r0, r4
  407f22:	47d8      	blx	fp
  407f24:	4602      	mov	r2, r0
  407f26:	9002      	str	r0, [sp, #8]
        obj->state = new_state;
  407f28:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
  407f2c:	4629      	mov	r1, r5
  407f2e:	9800      	ldr	r0, [sp, #0]
  407f30:	4b1c      	ldr	r3, [pc, #112]	; (407fa4 <trans_create+0x300>)
  407f32:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  407f34:	4810      	ldr	r0, [pc, #64]	; (407f78 <trans_create+0x2d4>)
  407f36:	4b11      	ldr	r3, [pc, #68]	; (407f7c <trans_create+0x2d8>)
  407f38:	4798      	blx	r3
  407f3a:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  407f3c:	4b10      	ldr	r3, [pc, #64]	; (407f80 <trans_create+0x2dc>)
  407f3e:	4798      	blx	r3
  407f40:	b128      	cbz	r0, 407f4e <trans_create+0x2aa>
        if(tr == NULL) return NULL;
  407f42:	b154      	cbz	r4, 407f5a <trans_create+0x2b6>
        tr->start_value._ptr = p1;
  407f44:	9b02      	ldr	r3, [sp, #8]
  407f46:	60a3      	str	r3, [r4, #8]
        tr->end_value._ptr = p2;
  407f48:	9b03      	ldr	r3, [sp, #12]
  407f4a:	60e3      	str	r3, [r4, #12]
  407f4c:	e73e      	b.n	407dcc <trans_create+0x128>
        LV_ASSERT_MEM(tr);
  407f4e:	4622      	mov	r2, r4
  407f50:	2300      	movs	r3, #0
  407f52:	480f      	ldr	r0, [pc, #60]	; (407f90 <trans_create+0x2ec>)
  407f54:	490f      	ldr	r1, [pc, #60]	; (407f94 <trans_create+0x2f0>)
  407f56:	4788      	blx	r1
  407f58:	e7fe      	b.n	407f58 <trans_create+0x2b4>
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
  407f5a:	2400      	movs	r4, #0
  407f5c:	e736      	b.n	407dcc <trans_create+0x128>
        if(int1 == int2)  return NULL;
  407f5e:	2400      	movs	r4, #0
  407f60:	e734      	b.n	407dcc <trans_create+0x128>
        if(o1 == o2) return NULL;
  407f62:	2400      	movs	r4, #0
  407f64:	e732      	b.n	407dcc <trans_create+0x128>
  407f66:	bf00      	nop
  407f68:	00405bb5 	.word	0x00405bb5
  407f6c:	0040ab95 	.word	0x0040ab95
  407f70:	00406e61 	.word	0x00406e61
  407f74:	0040a441 	.word	0x0040a441
  407f78:	2043a308 	.word	0x2043a308
  407f7c:	00417021 	.word	0x00417021
  407f80:	00416da9 	.word	0x00416da9
  407f84:	004073ed 	.word	0x004073ed
  407f88:	0040a121 	.word	0x0040a121
  407f8c:	00405b29 	.word	0x00405b29
  407f90:	0042e54c 	.word	0x0042e54c
  407f94:	00416db5 	.word	0x00416db5
  407f98:	00406dd9 	.word	0x00406dd9
  407f9c:	0040a2b1 	.word	0x0040a2b1
  407fa0:	004285a1 	.word	0x004285a1
  407fa4:	0040a5d1 	.word	0x0040a5d1
  407fa8:	004072e5 	.word	0x004072e5

00407fac <lv_obj_get_signal_cb>:
{
  407fac:	b510      	push	{r4, lr}
  407fae:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407fb0:	4b05      	ldr	r3, [pc, #20]	; (407fc8 <lv_obj_get_signal_cb+0x1c>)
  407fb2:	4798      	blx	r3
  407fb4:	b108      	cbz	r0, 407fba <lv_obj_get_signal_cb+0xe>
}
  407fb6:	69e0      	ldr	r0, [r4, #28]
  407fb8:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407fba:	4622      	mov	r2, r4
  407fbc:	2300      	movs	r3, #0
  407fbe:	4803      	ldr	r0, [pc, #12]	; (407fcc <lv_obj_get_signal_cb+0x20>)
  407fc0:	4903      	ldr	r1, [pc, #12]	; (407fd0 <lv_obj_get_signal_cb+0x24>)
  407fc2:	4788      	blx	r1
  407fc4:	e7fe      	b.n	407fc4 <lv_obj_get_signal_cb+0x18>
  407fc6:	bf00      	nop
  407fc8:	00416da9 	.word	0x00416da9
  407fcc:	0042e560 	.word	0x0042e560
  407fd0:	00416db5 	.word	0x00416db5

00407fd4 <lv_obj_get_design_cb>:
{
  407fd4:	b510      	push	{r4, lr}
  407fd6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407fd8:	4b05      	ldr	r3, [pc, #20]	; (407ff0 <lv_obj_get_design_cb+0x1c>)
  407fda:	4798      	blx	r3
  407fdc:	b108      	cbz	r0, 407fe2 <lv_obj_get_design_cb+0xe>
}
  407fde:	6a20      	ldr	r0, [r4, #32]
  407fe0:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407fe2:	4622      	mov	r2, r4
  407fe4:	2300      	movs	r3, #0
  407fe6:	4803      	ldr	r0, [pc, #12]	; (407ff4 <lv_obj_get_design_cb+0x20>)
  407fe8:	4903      	ldr	r1, [pc, #12]	; (407ff8 <lv_obj_get_design_cb+0x24>)
  407fea:	4788      	blx	r1
  407fec:	e7fe      	b.n	407fec <lv_obj_get_design_cb+0x18>
  407fee:	bf00      	nop
  407ff0:	00416da9 	.word	0x00416da9
  407ff4:	0042e560 	.word	0x0042e560
  407ff8:	00416db5 	.word	0x00416db5

00407ffc <lv_obj_get_ext_attr>:
{
  407ffc:	b510      	push	{r4, lr}
  407ffe:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408000:	4b05      	ldr	r3, [pc, #20]	; (408018 <lv_obj_get_ext_attr+0x1c>)
  408002:	4798      	blx	r3
  408004:	b108      	cbz	r0, 40800a <lv_obj_get_ext_attr+0xe>
}
  408006:	6a60      	ldr	r0, [r4, #36]	; 0x24
  408008:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40800a:	4622      	mov	r2, r4
  40800c:	2300      	movs	r3, #0
  40800e:	4803      	ldr	r0, [pc, #12]	; (40801c <lv_obj_get_ext_attr+0x20>)
  408010:	4903      	ldr	r1, [pc, #12]	; (408020 <lv_obj_get_ext_attr+0x24>)
  408012:	4788      	blx	r1
  408014:	e7fe      	b.n	408014 <lv_obj_get_ext_attr+0x18>
  408016:	bf00      	nop
  408018:	00416da9 	.word	0x00416da9
  40801c:	0042e560 	.word	0x0042e560
  408020:	00416db5 	.word	0x00416db5

00408024 <lv_obj_get_group>:
{
  408024:	b510      	push	{r4, lr}
  408026:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408028:	4b05      	ldr	r3, [pc, #20]	; (408040 <lv_obj_get_group+0x1c>)
  40802a:	4798      	blx	r3
  40802c:	b108      	cbz	r0, 408032 <lv_obj_get_group+0xe>
}
  40802e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  408030:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408032:	4622      	mov	r2, r4
  408034:	2300      	movs	r3, #0
  408036:	4803      	ldr	r0, [pc, #12]	; (408044 <lv_obj_get_group+0x20>)
  408038:	4903      	ldr	r1, [pc, #12]	; (408048 <lv_obj_get_group+0x24>)
  40803a:	4788      	blx	r1
  40803c:	e7fe      	b.n	40803c <lv_obj_get_group+0x18>
  40803e:	bf00      	nop
  408040:	00416da9 	.word	0x00416da9
  408044:	0042e560 	.word	0x0042e560
  408048:	00416db5 	.word	0x00416db5

0040804c <obj_del_core>:
{
  40804c:	b570      	push	{r4, r5, r6, lr}
  40804e:	4605      	mov	r5, r0
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
  408050:	2200      	movs	r2, #0
  408052:	2115      	movs	r1, #21
  408054:	4b33      	ldr	r3, [pc, #204]	; (408124 <obj_del_core+0xd8>)
  408056:	4798      	blx	r3
    lv_group_t * group = lv_obj_get_group(obj);
  408058:	4628      	mov	r0, r5
  40805a:	4b33      	ldr	r3, [pc, #204]	; (408128 <obj_del_core+0xdc>)
  40805c:	4798      	blx	r3
    if(group) lv_group_remove_obj(obj);
  40805e:	4606      	mov	r6, r0
  408060:	b110      	cbz	r0, 408068 <obj_del_core+0x1c>
  408062:	4628      	mov	r0, r5
  408064:	4b31      	ldr	r3, [pc, #196]	; (40812c <obj_del_core+0xe0>)
  408066:	4798      	blx	r3
    lv_anim_del(obj, NULL);
  408068:	2100      	movs	r1, #0
  40806a:	4628      	mov	r0, r5
  40806c:	4b30      	ldr	r3, [pc, #192]	; (408130 <obj_del_core+0xe4>)
  40806e:	4798      	blx	r3
    trans_del(obj, 0xFF, 0xFF, NULL);
  408070:	2300      	movs	r3, #0
  408072:	22ff      	movs	r2, #255	; 0xff
  408074:	4611      	mov	r1, r2
  408076:	4628      	mov	r0, r5
  408078:	4c2e      	ldr	r4, [pc, #184]	; (408134 <obj_del_core+0xe8>)
  40807a:	47a0      	blx	r4
    i = _lv_ll_get_head(&(obj->child_ll));
  40807c:	1d2c      	adds	r4, r5, #4
  40807e:	4620      	mov	r0, r4
  408080:	4b2d      	ldr	r3, [pc, #180]	; (408138 <obj_del_core+0xec>)
  408082:	4798      	blx	r3
    while(i != NULL) {
  408084:	e004      	b.n	408090 <obj_del_core+0x44>
        obj_del_core(i);
  408086:	f7ff ffe1 	bl	40804c <obj_del_core>
        i = _lv_ll_get_head(&(obj->child_ll));
  40808a:	4620      	mov	r0, r4
  40808c:	4b2a      	ldr	r3, [pc, #168]	; (408138 <obj_del_core+0xec>)
  40808e:	4798      	blx	r3
    while(i != NULL) {
  408090:	2800      	cmp	r0, #0
  408092:	d1f8      	bne.n	408086 <obj_del_core+0x3a>
    lv_event_mark_deleted(obj);
  408094:	4628      	mov	r0, r5
  408096:	4b29      	ldr	r3, [pc, #164]	; (40813c <obj_del_core+0xf0>)
  408098:	4798      	blx	r3
    lv_indev_t * indev = lv_indev_get_next(NULL);
  40809a:	2000      	movs	r0, #0
  40809c:	4b28      	ldr	r3, [pc, #160]	; (408140 <obj_del_core+0xf4>)
  40809e:	4798      	blx	r3
  4080a0:	4604      	mov	r4, r0
    while(indev) {
  4080a2:	e00d      	b.n	4080c0 <obj_del_core+0x74>
            lv_indev_reset(indev, obj);
  4080a4:	4629      	mov	r1, r5
  4080a6:	4620      	mov	r0, r4
  4080a8:	4b26      	ldr	r3, [pc, #152]	; (408144 <obj_del_core+0xf8>)
  4080aa:	4798      	blx	r3
        if(indev->proc.types.pointer.last_pressed == obj) {
  4080ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4080ae:	429d      	cmp	r5, r3
  4080b0:	d00e      	beq.n	4080d0 <obj_del_core+0x84>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
  4080b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
  4080b4:	429e      	cmp	r6, r3
  4080b6:	d00e      	beq.n	4080d6 <obj_del_core+0x8a>
        indev = lv_indev_get_next(indev);
  4080b8:	4620      	mov	r0, r4
  4080ba:	4b21      	ldr	r3, [pc, #132]	; (408140 <obj_del_core+0xf4>)
  4080bc:	4798      	blx	r3
  4080be:	4604      	mov	r4, r0
    while(indev) {
  4080c0:	b194      	cbz	r4, 4080e8 <obj_del_core+0x9c>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
  4080c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4080c4:	429d      	cmp	r5, r3
  4080c6:	d0ed      	beq.n	4080a4 <obj_del_core+0x58>
  4080c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4080ca:	429d      	cmp	r5, r3
  4080cc:	d1ee      	bne.n	4080ac <obj_del_core+0x60>
  4080ce:	e7e9      	b.n	4080a4 <obj_del_core+0x58>
            indev->proc.types.pointer.last_pressed = NULL;
  4080d0:	2300      	movs	r3, #0
  4080d2:	63e3      	str	r3, [r4, #60]	; 0x3c
  4080d4:	e7ed      	b.n	4080b2 <obj_del_core+0x66>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
  4080d6:	4b1c      	ldr	r3, [pc, #112]	; (408148 <obj_del_core+0xfc>)
  4080d8:	4798      	blx	r3
  4080da:	4285      	cmp	r5, r0
  4080dc:	d1ec      	bne.n	4080b8 <obj_del_core+0x6c>
            lv_indev_reset(indev, obj);
  4080de:	4629      	mov	r1, r5
  4080e0:	4620      	mov	r0, r4
  4080e2:	4b18      	ldr	r3, [pc, #96]	; (408144 <obj_del_core+0xf8>)
  4080e4:	4798      	blx	r3
  4080e6:	e7e7      	b.n	4080b8 <obj_del_core+0x6c>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
  4080e8:	69eb      	ldr	r3, [r5, #28]
  4080ea:	2200      	movs	r2, #0
  4080ec:	4611      	mov	r1, r2
  4080ee:	4628      	mov	r0, r5
  4080f0:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  4080f2:	4628      	mov	r0, r5
  4080f4:	4b15      	ldr	r3, [pc, #84]	; (40814c <obj_del_core+0x100>)
  4080f6:	4798      	blx	r3
    if(par == NULL) { /*It is a screen*/
  4080f8:	b158      	cbz	r0, 408112 <obj_del_core+0xc6>
        _lv_ll_remove(&(par->child_ll), obj);
  4080fa:	4629      	mov	r1, r5
  4080fc:	3004      	adds	r0, #4
  4080fe:	4b14      	ldr	r3, [pc, #80]	; (408150 <obj_del_core+0x104>)
  408100:	4798      	blx	r3
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
  408102:	6a68      	ldr	r0, [r5, #36]	; 0x24
  408104:	b108      	cbz	r0, 40810a <obj_del_core+0xbe>
  408106:	4b13      	ldr	r3, [pc, #76]	; (408154 <obj_del_core+0x108>)
  408108:	4798      	blx	r3
    lv_mem_free(obj); /*Free the object itself*/
  40810a:	4628      	mov	r0, r5
  40810c:	4b11      	ldr	r3, [pc, #68]	; (408154 <obj_del_core+0x108>)
  40810e:	4798      	blx	r3
  408110:	bd70      	pop	{r4, r5, r6, pc}
        lv_disp_t * d = lv_obj_get_disp(obj);
  408112:	4628      	mov	r0, r5
  408114:	4b10      	ldr	r3, [pc, #64]	; (408158 <obj_del_core+0x10c>)
  408116:	4798      	blx	r3
        _lv_ll_remove(&d->scr_ll, obj);
  408118:	4629      	mov	r1, r5
  40811a:	3038      	adds	r0, #56	; 0x38
  40811c:	4b0c      	ldr	r3, [pc, #48]	; (408150 <obj_del_core+0x104>)
  40811e:	4798      	blx	r3
  408120:	e7ef      	b.n	408102 <obj_del_core+0xb6>
  408122:	bf00      	nop
  408124:	00405845 	.word	0x00405845
  408128:	00408025 	.word	0x00408025
  40812c:	004038dd 	.word	0x004038dd
  408130:	00416309 	.word	0x00416309
  408134:	00405be5 	.word	0x00405be5
  408138:	004170b9 	.word	0x004170b9
  40813c:	00405341 	.word	0x00405341
  408140:	00415fa1 	.word	0x00415fa1
  408144:	00404c5d 	.word	0x00404c5d
  408148:	00404d09 	.word	0x00404d09
  40814c:	00405955 	.word	0x00405955
  408150:	00417175 	.word	0x00417175
  408154:	004175b1 	.word	0x004175b1
  408158:	004059b5 	.word	0x004059b5

0040815c <lv_obj_del>:
{
  40815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40815e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408160:	4b16      	ldr	r3, [pc, #88]	; (4081bc <lv_obj_del+0x60>)
  408162:	4798      	blx	r3
  408164:	b928      	cbnz	r0, 408172 <lv_obj_del+0x16>
  408166:	4622      	mov	r2, r4
  408168:	2300      	movs	r3, #0
  40816a:	4815      	ldr	r0, [pc, #84]	; (4081c0 <lv_obj_del+0x64>)
  40816c:	4915      	ldr	r1, [pc, #84]	; (4081c4 <lv_obj_del+0x68>)
  40816e:	4788      	blx	r1
  408170:	e7fe      	b.n	408170 <lv_obj_del+0x14>
  408172:	4605      	mov	r5, r0
    lv_obj_invalidate(obj);
  408174:	4620      	mov	r0, r4
  408176:	4b14      	ldr	r3, [pc, #80]	; (4081c8 <lv_obj_del+0x6c>)
  408178:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  40817a:	4620      	mov	r0, r4
  40817c:	4b13      	ldr	r3, [pc, #76]	; (4081cc <lv_obj_del+0x70>)
  40817e:	4798      	blx	r3
    if(par == NULL) {
  408180:	4607      	mov	r7, r0
  408182:	b178      	cbz	r0, 4081a4 <lv_obj_del+0x48>
    bool act_scr_del = false;
  408184:	2500      	movs	r5, #0
    lv_disp_t * disp = NULL;
  408186:	462e      	mov	r6, r5
    obj_del_core(obj);
  408188:	4620      	mov	r0, r4
  40818a:	4b11      	ldr	r3, [pc, #68]	; (4081d0 <lv_obj_del+0x74>)
  40818c:	4798      	blx	r3
    if(par) {
  40818e:	b127      	cbz	r7, 40819a <lv_obj_del+0x3e>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
  408190:	69fb      	ldr	r3, [r7, #28]
  408192:	2200      	movs	r2, #0
  408194:	2101      	movs	r1, #1
  408196:	4638      	mov	r0, r7
  408198:	4798      	blx	r3
    if(act_scr_del)  {
  40819a:	b10d      	cbz	r5, 4081a0 <lv_obj_del+0x44>
        disp->act_scr = NULL;
  40819c:	2300      	movs	r3, #0
  40819e:	6473      	str	r3, [r6, #68]	; 0x44
}
  4081a0:	2000      	movs	r0, #0
  4081a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        disp = lv_obj_get_disp(obj);
  4081a4:	4620      	mov	r0, r4
  4081a6:	4b0b      	ldr	r3, [pc, #44]	; (4081d4 <lv_obj_del+0x78>)
  4081a8:	4798      	blx	r3
        if(!disp) return LV_RES_INV;   /*Shouldn't happen*/
  4081aa:	4606      	mov	r6, r0
  4081ac:	2800      	cmp	r0, #0
  4081ae:	d0f7      	beq.n	4081a0 <lv_obj_del+0x44>
        if(disp->act_scr == obj) act_scr_del = true;
  4081b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
  4081b2:	429c      	cmp	r4, r3
  4081b4:	d0e8      	beq.n	408188 <lv_obj_del+0x2c>
    bool act_scr_del = false;
  4081b6:	2500      	movs	r5, #0
  4081b8:	e7e6      	b.n	408188 <lv_obj_del+0x2c>
  4081ba:	bf00      	nop
  4081bc:	00416da9 	.word	0x00416da9
  4081c0:	0042e560 	.word	0x0042e560
  4081c4:	00416db5 	.word	0x00416db5
  4081c8:	00405f01 	.word	0x00405f01
  4081cc:	00405955 	.word	0x00405955
  4081d0:	0040804d 	.word	0x0040804d
  4081d4:	004059b5 	.word	0x004059b5

004081d8 <lv_obj_is_focused>:
{
  4081d8:	b538      	push	{r3, r4, r5, lr}
  4081da:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4081dc:	4b0a      	ldr	r3, [pc, #40]	; (408208 <lv_obj_is_focused+0x30>)
  4081de:	4798      	blx	r3
  4081e0:	b148      	cbz	r0, 4081f6 <lv_obj_is_focused+0x1e>
  4081e2:	4604      	mov	r4, r0
    if(obj->group_p) {
  4081e4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  4081e6:	b160      	cbz	r0, 408202 <lv_obj_is_focused+0x2a>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
  4081e8:	4b08      	ldr	r3, [pc, #32]	; (40820c <lv_obj_is_focused+0x34>)
  4081ea:	4798      	blx	r3
  4081ec:	4285      	cmp	r5, r0
  4081ee:	d000      	beq.n	4081f2 <lv_obj_is_focused+0x1a>
    return false;
  4081f0:	2400      	movs	r4, #0
}
  4081f2:	4620      	mov	r0, r4
  4081f4:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4081f6:	462a      	mov	r2, r5
  4081f8:	2300      	movs	r3, #0
  4081fa:	4805      	ldr	r0, [pc, #20]	; (408210 <lv_obj_is_focused+0x38>)
  4081fc:	4905      	ldr	r1, [pc, #20]	; (408214 <lv_obj_is_focused+0x3c>)
  4081fe:	4788      	blx	r1
  408200:	e7fe      	b.n	408200 <lv_obj_is_focused+0x28>
    return false;
  408202:	2400      	movs	r4, #0
  408204:	e7f5      	b.n	4081f2 <lv_obj_is_focused+0x1a>
  408206:	bf00      	nop
  408208:	00416da9 	.word	0x00416da9
  40820c:	00403989 	.word	0x00403989
  408210:	0042e560 	.word	0x0042e560
  408214:	00416db5 	.word	0x00416db5

00408218 <lv_obj_is_point_on_coords>:
{
  408218:	b500      	push	{lr}
  40821a:	b083      	sub	sp, #12
    ext_area.x1 = obj->coords.x1 - obj->ext_click_pad_hor;
  40821c:	8a02      	ldrh	r2, [r0, #16]
  40821e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
  408222:	1ad2      	subs	r2, r2, r3
  408224:	f8ad 2000 	strh.w	r2, [sp]
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
  408228:	8a82      	ldrh	r2, [r0, #20]
  40822a:	4413      	add	r3, r2
  40822c:	f8ad 3004 	strh.w	r3, [sp, #4]
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
  408230:	8a42      	ldrh	r2, [r0, #18]
  408232:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  408236:	1ad2      	subs	r2, r2, r3
  408238:	f8ad 2002 	strh.w	r2, [sp, #2]
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
  40823c:	8ac2      	ldrh	r2, [r0, #22]
  40823e:	4413      	add	r3, r2
  408240:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
  408244:	2200      	movs	r2, #0
  408246:	4668      	mov	r0, sp
  408248:	4b02      	ldr	r3, [pc, #8]	; (408254 <lv_obj_is_point_on_coords+0x3c>)
  40824a:	4798      	blx	r3
}
  40824c:	b003      	add	sp, #12
  40824e:	f85d fb04 	ldr.w	pc, [sp], #4
  408252:	bf00      	nop
  408254:	00416585 	.word	0x00416585

00408258 <lv_obj_hittest>:
{
  408258:	b500      	push	{lr}
  40825a:	b083      	sub	sp, #12
    if(obj->adv_hittest) {
  40825c:	f990 3034 	ldrsb.w	r3, [r0, #52]	; 0x34
  408260:	2b00      	cmp	r3, #0
  408262:	db04      	blt.n	40826e <lv_obj_hittest+0x16>
        return lv_obj_is_point_on_coords(obj, point);
  408264:	4b07      	ldr	r3, [pc, #28]	; (408284 <lv_obj_hittest+0x2c>)
  408266:	4798      	blx	r3
}
  408268:	b003      	add	sp, #12
  40826a:	f85d fb04 	ldr.w	pc, [sp], #4
        hit_info.point = point;
  40826e:	9100      	str	r1, [sp, #0]
        hit_info.result = true;
  408270:	2301      	movs	r3, #1
  408272:	f88d 3004 	strb.w	r3, [sp, #4]
        obj->signal_cb(obj, LV_SIGNAL_HIT_TEST, &hit_info);
  408276:	69c3      	ldr	r3, [r0, #28]
  408278:	466a      	mov	r2, sp
  40827a:	210a      	movs	r1, #10
  40827c:	4798      	blx	r3
        return hit_info.result;
  40827e:	f89d 0004 	ldrb.w	r0, [sp, #4]
  408282:	e7f1      	b.n	408268 <lv_obj_hittest+0x10>
  408284:	00408219 	.word	0x00408219

00408288 <lv_obj_handle_get_type_signal>:
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
  408288:	2300      	movs	r3, #0
  40828a:	2b06      	cmp	r3, #6
  40828c:	d805      	bhi.n	40829a <lv_obj_handle_get_type_signal+0x12>
        if(buf->type[i] == NULL) break;
  40828e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
  408292:	b112      	cbz	r2, 40829a <lv_obj_handle_get_type_signal+0x12>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
  408294:	3301      	adds	r3, #1
  408296:	b2db      	uxtb	r3, r3
  408298:	e7f7      	b.n	40828a <lv_obj_handle_get_type_signal+0x2>
    buf->type[i] = name;
  40829a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
  40829e:	2001      	movs	r0, #1
  4082a0:	4770      	bx	lr
	...

004082a4 <lv_obj_init_draw_rect_dsc>:
{
  4082a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4082a8:	4605      	mov	r5, r0
  4082aa:	460e      	mov	r6, r1
  4082ac:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4082ae:	2201      	movs	r2, #1
  4082b0:	4ba9      	ldr	r3, [pc, #676]	; (408558 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4082b2:	4798      	blx	r3
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
  4082b4:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  4082b6:	f248 020c 	movw	r2, #32780	; 0x800c
  4082ba:	4631      	mov	r1, r6
  4082bc:	4628      	mov	r0, r5
  4082be:	4ba7      	ldr	r3, [pc, #668]	; (40855c <lv_obj_init_draw_rect_dsc+0x2b8>)
  4082c0:	4798      	blx	r3
    if(opa_scale <= LV_OPA_MIN) {
  4082c2:	2802      	cmp	r0, #2
  4082c4:	d966      	bls.n	408394 <lv_obj_init_draw_rect_dsc+0xf0>
  4082c6:	4607      	mov	r7, r0
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
  4082c8:	7b23      	ldrb	r3, [r4, #12]
  4082ca:	2b00      	cmp	r3, #0
  4082cc:	d16d      	bne.n	4083aa <lv_obj_init_draw_rect_dsc+0x106>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  4082ce:	2230      	movs	r2, #48	; 0x30
  4082d0:	4631      	mov	r1, r6
  4082d2:	4628      	mov	r0, r5
  4082d4:	4ba0      	ldr	r3, [pc, #640]	; (408558 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4082d6:	4798      	blx	r3
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
  4082d8:	8220      	strh	r0, [r4, #16]
    if(draw_dsc->border_width) {
  4082da:	b118      	cbz	r0, 4082e4 <lv_obj_init_draw_rect_dsc+0x40>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
  4082dc:	7d23      	ldrb	r3, [r4, #20]
  4082de:	2b00      	cmp	r3, #0
  4082e0:	f040 8093 	bne.w	40840a <lv_obj_init_draw_rect_dsc+0x166>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  4082e4:	2240      	movs	r2, #64	; 0x40
  4082e6:	4631      	mov	r1, r6
  4082e8:	4628      	mov	r0, r5
  4082ea:	4b9b      	ldr	r3, [pc, #620]	; (408558 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4082ec:	4798      	blx	r3
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
  4082ee:	8360      	strh	r0, [r4, #26]
    if(draw_dsc->outline_width) {
  4082f0:	b118      	cbz	r0, 4082fa <lv_obj_init_draw_rect_dsc+0x56>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
  4082f2:	7fa3      	ldrb	r3, [r4, #30]
  4082f4:	2b00      	cmp	r3, #0
  4082f6:	f040 80a5 	bne.w	408444 <lv_obj_init_draw_rect_dsc+0x1a0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  4082fa:	226e      	movs	r2, #110	; 0x6e
  4082fc:	4631      	mov	r1, r6
  4082fe:	4628      	mov	r0, r5
  408300:	4b97      	ldr	r3, [pc, #604]	; (408560 <lv_obj_init_draw_rect_dsc+0x2bc>)
  408302:	4798      	blx	r3
    draw_dsc->pattern_image = lv_obj_get_style_pattern_image(obj, part);
  408304:	62e0      	str	r0, [r4, #44]	; 0x2c
    if(draw_dsc->pattern_image) {
  408306:	b120      	cbz	r0, 408312 <lv_obj_init_draw_rect_dsc+0x6e>
        if(draw_dsc->pattern_opa != LV_OPA_TRANSP) {
  408308:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  40830c:	2b00      	cmp	r3, #0
  40830e:	f040 80b5 	bne.w	40847c <lv_obj_init_draw_rect_dsc+0x1d8>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  408312:	2250      	movs	r2, #80	; 0x50
  408314:	4631      	mov	r1, r6
  408316:	4628      	mov	r0, r5
  408318:	4b8f      	ldr	r3, [pc, #572]	; (408558 <lv_obj_init_draw_rect_dsc+0x2b4>)
  40831a:	4798      	blx	r3
    draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
  40831c:	8460      	strh	r0, [r4, #34]	; 0x22
    if(draw_dsc->shadow_width) {
  40831e:	b120      	cbz	r0, 40832a <lv_obj_init_draw_rect_dsc+0x86>
        if(draw_dsc->shadow_opa > LV_OPA_MIN) {
  408320:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  408324:	2b02      	cmp	r3, #2
  408326:	f200 80ee 	bhi.w	408506 <lv_obj_init_draw_rect_dsc+0x262>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  40832a:	227f      	movs	r2, #127	; 0x7f
  40832c:	4631      	mov	r1, r6
  40832e:	4628      	mov	r0, r5
  408330:	4b8b      	ldr	r3, [pc, #556]	; (408560 <lv_obj_init_draw_rect_dsc+0x2bc>)
  408332:	4798      	blx	r3
    draw_dsc->value_str = lv_obj_get_style_value_str(obj, part);
  408334:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(draw_dsc->value_str) {
  408336:	b120      	cbz	r0, 408342 <lv_obj_init_draw_rect_dsc+0x9e>
        if(draw_dsc->value_opa > LV_OPA_MIN) {
  408338:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  40833c:	2b02      	cmp	r3, #2
  40833e:	f200 8115 	bhi.w	40856c <lv_obj_init_draw_rect_dsc+0x2c8>
    if(opa_scale < LV_OPA_MAX) {
  408342:	2ffc      	cmp	r7, #252	; 0xfc
  408344:	d824      	bhi.n	408390 <lv_obj_init_draw_rect_dsc+0xec>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
  408346:	7b23      	ldrb	r3, [r4, #12]
  408348:	b2bf      	uxth	r7, r7
  40834a:	fb13 f307 	smulbb	r3, r3, r7
  40834e:	f3c3 2307 	ubfx	r3, r3, #8, #8
  408352:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
  408354:	7d23      	ldrb	r3, [r4, #20]
  408356:	fb17 f303 	smulbb	r3, r7, r3
  40835a:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40835e:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
  408360:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  408364:	fb17 f303 	smulbb	r3, r7, r3
  408368:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40836c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
  408370:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  408374:	fb17 f303 	smulbb	r3, r7, r3
  408378:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40837c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
  408380:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  408384:	fb17 f703 	smulbb	r7, r7, r3
  408388:	f3c7 2707 	ubfx	r7, r7, #8, #8
  40838c:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
  408390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        draw_dsc->bg_opa = LV_OPA_TRANSP;
  408394:	2300      	movs	r3, #0
  408396:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = LV_OPA_TRANSP;
  408398:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
  40839a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = LV_OPA_TRANSP;
  40839e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = LV_OPA_TRANSP;
  4083a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
  4083a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  4083aa:	222c      	movs	r2, #44	; 0x2c
  4083ac:	4631      	mov	r1, r6
  4083ae:	4628      	mov	r0, r5
  4083b0:	4b6a      	ldr	r3, [pc, #424]	; (40855c <lv_obj_init_draw_rect_dsc+0x2b8>)
  4083b2:	4798      	blx	r3
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
  4083b4:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
  4083b6:	2802      	cmp	r0, #2
  4083b8:	d989      	bls.n	4082ce <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4083ba:	2229      	movs	r2, #41	; 0x29
  4083bc:	4631      	mov	r1, r6
  4083be:	4628      	mov	r0, r5
  4083c0:	4b68      	ldr	r3, [pc, #416]	; (408564 <lv_obj_init_draw_rect_dsc+0x2c0>)
  4083c2:	4798      	blx	r3
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
  4083c4:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
  4083c6:	2223      	movs	r2, #35	; 0x23
  4083c8:	4631      	mov	r1, r6
  4083ca:	4628      	mov	r0, r5
  4083cc:	4b62      	ldr	r3, [pc, #392]	; (408558 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4083ce:	4798      	blx	r3
  4083d0:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
  4083d2:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
  4083d4:	b930      	cbnz	r0, 4083e4 <lv_obj_init_draw_rect_dsc+0x140>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  4083d6:	2220      	movs	r2, #32
  4083d8:	4631      	mov	r1, r6
  4083da:	4628      	mov	r0, r5
  4083dc:	4b5e      	ldr	r3, [pc, #376]	; (408558 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4083de:	4798      	blx	r3
            draw_dsc->bg_blend_mode = lv_obj_get_style_bg_blend_mode(obj, part);
  4083e0:	7360      	strb	r0, [r4, #13]
  4083e2:	e774      	b.n	4082ce <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
  4083e4:	222a      	movs	r2, #42	; 0x2a
  4083e6:	4631      	mov	r1, r6
  4083e8:	4628      	mov	r0, r5
  4083ea:	4b5e      	ldr	r3, [pc, #376]	; (408564 <lv_obj_init_draw_rect_dsc+0x2c0>)
  4083ec:	4798      	blx	r3
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
  4083ee:	80a0      	strh	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
  4083f0:	2221      	movs	r2, #33	; 0x21
  4083f2:	4631      	mov	r1, r6
  4083f4:	4628      	mov	r0, r5
  4083f6:	f8df 8160 	ldr.w	r8, [pc, #352]	; 408558 <lv_obj_init_draw_rect_dsc+0x2b4>
  4083fa:	47c0      	blx	r8
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
  4083fc:	8120      	strh	r0, [r4, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
  4083fe:	2222      	movs	r2, #34	; 0x22
  408400:	4631      	mov	r1, r6
  408402:	4628      	mov	r0, r5
  408404:	47c0      	blx	r8
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
  408406:	8160      	strh	r0, [r4, #10]
  408408:	e7e5      	b.n	4083d6 <lv_obj_init_draw_rect_dsc+0x132>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  40840a:	223c      	movs	r2, #60	; 0x3c
  40840c:	4631      	mov	r1, r6
  40840e:	4628      	mov	r0, r5
  408410:	4b52      	ldr	r3, [pc, #328]	; (40855c <lv_obj_init_draw_rect_dsc+0x2b8>)
  408412:	4798      	blx	r3
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
  408414:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
  408416:	2802      	cmp	r0, #2
  408418:	d806      	bhi.n	408428 <lv_obj_init_draw_rect_dsc+0x184>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  40841a:	2232      	movs	r2, #50	; 0x32
  40841c:	4631      	mov	r1, r6
  40841e:	4628      	mov	r0, r5
  408420:	4b4d      	ldr	r3, [pc, #308]	; (408558 <lv_obj_init_draw_rect_dsc+0x2b4>)
  408422:	4798      	blx	r3
            draw_dsc->border_blend_mode = lv_obj_get_style_border_blend_mode(obj, part);
  408424:	7560      	strb	r0, [r4, #21]
  408426:	e75d      	b.n	4082e4 <lv_obj_init_draw_rect_dsc+0x40>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  408428:	2231      	movs	r2, #49	; 0x31
  40842a:	4631      	mov	r1, r6
  40842c:	4628      	mov	r0, r5
  40842e:	4b4a      	ldr	r3, [pc, #296]	; (408558 <lv_obj_init_draw_rect_dsc+0x2b4>)
  408430:	4798      	blx	r3
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
  408432:	b2c0      	uxtb	r0, r0
  408434:	8260      	strh	r0, [r4, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  408436:	2239      	movs	r2, #57	; 0x39
  408438:	4631      	mov	r1, r6
  40843a:	4628      	mov	r0, r5
  40843c:	4b49      	ldr	r3, [pc, #292]	; (408564 <lv_obj_init_draw_rect_dsc+0x2c0>)
  40843e:	4798      	blx	r3
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
  408440:	81e0      	strh	r0, [r4, #14]
  408442:	e7ea      	b.n	40841a <lv_obj_init_draw_rect_dsc+0x176>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  408444:	224c      	movs	r2, #76	; 0x4c
  408446:	4631      	mov	r1, r6
  408448:	4628      	mov	r0, r5
  40844a:	4b44      	ldr	r3, [pc, #272]	; (40855c <lv_obj_init_draw_rect_dsc+0x2b8>)
  40844c:	4798      	blx	r3
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
  40844e:	77a0      	strb	r0, [r4, #30]
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
  408450:	2802      	cmp	r0, #2
  408452:	d806      	bhi.n	408462 <lv_obj_init_draw_rect_dsc+0x1be>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
  408454:	2242      	movs	r2, #66	; 0x42
  408456:	4631      	mov	r1, r6
  408458:	4628      	mov	r0, r5
  40845a:	4b3f      	ldr	r3, [pc, #252]	; (408558 <lv_obj_init_draw_rect_dsc+0x2b4>)
  40845c:	4798      	blx	r3
            draw_dsc->outline_blend_mode = lv_obj_get_style_outline_blend_mode(obj, part);
  40845e:	77e0      	strb	r0, [r4, #31]
  408460:	e74b      	b.n	4082fa <lv_obj_init_draw_rect_dsc+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  408462:	2241      	movs	r2, #65	; 0x41
  408464:	4631      	mov	r1, r6
  408466:	4628      	mov	r0, r5
  408468:	4b3b      	ldr	r3, [pc, #236]	; (408558 <lv_obj_init_draw_rect_dsc+0x2b4>)
  40846a:	4798      	blx	r3
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
  40846c:	83a0      	strh	r0, [r4, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  40846e:	2249      	movs	r2, #73	; 0x49
  408470:	4631      	mov	r1, r6
  408472:	4628      	mov	r0, r5
  408474:	4b3b      	ldr	r3, [pc, #236]	; (408564 <lv_obj_init_draw_rect_dsc+0x2c0>)
  408476:	4798      	blx	r3
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
  408478:	8320      	strh	r0, [r4, #24]
  40847a:	e7eb      	b.n	408454 <lv_obj_init_draw_rect_dsc+0x1b0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
  40847c:	226c      	movs	r2, #108	; 0x6c
  40847e:	4631      	mov	r1, r6
  408480:	4628      	mov	r0, r5
  408482:	4b36      	ldr	r3, [pc, #216]	; (40855c <lv_obj_init_draw_rect_dsc+0x2b8>)
  408484:	4798      	blx	r3
            draw_dsc->pattern_opa = lv_obj_get_style_pattern_opa(obj, part);
  408486:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
  40848a:	2802      	cmp	r0, #2
  40848c:	f67f af41 	bls.w	408312 <lv_obj_init_draw_rect_dsc+0x6e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
  408490:	226d      	movs	r2, #109	; 0x6d
  408492:	4631      	mov	r1, r6
  408494:	4628      	mov	r0, r5
  408496:	4b31      	ldr	r3, [pc, #196]	; (40855c <lv_obj_init_draw_rect_dsc+0x2b8>)
  408498:	4798      	blx	r3
                draw_dsc->pattern_recolor_opa = lv_obj_get_style_pattern_recolor_opa(obj, part);
  40849a:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
  40849e:	2261      	movs	r2, #97	; 0x61
  4084a0:	4631      	mov	r1, r6
  4084a2:	4628      	mov	r0, r5
  4084a4:	4b2c      	ldr	r3, [pc, #176]	; (408558 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4084a6:	4798      	blx	r3
  4084a8:	3000      	adds	r0, #0
  4084aa:	bf18      	it	ne
  4084ac:	2001      	movne	r0, #1
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
  4084ae:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  4084b2:	f360 0300 	bfi	r3, r0, #0, #1
  4084b6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
  4084ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4084bc:	4b2a      	ldr	r3, [pc, #168]	; (408568 <lv_obj_init_draw_rect_dsc+0x2c4>)
  4084be:	4798      	blx	r3
  4084c0:	2802      	cmp	r0, #2
  4084c2:	d00b      	beq.n	4084dc <lv_obj_init_draw_rect_dsc+0x238>
                else if(draw_dsc->pattern_recolor_opa > LV_OPA_MIN) {
  4084c4:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
  4084c8:	2b02      	cmp	r3, #2
  4084ca:	d815      	bhi.n	4084f8 <lv_obj_init_draw_rect_dsc+0x254>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
  4084cc:	2260      	movs	r2, #96	; 0x60
  4084ce:	4631      	mov	r1, r6
  4084d0:	4628      	mov	r0, r5
  4084d2:	4b21      	ldr	r3, [pc, #132]	; (408558 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4084d4:	4798      	blx	r3
                draw_dsc->pattern_blend_mode = lv_obj_get_style_pattern_blend_mode(obj, part);
  4084d6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  4084da:	e71a      	b.n	408312 <lv_obj_init_draw_rect_dsc+0x6e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  4084dc:	2269      	movs	r2, #105	; 0x69
  4084de:	4631      	mov	r1, r6
  4084e0:	4628      	mov	r0, r5
  4084e2:	4b20      	ldr	r3, [pc, #128]	; (408564 <lv_obj_init_draw_rect_dsc+0x2c0>)
  4084e4:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
  4084e6:	86a0      	strh	r0, [r4, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  4084e8:	f248 028e 	movw	r2, #32910	; 0x808e
  4084ec:	4631      	mov	r1, r6
  4084ee:	4628      	mov	r0, r5
  4084f0:	4b1b      	ldr	r3, [pc, #108]	; (408560 <lv_obj_init_draw_rect_dsc+0x2bc>)
  4084f2:	4798      	blx	r3
                    draw_dsc->pattern_font = lv_obj_get_style_text_font(obj, part);
  4084f4:	6320      	str	r0, [r4, #48]	; 0x30
  4084f6:	e7e9      	b.n	4084cc <lv_obj_init_draw_rect_dsc+0x228>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  4084f8:	2269      	movs	r2, #105	; 0x69
  4084fa:	4631      	mov	r1, r6
  4084fc:	4628      	mov	r0, r5
  4084fe:	4b19      	ldr	r3, [pc, #100]	; (408564 <lv_obj_init_draw_rect_dsc+0x2c0>)
  408500:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
  408502:	86a0      	strh	r0, [r4, #52]	; 0x34
  408504:	e7e2      	b.n	4084cc <lv_obj_init_draw_rect_dsc+0x228>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
  408506:	225c      	movs	r2, #92	; 0x5c
  408508:	4631      	mov	r1, r6
  40850a:	4628      	mov	r0, r5
  40850c:	4b13      	ldr	r3, [pc, #76]	; (40855c <lv_obj_init_draw_rect_dsc+0x2b8>)
  40850e:	4798      	blx	r3
            draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
  408510:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
  408514:	2802      	cmp	r0, #2
  408516:	f67f af08 	bls.w	40832a <lv_obj_init_draw_rect_dsc+0x86>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
  40851a:	2251      	movs	r2, #81	; 0x51
  40851c:	4631      	mov	r1, r6
  40851e:	4628      	mov	r0, r5
  408520:	f8df 8034 	ldr.w	r8, [pc, #52]	; 408558 <lv_obj_init_draw_rect_dsc+0x2b4>
  408524:	47c0      	blx	r8
                draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
  408526:	84a0      	strh	r0, [r4, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
  408528:	2252      	movs	r2, #82	; 0x52
  40852a:	4631      	mov	r1, r6
  40852c:	4628      	mov	r0, r5
  40852e:	47c0      	blx	r8
                draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
  408530:	84e0      	strh	r0, [r4, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  408532:	2253      	movs	r2, #83	; 0x53
  408534:	4631      	mov	r1, r6
  408536:	4628      	mov	r0, r5
  408538:	47c0      	blx	r8
                draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
  40853a:	8520      	strh	r0, [r4, #40]	; 0x28
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  40853c:	2259      	movs	r2, #89	; 0x59
  40853e:	4631      	mov	r1, r6
  408540:	4628      	mov	r0, r5
  408542:	4b08      	ldr	r3, [pc, #32]	; (408564 <lv_obj_init_draw_rect_dsc+0x2c0>)
  408544:	4798      	blx	r3
                draw_dsc->shadow_color = lv_obj_get_style_shadow_color(obj, part);
  408546:	8420      	strh	r0, [r4, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
  408548:	2254      	movs	r2, #84	; 0x54
  40854a:	4631      	mov	r1, r6
  40854c:	4628      	mov	r0, r5
  40854e:	47c0      	blx	r8
                draw_dsc->shadow_blend_mode = lv_obj_get_style_shadow_blend_mode(obj, part);
  408550:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
  408554:	e6e9      	b.n	40832a <lv_obj_init_draw_rect_dsc+0x86>
  408556:	bf00      	nop
  408558:	004073ed 	.word	0x004073ed
  40855c:	00406e61 	.word	0x00406e61
  408560:	004072e5 	.word	0x004072e5
  408564:	00406dd9 	.word	0x00406dd9
  408568:	0040e071 	.word	0x0040e071
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
  40856c:	227c      	movs	r2, #124	; 0x7c
  40856e:	4631      	mov	r1, r6
  408570:	4628      	mov	r0, r5
  408572:	4b1d      	ldr	r3, [pc, #116]	; (4085e8 <lv_obj_init_draw_rect_dsc+0x344>)
  408574:	4798      	blx	r3
            draw_dsc->value_opa = lv_obj_get_style_value_opa(obj, part);
  408576:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
            if(draw_dsc->value_opa > LV_OPA_MIN) {
  40857a:	2802      	cmp	r0, #2
  40857c:	f67f aee1 	bls.w	408342 <lv_obj_init_draw_rect_dsc+0x9e>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
  408580:	2273      	movs	r2, #115	; 0x73
  408582:	4631      	mov	r1, r6
  408584:	4628      	mov	r0, r5
  408586:	f8df 806c 	ldr.w	r8, [pc, #108]	; 4085f4 <lv_obj_init_draw_rect_dsc+0x350>
  40858a:	47c0      	blx	r8
                draw_dsc->value_ofs_x = lv_obj_get_style_value_ofs_x(obj, part);
  40858c:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
  408590:	2274      	movs	r2, #116	; 0x74
  408592:	4631      	mov	r1, r6
  408594:	4628      	mov	r0, r5
  408596:	47c0      	blx	r8
                draw_dsc->value_ofs_y = lv_obj_get_style_value_ofs_y(obj, part);
  408598:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  40859c:	2279      	movs	r2, #121	; 0x79
  40859e:	4631      	mov	r1, r6
  4085a0:	4628      	mov	r0, r5
  4085a2:	4b12      	ldr	r3, [pc, #72]	; (4085ec <lv_obj_init_draw_rect_dsc+0x348>)
  4085a4:	4798      	blx	r3
                draw_dsc->value_color = lv_obj_get_style_value_color(obj, part);
  4085a6:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  4085aa:	227e      	movs	r2, #126	; 0x7e
  4085ac:	4631      	mov	r1, r6
  4085ae:	4628      	mov	r0, r5
  4085b0:	4b0f      	ldr	r3, [pc, #60]	; (4085f0 <lv_obj_init_draw_rect_dsc+0x34c>)
  4085b2:	4798      	blx	r3
                draw_dsc->value_font = lv_obj_get_style_value_font(obj, part);
  4085b4:	6420      	str	r0, [r4, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
  4085b6:	2270      	movs	r2, #112	; 0x70
  4085b8:	4631      	mov	r1, r6
  4085ba:	4628      	mov	r0, r5
  4085bc:	47c0      	blx	r8
                draw_dsc->value_letter_space = lv_obj_get_style_value_letter_space(obj, part);
  4085be:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
  4085c2:	2271      	movs	r2, #113	; 0x71
  4085c4:	4631      	mov	r1, r6
  4085c6:	4628      	mov	r0, r5
  4085c8:	47c0      	blx	r8
                draw_dsc->value_line_space = lv_obj_get_style_value_line_space(obj, part);
  4085ca:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
  4085ce:	2275      	movs	r2, #117	; 0x75
  4085d0:	4631      	mov	r1, r6
  4085d2:	4628      	mov	r0, r5
  4085d4:	47c0      	blx	r8
                draw_dsc->value_align = lv_obj_get_style_value_align(obj, part);
  4085d6:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
  4085da:	2272      	movs	r2, #114	; 0x72
  4085dc:	4631      	mov	r1, r6
  4085de:	4628      	mov	r0, r5
  4085e0:	47c0      	blx	r8
                draw_dsc->value_blend_mode = lv_obj_get_style_value_blend_mode(obj, part);
  4085e2:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  4085e6:	e6ac      	b.n	408342 <lv_obj_init_draw_rect_dsc+0x9e>
  4085e8:	00406e61 	.word	0x00406e61
  4085ec:	00406dd9 	.word	0x00406dd9
  4085f0:	004072e5 	.word	0x004072e5
  4085f4:	004073ed 	.word	0x004073ed

004085f8 <lv_obj_design>:
{
  4085f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4085fc:	b09a      	sub	sp, #104	; 0x68
  4085fe:	4604      	mov	r4, r0
  408600:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
  408602:	2a02      	cmp	r2, #2
  408604:	d008      	beq.n	408618 <lv_obj_design+0x20>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  408606:	2a00      	cmp	r2, #0
  408608:	d06d      	beq.n	4086e6 <lv_obj_design+0xee>
    else if(mode == LV_DESIGN_DRAW_POST) {
  40860a:	2a01      	cmp	r2, #1
  40860c:	f000 80f4 	beq.w	4087f8 <lv_obj_design+0x200>
    return LV_DESIGN_RES_OK;
  408610:	2000      	movs	r0, #0
}
  408612:	b01a      	add	sp, #104	; 0x68
  408614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  408618:	2100      	movs	r1, #0
  40861a:	4ba3      	ldr	r3, [pc, #652]	; (4088a8 <lv_obj_design+0x2b0>)
  40861c:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
  40861e:	b108      	cbz	r0, 408624 <lv_obj_design+0x2c>
  408620:	2003      	movs	r0, #3
  408622:	e7f6      	b.n	408612 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  408624:	2201      	movs	r2, #1
  408626:	2100      	movs	r1, #0
  408628:	4620      	mov	r0, r4
  40862a:	4d9f      	ldr	r5, [pc, #636]	; (4088a8 <lv_obj_design+0x2b0>)
  40862c:	47a8      	blx	r5
  40862e:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  408630:	2204      	movs	r2, #4
  408632:	2100      	movs	r1, #0
  408634:	4620      	mov	r0, r4
  408636:	47a8      	blx	r5
  408638:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  40863a:	2205      	movs	r2, #5
  40863c:	2100      	movs	r1, #0
  40863e:	4620      	mov	r0, r4
  408640:	47a8      	blx	r5
        lv_area_copy(&coords, &obj->coords);
  408642:	f104 0110 	add.w	r1, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  408646:	aa05      	add	r2, sp, #20
  408648:	2308      	movs	r3, #8
    while(len) {
  40864a:	b12b      	cbz	r3, 408658 <lv_obj_design+0x60>
        *d8 = *s8;
  40864c:	f811 5b01 	ldrb.w	r5, [r1], #1
  408650:	f802 5b01 	strb.w	r5, [r2], #1
        len--;
  408654:	3b01      	subs	r3, #1
  408656:	e7f8      	b.n	40864a <lv_obj_design+0x52>
        coords.x1 -= w;
  408658:	fa1f f888 	uxth.w	r8, r8
  40865c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  408660:	eba3 0308 	sub.w	r3, r3, r8
  408664:	f8ad 3014 	strh.w	r3, [sp, #20]
        coords.x2 += w;
  408668:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40866c:	4498      	add	r8, r3
  40866e:	f8ad 8018 	strh.w	r8, [sp, #24]
        coords.y1 -= h;
  408672:	b280      	uxth	r0, r0
  408674:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  408678:	1a1b      	subs	r3, r3, r0
  40867a:	f8ad 3016 	strh.w	r3, [sp, #22]
        coords.y2 += h;
  40867e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  408682:	4418      	add	r0, r3
  408684:	f8ad 001a 	strh.w	r0, [sp, #26]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
  408688:	463a      	mov	r2, r7
  40868a:	a905      	add	r1, sp, #20
  40868c:	4630      	mov	r0, r6
  40868e:	4b87      	ldr	r3, [pc, #540]	; (4088ac <lv_obj_design+0x2b4>)
  408690:	4798      	blx	r3
  408692:	b908      	cbnz	r0, 408698 <lv_obj_design+0xa0>
  408694:	2002      	movs	r0, #2
  408696:	e7bc      	b.n	408612 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  408698:	222c      	movs	r2, #44	; 0x2c
  40869a:	2100      	movs	r1, #0
  40869c:	4620      	mov	r0, r4
  40869e:	4b84      	ldr	r3, [pc, #528]	; (4088b0 <lv_obj_design+0x2b8>)
  4086a0:	4798      	blx	r3
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  4086a2:	28fc      	cmp	r0, #252	; 0xfc
  4086a4:	d801      	bhi.n	4086aa <lv_obj_design+0xb2>
  4086a6:	2002      	movs	r0, #2
  4086a8:	e7b3      	b.n	408612 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  4086aa:	2220      	movs	r2, #32
  4086ac:	2100      	movs	r1, #0
  4086ae:	4620      	mov	r0, r4
  4086b0:	4b7d      	ldr	r3, [pc, #500]	; (4088a8 <lv_obj_design+0x2b0>)
  4086b2:	4798      	blx	r3
  4086b4:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  4086b6:	b108      	cbz	r0, 4086bc <lv_obj_design+0xc4>
  4086b8:	2002      	movs	r0, #2
  4086ba:	e7aa      	b.n	408612 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  4086bc:	2232      	movs	r2, #50	; 0x32
  4086be:	2100      	movs	r1, #0
  4086c0:	4620      	mov	r0, r4
  4086c2:	4b79      	ldr	r3, [pc, #484]	; (4088a8 <lv_obj_design+0x2b0>)
  4086c4:	4798      	blx	r3
  4086c6:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  4086c8:	b108      	cbz	r0, 4086ce <lv_obj_design+0xd6>
  4086ca:	2002      	movs	r0, #2
  4086cc:	e7a1      	b.n	408612 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  4086ce:	f248 020c 	movw	r2, #32780	; 0x800c
  4086d2:	2100      	movs	r1, #0
  4086d4:	4620      	mov	r0, r4
  4086d6:	4b76      	ldr	r3, [pc, #472]	; (4088b0 <lv_obj_design+0x2b8>)
  4086d8:	4798      	blx	r3
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  4086da:	28fc      	cmp	r0, #252	; 0xfc
  4086dc:	d901      	bls.n	4086e2 <lv_obj_design+0xea>
        return LV_DESIGN_RES_COVER;
  4086de:	2001      	movs	r0, #1
  4086e0:	e797      	b.n	408612 <lv_obj_design+0x1a>
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  4086e2:	2002      	movs	r0, #2
  4086e4:	e795      	b.n	408612 <lv_obj_design+0x1a>
        lv_draw_rect_dsc_init(&draw_dsc);
  4086e6:	a805      	add	r0, sp, #20
  4086e8:	4b72      	ldr	r3, [pc, #456]	; (4088b4 <lv_obj_design+0x2bc>)
  4086ea:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  4086ec:	2233      	movs	r2, #51	; 0x33
  4086ee:	2100      	movs	r1, #0
  4086f0:	4620      	mov	r0, r4
  4086f2:	4b6d      	ldr	r3, [pc, #436]	; (4088a8 <lv_obj_design+0x2b0>)
  4086f4:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
  4086f6:	b128      	cbz	r0, 408704 <lv_obj_design+0x10c>
            draw_dsc.border_post = 1;
  4086f8:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
  4086fc:	f043 0301 	orr.w	r3, r3, #1
  408700:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
  408704:	aa05      	add	r2, sp, #20
  408706:	2100      	movs	r1, #0
  408708:	4620      	mov	r0, r4
  40870a:	4b6b      	ldr	r3, [pc, #428]	; (4088b8 <lv_obj_design+0x2c0>)
  40870c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  40870e:	2204      	movs	r2, #4
  408710:	2100      	movs	r1, #0
  408712:	4620      	mov	r0, r4
  408714:	4d64      	ldr	r5, [pc, #400]	; (4088a8 <lv_obj_design+0x2b0>)
  408716:	47a8      	blx	r5
  408718:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  40871a:	2205      	movs	r2, #5
  40871c:	2100      	movs	r1, #0
  40871e:	4620      	mov	r0, r4
  408720:	47a8      	blx	r5
        lv_area_copy(&coords, &obj->coords);
  408722:	f104 0710 	add.w	r7, r4, #16
    const uint8_t * s8 = (const uint8_t *)src;
  408726:	4639      	mov	r1, r7
    uint8_t * d8 = (uint8_t *)dst;
  408728:	aa01      	add	r2, sp, #4
  40872a:	2308      	movs	r3, #8
  40872c:	e004      	b.n	408738 <lv_obj_design+0x140>
        *d8 = *s8;
  40872e:	f811 5b01 	ldrb.w	r5, [r1], #1
  408732:	f802 5b01 	strb.w	r5, [r2], #1
        len--;
  408736:	3b01      	subs	r3, #1
    while(len) {
  408738:	2b00      	cmp	r3, #0
  40873a:	d1f8      	bne.n	40872e <lv_obj_design+0x136>
        coords.x1 -= w;
  40873c:	fa1f f888 	uxth.w	r8, r8
  408740:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  408744:	eba3 0308 	sub.w	r3, r3, r8
  408748:	f8ad 3004 	strh.w	r3, [sp, #4]
        coords.x2 += w;
  40874c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  408750:	4498      	add	r8, r3
  408752:	f8ad 8008 	strh.w	r8, [sp, #8]
        coords.y1 -= h;
  408756:	b280      	uxth	r0, r0
  408758:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40875c:	1a1b      	subs	r3, r3, r0
  40875e:	f8ad 3006 	strh.w	r3, [sp, #6]
        coords.y2 += h;
  408762:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  408766:	4418      	add	r0, r3
  408768:	f8ad 000a 	strh.w	r0, [sp, #10]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
  40876c:	aa05      	add	r2, sp, #20
  40876e:	4631      	mov	r1, r6
  408770:	a801      	add	r0, sp, #4
  408772:	4b52      	ldr	r3, [pc, #328]	; (4088bc <lv_obj_design+0x2c4>)
  408774:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  408776:	2202      	movs	r2, #2
  408778:	2100      	movs	r1, #0
  40877a:	4620      	mov	r0, r4
  40877c:	4b4a      	ldr	r3, [pc, #296]	; (4088a8 <lv_obj_design+0x2b0>)
  40877e:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
  408780:	b908      	cbnz	r0, 408786 <lv_obj_design+0x18e>
    return LV_DESIGN_RES_OK;
  408782:	2000      	movs	r0, #0
  408784:	e745      	b.n	408612 <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
  408786:	201c      	movs	r0, #28
  408788:	4b4d      	ldr	r3, [pc, #308]	; (4088c0 <lv_obj_design+0x2c8>)
  40878a:	4798      	blx	r3
  40878c:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  40878e:	2201      	movs	r2, #1
  408790:	2100      	movs	r1, #0
  408792:	4620      	mov	r0, r4
  408794:	4b44      	ldr	r3, [pc, #272]	; (4088a8 <lv_obj_design+0x2b0>)
  408796:	4798      	blx	r3
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
  408798:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
  40879c:	f013 0f01 	tst.w	r3, #1
  4087a0:	d01e      	beq.n	4087e0 <lv_obj_design+0x1e8>
  4087a2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  4087a6:	2b01      	cmp	r3, #1
  4087a8:	d91a      	bls.n	4087e0 <lv_obj_design+0x1e8>
  4087aa:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
  4087ae:	2b00      	cmp	r3, #0
  4087b0:	dd16      	ble.n	4087e0 <lv_obj_design+0x1e8>
                cc_area.x1 = obj->coords.x1 + 1;
  4087b2:	8a23      	ldrh	r3, [r4, #16]
  4087b4:	3301      	adds	r3, #1
  4087b6:	f8ad 300c 	strh.w	r3, [sp, #12]
                cc_area.y1 = obj->coords.y1 + 1;
  4087ba:	8a63      	ldrh	r3, [r4, #18]
  4087bc:	3301      	adds	r3, #1
  4087be:	f8ad 300e 	strh.w	r3, [sp, #14]
                cc_area.x2 = obj->coords.x2 - 1;
  4087c2:	8aa3      	ldrh	r3, [r4, #20]
  4087c4:	3b01      	subs	r3, #1
  4087c6:	f8ad 3010 	strh.w	r3, [sp, #16]
                cc_area.y2 = obj->coords.y2 - 1;
  4087ca:	8ae3      	ldrh	r3, [r4, #22]
  4087cc:	3b01      	subs	r3, #1
  4087ce:	f8ad 3012 	strh.w	r3, [sp, #18]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
  4087d2:	2300      	movs	r3, #0
  4087d4:	4602      	mov	r2, r0
  4087d6:	a903      	add	r1, sp, #12
  4087d8:	4628      	mov	r0, r5
  4087da:	4e3a      	ldr	r6, [pc, #232]	; (4088c4 <lv_obj_design+0x2cc>)
  4087dc:	47b0      	blx	r6
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
  4087de:	e005      	b.n	4087ec <lv_obj_design+0x1f4>
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
  4087e0:	2300      	movs	r3, #0
  4087e2:	4602      	mov	r2, r0
  4087e4:	4639      	mov	r1, r7
  4087e6:	4628      	mov	r0, r5
  4087e8:	4e36      	ldr	r6, [pc, #216]	; (4088c4 <lv_obj_design+0x2cc>)
  4087ea:	47b0      	blx	r6
            lv_draw_mask_add(mp, obj + 8);
  4087ec:	f504 7118 	add.w	r1, r4, #608	; 0x260
  4087f0:	4628      	mov	r0, r5
  4087f2:	4b35      	ldr	r3, [pc, #212]	; (4088c8 <lv_obj_design+0x2d0>)
  4087f4:	4798      	blx	r3
  4087f6:	e7c4      	b.n	408782 <lv_obj_design+0x18a>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  4087f8:	2202      	movs	r2, #2
  4087fa:	2100      	movs	r1, #0
  4087fc:	4b2a      	ldr	r3, [pc, #168]	; (4088a8 <lv_obj_design+0x2b0>)
  4087fe:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
  408800:	b938      	cbnz	r0, 408812 <lv_obj_design+0x21a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  408802:	2233      	movs	r2, #51	; 0x33
  408804:	2100      	movs	r1, #0
  408806:	4620      	mov	r0, r4
  408808:	4b27      	ldr	r3, [pc, #156]	; (4088a8 <lv_obj_design+0x2b0>)
  40880a:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
  40880c:	b940      	cbnz	r0, 408820 <lv_obj_design+0x228>
    return LV_DESIGN_RES_OK;
  40880e:	2000      	movs	r0, #0
  408810:	e6ff      	b.n	408612 <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
  408812:	f504 7018 	add.w	r0, r4, #608	; 0x260
  408816:	4b2d      	ldr	r3, [pc, #180]	; (4088cc <lv_obj_design+0x2d4>)
  408818:	4798      	blx	r3
            _lv_mem_buf_release(param);
  40881a:	4b2d      	ldr	r3, [pc, #180]	; (4088d0 <lv_obj_design+0x2d8>)
  40881c:	4798      	blx	r3
  40881e:	e7f0      	b.n	408802 <lv_obj_design+0x20a>
            lv_draw_rect_dsc_init(&draw_dsc);
  408820:	a805      	add	r0, sp, #20
  408822:	4b24      	ldr	r3, [pc, #144]	; (4088b4 <lv_obj_design+0x2bc>)
  408824:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
  408826:	2500      	movs	r5, #0
  408828:	f88d 5020 	strb.w	r5, [sp, #32]
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
  40882c:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
  408830:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
            draw_dsc.value_opa = LV_OPA_TRANSP;
  408834:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
  408838:	aa05      	add	r2, sp, #20
  40883a:	4629      	mov	r1, r5
  40883c:	4620      	mov	r0, r4
  40883e:	4b1e      	ldr	r3, [pc, #120]	; (4088b8 <lv_obj_design+0x2c0>)
  408840:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  408842:	2204      	movs	r2, #4
  408844:	4629      	mov	r1, r5
  408846:	4620      	mov	r0, r4
  408848:	4f17      	ldr	r7, [pc, #92]	; (4088a8 <lv_obj_design+0x2b0>)
  40884a:	47b8      	blx	r7
  40884c:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  40884e:	2205      	movs	r2, #5
  408850:	4629      	mov	r1, r5
  408852:	4620      	mov	r0, r4
  408854:	47b8      	blx	r7
            lv_area_copy(&coords, &obj->coords);
  408856:	3410      	adds	r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  408858:	aa03      	add	r2, sp, #12
  40885a:	2308      	movs	r3, #8
  40885c:	e004      	b.n	408868 <lv_obj_design+0x270>
        *d8 = *s8;
  40885e:	f814 1b01 	ldrb.w	r1, [r4], #1
  408862:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  408866:	3b01      	subs	r3, #1
    while(len) {
  408868:	2b00      	cmp	r3, #0
  40886a:	d1f8      	bne.n	40885e <lv_obj_design+0x266>
            coords.x1 -= w;
  40886c:	fa1f f788 	uxth.w	r7, r8
  408870:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  408874:	1bdb      	subs	r3, r3, r7
  408876:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.x2 += w;
  40887a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40887e:	441f      	add	r7, r3
  408880:	f8ad 7010 	strh.w	r7, [sp, #16]
            coords.y1 -= h;
  408884:	b280      	uxth	r0, r0
  408886:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  40888a:	1a1b      	subs	r3, r3, r0
  40888c:	f8ad 300e 	strh.w	r3, [sp, #14]
            coords.y2 += h;
  408890:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  408894:	4418      	add	r0, r3
  408896:	f8ad 0012 	strh.w	r0, [sp, #18]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
  40889a:	aa05      	add	r2, sp, #20
  40889c:	4631      	mov	r1, r6
  40889e:	a803      	add	r0, sp, #12
  4088a0:	4b06      	ldr	r3, [pc, #24]	; (4088bc <lv_obj_design+0x2c4>)
  4088a2:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  4088a4:	2000      	movs	r0, #0
  4088a6:	e6b4      	b.n	408612 <lv_obj_design+0x1a>
  4088a8:	004073ed 	.word	0x004073ed
  4088ac:	00416759 	.word	0x00416759
  4088b0:	00406e61 	.word	0x00406e61
  4088b4:	0041338d 	.word	0x0041338d
  4088b8:	004082a5 	.word	0x004082a5
  4088bc:	004133d9 	.word	0x004133d9
  4088c0:	00417895 	.word	0x00417895
  4088c4:	00410d5d 	.word	0x00410d5d
  4088c8:	004109a5 	.word	0x004109a5
  4088cc:	00410a4d 	.word	0x00410a4d
  4088d0:	00417645 	.word	0x00417645

004088d4 <lv_obj_init_draw_label_dsc>:
{
  4088d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4088d6:	4605      	mov	r5, r0
  4088d8:	460e      	mov	r6, r1
  4088da:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
  4088dc:	f248 028c 	movw	r2, #32908	; 0x808c
  4088e0:	4b2a      	ldr	r3, [pc, #168]	; (40898c <lv_obj_init_draw_label_dsc+0xb8>)
  4088e2:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
  4088e4:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
  4088e6:	2802      	cmp	r0, #2
  4088e8:	d800      	bhi.n	4088ec <lv_obj_init_draw_label_dsc+0x18>
  4088ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  4088ec:	f248 020c 	movw	r2, #32780	; 0x800c
  4088f0:	4631      	mov	r1, r6
  4088f2:	4628      	mov	r0, r5
  4088f4:	4b25      	ldr	r3, [pc, #148]	; (40898c <lv_obj_init_draw_label_dsc+0xb8>)
  4088f6:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  4088f8:	28fc      	cmp	r0, #252	; 0xfc
  4088fa:	d805      	bhi.n	408908 <lv_obj_init_draw_label_dsc+0x34>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  4088fc:	7b23      	ldrb	r3, [r4, #12]
  4088fe:	fb10 f003 	smulbb	r0, r0, r3
  408902:	f3c0 2007 	ubfx	r0, r0, #8, #8
  408906:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
  408908:	7b23      	ldrb	r3, [r4, #12]
  40890a:	2b02      	cmp	r3, #2
  40890c:	d9ed      	bls.n	4088ea <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  40890e:	f248 0289 	movw	r2, #32905	; 0x8089
  408912:	4631      	mov	r1, r6
  408914:	4628      	mov	r0, r5
  408916:	4b1e      	ldr	r3, [pc, #120]	; (408990 <lv_obj_init_draw_label_dsc+0xbc>)
  408918:	4798      	blx	r3
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
  40891a:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  40891c:	f248 0280 	movw	r2, #32896	; 0x8080
  408920:	4631      	mov	r1, r6
  408922:	4628      	mov	r0, r5
  408924:	4f1b      	ldr	r7, [pc, #108]	; (408994 <lv_obj_init_draw_label_dsc+0xc0>)
  408926:	47b8      	blx	r7
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
  408928:	8220      	strh	r0, [r4, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  40892a:	f248 0281 	movw	r2, #32897	; 0x8081
  40892e:	4631      	mov	r1, r6
  408930:	4628      	mov	r0, r5
  408932:	47b8      	blx	r7
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
  408934:	81e0      	strh	r0, [r4, #14]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  408936:	f248 0282 	movw	r2, #32898	; 0x8082
  40893a:	4631      	mov	r1, r6
  40893c:	4628      	mov	r0, r5
  40893e:	47b8      	blx	r7
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
  408940:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
  408944:	f248 0283 	movw	r2, #32899	; 0x8083
  408948:	4631      	mov	r1, r6
  40894a:	4628      	mov	r0, r5
  40894c:	47b8      	blx	r7
    draw_dsc->blend_mode = lv_obj_get_style_text_blend_mode(obj, part);
  40894e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  408952:	f248 028e 	movw	r2, #32910	; 0x808e
  408956:	4631      	mov	r1, r6
  408958:	4628      	mov	r0, r5
  40895a:	4b0f      	ldr	r3, [pc, #60]	; (408998 <lv_obj_init_draw_label_dsc+0xc4>)
  40895c:	4798      	blx	r3
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
  40895e:	60a0      	str	r0, [r4, #8]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
  408960:	6962      	ldr	r2, [r4, #20]
  408962:	f64f 73ff 	movw	r3, #65535	; 0xffff
  408966:	429a      	cmp	r2, r3
  408968:	d0bf      	beq.n	4088ea <lv_obj_init_draw_label_dsc+0x16>
  40896a:	69a2      	ldr	r2, [r4, #24]
  40896c:	429a      	cmp	r2, r3
  40896e:	d0bc      	beq.n	4088ea <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
  408970:	f248 028a 	movw	r2, #32906	; 0x808a
  408974:	4631      	mov	r1, r6
  408976:	4628      	mov	r0, r5
  408978:	4f05      	ldr	r7, [pc, #20]	; (408990 <lv_obj_init_draw_label_dsc+0xbc>)
  40897a:	47b8      	blx	r7
        draw_dsc->sel_color = lv_obj_get_style_text_sel_color(obj, part);
  40897c:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
  40897e:	f248 028b 	movw	r2, #32907	; 0x808b
  408982:	4631      	mov	r1, r6
  408984:	4628      	mov	r0, r5
  408986:	47b8      	blx	r7
        draw_dsc->sel_bg_color = lv_obj_get_style_text_sel_bg_color(obj, part);
  408988:	80a0      	strh	r0, [r4, #4]
  40898a:	e7ae      	b.n	4088ea <lv_obj_init_draw_label_dsc+0x16>
  40898c:	00406e61 	.word	0x00406e61
  408990:	00406dd9 	.word	0x00406dd9
  408994:	004073ed 	.word	0x004073ed
  408998:	004072e5 	.word	0x004072e5

0040899c <lv_obj_init_draw_img_dsc>:
{
  40899c:	b570      	push	{r4, r5, r6, lr}
  40899e:	4605      	mov	r5, r0
  4089a0:	460e      	mov	r6, r1
  4089a2:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
  4089a4:	f248 02ac 	movw	r2, #32940	; 0x80ac
  4089a8:	4b25      	ldr	r3, [pc, #148]	; (408a40 <lv_obj_init_draw_img_dsc+0xa4>)
  4089aa:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
  4089ac:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  4089ae:	2802      	cmp	r0, #2
  4089b0:	d800      	bhi.n	4089b4 <lv_obj_init_draw_img_dsc+0x18>
  4089b2:	bd70      	pop	{r4, r5, r6, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  4089b4:	f248 020c 	movw	r2, #32780	; 0x800c
  4089b8:	4631      	mov	r1, r6
  4089ba:	4628      	mov	r0, r5
  4089bc:	4b20      	ldr	r3, [pc, #128]	; (408a40 <lv_obj_init_draw_img_dsc+0xa4>)
  4089be:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  4089c0:	28fc      	cmp	r0, #252	; 0xfc
  4089c2:	d805      	bhi.n	4089d0 <lv_obj_init_draw_img_dsc+0x34>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  4089c4:	7823      	ldrb	r3, [r4, #0]
  4089c6:	fb10 f003 	smulbb	r0, r0, r3
  4089ca:	f3c0 2007 	ubfx	r0, r0, #8, #8
  4089ce:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  4089d0:	7823      	ldrb	r3, [r4, #0]
  4089d2:	2b02      	cmp	r3, #2
  4089d4:	d9ed      	bls.n	4089b2 <lv_obj_init_draw_img_dsc+0x16>
    draw_dsc->angle = 0;
  4089d6:	2300      	movs	r3, #0
  4089d8:	8063      	strh	r3, [r4, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
  4089da:	f44f 7380 	mov.w	r3, #256	; 0x100
  4089de:	8123      	strh	r3, [r4, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4089e0:	8aab      	ldrh	r3, [r5, #20]
  4089e2:	8a2a      	ldrh	r2, [r5, #16]
  4089e4:	1a9b      	subs	r3, r3, r2
  4089e6:	b29b      	uxth	r3, r3
  4089e8:	3301      	adds	r3, #1
  4089ea:	b21b      	sxth	r3, r3
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
  4089ec:	2b00      	cmp	r3, #0
  4089ee:	db1b      	blt.n	408a28 <lv_obj_init_draw_img_dsc+0x8c>
  4089f0:	105b      	asrs	r3, r3, #1
  4089f2:	80a3      	strh	r3, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4089f4:	8aeb      	ldrh	r3, [r5, #22]
  4089f6:	8a6a      	ldrh	r2, [r5, #18]
  4089f8:	1a9b      	subs	r3, r3, r2
  4089fa:	b29b      	uxth	r3, r3
  4089fc:	3301      	adds	r3, #1
  4089fe:	b21b      	sxth	r3, r3
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
  408a00:	2b00      	cmp	r3, #0
  408a02:	db13      	blt.n	408a2c <lv_obj_init_draw_img_dsc+0x90>
  408a04:	105b      	asrs	r3, r3, #1
  408a06:	80e3      	strh	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  408a08:	f248 02ad 	movw	r2, #32941	; 0x80ad
  408a0c:	4631      	mov	r1, r6
  408a0e:	4628      	mov	r0, r5
  408a10:	4b0b      	ldr	r3, [pc, #44]	; (408a40 <lv_obj_init_draw_img_dsc+0xa4>)
  408a12:	4798      	blx	r3
    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
  408a14:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
  408a16:	b958      	cbnz	r0, 408a30 <lv_obj_init_draw_img_dsc+0x94>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  408a18:	f248 02a0 	movw	r2, #32928	; 0x80a0
  408a1c:	4631      	mov	r1, r6
  408a1e:	4628      	mov	r0, r5
  408a20:	4b08      	ldr	r3, [pc, #32]	; (408a44 <lv_obj_init_draw_img_dsc+0xa8>)
  408a22:	4798      	blx	r3
    draw_dsc->blend_mode = lv_obj_get_style_image_blend_mode(obj, part);
  408a24:	73a0      	strb	r0, [r4, #14]
  408a26:	e7c4      	b.n	4089b2 <lv_obj_init_draw_img_dsc+0x16>
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
  408a28:	3301      	adds	r3, #1
  408a2a:	e7e1      	b.n	4089f0 <lv_obj_init_draw_img_dsc+0x54>
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
  408a2c:	3301      	adds	r3, #1
  408a2e:	e7e9      	b.n	408a04 <lv_obj_init_draw_img_dsc+0x68>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  408a30:	f248 02a9 	movw	r2, #32937	; 0x80a9
  408a34:	4631      	mov	r1, r6
  408a36:	4628      	mov	r0, r5
  408a38:	4b03      	ldr	r3, [pc, #12]	; (408a48 <lv_obj_init_draw_img_dsc+0xac>)
  408a3a:	4798      	blx	r3
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
  408a3c:	81a0      	strh	r0, [r4, #12]
  408a3e:	e7eb      	b.n	408a18 <lv_obj_init_draw_img_dsc+0x7c>
  408a40:	00406e61 	.word	0x00406e61
  408a44:	004073ed 	.word	0x004073ed
  408a48:	00406dd9 	.word	0x00406dd9

00408a4c <lv_obj_init_draw_line_dsc>:
{
  408a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408a4e:	4605      	mov	r5, r0
  408a50:	460e      	mov	r6, r1
  408a52:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  408a54:	2290      	movs	r2, #144	; 0x90
  408a56:	4b24      	ldr	r3, [pc, #144]	; (408ae8 <lv_obj_init_draw_line_dsc+0x9c>)
  408a58:	4798      	blx	r3
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
  408a5a:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
  408a5c:	b900      	cbnz	r0, 408a60 <lv_obj_init_draw_line_dsc+0x14>
  408a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
  408a60:	229c      	movs	r2, #156	; 0x9c
  408a62:	4631      	mov	r1, r6
  408a64:	4628      	mov	r0, r5
  408a66:	4b21      	ldr	r3, [pc, #132]	; (408aec <lv_obj_init_draw_line_dsc+0xa0>)
  408a68:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
  408a6a:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  408a6c:	2802      	cmp	r0, #2
  408a6e:	d9f6      	bls.n	408a5e <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408a70:	f248 020c 	movw	r2, #32780	; 0x800c
  408a74:	4631      	mov	r1, r6
  408a76:	4628      	mov	r0, r5
  408a78:	4b1c      	ldr	r3, [pc, #112]	; (408aec <lv_obj_init_draw_line_dsc+0xa0>)
  408a7a:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  408a7c:	28fc      	cmp	r0, #252	; 0xfc
  408a7e:	d805      	bhi.n	408a8c <lv_obj_init_draw_line_dsc+0x40>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  408a80:	7a23      	ldrb	r3, [r4, #8]
  408a82:	fb10 f003 	smulbb	r0, r0, r3
  408a86:	f3c0 2007 	ubfx	r0, r0, #8, #8
  408a8a:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  408a8c:	7a23      	ldrb	r3, [r4, #8]
  408a8e:	2b02      	cmp	r3, #2
  408a90:	d9e5      	bls.n	408a5e <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  408a92:	2299      	movs	r2, #153	; 0x99
  408a94:	4631      	mov	r1, r6
  408a96:	4628      	mov	r0, r5
  408a98:	4b15      	ldr	r3, [pc, #84]	; (408af0 <lv_obj_init_draw_line_dsc+0xa4>)
  408a9a:	4798      	blx	r3
    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
  408a9c:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
  408a9e:	2292      	movs	r2, #146	; 0x92
  408aa0:	4631      	mov	r1, r6
  408aa2:	4628      	mov	r0, r5
  408aa4:	4b10      	ldr	r3, [pc, #64]	; (408ae8 <lv_obj_init_draw_line_dsc+0x9c>)
  408aa6:	4798      	blx	r3
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
  408aa8:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
  408aaa:	b9b0      	cbnz	r0, 408ada <lv_obj_init_draw_line_dsc+0x8e>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  408aac:	2294      	movs	r2, #148	; 0x94
  408aae:	4631      	mov	r1, r6
  408ab0:	4628      	mov	r0, r5
  408ab2:	4f0d      	ldr	r7, [pc, #52]	; (408ae8 <lv_obj_init_draw_line_dsc+0x9c>)
  408ab4:	47b8      	blx	r7
  408ab6:	3000      	adds	r0, #0
  408ab8:	bf18      	it	ne
  408aba:	2001      	movne	r0, #1
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
  408abc:	7a63      	ldrb	r3, [r4, #9]
  408abe:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
  408ac2:	f360 03c3 	bfi	r3, r0, #3, #1
  408ac6:	7263      	strb	r3, [r4, #9]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
  408ac8:	2291      	movs	r2, #145	; 0x91
  408aca:	4631      	mov	r1, r6
  408acc:	4628      	mov	r0, r5
  408ace:	47b8      	blx	r7
    draw_dsc->blend_mode = lv_obj_get_style_line_blend_mode(obj, part);
  408ad0:	7a63      	ldrb	r3, [r4, #9]
  408ad2:	f360 0301 	bfi	r3, r0, #0, #2
  408ad6:	7263      	strb	r3, [r4, #9]
  408ad8:	e7c1      	b.n	408a5e <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
  408ada:	2293      	movs	r2, #147	; 0x93
  408adc:	4631      	mov	r1, r6
  408ade:	4628      	mov	r0, r5
  408ae0:	4b01      	ldr	r3, [pc, #4]	; (408ae8 <lv_obj_init_draw_line_dsc+0x9c>)
  408ae2:	4798      	blx	r3
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
  408ae4:	80e0      	strh	r0, [r4, #6]
  408ae6:	e7e1      	b.n	408aac <lv_obj_init_draw_line_dsc+0x60>
  408ae8:	004073ed 	.word	0x004073ed
  408aec:	00406e61 	.word	0x00406e61
  408af0:	00406dd9 	.word	0x00406dd9

00408af4 <style_snapshot>:
{
  408af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408af8:	b083      	sub	sp, #12
  408afa:	4605      	mov	r5, r0
  408afc:	4689      	mov	r9, r1
  408afe:	4614      	mov	r4, r2
    _lv_obj_disable_style_caching(obj, true);
  408b00:	2101      	movs	r1, #1
  408b02:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 408cf4 <style_snapshot+0x200>
  408b06:	47c0      	blx	r8
    _lv_memset_00(shot, sizeof(style_snapshot_t));
  408b08:	21bc      	movs	r1, #188	; 0xbc
  408b0a:	4620      	mov	r0, r4
  408b0c:	4b6d      	ldr	r3, [pc, #436]	; (408cc4 <style_snapshot+0x1d0>)
  408b0e:	4798      	blx	r3
    lv_draw_rect_dsc_init(&shot->rect);
  408b10:	4620      	mov	r0, r4
  408b12:	4b6d      	ldr	r3, [pc, #436]	; (408cc8 <style_snapshot+0x1d4>)
  408b14:	4798      	blx	r3
    lv_draw_label_dsc_init(&shot->label);
  408b16:	f104 0a54 	add.w	sl, r4, #84	; 0x54
  408b1a:	4650      	mov	r0, sl
  408b1c:	4b6b      	ldr	r3, [pc, #428]	; (408ccc <style_snapshot+0x1d8>)
  408b1e:	4798      	blx	r3
    lv_draw_img_dsc_init(&shot->img);
  408b20:	f104 0382 	add.w	r3, r4, #130	; 0x82
  408b24:	9301      	str	r3, [sp, #4]
  408b26:	4618      	mov	r0, r3
  408b28:	4b69      	ldr	r3, [pc, #420]	; (408cd0 <style_snapshot+0x1dc>)
  408b2a:	4798      	blx	r3
    lv_draw_line_dsc_init(&shot->line);
  408b2c:	f104 0678 	add.w	r6, r4, #120	; 0x78
  408b30:	4630      	mov	r0, r6
  408b32:	4b68      	ldr	r3, [pc, #416]	; (408cd4 <style_snapshot+0x1e0>)
  408b34:	4798      	blx	r3
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  408b36:	4649      	mov	r1, r9
  408b38:	4628      	mov	r0, r5
  408b3a:	4b67      	ldr	r3, [pc, #412]	; (408cd8 <style_snapshot+0x1e4>)
  408b3c:	4798      	blx	r3
  408b3e:	4607      	mov	r7, r0
    bool trans_ori = list->skip_trans;
  408b40:	7943      	ldrb	r3, [r0, #5]
  408b42:	f003 0b01 	and.w	fp, r3, #1
    list->skip_trans = 1;
  408b46:	f043 0301 	orr.w	r3, r3, #1
  408b4a:	7143      	strb	r3, [r0, #5]
    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
  408b4c:	4622      	mov	r2, r4
  408b4e:	4649      	mov	r1, r9
  408b50:	4628      	mov	r0, r5
  408b52:	4b62      	ldr	r3, [pc, #392]	; (408cdc <style_snapshot+0x1e8>)
  408b54:	4798      	blx	r3
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
  408b56:	4652      	mov	r2, sl
  408b58:	4649      	mov	r1, r9
  408b5a:	4628      	mov	r0, r5
  408b5c:	4b60      	ldr	r3, [pc, #384]	; (408ce0 <style_snapshot+0x1ec>)
  408b5e:	4798      	blx	r3
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
  408b60:	9a01      	ldr	r2, [sp, #4]
  408b62:	4649      	mov	r1, r9
  408b64:	4628      	mov	r0, r5
  408b66:	4b5f      	ldr	r3, [pc, #380]	; (408ce4 <style_snapshot+0x1f0>)
  408b68:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
  408b6a:	4632      	mov	r2, r6
  408b6c:	4649      	mov	r1, r9
  408b6e:	4628      	mov	r0, r5
  408b70:	4b5d      	ldr	r3, [pc, #372]	; (408ce8 <style_snapshot+0x1f4>)
  408b72:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  408b74:	2210      	movs	r2, #16
  408b76:	4649      	mov	r1, r9
  408b78:	4628      	mov	r0, r5
  408b7a:	4e5c      	ldr	r6, [pc, #368]	; (408cec <style_snapshot+0x1f8>)
  408b7c:	47b0      	blx	r6
    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
  408b7e:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  408b82:	2211      	movs	r2, #17
  408b84:	4649      	mov	r1, r9
  408b86:	4628      	mov	r0, r5
  408b88:	47b0      	blx	r6
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
  408b8a:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  408b8e:	2213      	movs	r2, #19
  408b90:	4649      	mov	r1, r9
  408b92:	4628      	mov	r0, r5
  408b94:	47b0      	blx	r6
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
  408b96:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  408b9a:	2212      	movs	r2, #18
  408b9c:	4649      	mov	r1, r9
  408b9e:	4628      	mov	r0, r5
  408ba0:	47b0      	blx	r6
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
  408ba2:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  408ba6:	2214      	movs	r2, #20
  408ba8:	4649      	mov	r1, r9
  408baa:	4628      	mov	r0, r5
  408bac:	47b0      	blx	r6
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
  408bae:	f8a4 009a 	strh.w	r0, [r4, #154]	; 0x9a
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  408bb2:	2215      	movs	r2, #21
  408bb4:	4649      	mov	r1, r9
  408bb6:	4628      	mov	r0, r5
  408bb8:	47b0      	blx	r6
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
  408bba:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  408bbe:	2216      	movs	r2, #22
  408bc0:	4649      	mov	r1, r9
  408bc2:	4628      	mov	r0, r5
  408bc4:	47b0      	blx	r6
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
  408bc6:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  408bca:	2217      	movs	r2, #23
  408bcc:	4649      	mov	r1, r9
  408bce:	4628      	mov	r0, r5
  408bd0:	47b0      	blx	r6
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
  408bd2:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  408bd6:	2218      	movs	r2, #24
  408bd8:	4649      	mov	r1, r9
  408bda:	4628      	mov	r0, r5
  408bdc:	47b0      	blx	r6
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
  408bde:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  408be2:	2203      	movs	r2, #3
  408be4:	4649      	mov	r1, r9
  408be6:	4628      	mov	r0, r5
  408be8:	47b0      	blx	r6
    shot->size = lv_obj_get_style_size(obj, part);
  408bea:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  408bee:	2204      	movs	r2, #4
  408bf0:	4649      	mov	r1, r9
  408bf2:	4628      	mov	r0, r5
  408bf4:	47b0      	blx	r6
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
  408bf6:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  408bfa:	2205      	movs	r2, #5
  408bfc:	4649      	mov	r1, r9
  408bfe:	4628      	mov	r0, r5
  408c00:	47b0      	blx	r6
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
  408c02:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  408c06:	2206      	movs	r2, #6
  408c08:	4649      	mov	r1, r9
  408c0a:	4628      	mov	r0, r5
  408c0c:	47b0      	blx	r6
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
  408c0e:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  408c12:	2207      	movs	r2, #7
  408c14:	4649      	mov	r1, r9
  408c16:	4628      	mov	r0, r5
  408c18:	47b0      	blx	r6
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
  408c1a:	f8a4 00ac 	strh.w	r0, [r4, #172]	; 0xac
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  408c1e:	22c0      	movs	r2, #192	; 0xc0
  408c20:	4649      	mov	r1, r9
  408c22:	4628      	mov	r0, r5
  408c24:	47b0      	blx	r6
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
  408c26:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
  408c2a:	22c1      	movs	r2, #193	; 0xc1
  408c2c:	4649      	mov	r1, r9
  408c2e:	4628      	mov	r0, r5
  408c30:	47b0      	blx	r6
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
  408c32:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
  408c36:	22c2      	movs	r2, #194	; 0xc2
  408c38:	4649      	mov	r1, r9
  408c3a:	4628      	mov	r0, r5
  408c3c:	47b0      	blx	r6
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
  408c3e:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  408c42:	22c3      	movs	r2, #195	; 0xc3
  408c44:	4649      	mov	r1, r9
  408c46:	4628      	mov	r0, r5
  408c48:	47b0      	blx	r6
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
  408c4a:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  408c4e:	22c9      	movs	r2, #201	; 0xc9
  408c50:	4649      	mov	r1, r9
  408c52:	4628      	mov	r0, r5
  408c54:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 408cf8 <style_snapshot+0x204>
  408c58:	47d0      	blx	sl
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
  408c5a:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  408c5e:	22ca      	movs	r2, #202	; 0xca
  408c60:	4649      	mov	r1, r9
  408c62:	4628      	mov	r0, r5
  408c64:	47d0      	blx	sl
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
  408c66:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408c6a:	f248 020c 	movw	r2, #32780	; 0x800c
  408c6e:	4649      	mov	r1, r9
  408c70:	4628      	mov	r0, r5
  408c72:	4b1f      	ldr	r3, [pc, #124]	; (408cf0 <style_snapshot+0x1fc>)
  408c74:	4798      	blx	r3
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
  408c76:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  408c7a:	2202      	movs	r2, #2
  408c7c:	4649      	mov	r1, r9
  408c7e:	4628      	mov	r0, r5
  408c80:	47b0      	blx	r6
  408c82:	3000      	adds	r0, #0
  408c84:	bf18      	it	ne
  408c86:	2001      	movne	r0, #1
    shot->clip_corner = lv_obj_get_style_clip_corner(obj, part);
  408c88:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
  408c8c:	f360 0300 	bfi	r3, r0, #0, #1
  408c90:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  408c94:	2233      	movs	r2, #51	; 0x33
  408c96:	4649      	mov	r1, r9
  408c98:	4628      	mov	r0, r5
  408c9a:	47b0      	blx	r6
  408c9c:	3000      	adds	r0, #0
  408c9e:	bf18      	it	ne
  408ca0:	2001      	movne	r0, #1
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
  408ca2:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
  408ca6:	f360 0341 	bfi	r3, r0, #1, #1
  408caa:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
    _lv_obj_disable_style_caching(obj, false);
  408cae:	2100      	movs	r1, #0
  408cb0:	4628      	mov	r0, r5
  408cb2:	47c0      	blx	r8
    list->skip_trans = trans_ori;
  408cb4:	797b      	ldrb	r3, [r7, #5]
  408cb6:	f36b 0300 	bfi	r3, fp, #0, #1
  408cba:	717b      	strb	r3, [r7, #5]
}
  408cbc:	b003      	add	sp, #12
  408cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408cc2:	bf00      	nop
  408cc4:	00417a21 	.word	0x00417a21
  408cc8:	0041338d 	.word	0x0041338d
  408ccc:	0040e919 	.word	0x0040e919
  408cd0:	0040dd85 	.word	0x0040dd85
  408cd4:	0040f769 	.word	0x0040f769
  408cd8:	00405bb5 	.word	0x00405bb5
  408cdc:	004082a5 	.word	0x004082a5
  408ce0:	004088d5 	.word	0x004088d5
  408ce4:	0040899d 	.word	0x0040899d
  408ce8:	00408a4d 	.word	0x00408a4d
  408cec:	004073ed 	.word	0x004073ed
  408cf0:	00406e61 	.word	0x00406e61
  408cf4:	00405ca9 	.word	0x00405ca9
  408cf8:	00406dd9 	.word	0x00406dd9

00408cfc <lv_obj_set_state>:
    if(obj->state == new_state) return;
  408cfc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  408d00:	428b      	cmp	r3, r1
  408d02:	f000 80e4 	beq.w	408ece <lv_obj_set_state+0x1d2>
{
  408d06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408d0a:	b0e5      	sub	sp, #404	; 0x194
  408d0c:	4688      	mov	r8, r1
  408d0e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408d10:	4b6f      	ldr	r3, [pc, #444]	; (408ed0 <lv_obj_set_state+0x1d4>)
  408d12:	4798      	blx	r3
  408d14:	b120      	cbz	r0, 408d20 <lv_obj_set_state+0x24>
    lv_state_t prev_state = obj->state;
  408d16:	f894 a03d 	ldrb.w	sl, [r4, #61]	; 0x3d
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  408d1a:	2500      	movs	r5, #0
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
  408d1c:	46ab      	mov	fp, r5
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  408d1e:	e007      	b.n	408d30 <lv_obj_set_state+0x34>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408d20:	4622      	mov	r2, r4
  408d22:	2300      	movs	r3, #0
  408d24:	486b      	ldr	r0, [pc, #428]	; (408ed4 <lv_obj_set_state+0x1d8>)
  408d26:	496c      	ldr	r1, [pc, #432]	; (408ed8 <lv_obj_set_state+0x1dc>)
  408d28:	4788      	blx	r1
  408d2a:	e7fe      	b.n	408d2a <lv_obj_set_state+0x2e>
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  408d2c:	3501      	adds	r5, #1
  408d2e:	b2ed      	uxtb	r5, r5
  408d30:	2d3f      	cmp	r5, #63	; 0x3f
  408d32:	d81c      	bhi.n	408d6e <lv_obj_set_state+0x72>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  408d34:	4629      	mov	r1, r5
  408d36:	4620      	mov	r0, r4
  408d38:	4b68      	ldr	r3, [pc, #416]	; (408edc <lv_obj_set_state+0x1e0>)
  408d3a:	4798      	blx	r3
        if(style_list == NULL) break;   /*No more style lists*/
  408d3c:	b1b8      	cbz	r0, 408d6e <lv_obj_set_state+0x72>
        obj->state = prev_state;
  408d3e:	f884 a03d 	strb.w	sl, [r4, #61]	; 0x3d
        style_snapshot(obj, part, &shot_pre);
  408d42:	aa06      	add	r2, sp, #24
  408d44:	4629      	mov	r1, r5
  408d46:	4620      	mov	r0, r4
  408d48:	4e65      	ldr	r6, [pc, #404]	; (408ee0 <lv_obj_set_state+0x1e4>)
  408d4a:	47b0      	blx	r6
        obj->state = new_state;
  408d4c:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        style_snapshot(obj, part, &shot_post);
  408d50:	aa35      	add	r2, sp, #212	; 0xd4
  408d52:	4629      	mov	r1, r5
  408d54:	4620      	mov	r0, r4
  408d56:	47b0      	blx	r6
        style_snapshot_res_t r = style_snapshot_compare(&shot_pre, &shot_post);
  408d58:	a935      	add	r1, sp, #212	; 0xd4
  408d5a:	a806      	add	r0, sp, #24
  408d5c:	4b61      	ldr	r3, [pc, #388]	; (408ee4 <lv_obj_set_state+0x1e8>)
  408d5e:	4798      	blx	r3
        if(r == STYLE_COMPARE_DIFF) {
  408d60:	2802      	cmp	r0, #2
  408d62:	d003      	beq.n	408d6c <lv_obj_set_state+0x70>
        if(r == STYLE_COMPARE_VISUAL_DIFF) {
  408d64:	2801      	cmp	r0, #1
  408d66:	d1e1      	bne.n	408d2c <lv_obj_set_state+0x30>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
  408d68:	4683      	mov	fp, r0
  408d6a:	e7df      	b.n	408d2c <lv_obj_set_state+0x30>
            cmp_res = STYLE_COMPARE_DIFF;
  408d6c:	4683      	mov	fp, r0
    obj->state = new_state;
  408d6e:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    if(cmp_res == STYLE_COMPARE_SAME) {
  408d72:	f1bb 0f00 	cmp.w	fp, #0
  408d76:	f000 80a3 	beq.w	408ec0 <lv_obj_set_state+0x1c4>
  408d7a:	2500      	movs	r5, #0
  408d7c:	f8cd a014 	str.w	sl, [sp, #20]
  408d80:	e04b      	b.n	408e1a <lv_obj_set_state+0x11e>
                    a.early_apply = 0;
  408d82:	f89d 310e 	ldrb.w	r3, [sp, #270]	; 0x10e
  408d86:	f36f 0300 	bfc	r3, #0, #1
  408d8a:	f88d 310e 	strb.w	r3, [sp, #270]	; 0x10e
                    lv_anim_start(&a);
  408d8e:	a835      	add	r0, sp, #212	; 0xd4
  408d90:	4b55      	ldr	r3, [pc, #340]	; (408ee8 <lv_obj_set_state+0x1ec>)
  408d92:	4798      	blx	r3
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
  408d94:	3601      	adds	r6, #1
  408d96:	b2f6      	uxtb	r6, r6
  408d98:	2e05      	cmp	r6, #5
  408d9a:	d836      	bhi.n	408e0a <lv_obj_set_state+0x10e>
            if(props[i] != 0) {
  408d9c:	ab06      	add	r3, sp, #24
  408d9e:	f833 7016 	ldrh.w	r7, [r3, r6, lsl #1]
  408da2:	2f00      	cmp	r7, #0
  408da4:	d0f6      	beq.n	408d94 <lv_obj_set_state+0x98>
                _lv_style_list_add_trans_style(style_list);
  408da6:	4650      	mov	r0, sl
  408da8:	4b50      	ldr	r3, [pc, #320]	; (408eec <lv_obj_set_state+0x1f0>)
  408daa:	4798      	blx	r3
                lv_style_trans_t * tr = trans_create(obj, props[i], part, prev_state, new_state);
  408dac:	f8cd 8000 	str.w	r8, [sp]
  408db0:	9b05      	ldr	r3, [sp, #20]
  408db2:	462a      	mov	r2, r5
  408db4:	4639      	mov	r1, r7
  408db6:	4620      	mov	r0, r4
  408db8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 408f14 <lv_obj_set_state+0x218>
  408dbc:	47c8      	blx	r9
                if(tr) {
  408dbe:	4681      	mov	r9, r0
  408dc0:	2800      	cmp	r0, #0
  408dc2:	d0e7      	beq.n	408d94 <lv_obj_set_state+0x98>
                    tr->obj = obj;
  408dc4:	6004      	str	r4, [r0, #0]
                    tr->prop = props[i];
  408dc6:	8087      	strh	r7, [r0, #4]
                    tr->part = part;
  408dc8:	7185      	strb	r5, [r0, #6]
                    lv_anim_init(&a);
  408dca:	a835      	add	r0, sp, #212	; 0xd4
  408dcc:	4b48      	ldr	r3, [pc, #288]	; (408ef0 <lv_obj_set_state+0x1f4>)
  408dce:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
  408dd0:	f8cd 90d4 	str.w	r9, [sp, #212]	; 0xd4
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
  408dd4:	4b47      	ldr	r3, [pc, #284]	; (408ef4 <lv_obj_set_state+0x1f8>)
  408dd6:	9336      	str	r3, [sp, #216]	; 0xd8
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start_cb a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)
{
    a->start_cb = start_cb;
  408dd8:	4b47      	ldr	r3, [pc, #284]	; (408ef8 <lv_obj_set_state+0x1fc>)
  408dda:	9337      	str	r3, [sp, #220]	; 0xdc
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
  408ddc:	4b47      	ldr	r3, [pc, #284]	; (408efc <lv_obj_set_state+0x200>)
  408dde:	9338      	str	r3, [sp, #224]	; 0xe0
    a->start = start;
  408de0:	2300      	movs	r3, #0
  408de2:	933b      	str	r3, [sp, #236]	; 0xec
    a->current = start;
  408de4:	933c      	str	r3, [sp, #240]	; 0xf0
    a->end   = end;
  408de6:	23ff      	movs	r3, #255	; 0xff
  408de8:	933d      	str	r3, [sp, #244]	; 0xf4
    a->time     = duration;
  408dea:	9b04      	ldr	r3, [sp, #16]
  408dec:	933e      	str	r3, [sp, #248]	; 0xf8
    a->act_time = -(int32_t)(delay);
  408dee:	9b03      	ldr	r3, [sp, #12]
  408df0:	425b      	negs	r3, r3
  408df2:	933f      	str	r3, [sp, #252]	; 0xfc
    const uint8_t * s8 = (const uint8_t *)src;
  408df4:	9902      	ldr	r1, [sp, #8]
    uint8_t * d8 = (uint8_t *)dst;
  408df6:	aa39      	add	r2, sp, #228	; 0xe4
  408df8:	2308      	movs	r3, #8
    while(len) {
  408dfa:	2b00      	cmp	r3, #0
  408dfc:	d0c1      	beq.n	408d82 <lv_obj_set_state+0x86>
        *d8 = *s8;
  408dfe:	f811 0b01 	ldrb.w	r0, [r1], #1
  408e02:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  408e06:	3b01      	subs	r3, #1
  408e08:	e7f7      	b.n	408dfa <lv_obj_set_state+0xfe>
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  408e0a:	f1bb 0f02 	cmp.w	fp, #2
  408e0e:	d048      	beq.n	408ea2 <lv_obj_set_state+0x1a6>
        if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
  408e10:	f1bb 0f01 	cmp.w	fp, #1
  408e14:	d04b      	beq.n	408eae <lv_obj_set_state+0x1b2>
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
  408e16:	3501      	adds	r5, #1
  408e18:	b2ed      	uxtb	r5, r5
  408e1a:	2d3f      	cmp	r5, #63	; 0x3f
  408e1c:	d84d      	bhi.n	408eba <lv_obj_set_state+0x1be>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  408e1e:	4629      	mov	r1, r5
  408e20:	4620      	mov	r0, r4
  408e22:	4b2e      	ldr	r3, [pc, #184]	; (408edc <lv_obj_set_state+0x1e0>)
  408e24:	4798      	blx	r3
        if(style_list == NULL) break;   /*No more style lists*/
  408e26:	4682      	mov	sl, r0
  408e28:	2800      	cmp	r0, #0
  408e2a:	d046      	beq.n	408eba <lv_obj_set_state+0x1be>
        if(style_list->ignore_trans) continue;
  408e2c:	7943      	ldrb	r3, [r0, #5]
  408e2e:	f013 0f02 	tst.w	r3, #2
  408e32:	d1f0      	bne.n	408e16 <lv_obj_set_state+0x11a>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  408e34:	22b0      	movs	r2, #176	; 0xb0
  408e36:	4629      	mov	r1, r5
  408e38:	4620      	mov	r0, r4
  408e3a:	4e31      	ldr	r6, [pc, #196]	; (408f00 <lv_obj_set_state+0x204>)
  408e3c:	47b0      	blx	r6
  408e3e:	9004      	str	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
  408e40:	22b1      	movs	r2, #177	; 0xb1
  408e42:	4629      	mov	r1, r5
  408e44:	4620      	mov	r0, r4
  408e46:	47b0      	blx	r6
  408e48:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
  408e4a:	22be      	movs	r2, #190	; 0xbe
  408e4c:	4629      	mov	r1, r5
  408e4e:	4620      	mov	r0, r4
  408e50:	4b2c      	ldr	r3, [pc, #176]	; (408f04 <lv_obj_set_state+0x208>)
  408e52:	4798      	blx	r3
  408e54:	9002      	str	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
  408e56:	22b2      	movs	r2, #178	; 0xb2
  408e58:	4629      	mov	r1, r5
  408e5a:	4620      	mov	r0, r4
  408e5c:	47b0      	blx	r6
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
  408e5e:	f8ad 0018 	strh.w	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
  408e62:	22b3      	movs	r2, #179	; 0xb3
  408e64:	4629      	mov	r1, r5
  408e66:	4620      	mov	r0, r4
  408e68:	47b0      	blx	r6
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
  408e6a:	f8ad 001a 	strh.w	r0, [sp, #26]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
  408e6e:	22b4      	movs	r2, #180	; 0xb4
  408e70:	4629      	mov	r1, r5
  408e72:	4620      	mov	r0, r4
  408e74:	47b0      	blx	r6
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
  408e76:	f8ad 001c 	strh.w	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
  408e7a:	22b5      	movs	r2, #181	; 0xb5
  408e7c:	4629      	mov	r1, r5
  408e7e:	4620      	mov	r0, r4
  408e80:	47b0      	blx	r6
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
  408e82:	f8ad 001e 	strh.w	r0, [sp, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  408e86:	22b6      	movs	r2, #182	; 0xb6
  408e88:	4629      	mov	r1, r5
  408e8a:	4620      	mov	r0, r4
  408e8c:	47b0      	blx	r6
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
  408e8e:	f8ad 0020 	strh.w	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  408e92:	22b7      	movs	r2, #183	; 0xb7
  408e94:	4629      	mov	r1, r5
  408e96:	4620      	mov	r0, r4
  408e98:	47b0      	blx	r6
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
  408e9a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
  408e9e:	2600      	movs	r6, #0
  408ea0:	e77a      	b.n	408d98 <lv_obj_set_state+0x9c>
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  408ea2:	22ff      	movs	r2, #255	; 0xff
  408ea4:	4629      	mov	r1, r5
  408ea6:	4620      	mov	r0, r4
  408ea8:	4b17      	ldr	r3, [pc, #92]	; (408f08 <lv_obj_set_state+0x20c>)
  408eaa:	4798      	blx	r3
  408eac:	e7b0      	b.n	408e10 <lv_obj_set_state+0x114>
            invalidate_style_cache(obj, part, LV_STYLE_PROP_ALL);
  408eae:	22ff      	movs	r2, #255	; 0xff
  408eb0:	4629      	mov	r1, r5
  408eb2:	4620      	mov	r0, r4
  408eb4:	4b15      	ldr	r3, [pc, #84]	; (408f0c <lv_obj_set_state+0x210>)
  408eb6:	4798      	blx	r3
  408eb8:	e7ad      	b.n	408e16 <lv_obj_set_state+0x11a>
    if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
  408eba:	f1bb 0f01 	cmp.w	fp, #1
  408ebe:	d002      	beq.n	408ec6 <lv_obj_set_state+0x1ca>
}
  408ec0:	b065      	add	sp, #404	; 0x194
  408ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_invalidate(obj);
  408ec6:	4620      	mov	r0, r4
  408ec8:	4b11      	ldr	r3, [pc, #68]	; (408f10 <lv_obj_set_state+0x214>)
  408eca:	4798      	blx	r3
  408ecc:	e7f8      	b.n	408ec0 <lv_obj_set_state+0x1c4>
  408ece:	4770      	bx	lr
  408ed0:	00416da9 	.word	0x00416da9
  408ed4:	0042e560 	.word	0x0042e560
  408ed8:	00416db5 	.word	0x00416db5
  408edc:	00405bb5 	.word	0x00405bb5
  408ee0:	00408af5 	.word	0x00408af5
  408ee4:	00405455 	.word	0x00405455
  408ee8:	00416375 	.word	0x00416375
  408eec:	0040ad35 	.word	0x0040ad35
  408ef0:	004162bd 	.word	0x004162bd
  408ef4:	00407ad9 	.word	0x00407ad9
  408ef8:	00407c31 	.word	0x00407c31
  408efc:	00405cf1 	.word	0x00405cf1
  408f00:	004073ed 	.word	0x004073ed
  408f04:	004072e5 	.word	0x004072e5
  408f08:	00407809 	.word	0x00407809
  408f0c:	0040778d 	.word	0x0040778d
  408f10:	00405f01 	.word	0x00405f01
  408f14:	00407ca5 	.word	0x00407ca5

00408f18 <lv_obj_add_state>:
{
  408f18:	b538      	push	{r3, r4, r5, lr}
  408f1a:	4605      	mov	r5, r0
  408f1c:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408f1e:	4b09      	ldr	r3, [pc, #36]	; (408f44 <lv_obj_add_state+0x2c>)
  408f20:	4798      	blx	r3
  408f22:	b148      	cbz	r0, 408f38 <lv_obj_add_state+0x20>
    lv_state_t new_state = obj->state | state;
  408f24:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
  408f28:	ea43 0104 	orr.w	r1, r3, r4
    if(obj->state != new_state) {
  408f2c:	428b      	cmp	r3, r1
  408f2e:	d002      	beq.n	408f36 <lv_obj_add_state+0x1e>
        lv_obj_set_state(obj, new_state);
  408f30:	4628      	mov	r0, r5
  408f32:	4b05      	ldr	r3, [pc, #20]	; (408f48 <lv_obj_add_state+0x30>)
  408f34:	4798      	blx	r3
  408f36:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408f38:	462a      	mov	r2, r5
  408f3a:	2300      	movs	r3, #0
  408f3c:	4803      	ldr	r0, [pc, #12]	; (408f4c <lv_obj_add_state+0x34>)
  408f3e:	4904      	ldr	r1, [pc, #16]	; (408f50 <lv_obj_add_state+0x38>)
  408f40:	4788      	blx	r1
  408f42:	e7fe      	b.n	408f42 <lv_obj_add_state+0x2a>
  408f44:	00416da9 	.word	0x00416da9
  408f48:	00408cfd 	.word	0x00408cfd
  408f4c:	0042e560 	.word	0x0042e560
  408f50:	00416db5 	.word	0x00416db5

00408f54 <lv_obj_clear_state>:
{
  408f54:	b538      	push	{r3, r4, r5, lr}
  408f56:	4604      	mov	r4, r0
  408f58:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408f5a:	4b0a      	ldr	r3, [pc, #40]	; (408f84 <lv_obj_clear_state+0x30>)
  408f5c:	4798      	blx	r3
  408f5e:	b158      	cbz	r0, 408f78 <lv_obj_clear_state+0x24>
    lv_state_t new_state = obj->state & (~state);
  408f60:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  408f64:	b259      	sxtb	r1, r3
  408f66:	ea21 0105 	bic.w	r1, r1, r5
  408f6a:	b2c9      	uxtb	r1, r1
    if(obj->state != new_state) {
  408f6c:	428b      	cmp	r3, r1
  408f6e:	d002      	beq.n	408f76 <lv_obj_clear_state+0x22>
        lv_obj_set_state(obj, new_state);
  408f70:	4620      	mov	r0, r4
  408f72:	4b05      	ldr	r3, [pc, #20]	; (408f88 <lv_obj_clear_state+0x34>)
  408f74:	4798      	blx	r3
  408f76:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408f78:	4622      	mov	r2, r4
  408f7a:	2300      	movs	r3, #0
  408f7c:	4803      	ldr	r0, [pc, #12]	; (408f8c <lv_obj_clear_state+0x38>)
  408f7e:	4904      	ldr	r1, [pc, #16]	; (408f90 <lv_obj_clear_state+0x3c>)
  408f80:	4788      	blx	r1
  408f82:	e7fe      	b.n	408f82 <lv_obj_clear_state+0x2e>
  408f84:	00416da9 	.word	0x00416da9
  408f88:	00408cfd 	.word	0x00408cfd
  408f8c:	0042e560 	.word	0x0042e560
  408f90:	00416db5 	.word	0x00416db5

00408f94 <lv_obj_get_draw_rect_ext_pad_size>:
{
  408f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408f98:	b089      	sub	sp, #36	; 0x24
  408f9a:	4604      	mov	r4, r0
  408f9c:	460e      	mov	r6, r1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  408f9e:	2250      	movs	r2, #80	; 0x50
  408fa0:	4b78      	ldr	r3, [pc, #480]	; (409184 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  408fa2:	4798      	blx	r3
    if(sh_width) {
  408fa4:	4607      	mov	r7, r0
  408fa6:	bb68      	cbnz	r0, 409004 <lv_obj_get_draw_rect_ext_pad_size+0x70>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  408fa8:	227f      	movs	r2, #127	; 0x7f
  408faa:	4631      	mov	r1, r6
  408fac:	4620      	mov	r0, r4
  408fae:	4b76      	ldr	r3, [pc, #472]	; (409188 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
  408fb0:	4798      	blx	r3
    if(value_str) {
  408fb2:	4605      	mov	r5, r0
  408fb4:	b130      	cbz	r0, 408fc4 <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
  408fb6:	227c      	movs	r2, #124	; 0x7c
  408fb8:	4631      	mov	r1, r6
  408fba:	4620      	mov	r0, r4
  408fbc:	4b73      	ldr	r3, [pc, #460]	; (40918c <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  408fbe:	4798      	blx	r3
        if(value_opa > LV_OPA_MIN) {
  408fc0:	2802      	cmp	r0, #2
  408fc2:	d851      	bhi.n	409068 <lv_obj_get_draw_rect_ext_pad_size+0xd4>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  408fc4:	2240      	movs	r2, #64	; 0x40
  408fc6:	4631      	mov	r1, r6
  408fc8:	4620      	mov	r0, r4
  408fca:	4b6e      	ldr	r3, [pc, #440]	; (409184 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  408fcc:	4798      	blx	r3
    if(outline_width) {
  408fce:	4605      	mov	r5, r0
  408fd0:	2800      	cmp	r0, #0
  408fd2:	f040 80c4 	bne.w	40915e <lv_obj_get_draw_rect_ext_pad_size+0x1ca>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  408fd6:	2204      	movs	r2, #4
  408fd8:	4631      	mov	r1, r6
  408fda:	4620      	mov	r0, r4
  408fdc:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 409184 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  408fe0:	47c0      	blx	r8
  408fe2:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  408fe4:	2205      	movs	r2, #5
  408fe6:	4631      	mov	r1, r6
  408fe8:	4620      	mov	r0, r4
  408fea:	47c0      	blx	r8
    lv_coord_t wh = LV_MATH_MAX(w, h);
  408fec:	42a8      	cmp	r0, r5
  408fee:	bfb8      	it	lt
  408ff0:	4628      	movlt	r0, r5
  408ff2:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
  408ff4:	2800      	cmp	r0, #0
  408ff6:	dd01      	ble.n	408ffc <lv_obj_get_draw_rect_ext_pad_size+0x68>
  408ff8:	4438      	add	r0, r7
  408ffa:	b207      	sxth	r7, r0
}
  408ffc:	4638      	mov	r0, r7
  408ffe:	b009      	add	sp, #36	; 0x24
  409000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
  409004:	225c      	movs	r2, #92	; 0x5c
  409006:	4631      	mov	r1, r6
  409008:	4620      	mov	r0, r4
  40900a:	4b60      	ldr	r3, [pc, #384]	; (40918c <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  40900c:	4798      	blx	r3
        if(sh_opa > LV_OPA_MIN) {
  40900e:	2802      	cmp	r0, #2
  409010:	d801      	bhi.n	409016 <lv_obj_get_draw_rect_ext_pad_size+0x82>
    lv_coord_t s = 0;
  409012:	2700      	movs	r7, #0
  409014:	e7c8      	b.n	408fa8 <lv_obj_get_draw_rect_ext_pad_size+0x14>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
  409016:	463b      	mov	r3, r7
  409018:	2f00      	cmp	r7, #0
  40901a:	db23      	blt.n	409064 <lv_obj_get_draw_rect_ext_pad_size+0xd0>
  40901c:	f343 074f 	sbfx	r7, r3, #1, #16
            sh_width++;
  409020:	3701      	adds	r7, #1
  409022:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  409024:	2253      	movs	r2, #83	; 0x53
  409026:	4631      	mov	r1, r6
  409028:	4620      	mov	r0, r4
  40902a:	f8df 8158 	ldr.w	r8, [pc, #344]	; 409184 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  40902e:	47c0      	blx	r8
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
  409030:	fa17 f780 	uxtah	r7, r7, r0
  409034:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
  409036:	2251      	movs	r2, #81	; 0x51
  409038:	4631      	mov	r1, r6
  40903a:	4620      	mov	r0, r4
  40903c:	47c0      	blx	r8
  40903e:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
  409040:	2252      	movs	r2, #82	; 0x52
  409042:	4631      	mov	r1, r6
  409044:	4620      	mov	r0, r4
  409046:	47c0      	blx	r8
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
  409048:	2800      	cmp	r0, #0
  40904a:	bfb8      	it	lt
  40904c:	4240      	neglt	r0, r0
  40904e:	2d00      	cmp	r5, #0
  409050:	bfb8      	it	lt
  409052:	426d      	neglt	r5, r5
  409054:	42a8      	cmp	r0, r5
  409056:	bfac      	ite	ge
  409058:	183f      	addge	r7, r7, r0
  40905a:	197f      	addlt	r7, r7, r5
  40905c:	b238      	sxth	r0, r7
            s = LV_MATH_MAX(s, sh_width);
  40905e:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
  409062:	e7a1      	b.n	408fa8 <lv_obj_get_draw_rect_ext_pad_size+0x14>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
  409064:	1c7b      	adds	r3, r7, #1
  409066:	e7d9      	b.n	40901c <lv_obj_get_draw_rect_ext_pad_size+0x88>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
  409068:	2270      	movs	r2, #112	; 0x70
  40906a:	4631      	mov	r1, r6
  40906c:	4620      	mov	r0, r4
  40906e:	f8df 8114 	ldr.w	r8, [pc, #276]	; 409184 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  409072:	47c0      	blx	r8
  409074:	4682      	mov	sl, r0
  409076:	2270      	movs	r2, #112	; 0x70
  409078:	4631      	mov	r1, r6
  40907a:	4620      	mov	r0, r4
  40907c:	47c0      	blx	r8
  40907e:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  409080:	227e      	movs	r2, #126	; 0x7e
  409082:	4631      	mov	r1, r6
  409084:	4620      	mov	r0, r4
  409086:	4b40      	ldr	r3, [pc, #256]	; (409188 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
  409088:	4798      	blx	r3
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
  40908a:	f04f 0900 	mov.w	r9, #0
  40908e:	f8cd 9008 	str.w	r9, [sp, #8]
  409092:	f647 4318 	movw	r3, #31768	; 0x7c18
  409096:	9301      	str	r3, [sp, #4]
  409098:	f8cd b000 	str.w	fp, [sp]
  40909c:	4653      	mov	r3, sl
  40909e:	4602      	mov	r2, r0
  4090a0:	4629      	mov	r1, r5
  4090a2:	a804      	add	r0, sp, #16
  4090a4:	4d3a      	ldr	r5, [pc, #232]	; (409190 <lv_obj_get_draw_rect_ext_pad_size+0x1fc>)
  4090a6:	47a8      	blx	r5
            value_area.x1 = 0;
  4090a8:	f8ad 9018 	strh.w	r9, [sp, #24]
            value_area.y1 = 0;
  4090ac:	f8ad 901a 	strh.w	r9, [sp, #26]
            value_area.x2 = txt_size.x - 1;
  4090b0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  4090b4:	3b01      	subs	r3, #1
  4090b6:	f8ad 301c 	strh.w	r3, [sp, #28]
            value_area.y2 = txt_size.y - 1;
  4090ba:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4090be:	3b01      	subs	r3, #1
  4090c0:	f8ad 301e 	strh.w	r3, [sp, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
  4090c4:	2275      	movs	r2, #117	; 0x75
  4090c6:	4631      	mov	r1, r6
  4090c8:	4620      	mov	r0, r4
  4090ca:	47c0      	blx	r8
  4090cc:	fa5f f980 	uxtb.w	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
  4090d0:	2273      	movs	r2, #115	; 0x73
  4090d2:	4631      	mov	r1, r6
  4090d4:	4620      	mov	r0, r4
  4090d6:	47c0      	blx	r8
  4090d8:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
  4090da:	2274      	movs	r2, #116	; 0x74
  4090dc:	4631      	mov	r1, r6
  4090de:	4620      	mov	r0, r4
  4090e0:	47c0      	blx	r8
  4090e2:	4680      	mov	r8, r0
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
  4090e4:	ab05      	add	r3, sp, #20
  4090e6:	464a      	mov	r2, r9
  4090e8:	a906      	add	r1, sp, #24
  4090ea:	f104 0010 	add.w	r0, r4, #16
  4090ee:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 409194 <lv_obj_get_draw_rect_ext_pad_size+0x200>
  4090f2:	47c8      	blx	r9
            value_area.x1 += p_align.x + xofs;
  4090f4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  4090f8:	442a      	add	r2, r5
  4090fa:	b292      	uxth	r2, r2
  4090fc:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  409100:	4410      	add	r0, r2
  409102:	b205      	sxth	r5, r0
            value_area.y1 += p_align.y + yofs;
  409104:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  409108:	4443      	add	r3, r8
  40910a:	b29b      	uxth	r3, r3
  40910c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
  409110:	4419      	add	r1, r3
  409112:	b209      	sxth	r1, r1
            value_area.x2 += p_align.x + xofs;
  409114:	f8bd 001c 	ldrh.w	r0, [sp, #28]
  409118:	4402      	add	r2, r0
  40911a:	b212      	sxth	r2, r2
            value_area.y2 += p_align.y + yofs;
  40911c:	f8bd 001e 	ldrh.w	r0, [sp, #30]
  409120:	4403      	add	r3, r0
  409122:	b21b      	sxth	r3, r3
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
  409124:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
  409128:	1b40      	subs	r0, r0, r5
  40912a:	42b8      	cmp	r0, r7
  40912c:	bfb8      	it	lt
  40912e:	4638      	movlt	r0, r7
  409130:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
  409132:	f9b4 5012 	ldrsh.w	r5, [r4, #18]
  409136:	1a69      	subs	r1, r5, r1
  409138:	4288      	cmp	r0, r1
  40913a:	bfb8      	it	lt
  40913c:	4608      	movlt	r0, r1
  40913e:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
  409140:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
  409144:	1a52      	subs	r2, r2, r1
  409146:	4290      	cmp	r0, r2
  409148:	bfb8      	it	lt
  40914a:	4610      	movlt	r0, r2
  40914c:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
  40914e:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
  409152:	1bdf      	subs	r7, r3, r7
  409154:	42b8      	cmp	r0, r7
  409156:	bfb8      	it	lt
  409158:	4638      	movlt	r0, r7
  40915a:	b207      	sxth	r7, r0
  40915c:	e732      	b.n	408fc4 <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  40915e:	224c      	movs	r2, #76	; 0x4c
  409160:	4631      	mov	r1, r6
  409162:	4620      	mov	r0, r4
  409164:	4b09      	ldr	r3, [pc, #36]	; (40918c <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  409166:	4798      	blx	r3
        if(outline_opa > LV_OPA_MIN) {
  409168:	2802      	cmp	r0, #2
  40916a:	f67f af34 	bls.w	408fd6 <lv_obj_get_draw_rect_ext_pad_size+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  40916e:	2241      	movs	r2, #65	; 0x41
  409170:	4631      	mov	r1, r6
  409172:	4620      	mov	r0, r4
  409174:	4b03      	ldr	r3, [pc, #12]	; (409184 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  409176:	4798      	blx	r3
            s = LV_MATH_MAX(s, outline_pad + outline_width);
  409178:	4428      	add	r0, r5
  40917a:	42b8      	cmp	r0, r7
  40917c:	bfb8      	it	lt
  40917e:	4638      	movlt	r0, r7
  409180:	b207      	sxth	r7, r0
  409182:	e728      	b.n	408fd6 <lv_obj_get_draw_rect_ext_pad_size+0x42>
  409184:	004073ed 	.word	0x004073ed
  409188:	004072e5 	.word	0x004072e5
  40918c:	00406e61 	.word	0x00406e61
  409190:	00418db5 	.word	0x00418db5
  409194:	00416821 	.word	0x00416821

00409198 <lv_obj_get_focused_obj>:
{
  409198:	b510      	push	{r4, lr}
    if(obj == NULL) return NULL;
  40919a:	4604      	mov	r4, r0
  40919c:	b928      	cbnz	r0, 4091aa <lv_obj_get_focused_obj+0x12>
  40919e:	2000      	movs	r0, #0
  4091a0:	bd10      	pop	{r4, pc}
        focus_obj = lv_obj_get_parent(focus_obj);
  4091a2:	4620      	mov	r0, r4
  4091a4:	4b06      	ldr	r3, [pc, #24]	; (4091c0 <lv_obj_get_focused_obj+0x28>)
  4091a6:	4798      	blx	r3
  4091a8:	4604      	mov	r4, r0
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
  4091aa:	4620      	mov	r0, r4
  4091ac:	4b05      	ldr	r3, [pc, #20]	; (4091c4 <lv_obj_get_focused_obj+0x2c>)
  4091ae:	4798      	blx	r3
  4091b0:	b118      	cbz	r0, 4091ba <lv_obj_get_focused_obj+0x22>
  4091b2:	2c00      	cmp	r4, #0
  4091b4:	d1f5      	bne.n	4091a2 <lv_obj_get_focused_obj+0xa>
    return (lv_obj_t *)focus_obj;
  4091b6:	4620      	mov	r0, r4
  4091b8:	bd10      	pop	{r4, pc}
  4091ba:	4620      	mov	r0, r4
}
  4091bc:	bd10      	pop	{r4, pc}
  4091be:	bf00      	nop
  4091c0:	00405955 	.word	0x00405955
  4091c4:	00406789 	.word	0x00406789

004091c8 <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
  4091c8:	2908      	cmp	r1, #8
  4091ca:	d01a      	beq.n	409202 <lv_obj_signal+0x3a>
{
  4091cc:	b510      	push	{r4, lr}
  4091ce:	4604      	mov	r4, r0
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  4091d0:	2907      	cmp	r1, #7
  4091d2:	d020      	beq.n	409216 <lv_obj_signal+0x4e>
    if(sign == LV_SIGNAL_CHILD_CHG) {
  4091d4:	2901      	cmp	r1, #1
  4091d6:	d023      	beq.n	409220 <lv_obj_signal+0x58>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
  4091d8:	2906      	cmp	r1, #6
  4091da:	d027      	beq.n	40922c <lv_obj_signal+0x64>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
  4091dc:	2903      	cmp	r1, #3
  4091de:	d030      	beq.n	409242 <lv_obj_signal+0x7a>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  4091e0:	2904      	cmp	r1, #4
  4091e2:	d039      	beq.n	409258 <lv_obj_signal+0x90>
    else if(sign == LV_SIGNAL_PRESSED) {
  4091e4:	290b      	cmp	r1, #11
  4091e6:	d03b      	beq.n	409260 <lv_obj_signal+0x98>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
  4091e8:	f1a1 030d 	sub.w	r3, r1, #13
  4091ec:	b2db      	uxtb	r3, r3
  4091ee:	2b01      	cmp	r3, #1
  4091f0:	d93b      	bls.n	40926a <lv_obj_signal+0xa2>
    else if(sign == LV_SIGNAL_FOCUS) {
  4091f2:	2916      	cmp	r1, #22
  4091f4:	d03e      	beq.n	409274 <lv_obj_signal+0xac>
    else if(sign == LV_SIGNAL_DEFOCUS) {
  4091f6:	2917      	cmp	r1, #23
  4091f8:	d056      	beq.n	4092a8 <lv_obj_signal+0xe0>
    else if(sign == LV_SIGNAL_CLEANUP) {
  4091fa:	2900      	cmp	r1, #0
  4091fc:	d05b      	beq.n	4092b6 <lv_obj_signal+0xee>
    lv_res_t res = LV_RES_OK;
  4091fe:	2001      	movs	r0, #1
}
  409200:	bd10      	pop	{r4, pc}
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
  409202:	7813      	ldrb	r3, [r2, #0]
  409204:	b91b      	cbnz	r3, 40920e <lv_obj_signal+0x46>
  409206:	3028      	adds	r0, #40	; 0x28
  409208:	6050      	str	r0, [r2, #4]
        return LV_RES_OK;
  40920a:	2001      	movs	r0, #1
  40920c:	4770      	bx	lr
        else info->result = NULL;
  40920e:	2300      	movs	r3, #0
  409210:	6053      	str	r3, [r2, #4]
        return LV_RES_OK;
  409212:	2001      	movs	r0, #1
  409214:	4770      	bx	lr
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  409216:	492b      	ldr	r1, [pc, #172]	; (4092c4 <lv_obj_signal+0xfc>)
  409218:	4610      	mov	r0, r2
  40921a:	4b2b      	ldr	r3, [pc, #172]	; (4092c8 <lv_obj_signal+0x100>)
  40921c:	4798      	blx	r3
  40921e:	bd10      	pop	{r4, pc}
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
  409220:	4b2a      	ldr	r3, [pc, #168]	; (4092cc <lv_obj_signal+0x104>)
  409222:	4798      	blx	r3
  409224:	2800      	cmp	r0, #0
  409226:	d14a      	bne.n	4092be <lv_obj_signal+0xf6>
    lv_res_t res = LV_RES_OK;
  409228:	2001      	movs	r0, #1
  40922a:	bd10      	pop	{r4, pc}
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
  40922c:	2100      	movs	r1, #0
  40922e:	4b28      	ldr	r3, [pc, #160]	; (4092d0 <lv_obj_signal+0x108>)
  409230:	4798      	blx	r3
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
  409232:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
  409236:	4298      	cmp	r0, r3
  409238:	bfb8      	it	lt
  40923a:	4618      	movlt	r0, r3
  40923c:	8660      	strh	r0, [r4, #50]	; 0x32
    lv_res_t res = LV_RES_OK;
  40923e:	2001      	movs	r0, #1
  409240:	bd10      	pop	{r4, pc}
        if(obj->realign.auto_realign) {
  409242:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
  409246:	f013 0f01 	tst.w	r3, #1
  40924a:	d101      	bne.n	409250 <lv_obj_signal+0x88>
    lv_res_t res = LV_RES_OK;
  40924c:	2001      	movs	r0, #1
  40924e:	bd10      	pop	{r4, pc}
            lv_obj_realign(obj);
  409250:	4b20      	ldr	r3, [pc, #128]	; (4092d4 <lv_obj_signal+0x10c>)
  409252:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  409254:	2001      	movs	r0, #1
  409256:	bd10      	pop	{r4, pc}
        lv_obj_refresh_ext_draw_pad(obj);
  409258:	4b1f      	ldr	r3, [pc, #124]	; (4092d8 <lv_obj_signal+0x110>)
  40925a:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  40925c:	2001      	movs	r0, #1
  40925e:	bd10      	pop	{r4, pc}
        lv_obj_add_state(obj, LV_STATE_PRESSED);
  409260:	2110      	movs	r1, #16
  409262:	4b1e      	ldr	r3, [pc, #120]	; (4092dc <lv_obj_signal+0x114>)
  409264:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  409266:	2001      	movs	r0, #1
  409268:	bd10      	pop	{r4, pc}
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
  40926a:	2110      	movs	r1, #16
  40926c:	4b1c      	ldr	r3, [pc, #112]	; (4092e0 <lv_obj_signal+0x118>)
  40926e:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  409270:	2001      	movs	r0, #1
  409272:	bd10      	pop	{r4, pc}
        editing = lv_group_get_editing(lv_obj_get_group(obj));
  409274:	4b1b      	ldr	r3, [pc, #108]	; (4092e4 <lv_obj_signal+0x11c>)
  409276:	4798      	blx	r3
  409278:	4b1b      	ldr	r3, [pc, #108]	; (4092e8 <lv_obj_signal+0x120>)
  40927a:	4798      	blx	r3
        if(editing) {
  40927c:	b138      	cbz	r0, 40928e <lv_obj_signal+0xc6>
            obj = lv_obj_get_focused_obj(obj);
  40927e:	4620      	mov	r0, r4
  409280:	4b1a      	ldr	r3, [pc, #104]	; (4092ec <lv_obj_signal+0x124>)
  409282:	4798      	blx	r3
            lv_obj_add_state(obj, state);
  409284:	2106      	movs	r1, #6
  409286:	4b15      	ldr	r3, [pc, #84]	; (4092dc <lv_obj_signal+0x114>)
  409288:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  40928a:	2001      	movs	r0, #1
  40928c:	bd10      	pop	{r4, pc}
            obj = lv_obj_get_focused_obj(obj);
  40928e:	4620      	mov	r0, r4
  409290:	4b16      	ldr	r3, [pc, #88]	; (4092ec <lv_obj_signal+0x124>)
  409292:	4798      	blx	r3
  409294:	4604      	mov	r4, r0
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
  409296:	2102      	movs	r1, #2
  409298:	4b10      	ldr	r3, [pc, #64]	; (4092dc <lv_obj_signal+0x114>)
  40929a:	4798      	blx	r3
            lv_obj_clear_state(obj, LV_STATE_EDITED);
  40929c:	2104      	movs	r1, #4
  40929e:	4620      	mov	r0, r4
  4092a0:	4b0f      	ldr	r3, [pc, #60]	; (4092e0 <lv_obj_signal+0x118>)
  4092a2:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4092a4:	2001      	movs	r0, #1
  4092a6:	bd10      	pop	{r4, pc}
        obj = lv_obj_get_focused_obj(obj);
  4092a8:	4b10      	ldr	r3, [pc, #64]	; (4092ec <lv_obj_signal+0x124>)
  4092aa:	4798      	blx	r3
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
  4092ac:	2106      	movs	r1, #6
  4092ae:	4b0c      	ldr	r3, [pc, #48]	; (4092e0 <lv_obj_signal+0x118>)
  4092b0:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4092b2:	2001      	movs	r0, #1
  4092b4:	bd10      	pop	{r4, pc}
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  4092b6:	4b0e      	ldr	r3, [pc, #56]	; (4092f0 <lv_obj_signal+0x128>)
  4092b8:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4092ba:	2001      	movs	r0, #1
  4092bc:	bd10      	pop	{r4, pc}
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
  4092be:	2000      	movs	r0, #0
  4092c0:	bd10      	pop	{r4, pc}
  4092c2:	bf00      	nop
  4092c4:	0042e570 	.word	0x0042e570
  4092c8:	00408289 	.word	0x00408289
  4092cc:	00406d55 	.word	0x00406d55
  4092d0:	00408f95 	.word	0x00408f95
  4092d4:	0040661d 	.word	0x0040661d
  4092d8:	00405925 	.word	0x00405925
  4092dc:	00408f19 	.word	0x00408f19
  4092e0:	00408f55 	.word	0x00408f55
  4092e4:	00408025 	.word	0x00408025
  4092e8:	00403ae1 	.word	0x00403ae1
  4092ec:	00409199 	.word	0x00409199
  4092f0:	00405c7d 	.word	0x00405c7d

004092f4 <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
  4092f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4092f8:	b082      	sub	sp, #8
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
  4092fa:	2500      	movs	r5, #0
  4092fc:	e057      	b.n	4093ae <lv_refr_join_area+0xba>
        *d8 = *s8;
  4092fe:	f811 0b01 	ldrb.w	r0, [r1], #1
  409302:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  409306:	3b01      	subs	r3, #1
    while(len) {
  409308:	2b00      	cmp	r3, #0
  40930a:	d1f8      	bne.n	4092fe <lv_refr_join_area+0xa>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
  40930c:	4426      	add	r6, r4
  40930e:	2301      	movs	r3, #1
  409310:	f886 3162 	strb.w	r3, [r6, #354]	; 0x162
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
  409314:	3401      	adds	r4, #1
  409316:	4b2f      	ldr	r3, [pc, #188]	; (4093d4 <lv_refr_join_area+0xe0>)
  409318:	6819      	ldr	r1, [r3, #0]
  40931a:	f8b1 3182 	ldrh.w	r3, [r1, #386]	; 0x182
  40931e:	f3c3 0309 	ubfx	r3, r3, #0, #10
  409322:	429c      	cmp	r4, r3
  409324:	d242      	bcs.n	4093ac <lv_refr_join_area+0xb8>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
  409326:	190b      	adds	r3, r1, r4
  409328:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  40932c:	2b00      	cmp	r3, #0
  40932e:	d1f1      	bne.n	409314 <lv_refr_join_area+0x20>
  409330:	42ac      	cmp	r4, r5
  409332:	d0ef      	beq.n	409314 <lv_refr_join_area+0x20>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
  409334:	f105 000c 	add.w	r0, r5, #12
  409338:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
  40933c:	f104 030c 	add.w	r3, r4, #12
  409340:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  409344:	3102      	adds	r1, #2
  409346:	3002      	adds	r0, #2
  409348:	4b23      	ldr	r3, [pc, #140]	; (4093d8 <lv_refr_join_area+0xe4>)
  40934a:	4798      	blx	r3
  40934c:	2800      	cmp	r0, #0
  40934e:	d0e1      	beq.n	409314 <lv_refr_join_area+0x20>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
  409350:	f8df 8080 	ldr.w	r8, [pc, #128]	; 4093d4 <lv_refr_join_area+0xe0>
  409354:	f8d8 2000 	ldr.w	r2, [r8]
  409358:	f105 070c 	add.w	r7, r5, #12
  40935c:	00ff      	lsls	r7, r7, #3
  40935e:	19d1      	adds	r1, r2, r7
  409360:	f104 060c 	add.w	r6, r4, #12
  409364:	00f6      	lsls	r6, r6, #3
  409366:	4432      	add	r2, r6
  409368:	3202      	adds	r2, #2
  40936a:	3102      	adds	r1, #2
  40936c:	4668      	mov	r0, sp
  40936e:	4b1b      	ldr	r3, [pc, #108]	; (4093dc <lv_refr_join_area+0xe8>)
  409370:	4798      	blx	r3
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
  409372:	4668      	mov	r0, sp
  409374:	f8df a068 	ldr.w	sl, [pc, #104]	; 4093e0 <lv_refr_join_area+0xec>
  409378:	47d0      	blx	sl
  40937a:	4681      	mov	r9, r0
  40937c:	f8d8 0000 	ldr.w	r0, [r8]
  409380:	4438      	add	r0, r7
  409382:	3002      	adds	r0, #2
  409384:	47d0      	blx	sl
  409386:	4607      	mov	r7, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
  409388:	f8d8 0000 	ldr.w	r0, [r8]
  40938c:	4430      	add	r0, r6
  40938e:	3002      	adds	r0, #2
  409390:	47d0      	blx	sl
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
  409392:	4438      	add	r0, r7
  409394:	4581      	cmp	r9, r0
  409396:	d2bd      	bcs.n	409314 <lv_refr_join_area+0x20>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
  409398:	f8d8 6000 	ldr.w	r6, [r8]
  40939c:	f105 020c 	add.w	r2, r5, #12
  4093a0:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
  4093a4:	3202      	adds	r2, #2
    const uint8_t * s8 = (const uint8_t *)src;
  4093a6:	4669      	mov	r1, sp
  4093a8:	2308      	movs	r3, #8
  4093aa:	e7ad      	b.n	409308 <lv_refr_join_area+0x14>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
  4093ac:	3501      	adds	r5, #1
  4093ae:	4b09      	ldr	r3, [pc, #36]	; (4093d4 <lv_refr_join_area+0xe0>)
  4093b0:	681b      	ldr	r3, [r3, #0]
  4093b2:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  4093b6:	f3c2 0209 	ubfx	r2, r2, #0, #10
  4093ba:	4295      	cmp	r5, r2
  4093bc:	d206      	bcs.n	4093cc <lv_refr_join_area+0xd8>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
  4093be:	442b      	add	r3, r5
  4093c0:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  4093c4:	2b00      	cmp	r3, #0
  4093c6:	d1f1      	bne.n	4093ac <lv_refr_join_area+0xb8>
  4093c8:	2400      	movs	r4, #0
  4093ca:	e7a4      	b.n	409316 <lv_refr_join_area+0x22>
            }
        }
    }
}
  4093cc:	b002      	add	sp, #8
  4093ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4093d2:	bf00      	nop
  4093d4:	2040c404 	.word	0x2040c404
  4093d8:	00416715 	.word	0x00416715
  4093dc:	0041653b 	.word	0x0041653b
  4093e0:	004164c7 	.word	0x004164c7

004093e4 <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
  4093e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4093e8:	4606      	mov	r6, r0
  4093ea:	4688      	mov	r8, r1
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too */
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
  4093ec:	2200      	movs	r2, #0
  4093ee:	3110      	adds	r1, #16
  4093f0:	4b20      	ldr	r3, [pc, #128]	; (409474 <lv_refr_get_top_obj+0x90>)
  4093f2:	4798      	blx	r3
  4093f4:	b3b8      	cbz	r0, 409466 <lv_refr_get_top_obj+0x82>
  4093f6:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
  4093fa:	f013 0f10 	tst.w	r3, #16
  4093fe:	d134      	bne.n	40946a <lv_refr_get_top_obj+0x86>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
  409400:	f8d8 3020 	ldr.w	r3, [r8, #32]
  409404:	2202      	movs	r2, #2
  409406:	4631      	mov	r1, r6
  409408:	4640      	mov	r0, r8
  40940a:	4798      	blx	r3
  40940c:	4681      	mov	r9, r0
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
  40940e:	2803      	cmp	r0, #3
  409410:	d02d      	beq.n	40946e <lv_refr_get_top_obj+0x8a>

#if LV_USE_OPA_SCALE
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
  409412:	2801      	cmp	r0, #1
  409414:	d013      	beq.n	40943e <lv_refr_get_top_obj+0x5a>
            design_res = LV_DESIGN_RES_NOT_COVER;
        }
#endif

        lv_obj_t * i;
        _LV_LL_READ(obj->child_ll, i) {
  409416:	f108 0704 	add.w	r7, r8, #4
  40941a:	4638      	mov	r0, r7
  40941c:	4b16      	ldr	r3, [pc, #88]	; (409478 <lv_refr_get_top_obj+0x94>)
  40941e:	4798      	blx	r3
  409420:	4604      	mov	r4, r0
    lv_obj_t * found_p = NULL;
  409422:	2500      	movs	r5, #0
        _LV_LL_READ(obj->child_ll, i) {
  409424:	b1b4      	cbz	r4, 409454 <lv_refr_get_top_obj+0x70>
            found_p = lv_refr_get_top_obj(area_p, i);
  409426:	4621      	mov	r1, r4
  409428:	4630      	mov	r0, r6
  40942a:	f7ff ffdb 	bl	4093e4 <lv_refr_get_top_obj>

            /*If a children is ok then break*/
            if(found_p != NULL) {
  40942e:	4605      	mov	r5, r0
  409430:	b980      	cbnz	r0, 409454 <lv_refr_get_top_obj+0x70>
        _LV_LL_READ(obj->child_ll, i) {
  409432:	4621      	mov	r1, r4
  409434:	4638      	mov	r0, r7
  409436:	4b11      	ldr	r3, [pc, #68]	; (40947c <lv_refr_get_top_obj+0x98>)
  409438:	4798      	blx	r3
  40943a:	4604      	mov	r4, r0
  40943c:	e7f2      	b.n	409424 <lv_refr_get_top_obj+0x40>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  40943e:	f248 020c 	movw	r2, #32780	; 0x800c
  409442:	2100      	movs	r1, #0
  409444:	4640      	mov	r0, r8
  409446:	4b0e      	ldr	r3, [pc, #56]	; (409480 <lv_refr_get_top_obj+0x9c>)
  409448:	4798      	blx	r3
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
  40944a:	28ff      	cmp	r0, #255	; 0xff
  40944c:	d0e3      	beq.n	409416 <lv_refr_get_top_obj+0x32>
            design_res = LV_DESIGN_RES_NOT_COVER;
  40944e:	f04f 0902 	mov.w	r9, #2
  409452:	e7e0      	b.n	409416 <lv_refr_get_top_obj+0x32>
                break;
            }
        }

        /*If no better children use this object*/
        if(found_p == NULL) {
  409454:	b115      	cbz	r5, 40945c <lv_refr_get_top_obj+0x78>
            }
        }
    }

    return found_p;
}
  409456:	4628      	mov	r0, r5
  409458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if(design_res == LV_DESIGN_RES_COVER) {
  40945c:	f1b9 0f01 	cmp.w	r9, #1
  409460:	d1f9      	bne.n	409456 <lv_refr_get_top_obj+0x72>
                found_p = obj;
  409462:	4645      	mov	r5, r8
  409464:	e7f7      	b.n	409456 <lv_refr_get_top_obj+0x72>
    lv_obj_t * found_p = NULL;
  409466:	2500      	movs	r5, #0
  409468:	e7f5      	b.n	409456 <lv_refr_get_top_obj+0x72>
  40946a:	2500      	movs	r5, #0
  40946c:	e7f3      	b.n	409456 <lv_refr_get_top_obj+0x72>
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
  40946e:	2500      	movs	r5, #0
  409470:	e7f1      	b.n	409456 <lv_refr_get_top_obj+0x72>
  409472:	bf00      	nop
  409474:	00416759 	.word	0x00416759
  409478:	004170b9 	.word	0x004170b9
  40947c:	004170cd 	.word	0x004170cd
  409480:	00406e61 	.word	0x00406e61

00409484 <lv_refr_obj>:
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
  409484:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  409488:	f013 0f10 	tst.w	r3, #16
  40948c:	d000      	beq.n	409490 <lv_refr_obj+0xc>
  40948e:	4770      	bx	lr
{
  409490:	b570      	push	{r4, r5, r6, lr}
  409492:	b08a      	sub	sp, #40	; 0x28
  409494:	460e      	mov	r6, r1
  409496:	4605      	mov	r5, r0
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
  409498:	f9b0 4032 	ldrsh.w	r4, [r0, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
  40949c:	a904      	add	r1, sp, #16
  40949e:	4b33      	ldr	r3, [pc, #204]	; (40956c <lv_refr_obj+0xe8>)
  4094a0:	4798      	blx	r3
    obj_area.x1 -= ext_size;
  4094a2:	b2a3      	uxth	r3, r4
  4094a4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  4094a8:	1ad2      	subs	r2, r2, r3
  4094aa:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
  4094ae:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  4094b2:	1ad2      	subs	r2, r2, r3
  4094b4:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
  4094b8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  4094bc:	441a      	add	r2, r3
  4094be:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
  4094c2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  4094c6:	4413      	add	r3, r2
  4094c8:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
  4094cc:	aa04      	add	r2, sp, #16
  4094ce:	4631      	mov	r1, r6
  4094d0:	a806      	add	r0, sp, #24
  4094d2:	4b27      	ldr	r3, [pc, #156]	; (409570 <lv_refr_obj+0xec>)
  4094d4:	4798      	blx	r3

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
  4094d6:	b1a8      	cbz	r0, 409504 <lv_refr_obj+0x80>

        /* Redraw the object */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
  4094d8:	6a2b      	ldr	r3, [r5, #32]
  4094da:	b11b      	cbz	r3, 4094e4 <lv_refr_obj+0x60>
  4094dc:	2200      	movs	r2, #0
  4094de:	a906      	add	r1, sp, #24
  4094e0:	4628      	mov	r0, r5
  4094e2:	4798      	blx	r3
#if LV_COLOR_DEPTH == 32
        debug_color.ch.alpha = 0xff;
#endif
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
  4094e4:	a904      	add	r1, sp, #16
  4094e6:	4628      	mov	r0, r5
  4094e8:	4b20      	ldr	r3, [pc, #128]	; (40956c <lv_refr_obj+0xe8>)
  4094ea:	4798      	blx	r3
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
  4094ec:	aa04      	add	r2, sp, #16
  4094ee:	4631      	mov	r1, r6
  4094f0:	a808      	add	r0, sp, #32
  4094f2:	4b1f      	ldr	r3, [pc, #124]	; (409570 <lv_refr_obj+0xec>)
  4094f4:	4798      	blx	r3
        if(union_ok != false) {
  4094f6:	b938      	cbnz	r0, 409508 <lv_refr_obj+0x84>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
  4094f8:	6a2b      	ldr	r3, [r5, #32]
  4094fa:	b11b      	cbz	r3, 409504 <lv_refr_obj+0x80>
  4094fc:	2201      	movs	r2, #1
  4094fe:	a906      	add	r1, sp, #24
  409500:	4628      	mov	r0, r5
  409502:	4798      	blx	r3
    }
}
  409504:	b00a      	add	sp, #40	; 0x28
  409506:	bd70      	pop	{r4, r5, r6, pc}
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
  409508:	1d2e      	adds	r6, r5, #4
  40950a:	4630      	mov	r0, r6
  40950c:	4b19      	ldr	r3, [pc, #100]	; (409574 <lv_refr_obj+0xf0>)
  40950e:	4798      	blx	r3
  409510:	4604      	mov	r4, r0
  409512:	e004      	b.n	40951e <lv_refr_obj+0x9a>
  409514:	4621      	mov	r1, r4
  409516:	4630      	mov	r0, r6
  409518:	4b17      	ldr	r3, [pc, #92]	; (409578 <lv_refr_obj+0xf4>)
  40951a:	4798      	blx	r3
  40951c:	4604      	mov	r4, r0
  40951e:	2c00      	cmp	r4, #0
  409520:	d0ea      	beq.n	4094f8 <lv_refr_obj+0x74>
                lv_obj_get_coords(child_p, &child_area);
  409522:	a902      	add	r1, sp, #8
  409524:	4620      	mov	r0, r4
  409526:	4b11      	ldr	r3, [pc, #68]	; (40956c <lv_refr_obj+0xe8>)
  409528:	4798      	blx	r3
                child_area.x1 -= ext_size;
  40952a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  40952c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  409530:	1ad2      	subs	r2, r2, r3
  409532:	f8ad 2008 	strh.w	r2, [sp, #8]
                child_area.y1 -= ext_size;
  409536:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  40953a:	1ad2      	subs	r2, r2, r3
  40953c:	f8ad 200a 	strh.w	r2, [sp, #10]
                child_area.x2 += ext_size;
  409540:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  409544:	441a      	add	r2, r3
  409546:	f8ad 200c 	strh.w	r2, [sp, #12]
                child_area.y2 += ext_size;
  40954a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  40954e:	4413      	add	r3, r2
  409550:	f8ad 300e 	strh.w	r3, [sp, #14]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
  409554:	aa02      	add	r2, sp, #8
  409556:	a908      	add	r1, sp, #32
  409558:	4668      	mov	r0, sp
  40955a:	4b05      	ldr	r3, [pc, #20]	; (409570 <lv_refr_obj+0xec>)
  40955c:	4798      	blx	r3
                if(union_ok) {
  40955e:	2800      	cmp	r0, #0
  409560:	d0d8      	beq.n	409514 <lv_refr_obj+0x90>
                    lv_refr_obj(child_p, &mask_child);
  409562:	4669      	mov	r1, sp
  409564:	4620      	mov	r0, r4
  409566:	f7ff ff8d 	bl	409484 <lv_refr_obj>
  40956a:	e7d3      	b.n	409514 <lv_refr_obj+0x90>
  40956c:	00405a69 	.word	0x00405a69
  409570:	004164e3 	.word	0x004164e3
  409574:	004170c3 	.word	0x004170c3
  409578:	004170db 	.word	0x004170db

0040957c <lv_refr_obj_and_children>:
{
  40957c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40957e:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
  409580:	4604      	mov	r4, r0
  409582:	b150      	cbz	r0, 40959a <lv_refr_obj_and_children+0x1e>
    if(top_p == NULL) return;  /*Shouldn't happen*/
  409584:	2c00      	cmp	r4, #0
  409586:	d02c      	beq.n	4095e2 <lv_refr_obj_and_children+0x66>
    lv_refr_obj(top_p, mask_p);
  409588:	4631      	mov	r1, r6
  40958a:	4620      	mov	r0, r4
  40958c:	4b15      	ldr	r3, [pc, #84]	; (4095e4 <lv_refr_obj_and_children+0x68>)
  40958e:	4798      	blx	r3
    par = lv_obj_get_parent(top_p);
  409590:	4620      	mov	r0, r4
  409592:	4b15      	ldr	r3, [pc, #84]	; (4095e8 <lv_refr_obj_and_children+0x6c>)
  409594:	4798      	blx	r3
  409596:	4607      	mov	r7, r0
    while(par != NULL) {
  409598:	e01b      	b.n	4095d2 <lv_refr_obj_and_children+0x56>
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
  40959a:	4b14      	ldr	r3, [pc, #80]	; (4095ec <lv_refr_obj_and_children+0x70>)
  40959c:	6818      	ldr	r0, [r3, #0]
  40959e:	4b14      	ldr	r3, [pc, #80]	; (4095f0 <lv_refr_obj_and_children+0x74>)
  4095a0:	4798      	blx	r3
  4095a2:	4604      	mov	r4, r0
  4095a4:	e7ee      	b.n	409584 <lv_refr_obj_and_children+0x8>
            lv_refr_obj(i, mask_p);
  4095a6:	4631      	mov	r1, r6
  4095a8:	4620      	mov	r0, r4
  4095aa:	4b0e      	ldr	r3, [pc, #56]	; (4095e4 <lv_refr_obj_and_children+0x68>)
  4095ac:	4798      	blx	r3
            i = _lv_ll_get_prev(&(par->child_ll), i);
  4095ae:	4621      	mov	r1, r4
  4095b0:	4628      	mov	r0, r5
  4095b2:	4b10      	ldr	r3, [pc, #64]	; (4095f4 <lv_refr_obj_and_children+0x78>)
  4095b4:	4798      	blx	r3
  4095b6:	4604      	mov	r4, r0
        while(i != NULL) {
  4095b8:	2c00      	cmp	r4, #0
  4095ba:	d1f4      	bne.n	4095a6 <lv_refr_obj_and_children+0x2a>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
  4095bc:	6a3b      	ldr	r3, [r7, #32]
  4095be:	b11b      	cbz	r3, 4095c8 <lv_refr_obj_and_children+0x4c>
  4095c0:	2201      	movs	r2, #1
  4095c2:	4631      	mov	r1, r6
  4095c4:	4638      	mov	r0, r7
  4095c6:	4798      	blx	r3
        par = lv_obj_get_parent(par);
  4095c8:	4638      	mov	r0, r7
  4095ca:	4b07      	ldr	r3, [pc, #28]	; (4095e8 <lv_refr_obj_and_children+0x6c>)
  4095cc:	4798      	blx	r3
        border_p = par;
  4095ce:	463c      	mov	r4, r7
        par = lv_obj_get_parent(par);
  4095d0:	4607      	mov	r7, r0
    while(par != NULL) {
  4095d2:	b137      	cbz	r7, 4095e2 <lv_refr_obj_and_children+0x66>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
  4095d4:	1d3d      	adds	r5, r7, #4
  4095d6:	4621      	mov	r1, r4
  4095d8:	4628      	mov	r0, r5
  4095da:	4b06      	ldr	r3, [pc, #24]	; (4095f4 <lv_refr_obj_and_children+0x78>)
  4095dc:	4798      	blx	r3
  4095de:	4604      	mov	r4, r0
        while(i != NULL) {
  4095e0:	e7ea      	b.n	4095b8 <lv_refr_obj_and_children+0x3c>
  4095e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4095e4:	00409485 	.word	0x00409485
  4095e8:	00405955 	.word	0x00405955
  4095ec:	2040c404 	.word	0x2040c404
  4095f0:	00403659 	.word	0x00403659
  4095f4:	004170db 	.word	0x004170db

004095f8 <_lv_refr_init>:
{
  4095f8:	4770      	bx	lr
	...

004095fc <_lv_inv_area>:
{
  4095fc:	b530      	push	{r4, r5, lr}
  4095fe:	b085      	sub	sp, #20
  409600:	460c      	mov	r4, r1
    if(!disp) disp = lv_disp_get_default();
  409602:	4605      	mov	r5, r0
  409604:	2800      	cmp	r0, #0
  409606:	d035      	beq.n	409674 <_lv_inv_area+0x78>
    if(!disp) return;
  409608:	2d00      	cmp	r5, #0
  40960a:	d03d      	beq.n	409688 <_lv_inv_area+0x8c>
    if(area_p == NULL) {
  40960c:	2c00      	cmp	r4, #0
  40960e:	d035      	beq.n	40967c <_lv_inv_area+0x80>
    scr_area.x1 = 0;
  409610:	2300      	movs	r3, #0
  409612:	f8ad 3008 	strh.w	r3, [sp, #8]
    scr_area.y1 = 0;
  409616:	f8ad 300a 	strh.w	r3, [sp, #10]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
  40961a:	4628      	mov	r0, r5
  40961c:	4b34      	ldr	r3, [pc, #208]	; (4096f0 <_lv_inv_area+0xf4>)
  40961e:	4798      	blx	r3
  409620:	b280      	uxth	r0, r0
  409622:	3801      	subs	r0, #1
  409624:	f8ad 000c 	strh.w	r0, [sp, #12]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
  409628:	4628      	mov	r0, r5
  40962a:	4b32      	ldr	r3, [pc, #200]	; (4096f4 <_lv_inv_area+0xf8>)
  40962c:	4798      	blx	r3
  40962e:	b280      	uxth	r0, r0
  409630:	3801      	subs	r0, #1
  409632:	f8ad 000e 	strh.w	r0, [sp, #14]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
  409636:	aa02      	add	r2, sp, #8
  409638:	4621      	mov	r1, r4
  40963a:	4668      	mov	r0, sp
  40963c:	4b2e      	ldr	r3, [pc, #184]	; (4096f8 <_lv_inv_area+0xfc>)
  40963e:	4798      	blx	r3
    if(suc != false) {
  409640:	b310      	cbz	r0, 409688 <_lv_inv_area+0x8c>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
  409642:	692b      	ldr	r3, [r5, #16]
  409644:	b113      	cbz	r3, 40964c <_lv_inv_area+0x50>
  409646:	4669      	mov	r1, sp
  409648:	4628      	mov	r0, r5
  40964a:	4798      	blx	r3
{
  40964c:	2400      	movs	r4, #0
        for(i = 0; i < disp->inv_p; i++) {
  40964e:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  409652:	f3c3 0309 	ubfx	r3, r3, #0, #10
  409656:	429c      	cmp	r4, r3
  409658:	da18      	bge.n	40968c <_lv_inv_area+0x90>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
  40965a:	f104 010c 	add.w	r1, r4, #12
  40965e:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
  409662:	2200      	movs	r2, #0
  409664:	3102      	adds	r1, #2
  409666:	4668      	mov	r0, sp
  409668:	4b24      	ldr	r3, [pc, #144]	; (4096fc <_lv_inv_area+0x100>)
  40966a:	4798      	blx	r3
  40966c:	b960      	cbnz	r0, 409688 <_lv_inv_area+0x8c>
        for(i = 0; i < disp->inv_p; i++) {
  40966e:	3401      	adds	r4, #1
  409670:	b2a4      	uxth	r4, r4
  409672:	e7ec      	b.n	40964e <_lv_inv_area+0x52>
    if(!disp) disp = lv_disp_get_default();
  409674:	4b22      	ldr	r3, [pc, #136]	; (409700 <_lv_inv_area+0x104>)
  409676:	4798      	blx	r3
  409678:	4605      	mov	r5, r0
  40967a:	e7c5      	b.n	409608 <_lv_inv_area+0xc>
        disp->inv_p = 0;
  40967c:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  409680:	f36f 0309 	bfc	r3, #0, #10
  409684:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
}
  409688:	b005      	add	sp, #20
  40968a:	bd30      	pop	{r4, r5, pc}
        if(disp->inv_p < LV_INV_BUF_SIZE) {
  40968c:	2b1f      	cmp	r3, #31
  40968e:	dc1b      	bgt.n	4096c8 <_lv_inv_area+0xcc>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
  409690:	330c      	adds	r3, #12
  409692:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  409696:	3302      	adds	r3, #2
  409698:	4669      	mov	r1, sp
  40969a:	2208      	movs	r2, #8
  40969c:	e004      	b.n	4096a8 <_lv_inv_area+0xac>
        *d8 = *s8;
  40969e:	f811 0b01 	ldrb.w	r0, [r1], #1
  4096a2:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  4096a6:	3a01      	subs	r2, #1
    while(len) {
  4096a8:	2a00      	cmp	r2, #0
  4096aa:	d1f8      	bne.n	40969e <_lv_inv_area+0xa2>
        disp->inv_p++;
  4096ac:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  4096b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
  4096b4:	3201      	adds	r2, #1
  4096b6:	f362 0309 	bfi	r3, r2, #0, #10
  4096ba:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
  4096be:	2103      	movs	r1, #3
  4096c0:	6b68      	ldr	r0, [r5, #52]	; 0x34
  4096c2:	4b10      	ldr	r3, [pc, #64]	; (409704 <_lv_inv_area+0x108>)
  4096c4:	4798      	blx	r3
  4096c6:	e7df      	b.n	409688 <_lv_inv_area+0x8c>
            disp->inv_p = 0;
  4096c8:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  4096cc:	f36f 0309 	bfc	r3, #0, #10
  4096d0:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
  4096d4:	f105 0162 	add.w	r1, r5, #98	; 0x62
    const uint8_t * s8 = (const uint8_t *)src;
  4096d8:	aa02      	add	r2, sp, #8
  4096da:	2308      	movs	r3, #8
  4096dc:	e004      	b.n	4096e8 <_lv_inv_area+0xec>
        *d8 = *s8;
  4096de:	f812 0b01 	ldrb.w	r0, [r2], #1
  4096e2:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  4096e6:	3b01      	subs	r3, #1
    while(len) {
  4096e8:	2b00      	cmp	r3, #0
  4096ea:	d1f8      	bne.n	4096de <_lv_inv_area+0xe2>
  4096ec:	e7de      	b.n	4096ac <_lv_inv_area+0xb0>
  4096ee:	bf00      	nop
  4096f0:	00415c21 	.word	0x00415c21
  4096f4:	00415c51 	.word	0x00415c51
  4096f8:	004164e3 	.word	0x004164e3
  4096fc:	00416759 	.word	0x00416759
  409700:	00415c15 	.word	0x00415c15
  409704:	004187ad 	.word	0x004187ad

00409708 <_lv_refr_get_disp_refreshing>:
}
  409708:	4b01      	ldr	r3, [pc, #4]	; (409710 <_lv_refr_get_disp_refreshing+0x8>)
  40970a:	6818      	ldr	r0, [r3, #0]
  40970c:	4770      	bx	lr
  40970e:	bf00      	nop
  409710:	2040c404 	.word	0x2040c404

00409714 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
  409714:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  409716:	4d1e      	ldr	r5, [pc, #120]	; (409790 <lv_refr_vdb_flush+0x7c>)
  409718:	6828      	ldr	r0, [r5, #0]
  40971a:	4b1e      	ldr	r3, [pc, #120]	; (409794 <lv_refr_vdb_flush+0x80>)
  40971c:	4798      	blx	r3
  40971e:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
  409720:	6828      	ldr	r0, [r5, #0]
  409722:	4b1d      	ldr	r3, [pc, #116]	; (409798 <lv_refr_vdb_flush+0x84>)
  409724:	4798      	blx	r3
  409726:	b978      	cbnz	r0, 409748 <lv_refr_vdb_flush+0x34>
        while(vdb->flushing) {
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
        }
    }

    vdb->flushing = 1;
  409728:	2301      	movs	r3, #1
  40972a:	61a3      	str	r3, [r4, #24]

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
  40972c:	4b18      	ldr	r3, [pc, #96]	; (409790 <lv_refr_vdb_flush+0x7c>)
  40972e:	681b      	ldr	r3, [r3, #0]
  409730:	685b      	ldr	r3, [r3, #4]
  409732:	6a1a      	ldr	r2, [r3, #32]
  409734:	f012 0f01 	tst.w	r2, #1
  409738:	d010      	beq.n	40975c <lv_refr_vdb_flush+0x48>
  40973a:	6a1b      	ldr	r3, [r3, #32]
  40973c:	f013 0f02 	tst.w	r3, #2
  409740:	d00c      	beq.n	40975c <lv_refr_vdb_flush+0x48>
  409742:	2301      	movs	r3, #1
  409744:	61e3      	str	r3, [r4, #28]
  409746:	e00b      	b.n	409760 <lv_refr_vdb_flush+0x4c>
        while(vdb->flushing) {
  409748:	69a3      	ldr	r3, [r4, #24]
  40974a:	2b00      	cmp	r3, #0
  40974c:	d0ec      	beq.n	409728 <lv_refr_vdb_flush+0x14>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
  40974e:	4b10      	ldr	r3, [pc, #64]	; (409790 <lv_refr_vdb_flush+0x7c>)
  409750:	6818      	ldr	r0, [r3, #0]
  409752:	69c3      	ldr	r3, [r0, #28]
  409754:	2b00      	cmp	r3, #0
  409756:	d0f7      	beq.n	409748 <lv_refr_vdb_flush+0x34>
  409758:	4798      	blx	r3
  40975a:	e7f5      	b.n	409748 <lv_refr_vdb_flush+0x34>
    else vdb->flushing_last = 0;
  40975c:	2300      	movs	r3, #0
  40975e:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  409760:	4b0e      	ldr	r3, [pc, #56]	; (40979c <lv_refr_vdb_flush+0x88>)
  409762:	4798      	blx	r3
  409764:	4605      	mov	r5, r0
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  409766:	6a43      	ldr	r3, [r0, #36]	; 0x24
  409768:	b103      	cbz	r3, 40976c <lv_refr_vdb_flush+0x58>
  40976a:	4798      	blx	r3

    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
  40976c:	68eb      	ldr	r3, [r5, #12]
  40976e:	b123      	cbz	r3, 40977a <lv_refr_vdb_flush+0x66>
  409770:	68a2      	ldr	r2, [r4, #8]
  409772:	f104 0110 	add.w	r1, r4, #16
  409776:	4628      	mov	r0, r5
  409778:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
  40977a:	6823      	ldr	r3, [r4, #0]
  40977c:	b12b      	cbz	r3, 40978a <lv_refr_vdb_flush+0x76>
  40977e:	6862      	ldr	r2, [r4, #4]
  409780:	b11a      	cbz	r2, 40978a <lv_refr_vdb_flush+0x76>
        if(vdb->buf_act == vdb->buf1)
  409782:	68a1      	ldr	r1, [r4, #8]
  409784:	428b      	cmp	r3, r1
  409786:	d001      	beq.n	40978c <lv_refr_vdb_flush+0x78>
            vdb->buf_act = vdb->buf2;
        else
            vdb->buf_act = vdb->buf1;
  409788:	60a3      	str	r3, [r4, #8]
  40978a:	bd38      	pop	{r3, r4, r5, pc}
            vdb->buf_act = vdb->buf2;
  40978c:	60a2      	str	r2, [r4, #8]
  40978e:	bd38      	pop	{r3, r4, r5, pc}
  409790:	2040c404 	.word	0x2040c404
  409794:	00415d25 	.word	0x00415d25
  409798:	00415d5d 	.word	0x00415d5d
  40979c:	00409709 	.word	0x00409709

004097a0 <lv_refr_area_part>:
{
  4097a0:	b570      	push	{r4, r5, r6, lr}
  4097a2:	b09c      	sub	sp, #112	; 0x70
  4097a4:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  4097a6:	4d4c      	ldr	r5, [pc, #304]	; (4098d8 <lv_refr_area_part+0x138>)
  4097a8:	6828      	ldr	r0, [r5, #0]
  4097aa:	4b4c      	ldr	r3, [pc, #304]	; (4098dc <lv_refr_area_part+0x13c>)
  4097ac:	4798      	blx	r3
  4097ae:	4604      	mov	r4, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
  4097b0:	6828      	ldr	r0, [r5, #0]
  4097b2:	4b4b      	ldr	r3, [pc, #300]	; (4098e0 <lv_refr_area_part+0x140>)
  4097b4:	4798      	blx	r3
  4097b6:	b940      	cbnz	r0, 4097ca <lv_refr_area_part+0x2a>
        while(vdb->flushing) {
  4097b8:	69a3      	ldr	r3, [r4, #24]
  4097ba:	b133      	cbz	r3, 4097ca <lv_refr_area_part+0x2a>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
  4097bc:	4b46      	ldr	r3, [pc, #280]	; (4098d8 <lv_refr_area_part+0x138>)
  4097be:	6818      	ldr	r0, [r3, #0]
  4097c0:	69c3      	ldr	r3, [r0, #28]
  4097c2:	2b00      	cmp	r3, #0
  4097c4:	d0f8      	beq.n	4097b8 <lv_refr_area_part+0x18>
  4097c6:	4798      	blx	r3
  4097c8:	e7f6      	b.n	4097b8 <lv_refr_area_part+0x18>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
  4097ca:	f104 0210 	add.w	r2, r4, #16
  4097ce:	4631      	mov	r1, r6
  4097d0:	a81a      	add	r0, sp, #104	; 0x68
  4097d2:	4b44      	ldr	r3, [pc, #272]	; (4098e4 <lv_refr_area_part+0x144>)
  4097d4:	4798      	blx	r3
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
  4097d6:	4d40      	ldr	r5, [pc, #256]	; (4098d8 <lv_refr_area_part+0x138>)
  4097d8:	6828      	ldr	r0, [r5, #0]
  4097da:	4b43      	ldr	r3, [pc, #268]	; (4098e8 <lv_refr_area_part+0x148>)
  4097dc:	4798      	blx	r3
  4097de:	4601      	mov	r1, r0
  4097e0:	a81a      	add	r0, sp, #104	; 0x68
  4097e2:	4b42      	ldr	r3, [pc, #264]	; (4098ec <lv_refr_area_part+0x14c>)
  4097e4:	4798      	blx	r3
  4097e6:	4604      	mov	r4, r0
    if(disp_refr->prev_scr) {
  4097e8:	682b      	ldr	r3, [r5, #0]
  4097ea:	6c99      	ldr	r1, [r3, #72]	; 0x48
  4097ec:	2900      	cmp	r1, #0
  4097ee:	d03d      	beq.n	40986c <lv_refr_area_part+0xcc>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
  4097f0:	a81a      	add	r0, sp, #104	; 0x68
  4097f2:	4b3e      	ldr	r3, [pc, #248]	; (4098ec <lv_refr_area_part+0x14c>)
  4097f4:	4798      	blx	r3
  4097f6:	4605      	mov	r5, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
  4097f8:	2c00      	cmp	r4, #0
  4097fa:	bf08      	it	eq
  4097fc:	2d00      	cmpeq	r5, #0
  4097fe:	d113      	bne.n	409828 <lv_refr_area_part+0x88>
        if(disp_refr->bg_img) {
  409800:	4b35      	ldr	r3, [pc, #212]	; (4098d8 <lv_refr_area_part+0x138>)
  409802:	681b      	ldr	r3, [r3, #0]
  409804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  409806:	2b00      	cmp	r3, #0
  409808:	d04a      	beq.n	4098a0 <lv_refr_area_part+0x100>
            lv_draw_img_dsc_init(&dsc);
  40980a:	a805      	add	r0, sp, #20
  40980c:	4b38      	ldr	r3, [pc, #224]	; (4098f0 <lv_refr_area_part+0x150>)
  40980e:	4798      	blx	r3
            dsc.opa = disp_refr->bg_opa;
  409810:	4b31      	ldr	r3, [pc, #196]	; (4098d8 <lv_refr_area_part+0x138>)
  409812:	681b      	ldr	r3, [r3, #0]
  409814:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
  409818:	f88d 2014 	strb.w	r2, [sp, #20]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
  40981c:	a902      	add	r1, sp, #8
  40981e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
  409820:	4b34      	ldr	r3, [pc, #208]	; (4098f4 <lv_refr_area_part+0x154>)
  409822:	4798      	blx	r3
            if(res == LV_RES_OK) {
  409824:	2801      	cmp	r0, #1
  409826:	d023      	beq.n	409870 <lv_refr_area_part+0xd0>
    if(disp_refr->prev_scr) {
  409828:	4b2b      	ldr	r3, [pc, #172]	; (4098d8 <lv_refr_area_part+0x138>)
  40982a:	681b      	ldr	r3, [r3, #0]
  40982c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40982e:	b12b      	cbz	r3, 40983c <lv_refr_area_part+0x9c>
        if(top_prev_scr == NULL) {
  409830:	2d00      	cmp	r5, #0
  409832:	d048      	beq.n	4098c6 <lv_refr_area_part+0x126>
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
  409834:	a91a      	add	r1, sp, #104	; 0x68
  409836:	4628      	mov	r0, r5
  409838:	4b2f      	ldr	r3, [pc, #188]	; (4098f8 <lv_refr_area_part+0x158>)
  40983a:	4798      	blx	r3
    if(top_act_scr == NULL) {
  40983c:	2c00      	cmp	r4, #0
  40983e:	d044      	beq.n	4098ca <lv_refr_area_part+0x12a>
    lv_refr_obj_and_children(top_act_scr, &start_mask);
  409840:	a91a      	add	r1, sp, #104	; 0x68
  409842:	4620      	mov	r0, r4
  409844:	4d2c      	ldr	r5, [pc, #176]	; (4098f8 <lv_refr_area_part+0x158>)
  409846:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
  409848:	4c23      	ldr	r4, [pc, #140]	; (4098d8 <lv_refr_area_part+0x138>)
  40984a:	6820      	ldr	r0, [r4, #0]
  40984c:	4b2b      	ldr	r3, [pc, #172]	; (4098fc <lv_refr_area_part+0x15c>)
  40984e:	4798      	blx	r3
  409850:	a91a      	add	r1, sp, #104	; 0x68
  409852:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
  409854:	6820      	ldr	r0, [r4, #0]
  409856:	4b2a      	ldr	r3, [pc, #168]	; (409900 <lv_refr_area_part+0x160>)
  409858:	4798      	blx	r3
  40985a:	a91a      	add	r1, sp, #104	; 0x68
  40985c:	47a8      	blx	r5
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
  40985e:	6820      	ldr	r0, [r4, #0]
  409860:	4b28      	ldr	r3, [pc, #160]	; (409904 <lv_refr_area_part+0x164>)
  409862:	4798      	blx	r3
  409864:	2800      	cmp	r0, #0
  409866:	d034      	beq.n	4098d2 <lv_refr_area_part+0x132>
}
  409868:	b01c      	add	sp, #112	; 0x70
  40986a:	bd70      	pop	{r4, r5, r6, pc}
    lv_obj_t * top_prev_scr = NULL;
  40986c:	2500      	movs	r5, #0
  40986e:	e7c3      	b.n	4097f8 <lv_refr_area_part+0x58>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
  409870:	9b02      	ldr	r3, [sp, #8]
  409872:	f3c3 238a 	ubfx	r3, r3, #10, #11
  409876:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  40987a:	f3c2 124a 	ubfx	r2, r2, #5, #11
  40987e:	3a01      	subs	r2, #1
  409880:	9200      	str	r2, [sp, #0]
  409882:	3b01      	subs	r3, #1
  409884:	2200      	movs	r2, #0
  409886:	4611      	mov	r1, r2
  409888:	a803      	add	r0, sp, #12
  40988a:	4e1f      	ldr	r6, [pc, #124]	; (409908 <lv_refr_area_part+0x168>)
  40988c:	47b0      	blx	r6
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
  40988e:	4b12      	ldr	r3, [pc, #72]	; (4098d8 <lv_refr_area_part+0x138>)
  409890:	681a      	ldr	r2, [r3, #0]
  409892:	ab05      	add	r3, sp, #20
  409894:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  409896:	a91a      	add	r1, sp, #104	; 0x68
  409898:	a803      	add	r0, sp, #12
  40989a:	4e1c      	ldr	r6, [pc, #112]	; (40990c <lv_refr_area_part+0x16c>)
  40989c:	47b0      	blx	r6
  40989e:	e7c3      	b.n	409828 <lv_refr_area_part+0x88>
            lv_draw_rect_dsc_init(&dsc);
  4098a0:	a805      	add	r0, sp, #20
  4098a2:	4b1b      	ldr	r3, [pc, #108]	; (409910 <lv_refr_area_part+0x170>)
  4098a4:	4798      	blx	r3
            dsc.bg_color = disp_refr->bg_color;
  4098a6:	4b0c      	ldr	r3, [pc, #48]	; (4098d8 <lv_refr_area_part+0x138>)
  4098a8:	681b      	ldr	r3, [r3, #0]
  4098aa:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
  4098ae:	f8ad 2016 	strh.w	r2, [sp, #22]
            dsc.bg_opa = disp_refr->bg_opa;
  4098b2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
  4098b6:	f88d 3020 	strb.w	r3, [sp, #32]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
  4098ba:	aa05      	add	r2, sp, #20
  4098bc:	a91a      	add	r1, sp, #104	; 0x68
  4098be:	4608      	mov	r0, r1
  4098c0:	4b14      	ldr	r3, [pc, #80]	; (409914 <lv_refr_area_part+0x174>)
  4098c2:	4798      	blx	r3
  4098c4:	e7b0      	b.n	409828 <lv_refr_area_part+0x88>
            top_prev_scr = disp_refr->prev_scr;
  4098c6:	461d      	mov	r5, r3
  4098c8:	e7b4      	b.n	409834 <lv_refr_area_part+0x94>
        top_act_scr = disp_refr->act_scr;
  4098ca:	4b03      	ldr	r3, [pc, #12]	; (4098d8 <lv_refr_area_part+0x138>)
  4098cc:	681b      	ldr	r3, [r3, #0]
  4098ce:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  4098d0:	e7b6      	b.n	409840 <lv_refr_area_part+0xa0>
        lv_refr_vdb_flush();
  4098d2:	4b11      	ldr	r3, [pc, #68]	; (409918 <lv_refr_area_part+0x178>)
  4098d4:	4798      	blx	r3
}
  4098d6:	e7c7      	b.n	409868 <lv_refr_area_part+0xc8>
  4098d8:	2040c404 	.word	0x2040c404
  4098dc:	00415d25 	.word	0x00415d25
  4098e0:	00415d5d 	.word	0x00415d5d
  4098e4:	004164e3 	.word	0x004164e3
  4098e8:	00403659 	.word	0x00403659
  4098ec:	004093e5 	.word	0x004093e5
  4098f0:	0040dd85 	.word	0x0040dd85
  4098f4:	00414839 	.word	0x00414839
  4098f8:	0040957d 	.word	0x0040957d
  4098fc:	00403691 	.word	0x00403691
  409900:	004036ad 	.word	0x004036ad
  409904:	00415d75 	.word	0x00415d75
  409908:	004164ad 	.word	0x004164ad
  40990c:	0040e031 	.word	0x0040e031
  409910:	0041338d 	.word	0x0041338d
  409914:	004133d9 	.word	0x004133d9
  409918:	00409715 	.word	0x00409715

0040991c <lv_refr_area>:
{
  40991c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  409920:	b083      	sub	sp, #12
  409922:	4606      	mov	r6, r0
    if(lv_disp_is_true_double_buf(disp_refr)) {
  409924:	4b62      	ldr	r3, [pc, #392]	; (409ab0 <lv_refr_area+0x194>)
  409926:	6818      	ldr	r0, [r3, #0]
  409928:	4b62      	ldr	r3, [pc, #392]	; (409ab4 <lv_refr_area+0x198>)
  40992a:	4798      	blx	r3
  40992c:	2800      	cmp	r0, #0
  40992e:	d157      	bne.n	4099e0 <lv_refr_area+0xc4>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  409930:	f8df 917c 	ldr.w	r9, [pc, #380]	; 409ab0 <lv_refr_area+0x194>
  409934:	f8d9 0000 	ldr.w	r0, [r9]
  409938:	4b5f      	ldr	r3, [pc, #380]	; (409ab8 <lv_refr_area+0x19c>)
  40993a:	4798      	blx	r3
  40993c:	4605      	mov	r5, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40993e:	f8b6 8004 	ldrh.w	r8, [r6, #4]
  409942:	8833      	ldrh	r3, [r6, #0]
  409944:	eba8 0803 	sub.w	r8, r8, r3
  409948:	fa1f f888 	uxth.w	r8, r8
  40994c:	f108 0801 	add.w	r8, r8, #1
  409950:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  409954:	f9b6 7006 	ldrsh.w	r7, [r6, #6]
  409958:	b2bc      	uxth	r4, r7
  40995a:	8873      	ldrh	r3, [r6, #2]
  40995c:	1ae4      	subs	r4, r4, r3
  40995e:	b2a4      	uxth	r4, r4
  409960:	3401      	adds	r4, #1
  409962:	b224      	sxth	r4, r4
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
  409964:	f8d9 0000 	ldr.w	r0, [r9]
  409968:	4b54      	ldr	r3, [pc, #336]	; (409abc <lv_refr_area+0x1a0>)
  40996a:	4798      	blx	r3
        lv_coord_t y2 =
  40996c:	42b8      	cmp	r0, r7
  40996e:	dd59      	ble.n	409a24 <lv_refr_area+0x108>
  409970:	f9b6 7006 	ldrsh.w	r7, [r6, #6]
        int32_t max_row = (uint32_t)vdb->size / w;
  409974:	68eb      	ldr	r3, [r5, #12]
  409976:	fbb3 f3f8 	udiv	r3, r3, r8
        if(max_row > h) max_row = h;
  40997a:	46a0      	mov	r8, r4
  40997c:	42a3      	cmp	r3, r4
  40997e:	dc00      	bgt.n	409982 <lv_refr_area+0x66>
        int32_t max_row = (uint32_t)vdb->size / w;
  409980:	4698      	mov	r8, r3
        if(disp_refr->driver.rounder_cb) {
  409982:	4b4b      	ldr	r3, [pc, #300]	; (409ab0 <lv_refr_area+0x194>)
  409984:	681b      	ldr	r3, [r3, #0]
  409986:	691b      	ldr	r3, [r3, #16]
  409988:	b32b      	cbz	r3, 4099d6 <lv_refr_area+0xba>
            tmp.x1 = 0;
  40998a:	2300      	movs	r3, #0
  40998c:	f8ad 3000 	strh.w	r3, [sp]
            tmp.x2 = 0;
  409990:	f8ad 3004 	strh.w	r3, [sp, #4]
            tmp.y1 = 0;
  409994:	f8ad 3002 	strh.w	r3, [sp, #2]
            lv_coord_t h_tmp = max_row;
  409998:	fa0f f988 	sxth.w	r9, r8
                tmp.y2 = h_tmp - 1;
  40999c:	f109 34ff 	add.w	r4, r9, #4294967295
  4099a0:	b224      	sxth	r4, r4
  4099a2:	f8ad 4006 	strh.w	r4, [sp, #6]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
  4099a6:	4b42      	ldr	r3, [pc, #264]	; (409ab0 <lv_refr_area+0x194>)
  4099a8:	6818      	ldr	r0, [r3, #0]
  4099aa:	6903      	ldr	r3, [r0, #16]
  4099ac:	4669      	mov	r1, sp
  4099ae:	4798      	blx	r3
  4099b0:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  4099b4:	b293      	uxth	r3, r2
  4099b6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
  4099ba:	1a5b      	subs	r3, r3, r1
  4099bc:	b29b      	uxth	r3, r3
  4099be:	3301      	adds	r3, #1
  4099c0:	b21b      	sxth	r3, r3
                if(lv_area_get_height(&tmp) <= max_row) break;
  4099c2:	4598      	cmp	r8, r3
  4099c4:	da02      	bge.n	4099cc <lv_refr_area+0xb0>
                h_tmp--;
  4099c6:	46a1      	mov	r9, r4
            } while(h_tmp > 0);
  4099c8:	2c00      	cmp	r4, #0
  4099ca:	dce7      	bgt.n	40999c <lv_refr_area+0x80>
            if(h_tmp <= 0) {
  4099cc:	f1b9 0f00 	cmp.w	r9, #0
  4099d0:	dd25      	ble.n	409a1e <lv_refr_area+0x102>
                max_row = tmp.y2 + 1;
  4099d2:	f102 0801 	add.w	r8, r2, #1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  4099d6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
        lv_coord_t row_last = 0;
  4099da:	f04f 0900 	mov.w	r9, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  4099de:	e031      	b.n	409a44 <lv_refr_area+0x128>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  4099e0:	4c33      	ldr	r4, [pc, #204]	; (409ab0 <lv_refr_area+0x194>)
  4099e2:	6820      	ldr	r0, [r4, #0]
  4099e4:	4b34      	ldr	r3, [pc, #208]	; (409ab8 <lv_refr_area+0x19c>)
  4099e6:	4798      	blx	r3
  4099e8:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
  4099ea:	2700      	movs	r7, #0
  4099ec:	8207      	strh	r7, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
  4099ee:	6820      	ldr	r0, [r4, #0]
  4099f0:	4b33      	ldr	r3, [pc, #204]	; (409ac0 <lv_refr_area+0x1a4>)
  4099f2:	4798      	blx	r3
  4099f4:	b280      	uxth	r0, r0
  4099f6:	3801      	subs	r0, #1
  4099f8:	82a8      	strh	r0, [r5, #20]
        vdb->area.y1        = 0;
  4099fa:	826f      	strh	r7, [r5, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
  4099fc:	6820      	ldr	r0, [r4, #0]
  4099fe:	4b2f      	ldr	r3, [pc, #188]	; (409abc <lv_refr_area+0x1a0>)
  409a00:	4798      	blx	r3
  409a02:	b280      	uxth	r0, r0
  409a04:	3801      	subs	r0, #1
  409a06:	82e8      	strh	r0, [r5, #22]
        disp_refr->driver.buffer->last_part = 1;
  409a08:	6823      	ldr	r3, [r4, #0]
  409a0a:	685a      	ldr	r2, [r3, #4]
  409a0c:	f892 3020 	ldrb.w	r3, [r2, #32]
  409a10:	f043 0302 	orr.w	r3, r3, #2
  409a14:	f882 3020 	strb.w	r3, [r2, #32]
        lv_refr_area_part(area_p);
  409a18:	4630      	mov	r0, r6
  409a1a:	4b2a      	ldr	r3, [pc, #168]	; (409ac4 <lv_refr_area+0x1a8>)
  409a1c:	4798      	blx	r3
}
  409a1e:	b003      	add	sp, #12
  409a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
  409a24:	f8d9 0000 	ldr.w	r0, [r9]
  409a28:	4b24      	ldr	r3, [pc, #144]	; (409abc <lv_refr_area+0x1a0>)
  409a2a:	4798      	blx	r3
  409a2c:	b287      	uxth	r7, r0
  409a2e:	3f01      	subs	r7, #1
        lv_coord_t y2 =
  409a30:	b23f      	sxth	r7, r7
  409a32:	e79f      	b.n	409974 <lv_refr_area+0x58>
            row_last = vdb->area.y2;
  409a34:	f9b5 9016 	ldrsh.w	r9, [r5, #22]
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
  409a38:	454f      	cmp	r7, r9
  409a3a:	d018      	beq.n	409a6e <lv_refr_area+0x152>
            lv_refr_area_part(area_p);
  409a3c:	4630      	mov	r0, r6
  409a3e:	4b21      	ldr	r3, [pc, #132]	; (409ac4 <lv_refr_area+0x1a8>)
  409a40:	4798      	blx	r3
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  409a42:	b223      	sxth	r3, r4
  409a44:	eb03 0208 	add.w	r2, r3, r8
  409a48:	3a01      	subs	r2, #1
  409a4a:	42ba      	cmp	r2, r7
  409a4c:	dc19      	bgt.n	409a82 <lv_refr_area+0x166>
            vdb->area.x1 = area_p->x1;
  409a4e:	f9b6 2000 	ldrsh.w	r2, [r6]
  409a52:	822a      	strh	r2, [r5, #16]
            vdb->area.x2 = area_p->x2;
  409a54:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
  409a58:	82aa      	strh	r2, [r5, #20]
            vdb->area.y1 = row;
  409a5a:	826b      	strh	r3, [r5, #18]
            vdb->area.y2 = row + max_row - 1;
  409a5c:	4443      	add	r3, r8
  409a5e:	b29c      	uxth	r4, r3
  409a60:	1e63      	subs	r3, r4, #1
  409a62:	b21b      	sxth	r3, r3
  409a64:	82eb      	strh	r3, [r5, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
  409a66:	429f      	cmp	r7, r3
  409a68:	dae4      	bge.n	409a34 <lv_refr_area+0x118>
  409a6a:	82ef      	strh	r7, [r5, #22]
  409a6c:	e7e2      	b.n	409a34 <lv_refr_area+0x118>
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
  409a6e:	4b10      	ldr	r3, [pc, #64]	; (409ab0 <lv_refr_area+0x194>)
  409a70:	681b      	ldr	r3, [r3, #0]
  409a72:	685a      	ldr	r2, [r3, #4]
  409a74:	f892 3020 	ldrb.w	r3, [r2, #32]
  409a78:	f043 0302 	orr.w	r3, r3, #2
  409a7c:	f882 3020 	strb.w	r3, [r2, #32]
  409a80:	e7dc      	b.n	409a3c <lv_refr_area+0x120>
        if(y2 != row_last) {
  409a82:	45b9      	cmp	r9, r7
  409a84:	d0cb      	beq.n	409a1e <lv_refr_area+0x102>
            vdb->area.x1 = area_p->x1;
  409a86:	f9b6 2000 	ldrsh.w	r2, [r6]
  409a8a:	822a      	strh	r2, [r5, #16]
            vdb->area.x2 = area_p->x2;
  409a8c:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
  409a90:	82aa      	strh	r2, [r5, #20]
            vdb->area.y1 = row;
  409a92:	826b      	strh	r3, [r5, #18]
            vdb->area.y2 = y2;
  409a94:	82ef      	strh	r7, [r5, #22]
            disp_refr->driver.buffer->last_part = 1;
  409a96:	4b06      	ldr	r3, [pc, #24]	; (409ab0 <lv_refr_area+0x194>)
  409a98:	681b      	ldr	r3, [r3, #0]
  409a9a:	685a      	ldr	r2, [r3, #4]
  409a9c:	f892 3020 	ldrb.w	r3, [r2, #32]
  409aa0:	f043 0302 	orr.w	r3, r3, #2
  409aa4:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
  409aa8:	4630      	mov	r0, r6
  409aaa:	4b06      	ldr	r3, [pc, #24]	; (409ac4 <lv_refr_area+0x1a8>)
  409aac:	4798      	blx	r3
  409aae:	e7b6      	b.n	409a1e <lv_refr_area+0x102>
  409ab0:	2040c404 	.word	0x2040c404
  409ab4:	00415d75 	.word	0x00415d75
  409ab8:	00415d25 	.word	0x00415d25
  409abc:	00415c51 	.word	0x00415c51
  409ac0:	00415c21 	.word	0x00415c21
  409ac4:	004097a1 	.word	0x004097a1

00409ac8 <lv_refr_areas>:
    px_num = 0;
  409ac8:	2200      	movs	r2, #0
  409aca:	4b2b      	ldr	r3, [pc, #172]	; (409b78 <lv_refr_areas+0xb0>)
  409acc:	601a      	str	r2, [r3, #0]
    if(disp_refr->inv_p == 0) return;
  409ace:	4b2b      	ldr	r3, [pc, #172]	; (409b7c <lv_refr_areas+0xb4>)
  409ad0:	681a      	ldr	r2, [r3, #0]
  409ad2:	f8b2 3182 	ldrh.w	r3, [r2, #386]	; 0x182
  409ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
  409ada:	2b00      	cmp	r3, #0
  409adc:	d04b      	beq.n	409b76 <lv_refr_areas+0xae>
{
  409ade:	b570      	push	{r4, r5, r6, lr}
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
  409ae0:	1e5e      	subs	r6, r3, #1
  409ae2:	2e00      	cmp	r6, #0
  409ae4:	db05      	blt.n	409af2 <lv_refr_areas+0x2a>
        if(disp_refr->inv_area_joined[i] == 0) {
  409ae6:	1993      	adds	r3, r2, r6
  409ae8:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  409aec:	b113      	cbz	r3, 409af4 <lv_refr_areas+0x2c>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
  409aee:	3e01      	subs	r6, #1
  409af0:	e7f7      	b.n	409ae2 <lv_refr_areas+0x1a>
    int32_t last_i = 0;
  409af2:	2600      	movs	r6, #0
    disp_refr->driver.buffer->last_area = 0;
  409af4:	6851      	ldr	r1, [r2, #4]
  409af6:	f891 3020 	ldrb.w	r3, [r1, #32]
  409afa:	f36f 0300 	bfc	r3, #0, #1
  409afe:	f881 3020 	strb.w	r3, [r1, #32]
    disp_refr->driver.buffer->last_part = 0;
  409b02:	6852      	ldr	r2, [r2, #4]
  409b04:	f892 3020 	ldrb.w	r3, [r2, #32]
  409b08:	f36f 0341 	bfc	r3, #1, #1
  409b0c:	f882 3020 	strb.w	r3, [r2, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
  409b10:	2400      	movs	r4, #0
  409b12:	e01f      	b.n	409b54 <lv_refr_areas+0x8c>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
  409b14:	6842      	ldr	r2, [r0, #4]
  409b16:	f892 3020 	ldrb.w	r3, [r2, #32]
  409b1a:	f043 0301 	orr.w	r3, r3, #1
  409b1e:	f882 3020 	strb.w	r3, [r2, #32]
            disp_refr->driver.buffer->last_part = 0;
  409b22:	6842      	ldr	r2, [r0, #4]
  409b24:	f892 3020 	ldrb.w	r3, [r2, #32]
  409b28:	f36f 0341 	bfc	r3, #1, #1
  409b2c:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
  409b30:	f104 050c 	add.w	r5, r4, #12
  409b34:	00ed      	lsls	r5, r5, #3
  409b36:	4428      	add	r0, r5
  409b38:	3002      	adds	r0, #2
  409b3a:	4b11      	ldr	r3, [pc, #68]	; (409b80 <lv_refr_areas+0xb8>)
  409b3c:	4798      	blx	r3
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
  409b3e:	4b0f      	ldr	r3, [pc, #60]	; (409b7c <lv_refr_areas+0xb4>)
  409b40:	6818      	ldr	r0, [r3, #0]
  409b42:	4428      	add	r0, r5
  409b44:	3002      	adds	r0, #2
  409b46:	4b0f      	ldr	r3, [pc, #60]	; (409b84 <lv_refr_areas+0xbc>)
  409b48:	4798      	blx	r3
  409b4a:	4a0b      	ldr	r2, [pc, #44]	; (409b78 <lv_refr_areas+0xb0>)
  409b4c:	6813      	ldr	r3, [r2, #0]
  409b4e:	4418      	add	r0, r3
  409b50:	6010      	str	r0, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
  409b52:	3401      	adds	r4, #1
  409b54:	4b09      	ldr	r3, [pc, #36]	; (409b7c <lv_refr_areas+0xb4>)
  409b56:	6818      	ldr	r0, [r3, #0]
  409b58:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  409b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
  409b60:	429c      	cmp	r4, r3
  409b62:	da07      	bge.n	409b74 <lv_refr_areas+0xac>
        if(disp_refr->inv_area_joined[i] == 0) {
  409b64:	1903      	adds	r3, r0, r4
  409b66:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  409b6a:	2b00      	cmp	r3, #0
  409b6c:	d1f1      	bne.n	409b52 <lv_refr_areas+0x8a>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
  409b6e:	42b4      	cmp	r4, r6
  409b70:	d1d7      	bne.n	409b22 <lv_refr_areas+0x5a>
  409b72:	e7cf      	b.n	409b14 <lv_refr_areas+0x4c>
  409b74:	bd70      	pop	{r4, r5, r6, pc}
  409b76:	4770      	bx	lr
  409b78:	2040c408 	.word	0x2040c408
  409b7c:	2040c404 	.word	0x2040c404
  409b80:	0040991d 	.word	0x0040991d
  409b84:	004164c7 	.word	0x004164c7

00409b88 <_lv_disp_refr_task>:
{
  409b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409b8c:	b085      	sub	sp, #20
  409b8e:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
  409b90:	4b58      	ldr	r3, [pc, #352]	; (409cf4 <_lv_disp_refr_task+0x16c>)
  409b92:	4798      	blx	r3
  409b94:	9001      	str	r0, [sp, #4]
    disp_refr = task->user_data;
  409b96:	68eb      	ldr	r3, [r5, #12]
  409b98:	4c57      	ldr	r4, [pc, #348]	; (409cf8 <_lv_disp_refr_task+0x170>)
  409b9a:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
  409b9c:	2100      	movs	r1, #0
  409b9e:	4628      	mov	r0, r5
  409ba0:	4b56      	ldr	r3, [pc, #344]	; (409cfc <_lv_disp_refr_task+0x174>)
  409ba2:	4798      	blx	r3
    if(disp_refr->act_scr == NULL) {
  409ba4:	6823      	ldr	r3, [r4, #0]
  409ba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  409ba8:	b18a      	cbz	r2, 409bce <_lv_disp_refr_task+0x46>
    lv_refr_join_area();
  409baa:	4b55      	ldr	r3, [pc, #340]	; (409d00 <_lv_disp_refr_task+0x178>)
  409bac:	4798      	blx	r3
    lv_refr_areas();
  409bae:	4b55      	ldr	r3, [pc, #340]	; (409d04 <_lv_disp_refr_task+0x17c>)
  409bb0:	4798      	blx	r3
    if(disp_refr->inv_p != 0) {
  409bb2:	4b51      	ldr	r3, [pc, #324]	; (409cf8 <_lv_disp_refr_task+0x170>)
  409bb4:	6818      	ldr	r0, [r3, #0]
  409bb6:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  409bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
  409bbe:	b96b      	cbnz	r3, 409bdc <_lv_disp_refr_task+0x54>
    _lv_mem_buf_free_all();
  409bc0:	4b51      	ldr	r3, [pc, #324]	; (409d08 <_lv_disp_refr_task+0x180>)
  409bc2:	4798      	blx	r3
    _lv_font_clean_up_fmt_txt();
  409bc4:	4b51      	ldr	r3, [pc, #324]	; (409d0c <_lv_disp_refr_task+0x184>)
  409bc6:	4798      	blx	r3
}
  409bc8:	b005      	add	sp, #20
  409bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disp_refr->inv_p = 0;
  409bce:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  409bd2:	f36f 0209 	bfc	r2, #0, #10
  409bd6:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
        return;
  409bda:	e7f5      	b.n	409bc8 <_lv_disp_refr_task+0x40>
        if(lv_disp_is_true_double_buf(disp_refr)) {
  409bdc:	4b4c      	ldr	r3, [pc, #304]	; (409d10 <_lv_disp_refr_task+0x188>)
  409bde:	4798      	blx	r3
  409be0:	b118      	cbz	r0, 409bea <_lv_disp_refr_task+0x62>
            if(disp_refr->driver.set_px_cb) {
  409be2:	4b45      	ldr	r3, [pc, #276]	; (409cf8 <_lv_disp_refr_task+0x170>)
  409be4:	6818      	ldr	r0, [r3, #0]
  409be6:	6943      	ldr	r3, [r0, #20]
  409be8:	b1fb      	cbz	r3, 409c2a <_lv_disp_refr_task+0xa2>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
  409bea:	4c43      	ldr	r4, [pc, #268]	; (409cf8 <_lv_disp_refr_task+0x170>)
  409bec:	6820      	ldr	r0, [r4, #0]
  409bee:	f44f 7180 	mov.w	r1, #256	; 0x100
  409bf2:	3062      	adds	r0, #98	; 0x62
  409bf4:	4d47      	ldr	r5, [pc, #284]	; (409d14 <_lv_disp_refr_task+0x18c>)
  409bf6:	47a8      	blx	r5
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
  409bf8:	6820      	ldr	r0, [r4, #0]
  409bfa:	2120      	movs	r1, #32
  409bfc:	f500 70b1 	add.w	r0, r0, #354	; 0x162
  409c00:	47a8      	blx	r5
        disp_refr->inv_p = 0;
  409c02:	6823      	ldr	r3, [r4, #0]
  409c04:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  409c08:	f36f 0209 	bfc	r2, #0, #10
  409c0c:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
        elaps = lv_tick_elaps(start);
  409c10:	9801      	ldr	r0, [sp, #4]
  409c12:	4b41      	ldr	r3, [pc, #260]	; (409d18 <_lv_disp_refr_task+0x190>)
  409c14:	4798      	blx	r3
        if(disp_refr->driver.monitor_cb) {
  409c16:	6824      	ldr	r4, [r4, #0]
  409c18:	69a3      	ldr	r3, [r4, #24]
  409c1a:	2b00      	cmp	r3, #0
  409c1c:	d0d0      	beq.n	409bc0 <_lv_disp_refr_task+0x38>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
  409c1e:	4a3f      	ldr	r2, [pc, #252]	; (409d1c <_lv_disp_refr_task+0x194>)
  409c20:	6812      	ldr	r2, [r2, #0]
  409c22:	4601      	mov	r1, r0
  409c24:	4620      	mov	r0, r4
  409c26:	4798      	blx	r3
  409c28:	e7ca      	b.n	409bc0 <_lv_disp_refr_task+0x38>
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  409c2a:	4b3d      	ldr	r3, [pc, #244]	; (409d20 <_lv_disp_refr_task+0x198>)
  409c2c:	4798      	blx	r3
  409c2e:	4604      	mov	r4, r0
                lv_refr_vdb_flush();
  409c30:	4b3c      	ldr	r3, [pc, #240]	; (409d24 <_lv_disp_refr_task+0x19c>)
  409c32:	4798      	blx	r3
                while(vdb->flushing);
  409c34:	69a3      	ldr	r3, [r4, #24]
  409c36:	2b00      	cmp	r3, #0
  409c38:	d1fc      	bne.n	409c34 <_lv_disp_refr_task+0xac>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
  409c3a:	4b2f      	ldr	r3, [pc, #188]	; (409cf8 <_lv_disp_refr_task+0x170>)
  409c3c:	681b      	ldr	r3, [r3, #0]
  409c3e:	f9b3 0000 	ldrsh.w	r0, [r3]
  409c42:	0040      	lsls	r0, r0, #1
  409c44:	4b38      	ldr	r3, [pc, #224]	; (409d28 <_lv_disp_refr_task+0x1a0>)
  409c46:	4798      	blx	r3
  409c48:	9003      	str	r0, [sp, #12]
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
  409c4a:	f8d4 b008 	ldr.w	fp, [r4, #8]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
  409c4e:	f8d4 a000 	ldr.w	sl, [r4]
  409c52:	45d3      	cmp	fp, sl
  409c54:	d006      	beq.n	409c64 <_lv_disp_refr_task+0xdc>
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
  409c56:	4b28      	ldr	r3, [pc, #160]	; (409cf8 <_lv_disp_refr_task+0x170>)
  409c58:	6818      	ldr	r0, [r3, #0]
  409c5a:	4b34      	ldr	r3, [pc, #208]	; (409d2c <_lv_disp_refr_task+0x1a4>)
  409c5c:	4798      	blx	r3
  409c5e:	4681      	mov	r9, r0
                for(a = 0; a < disp_refr->inv_p; a++) {
  409c60:	2600      	movs	r6, #0
  409c62:	e01d      	b.n	409ca0 <_lv_disp_refr_task+0x118>
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
  409c64:	f8d4 a004 	ldr.w	sl, [r4, #4]
  409c68:	e7f5      	b.n	409c56 <_lv_disp_refr_task+0xce>
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
  409c6a:	9a02      	ldr	r2, [sp, #8]
  409c6c:	eb0a 0105 	add.w	r1, sl, r5
  409c70:	9803      	ldr	r0, [sp, #12]
  409c72:	4f2f      	ldr	r7, [pc, #188]	; (409d30 <_lv_disp_refr_task+0x1a8>)
  409c74:	47b8      	blx	r7
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
  409c76:	9a02      	ldr	r2, [sp, #8]
  409c78:	9903      	ldr	r1, [sp, #12]
  409c7a:	eb0b 0005 	add.w	r0, fp, r5
  409c7e:	47b8      	blx	r7
                            start_offs += hres * sizeof(lv_color_t);
  409c80:	eb05 0549 	add.w	r5, r5, r9, lsl #1
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
  409c84:	3401      	adds	r4, #1
  409c86:	b224      	sxth	r4, r4
  409c88:	4b1b      	ldr	r3, [pc, #108]	; (409cf8 <_lv_disp_refr_task+0x170>)
  409c8a:	681b      	ldr	r3, [r3, #0]
  409c8c:	f108 020c 	add.w	r2, r8, #12
  409c90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409c94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  409c98:	429c      	cmp	r4, r3
  409c9a:	dde6      	ble.n	409c6a <_lv_disp_refr_task+0xe2>
                for(a = 0; a < disp_refr->inv_p; a++) {
  409c9c:	3601      	adds	r6, #1
  409c9e:	b2b6      	uxth	r6, r6
  409ca0:	46b0      	mov	r8, r6
  409ca2:	4b15      	ldr	r3, [pc, #84]	; (409cf8 <_lv_disp_refr_task+0x170>)
  409ca4:	681b      	ldr	r3, [r3, #0]
  409ca6:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  409caa:	f3c2 0209 	ubfx	r2, r2, #0, #10
  409cae:	4296      	cmp	r6, r2
  409cb0:	da18      	bge.n	409ce4 <_lv_disp_refr_task+0x15c>
                    if(disp_refr->inv_area_joined[a] == 0) {
  409cb2:	199a      	adds	r2, r3, r6
  409cb4:	f892 2162 	ldrb.w	r2, [r2, #354]	; 0x162
  409cb8:	2a00      	cmp	r2, #0
  409cba:	d1ef      	bne.n	409c9c <_lv_disp_refr_task+0x114>
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
  409cbc:	f108 020c 	add.w	r2, r8, #12
  409cc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409cc4:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
  409cc8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  409ccc:	fb04 2509 	mla	r5, r4, r9, r2
                        uint32_t start_offs =
  409cd0:	006d      	lsls	r5, r5, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  409cd2:	88db      	ldrh	r3, [r3, #6]
  409cd4:	b292      	uxth	r2, r2
  409cd6:	1a9b      	subs	r3, r3, r2
  409cd8:	b29b      	uxth	r3, r3
  409cda:	3301      	adds	r3, #1
  409cdc:	b21b      	sxth	r3, r3
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
  409cde:	005b      	lsls	r3, r3, #1
  409ce0:	9302      	str	r3, [sp, #8]
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
  409ce2:	e7d1      	b.n	409c88 <_lv_disp_refr_task+0x100>
                if(copy_buf) _lv_mem_buf_release(copy_buf);
  409ce4:	9b03      	ldr	r3, [sp, #12]
  409ce6:	2b00      	cmp	r3, #0
  409ce8:	f43f af7f 	beq.w	409bea <_lv_disp_refr_task+0x62>
  409cec:	4618      	mov	r0, r3
  409cee:	4b11      	ldr	r3, [pc, #68]	; (409d34 <_lv_disp_refr_task+0x1ac>)
  409cf0:	4798      	blx	r3
  409cf2:	e77a      	b.n	409bea <_lv_disp_refr_task+0x62>
  409cf4:	0041602d 	.word	0x0041602d
  409cf8:	2040c404 	.word	0x2040c404
  409cfc:	004187ad 	.word	0x004187ad
  409d00:	004092f5 	.word	0x004092f5
  409d04:	00409ac9 	.word	0x00409ac9
  409d08:	004176a1 	.word	0x004176a1
  409d0c:	00415b81 	.word	0x00415b81
  409d10:	00415d75 	.word	0x00415d75
  409d14:	00417a21 	.word	0x00417a21
  409d18:	00416049 	.word	0x00416049
  409d1c:	2040c408 	.word	0x2040c408
  409d20:	00415d25 	.word	0x00415d25
  409d24:	00409715 	.word	0x00409715
  409d28:	00417895 	.word	0x00417895
  409d2c:	00415c21 	.word	0x00415c21
  409d30:	004176fd 	.word	0x004176fd
  409d34:	00417645 	.word	0x00417645

00409d38 <lv_style_init>:
/**
 * Initialize a style
 * @param style pointer to a style to initialize
 */
void lv_style_init(lv_style_t * style)
{
  409d38:	b508      	push	{r3, lr}
    _lv_memset_00(style, sizeof(lv_style_t));
  409d3a:	2104      	movs	r1, #4
  409d3c:	4b01      	ldr	r3, [pc, #4]	; (409d44 <lv_style_init+0xc>)
  409d3e:	4798      	blx	r3
  409d40:	bd08      	pop	{r3, pc}
  409d42:	bf00      	nop
  409d44:	00417a21 	.word	0x00417a21

00409d48 <lv_style_list_init>:
/**
 * Initialize a style list
 * @param list a style list to initialize
 */
void lv_style_list_init(lv_style_list_t * list)
{
  409d48:	b508      	push	{r3, lr}
    _lv_memset_00(list, sizeof(lv_style_list_t));
  409d4a:	2108      	movs	r1, #8
  409d4c:	4b01      	ldr	r3, [pc, #4]	; (409d54 <lv_style_list_init+0xc>)
  409d4e:	4798      	blx	r3
  409d50:	bd08      	pop	{r3, pc}
  409d52:	bf00      	nop
  409d54:	00417a21 	.word	0x00417a21

00409d58 <_lv_style_list_remove_style>:
 * Remove a style from a style list
 * @param style_list pointer to a style list
 * @param style pointer to a style to remove
 */
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)
{
  409d58:	b570      	push	{r4, r5, r6, lr}
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list->style_cnt == 0) return;
  409d5a:	7903      	ldrb	r3, [r0, #4]
  409d5c:	f013 063f 	ands.w	r6, r3, #63	; 0x3f
  409d60:	d051      	beq.n	409e06 <_lv_style_list_remove_style+0xae>
  409d62:	2300      	movs	r3, #0

    /*Check if the style really exists here*/
    uint8_t i;
    bool found = false;
    for(i = 0; i < list->style_cnt; i++) {
  409d64:	7902      	ldrb	r2, [r0, #4]
  409d66:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  409d6a:	4293      	cmp	r3, r2
  409d6c:	da07      	bge.n	409d7e <_lv_style_list_remove_style+0x26>
        if(list->style_list[i] == style) {
  409d6e:	6804      	ldr	r4, [r0, #0]
  409d70:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  409d74:	428c      	cmp	r4, r1
  409d76:	d016      	beq.n	409da6 <_lv_style_list_remove_style+0x4e>
    for(i = 0; i < list->style_cnt; i++) {
  409d78:	3301      	adds	r3, #1
  409d7a:	b2db      	uxtb	r3, r3
  409d7c:	e7f2      	b.n	409d64 <_lv_style_list_remove_style+0xc>
    bool found = false;
  409d7e:	2300      	movs	r3, #0
            found = true;
            break;
        }
    }
    if(found == false) return;
  409d80:	2b00      	cmp	r3, #0
  409d82:	d040      	beq.n	409e06 <_lv_style_list_remove_style+0xae>
  409d84:	460d      	mov	r5, r1
  409d86:	4604      	mov	r4, r0

    if(list->style_cnt == 1) {
  409d88:	2e01      	cmp	r6, #1
  409d8a:	d00e      	beq.n	409daa <_lv_style_list_remove_style+0x52>
        list->style_cnt = 0;
        list->has_local = 0;
        return;
    }

    lv_style_t ** new_classes = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
  409d8c:	3a01      	subs	r2, #1
  409d8e:	0090      	lsls	r0, r2, #2
  409d90:	4b1d      	ldr	r3, [pc, #116]	; (409e08 <_lv_style_list_remove_style+0xb0>)
  409d92:	4798      	blx	r3
  409d94:	4606      	mov	r6, r0
    LV_ASSERT_MEM(new_classes);
  409d96:	4b1d      	ldr	r3, [pc, #116]	; (409e0c <_lv_style_list_remove_style+0xb4>)
  409d98:	4798      	blx	r3
  409d9a:	b190      	cbz	r0, 409dc2 <_lv_style_list_remove_style+0x6a>
    if(new_classes == NULL) {
  409d9c:	2e00      	cmp	r6, #0
  409d9e:	d032      	beq.n	409e06 <_lv_style_list_remove_style+0xae>
  409da0:	2100      	movs	r1, #0
  409da2:	460b      	mov	r3, r1
  409da4:	e015      	b.n	409dd2 <_lv_style_list_remove_style+0x7a>
            found = true;
  409da6:	2301      	movs	r3, #1
  409da8:	e7ea      	b.n	409d80 <_lv_style_list_remove_style+0x28>
        lv_mem_free(list->style_list);
  409daa:	6800      	ldr	r0, [r0, #0]
  409dac:	4b18      	ldr	r3, [pc, #96]	; (409e10 <_lv_style_list_remove_style+0xb8>)
  409dae:	4798      	blx	r3
        list->style_list = NULL;
  409db0:	2200      	movs	r2, #0
  409db2:	6022      	str	r2, [r4, #0]
        list->style_cnt = 0;
  409db4:	7923      	ldrb	r3, [r4, #4]
        list->has_local = 0;
  409db6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  409dba:	f362 1386 	bfi	r3, r2, #6, #1
  409dbe:	7123      	strb	r3, [r4, #4]
        return;
  409dc0:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(new_classes);
  409dc2:	4632      	mov	r2, r6
  409dc4:	2300      	movs	r3, #0
  409dc6:	4813      	ldr	r0, [pc, #76]	; (409e14 <_lv_style_list_remove_style+0xbc>)
  409dc8:	4913      	ldr	r1, [pc, #76]	; (409e18 <_lv_style_list_remove_style+0xc0>)
  409dca:	4788      	blx	r1
  409dcc:	e7fe      	b.n	409dcc <_lv_style_list_remove_style+0x74>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
        return;
    }
    uint8_t j;
    for(i = 0, j = 0; i < list->style_cnt; i++) {
  409dce:	3301      	adds	r3, #1
  409dd0:	b2db      	uxtb	r3, r3
  409dd2:	7922      	ldrb	r2, [r4, #4]
  409dd4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  409dd8:	4293      	cmp	r3, r2
  409dda:	da09      	bge.n	409df0 <_lv_style_list_remove_style+0x98>
        if(list->style_list[i] == style) continue;
  409ddc:	6822      	ldr	r2, [r4, #0]
  409dde:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  409de2:	4295      	cmp	r5, r2
  409de4:	d0f3      	beq.n	409dce <_lv_style_list_remove_style+0x76>
        new_classes[j] = list->style_list[i];
  409de6:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
        j++;
  409dea:	3101      	adds	r1, #1
  409dec:	b2c9      	uxtb	r1, r1
  409dee:	e7ee      	b.n	409dce <_lv_style_list_remove_style+0x76>

    }

    lv_mem_free(list->style_list);
  409df0:	6820      	ldr	r0, [r4, #0]
  409df2:	4b07      	ldr	r3, [pc, #28]	; (409e10 <_lv_style_list_remove_style+0xb8>)
  409df4:	4798      	blx	r3

    list->style_cnt--;
  409df6:	7923      	ldrb	r3, [r4, #4]
  409df8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  409dfc:	323f      	adds	r2, #63	; 0x3f
  409dfe:	f362 0305 	bfi	r3, r2, #0, #6
  409e02:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
  409e04:	6026      	str	r6, [r4, #0]
  409e06:	bd70      	pop	{r4, r5, r6, pc}
  409e08:	004174ed 	.word	0x004174ed
  409e0c:	00416da9 	.word	0x00416da9
  409e10:	004175b1 	.word	0x004175b1
  409e14:	0042e54c 	.word	0x0042e54c
  409e18:	00416db5 	.word	0x00416db5

00409e1c <_lv_style_list_add_style>:
    if(list == NULL) return;
  409e1c:	2800      	cmp	r0, #0
  409e1e:	d048      	beq.n	409eb2 <_lv_style_list_add_style+0x96>
{
  409e20:	b570      	push	{r4, r5, r6, lr}
  409e22:	4604      	mov	r4, r0
  409e24:	460e      	mov	r6, r1
    _lv_style_list_remove_style(list, style);
  409e26:	4b23      	ldr	r3, [pc, #140]	; (409eb4 <_lv_style_list_add_style+0x98>)
  409e28:	4798      	blx	r3
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
  409e2a:	7923      	ldrb	r3, [r4, #4]
  409e2c:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  409e30:	d117      	bne.n	409e62 <_lv_style_list_add_style+0x46>
  409e32:	2004      	movs	r0, #4
  409e34:	4b20      	ldr	r3, [pc, #128]	; (409eb8 <_lv_style_list_add_style+0x9c>)
  409e36:	4798      	blx	r3
  409e38:	4605      	mov	r5, r0
    LV_ASSERT_MEM(new_classes);
  409e3a:	4628      	mov	r0, r5
  409e3c:	4b1f      	ldr	r3, [pc, #124]	; (409ebc <_lv_style_list_add_style+0xa0>)
  409e3e:	4798      	blx	r3
  409e40:	b1c8      	cbz	r0, 409e76 <_lv_style_list_add_style+0x5a>
    if(new_classes == NULL) {
  409e42:	2d00      	cmp	r5, #0
  409e44:	d034      	beq.n	409eb0 <_lv_style_list_add_style+0x94>
    if(list->has_trans) first_style++;
  409e46:	7923      	ldrb	r3, [r4, #4]
  409e48:	f013 0f80 	tst.w	r3, #128	; 0x80
  409e4c:	d119      	bne.n	409e82 <_lv_style_list_add_style+0x66>
    uint8_t first_style = 0;
  409e4e:	2200      	movs	r2, #0
    if(list->has_local) first_style++;
  409e50:	f013 0f40 	tst.w	r3, #64	; 0x40
  409e54:	d001      	beq.n	409e5a <_lv_style_list_add_style+0x3e>
  409e56:	3201      	adds	r2, #1
  409e58:	b2d2      	uxtb	r2, r2
    for(i = list->style_cnt; i > first_style; i--) {
  409e5a:	7923      	ldrb	r3, [r4, #4]
  409e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  409e60:	e01a      	b.n	409e98 <_lv_style_list_add_style+0x7c>
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
  409e62:	7921      	ldrb	r1, [r4, #4]
  409e64:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  409e68:	3101      	adds	r1, #1
  409e6a:	0089      	lsls	r1, r1, #2
  409e6c:	6820      	ldr	r0, [r4, #0]
  409e6e:	4b14      	ldr	r3, [pc, #80]	; (409ec0 <_lv_style_list_add_style+0xa4>)
  409e70:	4798      	blx	r3
  409e72:	4605      	mov	r5, r0
  409e74:	e7e1      	b.n	409e3a <_lv_style_list_add_style+0x1e>
    LV_ASSERT_MEM(new_classes);
  409e76:	462a      	mov	r2, r5
  409e78:	2300      	movs	r3, #0
  409e7a:	4812      	ldr	r0, [pc, #72]	; (409ec4 <_lv_style_list_add_style+0xa8>)
  409e7c:	4912      	ldr	r1, [pc, #72]	; (409ec8 <_lv_style_list_add_style+0xac>)
  409e7e:	4788      	blx	r1
  409e80:	e7fe      	b.n	409e80 <_lv_style_list_add_style+0x64>
    if(list->has_trans) first_style++;
  409e82:	2201      	movs	r2, #1
  409e84:	e7e4      	b.n	409e50 <_lv_style_list_add_style+0x34>
        new_classes[i] = new_classes[i - 1];
  409e86:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
  409e8a:	4419      	add	r1, r3
  409e8c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
  409e90:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
    for(i = list->style_cnt; i > first_style; i--) {
  409e94:	3b01      	subs	r3, #1
  409e96:	b2db      	uxtb	r3, r3
  409e98:	4293      	cmp	r3, r2
  409e9a:	d8f4      	bhi.n	409e86 <_lv_style_list_add_style+0x6a>
    new_classes[first_style] = style;
  409e9c:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
    list->style_cnt++;
  409ea0:	7923      	ldrb	r3, [r4, #4]
  409ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  409ea6:	3201      	adds	r2, #1
  409ea8:	f362 0305 	bfi	r3, r2, #0, #6
  409eac:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
  409eae:	6025      	str	r5, [r4, #0]
  409eb0:	bd70      	pop	{r4, r5, r6, pc}
  409eb2:	4770      	bx	lr
  409eb4:	00409d59 	.word	0x00409d59
  409eb8:	004174ed 	.word	0x004174ed
  409ebc:	00416da9 	.word	0x00416da9
  409ec0:	0041781d 	.word	0x0041781d
  409ec4:	0042e54c 	.word	0x0042e54c
  409ec8:	00416db5 	.word	0x00416db5

00409ecc <get_alloc_local_style>:
 * Get he local style from a style list. Allocate it if not exists yet.
 * @param list pointer to a style list
 * @return pointer to the local style
 */
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)
{
  409ecc:	b538      	push	{r3, r4, r5, lr}
    LV_ASSERT_STYLE_LIST(list);

    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
  409ece:	7902      	ldrb	r2, [r0, #4]
  409ed0:	f012 0f40 	tst.w	r2, #64	; 0x40
  409ed4:	d015      	beq.n	409f02 <get_alloc_local_style+0x36>
  409ed6:	09d3      	lsrs	r3, r2, #7
    if(list->has_trans && list->skip_trans) id++;
  409ed8:	8881      	ldrh	r1, [r0, #4]
  409eda:	f401 71c0 	and.w	r1, r1, #384	; 0x180
  409ede:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
  409ee2:	d00c      	beq.n	409efe <get_alloc_local_style+0x32>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  409ee4:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  409ee8:	d027      	beq.n	409f3a <get_alloc_local_style+0x6e>
  409eea:	7902      	ldrb	r2, [r0, #4]
  409eec:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  409ef0:	4293      	cmp	r3, r2
  409ef2:	da24      	bge.n	409f3e <get_alloc_local_style+0x72>
    return list->style_list[id];
  409ef4:	6802      	ldr	r2, [r0, #0]
  409ef6:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    /*Add the local style to the first place*/
    _lv_style_list_add_style(list, local_style);
    list->has_local = 1;

    return local_style;
}
  409efa:	4628      	mov	r0, r5
  409efc:	bd38      	pop	{r3, r4, r5, pc}
    if(list->has_trans && list->skip_trans) id++;
  409efe:	3301      	adds	r3, #1
  409f00:	e7f0      	b.n	409ee4 <get_alloc_local_style+0x18>
  409f02:	4604      	mov	r4, r0
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
  409f04:	2004      	movs	r0, #4
  409f06:	4b0f      	ldr	r3, [pc, #60]	; (409f44 <get_alloc_local_style+0x78>)
  409f08:	4798      	blx	r3
  409f0a:	4605      	mov	r5, r0
    LV_ASSERT_MEM(local_style);
  409f0c:	4b0e      	ldr	r3, [pc, #56]	; (409f48 <get_alloc_local_style+0x7c>)
  409f0e:	4798      	blx	r3
  409f10:	b168      	cbz	r0, 409f2e <get_alloc_local_style+0x62>
    if(local_style == NULL) {
  409f12:	2d00      	cmp	r5, #0
  409f14:	d0f1      	beq.n	409efa <get_alloc_local_style+0x2e>
    lv_style_init(local_style);
  409f16:	4628      	mov	r0, r5
  409f18:	4b0c      	ldr	r3, [pc, #48]	; (409f4c <get_alloc_local_style+0x80>)
  409f1a:	4798      	blx	r3
    _lv_style_list_add_style(list, local_style);
  409f1c:	4629      	mov	r1, r5
  409f1e:	4620      	mov	r0, r4
  409f20:	4b0b      	ldr	r3, [pc, #44]	; (409f50 <get_alloc_local_style+0x84>)
  409f22:	4798      	blx	r3
    list->has_local = 1;
  409f24:	7923      	ldrb	r3, [r4, #4]
  409f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409f2a:	7123      	strb	r3, [r4, #4]
    return local_style;
  409f2c:	e7e5      	b.n	409efa <get_alloc_local_style+0x2e>
    LV_ASSERT_MEM(local_style);
  409f2e:	462a      	mov	r2, r5
  409f30:	2300      	movs	r3, #0
  409f32:	4808      	ldr	r0, [pc, #32]	; (409f54 <get_alloc_local_style+0x88>)
  409f34:	4908      	ldr	r1, [pc, #32]	; (409f58 <get_alloc_local_style+0x8c>)
  409f36:	4788      	blx	r1
  409f38:	e7fe      	b.n	409f38 <get_alloc_local_style+0x6c>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  409f3a:	2500      	movs	r5, #0
  409f3c:	e7dd      	b.n	409efa <get_alloc_local_style+0x2e>
  409f3e:	2500      	movs	r5, #0
  409f40:	e7db      	b.n	409efa <get_alloc_local_style+0x2e>
  409f42:	bf00      	nop
  409f44:	004174ed 	.word	0x004174ed
  409f48:	00416da9 	.word	0x00416da9
  409f4c:	00409d39 	.word	0x00409d39
  409f50:	00409e1d 	.word	0x00409e1d
  409f54:	0042e54c 	.word	0x0042e54c
  409f58:	00416db5 	.word	0x00416db5

00409f5c <lv_style_reset>:
{
  409f5c:	b510      	push	{r4, lr}
  409f5e:	4604      	mov	r4, r0
    lv_mem_free(style->map);
  409f60:	6800      	ldr	r0, [r0, #0]
  409f62:	4b02      	ldr	r3, [pc, #8]	; (409f6c <lv_style_reset+0x10>)
  409f64:	4798      	blx	r3
    style->map = NULL;
  409f66:	2300      	movs	r3, #0
  409f68:	6023      	str	r3, [r4, #0]
  409f6a:	bd10      	pop	{r4, pc}
  409f6c:	004175b1 	.word	0x004175b1

00409f70 <_lv_style_get_mem_size>:
    if(style->map == NULL) return 0;
  409f70:	6803      	ldr	r3, [r0, #0]
  409f72:	b30b      	cbz	r3, 409fb8 <_lv_style_get_mem_size+0x48>
{
  409f74:	b082      	sub	sp, #8
  409f76:	2200      	movs	r2, #0
  409f78:	e001      	b.n	409f7e <_lv_style_get_mem_size+0xe>
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
    prop_id &= 0xF;
    size_t size = sizeof(lv_style_property_t);
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409f7a:	2304      	movs	r3, #4
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
    return idx + get_prop_size(prop_id);
  409f7c:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  409f7e:	6803      	ldr	r3, [r0, #0]
  409f80:	5c99      	ldrb	r1, [r3, r2]
  409f82:	f88d 1006 	strb.w	r1, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409f86:	4413      	add	r3, r2
  409f88:	785b      	ldrb	r3, [r3, #1]
  409f8a:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  409f8e:	b2cb      	uxtb	r3, r1
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409f90:	2bff      	cmp	r3, #255	; 0xff
  409f92:	d00d      	beq.n	409fb0 <_lv_style_get_mem_size+0x40>
    prop_id &= 0xF;
  409f94:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409f98:	2b08      	cmp	r3, #8
  409f9a:	d9ee      	bls.n	409f7a <_lv_style_get_mem_size+0xa>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409f9c:	2b0b      	cmp	r3, #11
  409f9e:	d903      	bls.n	409fa8 <_lv_style_get_mem_size+0x38>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409fa0:	2b0d      	cmp	r3, #13
  409fa2:	d803      	bhi.n	409fac <_lv_style_get_mem_size+0x3c>
  409fa4:	2303      	movs	r3, #3
  409fa6:	e7e9      	b.n	409f7c <_lv_style_get_mem_size+0xc>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409fa8:	2304      	movs	r3, #4
  409faa:	e7e7      	b.n	409f7c <_lv_style_get_mem_size+0xc>
    else size += sizeof(const void *);
  409fac:	2306      	movs	r3, #6
  409fae:	e7e5      	b.n	409f7c <_lv_style_get_mem_size+0xc>
    return i + sizeof(lv_style_property_t);
  409fb0:	1c90      	adds	r0, r2, #2
  409fb2:	b280      	uxth	r0, r0
}
  409fb4:	b002      	add	sp, #8
  409fb6:	4770      	bx	lr
    if(style->map == NULL) return 0;
  409fb8:	2000      	movs	r0, #0
  409fba:	4770      	bx	lr

00409fbc <lv_style_copy>:
    if(style_src == NULL) return;
  409fbc:	b181      	cbz	r1, 409fe0 <lv_style_copy+0x24>
{
  409fbe:	b570      	push	{r4, r5, r6, lr}
  409fc0:	460c      	mov	r4, r1
    if(style_src->map == NULL) return;
  409fc2:	680a      	ldr	r2, [r1, #0]
  409fc4:	b15a      	cbz	r2, 409fde <lv_style_copy+0x22>
  409fc6:	4605      	mov	r5, r0
    uint16_t size = _lv_style_get_mem_size(style_src);
  409fc8:	4608      	mov	r0, r1
  409fca:	4b06      	ldr	r3, [pc, #24]	; (409fe4 <lv_style_copy+0x28>)
  409fcc:	4798      	blx	r3
  409fce:	4606      	mov	r6, r0
    style_dest->map = lv_mem_alloc(size);
  409fd0:	4b05      	ldr	r3, [pc, #20]	; (409fe8 <lv_style_copy+0x2c>)
  409fd2:	4798      	blx	r3
  409fd4:	6028      	str	r0, [r5, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
  409fd6:	4632      	mov	r2, r6
  409fd8:	6821      	ldr	r1, [r4, #0]
  409fda:	4b04      	ldr	r3, [pc, #16]	; (409fec <lv_style_copy+0x30>)
  409fdc:	4798      	blx	r3
  409fde:	bd70      	pop	{r4, r5, r6, pc}
  409fe0:	4770      	bx	lr
  409fe2:	bf00      	nop
  409fe4:	00409f71 	.word	0x00409f71
  409fe8:	004174ed 	.word	0x004174ed
  409fec:	004176fd 	.word	0x004176fd

00409ff0 <lv_style_remove_prop>:
    if(style == NULL) return false;
  409ff0:	2800      	cmp	r0, #0
  409ff2:	f000 808d 	beq.w	40a110 <lv_style_remove_prop+0x120>
{
  409ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409ffa:	b082      	sub	sp, #8
  409ffc:	4604      	mov	r4, r0
    if(style->map == NULL) return -1;
  409ffe:	6803      	ldr	r3, [r0, #0]
  40a000:	2b00      	cmp	r3, #0
  40a002:	d05e      	beq.n	40a0c2 <lv_style_remove_prop+0xd2>
    uint8_t id_to_find = prop & 0xFF;
  40a004:	b2cd      	uxtb	r5, r1
    attr = (prop >> 8) & 0xFF;
  40a006:	0a0e      	lsrs	r6, r1, #8
    size_t i = 0;
  40a008:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  40a00a:	f04f 37ff 	mov.w	r7, #4294967295
    int16_t weight = -1;
  40a00e:	46be      	mov	lr, r7
  40a010:	e03b      	b.n	40a08a <lv_style_remove_prop+0x9a>
    prop_p[0] = style->map[idx];
  40a012:	f8d4 c000 	ldr.w	ip, [r4]
  40a016:	f81c 8002 	ldrb.w	r8, [ip, r2]
  40a01a:	f88d 8006 	strb.w	r8, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a01e:	f81c 0000 	ldrb.w	r0, [ip, r0]
  40a022:	f88d 0007 	strb.w	r0, [sp, #7]
    return prop;
  40a026:	f8bd c006 	ldrh.w	ip, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a02a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
  40a02e:	fa5f f08c 	uxtb.w	r0, ip
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a032:	ea86 0800 	eor.w	r8, r6, r0
  40a036:	f018 0f7f 	tst.w	r8, #127	; 0x7f
  40a03a:	d00c      	beq.n	40a056 <lv_style_remove_prop+0x66>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a03c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40a040:	f006 087f 	and.w	r8, r6, #127	; 0x7f
  40a044:	ea30 0808 	bics.w	r8, r0, r8
  40a048:	d12d      	bne.n	40a0a6 <lv_style_remove_prop+0xb6>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a04a:	4570      	cmp	r0, lr
  40a04c:	dd2b      	ble.n	40a0a6 <lv_style_remove_prop+0xb6>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a04e:	f00c 0e7f 	and.w	lr, ip, #127	; 0x7f
                    id_guess = i;
  40a052:	b217      	sxth	r7, r2
  40a054:	e027      	b.n	40a0a6 <lv_style_remove_prop+0xb6>
                return i;
  40a056:	4617      	mov	r7, r2
    if(id >= 0) {
  40a058:	2f00      	cmp	r7, #0
  40a05a:	db5b      	blt.n	40a114 <lv_style_remove_prop+0x124>
        attr_found = get_style_prop_attr(style, id);
  40a05c:	463d      	mov	r5, r7
    prop_p[0] = style->map[idx];
  40a05e:	6823      	ldr	r3, [r4, #0]
  40a060:	5dda      	ldrb	r2, [r3, r7]
  40a062:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a066:	441f      	add	r7, r3
  40a068:	787b      	ldrb	r3, [r7, #1]
  40a06a:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a06e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        attr_goal = (prop >> 8) & 0xFFU;
  40a072:	0a0b      	lsrs	r3, r1, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a074:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
  40a078:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a07c:	d024      	beq.n	40a0c8 <lv_style_remove_prop+0xd8>
    return false;
  40a07e:	2000      	movs	r0, #0
}
  40a080:	b002      	add	sp, #8
  40a082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a086:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a088:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a08a:	6823      	ldr	r3, [r4, #0]
  40a08c:	5c98      	ldrb	r0, [r3, r2]
  40a08e:	f88d 0006 	strb.w	r0, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a092:	1c50      	adds	r0, r2, #1
  40a094:	5c1b      	ldrb	r3, [r3, r0]
  40a096:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a09a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a09e:	2bff      	cmp	r3, #255	; 0xff
  40a0a0:	d0da      	beq.n	40a058 <lv_style_remove_prop+0x68>
        if(prop_id == id_to_find) {
  40a0a2:	429d      	cmp	r5, r3
  40a0a4:	d0b5      	beq.n	40a012 <lv_style_remove_prop+0x22>
    prop_id &= 0xF;
  40a0a6:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a0aa:	2b08      	cmp	r3, #8
  40a0ac:	d9eb      	bls.n	40a086 <lv_style_remove_prop+0x96>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a0ae:	2b0b      	cmp	r3, #11
  40a0b0:	d903      	bls.n	40a0ba <lv_style_remove_prop+0xca>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a0b2:	2b0d      	cmp	r3, #13
  40a0b4:	d803      	bhi.n	40a0be <lv_style_remove_prop+0xce>
  40a0b6:	2303      	movs	r3, #3
  40a0b8:	e7e6      	b.n	40a088 <lv_style_remove_prop+0x98>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a0ba:	2304      	movs	r3, #4
  40a0bc:	e7e4      	b.n	40a088 <lv_style_remove_prop+0x98>
    else size += sizeof(const void *);
  40a0be:	2306      	movs	r3, #6
  40a0c0:	e7e2      	b.n	40a088 <lv_style_remove_prop+0x98>
    if(style->map == NULL) return -1;
  40a0c2:	f04f 37ff 	mov.w	r7, #4294967295
  40a0c6:	e7c7      	b.n	40a058 <lv_style_remove_prop+0x68>
  40a0c8:	460e      	mov	r6, r1
            uint32_t map_size = _lv_style_get_mem_size(style);
  40a0ca:	4620      	mov	r0, r4
  40a0cc:	4b12      	ldr	r3, [pc, #72]	; (40a118 <lv_style_remove_prop+0x128>)
  40a0ce:	4798      	blx	r3
    prop_id &= 0xF;
  40a0d0:	f006 010f 	and.w	r1, r6, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a0d4:	2908      	cmp	r1, #8
  40a0d6:	d905      	bls.n	40a0e4 <lv_style_remove_prop+0xf4>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a0d8:	290b      	cmp	r1, #11
  40a0da:	d90f      	bls.n	40a0fc <lv_style_remove_prop+0x10c>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a0dc:	290d      	cmp	r1, #13
  40a0de:	d80f      	bhi.n	40a100 <lv_style_remove_prop+0x110>
  40a0e0:	2603      	movs	r6, #3
  40a0e2:	e000      	b.n	40a0e6 <lv_style_remove_prop+0xf6>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a0e4:	2604      	movs	r6, #4
            for(i = id; i < map_size - prop_size; i++) {
  40a0e6:	462b      	mov	r3, r5
  40a0e8:	b2f2      	uxtb	r2, r6
  40a0ea:	1a81      	subs	r1, r0, r2
  40a0ec:	428b      	cmp	r3, r1
  40a0ee:	d209      	bcs.n	40a104 <lv_style_remove_prop+0x114>
                style->map[i] = style->map[i + prop_size];
  40a0f0:	6821      	ldr	r1, [r4, #0]
  40a0f2:	441a      	add	r2, r3
  40a0f4:	5c8a      	ldrb	r2, [r1, r2]
  40a0f6:	54ca      	strb	r2, [r1, r3]
            for(i = id; i < map_size - prop_size; i++) {
  40a0f8:	3301      	adds	r3, #1
  40a0fa:	e7f5      	b.n	40a0e8 <lv_style_remove_prop+0xf8>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a0fc:	2604      	movs	r6, #4
  40a0fe:	e7f2      	b.n	40a0e6 <lv_style_remove_prop+0xf6>
    else size += sizeof(const void *);
  40a100:	2606      	movs	r6, #6
  40a102:	e7f0      	b.n	40a0e6 <lv_style_remove_prop+0xf6>
    style->map = lv_mem_realloc(style->map, sz);
  40a104:	6820      	ldr	r0, [r4, #0]
  40a106:	4b05      	ldr	r3, [pc, #20]	; (40a11c <lv_style_remove_prop+0x12c>)
  40a108:	4798      	blx	r3
  40a10a:	6020      	str	r0, [r4, #0]
            return true;
  40a10c:	2001      	movs	r0, #1
  40a10e:	e7b7      	b.n	40a080 <lv_style_remove_prop+0x90>
    if(style == NULL) return false;
  40a110:	2000      	movs	r0, #0
  40a112:	4770      	bx	lr
    return false;
  40a114:	2000      	movs	r0, #0
  40a116:	e7b3      	b.n	40a080 <lv_style_remove_prop+0x90>
  40a118:	00409f71 	.word	0x00409f71
  40a11c:	0041781d 	.word	0x0041781d

0040a120 <_lv_style_set_int>:
{
  40a120:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a122:	b085      	sub	sp, #20
  40a124:	f8ad 1006 	strh.w	r1, [sp, #6]
  40a128:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(style->map == NULL) return -1;
  40a12c:	6803      	ldr	r3, [r0, #0]
  40a12e:	2b00      	cmp	r3, #0
  40a130:	d061      	beq.n	40a1f6 <_lv_style_set_int+0xd6>
    uint8_t id_to_find = prop & 0xFF;
  40a132:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a134:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  40a136:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  40a138:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  40a13c:	4627      	mov	r7, r4
  40a13e:	e023      	b.n	40a188 <_lv_style_set_int+0x68>
    prop_p[0] = style->map[idx];
  40a140:	f8d0 e000 	ldr.w	lr, [r0]
  40a144:	f81e c002 	ldrb.w	ip, [lr, r2]
  40a148:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a14c:	f81e 1001 	ldrb.w	r1, [lr, r1]
  40a150:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  40a154:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a158:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  40a15c:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a160:	ea85 0c01 	eor.w	ip, r5, r1
  40a164:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  40a168:	d02b      	beq.n	40a1c2 <_lv_style_set_int+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a16a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  40a16e:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  40a172:	ea31 0c0c 	bics.w	ip, r1, ip
  40a176:	d115      	bne.n	40a1a4 <_lv_style_set_int+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a178:	42b9      	cmp	r1, r7
  40a17a:	dd13      	ble.n	40a1a4 <_lv_style_set_int+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a17c:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  40a180:	b214      	sxth	r4, r2
  40a182:	e00f      	b.n	40a1a4 <_lv_style_set_int+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a184:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a186:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a188:	6803      	ldr	r3, [r0, #0]
  40a18a:	5c99      	ldrb	r1, [r3, r2]
  40a18c:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a190:	1c51      	adds	r1, r2, #1
  40a192:	5c5b      	ldrb	r3, [r3, r1]
  40a194:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  40a198:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a19c:	2bff      	cmp	r3, #255	; 0xff
  40a19e:	d00f      	beq.n	40a1c0 <_lv_style_set_int+0xa0>
        if(prop_id == id_to_find) {
  40a1a0:	429e      	cmp	r6, r3
  40a1a2:	d0cd      	beq.n	40a140 <_lv_style_set_int+0x20>
    prop_id &= 0xF;
  40a1a4:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a1a8:	2b08      	cmp	r3, #8
  40a1aa:	d9eb      	bls.n	40a184 <_lv_style_set_int+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a1ac:	2b0b      	cmp	r3, #11
  40a1ae:	d903      	bls.n	40a1b8 <_lv_style_set_int+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a1b0:	2b0d      	cmp	r3, #13
  40a1b2:	d803      	bhi.n	40a1bc <_lv_style_set_int+0x9c>
  40a1b4:	2303      	movs	r3, #3
  40a1b6:	e7e6      	b.n	40a186 <_lv_style_set_int+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a1b8:	2304      	movs	r3, #4
  40a1ba:	e7e4      	b.n	40a186 <_lv_style_set_int+0x66>
    else size += sizeof(const void *);
  40a1bc:	2306      	movs	r3, #6
  40a1be:	e7e2      	b.n	40a186 <_lv_style_set_int+0x66>
    return id_guess;
  40a1c0:	4622      	mov	r2, r4
    if(id >= 0) {
  40a1c2:	2a00      	cmp	r2, #0
  40a1c4:	db23      	blt.n	40a20e <_lv_style_set_int+0xee>
    prop_p[0] = style->map[idx];
  40a1c6:	6803      	ldr	r3, [r0, #0]
  40a1c8:	5c99      	ldrb	r1, [r3, r2]
  40a1ca:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a1ce:	4413      	add	r3, r2
  40a1d0:	785b      	ldrb	r3, [r3, #1]
  40a1d2:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  40a1d6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40a1da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a1de:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a1e0:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  40a1e4:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a1e8:	d111      	bne.n	40a20e <_lv_style_set_int+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
  40a1ea:	6803      	ldr	r3, [r0, #0]
  40a1ec:	3202      	adds	r2, #2
  40a1ee:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a1f0:	a901      	add	r1, sp, #4
  40a1f2:	2302      	movs	r3, #2
  40a1f4:	e007      	b.n	40a206 <_lv_style_set_int+0xe6>
    if(style->map == NULL) return -1;
  40a1f6:	f04f 32ff 	mov.w	r2, #4294967295
  40a1fa:	e7e2      	b.n	40a1c2 <_lv_style_set_int+0xa2>
        *d8 = *s8;
  40a1fc:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a200:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a204:	3b01      	subs	r3, #1
    while(len) {
  40a206:	2b00      	cmp	r3, #0
  40a208:	d1f8      	bne.n	40a1fc <_lv_style_set_int+0xdc>
}
  40a20a:	b005      	add	sp, #20
  40a20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a20e:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  40a210:	23ff      	movs	r3, #255	; 0xff
  40a212:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  40a216:	4b21      	ldr	r3, [pc, #132]	; (40a29c <_lv_style_set_int+0x17c>)
  40a218:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40a21a:	4603      	mov	r3, r0
  40a21c:	b908      	cbnz	r0, 40a222 <_lv_style_set_int+0x102>
  40a21e:	3302      	adds	r3, #2
  40a220:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
  40a222:	3304      	adds	r3, #4
  40a224:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  40a226:	4621      	mov	r1, r4
  40a228:	6828      	ldr	r0, [r5, #0]
  40a22a:	4b1d      	ldr	r3, [pc, #116]	; (40a2a0 <_lv_style_set_int+0x180>)
  40a22c:	4798      	blx	r3
  40a22e:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  40a230:	4b1c      	ldr	r3, [pc, #112]	; (40a2a4 <_lv_style_set_int+0x184>)
  40a232:	4798      	blx	r3
  40a234:	b148      	cbz	r0, 40a24a <_lv_style_set_int+0x12a>
    if(style == NULL) return;
  40a236:	2d00      	cmp	r5, #0
  40a238:	d0e7      	beq.n	40a20a <_lv_style_set_int+0xea>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40a23a:	682b      	ldr	r3, [r5, #0]
  40a23c:	1f20      	subs	r0, r4, #4
  40a23e:	1fa2      	subs	r2, r4, #6
  40a240:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  40a242:	f10d 0106 	add.w	r1, sp, #6
  40a246:	2202      	movs	r2, #2
  40a248:	e00a      	b.n	40a260 <_lv_style_set_int+0x140>
    LV_ASSERT_MEM(style->map);
  40a24a:	682a      	ldr	r2, [r5, #0]
  40a24c:	2300      	movs	r3, #0
  40a24e:	4816      	ldr	r0, [pc, #88]	; (40a2a8 <_lv_style_set_int+0x188>)
  40a250:	4916      	ldr	r1, [pc, #88]	; (40a2ac <_lv_style_set_int+0x18c>)
  40a252:	4788      	blx	r1
  40a254:	e7fe      	b.n	40a254 <_lv_style_set_int+0x134>
        *d8 = *s8;
  40a256:	f811 6b01 	ldrb.w	r6, [r1], #1
  40a25a:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40a25e:	3a01      	subs	r2, #1
    while(len) {
  40a260:	2a00      	cmp	r2, #0
  40a262:	d1f8      	bne.n	40a256 <_lv_style_set_int+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
  40a264:	682b      	ldr	r3, [r5, #0]
  40a266:	3c02      	subs	r4, #2
  40a268:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40a26a:	a901      	add	r1, sp, #4
  40a26c:	2202      	movs	r2, #2
  40a26e:	e004      	b.n	40a27a <_lv_style_set_int+0x15a>
        *d8 = *s8;
  40a270:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a274:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40a278:	3a01      	subs	r2, #1
    while(len) {
  40a27a:	2a00      	cmp	r2, #0
  40a27c:	d1f8      	bne.n	40a270 <_lv_style_set_int+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40a27e:	682b      	ldr	r3, [r5, #0]
  40a280:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a282:	f10d 020e 	add.w	r2, sp, #14
  40a286:	2302      	movs	r3, #2
  40a288:	e004      	b.n	40a294 <_lv_style_set_int+0x174>
        *d8 = *s8;
  40a28a:	f812 1b01 	ldrb.w	r1, [r2], #1
  40a28e:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  40a292:	3b01      	subs	r3, #1
    while(len) {
  40a294:	2b00      	cmp	r3, #0
  40a296:	d1f8      	bne.n	40a28a <_lv_style_set_int+0x16a>
  40a298:	e7b7      	b.n	40a20a <_lv_style_set_int+0xea>
  40a29a:	bf00      	nop
  40a29c:	00409f71 	.word	0x00409f71
  40a2a0:	0041781d 	.word	0x0041781d
  40a2a4:	00416da9 	.word	0x00416da9
  40a2a8:	0042e54c 	.word	0x0042e54c
  40a2ac:	00416db5 	.word	0x00416db5

0040a2b0 <_lv_style_set_color>:
{
  40a2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a2b2:	b085      	sub	sp, #20
  40a2b4:	f8ad 2004 	strh.w	r2, [sp, #4]
  40a2b8:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
  40a2bc:	6803      	ldr	r3, [r0, #0]
  40a2be:	2b00      	cmp	r3, #0
  40a2c0:	d061      	beq.n	40a386 <_lv_style_set_color+0xd6>
    uint8_t id_to_find = prop & 0xFF;
  40a2c2:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a2c4:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  40a2c6:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  40a2c8:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  40a2cc:	4627      	mov	r7, r4
  40a2ce:	e023      	b.n	40a318 <_lv_style_set_color+0x68>
    prop_p[0] = style->map[idx];
  40a2d0:	f8d0 e000 	ldr.w	lr, [r0]
  40a2d4:	f81e c002 	ldrb.w	ip, [lr, r2]
  40a2d8:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a2dc:	f81e 1001 	ldrb.w	r1, [lr, r1]
  40a2e0:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  40a2e4:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a2e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  40a2ec:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a2f0:	ea85 0c01 	eor.w	ip, r5, r1
  40a2f4:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  40a2f8:	d02b      	beq.n	40a352 <_lv_style_set_color+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a2fa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  40a2fe:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  40a302:	ea31 0c0c 	bics.w	ip, r1, ip
  40a306:	d115      	bne.n	40a334 <_lv_style_set_color+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a308:	42b9      	cmp	r1, r7
  40a30a:	dd13      	ble.n	40a334 <_lv_style_set_color+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a30c:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  40a310:	b214      	sxth	r4, r2
  40a312:	e00f      	b.n	40a334 <_lv_style_set_color+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a314:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a316:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a318:	6803      	ldr	r3, [r0, #0]
  40a31a:	5c99      	ldrb	r1, [r3, r2]
  40a31c:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a320:	1c51      	adds	r1, r2, #1
  40a322:	5c5b      	ldrb	r3, [r3, r1]
  40a324:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  40a328:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a32c:	2bff      	cmp	r3, #255	; 0xff
  40a32e:	d00f      	beq.n	40a350 <_lv_style_set_color+0xa0>
        if(prop_id == id_to_find) {
  40a330:	429e      	cmp	r6, r3
  40a332:	d0cd      	beq.n	40a2d0 <_lv_style_set_color+0x20>
    prop_id &= 0xF;
  40a334:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a338:	2b08      	cmp	r3, #8
  40a33a:	d9eb      	bls.n	40a314 <_lv_style_set_color+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a33c:	2b0b      	cmp	r3, #11
  40a33e:	d903      	bls.n	40a348 <_lv_style_set_color+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a340:	2b0d      	cmp	r3, #13
  40a342:	d803      	bhi.n	40a34c <_lv_style_set_color+0x9c>
  40a344:	2303      	movs	r3, #3
  40a346:	e7e6      	b.n	40a316 <_lv_style_set_color+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a348:	2304      	movs	r3, #4
  40a34a:	e7e4      	b.n	40a316 <_lv_style_set_color+0x66>
    else size += sizeof(const void *);
  40a34c:	2306      	movs	r3, #6
  40a34e:	e7e2      	b.n	40a316 <_lv_style_set_color+0x66>
    return id_guess;
  40a350:	4622      	mov	r2, r4
    if(id >= 0) {
  40a352:	2a00      	cmp	r2, #0
  40a354:	db23      	blt.n	40a39e <_lv_style_set_color+0xee>
    prop_p[0] = style->map[idx];
  40a356:	6803      	ldr	r3, [r0, #0]
  40a358:	5c99      	ldrb	r1, [r3, r2]
  40a35a:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a35e:	4413      	add	r3, r2
  40a360:	785b      	ldrb	r3, [r3, #1]
  40a362:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  40a366:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40a36a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a36e:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a370:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  40a374:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a378:	d111      	bne.n	40a39e <_lv_style_set_color+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
  40a37a:	6803      	ldr	r3, [r0, #0]
  40a37c:	3202      	adds	r2, #2
  40a37e:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a380:	a901      	add	r1, sp, #4
  40a382:	2302      	movs	r3, #2
  40a384:	e007      	b.n	40a396 <_lv_style_set_color+0xe6>
    if(style->map == NULL) return -1;
  40a386:	f04f 32ff 	mov.w	r2, #4294967295
  40a38a:	e7e2      	b.n	40a352 <_lv_style_set_color+0xa2>
        *d8 = *s8;
  40a38c:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a390:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a394:	3b01      	subs	r3, #1
    while(len) {
  40a396:	2b00      	cmp	r3, #0
  40a398:	d1f8      	bne.n	40a38c <_lv_style_set_color+0xdc>
}
  40a39a:	b005      	add	sp, #20
  40a39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a39e:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  40a3a0:	23ff      	movs	r3, #255	; 0xff
  40a3a2:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  40a3a6:	4b21      	ldr	r3, [pc, #132]	; (40a42c <_lv_style_set_color+0x17c>)
  40a3a8:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40a3aa:	4603      	mov	r3, r0
  40a3ac:	b908      	cbnz	r0, 40a3b2 <_lv_style_set_color+0x102>
  40a3ae:	3302      	adds	r3, #2
  40a3b0:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
  40a3b2:	3304      	adds	r3, #4
  40a3b4:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  40a3b6:	4621      	mov	r1, r4
  40a3b8:	6828      	ldr	r0, [r5, #0]
  40a3ba:	4b1d      	ldr	r3, [pc, #116]	; (40a430 <_lv_style_set_color+0x180>)
  40a3bc:	4798      	blx	r3
  40a3be:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  40a3c0:	4b1c      	ldr	r3, [pc, #112]	; (40a434 <_lv_style_set_color+0x184>)
  40a3c2:	4798      	blx	r3
  40a3c4:	b148      	cbz	r0, 40a3da <_lv_style_set_color+0x12a>
    if(style == NULL) return;
  40a3c6:	2d00      	cmp	r5, #0
  40a3c8:	d0e7      	beq.n	40a39a <_lv_style_set_color+0xea>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40a3ca:	682b      	ldr	r3, [r5, #0]
  40a3cc:	1f20      	subs	r0, r4, #4
  40a3ce:	1fa2      	subs	r2, r4, #6
  40a3d0:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  40a3d2:	f10d 0106 	add.w	r1, sp, #6
  40a3d6:	2202      	movs	r2, #2
  40a3d8:	e00a      	b.n	40a3f0 <_lv_style_set_color+0x140>
    LV_ASSERT_MEM(style->map);
  40a3da:	682a      	ldr	r2, [r5, #0]
  40a3dc:	2300      	movs	r3, #0
  40a3de:	4816      	ldr	r0, [pc, #88]	; (40a438 <_lv_style_set_color+0x188>)
  40a3e0:	4916      	ldr	r1, [pc, #88]	; (40a43c <_lv_style_set_color+0x18c>)
  40a3e2:	4788      	blx	r1
  40a3e4:	e7fe      	b.n	40a3e4 <_lv_style_set_color+0x134>
        *d8 = *s8;
  40a3e6:	f811 6b01 	ldrb.w	r6, [r1], #1
  40a3ea:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40a3ee:	3a01      	subs	r2, #1
    while(len) {
  40a3f0:	2a00      	cmp	r2, #0
  40a3f2:	d1f8      	bne.n	40a3e6 <_lv_style_set_color+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
  40a3f4:	682b      	ldr	r3, [r5, #0]
  40a3f6:	3c02      	subs	r4, #2
  40a3f8:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40a3fa:	a901      	add	r1, sp, #4
  40a3fc:	2202      	movs	r2, #2
  40a3fe:	e004      	b.n	40a40a <_lv_style_set_color+0x15a>
        *d8 = *s8;
  40a400:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a404:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40a408:	3a01      	subs	r2, #1
    while(len) {
  40a40a:	2a00      	cmp	r2, #0
  40a40c:	d1f8      	bne.n	40a400 <_lv_style_set_color+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40a40e:	682b      	ldr	r3, [r5, #0]
  40a410:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a412:	f10d 020e 	add.w	r2, sp, #14
  40a416:	2302      	movs	r3, #2
  40a418:	e004      	b.n	40a424 <_lv_style_set_color+0x174>
        *d8 = *s8;
  40a41a:	f812 1b01 	ldrb.w	r1, [r2], #1
  40a41e:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  40a422:	3b01      	subs	r3, #1
    while(len) {
  40a424:	2b00      	cmp	r3, #0
  40a426:	d1f8      	bne.n	40a41a <_lv_style_set_color+0x16a>
  40a428:	e7b7      	b.n	40a39a <_lv_style_set_color+0xea>
  40a42a:	bf00      	nop
  40a42c:	00409f71 	.word	0x00409f71
  40a430:	0041781d 	.word	0x0041781d
  40a434:	00416da9 	.word	0x00416da9
  40a438:	0042e54c 	.word	0x0042e54c
  40a43c:	00416db5 	.word	0x00416db5

0040a440 <_lv_style_set_opa>:
{
  40a440:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a442:	b085      	sub	sp, #20
  40a444:	f8ad 1006 	strh.w	r1, [sp, #6]
  40a448:	f88d 2005 	strb.w	r2, [sp, #5]
    if(style->map == NULL) return -1;
  40a44c:	6803      	ldr	r3, [r0, #0]
  40a44e:	2b00      	cmp	r3, #0
  40a450:	d064      	beq.n	40a51c <_lv_style_set_opa+0xdc>
    uint8_t id_to_find = prop & 0xFF;
  40a452:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a454:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  40a456:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  40a458:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  40a45c:	4627      	mov	r7, r4
  40a45e:	e023      	b.n	40a4a8 <_lv_style_set_opa+0x68>
    prop_p[0] = style->map[idx];
  40a460:	f8d0 e000 	ldr.w	lr, [r0]
  40a464:	f81e c002 	ldrb.w	ip, [lr, r2]
  40a468:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a46c:	f81e 1001 	ldrb.w	r1, [lr, r1]
  40a470:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  40a474:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a478:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  40a47c:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a480:	ea85 0c01 	eor.w	ip, r5, r1
  40a484:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  40a488:	d02b      	beq.n	40a4e2 <_lv_style_set_opa+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a48a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  40a48e:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  40a492:	ea31 0c0c 	bics.w	ip, r1, ip
  40a496:	d115      	bne.n	40a4c4 <_lv_style_set_opa+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a498:	42b9      	cmp	r1, r7
  40a49a:	dd13      	ble.n	40a4c4 <_lv_style_set_opa+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a49c:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  40a4a0:	b214      	sxth	r4, r2
  40a4a2:	e00f      	b.n	40a4c4 <_lv_style_set_opa+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a4a4:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a4a6:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a4a8:	6803      	ldr	r3, [r0, #0]
  40a4aa:	5c99      	ldrb	r1, [r3, r2]
  40a4ac:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a4b0:	1c51      	adds	r1, r2, #1
  40a4b2:	5c5b      	ldrb	r3, [r3, r1]
  40a4b4:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  40a4b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a4bc:	2bff      	cmp	r3, #255	; 0xff
  40a4be:	d00f      	beq.n	40a4e0 <_lv_style_set_opa+0xa0>
        if(prop_id == id_to_find) {
  40a4c0:	429e      	cmp	r6, r3
  40a4c2:	d0cd      	beq.n	40a460 <_lv_style_set_opa+0x20>
    prop_id &= 0xF;
  40a4c4:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a4c8:	2b08      	cmp	r3, #8
  40a4ca:	d9eb      	bls.n	40a4a4 <_lv_style_set_opa+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a4cc:	2b0b      	cmp	r3, #11
  40a4ce:	d903      	bls.n	40a4d8 <_lv_style_set_opa+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a4d0:	2b0d      	cmp	r3, #13
  40a4d2:	d803      	bhi.n	40a4dc <_lv_style_set_opa+0x9c>
  40a4d4:	2303      	movs	r3, #3
  40a4d6:	e7e6      	b.n	40a4a6 <_lv_style_set_opa+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a4d8:	2304      	movs	r3, #4
  40a4da:	e7e4      	b.n	40a4a6 <_lv_style_set_opa+0x66>
    else size += sizeof(const void *);
  40a4dc:	2306      	movs	r3, #6
  40a4de:	e7e2      	b.n	40a4a6 <_lv_style_set_opa+0x66>
    return id_guess;
  40a4e0:	4622      	mov	r2, r4
    if(id >= 0) {
  40a4e2:	2a00      	cmp	r2, #0
  40a4e4:	db23      	blt.n	40a52e <_lv_style_set_opa+0xee>
    prop_p[0] = style->map[idx];
  40a4e6:	6803      	ldr	r3, [r0, #0]
  40a4e8:	5c99      	ldrb	r1, [r3, r2]
  40a4ea:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a4ee:	4413      	add	r3, r2
  40a4f0:	785b      	ldrb	r3, [r3, #1]
  40a4f2:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  40a4f6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40a4fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a4fe:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a500:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  40a504:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a508:	d111      	bne.n	40a52e <_lv_style_set_opa+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &opa, sizeof(lv_opa_t));
  40a50a:	6803      	ldr	r3, [r0, #0]
  40a50c:	3202      	adds	r2, #2
  40a50e:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a510:	f10d 0105 	add.w	r1, sp, #5
  40a514:	2301      	movs	r3, #1
    while(len) {
  40a516:	b923      	cbnz	r3, 40a522 <_lv_style_set_opa+0xe2>
}
  40a518:	b005      	add	sp, #20
  40a51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
  40a51c:	f04f 32ff 	mov.w	r2, #4294967295
  40a520:	e7df      	b.n	40a4e2 <_lv_style_set_opa+0xa2>
        *d8 = *s8;
  40a522:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a526:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a52a:	3b01      	subs	r3, #1
  40a52c:	e7f3      	b.n	40a516 <_lv_style_set_opa+0xd6>
  40a52e:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  40a530:	23ff      	movs	r3, #255	; 0xff
  40a532:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  40a536:	4b21      	ldr	r3, [pc, #132]	; (40a5bc <_lv_style_set_opa+0x17c>)
  40a538:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40a53a:	4603      	mov	r3, r0
  40a53c:	b908      	cbnz	r0, 40a542 <_lv_style_set_opa+0x102>
  40a53e:	3302      	adds	r3, #2
  40a540:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
  40a542:	3303      	adds	r3, #3
  40a544:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  40a546:	4621      	mov	r1, r4
  40a548:	6828      	ldr	r0, [r5, #0]
  40a54a:	4b1d      	ldr	r3, [pc, #116]	; (40a5c0 <_lv_style_set_opa+0x180>)
  40a54c:	4798      	blx	r3
  40a54e:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  40a550:	4b1c      	ldr	r3, [pc, #112]	; (40a5c4 <_lv_style_set_opa+0x184>)
  40a552:	4798      	blx	r3
  40a554:	b148      	cbz	r0, 40a56a <_lv_style_set_opa+0x12a>
    if(style == NULL) return;
  40a556:	2d00      	cmp	r5, #0
  40a558:	d0de      	beq.n	40a518 <_lv_style_set_opa+0xd8>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40a55a:	682b      	ldr	r3, [r5, #0]
  40a55c:	1ee0      	subs	r0, r4, #3
  40a55e:	1f62      	subs	r2, r4, #5
  40a560:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  40a562:	f10d 0106 	add.w	r1, sp, #6
  40a566:	2202      	movs	r2, #2
  40a568:	e00a      	b.n	40a580 <_lv_style_set_opa+0x140>
    LV_ASSERT_MEM(style->map);
  40a56a:	682a      	ldr	r2, [r5, #0]
  40a56c:	2300      	movs	r3, #0
  40a56e:	4816      	ldr	r0, [pc, #88]	; (40a5c8 <_lv_style_set_opa+0x188>)
  40a570:	4916      	ldr	r1, [pc, #88]	; (40a5cc <_lv_style_set_opa+0x18c>)
  40a572:	4788      	blx	r1
  40a574:	e7fe      	b.n	40a574 <_lv_style_set_opa+0x134>
        *d8 = *s8;
  40a576:	f811 6b01 	ldrb.w	r6, [r1], #1
  40a57a:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40a57e:	3a01      	subs	r2, #1
    while(len) {
  40a580:	2a00      	cmp	r2, #0
  40a582:	d1f8      	bne.n	40a576 <_lv_style_set_opa+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
  40a584:	682b      	ldr	r3, [r5, #0]
  40a586:	3c02      	subs	r4, #2
  40a588:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40a58a:	f10d 0105 	add.w	r1, sp, #5
  40a58e:	2201      	movs	r2, #1
    while(len) {
  40a590:	b92a      	cbnz	r2, 40a59e <_lv_style_set_opa+0x15e>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40a592:	682b      	ldr	r3, [r5, #0]
  40a594:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a596:	f10d 020e 	add.w	r2, sp, #14
  40a59a:	2302      	movs	r3, #2
  40a59c:	e00a      	b.n	40a5b4 <_lv_style_set_opa+0x174>
        *d8 = *s8;
  40a59e:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a5a2:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40a5a6:	3a01      	subs	r2, #1
  40a5a8:	e7f2      	b.n	40a590 <_lv_style_set_opa+0x150>
        *d8 = *s8;
  40a5aa:	f812 1b01 	ldrb.w	r1, [r2], #1
  40a5ae:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  40a5b2:	3b01      	subs	r3, #1
    while(len) {
  40a5b4:	2b00      	cmp	r3, #0
  40a5b6:	d1f8      	bne.n	40a5aa <_lv_style_set_opa+0x16a>
  40a5b8:	e7ae      	b.n	40a518 <_lv_style_set_opa+0xd8>
  40a5ba:	bf00      	nop
  40a5bc:	00409f71 	.word	0x00409f71
  40a5c0:	0041781d 	.word	0x0041781d
  40a5c4:	00416da9 	.word	0x00416da9
  40a5c8:	0042e54c 	.word	0x0042e54c
  40a5cc:	00416db5 	.word	0x00416db5

0040a5d0 <_lv_style_set_ptr>:
{
  40a5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a5d2:	b085      	sub	sp, #20
  40a5d4:	9200      	str	r2, [sp, #0]
  40a5d6:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
  40a5da:	6803      	ldr	r3, [r0, #0]
  40a5dc:	2b00      	cmp	r3, #0
  40a5de:	d061      	beq.n	40a6a4 <_lv_style_set_ptr+0xd4>
    uint8_t id_to_find = prop & 0xFF;
  40a5e0:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a5e2:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  40a5e4:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  40a5e6:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  40a5ea:	4627      	mov	r7, r4
  40a5ec:	e023      	b.n	40a636 <_lv_style_set_ptr+0x66>
    prop_p[0] = style->map[idx];
  40a5ee:	f8d0 e000 	ldr.w	lr, [r0]
  40a5f2:	f81e c002 	ldrb.w	ip, [lr, r2]
  40a5f6:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a5fa:	f81e 1001 	ldrb.w	r1, [lr, r1]
  40a5fe:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  40a602:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a606:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  40a60a:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a60e:	ea85 0c01 	eor.w	ip, r5, r1
  40a612:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  40a616:	d02b      	beq.n	40a670 <_lv_style_set_ptr+0xa0>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a618:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  40a61c:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  40a620:	ea31 0c0c 	bics.w	ip, r1, ip
  40a624:	d115      	bne.n	40a652 <_lv_style_set_ptr+0x82>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a626:	42b9      	cmp	r1, r7
  40a628:	dd13      	ble.n	40a652 <_lv_style_set_ptr+0x82>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a62a:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  40a62e:	b214      	sxth	r4, r2
  40a630:	e00f      	b.n	40a652 <_lv_style_set_ptr+0x82>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a632:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a634:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a636:	6803      	ldr	r3, [r0, #0]
  40a638:	5c99      	ldrb	r1, [r3, r2]
  40a63a:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a63e:	1c51      	adds	r1, r2, #1
  40a640:	5c5b      	ldrb	r3, [r3, r1]
  40a642:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  40a646:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a64a:	2bff      	cmp	r3, #255	; 0xff
  40a64c:	d00f      	beq.n	40a66e <_lv_style_set_ptr+0x9e>
        if(prop_id == id_to_find) {
  40a64e:	429e      	cmp	r6, r3
  40a650:	d0cd      	beq.n	40a5ee <_lv_style_set_ptr+0x1e>
    prop_id &= 0xF;
  40a652:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a656:	2b08      	cmp	r3, #8
  40a658:	d9eb      	bls.n	40a632 <_lv_style_set_ptr+0x62>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a65a:	2b0b      	cmp	r3, #11
  40a65c:	d903      	bls.n	40a666 <_lv_style_set_ptr+0x96>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a65e:	2b0d      	cmp	r3, #13
  40a660:	d803      	bhi.n	40a66a <_lv_style_set_ptr+0x9a>
  40a662:	2303      	movs	r3, #3
  40a664:	e7e6      	b.n	40a634 <_lv_style_set_ptr+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a666:	2304      	movs	r3, #4
  40a668:	e7e4      	b.n	40a634 <_lv_style_set_ptr+0x64>
    else size += sizeof(const void *);
  40a66a:	2306      	movs	r3, #6
  40a66c:	e7e2      	b.n	40a634 <_lv_style_set_ptr+0x64>
    return id_guess;
  40a66e:	4622      	mov	r2, r4
    if(id >= 0) {
  40a670:	2a00      	cmp	r2, #0
  40a672:	db23      	blt.n	40a6bc <_lv_style_set_ptr+0xec>
    prop_p[0] = style->map[idx];
  40a674:	6803      	ldr	r3, [r0, #0]
  40a676:	5c99      	ldrb	r1, [r3, r2]
  40a678:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a67c:	4413      	add	r3, r2
  40a67e:	785b      	ldrb	r3, [r3, #1]
  40a680:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  40a684:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40a688:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a68c:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a68e:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  40a692:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a696:	d111      	bne.n	40a6bc <_lv_style_set_ptr+0xec>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
  40a698:	6803      	ldr	r3, [r0, #0]
  40a69a:	3202      	adds	r2, #2
  40a69c:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a69e:	4669      	mov	r1, sp
  40a6a0:	2304      	movs	r3, #4
  40a6a2:	e007      	b.n	40a6b4 <_lv_style_set_ptr+0xe4>
    if(style->map == NULL) return -1;
  40a6a4:	f04f 32ff 	mov.w	r2, #4294967295
  40a6a8:	e7e2      	b.n	40a670 <_lv_style_set_ptr+0xa0>
        *d8 = *s8;
  40a6aa:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a6ae:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a6b2:	3b01      	subs	r3, #1
    while(len) {
  40a6b4:	2b00      	cmp	r3, #0
  40a6b6:	d1f8      	bne.n	40a6aa <_lv_style_set_ptr+0xda>
}
  40a6b8:	b005      	add	sp, #20
  40a6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a6bc:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  40a6be:	23ff      	movs	r3, #255	; 0xff
  40a6c0:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  40a6c4:	4b21      	ldr	r3, [pc, #132]	; (40a74c <_lv_style_set_ptr+0x17c>)
  40a6c6:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40a6c8:	4603      	mov	r3, r0
  40a6ca:	b908      	cbnz	r0, 40a6d0 <_lv_style_set_ptr+0x100>
  40a6cc:	3302      	adds	r3, #2
  40a6ce:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(const void *);
  40a6d0:	3306      	adds	r3, #6
  40a6d2:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  40a6d4:	4621      	mov	r1, r4
  40a6d6:	6828      	ldr	r0, [r5, #0]
  40a6d8:	4b1d      	ldr	r3, [pc, #116]	; (40a750 <_lv_style_set_ptr+0x180>)
  40a6da:	4798      	blx	r3
  40a6dc:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  40a6de:	4b1d      	ldr	r3, [pc, #116]	; (40a754 <_lv_style_set_ptr+0x184>)
  40a6e0:	4798      	blx	r3
  40a6e2:	b150      	cbz	r0, 40a6fa <_lv_style_set_ptr+0x12a>
    if(style == NULL) return;
  40a6e4:	2d00      	cmp	r5, #0
  40a6e6:	d0e7      	beq.n	40a6b8 <_lv_style_set_ptr+0xe8>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40a6e8:	682b      	ldr	r3, [r5, #0]
  40a6ea:	1fa0      	subs	r0, r4, #6
  40a6ec:	f1a4 0208 	sub.w	r2, r4, #8
  40a6f0:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  40a6f2:	f10d 0106 	add.w	r1, sp, #6
  40a6f6:	2202      	movs	r2, #2
  40a6f8:	e00a      	b.n	40a710 <_lv_style_set_ptr+0x140>
    LV_ASSERT_MEM(style->map);
  40a6fa:	682a      	ldr	r2, [r5, #0]
  40a6fc:	2300      	movs	r3, #0
  40a6fe:	4816      	ldr	r0, [pc, #88]	; (40a758 <_lv_style_set_ptr+0x188>)
  40a700:	4916      	ldr	r1, [pc, #88]	; (40a75c <_lv_style_set_ptr+0x18c>)
  40a702:	4788      	blx	r1
  40a704:	e7fe      	b.n	40a704 <_lv_style_set_ptr+0x134>
        *d8 = *s8;
  40a706:	f811 6b01 	ldrb.w	r6, [r1], #1
  40a70a:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40a70e:	3a01      	subs	r2, #1
    while(len) {
  40a710:	2a00      	cmp	r2, #0
  40a712:	d1f8      	bne.n	40a706 <_lv_style_set_ptr+0x136>
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
  40a714:	682b      	ldr	r3, [r5, #0]
  40a716:	3c02      	subs	r4, #2
  40a718:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40a71a:	4669      	mov	r1, sp
  40a71c:	2204      	movs	r2, #4
  40a71e:	e004      	b.n	40a72a <_lv_style_set_ptr+0x15a>
        *d8 = *s8;
  40a720:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a724:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40a728:	3a01      	subs	r2, #1
    while(len) {
  40a72a:	2a00      	cmp	r2, #0
  40a72c:	d1f8      	bne.n	40a720 <_lv_style_set_ptr+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40a72e:	682b      	ldr	r3, [r5, #0]
  40a730:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a732:	f10d 020e 	add.w	r2, sp, #14
  40a736:	2302      	movs	r3, #2
  40a738:	e004      	b.n	40a744 <_lv_style_set_ptr+0x174>
        *d8 = *s8;
  40a73a:	f812 1b01 	ldrb.w	r1, [r2], #1
  40a73e:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  40a742:	3b01      	subs	r3, #1
    while(len) {
  40a744:	2b00      	cmp	r3, #0
  40a746:	d1f8      	bne.n	40a73a <_lv_style_set_ptr+0x16a>
  40a748:	e7b6      	b.n	40a6b8 <_lv_style_set_ptr+0xe8>
  40a74a:	bf00      	nop
  40a74c:	00409f71 	.word	0x00409f71
  40a750:	0041781d 	.word	0x0041781d
  40a754:	00416da9 	.word	0x00416da9
  40a758:	0042e54c 	.word	0x0042e54c
  40a75c:	00416db5 	.word	0x00416db5

0040a760 <_lv_style_get_int>:
    if(style == NULL) return -1;
  40a760:	2800      	cmp	r0, #0
  40a762:	d077      	beq.n	40a854 <_lv_style_get_int+0xf4>
{
  40a764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a768:	b082      	sub	sp, #8
  40a76a:	4692      	mov	sl, r2
  40a76c:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40a76e:	6803      	ldr	r3, [r0, #0]
  40a770:	2b00      	cmp	r3, #0
  40a772:	d072      	beq.n	40a85a <_lv_style_get_int+0xfa>
    if(style->map == NULL) return -1;
  40a774:	2b00      	cmp	r3, #0
  40a776:	d051      	beq.n	40a81c <_lv_style_get_int+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  40a778:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a77a:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40a77c:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40a77e:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40a782:	46f4      	mov	ip, lr
  40a784:	e02e      	b.n	40a7e4 <_lv_style_get_int+0x84>
    prop_p[0] = style->map[idx];
  40a786:	682a      	ldr	r2, [r5, #0]
  40a788:	f812 9000 	ldrb.w	r9, [r2, r0]
  40a78c:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a790:	5d14      	ldrb	r4, [r2, r4]
  40a792:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40a796:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a79a:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40a79e:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a7a2:	ea87 0904 	eor.w	r9, r7, r4
  40a7a6:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40a7aa:	d00d      	beq.n	40a7c8 <_lv_style_get_int+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a7ac:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40a7b0:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40a7b4:	ea34 0209 	bics.w	r2, r4, r9
  40a7b8:	d122      	bne.n	40a800 <_lv_style_get_int+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a7ba:	4564      	cmp	r4, ip
  40a7bc:	dd20      	ble.n	40a800 <_lv_style_get_int+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a7be:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40a7c2:	fa0f fe80 	sxth.w	lr, r0
  40a7c6:	e01b      	b.n	40a800 <_lv_style_get_int+0xa0>
                return i;
  40a7c8:	4686      	mov	lr, r0
    if(id < 0) {
  40a7ca:	f1be 0f00 	cmp.w	lr, #0
  40a7ce:	db47      	blt.n	40a860 <_lv_style_get_int+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
  40a7d0:	682b      	ldr	r3, [r5, #0]
  40a7d2:	4674      	mov	r4, lr
  40a7d4:	f10e 0e02 	add.w	lr, lr, #2
  40a7d8:	449e      	add	lr, r3
    uint8_t * d8 = (uint8_t *)dst;
  40a7da:	4652      	mov	r2, sl
  40a7dc:	2302      	movs	r3, #2
  40a7de:	e025      	b.n	40a82c <_lv_style_get_int+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a7e0:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a7e2:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a7e4:	682b      	ldr	r3, [r5, #0]
  40a7e6:	5c1c      	ldrb	r4, [r3, r0]
  40a7e8:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a7ec:	1c44      	adds	r4, r0, #1
  40a7ee:	5d1b      	ldrb	r3, [r3, r4]
  40a7f0:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a7f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a7f8:	2bff      	cmp	r3, #255	; 0xff
  40a7fa:	d0e6      	beq.n	40a7ca <_lv_style_get_int+0x6a>
        if(prop_id == id_to_find) {
  40a7fc:	429e      	cmp	r6, r3
  40a7fe:	d0c2      	beq.n	40a786 <_lv_style_get_int+0x26>
    prop_id &= 0xF;
  40a800:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a804:	2b08      	cmp	r3, #8
  40a806:	d9eb      	bls.n	40a7e0 <_lv_style_get_int+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a808:	2b0b      	cmp	r3, #11
  40a80a:	d903      	bls.n	40a814 <_lv_style_get_int+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a80c:	2b0d      	cmp	r3, #13
  40a80e:	d803      	bhi.n	40a818 <_lv_style_get_int+0xb8>
  40a810:	2303      	movs	r3, #3
  40a812:	e7e6      	b.n	40a7e2 <_lv_style_get_int+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a814:	2304      	movs	r3, #4
  40a816:	e7e4      	b.n	40a7e2 <_lv_style_get_int+0x82>
    else size += sizeof(const void *);
  40a818:	2306      	movs	r3, #6
  40a81a:	e7e2      	b.n	40a7e2 <_lv_style_get_int+0x82>
    if(style->map == NULL) return -1;
  40a81c:	f04f 3eff 	mov.w	lr, #4294967295
  40a820:	e7d3      	b.n	40a7ca <_lv_style_get_int+0x6a>
        *d8 = *s8;
  40a822:	f81e 0b01 	ldrb.w	r0, [lr], #1
  40a826:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a82a:	3b01      	subs	r3, #1
    while(len) {
  40a82c:	2b00      	cmp	r3, #0
  40a82e:	d1f8      	bne.n	40a822 <_lv_style_get_int+0xc2>
    prop_p[0] = style->map[idx];
  40a830:	682b      	ldr	r3, [r5, #0]
  40a832:	5d1a      	ldrb	r2, [r3, r4]
  40a834:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a838:	4423      	add	r3, r4
  40a83a:	785b      	ldrb	r3, [r3, #1]
  40a83c:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a840:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40a844:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40a846:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40a84a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40a84e:	b002      	add	sp, #8
  40a850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  40a854:	f04f 30ff 	mov.w	r0, #4294967295
  40a858:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a85a:	f04f 30ff 	mov.w	r0, #4294967295
  40a85e:	e7f6      	b.n	40a84e <_lv_style_get_int+0xee>
        return -1;
  40a860:	f04f 30ff 	mov.w	r0, #4294967295
  40a864:	e7f3      	b.n	40a84e <_lv_style_get_int+0xee>

0040a866 <_lv_style_get_opa>:
    if(style == NULL) return -1;
  40a866:	2800      	cmp	r0, #0
  40a868:	d076      	beq.n	40a958 <_lv_style_get_opa+0xf2>
{
  40a86a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a86e:	b082      	sub	sp, #8
  40a870:	4692      	mov	sl, r2
  40a872:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40a874:	6803      	ldr	r3, [r0, #0]
  40a876:	2b00      	cmp	r3, #0
  40a878:	d071      	beq.n	40a95e <_lv_style_get_opa+0xf8>
    if(style->map == NULL) return -1;
  40a87a:	2b00      	cmp	r3, #0
  40a87c:	d063      	beq.n	40a946 <_lv_style_get_opa+0xe0>
    uint8_t id_to_find = prop & 0xFF;
  40a87e:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a880:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40a882:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40a884:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40a888:	46f4      	mov	ip, lr
  40a88a:	e040      	b.n	40a90e <_lv_style_get_opa+0xa8>
    prop_p[0] = style->map[idx];
  40a88c:	682a      	ldr	r2, [r5, #0]
  40a88e:	f812 9000 	ldrb.w	r9, [r2, r0]
  40a892:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a896:	5d14      	ldrb	r4, [r2, r4]
  40a898:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40a89c:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a8a0:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40a8a4:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a8a8:	ea87 0904 	eor.w	r9, r7, r4
  40a8ac:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40a8b0:	d00d      	beq.n	40a8ce <_lv_style_get_opa+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a8b2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40a8b6:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40a8ba:	ea34 0209 	bics.w	r2, r4, r9
  40a8be:	d134      	bne.n	40a92a <_lv_style_get_opa+0xc4>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a8c0:	4564      	cmp	r4, ip
  40a8c2:	dd32      	ble.n	40a92a <_lv_style_get_opa+0xc4>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a8c4:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40a8c8:	fa0f fe80 	sxth.w	lr, r0
  40a8cc:	e02d      	b.n	40a92a <_lv_style_get_opa+0xc4>
                return i;
  40a8ce:	4686      	mov	lr, r0
    if(id < 0) {
  40a8d0:	f1be 0f00 	cmp.w	lr, #0
  40a8d4:	db46      	blt.n	40a964 <_lv_style_get_opa+0xfe>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_opa_t));
  40a8d6:	6828      	ldr	r0, [r5, #0]
  40a8d8:	4674      	mov	r4, lr
  40a8da:	f10e 0e02 	add.w	lr, lr, #2
  40a8de:	4486      	add	lr, r0
    uint8_t * d8 = (uint8_t *)dst;
  40a8e0:	4652      	mov	r2, sl
  40a8e2:	2301      	movs	r3, #1
    while(len) {
  40a8e4:	bb93      	cbnz	r3, 40a94c <_lv_style_get_opa+0xe6>
    prop_p[0] = style->map[idx];
  40a8e6:	682b      	ldr	r3, [r5, #0]
  40a8e8:	5d1a      	ldrb	r2, [r3, r4]
  40a8ea:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a8ee:	4423      	add	r3, r4
  40a8f0:	785b      	ldrb	r3, [r3, #1]
  40a8f2:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a8f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40a8fa:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40a8fc:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40a900:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40a904:	b002      	add	sp, #8
  40a906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a90a:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a90c:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a90e:	682b      	ldr	r3, [r5, #0]
  40a910:	5c1c      	ldrb	r4, [r3, r0]
  40a912:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a916:	1c44      	adds	r4, r0, #1
  40a918:	5d1b      	ldrb	r3, [r3, r4]
  40a91a:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a91e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a922:	2bff      	cmp	r3, #255	; 0xff
  40a924:	d0d4      	beq.n	40a8d0 <_lv_style_get_opa+0x6a>
        if(prop_id == id_to_find) {
  40a926:	429e      	cmp	r6, r3
  40a928:	d0b0      	beq.n	40a88c <_lv_style_get_opa+0x26>
    prop_id &= 0xF;
  40a92a:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a92e:	2b08      	cmp	r3, #8
  40a930:	d9eb      	bls.n	40a90a <_lv_style_get_opa+0xa4>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a932:	2b0b      	cmp	r3, #11
  40a934:	d903      	bls.n	40a93e <_lv_style_get_opa+0xd8>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a936:	2b0d      	cmp	r3, #13
  40a938:	d803      	bhi.n	40a942 <_lv_style_get_opa+0xdc>
  40a93a:	2303      	movs	r3, #3
  40a93c:	e7e6      	b.n	40a90c <_lv_style_get_opa+0xa6>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a93e:	2304      	movs	r3, #4
  40a940:	e7e4      	b.n	40a90c <_lv_style_get_opa+0xa6>
    else size += sizeof(const void *);
  40a942:	2306      	movs	r3, #6
  40a944:	e7e2      	b.n	40a90c <_lv_style_get_opa+0xa6>
    if(style->map == NULL) return -1;
  40a946:	f04f 3eff 	mov.w	lr, #4294967295
  40a94a:	e7c1      	b.n	40a8d0 <_lv_style_get_opa+0x6a>
        *d8 = *s8;
  40a94c:	f81e 0b01 	ldrb.w	r0, [lr], #1
  40a950:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a954:	3b01      	subs	r3, #1
  40a956:	e7c5      	b.n	40a8e4 <_lv_style_get_opa+0x7e>
    if(style == NULL) return -1;
  40a958:	f04f 30ff 	mov.w	r0, #4294967295
  40a95c:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a95e:	f04f 30ff 	mov.w	r0, #4294967295
  40a962:	e7cf      	b.n	40a904 <_lv_style_get_opa+0x9e>
        return -1;
  40a964:	f04f 30ff 	mov.w	r0, #4294967295
  40a968:	e7cc      	b.n	40a904 <_lv_style_get_opa+0x9e>

0040a96a <_lv_style_get_color>:
    if(style == NULL) return -1;
  40a96a:	2800      	cmp	r0, #0
  40a96c:	d077      	beq.n	40aa5e <_lv_style_get_color+0xf4>
{
  40a96e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a972:	b082      	sub	sp, #8
  40a974:	4692      	mov	sl, r2
  40a976:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40a978:	6803      	ldr	r3, [r0, #0]
  40a97a:	2b00      	cmp	r3, #0
  40a97c:	d072      	beq.n	40aa64 <_lv_style_get_color+0xfa>
    if(style->map == NULL) return -1;
  40a97e:	2b00      	cmp	r3, #0
  40a980:	d051      	beq.n	40aa26 <_lv_style_get_color+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  40a982:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a984:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40a986:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40a988:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40a98c:	46f4      	mov	ip, lr
  40a98e:	e02e      	b.n	40a9ee <_lv_style_get_color+0x84>
    prop_p[0] = style->map[idx];
  40a990:	682a      	ldr	r2, [r5, #0]
  40a992:	f812 9000 	ldrb.w	r9, [r2, r0]
  40a996:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a99a:	5d14      	ldrb	r4, [r2, r4]
  40a99c:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40a9a0:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a9a4:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40a9a8:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a9ac:	ea87 0904 	eor.w	r9, r7, r4
  40a9b0:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40a9b4:	d00d      	beq.n	40a9d2 <_lv_style_get_color+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a9b6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40a9ba:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40a9be:	ea34 0209 	bics.w	r2, r4, r9
  40a9c2:	d122      	bne.n	40aa0a <_lv_style_get_color+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a9c4:	4564      	cmp	r4, ip
  40a9c6:	dd20      	ble.n	40aa0a <_lv_style_get_color+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a9c8:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40a9cc:	fa0f fe80 	sxth.w	lr, r0
  40a9d0:	e01b      	b.n	40aa0a <_lv_style_get_color+0xa0>
                return i;
  40a9d2:	4686      	mov	lr, r0
    if(id < 0) {
  40a9d4:	f1be 0f00 	cmp.w	lr, #0
  40a9d8:	db47      	blt.n	40aa6a <_lv_style_get_color+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
  40a9da:	682b      	ldr	r3, [r5, #0]
  40a9dc:	4674      	mov	r4, lr
  40a9de:	f10e 0e02 	add.w	lr, lr, #2
  40a9e2:	449e      	add	lr, r3
    uint8_t * d8 = (uint8_t *)dst;
  40a9e4:	4652      	mov	r2, sl
  40a9e6:	2302      	movs	r3, #2
  40a9e8:	e025      	b.n	40aa36 <_lv_style_get_color+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a9ea:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a9ec:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a9ee:	682b      	ldr	r3, [r5, #0]
  40a9f0:	5c1c      	ldrb	r4, [r3, r0]
  40a9f2:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a9f6:	1c44      	adds	r4, r0, #1
  40a9f8:	5d1b      	ldrb	r3, [r3, r4]
  40a9fa:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a9fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40aa02:	2bff      	cmp	r3, #255	; 0xff
  40aa04:	d0e6      	beq.n	40a9d4 <_lv_style_get_color+0x6a>
        if(prop_id == id_to_find) {
  40aa06:	429e      	cmp	r6, r3
  40aa08:	d0c2      	beq.n	40a990 <_lv_style_get_color+0x26>
    prop_id &= 0xF;
  40aa0a:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40aa0e:	2b08      	cmp	r3, #8
  40aa10:	d9eb      	bls.n	40a9ea <_lv_style_get_color+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40aa12:	2b0b      	cmp	r3, #11
  40aa14:	d903      	bls.n	40aa1e <_lv_style_get_color+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40aa16:	2b0d      	cmp	r3, #13
  40aa18:	d803      	bhi.n	40aa22 <_lv_style_get_color+0xb8>
  40aa1a:	2303      	movs	r3, #3
  40aa1c:	e7e6      	b.n	40a9ec <_lv_style_get_color+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40aa1e:	2304      	movs	r3, #4
  40aa20:	e7e4      	b.n	40a9ec <_lv_style_get_color+0x82>
    else size += sizeof(const void *);
  40aa22:	2306      	movs	r3, #6
  40aa24:	e7e2      	b.n	40a9ec <_lv_style_get_color+0x82>
    if(style->map == NULL) return -1;
  40aa26:	f04f 3eff 	mov.w	lr, #4294967295
  40aa2a:	e7d3      	b.n	40a9d4 <_lv_style_get_color+0x6a>
        *d8 = *s8;
  40aa2c:	f81e 0b01 	ldrb.w	r0, [lr], #1
  40aa30:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40aa34:	3b01      	subs	r3, #1
    while(len) {
  40aa36:	2b00      	cmp	r3, #0
  40aa38:	d1f8      	bne.n	40aa2c <_lv_style_get_color+0xc2>
    prop_p[0] = style->map[idx];
  40aa3a:	682b      	ldr	r3, [r5, #0]
  40aa3c:	5d1a      	ldrb	r2, [r3, r4]
  40aa3e:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40aa42:	4423      	add	r3, r4
  40aa44:	785b      	ldrb	r3, [r3, #1]
  40aa46:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40aa4a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40aa4e:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40aa50:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40aa54:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40aa58:	b002      	add	sp, #8
  40aa5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  40aa5e:	f04f 30ff 	mov.w	r0, #4294967295
  40aa62:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40aa64:	f04f 30ff 	mov.w	r0, #4294967295
  40aa68:	e7f6      	b.n	40aa58 <_lv_style_get_color+0xee>
        return -1;
  40aa6a:	f04f 30ff 	mov.w	r0, #4294967295
  40aa6e:	e7f3      	b.n	40aa58 <_lv_style_get_color+0xee>

0040aa70 <_lv_style_get_ptr>:
    if(style == NULL) return -1;
  40aa70:	2800      	cmp	r0, #0
  40aa72:	d077      	beq.n	40ab64 <_lv_style_get_ptr+0xf4>
{
  40aa74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40aa78:	b082      	sub	sp, #8
  40aa7a:	4692      	mov	sl, r2
  40aa7c:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40aa7e:	6803      	ldr	r3, [r0, #0]
  40aa80:	2b00      	cmp	r3, #0
  40aa82:	d072      	beq.n	40ab6a <_lv_style_get_ptr+0xfa>
    if(style->map == NULL) return -1;
  40aa84:	2b00      	cmp	r3, #0
  40aa86:	d051      	beq.n	40ab2c <_lv_style_get_ptr+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  40aa88:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40aa8a:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40aa8c:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40aa8e:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40aa92:	46f4      	mov	ip, lr
  40aa94:	e02e      	b.n	40aaf4 <_lv_style_get_ptr+0x84>
    prop_p[0] = style->map[idx];
  40aa96:	682a      	ldr	r2, [r5, #0]
  40aa98:	f812 9000 	ldrb.w	r9, [r2, r0]
  40aa9c:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40aaa0:	5d14      	ldrb	r4, [r2, r4]
  40aaa2:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40aaa6:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40aaaa:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40aaae:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40aab2:	ea87 0904 	eor.w	r9, r7, r4
  40aab6:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40aaba:	d00d      	beq.n	40aad8 <_lv_style_get_ptr+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40aabc:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40aac0:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40aac4:	ea34 0209 	bics.w	r2, r4, r9
  40aac8:	d122      	bne.n	40ab10 <_lv_style_get_ptr+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40aaca:	4564      	cmp	r4, ip
  40aacc:	dd20      	ble.n	40ab10 <_lv_style_get_ptr+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40aace:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40aad2:	fa0f fe80 	sxth.w	lr, r0
  40aad6:	e01b      	b.n	40ab10 <_lv_style_get_ptr+0xa0>
                return i;
  40aad8:	4686      	mov	lr, r0
    if(id < 0) {
  40aada:	f1be 0f00 	cmp.w	lr, #0
  40aade:	db47      	blt.n	40ab70 <_lv_style_get_ptr+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
  40aae0:	682b      	ldr	r3, [r5, #0]
  40aae2:	4676      	mov	r6, lr
  40aae4:	f10e 0002 	add.w	r0, lr, #2
  40aae8:	4418      	add	r0, r3
    uint8_t * d8 = (uint8_t *)dst;
  40aaea:	4652      	mov	r2, sl
  40aaec:	2304      	movs	r3, #4
  40aaee:	e025      	b.n	40ab3c <_lv_style_get_ptr+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40aaf0:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40aaf2:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40aaf4:	682b      	ldr	r3, [r5, #0]
  40aaf6:	5c1c      	ldrb	r4, [r3, r0]
  40aaf8:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40aafc:	1c44      	adds	r4, r0, #1
  40aafe:	5d1b      	ldrb	r3, [r3, r4]
  40ab00:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40ab04:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40ab08:	2bff      	cmp	r3, #255	; 0xff
  40ab0a:	d0e6      	beq.n	40aada <_lv_style_get_ptr+0x6a>
        if(prop_id == id_to_find) {
  40ab0c:	429e      	cmp	r6, r3
  40ab0e:	d0c2      	beq.n	40aa96 <_lv_style_get_ptr+0x26>
    prop_id &= 0xF;
  40ab10:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40ab14:	2b08      	cmp	r3, #8
  40ab16:	d9eb      	bls.n	40aaf0 <_lv_style_get_ptr+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40ab18:	2b0b      	cmp	r3, #11
  40ab1a:	d903      	bls.n	40ab24 <_lv_style_get_ptr+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40ab1c:	2b0d      	cmp	r3, #13
  40ab1e:	d803      	bhi.n	40ab28 <_lv_style_get_ptr+0xb8>
  40ab20:	2303      	movs	r3, #3
  40ab22:	e7e6      	b.n	40aaf2 <_lv_style_get_ptr+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40ab24:	2304      	movs	r3, #4
  40ab26:	e7e4      	b.n	40aaf2 <_lv_style_get_ptr+0x82>
    else size += sizeof(const void *);
  40ab28:	2306      	movs	r3, #6
  40ab2a:	e7e2      	b.n	40aaf2 <_lv_style_get_ptr+0x82>
    if(style->map == NULL) return -1;
  40ab2c:	f04f 3eff 	mov.w	lr, #4294967295
  40ab30:	e7d3      	b.n	40aada <_lv_style_get_ptr+0x6a>
        *d8 = *s8;
  40ab32:	f810 4b01 	ldrb.w	r4, [r0], #1
  40ab36:	f802 4b01 	strb.w	r4, [r2], #1
        len--;
  40ab3a:	3b01      	subs	r3, #1
    while(len) {
  40ab3c:	2b00      	cmp	r3, #0
  40ab3e:	d1f8      	bne.n	40ab32 <_lv_style_get_ptr+0xc2>
    prop_p[0] = style->map[idx];
  40ab40:	682b      	ldr	r3, [r5, #0]
  40ab42:	5d9a      	ldrb	r2, [r3, r6]
  40ab44:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40ab48:	4433      	add	r3, r6
  40ab4a:	785b      	ldrb	r3, [r3, #1]
  40ab4c:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40ab50:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40ab54:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40ab56:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40ab5a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40ab5e:	b002      	add	sp, #8
  40ab60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  40ab64:	f04f 30ff 	mov.w	r0, #4294967295
  40ab68:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40ab6a:	f04f 30ff 	mov.w	r0, #4294967295
  40ab6e:	e7f6      	b.n	40ab5e <_lv_style_get_ptr+0xee>
        return -1;
  40ab70:	f04f 30ff 	mov.w	r0, #4294967295
  40ab74:	e7f3      	b.n	40ab5e <_lv_style_get_ptr+0xee>

0040ab76 <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
  40ab76:	7903      	ldrb	r3, [r0, #4]
  40ab78:	f013 0f40 	tst.w	r3, #64	; 0x40
  40ab7c:	d008      	beq.n	40ab90 <lv_style_list_get_local_style+0x1a>
    if(list->has_trans) return list->style_list[1];
  40ab7e:	f013 0f80 	tst.w	r3, #128	; 0x80
  40ab82:	d102      	bne.n	40ab8a <lv_style_list_get_local_style+0x14>
    else return list->style_list[0];
  40ab84:	6803      	ldr	r3, [r0, #0]
  40ab86:	6818      	ldr	r0, [r3, #0]
  40ab88:	4770      	bx	lr
    if(list->has_trans) return list->style_list[1];
  40ab8a:	6803      	ldr	r3, [r0, #0]
  40ab8c:	6858      	ldr	r0, [r3, #4]
  40ab8e:	4770      	bx	lr
    if(!list->has_local) return NULL;
  40ab90:	2000      	movs	r0, #0
}
  40ab92:	4770      	bx	lr

0040ab94 <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
  40ab94:	f990 3004 	ldrsb.w	r3, [r0, #4]
  40ab98:	2b00      	cmp	r3, #0
  40ab9a:	da02      	bge.n	40aba2 <_lv_style_list_get_transition_style+0xe>
    return list->style_list[0];
  40ab9c:	6803      	ldr	r3, [r0, #0]
  40ab9e:	6818      	ldr	r0, [r3, #0]
  40aba0:	4770      	bx	lr
    if(!list->has_trans) return NULL;
  40aba2:	2000      	movs	r0, #0
}
  40aba4:	4770      	bx	lr
	...

0040aba8 <_lv_style_list_reset>:
    if(list == NULL) return;
  40aba8:	2800      	cmp	r0, #0
  40abaa:	d032      	beq.n	40ac12 <_lv_style_list_reset+0x6a>
{
  40abac:	b538      	push	{r3, r4, r5, lr}
  40abae:	4604      	mov	r4, r0
    if(list->has_local) {
  40abb0:	7903      	ldrb	r3, [r0, #4]
  40abb2:	f013 0f40 	tst.w	r3, #64	; 0x40
  40abb6:	d008      	beq.n	40abca <_lv_style_list_reset+0x22>
        lv_style_t * local = lv_style_list_get_local_style(list);
  40abb8:	4b16      	ldr	r3, [pc, #88]	; (40ac14 <_lv_style_list_reset+0x6c>)
  40abba:	4798      	blx	r3
        if(local) {
  40abbc:	4605      	mov	r5, r0
  40abbe:	b120      	cbz	r0, 40abca <_lv_style_list_reset+0x22>
            lv_style_reset(local);
  40abc0:	4b15      	ldr	r3, [pc, #84]	; (40ac18 <_lv_style_list_reset+0x70>)
  40abc2:	4798      	blx	r3
            lv_mem_free(local);
  40abc4:	4628      	mov	r0, r5
  40abc6:	4b15      	ldr	r3, [pc, #84]	; (40ac1c <_lv_style_list_reset+0x74>)
  40abc8:	4798      	blx	r3
    if(list->has_trans) {
  40abca:	f994 3004 	ldrsb.w	r3, [r4, #4]
  40abce:	2b00      	cmp	r3, #0
  40abd0:	db13      	blt.n	40abfa <_lv_style_list_reset+0x52>
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
  40abd2:	7923      	ldrb	r3, [r4, #4]
  40abd4:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  40abd8:	d002      	beq.n	40abe0 <_lv_style_list_reset+0x38>
  40abda:	6820      	ldr	r0, [r4, #0]
  40abdc:	4b0f      	ldr	r3, [pc, #60]	; (40ac1c <_lv_style_list_reset+0x74>)
  40abde:	4798      	blx	r3
    list->style_list = NULL;
  40abe0:	2200      	movs	r2, #0
  40abe2:	6022      	str	r2, [r4, #0]
    list->style_cnt = 0;
  40abe4:	7923      	ldrb	r3, [r4, #4]
    list->has_trans = 0;
  40abe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40abea:	f362 13c7 	bfi	r3, r2, #7, #1
  40abee:	7123      	strb	r3, [r4, #4]
    list->skip_trans = 0;
  40abf0:	7963      	ldrb	r3, [r4, #5]
  40abf2:	f362 0300 	bfi	r3, r2, #0, #1
  40abf6:	7163      	strb	r3, [r4, #5]
  40abf8:	bd38      	pop	{r3, r4, r5, pc}
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
  40abfa:	4620      	mov	r0, r4
  40abfc:	4b08      	ldr	r3, [pc, #32]	; (40ac20 <_lv_style_list_reset+0x78>)
  40abfe:	4798      	blx	r3
        if(trans) {
  40ac00:	4605      	mov	r5, r0
  40ac02:	2800      	cmp	r0, #0
  40ac04:	d0e5      	beq.n	40abd2 <_lv_style_list_reset+0x2a>
            lv_style_reset(trans);
  40ac06:	4b04      	ldr	r3, [pc, #16]	; (40ac18 <_lv_style_list_reset+0x70>)
  40ac08:	4798      	blx	r3
            lv_mem_free(trans);
  40ac0a:	4628      	mov	r0, r5
  40ac0c:	4b03      	ldr	r3, [pc, #12]	; (40ac1c <_lv_style_list_reset+0x74>)
  40ac0e:	4798      	blx	r3
  40ac10:	e7df      	b.n	40abd2 <_lv_style_list_reset+0x2a>
  40ac12:	4770      	bx	lr
  40ac14:	0040ab77 	.word	0x0040ab77
  40ac18:	00409f5d 	.word	0x00409f5d
  40ac1c:	004175b1 	.word	0x004175b1
  40ac20:	0040ab95 	.word	0x0040ab95

0040ac24 <lv_style_list_copy>:
{
  40ac24:	b570      	push	{r4, r5, r6, lr}
  40ac26:	4605      	mov	r5, r0
  40ac28:	460c      	mov	r4, r1
    _lv_style_list_reset(list_dest);
  40ac2a:	4b3d      	ldr	r3, [pc, #244]	; (40ad20 <lv_style_list_copy+0xfc>)
  40ac2c:	4798      	blx	r3
    if(list_src->style_list == NULL) return;
  40ac2e:	6823      	ldr	r3, [r4, #0]
  40ac30:	2b00      	cmp	r3, #0
  40ac32:	d059      	beq.n	40ace8 <lv_style_list_copy+0xc4>
    if(list_src->has_local == 0) {
  40ac34:	7923      	ldrb	r3, [r4, #4]
  40ac36:	f013 0f40 	tst.w	r3, #64	; 0x40
  40ac3a:	d12f      	bne.n	40ac9c <lv_style_list_copy+0x78>
        if(list_src->has_trans) {
  40ac3c:	f013 0f80 	tst.w	r3, #128	; 0x80
  40ac40:	d113      	bne.n	40ac6a <lv_style_list_copy+0x46>
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
  40ac42:	7920      	ldrb	r0, [r4, #4]
  40ac44:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40ac48:	0080      	lsls	r0, r0, #2
  40ac4a:	4b36      	ldr	r3, [pc, #216]	; (40ad24 <lv_style_list_copy+0x100>)
  40ac4c:	4798      	blx	r3
  40ac4e:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
  40ac50:	7922      	ldrb	r2, [r4, #4]
  40ac52:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40ac56:	0092      	lsls	r2, r2, #2
  40ac58:	6821      	ldr	r1, [r4, #0]
  40ac5a:	4b33      	ldr	r3, [pc, #204]	; (40ad28 <lv_style_list_copy+0x104>)
  40ac5c:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt;
  40ac5e:	7922      	ldrb	r2, [r4, #4]
  40ac60:	792b      	ldrb	r3, [r5, #4]
  40ac62:	f362 0305 	bfi	r3, r2, #0, #6
  40ac66:	712b      	strb	r3, [r5, #4]
  40ac68:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40ac6a:	f003 003f 	and.w	r0, r3, #63	; 0x3f
  40ac6e:	3801      	subs	r0, #1
  40ac70:	0080      	lsls	r0, r0, #2
  40ac72:	4b2c      	ldr	r3, [pc, #176]	; (40ad24 <lv_style_list_copy+0x100>)
  40ac74:	4798      	blx	r3
  40ac76:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40ac78:	6821      	ldr	r1, [r4, #0]
  40ac7a:	7922      	ldrb	r2, [r4, #4]
  40ac7c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40ac80:	3a01      	subs	r2, #1
  40ac82:	0092      	lsls	r2, r2, #2
  40ac84:	3104      	adds	r1, #4
  40ac86:	4b28      	ldr	r3, [pc, #160]	; (40ad28 <lv_style_list_copy+0x104>)
  40ac88:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
  40ac8a:	7923      	ldrb	r3, [r4, #4]
  40ac8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40ac90:	3b01      	subs	r3, #1
  40ac92:	792a      	ldrb	r2, [r5, #4]
  40ac94:	f363 0205 	bfi	r2, r3, #0, #6
  40ac98:	712a      	strb	r2, [r5, #4]
  40ac9a:	bd70      	pop	{r4, r5, r6, pc}
        if(list_src->has_trans) {
  40ac9c:	f013 0f80 	tst.w	r3, #128	; 0x80
  40aca0:	d123      	bne.n	40acea <lv_style_list_copy+0xc6>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40aca2:	7920      	ldrb	r0, [r4, #4]
  40aca4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40aca8:	3801      	subs	r0, #1
  40acaa:	0080      	lsls	r0, r0, #2
  40acac:	4b1d      	ldr	r3, [pc, #116]	; (40ad24 <lv_style_list_copy+0x100>)
  40acae:	4798      	blx	r3
  40acb0:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40acb2:	6821      	ldr	r1, [r4, #0]
  40acb4:	7922      	ldrb	r2, [r4, #4]
  40acb6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40acba:	3a01      	subs	r2, #1
  40acbc:	0092      	lsls	r2, r2, #2
  40acbe:	3104      	adds	r1, #4
  40acc0:	4b19      	ldr	r3, [pc, #100]	; (40ad28 <lv_style_list_copy+0x104>)
  40acc2:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
  40acc4:	7923      	ldrb	r3, [r4, #4]
  40acc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40acca:	3b01      	subs	r3, #1
  40accc:	792a      	ldrb	r2, [r5, #4]
  40acce:	f363 0205 	bfi	r2, r3, #0, #6
  40acd2:	712a      	strb	r2, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
  40acd4:	4628      	mov	r0, r5
  40acd6:	4d15      	ldr	r5, [pc, #84]	; (40ad2c <lv_style_list_copy+0x108>)
  40acd8:	47a8      	blx	r5
  40acda:	4606      	mov	r6, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
  40acdc:	4620      	mov	r0, r4
  40acde:	47a8      	blx	r5
  40ace0:	4601      	mov	r1, r0
  40ace2:	4630      	mov	r0, r6
  40ace4:	4b12      	ldr	r3, [pc, #72]	; (40ad30 <lv_style_list_copy+0x10c>)
  40ace6:	4798      	blx	r3
  40ace8:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
  40acea:	7920      	ldrb	r0, [r4, #4]
  40acec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40acf0:	3802      	subs	r0, #2
  40acf2:	0080      	lsls	r0, r0, #2
  40acf4:	4b0b      	ldr	r3, [pc, #44]	; (40ad24 <lv_style_list_copy+0x100>)
  40acf6:	4798      	blx	r3
  40acf8:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
  40acfa:	6821      	ldr	r1, [r4, #0]
  40acfc:	7922      	ldrb	r2, [r4, #4]
  40acfe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40ad02:	3a02      	subs	r2, #2
  40ad04:	0092      	lsls	r2, r2, #2
  40ad06:	3108      	adds	r1, #8
  40ad08:	4b07      	ldr	r3, [pc, #28]	; (40ad28 <lv_style_list_copy+0x104>)
  40ad0a:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 2;
  40ad0c:	7923      	ldrb	r3, [r4, #4]
  40ad0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40ad12:	3b02      	subs	r3, #2
  40ad14:	792a      	ldrb	r2, [r5, #4]
  40ad16:	f363 0205 	bfi	r2, r3, #0, #6
  40ad1a:	712a      	strb	r2, [r5, #4]
  40ad1c:	e7da      	b.n	40acd4 <lv_style_list_copy+0xb0>
  40ad1e:	bf00      	nop
  40ad20:	0040aba9 	.word	0x0040aba9
  40ad24:	004174ed 	.word	0x004174ed
  40ad28:	004176fd 	.word	0x004176fd
  40ad2c:	00409ecd 	.word	0x00409ecd
  40ad30:	00409fbd 	.word	0x00409fbd

0040ad34 <_lv_style_list_add_trans_style>:
{
  40ad34:	b538      	push	{r3, r4, r5, lr}
  40ad36:	4604      	mov	r4, r0
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
  40ad38:	f990 3004 	ldrsb.w	r3, [r0, #4]
  40ad3c:	2b00      	cmp	r3, #0
  40ad3e:	db1c      	blt.n	40ad7a <_lv_style_list_add_trans_style+0x46>
    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
  40ad40:	2004      	movs	r0, #4
  40ad42:	4b13      	ldr	r3, [pc, #76]	; (40ad90 <_lv_style_list_add_trans_style+0x5c>)
  40ad44:	4798      	blx	r3
  40ad46:	4605      	mov	r5, r0
    LV_ASSERT_MEM(trans_style);
  40ad48:	4b12      	ldr	r3, [pc, #72]	; (40ad94 <_lv_style_list_add_trans_style+0x60>)
  40ad4a:	4798      	blx	r3
  40ad4c:	b1d0      	cbz	r0, 40ad84 <_lv_style_list_add_trans_style+0x50>
    if(trans_style == NULL) {
  40ad4e:	b1bd      	cbz	r5, 40ad80 <_lv_style_list_add_trans_style+0x4c>
    lv_style_init(trans_style);
  40ad50:	4628      	mov	r0, r5
  40ad52:	4b11      	ldr	r3, [pc, #68]	; (40ad98 <_lv_style_list_add_trans_style+0x64>)
  40ad54:	4798      	blx	r3
    _lv_style_list_add_style(list, trans_style);
  40ad56:	4629      	mov	r1, r5
  40ad58:	4620      	mov	r0, r4
  40ad5a:	4b10      	ldr	r3, [pc, #64]	; (40ad9c <_lv_style_list_add_trans_style+0x68>)
  40ad5c:	4798      	blx	r3
    list->has_trans = 1;
  40ad5e:	7923      	ldrb	r3, [r4, #4]
  40ad60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40ad64:	7123      	strb	r3, [r4, #4]
    if(list->has_local) {
  40ad66:	f013 0f40 	tst.w	r3, #64	; 0x40
  40ad6a:	d009      	beq.n	40ad80 <_lv_style_list_add_trans_style+0x4c>
        lv_style_t * tmp = list->style_list[0];
  40ad6c:	6823      	ldr	r3, [r4, #0]
  40ad6e:	681a      	ldr	r2, [r3, #0]
        list->style_list[0] = list->style_list[1];
  40ad70:	6859      	ldr	r1, [r3, #4]
  40ad72:	6019      	str	r1, [r3, #0]
        list->style_list[1] = tmp;
  40ad74:	6823      	ldr	r3, [r4, #0]
  40ad76:	605a      	str	r2, [r3, #4]
  40ad78:	e002      	b.n	40ad80 <_lv_style_list_add_trans_style+0x4c>
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
  40ad7a:	4b09      	ldr	r3, [pc, #36]	; (40ada0 <_lv_style_list_add_trans_style+0x6c>)
  40ad7c:	4798      	blx	r3
  40ad7e:	4605      	mov	r5, r0
}
  40ad80:	4628      	mov	r0, r5
  40ad82:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_MEM(trans_style);
  40ad84:	462a      	mov	r2, r5
  40ad86:	2300      	movs	r3, #0
  40ad88:	4806      	ldr	r0, [pc, #24]	; (40ada4 <_lv_style_list_add_trans_style+0x70>)
  40ad8a:	4907      	ldr	r1, [pc, #28]	; (40ada8 <_lv_style_list_add_trans_style+0x74>)
  40ad8c:	4788      	blx	r1
  40ad8e:	e7fe      	b.n	40ad8e <_lv_style_list_add_trans_style+0x5a>
  40ad90:	004174ed 	.word	0x004174ed
  40ad94:	00416da9 	.word	0x00416da9
  40ad98:	00409d39 	.word	0x00409d39
  40ad9c:	00409e1d 	.word	0x00409e1d
  40ada0:	0040ab95 	.word	0x0040ab95
  40ada4:	0042e54c 	.word	0x0042e54c
  40ada8:	00416db5 	.word	0x00416db5

0040adac <_lv_style_list_set_local_int>:
{
  40adac:	b538      	push	{r3, r4, r5, lr}
  40adae:	460c      	mov	r4, r1
  40adb0:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40adb2:	4b03      	ldr	r3, [pc, #12]	; (40adc0 <_lv_style_list_set_local_int+0x14>)
  40adb4:	4798      	blx	r3
    _lv_style_set_int(local, prop, value);
  40adb6:	462a      	mov	r2, r5
  40adb8:	4621      	mov	r1, r4
  40adba:	4b02      	ldr	r3, [pc, #8]	; (40adc4 <_lv_style_list_set_local_int+0x18>)
  40adbc:	4798      	blx	r3
  40adbe:	bd38      	pop	{r3, r4, r5, pc}
  40adc0:	00409ecd 	.word	0x00409ecd
  40adc4:	0040a121 	.word	0x0040a121

0040adc8 <_lv_style_list_set_local_color>:
{
  40adc8:	b538      	push	{r3, r4, r5, lr}
  40adca:	460c      	mov	r4, r1
  40adcc:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40adce:	4b03      	ldr	r3, [pc, #12]	; (40addc <_lv_style_list_set_local_color+0x14>)
  40add0:	4798      	blx	r3
    _lv_style_set_color(local, prop, value);
  40add2:	462a      	mov	r2, r5
  40add4:	4621      	mov	r1, r4
  40add6:	4b02      	ldr	r3, [pc, #8]	; (40ade0 <_lv_style_list_set_local_color+0x18>)
  40add8:	4798      	blx	r3
  40adda:	bd38      	pop	{r3, r4, r5, pc}
  40addc:	00409ecd 	.word	0x00409ecd
  40ade0:	0040a2b1 	.word	0x0040a2b1

0040ade4 <_lv_style_list_set_local_ptr>:
{
  40ade4:	b538      	push	{r3, r4, r5, lr}
  40ade6:	460c      	mov	r4, r1
  40ade8:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40adea:	4b03      	ldr	r3, [pc, #12]	; (40adf8 <_lv_style_list_set_local_ptr+0x14>)
  40adec:	4798      	blx	r3
    _lv_style_set_ptr(local, prop, value);
  40adee:	462a      	mov	r2, r5
  40adf0:	4621      	mov	r1, r4
  40adf2:	4b02      	ldr	r3, [pc, #8]	; (40adfc <_lv_style_list_set_local_ptr+0x18>)
  40adf4:	4798      	blx	r3
  40adf6:	bd38      	pop	{r3, r4, r5, pc}
  40adf8:	00409ecd 	.word	0x00409ecd
  40adfc:	0040a5d1 	.word	0x0040a5d1

0040ae00 <_lv_style_list_get_int>:
    if(list == NULL) return LV_RES_INV;
  40ae00:	2800      	cmp	r0, #0
  40ae02:	d05e      	beq.n	40aec2 <_lv_style_list_get_int+0xc2>
{
  40ae04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40ae08:	b083      	sub	sp, #12
  40ae0a:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40ae0c:	6803      	ldr	r3, [r0, #0]
  40ae0e:	2b00      	cmp	r3, #0
  40ae10:	d059      	beq.n	40aec6 <_lv_style_list_get_int+0xc6>
  40ae12:	4691      	mov	r9, r2
  40ae14:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40ae16:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_style_int_t value_act = 0;
  40ae1a:	2400      	movs	r4, #0
  40ae1c:	f8ad 4006 	strh.w	r4, [sp, #6]
    int16_t weight = -1;
  40ae20:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40ae24:	e017      	b.n	40ae56 <_lv_style_list_get_int+0x56>
    if(list->has_trans && list->skip_trans) id++;
  40ae26:	3101      	adds	r1, #1
  40ae28:	b2c9      	uxtb	r1, r1
  40ae2a:	e020      	b.n	40ae6e <_lv_style_list_get_int+0x6e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40ae2c:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_int(_class, prop, &value_act);
  40ae2e:	f10d 0206 	add.w	r2, sp, #6
  40ae32:	4639      	mov	r1, r7
  40ae34:	4b26      	ldr	r3, [pc, #152]	; (40aed0 <_lv_style_list_get_int+0xd0>)
  40ae36:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40ae38:	4580      	cmp	r8, r0
  40ae3a:	d024      	beq.n	40ae86 <_lv_style_list_get_int+0x86>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40ae3c:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40ae40:	2b00      	cmp	r3, #0
  40ae42:	db28      	blt.n	40ae96 <_lv_style_list_get_int+0x96>
        else if(weight_act > weight) {
  40ae44:	4286      	cmp	r6, r0
  40ae46:	da04      	bge.n	40ae52 <_lv_style_list_get_int+0x52>
            *res = value_act;
  40ae48:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40ae4c:	f8a9 3000 	strh.w	r3, [r9]
            weight =  weight_act;
  40ae50:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40ae52:	3401      	adds	r4, #1
  40ae54:	b224      	sxth	r4, r4
  40ae56:	792b      	ldrb	r3, [r5, #4]
  40ae58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40ae5c:	429c      	cmp	r4, r3
  40ae5e:	da2c      	bge.n	40aeba <_lv_style_list_get_int+0xba>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40ae60:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40ae62:	88aa      	ldrh	r2, [r5, #4]
  40ae64:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40ae68:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40ae6c:	d0db      	beq.n	40ae26 <_lv_style_list_get_int+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40ae6e:	792a      	ldrb	r2, [r5, #4]
  40ae70:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40ae74:	d0da      	beq.n	40ae2c <_lv_style_list_get_int+0x2c>
  40ae76:	428b      	cmp	r3, r1
  40ae78:	dd03      	ble.n	40ae82 <_lv_style_list_get_int+0x82>
    return list->style_list[id];
  40ae7a:	682b      	ldr	r3, [r5, #0]
  40ae7c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40ae80:	e7d5      	b.n	40ae2e <_lv_style_list_get_int+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40ae82:	2000      	movs	r0, #0
  40ae84:	e7d3      	b.n	40ae2e <_lv_style_list_get_int+0x2e>
            *res = value_act;
  40ae86:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40ae8a:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40ae8e:	2001      	movs	r0, #1
}
  40ae90:	b003      	add	sp, #12
  40ae92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40ae96:	fab4 f384 	clz	r3, r4
  40ae9a:	095b      	lsrs	r3, r3, #5
  40ae9c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40aea0:	d1d0      	bne.n	40ae44 <_lv_style_list_get_int+0x44>
  40aea2:	2b00      	cmp	r3, #0
  40aea4:	d0ce      	beq.n	40ae44 <_lv_style_list_get_int+0x44>
  40aea6:	796b      	ldrb	r3, [r5, #5]
  40aea8:	f013 0f01 	tst.w	r3, #1
  40aeac:	d1ca      	bne.n	40ae44 <_lv_style_list_get_int+0x44>
            *res = value_act;
  40aeae:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40aeb2:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40aeb6:	2001      	movs	r0, #1
  40aeb8:	e7ea      	b.n	40ae90 <_lv_style_list_get_int+0x90>
    if(weight >= 0) return LV_RES_OK;
  40aeba:	2e00      	cmp	r6, #0
  40aebc:	db05      	blt.n	40aeca <_lv_style_list_get_int+0xca>
  40aebe:	2001      	movs	r0, #1
  40aec0:	e7e6      	b.n	40ae90 <_lv_style_list_get_int+0x90>
    if(list == NULL) return LV_RES_INV;
  40aec2:	2000      	movs	r0, #0
  40aec4:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40aec6:	2000      	movs	r0, #0
  40aec8:	e7e2      	b.n	40ae90 <_lv_style_list_get_int+0x90>
    else return LV_RES_INV;
  40aeca:	2000      	movs	r0, #0
  40aecc:	e7e0      	b.n	40ae90 <_lv_style_list_get_int+0x90>
  40aece:	bf00      	nop
  40aed0:	0040a761 	.word	0x0040a761

0040aed4 <_lv_style_list_get_color>:
    if(list == NULL) return LV_RES_INV;
  40aed4:	2800      	cmp	r0, #0
  40aed6:	d05d      	beq.n	40af94 <_lv_style_list_get_color+0xc0>
{
  40aed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40aedc:	b083      	sub	sp, #12
  40aede:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40aee0:	6803      	ldr	r3, [r0, #0]
  40aee2:	2b00      	cmp	r3, #0
  40aee4:	d058      	beq.n	40af98 <_lv_style_list_get_color+0xc4>
  40aee6:	4691      	mov	r9, r2
  40aee8:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40aeea:	ea4f 2811 	mov.w	r8, r1, lsr #8
    value_act.full = 0;
  40aeee:	2400      	movs	r4, #0
  40aef0:	f8ad 4004 	strh.w	r4, [sp, #4]
    int16_t weight = -1;
  40aef4:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40aef8:	e016      	b.n	40af28 <_lv_style_list_get_color+0x54>
    if(list->has_trans && list->skip_trans) id++;
  40aefa:	3101      	adds	r1, #1
  40aefc:	b2c9      	uxtb	r1, r1
  40aefe:	e01f      	b.n	40af40 <_lv_style_list_get_color+0x6c>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40af00:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_color(_class, prop, &value_act);
  40af02:	aa01      	add	r2, sp, #4
  40af04:	4639      	mov	r1, r7
  40af06:	4b26      	ldr	r3, [pc, #152]	; (40afa0 <_lv_style_list_get_color+0xcc>)
  40af08:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40af0a:	4580      	cmp	r8, r0
  40af0c:	d024      	beq.n	40af58 <_lv_style_list_get_color+0x84>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40af0e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40af12:	2b00      	cmp	r3, #0
  40af14:	db28      	blt.n	40af68 <_lv_style_list_get_color+0x94>
        else if(weight_act > weight) {
  40af16:	4286      	cmp	r6, r0
  40af18:	da04      	bge.n	40af24 <_lv_style_list_get_color+0x50>
            *res = value_act;
  40af1a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40af1e:	f8a9 3000 	strh.w	r3, [r9]
            weight =  weight_act;
  40af22:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40af24:	3401      	adds	r4, #1
  40af26:	b224      	sxth	r4, r4
  40af28:	792b      	ldrb	r3, [r5, #4]
  40af2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40af2e:	429c      	cmp	r4, r3
  40af30:	da2c      	bge.n	40af8c <_lv_style_list_get_color+0xb8>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40af32:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40af34:	88aa      	ldrh	r2, [r5, #4]
  40af36:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40af3a:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40af3e:	d0dc      	beq.n	40aefa <_lv_style_list_get_color+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40af40:	792a      	ldrb	r2, [r5, #4]
  40af42:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40af46:	d0db      	beq.n	40af00 <_lv_style_list_get_color+0x2c>
  40af48:	428b      	cmp	r3, r1
  40af4a:	dd03      	ble.n	40af54 <_lv_style_list_get_color+0x80>
    return list->style_list[id];
  40af4c:	682b      	ldr	r3, [r5, #0]
  40af4e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40af52:	e7d6      	b.n	40af02 <_lv_style_list_get_color+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40af54:	2000      	movs	r0, #0
  40af56:	e7d4      	b.n	40af02 <_lv_style_list_get_color+0x2e>
            *res = value_act;
  40af58:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40af5c:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40af60:	2001      	movs	r0, #1
}
  40af62:	b003      	add	sp, #12
  40af64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40af68:	fab4 f384 	clz	r3, r4
  40af6c:	095b      	lsrs	r3, r3, #5
  40af6e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40af72:	d1d0      	bne.n	40af16 <_lv_style_list_get_color+0x42>
  40af74:	2b00      	cmp	r3, #0
  40af76:	d0ce      	beq.n	40af16 <_lv_style_list_get_color+0x42>
  40af78:	796b      	ldrb	r3, [r5, #5]
  40af7a:	f013 0f01 	tst.w	r3, #1
  40af7e:	d1ca      	bne.n	40af16 <_lv_style_list_get_color+0x42>
            *res = value_act;
  40af80:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40af84:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40af88:	2001      	movs	r0, #1
  40af8a:	e7ea      	b.n	40af62 <_lv_style_list_get_color+0x8e>
    if(weight >= 0)  return LV_RES_OK;
  40af8c:	2e00      	cmp	r6, #0
  40af8e:	db05      	blt.n	40af9c <_lv_style_list_get_color+0xc8>
  40af90:	2001      	movs	r0, #1
  40af92:	e7e6      	b.n	40af62 <_lv_style_list_get_color+0x8e>
    if(list == NULL) return LV_RES_INV;
  40af94:	2000      	movs	r0, #0
  40af96:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40af98:	2000      	movs	r0, #0
  40af9a:	e7e2      	b.n	40af62 <_lv_style_list_get_color+0x8e>
    else return LV_RES_INV;
  40af9c:	2000      	movs	r0, #0
  40af9e:	e7e0      	b.n	40af62 <_lv_style_list_get_color+0x8e>
  40afa0:	0040a96b 	.word	0x0040a96b

0040afa4 <_lv_style_list_get_opa>:
    if(list == NULL) return LV_RES_INV;
  40afa4:	2800      	cmp	r0, #0
  40afa6:	d05e      	beq.n	40b066 <_lv_style_list_get_opa+0xc2>
{
  40afa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40afac:	b083      	sub	sp, #12
  40afae:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40afb0:	6803      	ldr	r3, [r0, #0]
  40afb2:	2b00      	cmp	r3, #0
  40afb4:	d059      	beq.n	40b06a <_lv_style_list_get_opa+0xc6>
  40afb6:	4691      	mov	r9, r2
  40afb8:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40afba:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_opa_t value_act = LV_OPA_TRANSP;
  40afbe:	2400      	movs	r4, #0
  40afc0:	f88d 4007 	strb.w	r4, [sp, #7]
    int16_t weight = -1;
  40afc4:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40afc8:	e017      	b.n	40affa <_lv_style_list_get_opa+0x56>
    if(list->has_trans && list->skip_trans) id++;
  40afca:	3101      	adds	r1, #1
  40afcc:	b2c9      	uxtb	r1, r1
  40afce:	e020      	b.n	40b012 <_lv_style_list_get_opa+0x6e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40afd0:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_opa(_class, prop, &value_act);
  40afd2:	f10d 0207 	add.w	r2, sp, #7
  40afd6:	4639      	mov	r1, r7
  40afd8:	4b26      	ldr	r3, [pc, #152]	; (40b074 <_lv_style_list_get_opa+0xd0>)
  40afda:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40afdc:	4580      	cmp	r8, r0
  40afde:	d024      	beq.n	40b02a <_lv_style_list_get_opa+0x86>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40afe0:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40afe4:	2b00      	cmp	r3, #0
  40afe6:	db28      	blt.n	40b03a <_lv_style_list_get_opa+0x96>
        else if(weight_act > weight) {
  40afe8:	4286      	cmp	r6, r0
  40afea:	da04      	bge.n	40aff6 <_lv_style_list_get_opa+0x52>
            *res = value_act;
  40afec:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40aff0:	f889 3000 	strb.w	r3, [r9]
            weight =  weight_act;
  40aff4:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40aff6:	3401      	adds	r4, #1
  40aff8:	b224      	sxth	r4, r4
  40affa:	792b      	ldrb	r3, [r5, #4]
  40affc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40b000:	429c      	cmp	r4, r3
  40b002:	da2c      	bge.n	40b05e <_lv_style_list_get_opa+0xba>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40b004:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40b006:	88aa      	ldrh	r2, [r5, #4]
  40b008:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40b00c:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40b010:	d0db      	beq.n	40afca <_lv_style_list_get_opa+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b012:	792a      	ldrb	r2, [r5, #4]
  40b014:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40b018:	d0da      	beq.n	40afd0 <_lv_style_list_get_opa+0x2c>
  40b01a:	428b      	cmp	r3, r1
  40b01c:	dd03      	ble.n	40b026 <_lv_style_list_get_opa+0x82>
    return list->style_list[id];
  40b01e:	682b      	ldr	r3, [r5, #0]
  40b020:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40b024:	e7d5      	b.n	40afd2 <_lv_style_list_get_opa+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b026:	2000      	movs	r0, #0
  40b028:	e7d3      	b.n	40afd2 <_lv_style_list_get_opa+0x2e>
            *res = value_act;
  40b02a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40b02e:	f889 3000 	strb.w	r3, [r9]
            return LV_RES_OK;
  40b032:	2001      	movs	r0, #1
}
  40b034:	b003      	add	sp, #12
  40b036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40b03a:	fab4 f384 	clz	r3, r4
  40b03e:	095b      	lsrs	r3, r3, #5
  40b040:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40b044:	d1d0      	bne.n	40afe8 <_lv_style_list_get_opa+0x44>
  40b046:	2b00      	cmp	r3, #0
  40b048:	d0ce      	beq.n	40afe8 <_lv_style_list_get_opa+0x44>
  40b04a:	796b      	ldrb	r3, [r5, #5]
  40b04c:	f013 0f01 	tst.w	r3, #1
  40b050:	d1ca      	bne.n	40afe8 <_lv_style_list_get_opa+0x44>
            *res = value_act;
  40b052:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40b056:	f889 3000 	strb.w	r3, [r9]
            return LV_RES_OK;
  40b05a:	2001      	movs	r0, #1
  40b05c:	e7ea      	b.n	40b034 <_lv_style_list_get_opa+0x90>
    if(weight >= 0)  return LV_RES_OK;
  40b05e:	2e00      	cmp	r6, #0
  40b060:	db05      	blt.n	40b06e <_lv_style_list_get_opa+0xca>
  40b062:	2001      	movs	r0, #1
  40b064:	e7e6      	b.n	40b034 <_lv_style_list_get_opa+0x90>
    if(list == NULL) return LV_RES_INV;
  40b066:	2000      	movs	r0, #0
  40b068:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40b06a:	2000      	movs	r0, #0
  40b06c:	e7e2      	b.n	40b034 <_lv_style_list_get_opa+0x90>
    else return LV_RES_INV;
  40b06e:	2000      	movs	r0, #0
  40b070:	e7e0      	b.n	40b034 <_lv_style_list_get_opa+0x90>
  40b072:	bf00      	nop
  40b074:	0040a867 	.word	0x0040a867

0040b078 <_lv_style_list_get_ptr>:
    if(list == NULL) return LV_RES_INV;
  40b078:	2800      	cmp	r0, #0
  40b07a:	d058      	beq.n	40b12e <_lv_style_list_get_ptr+0xb6>
{
  40b07c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40b080:	b083      	sub	sp, #12
  40b082:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40b084:	6803      	ldr	r3, [r0, #0]
  40b086:	2b00      	cmp	r3, #0
  40b088:	d053      	beq.n	40b132 <_lv_style_list_get_ptr+0xba>
  40b08a:	4691      	mov	r9, r2
  40b08c:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40b08e:	ea4f 2811 	mov.w	r8, r1, lsr #8
    for(ci = 0; ci < list->style_cnt; ci++) {
  40b092:	2400      	movs	r4, #0
    int16_t weight = -1;
  40b094:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40b098:	e015      	b.n	40b0c6 <_lv_style_list_get_ptr+0x4e>
    if(list->has_trans && list->skip_trans) id++;
  40b09a:	3101      	adds	r1, #1
  40b09c:	b2c9      	uxtb	r1, r1
  40b09e:	e01e      	b.n	40b0de <_lv_style_list_get_ptr+0x66>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b0a0:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_ptr(_class, prop, &value_act);
  40b0a2:	aa01      	add	r2, sp, #4
  40b0a4:	4639      	mov	r1, r7
  40b0a6:	4b25      	ldr	r3, [pc, #148]	; (40b13c <_lv_style_list_get_ptr+0xc4>)
  40b0a8:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40b0aa:	4580      	cmp	r8, r0
  40b0ac:	d023      	beq.n	40b0f6 <_lv_style_list_get_ptr+0x7e>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40b0ae:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40b0b2:	2b00      	cmp	r3, #0
  40b0b4:	db26      	blt.n	40b104 <_lv_style_list_get_ptr+0x8c>
        else if(weight_act > weight) {
  40b0b6:	4286      	cmp	r6, r0
  40b0b8:	da03      	bge.n	40b0c2 <_lv_style_list_get_ptr+0x4a>
            *res = value_act;
  40b0ba:	9b01      	ldr	r3, [sp, #4]
  40b0bc:	f8c9 3000 	str.w	r3, [r9]
            weight =  weight_act;
  40b0c0:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40b0c2:	3401      	adds	r4, #1
  40b0c4:	b224      	sxth	r4, r4
  40b0c6:	792b      	ldrb	r3, [r5, #4]
  40b0c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40b0cc:	429c      	cmp	r4, r3
  40b0ce:	da2a      	bge.n	40b126 <_lv_style_list_get_ptr+0xae>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40b0d0:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40b0d2:	88aa      	ldrh	r2, [r5, #4]
  40b0d4:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40b0d8:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40b0dc:	d0dd      	beq.n	40b09a <_lv_style_list_get_ptr+0x22>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b0de:	792a      	ldrb	r2, [r5, #4]
  40b0e0:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40b0e4:	d0dc      	beq.n	40b0a0 <_lv_style_list_get_ptr+0x28>
  40b0e6:	428b      	cmp	r3, r1
  40b0e8:	dd03      	ble.n	40b0f2 <_lv_style_list_get_ptr+0x7a>
    return list->style_list[id];
  40b0ea:	682b      	ldr	r3, [r5, #0]
  40b0ec:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40b0f0:	e7d7      	b.n	40b0a2 <_lv_style_list_get_ptr+0x2a>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b0f2:	2000      	movs	r0, #0
  40b0f4:	e7d5      	b.n	40b0a2 <_lv_style_list_get_ptr+0x2a>
            *res = value_act;
  40b0f6:	9b01      	ldr	r3, [sp, #4]
  40b0f8:	f8c9 3000 	str.w	r3, [r9]
            return LV_RES_OK;
  40b0fc:	2001      	movs	r0, #1
}
  40b0fe:	b003      	add	sp, #12
  40b100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40b104:	fab4 f384 	clz	r3, r4
  40b108:	095b      	lsrs	r3, r3, #5
  40b10a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40b10e:	d1d2      	bne.n	40b0b6 <_lv_style_list_get_ptr+0x3e>
  40b110:	2b00      	cmp	r3, #0
  40b112:	d0d0      	beq.n	40b0b6 <_lv_style_list_get_ptr+0x3e>
  40b114:	796b      	ldrb	r3, [r5, #5]
  40b116:	f013 0f01 	tst.w	r3, #1
  40b11a:	d1cc      	bne.n	40b0b6 <_lv_style_list_get_ptr+0x3e>
            *res = value_act;
  40b11c:	9b01      	ldr	r3, [sp, #4]
  40b11e:	f8c9 3000 	str.w	r3, [r9]
            return LV_RES_OK;
  40b122:	2001      	movs	r0, #1
  40b124:	e7eb      	b.n	40b0fe <_lv_style_list_get_ptr+0x86>
    if(weight >= 0)  return LV_RES_OK;
  40b126:	2e00      	cmp	r6, #0
  40b128:	db05      	blt.n	40b136 <_lv_style_list_get_ptr+0xbe>
  40b12a:	2001      	movs	r0, #1
  40b12c:	e7e7      	b.n	40b0fe <_lv_style_list_get_ptr+0x86>
    if(list == NULL) return LV_RES_INV;
  40b12e:	2000      	movs	r0, #0
  40b130:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40b132:	2000      	movs	r0, #0
  40b134:	e7e3      	b.n	40b0fe <_lv_style_list_get_ptr+0x86>
    else return LV_RES_INV;
  40b136:	2000      	movs	r0, #0
  40b138:	e7e1      	b.n	40b0fe <_lv_style_list_get_ptr+0x86>
  40b13a:	bf00      	nop
  40b13c:	0040aa71 	.word	0x0040aa71

0040b140 <get_rounded_area>:
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
    }
}

static void get_rounded_area(int16_t angle, lv_coord_t radius, uint8_t thickness, lv_area_t * res_area)
{
  40b140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b144:	4681      	mov	r9, r0
  40b146:	461c      	mov	r4, r3
    const uint8_t ps = 8;
    const uint8_t pa = 127;

    int32_t thick_half = thickness / 2;
  40b148:	0856      	lsrs	r6, r2, #1
    uint8_t thick_corr = (thickness & 0x01) ? 0 : 1;
  40b14a:	f082 0001 	eor.w	r0, r2, #1
  40b14e:	f000 0501 	and.w	r5, r0, #1

    int32_t cir_x;
    int32_t cir_y;

    cir_x = ((radius - thick_half) * _lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
  40b152:	1b8f      	subs	r7, r1, r6
  40b154:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
  40b158:	b200      	sxth	r0, r0
  40b15a:	f8df a080 	ldr.w	sl, [pc, #128]	; 40b1dc <get_rounded_area+0x9c>
  40b15e:	47d0      	blx	sl
  40b160:	fb00 f007 	mul.w	r0, r0, r7
  40b164:	ea4f 18e0 	mov.w	r8, r0, asr #7
    cir_y = ((radius - thick_half) * _lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
  40b168:	4648      	mov	r0, r9
  40b16a:	47d0      	blx	sl
  40b16c:	fb00 f007 	mul.w	r0, r0, r7
  40b170:	11c0      	asrs	r0, r0, #7

    /* Actually the center of the pixel need to be calculated so apply 1/2 px offset*/
    if(cir_x > 0) {
  40b172:	f1b8 0f00 	cmp.w	r8, #0
  40b176:	dd18      	ble.n	40b1aa <get_rounded_area+0x6a>
        cir_x = (cir_x - pa) >> ps;
  40b178:	f1a8 037f 	sub.w	r3, r8, #127	; 0x7f
        res_area->x1 = cir_x - thick_half + thick_corr;
  40b17c:	f3c3 230f 	ubfx	r3, r3, #8, #16
  40b180:	b2b1      	uxth	r1, r6
  40b182:	1a5a      	subs	r2, r3, r1
  40b184:	fa15 f282 	uxtah	r2, r5, r2
  40b188:	8022      	strh	r2, [r4, #0]
        res_area->x2 = cir_x + thick_half;
  40b18a:	440b      	add	r3, r1
  40b18c:	80a3      	strh	r3, [r4, #4]
        cir_x = (cir_x + pa) >> ps;
        res_area->x1 = cir_x - thick_half;
        res_area->x2 = cir_x + thick_half - thick_corr;
    }

    if(cir_y > 0) {
  40b18e:	2800      	cmp	r0, #0
  40b190:	dd17      	ble.n	40b1c2 <get_rounded_area+0x82>
        cir_y = (cir_y - pa) >> ps;
  40b192:	387f      	subs	r0, #127	; 0x7f
        res_area->y1 = cir_y - thick_half + thick_corr;
  40b194:	f3c0 270f 	ubfx	r7, r0, #8, #16
  40b198:	b2b6      	uxth	r6, r6
  40b19a:	1bba      	subs	r2, r7, r6
  40b19c:	fa15 f582 	uxtah	r5, r5, r2
  40b1a0:	8065      	strh	r5, [r4, #2]
        res_area->y2 = cir_y + thick_half;
  40b1a2:	4437      	add	r7, r6
  40b1a4:	80e7      	strh	r7, [r4, #6]
  40b1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        cir_x = (cir_x + pa) >> ps;
  40b1aa:	f108 037f 	add.w	r3, r8, #127	; 0x7f
        res_area->x1 = cir_x - thick_half;
  40b1ae:	f3c3 230f 	ubfx	r3, r3, #8, #16
  40b1b2:	b2b2      	uxth	r2, r6
  40b1b4:	1a99      	subs	r1, r3, r2
  40b1b6:	8021      	strh	r1, [r4, #0]
        res_area->x2 = cir_x + thick_half - thick_corr;
  40b1b8:	4413      	add	r3, r2
  40b1ba:	b29b      	uxth	r3, r3
  40b1bc:	1b5b      	subs	r3, r3, r5
  40b1be:	80a3      	strh	r3, [r4, #4]
  40b1c0:	e7e5      	b.n	40b18e <get_rounded_area+0x4e>
    }
    else {
        cir_y = (cir_y + pa) >> ps;
  40b1c2:	307f      	adds	r0, #127	; 0x7f
        res_area->y1 = cir_y - thick_half;
  40b1c4:	f3c0 200f 	ubfx	r0, r0, #8, #16
  40b1c8:	b2b6      	uxth	r6, r6
  40b1ca:	1b83      	subs	r3, r0, r6
  40b1cc:	8063      	strh	r3, [r4, #2]
        res_area->y2 = cir_y + thick_half - thick_corr;
  40b1ce:	4430      	add	r0, r6
  40b1d0:	b280      	uxth	r0, r0
  40b1d2:	1b40      	subs	r0, r0, r5
  40b1d4:	80e0      	strh	r0, [r4, #6]
  40b1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b1da:	bf00      	nop
  40b1dc:	0041737d 	.word	0x0041737d

0040b1e0 <draw_quarter_0>:
{
  40b1e0:	b570      	push	{r4, r5, r6, lr}
  40b1e2:	b082      	sub	sp, #8
  40b1e4:	4604      	mov	r4, r0
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
  40b1e6:	8943      	ldrh	r3, [r0, #10]
  40b1e8:	b92b      	cbnz	r3, 40b1f6 <draw_quarter_0+0x16>
  40b1ea:	8982      	ldrh	r2, [r0, #12]
  40b1ec:	b91a      	cbnz	r2, 40b1f6 <draw_quarter_0+0x16>
  40b1ee:	88c0      	ldrh	r0, [r0, #6]
  40b1f0:	8922      	ldrh	r2, [r4, #8]
  40b1f2:	4290      	cmp	r0, r2
  40b1f4:	d30b      	bcc.n	40b20e <draw_quarter_0+0x2e>
    else if(q->start_quarter == 0 || q->end_quarter == 0) {
  40b1f6:	b11b      	cbz	r3, 40b200 <draw_quarter_0+0x20>
  40b1f8:	89a2      	ldrh	r2, [r4, #12]
  40b1fa:	2a00      	cmp	r2, #0
  40b1fc:	f040 80b2 	bne.w	40b364 <draw_quarter_0+0x184>
        if(q->start_quarter == 0) {
  40b200:	2b00      	cmp	r3, #0
  40b202:	d049      	beq.n	40b298 <draw_quarter_0+0xb8>
        if(q->end_quarter == 0) {
  40b204:	89a3      	ldrh	r3, [r4, #12]
  40b206:	2b00      	cmp	r3, #0
  40b208:	d078      	beq.n	40b2fc <draw_quarter_0+0x11c>
}
  40b20a:	b002      	add	sp, #8
  40b20c:	bd70      	pop	{r4, r5, r6, pc}
        quarter_area.y1 = q->center_y + ((_lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
  40b20e:	8866      	ldrh	r6, [r4, #2]
  40b210:	b200      	sxth	r0, r0
  40b212:	4d6f      	ldr	r5, [pc, #444]	; (40b3d0 <draw_quarter_0+0x1f0>)
  40b214:	47a8      	blx	r5
  40b216:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b21a:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  40b21e:	1a9b      	subs	r3, r3, r2
  40b220:	fb03 f000 	mul.w	r0, r3, r0
  40b224:	eb06 30e0 	add.w	r0, r6, r0, asr #15
  40b228:	f8ad 0002 	strh.w	r0, [sp, #2]
        quarter_area.x2 = q->center_x + ((_lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
  40b22c:	8826      	ldrh	r6, [r4, #0]
  40b22e:	88e0      	ldrh	r0, [r4, #6]
  40b230:	305a      	adds	r0, #90	; 0x5a
  40b232:	b200      	sxth	r0, r0
  40b234:	47a8      	blx	r5
  40b236:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b23a:	fb03 f000 	mul.w	r0, r3, r0
  40b23e:	eb06 36e0 	add.w	r6, r6, r0, asr #15
  40b242:	f8ad 6004 	strh.w	r6, [sp, #4]
        quarter_area.y2 = q->center_y + ((_lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
  40b246:	8866      	ldrh	r6, [r4, #2]
  40b248:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
  40b24c:	47a8      	blx	r5
  40b24e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b252:	fb03 f000 	mul.w	r0, r3, r0
  40b256:	eb06 36e0 	add.w	r6, r6, r0, asr #15
  40b25a:	f8ad 6006 	strh.w	r6, [sp, #6]
        quarter_area.x1 = q->center_x + ((_lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
  40b25e:	8826      	ldrh	r6, [r4, #0]
  40b260:	8920      	ldrh	r0, [r4, #8]
  40b262:	305a      	adds	r0, #90	; 0x5a
  40b264:	b200      	sxth	r0, r0
  40b266:	47a8      	blx	r5
  40b268:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b26c:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  40b270:	1a9b      	subs	r3, r3, r2
  40b272:	fb03 f300 	mul.w	r3, r3, r0
  40b276:	eb06 33e3 	add.w	r3, r6, r3, asr #15
  40b27a:	a802      	add	r0, sp, #8
  40b27c:	f820 3d08 	strh.w	r3, [r0, #-8]!
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
  40b280:	69a2      	ldr	r2, [r4, #24]
  40b282:	4601      	mov	r1, r0
  40b284:	4b53      	ldr	r3, [pc, #332]	; (40b3d4 <draw_quarter_0+0x1f4>)
  40b286:	4798      	blx	r3
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
  40b288:	2800      	cmp	r0, #0
  40b28a:	d0be      	beq.n	40b20a <draw_quarter_0+0x2a>
  40b28c:	6922      	ldr	r2, [r4, #16]
  40b28e:	4669      	mov	r1, sp
  40b290:	6960      	ldr	r0, [r4, #20]
  40b292:	4b51      	ldr	r3, [pc, #324]	; (40b3d8 <draw_quarter_0+0x1f8>)
  40b294:	4798      	blx	r3
  40b296:	e7b8      	b.n	40b20a <draw_quarter_0+0x2a>
            quarter_area.x1 = q->center_x;
  40b298:	f9b4 3000 	ldrsh.w	r3, [r4]
  40b29c:	f8ad 3000 	strh.w	r3, [sp]
            quarter_area.y2 = q->center_y + q->radius;
  40b2a0:	8865      	ldrh	r5, [r4, #2]
  40b2a2:	88a3      	ldrh	r3, [r4, #4]
  40b2a4:	442b      	add	r3, r5
  40b2a6:	f8ad 3006 	strh.w	r3, [sp, #6]
            quarter_area.y1 = q->center_y + ((_lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
  40b2aa:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
  40b2ae:	4e48      	ldr	r6, [pc, #288]	; (40b3d0 <draw_quarter_0+0x1f0>)
  40b2b0:	47b0      	blx	r6
  40b2b2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b2b6:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  40b2ba:	1a9b      	subs	r3, r3, r2
  40b2bc:	fb03 f000 	mul.w	r0, r3, r0
  40b2c0:	eb05 30e0 	add.w	r0, r5, r0, asr #15
  40b2c4:	f8ad 0002 	strh.w	r0, [sp, #2]
            quarter_area.x2 = q->center_x + ((_lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
  40b2c8:	8825      	ldrh	r5, [r4, #0]
  40b2ca:	88e0      	ldrh	r0, [r4, #6]
  40b2cc:	305a      	adds	r0, #90	; 0x5a
  40b2ce:	b200      	sxth	r0, r0
  40b2d0:	47b0      	blx	r6
  40b2d2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b2d6:	fb03 f000 	mul.w	r0, r3, r0
  40b2da:	eb05 35e0 	add.w	r5, r5, r0, asr #15
  40b2de:	f8ad 5004 	strh.w	r5, [sp, #4]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
  40b2e2:	69a2      	ldr	r2, [r4, #24]
  40b2e4:	4669      	mov	r1, sp
  40b2e6:	4668      	mov	r0, sp
  40b2e8:	4b3a      	ldr	r3, [pc, #232]	; (40b3d4 <draw_quarter_0+0x1f4>)
  40b2ea:	4798      	blx	r3
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
  40b2ec:	2800      	cmp	r0, #0
  40b2ee:	d089      	beq.n	40b204 <draw_quarter_0+0x24>
  40b2f0:	6922      	ldr	r2, [r4, #16]
  40b2f2:	4669      	mov	r1, sp
  40b2f4:	6960      	ldr	r0, [r4, #20]
  40b2f6:	4b38      	ldr	r3, [pc, #224]	; (40b3d8 <draw_quarter_0+0x1f8>)
  40b2f8:	4798      	blx	r3
  40b2fa:	e783      	b.n	40b204 <draw_quarter_0+0x24>
            quarter_area.x2 = q->center_x + q->radius;
  40b2fc:	8823      	ldrh	r3, [r4, #0]
  40b2fe:	88a2      	ldrh	r2, [r4, #4]
  40b300:	4413      	add	r3, r2
  40b302:	f8ad 3004 	strh.w	r3, [sp, #4]
            quarter_area.y1 = q->center_y;
  40b306:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  40b30a:	f8ad 3002 	strh.w	r3, [sp, #2]
            quarter_area.y2 = q->center_y + ((_lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
  40b30e:	8865      	ldrh	r5, [r4, #2]
  40b310:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
  40b314:	4e2e      	ldr	r6, [pc, #184]	; (40b3d0 <draw_quarter_0+0x1f0>)
  40b316:	47b0      	blx	r6
  40b318:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b31c:	fb03 f000 	mul.w	r0, r3, r0
  40b320:	eb05 35e0 	add.w	r5, r5, r0, asr #15
  40b324:	f8ad 5006 	strh.w	r5, [sp, #6]
            quarter_area.x1 = q->center_x + ((_lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
  40b328:	8825      	ldrh	r5, [r4, #0]
  40b32a:	8920      	ldrh	r0, [r4, #8]
  40b32c:	305a      	adds	r0, #90	; 0x5a
  40b32e:	b200      	sxth	r0, r0
  40b330:	47b0      	blx	r6
  40b332:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b336:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  40b33a:	1a9b      	subs	r3, r3, r2
  40b33c:	fb03 f300 	mul.w	r3, r3, r0
  40b340:	eb05 33e3 	add.w	r3, r5, r3, asr #15
  40b344:	a802      	add	r0, sp, #8
  40b346:	f820 3d08 	strh.w	r3, [r0, #-8]!
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
  40b34a:	69a2      	ldr	r2, [r4, #24]
  40b34c:	4601      	mov	r1, r0
  40b34e:	4b21      	ldr	r3, [pc, #132]	; (40b3d4 <draw_quarter_0+0x1f4>)
  40b350:	4798      	blx	r3
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
  40b352:	2800      	cmp	r0, #0
  40b354:	f43f af59 	beq.w	40b20a <draw_quarter_0+0x2a>
  40b358:	6922      	ldr	r2, [r4, #16]
  40b35a:	4669      	mov	r1, sp
  40b35c:	6960      	ldr	r0, [r4, #20]
  40b35e:	4b1e      	ldr	r3, [pc, #120]	; (40b3d8 <draw_quarter_0+0x1f8>)
  40b360:	4798      	blx	r3
  40b362:	e752      	b.n	40b20a <draw_quarter_0+0x2a>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
  40b364:	4293      	cmp	r3, r2
  40b366:	d00a      	beq.n	40b37e <draw_quarter_0+0x19e>
  40b368:	2b02      	cmp	r3, #2
  40b36a:	d02b      	beq.n	40b3c4 <draw_quarter_0+0x1e4>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
  40b36c:	2b03      	cmp	r3, #3
  40b36e:	d02c      	beq.n	40b3ca <draw_quarter_0+0x1ea>
            (q->start_quarter == 3 && q->end_quarter == 2) ||
  40b370:	2b03      	cmp	r3, #3
  40b372:	f47f af4a 	bne.w	40b20a <draw_quarter_0+0x2a>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
  40b376:	2a01      	cmp	r2, #1
  40b378:	f47f af47 	bne.w	40b20a <draw_quarter_0+0x2a>
  40b37c:	e003      	b.n	40b386 <draw_quarter_0+0x1a6>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
  40b37e:	8920      	ldrh	r0, [r4, #8]
  40b380:	88e1      	ldrh	r1, [r4, #6]
  40b382:	4288      	cmp	r0, r1
  40b384:	d2f0      	bcs.n	40b368 <draw_quarter_0+0x188>
        quarter_area.x1 = q->center_x;
  40b386:	f9b4 3000 	ldrsh.w	r3, [r4]
  40b38a:	f8ad 3000 	strh.w	r3, [sp]
        quarter_area.y1 = q->center_y;
  40b38e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  40b392:	f8ad 3002 	strh.w	r3, [sp, #2]
        quarter_area.x2 = q->center_x + q->radius;
  40b396:	8822      	ldrh	r2, [r4, #0]
  40b398:	88a1      	ldrh	r1, [r4, #4]
  40b39a:	440a      	add	r2, r1
  40b39c:	f8ad 2004 	strh.w	r2, [sp, #4]
        quarter_area.y2 = q->center_y + q->radius;
  40b3a0:	8863      	ldrh	r3, [r4, #2]
  40b3a2:	440b      	add	r3, r1
  40b3a4:	f8ad 3006 	strh.w	r3, [sp, #6]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
  40b3a8:	69a2      	ldr	r2, [r4, #24]
  40b3aa:	4669      	mov	r1, sp
  40b3ac:	4668      	mov	r0, sp
  40b3ae:	4b09      	ldr	r3, [pc, #36]	; (40b3d4 <draw_quarter_0+0x1f4>)
  40b3b0:	4798      	blx	r3
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
  40b3b2:	2800      	cmp	r0, #0
  40b3b4:	f43f af29 	beq.w	40b20a <draw_quarter_0+0x2a>
  40b3b8:	6922      	ldr	r2, [r4, #16]
  40b3ba:	4669      	mov	r1, sp
  40b3bc:	6960      	ldr	r0, [r4, #20]
  40b3be:	4b06      	ldr	r3, [pc, #24]	; (40b3d8 <draw_quarter_0+0x1f8>)
  40b3c0:	4798      	blx	r3
}
  40b3c2:	e722      	b.n	40b20a <draw_quarter_0+0x2a>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
  40b3c4:	2a01      	cmp	r2, #1
  40b3c6:	d1d1      	bne.n	40b36c <draw_quarter_0+0x18c>
  40b3c8:	e7dd      	b.n	40b386 <draw_quarter_0+0x1a6>
            (q->start_quarter == 3 && q->end_quarter == 2) ||
  40b3ca:	2a02      	cmp	r2, #2
  40b3cc:	d1d0      	bne.n	40b370 <draw_quarter_0+0x190>
  40b3ce:	e7da      	b.n	40b386 <draw_quarter_0+0x1a6>
  40b3d0:	0041737d 	.word	0x0041737d
  40b3d4:	004164e3 	.word	0x004164e3
  40b3d8:	004133d9 	.word	0x004133d9

0040b3dc <draw_quarter_1>:
{
  40b3dc:	b570      	push	{r4, r5, r6, lr}
  40b3de:	b082      	sub	sp, #8
  40b3e0:	4604      	mov	r4, r0
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
  40b3e2:	8943      	ldrh	r3, [r0, #10]
  40b3e4:	2b01      	cmp	r3, #1
  40b3e6:	d014      	beq.n	40b412 <draw_quarter_1+0x36>
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
  40b3e8:	2b01      	cmp	r3, #1
  40b3ea:	d05d      	beq.n	40b4a8 <draw_quarter_1+0xcc>
  40b3ec:	89a2      	ldrh	r2, [r4, #12]
  40b3ee:	2a01      	cmp	r2, #1
  40b3f0:	d05a      	beq.n	40b4a8 <draw_quarter_1+0xcc>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
  40b3f2:	4293      	cmp	r3, r2
  40b3f4:	f000 80c4 	beq.w	40b580 <draw_quarter_1+0x1a4>
  40b3f8:	b913      	cbnz	r3, 40b400 <draw_quarter_1+0x24>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
  40b3fa:	2a02      	cmp	r2, #2
  40b3fc:	f000 80c5 	beq.w	40b58a <draw_quarter_1+0x1ae>
  40b400:	b913      	cbnz	r3, 40b408 <draw_quarter_1+0x2c>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
  40b402:	2a03      	cmp	r2, #3
  40b404:	f000 80c1 	beq.w	40b58a <draw_quarter_1+0x1ae>
  40b408:	2b03      	cmp	r3, #3
  40b40a:	d152      	bne.n	40b4b2 <draw_quarter_1+0xd6>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
  40b40c:	2a02      	cmp	r2, #2
  40b40e:	d150      	bne.n	40b4b2 <draw_quarter_1+0xd6>
  40b410:	e0bb      	b.n	40b58a <draw_quarter_1+0x1ae>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
  40b412:	8982      	ldrh	r2, [r0, #12]
  40b414:	2a01      	cmp	r2, #1
  40b416:	d1e7      	bne.n	40b3e8 <draw_quarter_1+0xc>
  40b418:	88c0      	ldrh	r0, [r0, #6]
  40b41a:	8922      	ldrh	r2, [r4, #8]
  40b41c:	4290      	cmp	r0, r2
  40b41e:	d2e3      	bcs.n	40b3e8 <draw_quarter_1+0xc>
        quarter_area.y2 = q->center_y + ((_lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
  40b420:	8866      	ldrh	r6, [r4, #2]
  40b422:	b200      	sxth	r0, r0
  40b424:	4d68      	ldr	r5, [pc, #416]	; (40b5c8 <draw_quarter_1+0x1ec>)
  40b426:	47a8      	blx	r5
  40b428:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b42c:	fb03 f000 	mul.w	r0, r3, r0
  40b430:	eb06 36e0 	add.w	r6, r6, r0, asr #15
  40b434:	f8ad 6006 	strh.w	r6, [sp, #6]
        quarter_area.x2 = q->center_x + ((_lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
  40b438:	8826      	ldrh	r6, [r4, #0]
  40b43a:	88e0      	ldrh	r0, [r4, #6]
  40b43c:	305a      	adds	r0, #90	; 0x5a
  40b43e:	b200      	sxth	r0, r0
  40b440:	47a8      	blx	r5
  40b442:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b446:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  40b44a:	1a9b      	subs	r3, r3, r2
  40b44c:	fb03 f000 	mul.w	r0, r3, r0
  40b450:	eb06 30e0 	add.w	r0, r6, r0, asr #15
  40b454:	f8ad 0004 	strh.w	r0, [sp, #4]
        quarter_area.y1 = q->center_y + ((_lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
  40b458:	8866      	ldrh	r6, [r4, #2]
  40b45a:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
  40b45e:	47a8      	blx	r5
  40b460:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b464:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  40b468:	1a9b      	subs	r3, r3, r2
  40b46a:	fb03 f000 	mul.w	r0, r3, r0
  40b46e:	eb06 30e0 	add.w	r0, r6, r0, asr #15
  40b472:	f8ad 0002 	strh.w	r0, [sp, #2]
        quarter_area.x1 = q->center_x + ((_lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
  40b476:	8826      	ldrh	r6, [r4, #0]
  40b478:	8920      	ldrh	r0, [r4, #8]
  40b47a:	305a      	adds	r0, #90	; 0x5a
  40b47c:	b200      	sxth	r0, r0
  40b47e:	47a8      	blx	r5
  40b480:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b484:	fb03 f000 	mul.w	r0, r3, r0
  40b488:	eb06 36e0 	add.w	r6, r6, r0, asr #15
  40b48c:	a802      	add	r0, sp, #8
  40b48e:	f820 6d08 	strh.w	r6, [r0, #-8]!
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
  40b492:	69a2      	ldr	r2, [r4, #24]
  40b494:	4601      	mov	r1, r0
  40b496:	4b4d      	ldr	r3, [pc, #308]	; (40b5cc <draw_quarter_1+0x1f0>)
  40b498:	4798      	blx	r3
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
  40b49a:	b150      	cbz	r0, 40b4b2 <draw_quarter_1+0xd6>
  40b49c:	6922      	ldr	r2, [r4, #16]
  40b49e:	4669      	mov	r1, sp
  40b4a0:	6960      	ldr	r0, [r4, #20]
  40b4a2:	4b4b      	ldr	r3, [pc, #300]	; (40b5d0 <draw_quarter_1+0x1f4>)
  40b4a4:	4798      	blx	r3
  40b4a6:	e004      	b.n	40b4b2 <draw_quarter_1+0xd6>
        if(q->start_quarter == 1) {
  40b4a8:	2b01      	cmp	r3, #1
  40b4aa:	d004      	beq.n	40b4b6 <draw_quarter_1+0xda>
        if(q->end_quarter == 1) {
  40b4ac:	89a3      	ldrh	r3, [r4, #12]
  40b4ae:	2b01      	cmp	r3, #1
  40b4b0:	d034      	beq.n	40b51c <draw_quarter_1+0x140>
}
  40b4b2:	b002      	add	sp, #8
  40b4b4:	bd70      	pop	{r4, r5, r6, pc}
            quarter_area.x1 = q->center_x - q->radius;
  40b4b6:	8823      	ldrh	r3, [r4, #0]
  40b4b8:	88a2      	ldrh	r2, [r4, #4]
  40b4ba:	1a9b      	subs	r3, r3, r2
  40b4bc:	f8ad 3000 	strh.w	r3, [sp]
            quarter_area.y1 = q->center_y;
  40b4c0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  40b4c4:	f8ad 3002 	strh.w	r3, [sp, #2]
            quarter_area.y2 = q->center_y + ((_lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
  40b4c8:	8865      	ldrh	r5, [r4, #2]
  40b4ca:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
  40b4ce:	4e3e      	ldr	r6, [pc, #248]	; (40b5c8 <draw_quarter_1+0x1ec>)
  40b4d0:	47b0      	blx	r6
  40b4d2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b4d6:	fb03 f000 	mul.w	r0, r3, r0
  40b4da:	eb05 35e0 	add.w	r5, r5, r0, asr #15
  40b4de:	f8ad 5006 	strh.w	r5, [sp, #6]
            quarter_area.x2 = q->center_x + ((_lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
  40b4e2:	8825      	ldrh	r5, [r4, #0]
  40b4e4:	88e0      	ldrh	r0, [r4, #6]
  40b4e6:	305a      	adds	r0, #90	; 0x5a
  40b4e8:	b200      	sxth	r0, r0
  40b4ea:	47b0      	blx	r6
  40b4ec:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b4f0:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  40b4f4:	1a9b      	subs	r3, r3, r2
  40b4f6:	fb03 f000 	mul.w	r0, r3, r0
  40b4fa:	eb05 30e0 	add.w	r0, r5, r0, asr #15
  40b4fe:	f8ad 0004 	strh.w	r0, [sp, #4]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
  40b502:	69a2      	ldr	r2, [r4, #24]
  40b504:	4669      	mov	r1, sp
  40b506:	4668      	mov	r0, sp
  40b508:	4b30      	ldr	r3, [pc, #192]	; (40b5cc <draw_quarter_1+0x1f0>)
  40b50a:	4798      	blx	r3
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
  40b50c:	2800      	cmp	r0, #0
  40b50e:	d0cd      	beq.n	40b4ac <draw_quarter_1+0xd0>
  40b510:	6922      	ldr	r2, [r4, #16]
  40b512:	4669      	mov	r1, sp
  40b514:	6960      	ldr	r0, [r4, #20]
  40b516:	4b2e      	ldr	r3, [pc, #184]	; (40b5d0 <draw_quarter_1+0x1f4>)
  40b518:	4798      	blx	r3
  40b51a:	e7c7      	b.n	40b4ac <draw_quarter_1+0xd0>
            quarter_area.x2 = q->center_x - 1;
  40b51c:	8823      	ldrh	r3, [r4, #0]
  40b51e:	3b01      	subs	r3, #1
  40b520:	f8ad 3004 	strh.w	r3, [sp, #4]
            quarter_area.y2 = q->center_y + q->radius;
  40b524:	8865      	ldrh	r5, [r4, #2]
  40b526:	88a3      	ldrh	r3, [r4, #4]
  40b528:	442b      	add	r3, r5
  40b52a:	f8ad 3006 	strh.w	r3, [sp, #6]
            quarter_area.y1 = q->center_y + ((_lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
  40b52e:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
  40b532:	4e25      	ldr	r6, [pc, #148]	; (40b5c8 <draw_quarter_1+0x1ec>)
  40b534:	47b0      	blx	r6
  40b536:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b53a:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  40b53e:	1a9b      	subs	r3, r3, r2
  40b540:	fb03 f000 	mul.w	r0, r3, r0
  40b544:	eb05 30e0 	add.w	r0, r5, r0, asr #15
  40b548:	f8ad 0002 	strh.w	r0, [sp, #2]
            quarter_area.x1 = q->center_x + ((_lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
  40b54c:	8825      	ldrh	r5, [r4, #0]
  40b54e:	8920      	ldrh	r0, [r4, #8]
  40b550:	305a      	adds	r0, #90	; 0x5a
  40b552:	b200      	sxth	r0, r0
  40b554:	47b0      	blx	r6
  40b556:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b55a:	fb03 f000 	mul.w	r0, r3, r0
  40b55e:	eb05 35e0 	add.w	r5, r5, r0, asr #15
  40b562:	a802      	add	r0, sp, #8
  40b564:	f820 5d08 	strh.w	r5, [r0, #-8]!
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
  40b568:	69a2      	ldr	r2, [r4, #24]
  40b56a:	4601      	mov	r1, r0
  40b56c:	4b17      	ldr	r3, [pc, #92]	; (40b5cc <draw_quarter_1+0x1f0>)
  40b56e:	4798      	blx	r3
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
  40b570:	2800      	cmp	r0, #0
  40b572:	d09e      	beq.n	40b4b2 <draw_quarter_1+0xd6>
  40b574:	6922      	ldr	r2, [r4, #16]
  40b576:	4669      	mov	r1, sp
  40b578:	6960      	ldr	r0, [r4, #20]
  40b57a:	4b15      	ldr	r3, [pc, #84]	; (40b5d0 <draw_quarter_1+0x1f4>)
  40b57c:	4798      	blx	r3
  40b57e:	e798      	b.n	40b4b2 <draw_quarter_1+0xd6>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
  40b580:	8920      	ldrh	r0, [r4, #8]
  40b582:	88e1      	ldrh	r1, [r4, #6]
  40b584:	4288      	cmp	r0, r1
  40b586:	f4bf af37 	bcs.w	40b3f8 <draw_quarter_1+0x1c>
        quarter_area.x1 = q->center_x - q->radius;
  40b58a:	8823      	ldrh	r3, [r4, #0]
  40b58c:	88a2      	ldrh	r2, [r4, #4]
  40b58e:	1a99      	subs	r1, r3, r2
  40b590:	f8ad 1000 	strh.w	r1, [sp]
        quarter_area.y1 = q->center_y;
  40b594:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
  40b598:	f8ad 1002 	strh.w	r1, [sp, #2]
        quarter_area.x2 = q->center_x - 1;
  40b59c:	3b01      	subs	r3, #1
  40b59e:	f8ad 3004 	strh.w	r3, [sp, #4]
        quarter_area.y2 = q->center_y + q->radius;
  40b5a2:	8863      	ldrh	r3, [r4, #2]
  40b5a4:	4413      	add	r3, r2
  40b5a6:	f8ad 3006 	strh.w	r3, [sp, #6]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
  40b5aa:	69a2      	ldr	r2, [r4, #24]
  40b5ac:	4669      	mov	r1, sp
  40b5ae:	4668      	mov	r0, sp
  40b5b0:	4b06      	ldr	r3, [pc, #24]	; (40b5cc <draw_quarter_1+0x1f0>)
  40b5b2:	4798      	blx	r3
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
  40b5b4:	2800      	cmp	r0, #0
  40b5b6:	f43f af7c 	beq.w	40b4b2 <draw_quarter_1+0xd6>
  40b5ba:	6922      	ldr	r2, [r4, #16]
  40b5bc:	4669      	mov	r1, sp
  40b5be:	6960      	ldr	r0, [r4, #20]
  40b5c0:	4b03      	ldr	r3, [pc, #12]	; (40b5d0 <draw_quarter_1+0x1f4>)
  40b5c2:	4798      	blx	r3
}
  40b5c4:	e775      	b.n	40b4b2 <draw_quarter_1+0xd6>
  40b5c6:	bf00      	nop
  40b5c8:	0041737d 	.word	0x0041737d
  40b5cc:	004164e3 	.word	0x004164e3
  40b5d0:	004133d9 	.word	0x004133d9

0040b5d4 <draw_quarter_2>:
{
  40b5d4:	b570      	push	{r4, r5, r6, lr}
  40b5d6:	b082      	sub	sp, #8
  40b5d8:	4604      	mov	r4, r0
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
  40b5da:	8943      	ldrh	r3, [r0, #10]
  40b5dc:	2b02      	cmp	r3, #2
  40b5de:	d02d      	beq.n	40b63c <draw_quarter_2+0x68>
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
  40b5e0:	2b02      	cmp	r3, #2
  40b5e2:	d076      	beq.n	40b6d2 <draw_quarter_2+0xfe>
  40b5e4:	89a2      	ldrh	r2, [r4, #12]
  40b5e6:	2a02      	cmp	r2, #2
  40b5e8:	d073      	beq.n	40b6d2 <draw_quarter_2+0xfe>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
  40b5ea:	4293      	cmp	r3, r2
  40b5ec:	f000 80dc 	beq.w	40b7a8 <draw_quarter_2+0x1d4>
  40b5f0:	b90b      	cbnz	r3, 40b5f6 <draw_quarter_2+0x22>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
  40b5f2:	2a03      	cmp	r2, #3
  40b5f4:	d006      	beq.n	40b604 <draw_quarter_2+0x30>
  40b5f6:	2b01      	cmp	r3, #1
  40b5f8:	f000 80dc 	beq.w	40b7b4 <draw_quarter_2+0x1e0>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
  40b5fc:	2b01      	cmp	r3, #1
  40b5fe:	d16d      	bne.n	40b6dc <draw_quarter_2+0x108>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
  40b600:	2a00      	cmp	r2, #0
  40b602:	d16b      	bne.n	40b6dc <draw_quarter_2+0x108>
        quarter_area.x1 = q->center_x - q->radius;
  40b604:	8822      	ldrh	r2, [r4, #0]
  40b606:	88a1      	ldrh	r1, [r4, #4]
  40b608:	1a53      	subs	r3, r2, r1
  40b60a:	f8ad 3000 	strh.w	r3, [sp]
        quarter_area.y1 = q->center_y - q->radius;
  40b60e:	8863      	ldrh	r3, [r4, #2]
  40b610:	1a59      	subs	r1, r3, r1
  40b612:	f8ad 1002 	strh.w	r1, [sp, #2]
        quarter_area.x2 = q->center_x - 1;
  40b616:	3a01      	subs	r2, #1
  40b618:	f8ad 2004 	strh.w	r2, [sp, #4]
        quarter_area.y2 = q->center_y - 1;
  40b61c:	3b01      	subs	r3, #1
  40b61e:	f8ad 3006 	strh.w	r3, [sp, #6]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
  40b622:	69a2      	ldr	r2, [r4, #24]
  40b624:	4669      	mov	r1, sp
  40b626:	4668      	mov	r0, sp
  40b628:	4b64      	ldr	r3, [pc, #400]	; (40b7bc <draw_quarter_2+0x1e8>)
  40b62a:	4798      	blx	r3
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
  40b62c:	2800      	cmp	r0, #0
  40b62e:	d055      	beq.n	40b6dc <draw_quarter_2+0x108>
  40b630:	6922      	ldr	r2, [r4, #16]
  40b632:	4669      	mov	r1, sp
  40b634:	6960      	ldr	r0, [r4, #20]
  40b636:	4b62      	ldr	r3, [pc, #392]	; (40b7c0 <draw_quarter_2+0x1ec>)
  40b638:	4798      	blx	r3
}
  40b63a:	e04f      	b.n	40b6dc <draw_quarter_2+0x108>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
  40b63c:	8982      	ldrh	r2, [r0, #12]
  40b63e:	2a02      	cmp	r2, #2
  40b640:	d1ce      	bne.n	40b5e0 <draw_quarter_2+0xc>
  40b642:	88c0      	ldrh	r0, [r0, #6]
  40b644:	8922      	ldrh	r2, [r4, #8]
  40b646:	4290      	cmp	r0, r2
  40b648:	d2ca      	bcs.n	40b5e0 <draw_quarter_2+0xc>
        quarter_area.x1 = q->center_x + ((_lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
  40b64a:	8826      	ldrh	r6, [r4, #0]
  40b64c:	305a      	adds	r0, #90	; 0x5a
  40b64e:	b200      	sxth	r0, r0
  40b650:	4d5c      	ldr	r5, [pc, #368]	; (40b7c4 <draw_quarter_2+0x1f0>)
  40b652:	47a8      	blx	r5
  40b654:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b658:	fb03 f000 	mul.w	r0, r3, r0
  40b65c:	eb06 36e0 	add.w	r6, r6, r0, asr #15
  40b660:	f8ad 6000 	strh.w	r6, [sp]
        quarter_area.y2 = q->center_y + ((_lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
  40b664:	8866      	ldrh	r6, [r4, #2]
  40b666:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
  40b66a:	47a8      	blx	r5
  40b66c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b670:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  40b674:	1a9b      	subs	r3, r3, r2
  40b676:	fb03 f000 	mul.w	r0, r3, r0
  40b67a:	eb06 30e0 	add.w	r0, r6, r0, asr #15
  40b67e:	f8ad 0006 	strh.w	r0, [sp, #6]
        quarter_area.y1 = q->center_y + ((_lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
  40b682:	8866      	ldrh	r6, [r4, #2]
  40b684:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
  40b688:	47a8      	blx	r5
  40b68a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b68e:	fb03 f000 	mul.w	r0, r3, r0
  40b692:	eb06 36e0 	add.w	r6, r6, r0, asr #15
  40b696:	f8ad 6002 	strh.w	r6, [sp, #2]
        quarter_area.x2 = q->center_x + ((_lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
  40b69a:	8826      	ldrh	r6, [r4, #0]
  40b69c:	8920      	ldrh	r0, [r4, #8]
  40b69e:	305a      	adds	r0, #90	; 0x5a
  40b6a0:	b200      	sxth	r0, r0
  40b6a2:	47a8      	blx	r5
  40b6a4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b6a8:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  40b6ac:	1a9b      	subs	r3, r3, r2
  40b6ae:	fb03 f000 	mul.w	r0, r3, r0
  40b6b2:	eb06 30e0 	add.w	r0, r6, r0, asr #15
  40b6b6:	f8ad 0004 	strh.w	r0, [sp, #4]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
  40b6ba:	69a2      	ldr	r2, [r4, #24]
  40b6bc:	4669      	mov	r1, sp
  40b6be:	4668      	mov	r0, sp
  40b6c0:	4b3e      	ldr	r3, [pc, #248]	; (40b7bc <draw_quarter_2+0x1e8>)
  40b6c2:	4798      	blx	r3
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
  40b6c4:	b150      	cbz	r0, 40b6dc <draw_quarter_2+0x108>
  40b6c6:	6922      	ldr	r2, [r4, #16]
  40b6c8:	4669      	mov	r1, sp
  40b6ca:	6960      	ldr	r0, [r4, #20]
  40b6cc:	4b3c      	ldr	r3, [pc, #240]	; (40b7c0 <draw_quarter_2+0x1ec>)
  40b6ce:	4798      	blx	r3
  40b6d0:	e004      	b.n	40b6dc <draw_quarter_2+0x108>
        if(q->start_quarter == 2) {
  40b6d2:	2b02      	cmp	r3, #2
  40b6d4:	d004      	beq.n	40b6e0 <draw_quarter_2+0x10c>
        if(q->end_quarter == 2) {
  40b6d6:	89a3      	ldrh	r3, [r4, #12]
  40b6d8:	2b02      	cmp	r3, #2
  40b6da:	d033      	beq.n	40b744 <draw_quarter_2+0x170>
}
  40b6dc:	b002      	add	sp, #8
  40b6de:	bd70      	pop	{r4, r5, r6, pc}
            quarter_area.x2 = q->center_x - 1;
  40b6e0:	8825      	ldrh	r5, [r4, #0]
  40b6e2:	1e6b      	subs	r3, r5, #1
  40b6e4:	f8ad 3004 	strh.w	r3, [sp, #4]
            quarter_area.y1 = q->center_y - q->radius;
  40b6e8:	8863      	ldrh	r3, [r4, #2]
  40b6ea:	88a2      	ldrh	r2, [r4, #4]
  40b6ec:	1a9b      	subs	r3, r3, r2
  40b6ee:	f8ad 3002 	strh.w	r3, [sp, #2]
            quarter_area.x1 = q->center_x + ((_lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
  40b6f2:	88e0      	ldrh	r0, [r4, #6]
  40b6f4:	305a      	adds	r0, #90	; 0x5a
  40b6f6:	b200      	sxth	r0, r0
  40b6f8:	4e32      	ldr	r6, [pc, #200]	; (40b7c4 <draw_quarter_2+0x1f0>)
  40b6fa:	47b0      	blx	r6
  40b6fc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b700:	fb03 f000 	mul.w	r0, r3, r0
  40b704:	eb05 35e0 	add.w	r5, r5, r0, asr #15
  40b708:	f8ad 5000 	strh.w	r5, [sp]
            quarter_area.y2 = q->center_y + ((_lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
  40b70c:	8865      	ldrh	r5, [r4, #2]
  40b70e:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
  40b712:	47b0      	blx	r6
  40b714:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b718:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  40b71c:	1a9b      	subs	r3, r3, r2
  40b71e:	fb03 f000 	mul.w	r0, r3, r0
  40b722:	eb05 30e0 	add.w	r0, r5, r0, asr #15
  40b726:	f8ad 0006 	strh.w	r0, [sp, #6]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
  40b72a:	69a2      	ldr	r2, [r4, #24]
  40b72c:	4669      	mov	r1, sp
  40b72e:	4668      	mov	r0, sp
  40b730:	4b22      	ldr	r3, [pc, #136]	; (40b7bc <draw_quarter_2+0x1e8>)
  40b732:	4798      	blx	r3
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
  40b734:	2800      	cmp	r0, #0
  40b736:	d0ce      	beq.n	40b6d6 <draw_quarter_2+0x102>
  40b738:	6922      	ldr	r2, [r4, #16]
  40b73a:	4669      	mov	r1, sp
  40b73c:	6960      	ldr	r0, [r4, #20]
  40b73e:	4b20      	ldr	r3, [pc, #128]	; (40b7c0 <draw_quarter_2+0x1ec>)
  40b740:	4798      	blx	r3
  40b742:	e7c8      	b.n	40b6d6 <draw_quarter_2+0x102>
            quarter_area.x1 = q->center_x - q->radius;
  40b744:	8825      	ldrh	r5, [r4, #0]
  40b746:	88a3      	ldrh	r3, [r4, #4]
  40b748:	1aeb      	subs	r3, r5, r3
  40b74a:	f8ad 3000 	strh.w	r3, [sp]
            quarter_area.y2 = q->center_y - 1;
  40b74e:	8863      	ldrh	r3, [r4, #2]
  40b750:	3b01      	subs	r3, #1
  40b752:	f8ad 3006 	strh.w	r3, [sp, #6]
            quarter_area.x2 = q->center_x + ((_lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
  40b756:	8920      	ldrh	r0, [r4, #8]
  40b758:	305a      	adds	r0, #90	; 0x5a
  40b75a:	b200      	sxth	r0, r0
  40b75c:	4e19      	ldr	r6, [pc, #100]	; (40b7c4 <draw_quarter_2+0x1f0>)
  40b75e:	47b0      	blx	r6
  40b760:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b764:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  40b768:	1a9b      	subs	r3, r3, r2
  40b76a:	fb03 f000 	mul.w	r0, r3, r0
  40b76e:	eb05 30e0 	add.w	r0, r5, r0, asr #15
  40b772:	f8ad 0004 	strh.w	r0, [sp, #4]
            quarter_area.y1 = q->center_y + ((_lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
  40b776:	8865      	ldrh	r5, [r4, #2]
  40b778:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
  40b77c:	47b0      	blx	r6
  40b77e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b782:	fb03 f000 	mul.w	r0, r3, r0
  40b786:	eb05 35e0 	add.w	r5, r5, r0, asr #15
  40b78a:	f8ad 5002 	strh.w	r5, [sp, #2]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
  40b78e:	69a2      	ldr	r2, [r4, #24]
  40b790:	4669      	mov	r1, sp
  40b792:	4668      	mov	r0, sp
  40b794:	4b09      	ldr	r3, [pc, #36]	; (40b7bc <draw_quarter_2+0x1e8>)
  40b796:	4798      	blx	r3
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
  40b798:	2800      	cmp	r0, #0
  40b79a:	d09f      	beq.n	40b6dc <draw_quarter_2+0x108>
  40b79c:	6922      	ldr	r2, [r4, #16]
  40b79e:	4669      	mov	r1, sp
  40b7a0:	6960      	ldr	r0, [r4, #20]
  40b7a2:	4b07      	ldr	r3, [pc, #28]	; (40b7c0 <draw_quarter_2+0x1ec>)
  40b7a4:	4798      	blx	r3
  40b7a6:	e799      	b.n	40b6dc <draw_quarter_2+0x108>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
  40b7a8:	8920      	ldrh	r0, [r4, #8]
  40b7aa:	88e1      	ldrh	r1, [r4, #6]
  40b7ac:	4288      	cmp	r0, r1
  40b7ae:	f4ff af29 	bcc.w	40b604 <draw_quarter_2+0x30>
  40b7b2:	e71d      	b.n	40b5f0 <draw_quarter_2+0x1c>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
  40b7b4:	2a03      	cmp	r2, #3
  40b7b6:	f47f af21 	bne.w	40b5fc <draw_quarter_2+0x28>
  40b7ba:	e723      	b.n	40b604 <draw_quarter_2+0x30>
  40b7bc:	004164e3 	.word	0x004164e3
  40b7c0:	004133d9 	.word	0x004133d9
  40b7c4:	0041737d 	.word	0x0041737d

0040b7c8 <draw_quarter_3>:
{
  40b7c8:	b570      	push	{r4, r5, r6, lr}
  40b7ca:	b082      	sub	sp, #8
  40b7cc:	4604      	mov	r4, r0
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
  40b7ce:	8943      	ldrh	r3, [r0, #10]
  40b7d0:	2b03      	cmp	r3, #3
  40b7d2:	d012      	beq.n	40b7fa <draw_quarter_3+0x32>
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
  40b7d4:	2b03      	cmp	r3, #3
  40b7d6:	d05b      	beq.n	40b890 <draw_quarter_3+0xc8>
  40b7d8:	89a2      	ldrh	r2, [r4, #12]
  40b7da:	2a03      	cmp	r2, #3
  40b7dc:	d058      	beq.n	40b890 <draw_quarter_3+0xc8>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
  40b7de:	4293      	cmp	r3, r2
  40b7e0:	f000 80c2 	beq.w	40b968 <draw_quarter_3+0x1a0>
  40b7e4:	2b02      	cmp	r3, #2
  40b7e6:	f000 80e2 	beq.w	40b9ae <draw_quarter_3+0x1e6>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
  40b7ea:	2b01      	cmp	r3, #1
  40b7ec:	f000 80e2 	beq.w	40b9b4 <draw_quarter_3+0x1ec>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
  40b7f0:	2b02      	cmp	r3, #2
  40b7f2:	d152      	bne.n	40b89a <draw_quarter_3+0xd2>
            (q->start_quarter == 2 && q->end_quarter == 1)) {
  40b7f4:	2a01      	cmp	r2, #1
  40b7f6:	d150      	bne.n	40b89a <draw_quarter_3+0xd2>
  40b7f8:	e0bb      	b.n	40b972 <draw_quarter_3+0x1aa>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
  40b7fa:	8982      	ldrh	r2, [r0, #12]
  40b7fc:	2a03      	cmp	r2, #3
  40b7fe:	d1e9      	bne.n	40b7d4 <draw_quarter_3+0xc>
  40b800:	88c0      	ldrh	r0, [r0, #6]
  40b802:	8922      	ldrh	r2, [r4, #8]
  40b804:	4290      	cmp	r0, r2
  40b806:	d2e5      	bcs.n	40b7d4 <draw_quarter_3+0xc>
        quarter_area.x1 = q->center_x + ((_lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
  40b808:	8826      	ldrh	r6, [r4, #0]
  40b80a:	305a      	adds	r0, #90	; 0x5a
  40b80c:	b200      	sxth	r0, r0
  40b80e:	4d6b      	ldr	r5, [pc, #428]	; (40b9bc <draw_quarter_3+0x1f4>)
  40b810:	47a8      	blx	r5
  40b812:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b816:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  40b81a:	1a9b      	subs	r3, r3, r2
  40b81c:	fb03 f000 	mul.w	r0, r3, r0
  40b820:	eb06 30e0 	add.w	r0, r6, r0, asr #15
  40b824:	f8ad 0000 	strh.w	r0, [sp]
        quarter_area.y1 = q->center_y + ((_lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
  40b828:	8866      	ldrh	r6, [r4, #2]
  40b82a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
  40b82e:	47a8      	blx	r5
  40b830:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b834:	fb03 f000 	mul.w	r0, r3, r0
  40b838:	eb06 36e0 	add.w	r6, r6, r0, asr #15
  40b83c:	f8ad 6002 	strh.w	r6, [sp, #2]
        quarter_area.x2 = q->center_x + ((_lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
  40b840:	8826      	ldrh	r6, [r4, #0]
  40b842:	8920      	ldrh	r0, [r4, #8]
  40b844:	305a      	adds	r0, #90	; 0x5a
  40b846:	b200      	sxth	r0, r0
  40b848:	47a8      	blx	r5
  40b84a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b84e:	fb03 f000 	mul.w	r0, r3, r0
  40b852:	eb06 36e0 	add.w	r6, r6, r0, asr #15
  40b856:	f8ad 6004 	strh.w	r6, [sp, #4]
        quarter_area.y2 = q->center_y + ((_lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
  40b85a:	8866      	ldrh	r6, [r4, #2]
  40b85c:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
  40b860:	47a8      	blx	r5
  40b862:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b866:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  40b86a:	1a9b      	subs	r3, r3, r2
  40b86c:	fb03 f000 	mul.w	r0, r3, r0
  40b870:	eb06 30e0 	add.w	r0, r6, r0, asr #15
  40b874:	f8ad 0006 	strh.w	r0, [sp, #6]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
  40b878:	69a2      	ldr	r2, [r4, #24]
  40b87a:	4669      	mov	r1, sp
  40b87c:	4668      	mov	r0, sp
  40b87e:	4b50      	ldr	r3, [pc, #320]	; (40b9c0 <draw_quarter_3+0x1f8>)
  40b880:	4798      	blx	r3
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
  40b882:	b150      	cbz	r0, 40b89a <draw_quarter_3+0xd2>
  40b884:	6922      	ldr	r2, [r4, #16]
  40b886:	4669      	mov	r1, sp
  40b888:	6960      	ldr	r0, [r4, #20]
  40b88a:	4b4e      	ldr	r3, [pc, #312]	; (40b9c4 <draw_quarter_3+0x1fc>)
  40b88c:	4798      	blx	r3
  40b88e:	e004      	b.n	40b89a <draw_quarter_3+0xd2>
        if(q->start_quarter == 3) {
  40b890:	2b03      	cmp	r3, #3
  40b892:	d004      	beq.n	40b89e <draw_quarter_3+0xd6>
        if(q->end_quarter == 3) {
  40b894:	89a3      	ldrh	r3, [r4, #12]
  40b896:	2b03      	cmp	r3, #3
  40b898:	d033      	beq.n	40b902 <draw_quarter_3+0x13a>
}
  40b89a:	b002      	add	sp, #8
  40b89c:	bd70      	pop	{r4, r5, r6, pc}
            quarter_area.x2 = q->center_x + q->radius;
  40b89e:	8825      	ldrh	r5, [r4, #0]
  40b8a0:	88a3      	ldrh	r3, [r4, #4]
  40b8a2:	442b      	add	r3, r5
  40b8a4:	f8ad 3004 	strh.w	r3, [sp, #4]
            quarter_area.y2 = q->center_y - 1;
  40b8a8:	8863      	ldrh	r3, [r4, #2]
  40b8aa:	3b01      	subs	r3, #1
  40b8ac:	f8ad 3006 	strh.w	r3, [sp, #6]
            quarter_area.x1 = q->center_x + ((_lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
  40b8b0:	88e0      	ldrh	r0, [r4, #6]
  40b8b2:	305a      	adds	r0, #90	; 0x5a
  40b8b4:	b200      	sxth	r0, r0
  40b8b6:	4e41      	ldr	r6, [pc, #260]	; (40b9bc <draw_quarter_3+0x1f4>)
  40b8b8:	47b0      	blx	r6
  40b8ba:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b8be:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  40b8c2:	1a9b      	subs	r3, r3, r2
  40b8c4:	fb03 f000 	mul.w	r0, r3, r0
  40b8c8:	eb05 30e0 	add.w	r0, r5, r0, asr #15
  40b8cc:	f8ad 0000 	strh.w	r0, [sp]
            quarter_area.y1 = q->center_y + ((_lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
  40b8d0:	8865      	ldrh	r5, [r4, #2]
  40b8d2:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
  40b8d6:	47b0      	blx	r6
  40b8d8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b8dc:	fb03 f000 	mul.w	r0, r3, r0
  40b8e0:	eb05 35e0 	add.w	r5, r5, r0, asr #15
  40b8e4:	f8ad 5002 	strh.w	r5, [sp, #2]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
  40b8e8:	69a2      	ldr	r2, [r4, #24]
  40b8ea:	4669      	mov	r1, sp
  40b8ec:	4668      	mov	r0, sp
  40b8ee:	4b34      	ldr	r3, [pc, #208]	; (40b9c0 <draw_quarter_3+0x1f8>)
  40b8f0:	4798      	blx	r3
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
  40b8f2:	2800      	cmp	r0, #0
  40b8f4:	d0ce      	beq.n	40b894 <draw_quarter_3+0xcc>
  40b8f6:	6922      	ldr	r2, [r4, #16]
  40b8f8:	4669      	mov	r1, sp
  40b8fa:	6960      	ldr	r0, [r4, #20]
  40b8fc:	4b31      	ldr	r3, [pc, #196]	; (40b9c4 <draw_quarter_3+0x1fc>)
  40b8fe:	4798      	blx	r3
  40b900:	e7c8      	b.n	40b894 <draw_quarter_3+0xcc>
            quarter_area.x1 = q->center_x;
  40b902:	f9b4 3000 	ldrsh.w	r3, [r4]
  40b906:	f8ad 3000 	strh.w	r3, [sp]
            quarter_area.y1 = q->center_y - q->radius;
  40b90a:	8863      	ldrh	r3, [r4, #2]
  40b90c:	88a2      	ldrh	r2, [r4, #4]
  40b90e:	1a9b      	subs	r3, r3, r2
  40b910:	f8ad 3002 	strh.w	r3, [sp, #2]
            quarter_area.x2 = q->center_x + ((_lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
  40b914:	8825      	ldrh	r5, [r4, #0]
  40b916:	8920      	ldrh	r0, [r4, #8]
  40b918:	305a      	adds	r0, #90	; 0x5a
  40b91a:	b200      	sxth	r0, r0
  40b91c:	4e27      	ldr	r6, [pc, #156]	; (40b9bc <draw_quarter_3+0x1f4>)
  40b91e:	47b0      	blx	r6
  40b920:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b924:	fb03 f000 	mul.w	r0, r3, r0
  40b928:	eb05 35e0 	add.w	r5, r5, r0, asr #15
  40b92c:	f8ad 5004 	strh.w	r5, [sp, #4]
            quarter_area.y2 = q->center_y + ((_lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
  40b930:	8865      	ldrh	r5, [r4, #2]
  40b932:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
  40b936:	47b0      	blx	r6
  40b938:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40b93c:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  40b940:	1a9b      	subs	r3, r3, r2
  40b942:	fb03 f000 	mul.w	r0, r3, r0
  40b946:	eb05 30e0 	add.w	r0, r5, r0, asr #15
  40b94a:	f8ad 0006 	strh.w	r0, [sp, #6]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
  40b94e:	69a2      	ldr	r2, [r4, #24]
  40b950:	4669      	mov	r1, sp
  40b952:	4668      	mov	r0, sp
  40b954:	4b1a      	ldr	r3, [pc, #104]	; (40b9c0 <draw_quarter_3+0x1f8>)
  40b956:	4798      	blx	r3
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
  40b958:	2800      	cmp	r0, #0
  40b95a:	d09e      	beq.n	40b89a <draw_quarter_3+0xd2>
  40b95c:	6922      	ldr	r2, [r4, #16]
  40b95e:	4669      	mov	r1, sp
  40b960:	6960      	ldr	r0, [r4, #20]
  40b962:	4b18      	ldr	r3, [pc, #96]	; (40b9c4 <draw_quarter_3+0x1fc>)
  40b964:	4798      	blx	r3
  40b966:	e798      	b.n	40b89a <draw_quarter_3+0xd2>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
  40b968:	8920      	ldrh	r0, [r4, #8]
  40b96a:	88e1      	ldrh	r1, [r4, #6]
  40b96c:	4288      	cmp	r0, r1
  40b96e:	f4bf af39 	bcs.w	40b7e4 <draw_quarter_3+0x1c>
        quarter_area.x1 = q->center_x;
  40b972:	f9b4 3000 	ldrsh.w	r3, [r4]
  40b976:	f8ad 3000 	strh.w	r3, [sp]
        quarter_area.y1 = q->center_y - q->radius;
  40b97a:	8863      	ldrh	r3, [r4, #2]
  40b97c:	88a2      	ldrh	r2, [r4, #4]
  40b97e:	1a99      	subs	r1, r3, r2
  40b980:	f8ad 1002 	strh.w	r1, [sp, #2]
        quarter_area.x2 = q->center_x + q->radius;
  40b984:	8821      	ldrh	r1, [r4, #0]
  40b986:	440a      	add	r2, r1
  40b988:	f8ad 2004 	strh.w	r2, [sp, #4]
        quarter_area.y2 = q->center_y - 1;
  40b98c:	3b01      	subs	r3, #1
  40b98e:	f8ad 3006 	strh.w	r3, [sp, #6]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
  40b992:	69a2      	ldr	r2, [r4, #24]
  40b994:	4669      	mov	r1, sp
  40b996:	4668      	mov	r0, sp
  40b998:	4b09      	ldr	r3, [pc, #36]	; (40b9c0 <draw_quarter_3+0x1f8>)
  40b99a:	4798      	blx	r3
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
  40b99c:	2800      	cmp	r0, #0
  40b99e:	f43f af7c 	beq.w	40b89a <draw_quarter_3+0xd2>
  40b9a2:	6922      	ldr	r2, [r4, #16]
  40b9a4:	4669      	mov	r1, sp
  40b9a6:	6960      	ldr	r0, [r4, #20]
  40b9a8:	4b06      	ldr	r3, [pc, #24]	; (40b9c4 <draw_quarter_3+0x1fc>)
  40b9aa:	4798      	blx	r3
}
  40b9ac:	e775      	b.n	40b89a <draw_quarter_3+0xd2>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
  40b9ae:	2a00      	cmp	r2, #0
  40b9b0:	d0df      	beq.n	40b972 <draw_quarter_3+0x1aa>
  40b9b2:	e71a      	b.n	40b7ea <draw_quarter_3+0x22>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
  40b9b4:	2a00      	cmp	r2, #0
  40b9b6:	d0dc      	beq.n	40b972 <draw_quarter_3+0x1aa>
  40b9b8:	e71a      	b.n	40b7f0 <draw_quarter_3+0x28>
  40b9ba:	bf00      	nop
  40b9bc:	0041737d 	.word	0x0041737d
  40b9c0:	004164e3 	.word	0x004164e3
  40b9c4:	004133d9 	.word	0x004133d9

0040b9c8 <lv_draw_arc>:
{
  40b9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b9cc:	b0c1      	sub	sp, #260	; 0x104
  40b9ce:	9002      	str	r0, [sp, #8]
  40b9d0:	9103      	str	r1, [sp, #12]
  40b9d2:	9204      	str	r2, [sp, #16]
  40b9d4:	461e      	mov	r6, r3
  40b9d6:	f8bd 5128 	ldrh.w	r5, [sp, #296]	; 0x128
  40b9da:	9c4c      	ldr	r4, [sp, #304]	; 0x130
    if(dsc->opa <= LV_OPA_MIN) return;
  40b9dc:	7a23      	ldrb	r3, [r4, #8]
  40b9de:	2b02      	cmp	r3, #2
  40b9e0:	f240 80e7 	bls.w	40bbb2 <lv_draw_arc+0x1ea>
    if(dsc->width == 0) return;
  40b9e4:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
  40b9e8:	f1b8 0f00 	cmp.w	r8, #0
  40b9ec:	f000 80e1 	beq.w	40bbb2 <lv_draw_arc+0x1ea>
    if(start_angle == end_angle) return;
  40b9f0:	42ae      	cmp	r6, r5
  40b9f2:	f000 80de 	beq.w	40bbb2 <lv_draw_arc+0x1ea>
    if(width > radius) width = radius;
  40b9f6:	4590      	cmp	r8, r2
  40b9f8:	dd01      	ble.n	40b9fe <lv_draw_arc+0x36>
  40b9fa:	fa0f f882 	sxth.w	r8, r2
    lv_draw_rect_dsc_init(&cir_dsc);
  40b9fe:	a82b      	add	r0, sp, #172	; 0xac
  40ba00:	4b82      	ldr	r3, [pc, #520]	; (40bc0c <lv_draw_arc+0x244>)
  40ba02:	4798      	blx	r3
    cir_dsc.radius = LV_RADIUS_CIRCLE;
  40ba04:	f647 73ff 	movw	r3, #32767	; 0x7fff
  40ba08:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
    cir_dsc.bg_opa = LV_OPA_TRANSP;
  40ba0c:	2300      	movs	r3, #0
  40ba0e:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
    cir_dsc.border_opa = dsc->opa;
  40ba12:	7a23      	ldrb	r3, [r4, #8]
  40ba14:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
    cir_dsc.border_color = dsc->color;
  40ba18:	8823      	ldrh	r3, [r4, #0]
  40ba1a:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
    cir_dsc.border_width = width;
  40ba1e:	f8ad 80bc 	strh.w	r8, [sp, #188]	; 0xbc
    cir_dsc.border_blend_mode = dsc->blend_mode;
  40ba22:	7a63      	ldrb	r3, [r4, #9]
  40ba24:	f3c3 0301 	ubfx	r3, r3, #0, #2
  40ba28:	f88d 30c1 	strb.w	r3, [sp, #193]	; 0xc1
    area.x1 = center_x - radius;
  40ba2c:	f8bd a008 	ldrh.w	sl, [sp, #8]
  40ba30:	9904      	ldr	r1, [sp, #16]
  40ba32:	ebaa 0301 	sub.w	r3, sl, r1
  40ba36:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    area.y1 = center_y - radius;
  40ba3a:	f8bd 900c 	ldrh.w	r9, [sp, #12]
  40ba3e:	eba9 0301 	sub.w	r3, r9, r1
  40ba42:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    area.x2 = center_x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
  40ba46:	eb01 030a 	add.w	r3, r1, sl
  40ba4a:	b29b      	uxth	r3, r3
  40ba4c:	3b01      	subs	r3, #1
  40ba4e:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
    area.y2 = center_y + radius - 1;
  40ba52:	460b      	mov	r3, r1
  40ba54:	444b      	add	r3, r9
  40ba56:	b29b      	uxth	r3, r3
  40ba58:	3b01      	subs	r3, #1
  40ba5a:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
  40ba5e:	f506 73b4 	add.w	r3, r6, #360	; 0x168
  40ba62:	42ab      	cmp	r3, r5
  40ba64:	f000 80a0 	beq.w	40bba8 <lv_draw_arc+0x1e0>
  40ba68:	f505 73b4 	add.w	r3, r5, #360	; 0x168
  40ba6c:	429e      	cmp	r6, r3
  40ba6e:	f000 809b 	beq.w	40bba8 <lv_draw_arc+0x1e0>
    if(start_angle >= 360) start_angle -= 360;
  40ba72:	f5b6 7fb4 	cmp.w	r6, #360	; 0x168
  40ba76:	d302      	bcc.n	40ba7e <lv_draw_arc+0xb6>
  40ba78:	f5a6 76b4 	sub.w	r6, r6, #360	; 0x168
  40ba7c:	b2b6      	uxth	r6, r6
    if(end_angle >= 360) end_angle -= 360;
  40ba7e:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
  40ba82:	d302      	bcc.n	40ba8a <lv_draw_arc+0xc2>
  40ba84:	f5a5 75b4 	sub.w	r5, r5, #360	; 0x168
  40ba88:	b2ad      	uxth	r5, r5
    lv_draw_mask_angle_init(&mask_angle_param, center_x, center_y, start_angle, end_angle);
  40ba8a:	b233      	sxth	r3, r6
  40ba8c:	9305      	str	r3, [sp, #20]
  40ba8e:	fa0f fb85 	sxth.w	fp, r5
  40ba92:	f8cd b000 	str.w	fp, [sp]
  40ba96:	9a03      	ldr	r2, [sp, #12]
  40ba98:	9902      	ldr	r1, [sp, #8]
  40ba9a:	a80e      	add	r0, sp, #56	; 0x38
  40ba9c:	4f5c      	ldr	r7, [pc, #368]	; (40bc10 <lv_draw_arc+0x248>)
  40ba9e:	47b8      	blx	r7
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
  40baa0:	2100      	movs	r1, #0
  40baa2:	a80e      	add	r0, sp, #56	; 0x38
  40baa4:	4b5b      	ldr	r3, [pc, #364]	; (40bc14 <lv_draw_arc+0x24c>)
  40baa6:	4798      	blx	r3
  40baa8:	4607      	mov	r7, r0
    if(end_angle > start_angle) {
  40baaa:	42ae      	cmp	r6, r5
  40baac:	f080 8084 	bcs.w	40bbb8 <lv_draw_arc+0x1f0>
        angle_gap = 360 - (end_angle - start_angle);
  40bab0:	1bab      	subs	r3, r5, r6
  40bab2:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
  40bab6:	9904      	ldr	r1, [sp, #16]
  40bab8:	2b3c      	cmp	r3, #60	; 0x3c
  40baba:	bfd4      	ite	le
  40babc:	2300      	movle	r3, #0
  40babe:	2301      	movgt	r3, #1
  40bac0:	290a      	cmp	r1, #10
  40bac2:	bf98      	it	ls
  40bac4:	2300      	movls	r3, #0
  40bac6:	2b00      	cmp	r3, #0
  40bac8:	d078      	beq.n	40bbbc <lv_draw_arc+0x1f4>
        q_dsc.center_x = center_x;
  40baca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  40bace:	f8ad 301c 	strh.w	r3, [sp, #28]
        q_dsc.center_y = center_y;
  40bad2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40bad6:	f8ad 301e 	strh.w	r3, [sp, #30]
        q_dsc.radius = radius;
  40bada:	f8ad 1020 	strh.w	r1, [sp, #32]
        q_dsc.start_angle = start_angle;
  40bade:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
        q_dsc.end_angle = end_angle;
  40bae2:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
  40bae6:	0872      	lsrs	r2, r6, #1
  40bae8:	494b      	ldr	r1, [pc, #300]	; (40bc18 <lv_draw_arc+0x250>)
  40baea:	fba1 3202 	umull	r3, r2, r1, r2
  40baee:	f3c2 1241 	ubfx	r2, r2, #5, #2
  40baf2:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
        q_dsc.end_quarter = (end_angle / 90) & 0x3;
  40baf6:	086b      	lsrs	r3, r5, #1
  40baf8:	fba1 2303 	umull	r2, r3, r1, r3
  40bafc:	f3c3 1341 	ubfx	r3, r3, #5, #2
  40bb00:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        q_dsc.width = width;
  40bb04:	f8ad 802a 	strh.w	r8, [sp, #42]	; 0x2a
        q_dsc.draw_dsc =  &cir_dsc;
  40bb08:	ab2b      	add	r3, sp, #172	; 0xac
  40bb0a:	930b      	str	r3, [sp, #44]	; 0x2c
        q_dsc.draw_area = &area;
  40bb0c:	ab29      	add	r3, sp, #164	; 0xa4
  40bb0e:	930c      	str	r3, [sp, #48]	; 0x30
        q_dsc.clip_area = clip_area;
  40bb10:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
  40bb12:	930d      	str	r3, [sp, #52]	; 0x34
        draw_quarter_0(&q_dsc);
  40bb14:	a807      	add	r0, sp, #28
  40bb16:	4b41      	ldr	r3, [pc, #260]	; (40bc1c <lv_draw_arc+0x254>)
  40bb18:	4798      	blx	r3
        draw_quarter_1(&q_dsc);
  40bb1a:	a807      	add	r0, sp, #28
  40bb1c:	4b40      	ldr	r3, [pc, #256]	; (40bc20 <lv_draw_arc+0x258>)
  40bb1e:	4798      	blx	r3
        draw_quarter_2(&q_dsc);
  40bb20:	a807      	add	r0, sp, #28
  40bb22:	4b40      	ldr	r3, [pc, #256]	; (40bc24 <lv_draw_arc+0x25c>)
  40bb24:	4798      	blx	r3
        draw_quarter_3(&q_dsc);
  40bb26:	a807      	add	r0, sp, #28
  40bb28:	4b3f      	ldr	r3, [pc, #252]	; (40bc28 <lv_draw_arc+0x260>)
  40bb2a:	4798      	blx	r3
    lv_draw_mask_remove_id(mask_angle_id);
  40bb2c:	4638      	mov	r0, r7
  40bb2e:	4b3f      	ldr	r3, [pc, #252]	; (40bc2c <lv_draw_arc+0x264>)
  40bb30:	4798      	blx	r3
    if(dsc->round_start || dsc->round_end) {
  40bb32:	7a63      	ldrb	r3, [r4, #9]
  40bb34:	f013 0f0c 	tst.w	r3, #12
  40bb38:	d03b      	beq.n	40bbb2 <lv_draw_arc+0x1ea>
        cir_dsc.bg_color        = dsc->color;
  40bb3a:	8823      	ldrh	r3, [r4, #0]
  40bb3c:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
        cir_dsc.bg_opa        = dsc->opa;
  40bb40:	7a23      	ldrb	r3, [r4, #8]
  40bb42:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
        cir_dsc.bg_blend_mode = dsc->blend_mode;
  40bb46:	7a63      	ldrb	r3, [r4, #9]
  40bb48:	f3c3 0201 	ubfx	r2, r3, #0, #2
  40bb4c:	f88d 20b9 	strb.w	r2, [sp, #185]	; 0xb9
        cir_dsc.border_width = 0;
  40bb50:	2200      	movs	r2, #0
  40bb52:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
        if(dsc->round_start) {
  40bb56:	f013 0f04 	tst.w	r3, #4
  40bb5a:	d135      	bne.n	40bbc8 <lv_draw_arc+0x200>
        if(dsc->round_end) {
  40bb5c:	7a63      	ldrb	r3, [r4, #9]
  40bb5e:	f013 0f08 	tst.w	r3, #8
  40bb62:	d026      	beq.n	40bbb2 <lv_draw_arc+0x1ea>
            get_rounded_area(end_angle, radius, width, &round_area);
  40bb64:	ab07      	add	r3, sp, #28
  40bb66:	fa5f f288 	uxtb.w	r2, r8
  40bb6a:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
  40bb6e:	4658      	mov	r0, fp
  40bb70:	4c2f      	ldr	r4, [pc, #188]	; (40bc30 <lv_draw_arc+0x268>)
  40bb72:	47a0      	blx	r4
            round_area.x1 += center_x;
  40bb74:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  40bb78:	4453      	add	r3, sl
  40bb7a:	f8ad 301c 	strh.w	r3, [sp, #28]
            round_area.x2 += center_x;
  40bb7e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  40bb82:	449a      	add	sl, r3
  40bb84:	f8ad a020 	strh.w	sl, [sp, #32]
            round_area.y1 += center_y;
  40bb88:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40bb8c:	444b      	add	r3, r9
  40bb8e:	f8ad 301e 	strh.w	r3, [sp, #30]
            round_area.y2 += center_y;
  40bb92:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
  40bb96:	4499      	add	r9, r3
  40bb98:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
            lv_draw_rect(&round_area, clip_area, &cir_dsc);
  40bb9c:	aa2b      	add	r2, sp, #172	; 0xac
  40bb9e:	994b      	ldr	r1, [sp, #300]	; 0x12c
  40bba0:	a807      	add	r0, sp, #28
  40bba2:	4b24      	ldr	r3, [pc, #144]	; (40bc34 <lv_draw_arc+0x26c>)
  40bba4:	4798      	blx	r3
  40bba6:	e004      	b.n	40bbb2 <lv_draw_arc+0x1ea>
        lv_draw_rect(&area, clip_area, &cir_dsc);
  40bba8:	aa2b      	add	r2, sp, #172	; 0xac
  40bbaa:	994b      	ldr	r1, [sp, #300]	; 0x12c
  40bbac:	a829      	add	r0, sp, #164	; 0xa4
  40bbae:	4b21      	ldr	r3, [pc, #132]	; (40bc34 <lv_draw_arc+0x26c>)
  40bbb0:	4798      	blx	r3
}
  40bbb2:	b041      	add	sp, #260	; 0x104
  40bbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        angle_gap = start_angle - end_angle;
  40bbb8:	1b73      	subs	r3, r6, r5
  40bbba:	e77c      	b.n	40bab6 <lv_draw_arc+0xee>
        lv_draw_rect(&area, clip_area, &cir_dsc);
  40bbbc:	aa2b      	add	r2, sp, #172	; 0xac
  40bbbe:	994b      	ldr	r1, [sp, #300]	; 0x12c
  40bbc0:	a829      	add	r0, sp, #164	; 0xa4
  40bbc2:	4b1c      	ldr	r3, [pc, #112]	; (40bc34 <lv_draw_arc+0x26c>)
  40bbc4:	4798      	blx	r3
  40bbc6:	e7b1      	b.n	40bb2c <lv_draw_arc+0x164>
            get_rounded_area(start_angle, radius, width, &round_area);
  40bbc8:	ab07      	add	r3, sp, #28
  40bbca:	fa5f f288 	uxtb.w	r2, r8
  40bbce:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
  40bbd2:	9805      	ldr	r0, [sp, #20]
  40bbd4:	4d16      	ldr	r5, [pc, #88]	; (40bc30 <lv_draw_arc+0x268>)
  40bbd6:	47a8      	blx	r5
            round_area.x1 += center_x;
  40bbd8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  40bbdc:	4453      	add	r3, sl
  40bbde:	f8ad 301c 	strh.w	r3, [sp, #28]
            round_area.x2 += center_x;
  40bbe2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  40bbe6:	4453      	add	r3, sl
  40bbe8:	f8ad 3020 	strh.w	r3, [sp, #32]
            round_area.y1 += center_y;
  40bbec:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40bbf0:	444b      	add	r3, r9
  40bbf2:	f8ad 301e 	strh.w	r3, [sp, #30]
            round_area.y2 += center_y;
  40bbf6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
  40bbfa:	444b      	add	r3, r9
  40bbfc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            lv_draw_rect(&round_area, clip_area, &cir_dsc);
  40bc00:	aa2b      	add	r2, sp, #172	; 0xac
  40bc02:	994b      	ldr	r1, [sp, #300]	; 0x12c
  40bc04:	a807      	add	r0, sp, #28
  40bc06:	4b0b      	ldr	r3, [pc, #44]	; (40bc34 <lv_draw_arc+0x26c>)
  40bc08:	4798      	blx	r3
  40bc0a:	e7a7      	b.n	40bb5c <lv_draw_arc+0x194>
  40bc0c:	0041338d 	.word	0x0041338d
  40bc10:	00410c79 	.word	0x00410c79
  40bc14:	004109a5 	.word	0x004109a5
  40bc18:	b60b60b7 	.word	0xb60b60b7
  40bc1c:	0040b1e1 	.word	0x0040b1e1
  40bc20:	0040b3dd 	.word	0x0040b3dd
  40bc24:	0040b5d5 	.word	0x0040b5d5
  40bc28:	0040b7c9 	.word	0x0040b7c9
  40bc2c:	00410a29 	.word	0x00410a29
  40bc30:	0040b141 	.word	0x0040b141
  40bc34:	004133d9 	.word	0x004133d9

0040bc38 <map_blended>:
}
#if LV_USE_BLEND_MODES
static void map_blended(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,
                        const lv_area_t * map_area, const lv_color_t * map_buf, lv_opa_t opa,
                        const lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_blend_mode_t mode)
{
  40bc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bc3c:	b085      	sub	sp, #20
  40bc3e:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
  40bc42:	9400      	str	r4, [sp, #0]
  40bc44:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40bc48:	8884      	ldrh	r4, [r0, #4]
  40bc4a:	f9b0 c000 	ldrsh.w	ip, [r0]
  40bc4e:	fa1f f58c 	uxth.w	r5, ip
  40bc52:	1b64      	subs	r4, r4, r5
  40bc54:	b2a4      	uxth	r4, r4
  40bc56:	3401      	adds	r4, #1
  40bc58:	b224      	sxth	r4, r4
  40bc5a:	9402      	str	r4, [sp, #8]
  40bc5c:	8895      	ldrh	r5, [r2, #4]
  40bc5e:	f9b2 4000 	ldrsh.w	r4, [r2]
  40bc62:	b2a6      	uxth	r6, r4
  40bc64:	1bad      	subs	r5, r5, r6
  40bc66:	b2ad      	uxth	r5, r5
  40bc68:	3501      	adds	r5, #1
  40bc6a:	b22e      	sxth	r6, r5
  40bc6c:	9603      	str	r6, [sp, #12]
  40bc6e:	889d      	ldrh	r5, [r3, #4]
  40bc70:	f9b3 e000 	ldrsh.w	lr, [r3]
  40bc74:	fa1f f68e 	uxth.w	r6, lr
  40bc78:	1bad      	subs	r5, r5, r6
  40bc7a:	b2ad      	uxth	r5, r5
  40bc7c:	3501      	adds	r5, #1
  40bc7e:	b22e      	sxth	r6, r5
  40bc80:	9601      	str	r6, [sp, #4]

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);

    /*Create a temp. disp_buf which always point to current line to draw*/
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
  40bc82:	f9b2 b002 	ldrsh.w	fp, [r2, #2]
  40bc86:	9d02      	ldr	r5, [sp, #8]
  40bc88:	fb0b f605 	mul.w	r6, fp, r5
  40bc8c:	eb01 0646 	add.w	r6, r1, r6, lsl #1

    /*Create a temp. map_buf which always point to current line to draw*/
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40bc90:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40bc94:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40bc98:	1aed      	subs	r5, r5, r3
  40bc9a:	ebab 0505 	sub.w	r5, fp, r5
  40bc9e:	9b01      	ldr	r3, [sp, #4]
  40bca0:	fb05 f503 	mul.w	r5, r5, r3
  40bca4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40bca6:	eb03 0545 	add.w	r5, r3, r5, lsl #1

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(mode) {
  40bcaa:	2f01      	cmp	r7, #1
  40bcac:	d004      	beq.n	40bcb8 <map_blended+0x80>
  40bcae:	2f02      	cmp	r7, #2
  40bcb0:	d00f      	beq.n	40bcd2 <map_blended+0x9a>
            disp_buf_tmp += disp_w;
            mask_tmp += draw_area_w;
            map_buf_tmp += map_w;
        }
    }
}
  40bcb2:	b005      	add	sp, #20
  40bcb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            blend_fp = color_blend_true_color_additive;
  40bcb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 40bd7c <map_blended+0x144>
  40bcbc:	4617      	mov	r7, r2
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40bcbe:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  40bcc2:	2b01      	cmp	r3, #1
  40bcc4:	d008      	beq.n	40bcd8 <map_blended+0xa0>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40bcc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40bcc8:	eba3 0904 	sub.w	r9, r3, r4
        map_buf_tmp -= draw_area->x1;
  40bccc:	eba5 0844 	sub.w	r8, r5, r4, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bcd0:	e04d      	b.n	40bd6e <map_blended+0x136>
            blend_fp = color_blend_true_color_subtractive;
  40bcd2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 40bd80 <map_blended+0x148>
  40bcd6:	e7f1      	b.n	40bcbc <map_blended+0x84>
        map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40bcd8:	ebae 030c 	sub.w	r3, lr, ip
  40bcdc:	1ae3      	subs	r3, r4, r3
        map_buf_tmp -= draw_area->x1;
  40bcde:	0064      	lsls	r4, r4, #1
  40bce0:	ebc4 0343 	rsb	r3, r4, r3, lsl #1
  40bce4:	441d      	add	r5, r3
  40bce6:	f8dd 9008 	ldr.w	r9, [sp, #8]
  40bcea:	f8dd 8000 	ldr.w	r8, [sp]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bcee:	e013      	b.n	40bd18 <map_blended+0xe0>
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
  40bcf0:	4642      	mov	r2, r8
  40bcf2:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
  40bcf6:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
  40bcfa:	47d0      	blx	sl
  40bcfc:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40bd00:	3401      	adds	r4, #1
  40bd02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
  40bd06:	429c      	cmp	r4, r3
  40bd08:	ddf2      	ble.n	40bcf0 <map_blended+0xb8>
            disp_buf_tmp += disp_w;
  40bd0a:	eb06 0649 	add.w	r6, r6, r9, lsl #1
            map_buf_tmp += map_w;
  40bd0e:	9b01      	ldr	r3, [sp, #4]
  40bd10:	eb05 0543 	add.w	r5, r5, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bd14:	f10b 0b01 	add.w	fp, fp, #1
  40bd18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
  40bd1c:	459b      	cmp	fp, r3
  40bd1e:	dcc8      	bgt.n	40bcb2 <map_blended+0x7a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40bd20:	f9b7 4000 	ldrsh.w	r4, [r7]
  40bd24:	e7ed      	b.n	40bd02 <map_blended+0xca>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  40bd26:	9a00      	ldr	r2, [sp, #0]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
  40bd28:	f836 1015 	ldrh.w	r1, [r6, r5, lsl #1]
  40bd2c:	f838 0015 	ldrh.w	r0, [r8, r5, lsl #1]
  40bd30:	47d0      	blx	sl
  40bd32:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40bd36:	3401      	adds	r4, #1
  40bd38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
  40bd3c:	429c      	cmp	r4, r3
  40bd3e:	dc0c      	bgt.n	40bd5a <map_blended+0x122>
                if(mask_tmp[x] == 0) continue;
  40bd40:	4625      	mov	r5, r4
  40bd42:	f819 2004 	ldrb.w	r2, [r9, r4]
  40bd46:	2a00      	cmp	r2, #0
  40bd48:	d0f5      	beq.n	40bd36 <map_blended+0xfe>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  40bd4a:	2afc      	cmp	r2, #252	; 0xfc
  40bd4c:	d8eb      	bhi.n	40bd26 <map_blended+0xee>
  40bd4e:	9b00      	ldr	r3, [sp, #0]
  40bd50:	fb02 f203 	mul.w	r2, r2, r3
  40bd54:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40bd58:	e7e6      	b.n	40bd28 <map_blended+0xf0>
            disp_buf_tmp += disp_w;
  40bd5a:	9b02      	ldr	r3, [sp, #8]
  40bd5c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
            mask_tmp += draw_area_w;
  40bd60:	9b03      	ldr	r3, [sp, #12]
  40bd62:	4499      	add	r9, r3
            map_buf_tmp += map_w;
  40bd64:	9b01      	ldr	r3, [sp, #4]
  40bd66:	eb08 0843 	add.w	r8, r8, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bd6a:	f10b 0b01 	add.w	fp, fp, #1
  40bd6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
  40bd72:	459b      	cmp	fp, r3
  40bd74:	dc9d      	bgt.n	40bcb2 <map_blended+0x7a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40bd76:	f9b7 4000 	ldrsh.w	r4, [r7]
  40bd7a:	e7dd      	b.n	40bd38 <map_blended+0x100>
  40bd7c:	0040cf45 	.word	0x0040cf45
  40bd80:	0040d033 	.word	0x0040d033

0040bd84 <fill_set_px>:
{
  40bd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bd88:	b089      	sub	sp, #36	; 0x24
  40bd8a:	4604      	mov	r4, r0
  40bd8c:	9106      	str	r1, [sp, #24]
  40bd8e:	4615      	mov	r5, r2
  40bd90:	4698      	mov	r8, r3
  40bd92:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40bd96:	4b33      	ldr	r3, [pc, #204]	; (40be64 <fill_set_px+0xe0>)
  40bd98:	4798      	blx	r3
  40bd9a:	4606      	mov	r6, r0
  40bd9c:	88a3      	ldrh	r3, [r4, #4]
  40bd9e:	8822      	ldrh	r2, [r4, #0]
  40bda0:	1a9b      	subs	r3, r3, r2
  40bda2:	b29b      	uxth	r3, r3
  40bda4:	3301      	adds	r3, #1
  40bda6:	b21b      	sxth	r3, r3
  40bda8:	9305      	str	r3, [sp, #20]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40bdaa:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
  40bdae:	2b01      	cmp	r3, #1
  40bdb0:	d00d      	beq.n	40bdce <fill_set_px+0x4a>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40bdb2:	f9b5 2000 	ldrsh.w	r2, [r5]
  40bdb6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40bdb8:	1abf      	subs	r7, r7, r2
  40bdba:	88ab      	ldrh	r3, [r5, #4]
  40bdbc:	b292      	uxth	r2, r2
  40bdbe:	1a9b      	subs	r3, r3, r2
  40bdc0:	b29b      	uxth	r3, r3
  40bdc2:	3301      	adds	r3, #1
  40bdc4:	b21b      	sxth	r3, r3
  40bdc6:	9307      	str	r3, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bdc8:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
  40bdcc:	e03f      	b.n	40be4e <fill_set_px+0xca>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bdce:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
  40bdd2:	f8dd b018 	ldr.w	fp, [sp, #24]
  40bdd6:	e014      	b.n	40be02 <fill_set_px+0x7e>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
  40bdd8:	f8d6 9014 	ldr.w	r9, [r6, #20]
  40bddc:	9702      	str	r7, [sp, #8]
  40bdde:	f8ad 8004 	strh.w	r8, [sp, #4]
  40bde2:	fa0f f38a 	sxth.w	r3, sl
  40bde6:	9300      	str	r3, [sp, #0]
  40bde8:	b223      	sxth	r3, r4
  40bdea:	9a05      	ldr	r2, [sp, #20]
  40bdec:	4659      	mov	r1, fp
  40bdee:	4630      	mov	r0, r6
  40bdf0:	47c8      	blx	r9
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40bdf2:	3401      	adds	r4, #1
  40bdf4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40bdf8:	429c      	cmp	r4, r3
  40bdfa:	dded      	ble.n	40bdd8 <fill_set_px+0x54>
  40bdfc:	46b9      	mov	r9, r7
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bdfe:	f10a 0a01 	add.w	sl, sl, #1
  40be02:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40be06:	459a      	cmp	sl, r3
  40be08:	dc28      	bgt.n	40be5c <fill_set_px+0xd8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40be0a:	f9b5 4000 	ldrsh.w	r4, [r5]
  40be0e:	464f      	mov	r7, r9
  40be10:	e7f0      	b.n	40bdf4 <fill_set_px+0x70>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40be12:	3401      	adds	r4, #1
  40be14:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40be18:	429c      	cmp	r4, r3
  40be1a:	dc14      	bgt.n	40be46 <fill_set_px+0xc2>
                if(mask_tmp[x]) {
  40be1c:	5d3b      	ldrb	r3, [r7, r4]
  40be1e:	2b00      	cmp	r3, #0
  40be20:	d0f7      	beq.n	40be12 <fill_set_px+0x8e>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
  40be22:	f8d6 b014 	ldr.w	fp, [r6, #20]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
  40be26:	fb03 f309 	mul.w	r3, r3, r9
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
  40be2a:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40be2e:	9302      	str	r3, [sp, #8]
  40be30:	f8ad 8004 	strh.w	r8, [sp, #4]
  40be34:	fa0f f38a 	sxth.w	r3, sl
  40be38:	9300      	str	r3, [sp, #0]
  40be3a:	b223      	sxth	r3, r4
  40be3c:	9a05      	ldr	r2, [sp, #20]
  40be3e:	9906      	ldr	r1, [sp, #24]
  40be40:	4630      	mov	r0, r6
  40be42:	47d8      	blx	fp
  40be44:	e7e5      	b.n	40be12 <fill_set_px+0x8e>
            mask_tmp += draw_area_w;
  40be46:	9b07      	ldr	r3, [sp, #28]
  40be48:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40be4a:	f10a 0a01 	add.w	sl, sl, #1
  40be4e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40be52:	459a      	cmp	sl, r3
  40be54:	dc02      	bgt.n	40be5c <fill_set_px+0xd8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40be56:	f9b5 4000 	ldrsh.w	r4, [r5]
  40be5a:	e7db      	b.n	40be14 <fill_set_px+0x90>
}
  40be5c:	b009      	add	sp, #36	; 0x24
  40be5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40be62:	bf00      	nop
  40be64:	00409709 	.word	0x00409709

0040be68 <map_set_px>:
{
  40be68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40be6c:	b089      	sub	sp, #36	; 0x24
  40be6e:	4604      	mov	r4, r0
  40be70:	9105      	str	r1, [sp, #20]
  40be72:	4615      	mov	r5, r2
  40be74:	461f      	mov	r7, r3
  40be76:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40be7a:	4b48      	ldr	r3, [pc, #288]	; (40bf9c <map_set_px+0x134>)
  40be7c:	4798      	blx	r3
  40be7e:	4606      	mov	r6, r0
  40be80:	88a3      	ldrh	r3, [r4, #4]
  40be82:	f9b4 9000 	ldrsh.w	r9, [r4]
  40be86:	fa1f f289 	uxth.w	r2, r9
  40be8a:	1a9b      	subs	r3, r3, r2
  40be8c:	b29b      	uxth	r3, r3
  40be8e:	3301      	adds	r3, #1
  40be90:	b21b      	sxth	r3, r3
  40be92:	9304      	str	r3, [sp, #16]
  40be94:	88ab      	ldrh	r3, [r5, #4]
  40be96:	f9b5 2000 	ldrsh.w	r2, [r5]
  40be9a:	b291      	uxth	r1, r2
  40be9c:	1a5b      	subs	r3, r3, r1
  40be9e:	b29b      	uxth	r3, r3
  40bea0:	3301      	adds	r3, #1
  40bea2:	b21b      	sxth	r3, r3
  40bea4:	9307      	str	r3, [sp, #28]
  40bea6:	88b9      	ldrh	r1, [r7, #4]
  40bea8:	f9b7 3000 	ldrsh.w	r3, [r7]
  40beac:	b298      	uxth	r0, r3
  40beae:	1a09      	subs	r1, r1, r0
  40beb0:	b289      	uxth	r1, r1
  40beb2:	3101      	adds	r1, #1
  40beb4:	b209      	sxth	r1, r1
  40beb6:	9106      	str	r1, [sp, #24]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40beb8:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
  40bebc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
  40bec0:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
  40bec4:	1a09      	subs	r1, r1, r0
  40bec6:	eba8 0101 	sub.w	r1, r8, r1
  40beca:	9806      	ldr	r0, [sp, #24]
  40becc:	fb01 f100 	mul.w	r1, r1, r0
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40bed0:	eba3 0909 	sub.w	r9, r3, r9
  40bed4:	eba2 0909 	sub.w	r9, r2, r9
  40bed8:	ea4f 0949 	mov.w	r9, r9, lsl #1
    map_buf_tmp -= draw_area->x1;
  40bedc:	eb09 0941 	add.w	r9, r9, r1, lsl #1
  40bee0:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
  40bee4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40bee6:	4499      	add	r9, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40bee8:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  40beec:	2b01      	cmp	r3, #1
  40beee:	d024      	beq.n	40bf3a <map_set_px+0xd2>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40bef0:	9f14      	ldr	r7, [sp, #80]	; 0x50
  40bef2:	1abf      	subs	r7, r7, r2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bef4:	e047      	b.n	40bf86 <map_set_px+0x11e>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
  40bef6:	f8d6 a014 	ldr.w	sl, [r6, #20]
  40befa:	9702      	str	r7, [sp, #8]
  40befc:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
  40bf00:	f8ad 3004 	strh.w	r3, [sp, #4]
  40bf04:	fa0f f388 	sxth.w	r3, r8
  40bf08:	9300      	str	r3, [sp, #0]
  40bf0a:	b223      	sxth	r3, r4
  40bf0c:	9a04      	ldr	r2, [sp, #16]
  40bf0e:	4659      	mov	r1, fp
  40bf10:	4630      	mov	r0, r6
  40bf12:	47d0      	blx	sl
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40bf14:	3401      	adds	r4, #1
  40bf16:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40bf1a:	429c      	cmp	r4, r3
  40bf1c:	ddeb      	ble.n	40bef6 <map_set_px+0x8e>
  40bf1e:	46ba      	mov	sl, r7
            map_buf_tmp += map_w;
  40bf20:	9b06      	ldr	r3, [sp, #24]
  40bf22:	eb09 0943 	add.w	r9, r9, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bf26:	f108 0801 	add.w	r8, r8, #1
  40bf2a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40bf2e:	4598      	cmp	r8, r3
  40bf30:	dc30      	bgt.n	40bf94 <map_set_px+0x12c>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40bf32:	f9b5 4000 	ldrsh.w	r4, [r5]
  40bf36:	4657      	mov	r7, sl
  40bf38:	e7ed      	b.n	40bf16 <map_set_px+0xae>
  40bf3a:	f8dd b014 	ldr.w	fp, [sp, #20]
  40bf3e:	e7f4      	b.n	40bf2a <map_set_px+0xc2>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40bf40:	3401      	adds	r4, #1
  40bf42:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40bf46:	429c      	cmp	r4, r3
  40bf48:	dc16      	bgt.n	40bf78 <map_set_px+0x110>
                if(mask_tmp[x]) {
  40bf4a:	5d3b      	ldrb	r3, [r7, r4]
  40bf4c:	2b00      	cmp	r3, #0
  40bf4e:	d0f7      	beq.n	40bf40 <map_set_px+0xd8>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
  40bf50:	f8d6 b014 	ldr.w	fp, [r6, #20]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
  40bf54:	fb03 f30a 	mul.w	r3, r3, sl
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
  40bf58:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40bf5c:	9302      	str	r3, [sp, #8]
  40bf5e:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
  40bf62:	f8ad 3004 	strh.w	r3, [sp, #4]
  40bf66:	fa0f f388 	sxth.w	r3, r8
  40bf6a:	9300      	str	r3, [sp, #0]
  40bf6c:	b223      	sxth	r3, r4
  40bf6e:	9a04      	ldr	r2, [sp, #16]
  40bf70:	9905      	ldr	r1, [sp, #20]
  40bf72:	4630      	mov	r0, r6
  40bf74:	47d8      	blx	fp
  40bf76:	e7e3      	b.n	40bf40 <map_set_px+0xd8>
            mask_tmp += draw_area_w;
  40bf78:	9b07      	ldr	r3, [sp, #28]
  40bf7a:	441f      	add	r7, r3
            map_buf_tmp += map_w;
  40bf7c:	9b06      	ldr	r3, [sp, #24]
  40bf7e:	eb09 0943 	add.w	r9, r9, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bf82:	f108 0801 	add.w	r8, r8, #1
  40bf86:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40bf8a:	4598      	cmp	r8, r3
  40bf8c:	dc02      	bgt.n	40bf94 <map_set_px+0x12c>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40bf8e:	f9b5 4000 	ldrsh.w	r4, [r5]
  40bf92:	e7d6      	b.n	40bf42 <map_set_px+0xda>
}
  40bf94:	b009      	add	sp, #36	; 0x24
  40bf96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bf9a:	bf00      	nop
  40bf9c:	00409709 	.word	0x00409709

0040bfa0 <map_normal>:
{
  40bfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bfa4:	b08f      	sub	sp, #60	; 0x3c
  40bfa6:	4686      	mov	lr, r0
  40bfa8:	4614      	mov	r4, r2
  40bfaa:	9206      	str	r2, [sp, #24]
  40bfac:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
  40bfb0:	8882      	ldrh	r2, [r0, #4]
  40bfb2:	f9b0 0000 	ldrsh.w	r0, [r0]
  40bfb6:	9003      	str	r0, [sp, #12]
  40bfb8:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  40bfbc:	1a12      	subs	r2, r2, r0
  40bfbe:	b292      	uxth	r2, r2
  40bfc0:	3201      	adds	r2, #1
  40bfc2:	b212      	sxth	r2, r2
  40bfc4:	9208      	str	r2, [sp, #32]
  40bfc6:	88a2      	ldrh	r2, [r4, #4]
  40bfc8:	f9b4 c000 	ldrsh.w	ip, [r4]
  40bfcc:	fa1f f08c 	uxth.w	r0, ip
  40bfd0:	1a12      	subs	r2, r2, r0
  40bfd2:	b292      	uxth	r2, r2
  40bfd4:	3201      	adds	r2, #1
  40bfd6:	b212      	sxth	r2, r2
  40bfd8:	9209      	str	r2, [sp, #36]	; 0x24
    int32_t draw_area_w = lv_area_get_width(draw_area);
  40bfda:	4693      	mov	fp, r2
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40bfdc:	88e0      	ldrh	r0, [r4, #6]
  40bfde:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  40bfe2:	b294      	uxth	r4, r2
  40bfe4:	1b00      	subs	r0, r0, r4
  40bfe6:	b280      	uxth	r0, r0
  40bfe8:	3001      	adds	r0, #1
  40bfea:	b204      	sxth	r4, r0
  40bfec:	940a      	str	r4, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40bfee:	8898      	ldrh	r0, [r3, #4]
  40bff0:	f9b3 5000 	ldrsh.w	r5, [r3]
  40bff4:	b2ac      	uxth	r4, r5
  40bff6:	1b00      	subs	r0, r0, r4
  40bff8:	b280      	uxth	r0, r0
  40bffa:	3001      	adds	r0, #1
  40bffc:	b204      	sxth	r4, r0
  40bffe:	9407      	str	r4, [sp, #28]
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
  40c000:	9808      	ldr	r0, [sp, #32]
  40c002:	fb02 c400 	mla	r4, r2, r0, ip
  40c006:	eb01 0444 	add.w	r4, r1, r4, lsl #1
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40c00a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  40c00e:	f9be 1002 	ldrsh.w	r1, [lr, #2]
  40c012:	1a5b      	subs	r3, r3, r1
  40c014:	1ad3      	subs	r3, r2, r3
  40c016:	9a07      	ldr	r2, [sp, #28]
  40c018:	fb03 f302 	mul.w	r3, r3, r2
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40c01c:	9803      	ldr	r0, [sp, #12]
  40c01e:	1a2d      	subs	r5, r5, r0
  40c020:	ebac 0505 	sub.w	r5, ip, r5
  40c024:	006d      	lsls	r5, r5, #1
  40c026:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  40c02a:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40c02c:	441d      	add	r5, r3
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40c02e:	4b8a      	ldr	r3, [pc, #552]	; (40c258 <map_normal+0x2b8>)
  40c030:	4798      	blx	r3
  40c032:	9003      	str	r0, [sp, #12]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40c034:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
  40c038:	2b01      	cmp	r3, #1
  40c03a:	d008      	beq.n	40c04e <map_normal+0xae>
        if(opa > LV_OPA_MAX) {
  40c03c:	2ffd      	cmp	r7, #253	; 0xfd
  40c03e:	f240 8383 	bls.w	40c748 <map_normal+0x7a8>
            int32_t x_end4 = draw_area_w - 4;
  40c042:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c044:	3b04      	subs	r3, #4
  40c046:	9303      	str	r3, [sp, #12]
            for(y = 0; y < draw_area_h; y++) {
  40c048:	2300      	movs	r3, #0
  40c04a:	9306      	str	r3, [sp, #24]
  40c04c:	e308      	b.n	40c660 <map_normal+0x6c0>
        if(disp->driver.gpu_blend_cb && (lv_area_get_size(draw_area) > GPU_SIZE_LIMIT)) {
  40c04e:	6a83      	ldr	r3, [r0, #40]	; 0x28
  40c050:	b32b      	cbz	r3, 40c09e <map_normal+0xfe>
  40c052:	9e06      	ldr	r6, [sp, #24]
  40c054:	4630      	mov	r0, r6
  40c056:	4b81      	ldr	r3, [pc, #516]	; (40c25c <map_normal+0x2bc>)
  40c058:	4798      	blx	r3
  40c05a:	28f0      	cmp	r0, #240	; 0xf0
  40c05c:	d91f      	bls.n	40c09e <map_normal+0xfe>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c05e:	4631      	mov	r1, r6
  40c060:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
  40c064:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40c068:	f8dd a020 	ldr.w	sl, [sp, #32]
  40c06c:	4689      	mov	r9, r1
  40c06e:	46bb      	mov	fp, r7
  40c070:	e00e      	b.n	40c090 <map_normal+0xf0>
                disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, map_buf_first, draw_area_w, opa);
  40c072:	f8d8 7028 	ldr.w	r7, [r8, #40]	; 0x28
  40c076:	f8cd b000 	str.w	fp, [sp]
  40c07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c07c:	462a      	mov	r2, r5
  40c07e:	4621      	mov	r1, r4
  40c080:	4640      	mov	r0, r8
  40c082:	47b8      	blx	r7
                disp_buf_first += disp_w;
  40c084:	eb04 044a 	add.w	r4, r4, sl, lsl #1
                map_buf_first += map_w;
  40c088:	9b07      	ldr	r3, [sp, #28]
  40c08a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c08e:	3601      	adds	r6, #1
  40c090:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
  40c094:	429e      	cmp	r6, r3
  40c096:	ddec      	ble.n	40c072 <map_normal+0xd2>
}
  40c098:	b00f      	add	sp, #60	; 0x3c
  40c09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(opa > LV_OPA_MAX) {
  40c09e:	2ffd      	cmp	r7, #253	; 0xfd
  40c0a0:	d812      	bhi.n	40c0c8 <map_normal+0x128>
  40c0a2:	f04f 0800 	mov.w	r8, #0
  40c0a6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  40c0aa:	e069      	b.n	40c180 <map_normal+0x1e0>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
  40c0ac:	ea4f 0249 	mov.w	r2, r9, lsl #1
  40c0b0:	4629      	mov	r1, r5
  40c0b2:	4620      	mov	r0, r4
  40c0b4:	4b6a      	ldr	r3, [pc, #424]	; (40c260 <map_normal+0x2c0>)
  40c0b6:	4798      	blx	r3
                disp_buf_first += disp_w;
  40c0b8:	eb04 044a 	add.w	r4, r4, sl, lsl #1
                map_buf_first += map_w;
  40c0bc:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40c0c0:	3601      	adds	r6, #1
  40c0c2:	42be      	cmp	r6, r7
  40c0c4:	dbf2      	blt.n	40c0ac <map_normal+0x10c>
  40c0c6:	e7e7      	b.n	40c098 <map_normal+0xf8>
  40c0c8:	2600      	movs	r6, #0
  40c0ca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40c0cc:	f8dd 801c 	ldr.w	r8, [sp, #28]
  40c0d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  40c0d4:	f8dd a020 	ldr.w	sl, [sp, #32]
  40c0d8:	e7f3      	b.n	40c0c2 <map_normal+0x122>
  40c0da:	f835 301c 	ldrh.w	r3, [r5, ip, lsl #1]
  40c0de:	f834 101c 	ldrh.w	r1, [r4, ip, lsl #1]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c0e2:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  40c0e6:	f3c1 06c4 	ubfx	r6, r1, #3, #5
  40c0ea:	f1c7 00ff 	rsb	r0, r7, #255	; 0xff
  40c0ee:	fb00 f606 	mul.w	r6, r0, r6
  40c0f2:	fb07 6202 	mla	r2, r7, r2, r6
  40c0f6:	3280      	adds	r2, #128	; 0x80
  40c0f8:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40c0fc:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  40c100:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40c104:	f362 0ac7 	bfi	sl, r2, #3, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c108:	f003 0607 	and.w	r6, r3, #7
  40c10c:	f3c3 3242 	ubfx	r2, r3, #13, #3
  40c110:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
  40c114:	f001 0e07 	and.w	lr, r1, #7
  40c118:	f3c1 3642 	ubfx	r6, r1, #13, #3
  40c11c:	eb06 06ce 	add.w	r6, r6, lr, lsl #3
  40c120:	fb06 f600 	mul.w	r6, r6, r0
  40c124:	fb02 6207 	mla	r2, r2, r7, r6
  40c128:	3280      	adds	r2, #128	; 0x80
  40c12a:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40c12e:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  40c132:	f3c2 6682 	ubfx	r6, r2, #26, #3
  40c136:	f366 0a02 	bfi	sl, r6, #0, #3
  40c13a:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40c13e:	f362 3a4f 	bfi	sl, r2, #13, #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c142:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40c146:	f3c1 2104 	ubfx	r1, r1, #8, #5
  40c14a:	fb01 f000 	mul.w	r0, r1, r0
  40c14e:	fb03 0307 	mla	r3, r3, r7, r0
  40c152:	3380      	adds	r3, #128	; 0x80
  40c154:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c158:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c15c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c160:	f363 2a0c 	bfi	sl, r3, #8, #5
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
  40c164:	f824 a01c 	strh.w	sl, [r4, ip, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
  40c168:	f10c 0c01 	add.w	ip, ip, #1
  40c16c:	45dc      	cmp	ip, fp
  40c16e:	dbb4      	blt.n	40c0da <map_normal+0x13a>
                disp_buf_first += disp_w;
  40c170:	9b08      	ldr	r3, [sp, #32]
  40c172:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                map_buf_first += map_w;
  40c176:	9b07      	ldr	r3, [sp, #28]
  40c178:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40c17c:	f108 0801 	add.w	r8, r8, #1
  40c180:	45c8      	cmp	r8, r9
  40c182:	da89      	bge.n	40c098 <map_normal+0xf8>
  40c184:	f04f 0c00 	mov.w	ip, #0
  40c188:	e7f0      	b.n	40c16c <map_normal+0x1cc>
                    MAP_NORMAL_MASK_PX(x)
  40c18a:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40c18e:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40c192:	3201      	adds	r2, #1
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40c194:	3301      	adds	r3, #1
  40c196:	455b      	cmp	r3, fp
  40c198:	f280 81e6 	bge.w	40c568 <map_normal+0x5c8>
  40c19c:	f012 0f03 	tst.w	r2, #3
  40c1a0:	d04c      	beq.n	40c23c <map_normal+0x29c>
                    MAP_NORMAL_MASK_PX(x)
  40c1a2:	7811      	ldrb	r1, [r2, #0]
  40c1a4:	2900      	cmp	r1, #0
  40c1a6:	d0f4      	beq.n	40c192 <map_normal+0x1f2>
  40c1a8:	29ff      	cmp	r1, #255	; 0xff
  40c1aa:	d0ee      	beq.n	40c18a <map_normal+0x1ea>
  40c1ac:	f835 7013 	ldrh.w	r7, [r5, r3, lsl #1]
  40c1b0:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c1b4:	f3c7 00c4 	ubfx	r0, r7, #3, #5
  40c1b8:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40c1bc:	f1c1 0eff 	rsb	lr, r1, #255	; 0xff
  40c1c0:	fb0e fc0c 	mul.w	ip, lr, ip
  40c1c4:	fb01 c000 	mla	r0, r1, r0, ip
  40c1c8:	3080      	adds	r0, #128	; 0x80
  40c1ca:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c1ce:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c1d2:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c1d6:	f360 08c7 	bfi	r8, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c1da:	f007 0c07 	and.w	ip, r7, #7
  40c1de:	f3c7 3042 	ubfx	r0, r7, #13, #3
  40c1e2:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
  40c1e6:	f006 0a07 	and.w	sl, r6, #7
  40c1ea:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40c1ee:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  40c1f2:	fb0c fc0e 	mul.w	ip, ip, lr
  40c1f6:	fb00 c001 	mla	r0, r0, r1, ip
  40c1fa:	3080      	adds	r0, #128	; 0x80
  40c1fc:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c200:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c204:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40c208:	f36c 0802 	bfi	r8, ip, #0, #3
  40c20c:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40c210:	f360 384f 	bfi	r8, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c214:	f3c7 2704 	ubfx	r7, r7, #8, #5
  40c218:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40c21c:	fb06 fe0e 	mul.w	lr, r6, lr
  40c220:	fb07 e101 	mla	r1, r7, r1, lr
  40c224:	3180      	adds	r1, #128	; 0x80
  40c226:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40c22a:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40c22e:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40c232:	f361 280c 	bfi	r8, r1, #8, #5
  40c236:	f824 8013 	strh.w	r8, [r4, r3, lsl #1]
  40c23a:	e7aa      	b.n	40c192 <map_normal+0x1f2>
  40c23c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  40c240:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
  40c244:	f8bd b014 	ldrh.w	fp, [sp, #20]
  40c248:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
  40c24c:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
  40c250:	f8ad 8036 	strh.w	r8, [sp, #54]	; 0x36
  40c254:	e01b      	b.n	40c28e <map_normal+0x2ee>
  40c256:	bf00      	nop
  40c258:	00409709 	.word	0x00409709
  40c25c:	004164c7 	.word	0x004164c7
  40c260:	004176fd 	.word	0x004176fd
                            disp_buf_first[x] = map_buf_first[x];
  40c264:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40c268:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
  40c26c:	1c59      	adds	r1, r3, #1
  40c26e:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40c272:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
  40c276:	1c99      	adds	r1, r3, #2
  40c278:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40c27c:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                            disp_buf_first[x + 3] = map_buf_first[x + 3];
  40c280:	1cd9      	adds	r1, r3, #3
  40c282:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40c286:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                    mask32++;
  40c28a:	3204      	adds	r2, #4
                for(; x < x_end4; x += 4) {
  40c28c:	3304      	adds	r3, #4
  40c28e:	9903      	ldr	r1, [sp, #12]
  40c290:	428b      	cmp	r3, r1
  40c292:	f280 8176 	bge.w	40c582 <map_normal+0x5e2>
                    if(*mask32) {
  40c296:	6811      	ldr	r1, [r2, #0]
  40c298:	2900      	cmp	r1, #0
  40c29a:	d0f6      	beq.n	40c28a <map_normal+0x2ea>
                        if((*mask32) == 0xFFFFFFFF) {
  40c29c:	f1b1 3fff 	cmp.w	r1, #4294967295
  40c2a0:	d0e0      	beq.n	40c264 <map_normal+0x2c4>
                            MAP_NORMAL_MASK_PX(x)
  40c2a2:	7811      	ldrb	r1, [r2, #0]
  40c2a4:	2900      	cmp	r1, #0
  40c2a6:	d049      	beq.n	40c33c <map_normal+0x39c>
  40c2a8:	29ff      	cmp	r1, #255	; 0xff
  40c2aa:	f000 8146 	beq.w	40c53a <map_normal+0x59a>
  40c2ae:	f835 c013 	ldrh.w	ip, [r5, r3, lsl #1]
  40c2b2:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c2b6:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40c2ba:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40c2be:	f1c1 09ff 	rsb	r9, r1, #255	; 0xff
  40c2c2:	fb09 f808 	mul.w	r8, r9, r8
  40c2c6:	fb01 8000 	mla	r0, r1, r0, r8
  40c2ca:	3080      	adds	r0, #128	; 0x80
  40c2cc:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40c2d0:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40c2d4:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c2d8:	f360 0ec7 	bfi	lr, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c2dc:	f00c 0807 	and.w	r8, ip, #7
  40c2e0:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40c2e4:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40c2e8:	f006 0707 	and.w	r7, r6, #7
  40c2ec:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40c2f0:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40c2f4:	fb08 f809 	mul.w	r8, r8, r9
  40c2f8:	fb00 8001 	mla	r0, r0, r1, r8
  40c2fc:	3080      	adds	r0, #128	; 0x80
  40c2fe:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40c302:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40c306:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40c30a:	f368 0e02 	bfi	lr, r8, #0, #3
  40c30e:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40c312:	f360 3e4f 	bfi	lr, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c316:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40c31a:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40c31e:	fb06 f609 	mul.w	r6, r6, r9
  40c322:	fb0c 6601 	mla	r6, ip, r1, r6
  40c326:	3680      	adds	r6, #128	; 0x80
  40c328:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40c32c:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40c330:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40c334:	f366 2e0c 	bfi	lr, r6, #8, #5
  40c338:	f824 e013 	strh.w	lr, [r4, r3, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 1)
  40c33c:	7851      	ldrb	r1, [r2, #1]
  40c33e:	2900      	cmp	r1, #0
  40c340:	d056      	beq.n	40c3f0 <map_normal+0x450>
  40c342:	29ff      	cmp	r1, #255	; 0xff
  40c344:	f000 80fe 	beq.w	40c544 <map_normal+0x5a4>
  40c348:	f103 0901 	add.w	r9, r3, #1
  40c34c:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40c350:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c354:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40c358:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40c35c:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40c360:	9705      	str	r7, [sp, #20]
  40c362:	fb07 f808 	mul.w	r8, r7, r8
  40c366:	fb01 8000 	mla	r0, r1, r0, r8
  40c36a:	3080      	adds	r0, #128	; 0x80
  40c36c:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40c370:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40c374:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c378:	9f04      	ldr	r7, [sp, #16]
  40c37a:	f360 07c7 	bfi	r7, r0, #3, #5
  40c37e:	9704      	str	r7, [sp, #16]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c380:	f00c 0807 	and.w	r8, ip, #7
  40c384:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40c388:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40c38c:	f006 0807 	and.w	r8, r6, #7
  40c390:	4647      	mov	r7, r8
  40c392:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40c396:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40c39a:	9f05      	ldr	r7, [sp, #20]
  40c39c:	fb08 f807 	mul.w	r8, r8, r7
  40c3a0:	fb00 8001 	mla	r0, r0, r1, r8
  40c3a4:	3080      	adds	r0, #128	; 0x80
  40c3a6:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40c3aa:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40c3ae:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40c3b2:	9f04      	ldr	r7, [sp, #16]
  40c3b4:	f368 0702 	bfi	r7, r8, #0, #3
  40c3b8:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40c3bc:	f360 374f 	bfi	r7, r0, #13, #3
  40c3c0:	4638      	mov	r0, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c3c2:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40c3c6:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40c3ca:	9f05      	ldr	r7, [sp, #20]
  40c3cc:	fb06 f607 	mul.w	r6, r6, r7
  40c3d0:	fb0c 6601 	mla	r6, ip, r1, r6
  40c3d4:	3680      	adds	r6, #128	; 0x80
  40c3d6:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40c3da:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40c3de:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40c3e2:	4601      	mov	r1, r0
  40c3e4:	f366 210c 	bfi	r1, r6, #8, #5
  40c3e8:	f8ad 1010 	strh.w	r1, [sp, #16]
  40c3ec:	f824 1019 	strh.w	r1, [r4, r9, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 2)
  40c3f0:	7891      	ldrb	r1, [r2, #2]
  40c3f2:	2900      	cmp	r1, #0
  40c3f4:	d04e      	beq.n	40c494 <map_normal+0x4f4>
  40c3f6:	29ff      	cmp	r1, #255	; 0xff
  40c3f8:	f000 80aa 	beq.w	40c550 <map_normal+0x5b0>
  40c3fc:	f103 0902 	add.w	r9, r3, #2
  40c400:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40c404:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c408:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40c40c:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40c410:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40c414:	9705      	str	r7, [sp, #20]
  40c416:	fb07 f808 	mul.w	r8, r7, r8
  40c41a:	fb01 8000 	mla	r0, r1, r0, r8
  40c41e:	3080      	adds	r0, #128	; 0x80
  40c420:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40c424:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40c428:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c42c:	f360 0ac7 	bfi	sl, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c430:	f00c 0807 	and.w	r8, ip, #7
  40c434:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40c438:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40c43c:	f006 0807 	and.w	r8, r6, #7
  40c440:	4647      	mov	r7, r8
  40c442:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40c446:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40c44a:	9f05      	ldr	r7, [sp, #20]
  40c44c:	fb08 f807 	mul.w	r8, r8, r7
  40c450:	fb00 8001 	mla	r0, r0, r1, r8
  40c454:	3080      	adds	r0, #128	; 0x80
  40c456:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40c45a:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40c45e:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40c462:	f368 0a02 	bfi	sl, r8, #0, #3
  40c466:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40c46a:	f360 3a4f 	bfi	sl, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c46e:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40c472:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40c476:	fb06 f607 	mul.w	r6, r6, r7
  40c47a:	fb0c 6601 	mla	r6, ip, r1, r6
  40c47e:	3680      	adds	r6, #128	; 0x80
  40c480:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40c484:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40c488:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40c48c:	f366 2a0c 	bfi	sl, r6, #8, #5
  40c490:	f824 a019 	strh.w	sl, [r4, r9, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 3)
  40c494:	78d1      	ldrb	r1, [r2, #3]
  40c496:	2900      	cmp	r1, #0
  40c498:	f43f aef7 	beq.w	40c28a <map_normal+0x2ea>
  40c49c:	29ff      	cmp	r1, #255	; 0xff
  40c49e:	d05d      	beq.n	40c55c <map_normal+0x5bc>
  40c4a0:	f103 0903 	add.w	r9, r3, #3
  40c4a4:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40c4a8:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c4ac:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40c4b0:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40c4b4:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40c4b8:	9705      	str	r7, [sp, #20]
  40c4ba:	fb07 f808 	mul.w	r8, r7, r8
  40c4be:	fb01 8000 	mla	r0, r1, r0, r8
  40c4c2:	3080      	adds	r0, #128	; 0x80
  40c4c4:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40c4c8:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40c4cc:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c4d0:	f360 0bc7 	bfi	fp, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c4d4:	f00c 0807 	and.w	r8, ip, #7
  40c4d8:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40c4dc:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40c4e0:	f006 0807 	and.w	r8, r6, #7
  40c4e4:	4647      	mov	r7, r8
  40c4e6:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40c4ea:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40c4ee:	9f05      	ldr	r7, [sp, #20]
  40c4f0:	fb08 f807 	mul.w	r8, r8, r7
  40c4f4:	fb00 8001 	mla	r0, r0, r1, r8
  40c4f8:	3080      	adds	r0, #128	; 0x80
  40c4fa:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40c4fe:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40c502:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40c506:	f368 0b02 	bfi	fp, r8, #0, #3
  40c50a:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40c50e:	f360 3b4f 	bfi	fp, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c512:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40c516:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40c51a:	fb06 f607 	mul.w	r6, r6, r7
  40c51e:	fb0c 6601 	mla	r6, ip, r1, r6
  40c522:	3680      	adds	r6, #128	; 0x80
  40c524:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40c528:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40c52c:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40c530:	f366 2b0c 	bfi	fp, r6, #8, #5
  40c534:	f824 b019 	strh.w	fp, [r4, r9, lsl #1]
  40c538:	e6a7      	b.n	40c28a <map_normal+0x2ea>
                            MAP_NORMAL_MASK_PX(x)
  40c53a:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40c53e:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40c542:	e6fb      	b.n	40c33c <map_normal+0x39c>
                            MAP_NORMAL_MASK_PX(x + 1)
  40c544:	1c59      	adds	r1, r3, #1
  40c546:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40c54a:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40c54e:	e74f      	b.n	40c3f0 <map_normal+0x450>
                            MAP_NORMAL_MASK_PX(x + 2)
  40c550:	1c99      	adds	r1, r3, #2
  40c552:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40c556:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40c55a:	e79b      	b.n	40c494 <map_normal+0x4f4>
                            MAP_NORMAL_MASK_PX(x + 3)
  40c55c:	1cd9      	adds	r1, r3, #3
  40c55e:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40c562:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40c566:	e690      	b.n	40c28a <map_normal+0x2ea>
  40c568:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  40c56c:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
  40c570:	f8bd b014 	ldrh.w	fp, [sp, #20]
  40c574:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
  40c578:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
  40c57c:	f8ad 8036 	strh.w	r8, [sp, #54]	; 0x36
  40c580:	e685      	b.n	40c28e <map_normal+0x2ee>
  40c582:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  40c586:	f8ad b014 	strh.w	fp, [sp, #20]
  40c58a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40c58e:	f8ad a02c 	strh.w	sl, [sp, #44]	; 0x2c
  40c592:	f8ad e02e 	strh.w	lr, [sp, #46]	; 0x2e
  40c596:	f8bd 8036 	ldrh.w	r8, [sp, #54]	; 0x36
  40c59a:	e005      	b.n	40c5a8 <map_normal+0x608>
                    MAP_NORMAL_MASK_PX(x)
  40c59c:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40c5a0:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40c5a4:	3201      	adds	r2, #1
                for(; x < draw_area_w ; x++) {
  40c5a6:	3301      	adds	r3, #1
  40c5a8:	455b      	cmp	r3, fp
  40c5aa:	da4c      	bge.n	40c646 <map_normal+0x6a6>
                    MAP_NORMAL_MASK_PX(x)
  40c5ac:	7811      	ldrb	r1, [r2, #0]
  40c5ae:	2900      	cmp	r1, #0
  40c5b0:	d0f8      	beq.n	40c5a4 <map_normal+0x604>
  40c5b2:	29ff      	cmp	r1, #255	; 0xff
  40c5b4:	d0f2      	beq.n	40c59c <map_normal+0x5fc>
  40c5b6:	f835 7013 	ldrh.w	r7, [r5, r3, lsl #1]
  40c5ba:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c5be:	f3c7 00c4 	ubfx	r0, r7, #3, #5
  40c5c2:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40c5c6:	f1c1 0eff 	rsb	lr, r1, #255	; 0xff
  40c5ca:	fb0e fc0c 	mul.w	ip, lr, ip
  40c5ce:	fb01 c000 	mla	r0, r1, r0, ip
  40c5d2:	3080      	adds	r0, #128	; 0x80
  40c5d4:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c5d8:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c5dc:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c5e0:	f360 09c7 	bfi	r9, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c5e4:	f007 0c07 	and.w	ip, r7, #7
  40c5e8:	f3c7 3042 	ubfx	r0, r7, #13, #3
  40c5ec:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
  40c5f0:	f006 0a07 	and.w	sl, r6, #7
  40c5f4:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40c5f8:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  40c5fc:	fb0c fc0e 	mul.w	ip, ip, lr
  40c600:	fb00 c001 	mla	r0, r0, r1, ip
  40c604:	3080      	adds	r0, #128	; 0x80
  40c606:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c60a:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c60e:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40c612:	f36c 0902 	bfi	r9, ip, #0, #3
  40c616:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40c61a:	f360 394f 	bfi	r9, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c61e:	f3c7 2704 	ubfx	r7, r7, #8, #5
  40c622:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40c626:	fb06 fe0e 	mul.w	lr, r6, lr
  40c62a:	fb07 e101 	mla	r1, r7, r1, lr
  40c62e:	3180      	adds	r1, #128	; 0x80
  40c630:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40c634:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40c638:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40c63c:	f361 290c 	bfi	r9, r1, #8, #5
  40c640:	f824 9013 	strh.w	r9, [r4, r3, lsl #1]
  40c644:	e7ae      	b.n	40c5a4 <map_normal+0x604>
                disp_buf_first += disp_w;
  40c646:	9b08      	ldr	r3, [sp, #32]
  40c648:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                mask += draw_area_w;
  40c64c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40c64e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40c650:	4413      	add	r3, r2
  40c652:	931a      	str	r3, [sp, #104]	; 0x68
                map_buf_first += map_w;
  40c654:	9b07      	ldr	r3, [sp, #28]
  40c656:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40c65a:	9b06      	ldr	r3, [sp, #24]
  40c65c:	3301      	adds	r3, #1
  40c65e:	9306      	str	r3, [sp, #24]
  40c660:	9b06      	ldr	r3, [sp, #24]
  40c662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c664:	4293      	cmp	r3, r2
  40c666:	f6bf ad17 	bge.w	40c098 <map_normal+0xf8>
  40c66a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40c66c:	2300      	movs	r3, #0
  40c66e:	e592      	b.n	40c196 <map_normal+0x1f6>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  40c670:	9b03      	ldr	r3, [sp, #12]
  40c672:	f835 001e 	ldrh.w	r0, [r5, lr, lsl #1]
  40c676:	f834 101e 	ldrh.w	r1, [r4, lr, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c67a:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  40c67e:	f3c1 07c4 	ubfx	r7, r1, #3, #5
  40c682:	f1c3 0cff 	rsb	ip, r3, #255	; 0xff
  40c686:	fb0c f707 	mul.w	r7, ip, r7
  40c68a:	fb03 7202 	mla	r2, r3, r2, r7
  40c68e:	3280      	adds	r2, #128	; 0x80
  40c690:	eb02 2702 	add.w	r7, r2, r2, lsl #8
  40c694:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
  40c698:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40c69c:	f362 06c7 	bfi	r6, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c6a0:	f000 0707 	and.w	r7, r0, #7
  40c6a4:	f3c0 3242 	ubfx	r2, r0, #13, #3
  40c6a8:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
  40c6ac:	f001 0907 	and.w	r9, r1, #7
  40c6b0:	f3c1 3742 	ubfx	r7, r1, #13, #3
  40c6b4:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
  40c6b8:	fb07 f70c 	mul.w	r7, r7, ip
  40c6bc:	fb02 7203 	mla	r2, r2, r3, r7
  40c6c0:	3280      	adds	r2, #128	; 0x80
  40c6c2:	eb02 2702 	add.w	r7, r2, r2, lsl #8
  40c6c6:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
  40c6ca:	f3c2 6782 	ubfx	r7, r2, #26, #3
  40c6ce:	f367 0602 	bfi	r6, r7, #0, #3
  40c6d2:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40c6d6:	f362 364f 	bfi	r6, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c6da:	f3c0 2004 	ubfx	r0, r0, #8, #5
  40c6de:	f3c1 2104 	ubfx	r1, r1, #8, #5
  40c6e2:	fb01 fc0c 	mul.w	ip, r1, ip
  40c6e6:	fb00 c303 	mla	r3, r0, r3, ip
  40c6ea:	3380      	adds	r3, #128	; 0x80
  40c6ec:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
  40c6f0:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
  40c6f4:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c6f8:	f363 260c 	bfi	r6, r3, #8, #5
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
  40c6fc:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
  40c700:	f108 0801 	add.w	r8, r8, #1
  40c704:	45d8      	cmp	r8, fp
  40c706:	da0c      	bge.n	40c722 <map_normal+0x782>
                    if(mask[x]) {
  40c708:	46c6      	mov	lr, r8
  40c70a:	f81a 3008 	ldrb.w	r3, [sl, r8]
  40c70e:	2b00      	cmp	r3, #0
  40c710:	d0f6      	beq.n	40c700 <map_normal+0x760>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  40c712:	2bfc      	cmp	r3, #252	; 0xfc
  40c714:	d8ac      	bhi.n	40c670 <map_normal+0x6d0>
  40c716:	9a03      	ldr	r2, [sp, #12]
  40c718:	fb03 f302 	mul.w	r3, r3, r2
  40c71c:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40c720:	e7a7      	b.n	40c672 <map_normal+0x6d2>
                disp_buf_first += disp_w;
  40c722:	9b08      	ldr	r3, [sp, #32]
  40c724:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                mask += draw_area_w;
  40c728:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c72a:	449a      	add	sl, r3
                map_buf_first += map_w;
  40c72c:	9b07      	ldr	r3, [sp, #28]
  40c72e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40c732:	9b04      	ldr	r3, [sp, #16]
  40c734:	3301      	adds	r3, #1
  40c736:	9304      	str	r3, [sp, #16]
  40c738:	9b04      	ldr	r3, [sp, #16]
  40c73a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c73c:	4293      	cmp	r3, r2
  40c73e:	f6bf acab 	bge.w	40c098 <map_normal+0xf8>
  40c742:	f04f 0800 	mov.w	r8, #0
  40c746:	e7dd      	b.n	40c704 <map_normal+0x764>
  40c748:	2300      	movs	r3, #0
  40c74a:	9304      	str	r3, [sp, #16]
  40c74c:	9703      	str	r7, [sp, #12]
  40c74e:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
  40c752:	e7f1      	b.n	40c738 <map_normal+0x798>

0040c754 <fill_normal>:
{
  40c754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c758:	b091      	sub	sp, #68	; 0x44
  40c75a:	4605      	mov	r5, r0
  40c75c:	9103      	str	r1, [sp, #12]
  40c75e:	4616      	mov	r6, r2
  40c760:	920a      	str	r2, [sp, #40]	; 0x28
  40c762:	461c      	mov	r4, r3
  40c764:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40c768:	9006      	str	r0, [sp, #24]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40c76a:	4bc5      	ldr	r3, [pc, #788]	; (40ca80 <fill_normal+0x32c>)
  40c76c:	4798      	blx	r3
  40c76e:	900b      	str	r0, [sp, #44]	; 0x2c
  40c770:	88ab      	ldrh	r3, [r5, #4]
  40c772:	882a      	ldrh	r2, [r5, #0]
  40c774:	1a9b      	subs	r3, r3, r2
  40c776:	b29b      	uxth	r3, r3
  40c778:	3301      	adds	r3, #1
  40c77a:	b218      	sxth	r0, r3
  40c77c:	4605      	mov	r5, r0
  40c77e:	9008      	str	r0, [sp, #32]
  40c780:	88b3      	ldrh	r3, [r6, #4]
  40c782:	4630      	mov	r0, r6
  40c784:	f9b6 1000 	ldrsh.w	r1, [r6]
  40c788:	b28a      	uxth	r2, r1
  40c78a:	1a9b      	subs	r3, r3, r2
  40c78c:	b29b      	uxth	r3, r3
  40c78e:	3301      	adds	r3, #1
  40c790:	b21b      	sxth	r3, r3
  40c792:	9307      	str	r3, [sp, #28]
    int32_t draw_area_w = lv_area_get_width(draw_area);
  40c794:	461e      	mov	r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40c796:	88c3      	ldrh	r3, [r0, #6]
  40c798:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  40c79c:	b290      	uxth	r0, r2
  40c79e:	1a1b      	subs	r3, r3, r0
  40c7a0:	b29b      	uxth	r3, r3
  40c7a2:	3301      	adds	r3, #1
  40c7a4:	b21b      	sxth	r3, r3
  40c7a6:	930d      	str	r3, [sp, #52]	; 0x34
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
  40c7a8:	4696      	mov	lr, r2
  40c7aa:	fb02 1205 	mla	r2, r2, r5, r1
  40c7ae:	9b03      	ldr	r3, [sp, #12]
  40c7b0:	eb03 0542 	add.w	r5, r3, r2, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40c7b4:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
  40c7b8:	2b01      	cmp	r3, #1
  40c7ba:	d00f      	beq.n	40c7dc <fill_normal+0x88>
        last_dest_color.full = disp_buf_first[0].full;
  40c7bc:	9b03      	ldr	r3, [sp, #12]
  40c7be:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  40c7c2:	461a      	mov	r2, r3
        int32_t x_end4 = draw_area_w - 4;
  40c7c4:	9907      	ldr	r1, [sp, #28]
  40c7c6:	3904      	subs	r1, #4
  40c7c8:	9103      	str	r1, [sp, #12]
        if(opa > LV_OPA_MAX) {
  40c7ca:	9906      	ldr	r1, [sp, #24]
  40c7cc:	29fd      	cmp	r1, #253	; 0xfd
  40c7ce:	f200 8335 	bhi.w	40ce3c <fill_normal+0x6e8>
  40c7d2:	f04f 0800 	mov.w	r8, #0
  40c7d6:	4641      	mov	r1, r8
  40c7d8:	46a3      	mov	fp, r4
  40c7da:	e3a7      	b.n	40cf2c <fill_normal+0x7d8>
        if(opa > LV_OPA_MAX) {
  40c7dc:	9b06      	ldr	r3, [sp, #24]
  40c7de:	2bfd      	cmp	r3, #253	; 0xfd
  40c7e0:	d922      	bls.n	40c828 <fill_normal+0xd4>
            if(disp->driver.gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
  40c7e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40c7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40c7e6:	b123      	cbz	r3, 40c7f2 <fill_normal+0x9e>
  40c7e8:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c7ea:	4ba6      	ldr	r3, [pc, #664]	; (40ca84 <fill_normal+0x330>)
  40c7ec:	4798      	blx	r3
  40c7ee:	28f0      	cmp	r0, #240	; 0xf0
  40c7f0:	d804      	bhi.n	40c7fc <fill_normal+0xa8>
{
  40c7f2:	2600      	movs	r6, #0
  40c7f4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  40c7f6:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40c7fa:	e010      	b.n	40c81e <fill_normal+0xca>
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
  40c7fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40c7fe:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  40c800:	f8ad 4000 	strh.w	r4, [sp]
  40c804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c806:	9a08      	ldr	r2, [sp, #32]
  40c808:	9903      	ldr	r1, [sp, #12]
  40c80a:	47a8      	blx	r5
                return;
  40c80c:	e009      	b.n	40c822 <fill_normal+0xce>
                lv_color_fill(disp_buf_first, color, draw_area_w);
  40c80e:	9a07      	ldr	r2, [sp, #28]
  40c810:	4621      	mov	r1, r4
  40c812:	4628      	mov	r0, r5
  40c814:	4b9c      	ldr	r3, [pc, #624]	; (40ca88 <fill_normal+0x334>)
  40c816:	4798      	blx	r3
                disp_buf_first += disp_w;
  40c818:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40c81c:	3601      	adds	r6, #1
  40c81e:	42be      	cmp	r6, r7
  40c820:	dbf5      	blt.n	40c80e <fill_normal+0xba>
}
  40c822:	b011      	add	sp, #68	; 0x44
  40c824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(disp->driver.gpu_blend_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
  40c828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40c82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40c82c:	b123      	cbz	r3, 40c838 <fill_normal+0xe4>
  40c82e:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c830:	4b94      	ldr	r3, [pc, #592]	; (40ca84 <fill_normal+0x330>)
  40c832:	4798      	blx	r3
  40c834:	28f0      	cmp	r0, #240	; 0xf0
  40c836:	d864      	bhi.n	40c902 <fill_normal+0x1ae>
            lv_color_t last_dest_color = LV_COLOR_BLACK;
  40c838:	f04f 0e00 	mov.w	lr, #0
  40c83c:	4670      	mov	r0, lr
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c83e:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  40c842:	9f06      	ldr	r7, [sp, #24]
  40c844:	fb07 f303 	mul.w	r3, r7, r3
  40c848:	3380      	adds	r3, #128	; 0x80
  40c84a:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c84e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c852:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c856:	f04f 0200 	mov.w	r2, #0
  40c85a:	f363 02c7 	bfi	r2, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c85e:	f004 0107 	and.w	r1, r4, #7
  40c862:	f3c4 3342 	ubfx	r3, r4, #13, #3
  40c866:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  40c86a:	fb03 f307 	mul.w	r3, r3, r7
  40c86e:	3380      	adds	r3, #128	; 0x80
  40c870:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40c874:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40c878:	f3c3 6182 	ubfx	r1, r3, #26, #3
  40c87c:	f361 0202 	bfi	r2, r1, #0, #3
  40c880:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40c884:	f363 324f 	bfi	r2, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c888:	f3c4 2304 	ubfx	r3, r4, #8, #5
  40c88c:	fb03 f307 	mul.w	r3, r3, r7
  40c890:	3380      	adds	r3, #128	; 0x80
  40c892:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40c896:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40c89a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c89e:	f363 220c 	bfi	r2, r3, #8, #5
}

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
  40c8a2:	f3c4 01c4 	ubfx	r1, r4, #3, #5
  40c8a6:	46bc      	mov	ip, r7
  40c8a8:	b2bb      	uxth	r3, r7
  40c8aa:	fb01 f103 	mul.w	r1, r1, r3
  40c8ae:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
  40c8b2:	f004 0707 	and.w	r7, r4, #7
  40c8b6:	f3c4 3142 	ubfx	r1, r4, #13, #3
  40c8ba:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  40c8be:	fb13 f101 	smulbb	r1, r3, r1
  40c8c2:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
  40c8c6:	f3c4 2404 	ubfx	r4, r4, #8, #5
  40c8ca:	fb03 f304 	mul.w	r3, r3, r4
  40c8ce:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            lv_opa_t opa_inv = 255 - opa;
  40c8d2:	4661      	mov	r1, ip
  40c8d4:	43cc      	mvns	r4, r1
  40c8d6:	b2e4      	uxtb	r4, r4
  40c8d8:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  40c8dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
            for(y = 0; y < draw_area_h; y++) {
  40c8e0:	e069      	b.n	40c9b6 <fill_normal+0x262>
                for(x = 0; x < draw_area_w ; x++) blend_buf[x].full = color.full;
  40c8e2:	4a6a      	ldr	r2, [pc, #424]	; (40ca8c <fill_normal+0x338>)
  40c8e4:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
  40c8e8:	3301      	adds	r3, #1
  40c8ea:	42b3      	cmp	r3, r6
  40c8ec:	dbf9      	blt.n	40c8e2 <fill_normal+0x18e>
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c8ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c8f0:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
  40c8f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40c8f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
  40c8fa:	4690      	mov	r8, r2
  40c8fc:	f8dd a018 	ldr.w	sl, [sp, #24]
  40c900:	e00c      	b.n	40c91c <fill_normal+0x1c8>
  40c902:	2300      	movs	r3, #0
  40c904:	e7f1      	b.n	40c8ea <fill_normal+0x196>
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
  40c906:	6ab7      	ldr	r7, [r6, #40]	; 0x28
  40c908:	f8cd a000 	str.w	sl, [sp]
  40c90c:	9b07      	ldr	r3, [sp, #28]
  40c90e:	4a5f      	ldr	r2, [pc, #380]	; (40ca8c <fill_normal+0x338>)
  40c910:	4629      	mov	r1, r5
  40c912:	4630      	mov	r0, r6
  40c914:	47b8      	blx	r7
                    disp_buf_first += disp_w;
  40c916:	eb05 0549 	add.w	r5, r5, r9, lsl #1
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c91a:	3401      	adds	r4, #1
  40c91c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40c920:	429c      	cmp	r4, r3
  40c922:	ddf0      	ble.n	40c906 <fill_normal+0x1b2>
  40c924:	e77d      	b.n	40c822 <fill_normal+0xce>
                    disp_buf_first[x] = last_res_color;
  40c926:	803a      	strh	r2, [r7, #0]
                for(x = 0; x < draw_area_w; x++) {
  40c928:	3101      	adds	r1, #1
  40c92a:	42b1      	cmp	r1, r6
  40c92c:	da3f      	bge.n	40c9ae <fill_normal+0x25a>
                    if(last_dest_color.full != disp_buf_first[x].full) {
  40c92e:	b283      	uxth	r3, r0
  40c930:	eb05 0741 	add.w	r7, r5, r1, lsl #1
  40c934:	f835 9011 	ldrh.w	r9, [r5, r1, lsl #1]
  40c938:	454b      	cmp	r3, r9
  40c93a:	d0f4      	beq.n	40c926 <fill_normal+0x1d2>
                        last_dest_color = disp_buf_first[x];
  40c93c:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40c940:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  40c944:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40c948:	fb04 2303 	mla	r3, r4, r3, r2
  40c94c:	3380      	adds	r3, #128	; 0x80
  40c94e:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c952:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c956:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c95a:	f363 0ac7 	bfi	sl, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40c95e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
  40c962:	f000 0907 	and.w	r9, r0, #7
  40c966:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40c96a:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  40c96e:	fb03 2304 	mla	r3, r3, r4, r2
  40c972:	3380      	adds	r3, #128	; 0x80
  40c974:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c978:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c97c:	f3c3 6282 	ubfx	r2, r3, #26, #3
  40c980:	f362 0a02 	bfi	sl, r2, #0, #3
  40c984:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40c988:	f363 3a4f 	bfi	sl, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40c98c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
  40c990:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40c994:	fb03 2304 	mla	r3, r3, r4, r2
  40c998:	3380      	adds	r3, #128	; 0x80
  40c99a:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c99e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c9a2:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c9a6:	f363 2a0c 	bfi	sl, r3, #8, #5
  40c9aa:	4652      	mov	r2, sl
  40c9ac:	e7bb      	b.n	40c926 <fill_normal+0x1d2>
                disp_buf_first += disp_w;
  40c9ae:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40c9b2:	f10e 0e01 	add.w	lr, lr, #1
  40c9b6:	45e6      	cmp	lr, ip
  40c9b8:	f6bf af33 	bge.w	40c822 <fill_normal+0xce>
  40c9bc:	2100      	movs	r1, #0
  40c9be:	e7b4      	b.n	40c92a <fill_normal+0x1d6>
                    FILL_NORMAL_MASK_PX(x, color)
  40c9c0:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40c9c4:	3201      	adds	r2, #1
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40c9c6:	3301      	adds	r3, #1
  40c9c8:	42b3      	cmp	r3, r6
  40c9ca:	f280 81c0 	bge.w	40cd4e <fill_normal+0x5fa>
  40c9ce:	f012 0f03 	tst.w	r2, #3
  40c9d2:	d04a      	beq.n	40ca6a <fill_normal+0x316>
                    FILL_NORMAL_MASK_PX(x, color)
  40c9d4:	7811      	ldrb	r1, [r2, #0]
  40c9d6:	2900      	cmp	r1, #0
  40c9d8:	d0f4      	beq.n	40c9c4 <fill_normal+0x270>
  40c9da:	29ff      	cmp	r1, #255	; 0xff
  40c9dc:	d0f0      	beq.n	40c9c0 <fill_normal+0x26c>
  40c9de:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c9e2:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40c9e6:	f3ce 09c4 	ubfx	r9, lr, #3, #5
  40c9ea:	f1c1 0cff 	rsb	ip, r1, #255	; 0xff
  40c9ee:	fb0c f909 	mul.w	r9, ip, r9
  40c9f2:	fb01 9000 	mla	r0, r1, r0, r9
  40c9f6:	3080      	adds	r0, #128	; 0x80
  40c9f8:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40c9fc:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40ca00:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40ca04:	f360 07c7 	bfi	r7, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40ca08:	f004 0007 	and.w	r0, r4, #7
  40ca0c:	f3c4 3942 	ubfx	r9, r4, #13, #3
  40ca10:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
  40ca14:	f00e 0a07 	and.w	sl, lr, #7
  40ca18:	f3ce 3942 	ubfx	r9, lr, #13, #3
  40ca1c:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
  40ca20:	fb09 f90c 	mul.w	r9, r9, ip
  40ca24:	fb00 9001 	mla	r0, r0, r1, r9
  40ca28:	3080      	adds	r0, #128	; 0x80
  40ca2a:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40ca2e:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40ca32:	f3c0 6982 	ubfx	r9, r0, #26, #3
  40ca36:	f369 0702 	bfi	r7, r9, #0, #3
  40ca3a:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40ca3e:	f360 374f 	bfi	r7, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40ca42:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40ca46:	f3ce 2e04 	ubfx	lr, lr, #8, #5
  40ca4a:	fb0e fc0c 	mul.w	ip, lr, ip
  40ca4e:	fb00 c101 	mla	r1, r0, r1, ip
  40ca52:	3180      	adds	r1, #128	; 0x80
  40ca54:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40ca58:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40ca5c:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40ca60:	f361 270c 	bfi	r7, r1, #8, #5
  40ca64:	f825 7013 	strh.w	r7, [r5, r3, lsl #1]
  40ca68:	e7ac      	b.n	40c9c4 <fill_normal+0x270>
  40ca6a:	960a      	str	r6, [sp, #40]	; 0x28
  40ca6c:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
  40ca70:	f8bd a026 	ldrh.w	sl, [sp, #38]	; 0x26
  40ca74:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  40ca78:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
  40ca7c:	e015      	b.n	40caaa <fill_normal+0x356>
  40ca7e:	bf00      	nop
  40ca80:	00409709 	.word	0x00409709
  40ca84:	004164c7 	.word	0x004164c7
  40ca88:	00416c67 	.word	0x00416c67
  40ca8c:	2040c40c 	.word	0x2040c40c
                            disp_buf_first[x] = color;
  40ca90:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
                            disp_buf_first[x + 1] = color;
  40ca94:	1c59      	adds	r1, r3, #1
  40ca96:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                            disp_buf_first[x + 2] = color;
  40ca9a:	1c99      	adds	r1, r3, #2
  40ca9c:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                            disp_buf_first[x + 3] = color;
  40caa0:	1cd9      	adds	r1, r3, #3
  40caa2:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                    mask32++;
  40caa6:	3204      	adds	r2, #4
                for(; x <= x_end4; x += 4) {
  40caa8:	3304      	adds	r3, #4
  40caaa:	9903      	ldr	r1, [sp, #12]
  40caac:	428b      	cmp	r3, r1
  40caae:	f300 8158 	bgt.w	40cd62 <fill_normal+0x60e>
                    if(*mask32) {
  40cab2:	6811      	ldr	r1, [r2, #0]
  40cab4:	2900      	cmp	r1, #0
  40cab6:	d0f6      	beq.n	40caa6 <fill_normal+0x352>
                        if((*mask32) == 0xFFFFFFFF) {
  40cab8:	f1b1 3fff 	cmp.w	r1, #4294967295
  40cabc:	d0e8      	beq.n	40ca90 <fill_normal+0x33c>
                            FILL_NORMAL_MASK_PX(x, color)
  40cabe:	7811      	ldrb	r1, [r2, #0]
  40cac0:	2900      	cmp	r1, #0
  40cac2:	d047      	beq.n	40cb54 <fill_normal+0x400>
  40cac4:	29ff      	cmp	r1, #255	; 0xff
  40cac6:	f000 8133 	beq.w	40cd30 <fill_normal+0x5dc>
  40caca:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40cace:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40cad2:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40cad6:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40cada:	fb08 fc0c 	mul.w	ip, r8, ip
  40cade:	fb01 c000 	mla	r0, r1, r0, ip
  40cae2:	3080      	adds	r0, #128	; 0x80
  40cae4:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40cae8:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40caec:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40caf0:	f360 0ec7 	bfi	lr, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40caf4:	f004 0007 	and.w	r0, r4, #7
  40caf8:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40cafc:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40cb00:	f006 0907 	and.w	r9, r6, #7
  40cb04:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40cb08:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
  40cb0c:	fb0c fc08 	mul.w	ip, ip, r8
  40cb10:	fb00 c001 	mla	r0, r0, r1, ip
  40cb14:	3080      	adds	r0, #128	; 0x80
  40cb16:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40cb1a:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40cb1e:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40cb22:	f36c 0e02 	bfi	lr, ip, #0, #3
  40cb26:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40cb2a:	f360 3e4f 	bfi	lr, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40cb2e:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40cb32:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40cb36:	fb06 f608 	mul.w	r6, r6, r8
  40cb3a:	fb00 6601 	mla	r6, r0, r1, r6
  40cb3e:	3680      	adds	r6, #128	; 0x80
  40cb40:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40cb44:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
  40cb48:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40cb4c:	f366 2e0c 	bfi	lr, r6, #8, #5
  40cb50:	f825 e013 	strh.w	lr, [r5, r3, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 1, color)
  40cb54:	7851      	ldrb	r1, [r2, #1]
  40cb56:	2900      	cmp	r1, #0
  40cb58:	d04f      	beq.n	40cbfa <fill_normal+0x4a6>
  40cb5a:	29ff      	cmp	r1, #255	; 0xff
  40cb5c:	f000 80eb 	beq.w	40cd36 <fill_normal+0x5e2>
  40cb60:	f103 0901 	add.w	r9, r3, #1
  40cb64:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40cb68:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40cb6c:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40cb70:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40cb74:	fb08 fc0c 	mul.w	ip, r8, ip
  40cb78:	fb01 c000 	mla	r0, r1, r0, ip
  40cb7c:	3080      	adds	r0, #128	; 0x80
  40cb7e:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40cb82:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40cb86:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40cb8a:	9f04      	ldr	r7, [sp, #16]
  40cb8c:	f360 07c7 	bfi	r7, r0, #3, #5
  40cb90:	9704      	str	r7, [sp, #16]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40cb92:	f004 0007 	and.w	r0, r4, #7
  40cb96:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40cb9a:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40cb9e:	f006 0707 	and.w	r7, r6, #7
  40cba2:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40cba6:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40cbaa:	fb0c fc08 	mul.w	ip, ip, r8
  40cbae:	fb00 c001 	mla	r0, r0, r1, ip
  40cbb2:	3080      	adds	r0, #128	; 0x80
  40cbb4:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40cbb8:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40cbbc:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40cbc0:	9f04      	ldr	r7, [sp, #16]
  40cbc2:	f36c 0702 	bfi	r7, ip, #0, #3
  40cbc6:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40cbca:	f360 374f 	bfi	r7, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40cbce:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40cbd2:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40cbd6:	fb06 f608 	mul.w	r6, r6, r8
  40cbda:	fb00 6601 	mla	r6, r0, r1, r6
  40cbde:	3680      	adds	r6, #128	; 0x80
  40cbe0:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40cbe4:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40cbe8:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40cbec:	4639      	mov	r1, r7
  40cbee:	f360 210c 	bfi	r1, r0, #8, #5
  40cbf2:	f8ad 1010 	strh.w	r1, [sp, #16]
  40cbf6:	f825 1019 	strh.w	r1, [r5, r9, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 2, color)
  40cbfa:	7891      	ldrb	r1, [r2, #2]
  40cbfc:	2900      	cmp	r1, #0
  40cbfe:	d049      	beq.n	40cc94 <fill_normal+0x540>
  40cc00:	29ff      	cmp	r1, #255	; 0xff
  40cc02:	f000 809c 	beq.w	40cd3e <fill_normal+0x5ea>
  40cc06:	f103 0902 	add.w	r9, r3, #2
  40cc0a:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40cc0e:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40cc12:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40cc16:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40cc1a:	fb08 fc0c 	mul.w	ip, r8, ip
  40cc1e:	fb01 c000 	mla	r0, r1, r0, ip
  40cc22:	3080      	adds	r0, #128	; 0x80
  40cc24:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40cc28:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40cc2c:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40cc30:	f360 0ac7 	bfi	sl, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40cc34:	f004 0007 	and.w	r0, r4, #7
  40cc38:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40cc3c:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40cc40:	f006 0707 	and.w	r7, r6, #7
  40cc44:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40cc48:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40cc4c:	fb0c fc08 	mul.w	ip, ip, r8
  40cc50:	fb00 c001 	mla	r0, r0, r1, ip
  40cc54:	3080      	adds	r0, #128	; 0x80
  40cc56:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40cc5a:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40cc5e:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40cc62:	f36c 0a02 	bfi	sl, ip, #0, #3
  40cc66:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40cc6a:	f360 3a4f 	bfi	sl, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40cc6e:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40cc72:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40cc76:	fb06 f608 	mul.w	r6, r6, r8
  40cc7a:	fb00 6601 	mla	r6, r0, r1, r6
  40cc7e:	3680      	adds	r6, #128	; 0x80
  40cc80:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40cc84:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40cc88:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40cc8c:	f360 2a0c 	bfi	sl, r0, #8, #5
  40cc90:	f825 a019 	strh.w	sl, [r5, r9, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 3, color)
  40cc94:	78d1      	ldrb	r1, [r2, #3]
  40cc96:	2900      	cmp	r1, #0
  40cc98:	f43f af05 	beq.w	40caa6 <fill_normal+0x352>
  40cc9c:	29ff      	cmp	r1, #255	; 0xff
  40cc9e:	d052      	beq.n	40cd46 <fill_normal+0x5f2>
  40cca0:	f103 0903 	add.w	r9, r3, #3
  40cca4:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40cca8:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40ccac:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40ccb0:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40ccb4:	fb08 fc0c 	mul.w	ip, r8, ip
  40ccb8:	fb01 c000 	mla	r0, r1, r0, ip
  40ccbc:	3080      	adds	r0, #128	; 0x80
  40ccbe:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40ccc2:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40ccc6:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40ccca:	f360 0bc7 	bfi	fp, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40ccce:	f004 0007 	and.w	r0, r4, #7
  40ccd2:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40ccd6:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40ccda:	f006 0707 	and.w	r7, r6, #7
  40ccde:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40cce2:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40cce6:	fb0c fc08 	mul.w	ip, ip, r8
  40ccea:	fb00 c001 	mla	r0, r0, r1, ip
  40ccee:	3080      	adds	r0, #128	; 0x80
  40ccf0:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40ccf4:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40ccf8:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40ccfc:	f36c 0b02 	bfi	fp, ip, #0, #3
  40cd00:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40cd04:	f360 3b4f 	bfi	fp, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40cd08:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40cd0c:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40cd10:	fb06 f608 	mul.w	r6, r6, r8
  40cd14:	fb00 6601 	mla	r6, r0, r1, r6
  40cd18:	3680      	adds	r6, #128	; 0x80
  40cd1a:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40cd1e:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40cd22:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40cd26:	f360 2b0c 	bfi	fp, r0, #8, #5
  40cd2a:	f825 b019 	strh.w	fp, [r5, r9, lsl #1]
  40cd2e:	e6ba      	b.n	40caa6 <fill_normal+0x352>
                            FILL_NORMAL_MASK_PX(x, color)
  40cd30:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40cd34:	e70e      	b.n	40cb54 <fill_normal+0x400>
                            FILL_NORMAL_MASK_PX(x + 1, color)
  40cd36:	1c59      	adds	r1, r3, #1
  40cd38:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40cd3c:	e75d      	b.n	40cbfa <fill_normal+0x4a6>
                            FILL_NORMAL_MASK_PX(x + 2, color)
  40cd3e:	1c99      	adds	r1, r3, #2
  40cd40:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40cd44:	e7a6      	b.n	40cc94 <fill_normal+0x540>
                            FILL_NORMAL_MASK_PX(x + 3, color)
  40cd46:	1cd9      	adds	r1, r3, #3
  40cd48:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40cd4c:	e6ab      	b.n	40caa6 <fill_normal+0x352>
  40cd4e:	960a      	str	r6, [sp, #40]	; 0x28
  40cd50:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
  40cd54:	f8bd a026 	ldrh.w	sl, [sp, #38]	; 0x26
  40cd58:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  40cd5c:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
  40cd60:	e6a3      	b.n	40caaa <fill_normal+0x356>
  40cd62:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40cd64:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  40cd68:	f8ad a026 	strh.w	sl, [sp, #38]	; 0x26
  40cd6c:	f8ad e030 	strh.w	lr, [sp, #48]	; 0x30
  40cd70:	f8bd 7032 	ldrh.w	r7, [sp, #50]	; 0x32
  40cd74:	e003      	b.n	40cd7e <fill_normal+0x62a>
                    FILL_NORMAL_MASK_PX(x, color)
  40cd76:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40cd7a:	3201      	adds	r2, #1
                for(; x < draw_area_w ; x++) {
  40cd7c:	3301      	adds	r3, #1
  40cd7e:	42b3      	cmp	r3, r6
  40cd80:	da4a      	bge.n	40ce18 <fill_normal+0x6c4>
                    FILL_NORMAL_MASK_PX(x, color)
  40cd82:	7811      	ldrb	r1, [r2, #0]
  40cd84:	2900      	cmp	r1, #0
  40cd86:	d0f8      	beq.n	40cd7a <fill_normal+0x626>
  40cd88:	29ff      	cmp	r1, #255	; 0xff
  40cd8a:	d0f4      	beq.n	40cd76 <fill_normal+0x622>
  40cd8c:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40cd90:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40cd94:	f3ce 09c4 	ubfx	r9, lr, #3, #5
  40cd98:	f1c1 0cff 	rsb	ip, r1, #255	; 0xff
  40cd9c:	fb0c f909 	mul.w	r9, ip, r9
  40cda0:	fb01 9000 	mla	r0, r1, r0, r9
  40cda4:	3080      	adds	r0, #128	; 0x80
  40cda6:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40cdaa:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40cdae:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40cdb2:	f360 08c7 	bfi	r8, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40cdb6:	f004 0007 	and.w	r0, r4, #7
  40cdba:	f3c4 3942 	ubfx	r9, r4, #13, #3
  40cdbe:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
  40cdc2:	f00e 0a07 	and.w	sl, lr, #7
  40cdc6:	f3ce 3942 	ubfx	r9, lr, #13, #3
  40cdca:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
  40cdce:	fb09 f90c 	mul.w	r9, r9, ip
  40cdd2:	fb00 9001 	mla	r0, r0, r1, r9
  40cdd6:	3080      	adds	r0, #128	; 0x80
  40cdd8:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40cddc:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40cde0:	f3c0 6982 	ubfx	r9, r0, #26, #3
  40cde4:	f369 0802 	bfi	r8, r9, #0, #3
  40cde8:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40cdec:	f360 384f 	bfi	r8, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40cdf0:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40cdf4:	f3ce 2e04 	ubfx	lr, lr, #8, #5
  40cdf8:	fb0e fc0c 	mul.w	ip, lr, ip
  40cdfc:	fb00 c101 	mla	r1, r0, r1, ip
  40ce00:	3180      	adds	r1, #128	; 0x80
  40ce02:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40ce06:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40ce0a:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40ce0e:	f361 280c 	bfi	r8, r1, #8, #5
  40ce12:	f825 8013 	strh.w	r8, [r5, r3, lsl #1]
  40ce16:	e7b0      	b.n	40cd7a <fill_normal+0x626>
                disp_buf_first += disp_w;
  40ce18:	9b08      	ldr	r3, [sp, #32]
  40ce1a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
                mask += draw_area_w;
  40ce1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40ce20:	9a07      	ldr	r2, [sp, #28]
  40ce22:	4413      	add	r3, r2
  40ce24:	931b      	str	r3, [sp, #108]	; 0x6c
            for(y = 0; y < draw_area_h; y++) {
  40ce26:	9b06      	ldr	r3, [sp, #24]
  40ce28:	3301      	adds	r3, #1
  40ce2a:	9306      	str	r3, [sp, #24]
  40ce2c:	9b06      	ldr	r3, [sp, #24]
  40ce2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40ce30:	4293      	cmp	r3, r2
  40ce32:	f6bf acf6 	bge.w	40c822 <fill_normal+0xce>
  40ce36:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40ce38:	2300      	movs	r3, #0
  40ce3a:	e5c5      	b.n	40c9c8 <fill_normal+0x274>
  40ce3c:	2300      	movs	r3, #0
  40ce3e:	9306      	str	r3, [sp, #24]
  40ce40:	e7f4      	b.n	40ce2c <fill_normal+0x6d8>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
  40ce42:	9c06      	ldr	r4, [sp, #24]
  40ce44:	fb00 f804 	mul.w	r8, r0, r4
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  40ce48:	f3c8 2807 	ubfx	r8, r8, #8, #8
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
  40ce4c:	4281      	cmp	r1, r0
  40ce4e:	d05c      	beq.n	40cf0a <fill_normal+0x7b6>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  40ce50:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  40ce54:	d05f      	beq.n	40cf16 <fill_normal+0x7c2>
  40ce56:	f835 201c 	ldrh.w	r2, [r5, ip, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40ce5a:	f3cb 03c4 	ubfx	r3, fp, #3, #5
  40ce5e:	f3c2 01c4 	ubfx	r1, r2, #3, #5
  40ce62:	f1c8 04ff 	rsb	r4, r8, #255	; 0xff
  40ce66:	fb04 f101 	mul.w	r1, r4, r1
  40ce6a:	fb08 1303 	mla	r3, r8, r3, r1
  40ce6e:	3380      	adds	r3, #128	; 0x80
  40ce70:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40ce74:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40ce78:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40ce7c:	f363 09c7 	bfi	r9, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40ce80:	f00b 0307 	and.w	r3, fp, #7
  40ce84:	f3cb 3142 	ubfx	r1, fp, #13, #3
  40ce88:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  40ce8c:	f002 0707 	and.w	r7, r2, #7
  40ce90:	f3c2 3142 	ubfx	r1, r2, #13, #3
  40ce94:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  40ce98:	fb01 f104 	mul.w	r1, r1, r4
  40ce9c:	fb03 1308 	mla	r3, r3, r8, r1
  40cea0:	3380      	adds	r3, #128	; 0x80
  40cea2:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40cea6:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40ceaa:	f3c3 6182 	ubfx	r1, r3, #26, #3
  40ceae:	f361 0902 	bfi	r9, r1, #0, #3
  40ceb2:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40ceb6:	f363 394f 	bfi	r9, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40ceba:	f3cb 2304 	ubfx	r3, fp, #8, #5
  40cebe:	f3c2 2204 	ubfx	r2, r2, #8, #5
  40cec2:	fb02 f204 	mul.w	r2, r2, r4
  40cec6:	fb03 2408 	mla	r4, r3, r8, r2
  40ceca:	3480      	adds	r4, #128	; 0x80
  40cecc:	eb04 2304 	add.w	r3, r4, r4, lsl #8
  40ced0:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
  40ced4:	f3c4 54c4 	ubfx	r4, r4, #23, #5
  40ced8:	f364 290c 	bfi	r9, r4, #8, #5
  40cedc:	464b      	mov	r3, r9
                            last_dest_color.full = disp_buf_first[x].full;
  40cede:	f835 201c 	ldrh.w	r2, [r5, ip, lsl #1]
                            last_mask = *mask_tmp_x;
  40cee2:	4601      	mov	r1, r0
                        disp_buf_first[x] = last_res_color;
  40cee4:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
                    mask_tmp_x++;
  40cee8:	f10a 0a01 	add.w	sl, sl, #1
                for(x = 0; x < draw_area_w; x++) {
  40ceec:	f10c 0c01 	add.w	ip, ip, #1
  40cef0:	45b4      	cmp	ip, r6
  40cef2:	da12      	bge.n	40cf1a <fill_normal+0x7c6>
                    if(*mask_tmp_x) {
  40cef4:	f89a 0000 	ldrb.w	r0, [sl]
  40cef8:	2800      	cmp	r0, #0
  40cefa:	d0f5      	beq.n	40cee8 <fill_normal+0x794>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  40cefc:	4281      	cmp	r1, r0
  40cefe:	d0a5      	beq.n	40ce4c <fill_normal+0x6f8>
  40cf00:	28ff      	cmp	r0, #255	; 0xff
  40cf02:	d19e      	bne.n	40ce42 <fill_normal+0x6ee>
  40cf04:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40cf08:	e7a0      	b.n	40ce4c <fill_normal+0x6f8>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
  40cf0a:	b294      	uxth	r4, r2
  40cf0c:	f835 701c 	ldrh.w	r7, [r5, ip, lsl #1]
  40cf10:	42bc      	cmp	r4, r7
  40cf12:	d19d      	bne.n	40ce50 <fill_normal+0x6fc>
  40cf14:	e7e6      	b.n	40cee4 <fill_normal+0x790>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  40cf16:	465b      	mov	r3, fp
  40cf18:	e7e1      	b.n	40cede <fill_normal+0x78a>
                disp_buf_first += disp_w;
  40cf1a:	9808      	ldr	r0, [sp, #32]
  40cf1c:	eb05 0540 	add.w	r5, r5, r0, lsl #1
                mask += draw_area_w;
  40cf20:	981b      	ldr	r0, [sp, #108]	; 0x6c
  40cf22:	9c07      	ldr	r4, [sp, #28]
  40cf24:	4420      	add	r0, r4
  40cf26:	901b      	str	r0, [sp, #108]	; 0x6c
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40cf28:	f10e 0e01 	add.w	lr, lr, #1
  40cf2c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40cf2e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
  40cf32:	4586      	cmp	lr, r0
  40cf34:	f73f ac75 	bgt.w	40c822 <fill_normal+0xce>
  40cf38:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
  40cf3c:	f04f 0c00 	mov.w	ip, #0
  40cf40:	e7d6      	b.n	40cef0 <fill_normal+0x79c>
  40cf42:	bf00      	nop

0040cf44 <color_blend_true_color_additive>:

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{

    if(opa <= LV_OPA_MIN) return bg;
  40cf44:	2a02      	cmp	r2, #2
  40cf46:	d972      	bls.n	40d02e <color_blend_true_color_additive+0xea>
{
  40cf48:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MATH_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
  40cf4a:	f3c1 03c4 	ubfx	r3, r1, #3, #5
  40cf4e:	f3c0 04c4 	ubfx	r4, r0, #3, #5
  40cf52:	4423      	add	r3, r4
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MATH_MIN(tmp, 31);
  40cf54:	2b1f      	cmp	r3, #31
  40cf56:	bf28      	it	cs
  40cf58:	231f      	movcs	r3, #31
  40cf5a:	f363 00c7 	bfi	r0, r3, #3, #5
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green + fg.ch.green;
    fg.ch.green = LV_MATH_MIN(tmp, 63);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
  40cf5e:	f001 0307 	and.w	r3, r1, #7
  40cf62:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40cf66:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  40cf6a:	f000 0407 	and.w	r4, r0, #7
  40cf6e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40cf72:	f3c0 3442 	ubfx	r4, r0, #13, #3
  40cf76:	4423      	add	r3, r4
    tmp = LV_MATH_MIN(tmp, 63);
  40cf78:	2b3f      	cmp	r3, #63	; 0x3f
  40cf7a:	bf28      	it	cs
  40cf7c:	233f      	movcs	r3, #63	; 0x3f
    fg.ch.green_h = tmp >> 3;
  40cf7e:	f3c3 04c2 	ubfx	r4, r3, #3, #3
  40cf82:	f364 0002 	bfi	r0, r4, #0, #3
    fg.ch.green_l = tmp & 0x7;
  40cf86:	f363 304f 	bfi	r0, r3, #13, #3

#elif LV_COLOR_DEPTH == 32
    fg.ch.green = LV_MATH_MIN(tmp, 255);
#endif

    tmp = bg.ch.blue + fg.ch.blue;
  40cf8a:	f3c1 2304 	ubfx	r3, r1, #8, #5
  40cf8e:	f3c0 2404 	ubfx	r4, r0, #8, #5
  40cf92:	4423      	add	r3, r4
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MATH_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
  40cf94:	2b1f      	cmp	r3, #31
  40cf96:	bf28      	it	cs
  40cf98:	231f      	movcs	r3, #31
  40cf9a:	f363 200c 	bfi	r0, r3, #8, #5
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MATH_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
  40cf9e:	2aff      	cmp	r2, #255	; 0xff
  40cfa0:	d043      	beq.n	40d02a <color_blend_true_color_additive+0xe6>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40cfa2:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40cfa6:	f3c1 04c4 	ubfx	r4, r1, #3, #5
  40cfaa:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
  40cfae:	fb06 f404 	mul.w	r4, r6, r4
  40cfb2:	fb02 4303 	mla	r3, r2, r3, r4
  40cfb6:	3380      	adds	r3, #128	; 0x80
  40cfb8:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40cfbc:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40cfc0:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40cfc4:	f04f 0500 	mov.w	r5, #0
  40cfc8:	f363 05c7 	bfi	r5, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40cfcc:	f000 0407 	and.w	r4, r0, #7
  40cfd0:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40cfd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40cfd8:	f001 0707 	and.w	r7, r1, #7
  40cfdc:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40cfe0:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
  40cfe4:	fb04 f406 	mul.w	r4, r4, r6
  40cfe8:	fb03 4302 	mla	r3, r3, r2, r4
  40cfec:	3380      	adds	r3, #128	; 0x80
  40cfee:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40cff2:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40cff6:	f3c3 6482 	ubfx	r4, r3, #26, #3
  40cffa:	f364 0502 	bfi	r5, r4, #0, #3
  40cffe:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40d002:	f363 354f 	bfi	r5, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40d006:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40d00a:	f3c1 2404 	ubfx	r4, r1, #8, #5
  40d00e:	fb04 f406 	mul.w	r4, r4, r6
  40d012:	fb03 4202 	mla	r2, r3, r2, r4
  40d016:	3280      	adds	r2, #128	; 0x80
  40d018:	eb02 2302 	add.w	r3, r2, r2, lsl #8
  40d01c:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
  40d020:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40d024:	f362 250c 	bfi	r5, r2, #8, #5
  40d028:	4628      	mov	r0, r5

    return lv_color_mix(fg, bg, opa);
}
  40d02a:	bcf0      	pop	{r4, r5, r6, r7}
  40d02c:	4770      	bx	lr
    if(opa <= LV_OPA_MIN) return bg;
  40d02e:	4608      	mov	r0, r1
  40d030:	4770      	bx	lr

0040d032 <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{

    if(opa <= LV_OPA_MIN) return bg;
  40d032:	2a02      	cmp	r2, #2
  40d034:	d96f      	bls.n	40d116 <color_blend_true_color_subtractive+0xe4>
{
  40d036:	b4f0      	push	{r4, r5, r6, r7}

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
  40d038:	f3c1 03c4 	ubfx	r3, r1, #3, #5
  40d03c:	f3c0 04c4 	ubfx	r4, r0, #3, #5
  40d040:	1b1b      	subs	r3, r3, r4
    fg.ch.red = LV_MATH_MAX(tmp, 0);
  40d042:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40d046:	f363 00c7 	bfi	r0, r3, #3, #5

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
    fg.ch.green = LV_MATH_MAX(tmp, 0);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
  40d04a:	f001 0307 	and.w	r3, r1, #7
  40d04e:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40d052:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  40d056:	f000 0407 	and.w	r4, r0, #7
  40d05a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40d05e:	f3c0 3442 	ubfx	r4, r0, #13, #3
  40d062:	4423      	add	r3, r4
    tmp = LV_MATH_MAX(tmp, 0);
  40d064:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fg.ch.green_h = tmp >> 3;
  40d068:	f3c3 04c2 	ubfx	r4, r3, #3, #3
  40d06c:	f364 0002 	bfi	r0, r4, #0, #3
    fg.ch.green_l = tmp & 0x7;
  40d070:	f363 304f 	bfi	r0, r3, #13, #3
#endif

    tmp = bg.ch.blue - fg.ch.blue;
  40d074:	f3c1 2304 	ubfx	r3, r1, #8, #5
  40d078:	f3c0 2404 	ubfx	r4, r0, #8, #5
  40d07c:	1b1b      	subs	r3, r3, r4
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
  40d07e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40d082:	f363 200c 	bfi	r0, r3, #8, #5

    if(opa == LV_OPA_COVER) return fg;
  40d086:	2aff      	cmp	r2, #255	; 0xff
  40d088:	d043      	beq.n	40d112 <color_blend_true_color_subtractive+0xe0>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40d08a:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40d08e:	f3c1 04c4 	ubfx	r4, r1, #3, #5
  40d092:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
  40d096:	fb06 f404 	mul.w	r4, r6, r4
  40d09a:	fb02 4303 	mla	r3, r2, r3, r4
  40d09e:	3380      	adds	r3, #128	; 0x80
  40d0a0:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40d0a4:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40d0a8:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40d0ac:	f04f 0500 	mov.w	r5, #0
  40d0b0:	f363 05c7 	bfi	r5, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40d0b4:	f000 0407 	and.w	r4, r0, #7
  40d0b8:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40d0bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40d0c0:	f001 0707 	and.w	r7, r1, #7
  40d0c4:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40d0c8:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
  40d0cc:	fb04 f406 	mul.w	r4, r4, r6
  40d0d0:	fb03 4302 	mla	r3, r3, r2, r4
  40d0d4:	3380      	adds	r3, #128	; 0x80
  40d0d6:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40d0da:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40d0de:	f3c3 6482 	ubfx	r4, r3, #26, #3
  40d0e2:	f364 0502 	bfi	r5, r4, #0, #3
  40d0e6:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40d0ea:	f363 354f 	bfi	r5, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40d0ee:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40d0f2:	f3c1 2404 	ubfx	r4, r1, #8, #5
  40d0f6:	fb04 f406 	mul.w	r4, r4, r6
  40d0fa:	fb03 4202 	mla	r2, r3, r2, r4
  40d0fe:	3280      	adds	r2, #128	; 0x80
  40d100:	eb02 2302 	add.w	r3, r2, r2, lsl #8
  40d104:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
  40d108:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40d10c:	f362 250c 	bfi	r5, r2, #8, #5
  40d110:	4628      	mov	r0, r5

    return lv_color_mix(fg, bg, opa);
}
  40d112:	bcf0      	pop	{r4, r5, r6, r7}
  40d114:	4770      	bx	lr
    if(opa <= LV_OPA_MIN) return bg;
  40d116:	4608      	mov	r0, r1
  40d118:	4770      	bx	lr
	...

0040d11c <fill_blended>:
{
  40d11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d120:	b085      	sub	sp, #20
  40d122:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
  40d126:	9400      	str	r4, [sp, #0]
  40d128:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40d12c:	8884      	ldrh	r4, [r0, #4]
  40d12e:	8800      	ldrh	r0, [r0, #0]
  40d130:	1a20      	subs	r0, r4, r0
  40d132:	b280      	uxth	r0, r0
  40d134:	3001      	adds	r0, #1
  40d136:	b200      	sxth	r0, r0
  40d138:	9002      	str	r0, [sp, #8]
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
  40d13a:	f9b2 b002 	ldrsh.w	fp, [r2, #2]
  40d13e:	fb0b f000 	mul.w	r0, fp, r0
  40d142:	eb01 0540 	add.w	r5, r1, r0, lsl #1
    switch(mode) {
  40d146:	2e01      	cmp	r6, #1
  40d148:	d004      	beq.n	40d154 <fill_blended+0x38>
  40d14a:	2e02      	cmp	r6, #2
  40d14c:	d01b      	beq.n	40d186 <fill_blended+0x6a>
}
  40d14e:	b005      	add	sp, #20
  40d150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            blend_fp = color_blend_true_color_additive;
  40d154:	f8df a154 	ldr.w	sl, [pc, #340]	; 40d2ac <fill_blended+0x190>
  40d158:	f8ad 3006 	strh.w	r3, [sp, #6]
  40d15c:	4690      	mov	r8, r2
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40d15e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
  40d162:	2b01      	cmp	r3, #1
  40d164:	d012      	beq.n	40d18c <fill_blended+0x70>
  40d166:	8893      	ldrh	r3, [r2, #4]
  40d168:	f9b2 2000 	ldrsh.w	r2, [r2]
  40d16c:	b294      	uxth	r4, r2
  40d16e:	1b1b      	subs	r3, r3, r4
  40d170:	b29b      	uxth	r3, r3
  40d172:	3301      	adds	r3, #1
  40d174:	b21b      	sxth	r3, r3
  40d176:	9303      	str	r3, [sp, #12]
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40d178:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40d17a:	1abf      	subs	r7, r7, r2
        last_dest_color.full = disp_buf_tmp[0].full;
  40d17c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
  40d180:	4686      	mov	lr, r0
        lv_opa_t last_mask = LV_OPA_TRANSP;
  40d182:	2100      	movs	r1, #0
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40d184:	e089      	b.n	40d29a <fill_blended+0x17e>
            blend_fp = color_blend_true_color_subtractive;
  40d186:	f8df a128 	ldr.w	sl, [pc, #296]	; 40d2b0 <fill_blended+0x194>
  40d18a:	e7e5      	b.n	40d158 <fill_blended+0x3c>
        lv_color_t last_dest_color = LV_COLOR_BLACK;
  40d18c:	f04f 0600 	mov.w	r6, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40d190:	f8bd 4006 	ldrh.w	r4, [sp, #6]
  40d194:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  40d198:	9900      	ldr	r1, [sp, #0]
  40d19a:	fb01 f303 	mul.w	r3, r1, r3
  40d19e:	3380      	adds	r3, #128	; 0x80
  40d1a0:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40d1a4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40d1a8:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40d1ac:	4630      	mov	r0, r6
  40d1ae:	f363 00c7 	bfi	r0, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40d1b2:	f004 0207 	and.w	r2, r4, #7
  40d1b6:	f3c4 3342 	ubfx	r3, r4, #13, #3
  40d1ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d1be:	fb03 f301 	mul.w	r3, r3, r1
  40d1c2:	3380      	adds	r3, #128	; 0x80
  40d1c4:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40d1c8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40d1cc:	f3c3 6282 	ubfx	r2, r3, #26, #3
  40d1d0:	f362 0002 	bfi	r0, r2, #0, #3
  40d1d4:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40d1d8:	f363 304f 	bfi	r0, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40d1dc:	f3c4 2304 	ubfx	r3, r4, #8, #5
  40d1e0:	fb03 f301 	mul.w	r3, r3, r1
  40d1e4:	3380      	adds	r3, #128	; 0x80
  40d1e6:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40d1ea:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40d1ee:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40d1f2:	f363 200c 	bfi	r0, r3, #8, #5
  40d1f6:	f8dd 9008 	ldr.w	r9, [sp, #8]
  40d1fa:	e018      	b.n	40d22e <fill_blended+0x112>
                disp_buf_tmp[x] = last_res_color;
  40d1fc:	8038      	strh	r0, [r7, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40d1fe:	3401      	adds	r4, #1
  40d200:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
  40d204:	429c      	cmp	r4, r3
  40d206:	dc0e      	bgt.n	40d226 <fill_blended+0x10a>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
  40d208:	b2b3      	uxth	r3, r6
  40d20a:	eb05 0744 	add.w	r7, r5, r4, lsl #1
  40d20e:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
  40d212:	4293      	cmp	r3, r2
  40d214:	d0f2      	beq.n	40d1fc <fill_blended+0xe0>
                    last_dest_color = disp_buf_tmp[x];
  40d216:	f835 6014 	ldrh.w	r6, [r5, r4, lsl #1]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
  40d21a:	9a00      	ldr	r2, [sp, #0]
  40d21c:	4631      	mov	r1, r6
  40d21e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40d222:	47d0      	blx	sl
  40d224:	e7ea      	b.n	40d1fc <fill_blended+0xe0>
            disp_buf_tmp += disp_w;
  40d226:	eb05 0549 	add.w	r5, r5, r9, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40d22a:	f10b 0b01 	add.w	fp, fp, #1
  40d22e:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40d232:	459b      	cmp	fp, r3
  40d234:	dc8b      	bgt.n	40d14e <fill_blended+0x32>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40d236:	f9b8 4000 	ldrsh.w	r4, [r8]
  40d23a:	e7e1      	b.n	40d200 <fill_blended+0xe4>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
  40d23c:	fa1f f38e 	uxth.w	r3, lr
  40d240:	f835 c014 	ldrh.w	ip, [r5, r4, lsl #1]
  40d244:	4563      	cmp	r3, ip
  40d246:	d119      	bne.n	40d27c <fill_blended+0x160>
  40d248:	e009      	b.n	40d25e <fill_blended+0x142>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  40d24a:	9a00      	ldr	r2, [sp, #0]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
  40d24c:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
  40d250:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40d254:	47d0      	blx	sl
                    last_mask = mask_tmp[x];
  40d256:	f899 1000 	ldrb.w	r1, [r9]
                    last_dest_color.full = disp_buf_tmp[x].full;
  40d25a:	f835 e016 	ldrh.w	lr, [r5, r6, lsl #1]
                disp_buf_tmp[x] = last_res_color;
  40d25e:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40d262:	3401      	adds	r4, #1
  40d264:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
  40d268:	429c      	cmp	r4, r3
  40d26a:	dc0f      	bgt.n	40d28c <fill_blended+0x170>
                if(mask_tmp[x] == 0) continue;
  40d26c:	4626      	mov	r6, r4
  40d26e:	eb07 0904 	add.w	r9, r7, r4
  40d272:	5d3a      	ldrb	r2, [r7, r4]
  40d274:	2a00      	cmp	r2, #0
  40d276:	d0f4      	beq.n	40d262 <fill_blended+0x146>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
  40d278:	4291      	cmp	r1, r2
  40d27a:	d0df      	beq.n	40d23c <fill_blended+0x120>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  40d27c:	2afc      	cmp	r2, #252	; 0xfc
  40d27e:	d8e4      	bhi.n	40d24a <fill_blended+0x12e>
  40d280:	9b00      	ldr	r3, [sp, #0]
  40d282:	fb02 f203 	mul.w	r2, r2, r3
  40d286:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40d28a:	e7df      	b.n	40d24c <fill_blended+0x130>
            disp_buf_tmp += disp_w;
  40d28c:	9b02      	ldr	r3, [sp, #8]
  40d28e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            mask_tmp += draw_area_w;
  40d292:	9b03      	ldr	r3, [sp, #12]
  40d294:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40d296:	f10b 0b01 	add.w	fp, fp, #1
  40d29a:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40d29e:	459b      	cmp	fp, r3
  40d2a0:	f73f af55 	bgt.w	40d14e <fill_blended+0x32>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40d2a4:	f9b8 4000 	ldrsh.w	r4, [r8]
  40d2a8:	e7dc      	b.n	40d264 <fill_blended+0x148>
  40d2aa:	bf00      	nop
  40d2ac:	0040cf45 	.word	0x0040cf45
  40d2b0:	0040d033 	.word	0x0040d033

0040d2b4 <_lv_blend_fill>:
{
  40d2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d2b8:	b08b      	sub	sp, #44	; 0x2c
  40d2ba:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
  40d2be:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
  40d2c2:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
    if(opa < LV_OPA_MIN) return;
  40d2c6:	2d01      	cmp	r5, #1
  40d2c8:	d900      	bls.n	40d2cc <_lv_blend_fill+0x18>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
  40d2ca:	b916      	cbnz	r6, 40d2d2 <_lv_blend_fill+0x1e>
}
  40d2cc:	b00b      	add	sp, #44	; 0x2c
  40d2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d2d2:	461c      	mov	r4, r3
  40d2d4:	f8ad 201e 	strh.w	r2, [sp, #30]
  40d2d8:	9106      	str	r1, [sp, #24]
  40d2da:	9005      	str	r0, [sp, #20]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40d2dc:	4b37      	ldr	r3, [pc, #220]	; (40d3bc <_lv_blend_fill+0x108>)
  40d2de:	4798      	blx	r3
  40d2e0:	4681      	mov	r9, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40d2e2:	4b37      	ldr	r3, [pc, #220]	; (40d3c0 <_lv_blend_fill+0x10c>)
  40d2e4:	4798      	blx	r3
  40d2e6:	4680      	mov	r8, r0
    const lv_area_t * disp_area = &vdb->area;
  40d2e8:	f100 0a10 	add.w	sl, r0, #16
    lv_color_t * disp_buf = vdb->buf_act;
  40d2ec:	f8d0 b008 	ldr.w	fp, [r0, #8]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  40d2f0:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  40d2f4:	b10b      	cbz	r3, 40d2fa <_lv_blend_fill+0x46>
  40d2f6:	4648      	mov	r0, r9
  40d2f8:	4798      	blx	r3
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
  40d2fa:	9a06      	ldr	r2, [sp, #24]
  40d2fc:	9905      	ldr	r1, [sp, #20]
  40d2fe:	a808      	add	r0, sp, #32
  40d300:	4b30      	ldr	r3, [pc, #192]	; (40d3c4 <_lv_blend_fill+0x110>)
  40d302:	4798      	blx	r3
    if(!is_common) return;
  40d304:	2800      	cmp	r0, #0
  40d306:	d0e1      	beq.n	40d2cc <_lv_blend_fill+0x18>
    draw_area.x1 -= disp_area->x1;
  40d308:	f8b8 e010 	ldrh.w	lr, [r8, #16]
  40d30c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40d310:	eba2 020e 	sub.w	r2, r2, lr
  40d314:	b292      	uxth	r2, r2
  40d316:	f8ad 2020 	strh.w	r2, [sp, #32]
    draw_area.y1 -= disp_area->y1;
  40d31a:	f8b8 0012 	ldrh.w	r0, [r8, #18]
  40d31e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  40d322:	1a09      	subs	r1, r1, r0
  40d324:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
    draw_area.x2 -= disp_area->x1;
  40d328:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40d32c:	eba3 030e 	sub.w	r3, r3, lr
  40d330:	b29b      	uxth	r3, r3
  40d332:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y2 -= disp_area->y1;
  40d336:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
  40d33a:	1a09      	subs	r1, r1, r0
  40d33c:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
    if(mask && disp->driver.antialiasing == 0)
  40d340:	b1ac      	cbz	r4, 40d36e <_lv_blend_fill+0xba>
  40d342:	f899 1008 	ldrb.w	r1, [r9, #8]
  40d346:	f011 0f01 	tst.w	r1, #1
  40d34a:	d110      	bne.n	40d36e <_lv_blend_fill+0xba>
  40d34c:	1a9a      	subs	r2, r3, r2
  40d34e:	b292      	uxth	r2, r2
  40d350:	3201      	adds	r2, #1
  40d352:	b212      	sxth	r2, r2
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
  40d354:	2300      	movs	r3, #0
  40d356:	e002      	b.n	40d35e <_lv_blend_fill+0xaa>
  40d358:	2000      	movs	r0, #0
  40d35a:	7008      	strb	r0, [r1, #0]
  40d35c:	3301      	adds	r3, #1
  40d35e:	4293      	cmp	r3, r2
  40d360:	da05      	bge.n	40d36e <_lv_blend_fill+0xba>
  40d362:	18e1      	adds	r1, r4, r3
  40d364:	5ce0      	ldrb	r0, [r4, r3]
  40d366:	2880      	cmp	r0, #128	; 0x80
  40d368:	d9f6      	bls.n	40d358 <_lv_blend_fill+0xa4>
  40d36a:	20ff      	movs	r0, #255	; 0xff
  40d36c:	e7f5      	b.n	40d35a <_lv_blend_fill+0xa6>
    if(disp->driver.set_px_cb) {
  40d36e:	f8d9 3014 	ldr.w	r3, [r9, #20]
  40d372:	b153      	cbz	r3, 40d38a <_lv_blend_fill+0xd6>
        fill_set_px(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
  40d374:	9602      	str	r6, [sp, #8]
  40d376:	9401      	str	r4, [sp, #4]
  40d378:	9500      	str	r5, [sp, #0]
  40d37a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40d37e:	aa08      	add	r2, sp, #32
  40d380:	4659      	mov	r1, fp
  40d382:	4650      	mov	r0, sl
  40d384:	4c10      	ldr	r4, [pc, #64]	; (40d3c8 <_lv_blend_fill+0x114>)
  40d386:	47a0      	blx	r4
  40d388:	e7a0      	b.n	40d2cc <_lv_blend_fill+0x18>
    else if(mode == LV_BLEND_MODE_NORMAL) {
  40d38a:	b957      	cbnz	r7, 40d3a2 <_lv_blend_fill+0xee>
        fill_normal(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
  40d38c:	9602      	str	r6, [sp, #8]
  40d38e:	9401      	str	r4, [sp, #4]
  40d390:	9500      	str	r5, [sp, #0]
  40d392:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40d396:	aa08      	add	r2, sp, #32
  40d398:	4659      	mov	r1, fp
  40d39a:	4650      	mov	r0, sl
  40d39c:	4c0b      	ldr	r4, [pc, #44]	; (40d3cc <_lv_blend_fill+0x118>)
  40d39e:	47a0      	blx	r4
  40d3a0:	e794      	b.n	40d2cc <_lv_blend_fill+0x18>
        fill_blended(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res, mode);
  40d3a2:	9703      	str	r7, [sp, #12]
  40d3a4:	9602      	str	r6, [sp, #8]
  40d3a6:	9401      	str	r4, [sp, #4]
  40d3a8:	9500      	str	r5, [sp, #0]
  40d3aa:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40d3ae:	aa08      	add	r2, sp, #32
  40d3b0:	4659      	mov	r1, fp
  40d3b2:	4650      	mov	r0, sl
  40d3b4:	4c06      	ldr	r4, [pc, #24]	; (40d3d0 <_lv_blend_fill+0x11c>)
  40d3b6:	47a0      	blx	r4
  40d3b8:	e788      	b.n	40d2cc <_lv_blend_fill+0x18>
  40d3ba:	bf00      	nop
  40d3bc:	00409709 	.word	0x00409709
  40d3c0:	00415d25 	.word	0x00415d25
  40d3c4:	004164e3 	.word	0x004164e3
  40d3c8:	0040bd85 	.word	0x0040bd85
  40d3cc:	0040c755 	.word	0x0040c755
  40d3d0:	0040d11d 	.word	0x0040d11d

0040d3d4 <_lv_blend_map>:
{
  40d3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d3d8:	b08b      	sub	sp, #44	; 0x2c
  40d3da:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
  40d3de:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
  40d3e2:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
    if(opa < LV_OPA_MIN) return;
  40d3e6:	2d01      	cmp	r5, #1
  40d3e8:	d900      	bls.n	40d3ec <_lv_blend_map+0x18>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
  40d3ea:	b916      	cbnz	r6, 40d3f2 <_lv_blend_map+0x1e>
}
  40d3ec:	b00b      	add	sp, #44	; 0x2c
  40d3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d3f2:	461c      	mov	r4, r3
  40d3f4:	4617      	mov	r7, r2
  40d3f6:	460a      	mov	r2, r1
  40d3f8:	9106      	str	r1, [sp, #24]
  40d3fa:	4601      	mov	r1, r0
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
  40d3fc:	a808      	add	r0, sp, #32
  40d3fe:	4b37      	ldr	r3, [pc, #220]	; (40d4dc <_lv_blend_map+0x108>)
  40d400:	4798      	blx	r3
    if(!is_common) return;
  40d402:	2800      	cmp	r0, #0
  40d404:	d0f2      	beq.n	40d3ec <_lv_blend_map+0x18>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40d406:	4b36      	ldr	r3, [pc, #216]	; (40d4e0 <_lv_blend_map+0x10c>)
  40d408:	4798      	blx	r3
  40d40a:	4682      	mov	sl, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40d40c:	4b35      	ldr	r3, [pc, #212]	; (40d4e4 <_lv_blend_map+0x110>)
  40d40e:	4798      	blx	r3
  40d410:	4681      	mov	r9, r0
    const lv_area_t * disp_area = &vdb->area;
  40d412:	f100 0b10 	add.w	fp, r0, #16
    lv_color_t * disp_buf = vdb->buf_act;
  40d416:	6883      	ldr	r3, [r0, #8]
  40d418:	9307      	str	r3, [sp, #28]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  40d41a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40d41e:	b10b      	cbz	r3, 40d424 <_lv_blend_map+0x50>
  40d420:	4650      	mov	r0, sl
  40d422:	4798      	blx	r3
    draw_area.x1 -= disp_area->x1;
  40d424:	f8b9 e010 	ldrh.w	lr, [r9, #16]
  40d428:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40d42c:	eba2 020e 	sub.w	r2, r2, lr
  40d430:	b292      	uxth	r2, r2
  40d432:	f8ad 2020 	strh.w	r2, [sp, #32]
    draw_area.y1 -= disp_area->y1;
  40d436:	f8b9 0012 	ldrh.w	r0, [r9, #18]
  40d43a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  40d43e:	1a09      	subs	r1, r1, r0
  40d440:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
    draw_area.x2 -= disp_area->x1;
  40d444:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40d448:	eba3 030e 	sub.w	r3, r3, lr
  40d44c:	b29b      	uxth	r3, r3
  40d44e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y2 -= disp_area->y1;
  40d452:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
  40d456:	1a09      	subs	r1, r1, r0
  40d458:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
    if(mask && disp->driver.antialiasing == 0)
  40d45c:	b1ac      	cbz	r4, 40d48a <_lv_blend_map+0xb6>
  40d45e:	f89a 1008 	ldrb.w	r1, [sl, #8]
  40d462:	f011 0f01 	tst.w	r1, #1
  40d466:	d110      	bne.n	40d48a <_lv_blend_map+0xb6>
  40d468:	1a9a      	subs	r2, r3, r2
  40d46a:	b292      	uxth	r2, r2
  40d46c:	3201      	adds	r2, #1
  40d46e:	b212      	sxth	r2, r2
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
  40d470:	2300      	movs	r3, #0
  40d472:	e002      	b.n	40d47a <_lv_blend_map+0xa6>
  40d474:	2000      	movs	r0, #0
  40d476:	7008      	strb	r0, [r1, #0]
  40d478:	3301      	adds	r3, #1
  40d47a:	4293      	cmp	r3, r2
  40d47c:	da05      	bge.n	40d48a <_lv_blend_map+0xb6>
  40d47e:	18e1      	adds	r1, r4, r3
  40d480:	5ce0      	ldrb	r0, [r4, r3]
  40d482:	2880      	cmp	r0, #128	; 0x80
  40d484:	d9f6      	bls.n	40d474 <_lv_blend_map+0xa0>
  40d486:	20ff      	movs	r0, #255	; 0xff
  40d488:	e7f5      	b.n	40d476 <_lv_blend_map+0xa2>
    if(disp->driver.set_px_cb) {
  40d48a:	f8da 3014 	ldr.w	r3, [sl, #20]
  40d48e:	b153      	cbz	r3, 40d4a6 <_lv_blend_map+0xd2>
        map_set_px(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
  40d490:	9603      	str	r6, [sp, #12]
  40d492:	9402      	str	r4, [sp, #8]
  40d494:	9501      	str	r5, [sp, #4]
  40d496:	9700      	str	r7, [sp, #0]
  40d498:	9b06      	ldr	r3, [sp, #24]
  40d49a:	aa08      	add	r2, sp, #32
  40d49c:	9907      	ldr	r1, [sp, #28]
  40d49e:	4658      	mov	r0, fp
  40d4a0:	4c11      	ldr	r4, [pc, #68]	; (40d4e8 <_lv_blend_map+0x114>)
  40d4a2:	47a0      	blx	r4
  40d4a4:	e7a2      	b.n	40d3ec <_lv_blend_map+0x18>
    else if(mode == LV_BLEND_MODE_NORMAL) {
  40d4a6:	f1b8 0f00 	cmp.w	r8, #0
  40d4aa:	d10a      	bne.n	40d4c2 <_lv_blend_map+0xee>
        map_normal(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
  40d4ac:	9603      	str	r6, [sp, #12]
  40d4ae:	9402      	str	r4, [sp, #8]
  40d4b0:	9501      	str	r5, [sp, #4]
  40d4b2:	9700      	str	r7, [sp, #0]
  40d4b4:	9b06      	ldr	r3, [sp, #24]
  40d4b6:	aa08      	add	r2, sp, #32
  40d4b8:	9907      	ldr	r1, [sp, #28]
  40d4ba:	4658      	mov	r0, fp
  40d4bc:	4c0b      	ldr	r4, [pc, #44]	; (40d4ec <_lv_blend_map+0x118>)
  40d4be:	47a0      	blx	r4
  40d4c0:	e794      	b.n	40d3ec <_lv_blend_map+0x18>
        map_blended(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res, mode);
  40d4c2:	f8cd 8010 	str.w	r8, [sp, #16]
  40d4c6:	9603      	str	r6, [sp, #12]
  40d4c8:	9402      	str	r4, [sp, #8]
  40d4ca:	9501      	str	r5, [sp, #4]
  40d4cc:	9700      	str	r7, [sp, #0]
  40d4ce:	9b06      	ldr	r3, [sp, #24]
  40d4d0:	aa08      	add	r2, sp, #32
  40d4d2:	9907      	ldr	r1, [sp, #28]
  40d4d4:	4658      	mov	r0, fp
  40d4d6:	4c06      	ldr	r4, [pc, #24]	; (40d4f0 <_lv_blend_map+0x11c>)
  40d4d8:	47a0      	blx	r4
  40d4da:	e787      	b.n	40d3ec <_lv_blend_map+0x18>
  40d4dc:	004164e3 	.word	0x004164e3
  40d4e0:	00409709 	.word	0x00409709
  40d4e4:	00415d25 	.word	0x00415d25
  40d4e8:	0040be69 	.word	0x0040be69
  40d4ec:	0040bfa1 	.word	0x0040bfa1
  40d4f0:	0040bc39 	.word	0x0040bc39

0040d4f4 <lv_draw_map>:
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_area,
                                              const uint8_t * map_p,
                                              const lv_draw_img_dsc_t * draw_dsc,
                                              bool chroma_key, bool alpha_byte)
{
  40d4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d4f8:	b0bd      	sub	sp, #244	; 0xf4
  40d4fa:	9016      	str	r0, [sp, #88]	; 0x58
  40d4fc:	911f      	str	r1, [sp, #124]	; 0x7c
  40d4fe:	4616      	mov	r6, r2
  40d500:	930a      	str	r3, [sp, #40]	; 0x28
  40d502:	f89d 3118 	ldrb.w	r3, [sp, #280]	; 0x118
  40d506:	930d      	str	r3, [sp, #52]	; 0x34
  40d508:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
  40d50c:	9308      	str	r3, [sp, #32]
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  40d50e:	aa3a      	add	r2, sp, #232	; 0xe8
  40d510:	2308      	movs	r3, #8
  40d512:	e004      	b.n	40d51e <lv_draw_map+0x2a>
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  40d514:	f811 0b01 	ldrb.w	r0, [r1], #1
  40d518:	f802 0b01 	strb.w	r0, [r2], #1
        d8++;
        s8++;
        len--;
  40d51c:	3b01      	subs	r3, #1
    while(len) {
  40d51e:	2b00      	cmp	r3, #0
  40d520:	d1f8      	bne.n	40d514 <lv_draw_map+0x20>
    /* Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, clip_area);

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40d522:	4ba6      	ldr	r3, [pc, #664]	; (40d7bc <lv_draw_map+0x2c8>)
  40d524:	4798      	blx	r3
  40d526:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40d528:	4ba5      	ldr	r3, [pc, #660]	; (40d7c0 <lv_draw_map+0x2cc>)
  40d52a:	4798      	blx	r3
  40d52c:	9014      	str	r0, [sp, #80]	; 0x50
    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
  40d52e:	8a01      	ldrh	r1, [r0, #16]
  40d530:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
  40d534:	1a5b      	subs	r3, r3, r1
  40d536:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
    draw_area.y1 -= disp_area->y1;
  40d53a:	8a42      	ldrh	r2, [r0, #18]
  40d53c:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
  40d540:	1a9b      	subs	r3, r3, r2
  40d542:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
    draw_area.x2 -= disp_area->x1;
  40d546:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40d54a:	1a5b      	subs	r3, r3, r1
  40d54c:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    draw_area.y2 -= disp_area->y1;
  40d550:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
  40d554:	1a9b      	subs	r3, r3, r2
  40d556:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40d55a:	4b9a      	ldr	r3, [pc, #616]	; (40d7c4 <lv_draw_map+0x2d0>)
  40d55c:	4798      	blx	r3

    /*The simplest case just copy the pixels into the VDB*/
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
  40d55e:	9015      	str	r0, [sp, #84]	; 0x54
  40d560:	b930      	cbnz	r0, 40d570 <lv_draw_map+0x7c>
  40d562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d564:	8853      	ldrh	r3, [r2, #2]
  40d566:	b91b      	cbnz	r3, 40d570 <lv_draw_map+0x7c>
  40d568:	8913      	ldrh	r3, [r2, #8]
  40d56a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40d56e:	d055      	beq.n	40d61c <lv_draw_map+0x128>
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        /*The pixel size in byte is different if an alpha byte is added too*/
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
  40d570:	9b08      	ldr	r3, [sp, #32]
  40d572:	2b00      	cmp	r3, #0
  40d574:	d068      	beq.n	40d648 <lv_draw_map+0x154>
  40d576:	2303      	movs	r3, #3
  40d578:	9307      	str	r3, [sp, #28]
  40d57a:	9916      	ldr	r1, [sp, #88]	; 0x58
  40d57c:	888d      	ldrh	r5, [r1, #4]
  40d57e:	f9b1 2000 	ldrsh.w	r2, [r1]
  40d582:	b293      	uxth	r3, r2
  40d584:	1aed      	subs	r5, r5, r3
  40d586:	b2ad      	uxth	r5, r5
  40d588:	3501      	adds	r5, #1
  40d58a:	b22d      	sxth	r5, r5

        /*Go to the first displayed pixel of the map*/
        int32_t map_w = lv_area_get_width(map_area);
  40d58c:	9519      	str	r5, [sp, #100]	; 0x64
        const uint8_t * map_buf_tmp = map_p;
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
  40d58e:	f9bd 00ea 	ldrsh.w	r0, [sp, #234]	; 0xea
  40d592:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  40d596:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40d598:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  40d59c:	1a5b      	subs	r3, r3, r1
  40d59e:	1ac3      	subs	r3, r0, r3
  40d5a0:	fb03 f305 	mul.w	r3, r3, r5
  40d5a4:	9f07      	ldr	r7, [sp, #28]
  40d5a6:	971a      	str	r7, [sp, #104]	; 0x68
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
  40d5a8:	f9bd c0e8 	ldrsh.w	ip, [sp, #232]	; 0xe8
  40d5ac:	f9b4 e010 	ldrsh.w	lr, [r4, #16]
  40d5b0:	eba2 020e 	sub.w	r2, r2, lr
  40d5b4:	ebac 0202 	sub.w	r2, ip, r2
  40d5b8:	fb02 f207 	mul.w	r2, r2, r7
  40d5bc:	fb07 2303 	mla	r3, r7, r3, r2
  40d5c0:	18f3      	adds	r3, r6, r3
  40d5c2:	9311      	str	r3, [sp, #68]	; 0x44
        uint32_t px_i = 0;

        const uint8_t * map_px;

        lv_area_t blend_area;
        blend_area.x1 = draw_area.x1 + disp_area->x1;
  40d5c4:	fa1f f78c 	uxth.w	r7, ip
  40d5c8:	fa17 f38e 	uxtah	r3, r7, lr
  40d5cc:	b29b      	uxth	r3, r3
  40d5ce:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
  40d5d2:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
  40d5d6:	1bd2      	subs	r2, r2, r7
  40d5d8:	b292      	uxth	r2, r2
  40d5da:	3201      	adds	r2, #1
  40d5dc:	b292      	uxth	r2, r2
  40d5de:	fa0f f982 	sxth.w	r9, r2
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
  40d5e2:	4413      	add	r3, r2
  40d5e4:	b29b      	uxth	r3, r3
  40d5e6:	3b01      	subs	r3, #1
  40d5e8:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        blend_area.y1 = disp_area->y1 + draw_area.y1;
  40d5ec:	b280      	uxth	r0, r0
  40d5ee:	fa10 f381 	uxtah	r3, r0, r1
  40d5f2:	b21b      	sxth	r3, r3
  40d5f4:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        blend_area.y2 = blend_area.y1;
  40d5f8:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40d5fc:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
  40d600:	1a1b      	subs	r3, r3, r0
  40d602:	b29b      	uxth	r3, r3
  40d604:	3301      	adds	r3, #1
  40d606:	b21b      	sxth	r3, r3
  40d608:	9318      	str	r3, [sp, #96]	; 0x60

        lv_coord_t draw_area_h = lv_area_get_height(&draw_area);
        lv_coord_t draw_area_w = lv_area_get_width(&draw_area);

#if LV_USE_IMG_TRANSFORM
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40d60a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d60c:	8853      	ldrh	r3, [r2, #2]
  40d60e:	b9f3      	cbnz	r3, 40d64e <lv_draw_map+0x15a>
  40d610:	8913      	ldrh	r3, [r2, #8]
  40d612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40d616:	d051      	beq.n	40d6bc <lv_draw_map+0x1c8>
  40d618:	2301      	movs	r3, #1
  40d61a:	e019      	b.n	40d650 <lv_draw_map+0x15c>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
  40d61c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d61e:	2b00      	cmp	r3, #0
  40d620:	d1a6      	bne.n	40d570 <lv_draw_map+0x7c>
  40d622:	9b08      	ldr	r3, [sp, #32]
  40d624:	2b00      	cmp	r3, #0
  40d626:	d1a3      	bne.n	40d570 <lv_draw_map+0x7c>
  40d628:	7a93      	ldrb	r3, [r2, #10]
  40d62a:	2b00      	cmp	r3, #0
  40d62c:	d1a0      	bne.n	40d570 <lv_draw_map+0x7c>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
  40d62e:	7b93      	ldrb	r3, [r2, #14]
  40d630:	9302      	str	r3, [sp, #8]
  40d632:	7813      	ldrb	r3, [r2, #0]
  40d634:	9301      	str	r3, [sp, #4]
  40d636:	2301      	movs	r3, #1
  40d638:	9300      	str	r3, [sp, #0]
  40d63a:	2300      	movs	r3, #0
  40d63c:	4632      	mov	r2, r6
  40d63e:	9916      	ldr	r1, [sp, #88]	; 0x58
  40d640:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40d642:	4c61      	ldr	r4, [pc, #388]	; (40d7c8 <lv_draw_map+0x2d4>)
  40d644:	47a0      	blx	r4
  40d646:	e368      	b.n	40dd1a <lv_draw_map+0x826>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
  40d648:	2302      	movs	r3, #2
  40d64a:	9307      	str	r3, [sp, #28]
  40d64c:	e795      	b.n	40d57a <lv_draw_map+0x86>
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40d64e:	2301      	movs	r3, #1
  40d650:	9306      	str	r3, [sp, #24]
#else
        bool transform = false;
#endif
        /*Simple ARGB image. Handle it as special case because it's very common*/
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
  40d652:	f083 0301 	eor.w	r3, r3, #1
  40d656:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d658:	2a00      	cmp	r2, #0
  40d65a:	bf14      	ite	ne
  40d65c:	2300      	movne	r3, #0
  40d65e:	f003 0301 	andeq.w	r3, r3, #1
  40d662:	b133      	cbz	r3, 40d672 <lv_draw_map+0x17e>
  40d664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d666:	b923      	cbnz	r3, 40d672 <lv_draw_map+0x17e>
  40d668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d66a:	7a9b      	ldrb	r3, [r3, #10]
  40d66c:	b90b      	cbnz	r3, 40d672 <lv_draw_map+0x17e>
  40d66e:	9b08      	ldr	r3, [sp, #32]
  40d670:	bb33      	cbnz	r3, 40d6c0 <lv_draw_map+0x1cc>
            _lv_mem_buf_release(map2);
        }
        /*Most complicated case: transform or other mask or chroma keyed*/
        else {
            /*Build the image and a mask line-by-line*/
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
  40d672:	4640      	mov	r0, r8
  40d674:	4b55      	ldr	r3, [pc, #340]	; (40d7cc <lv_draw_map+0x2d8>)
  40d676:	4798      	blx	r3
  40d678:	4604      	mov	r4, r0
  40d67a:	9017      	str	r0, [sp, #92]	; 0x5c
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
  40d67c:	a83a      	add	r0, sp, #232	; 0xe8
  40d67e:	4b54      	ldr	r3, [pc, #336]	; (40d7d0 <lv_draw_map+0x2dc>)
  40d680:	4798      	blx	r3
  40d682:	4284      	cmp	r4, r0
  40d684:	f080 80ac 	bcs.w	40d7e0 <lv_draw_map+0x2ec>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40d688:	9f17      	ldr	r7, [sp, #92]	; 0x5c
  40d68a:	0078      	lsls	r0, r7, #1
  40d68c:	4c51      	ldr	r4, [pc, #324]	; (40d7d4 <lv_draw_map+0x2e0>)
  40d68e:	47a0      	blx	r4
  40d690:	900b      	str	r0, [sp, #44]	; 0x2c
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40d692:	4638      	mov	r0, r7
  40d694:	47a0      	blx	r4
  40d696:	4682      	mov	sl, r0

#if LV_USE_IMG_TRANSFORM
            lv_img_transform_dsc_t trans_dsc;
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
  40d698:	214c      	movs	r1, #76	; 0x4c
  40d69a:	a827      	add	r0, sp, #156	; 0x9c
  40d69c:	4b4e      	ldr	r3, [pc, #312]	; (40d7d8 <lv_draw_map+0x2e4>)
  40d69e:	4798      	blx	r3
            if(transform) {
  40d6a0:	9b06      	ldr	r3, [sp, #24]
  40d6a2:	2b00      	cmp	r3, #0
  40d6a4:	f000 80ca 	beq.w	40d83c <lv_draw_map+0x348>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
  40d6a8:	9b08      	ldr	r3, [sp, #32]
  40d6aa:	2b00      	cmp	r3, #0
  40d6ac:	f040 809d 	bne.w	40d7ea <lv_draw_map+0x2f6>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
  40d6b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d6b2:	2b00      	cmp	r3, #0
  40d6b4:	f040 80f3 	bne.w	40d89e <lv_draw_map+0x3aa>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
  40d6b8:	2204      	movs	r2, #4
  40d6ba:	e097      	b.n	40d7ec <lv_draw_map+0x2f8>
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40d6bc:	2300      	movs	r3, #0
  40d6be:	e7c7      	b.n	40d650 <lv_draw_map+0x15c>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
  40d6c0:	4640      	mov	r0, r8
  40d6c2:	4b42      	ldr	r3, [pc, #264]	; (40d7cc <lv_draw_map+0x2d8>)
  40d6c4:	4798      	blx	r3
  40d6c6:	4604      	mov	r4, r0
  40d6c8:	4680      	mov	r8, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
  40d6ca:	a83a      	add	r0, sp, #232	; 0xe8
  40d6cc:	4b40      	ldr	r3, [pc, #256]	; (40d7d0 <lv_draw_map+0x2dc>)
  40d6ce:	4798      	blx	r3
  40d6d0:	4284      	cmp	r4, r0
  40d6d2:	d20e      	bcs.n	40d6f2 <lv_draw_map+0x1fe>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40d6d4:	ea4f 0048 	mov.w	r0, r8, lsl #1
  40d6d8:	4c3e      	ldr	r4, [pc, #248]	; (40d7d4 <lv_draw_map+0x2e0>)
  40d6da:	47a0      	blx	r4
  40d6dc:	4605      	mov	r5, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40d6de:	4640      	mov	r0, r8
  40d6e0:	47a0      	blx	r4
  40d6e2:	4604      	mov	r4, r0
            for(y = 0; y < draw_area_h; y++) {
  40d6e4:	2600      	movs	r6, #0
        uint32_t px_i = 0;
  40d6e6:	4632      	mov	r2, r6
  40d6e8:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  40d6ec:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
            for(y = 0; y < draw_area_h; y++) {
  40d6f0:	e02b      	b.n	40d74a <lv_draw_map+0x256>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
  40d6f2:	a83a      	add	r0, sp, #232	; 0xe8
  40d6f4:	4b36      	ldr	r3, [pc, #216]	; (40d7d0 <lv_draw_map+0x2dc>)
  40d6f6:	4798      	blx	r3
  40d6f8:	4680      	mov	r8, r0
  40d6fa:	e7eb      	b.n	40d6d4 <lv_draw_map+0x1e0>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40d6fc:	3101      	adds	r1, #1
  40d6fe:	443b      	add	r3, r7
  40d700:	3201      	adds	r2, #1
  40d702:	4549      	cmp	r1, r9
  40d704:	da0b      	bge.n	40d71e <lv_draw_map+0x22a>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  40d706:	7898      	ldrb	r0, [r3, #2]
                    mask_buf[px_i] = px_opa;
  40d708:	54a0      	strb	r0, [r4, r2]
                    if(px_opa) {
  40d70a:	2800      	cmp	r0, #0
  40d70c:	d0f6      	beq.n	40d6fc <lv_draw_map+0x208>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
  40d70e:	7818      	ldrb	r0, [r3, #0]
  40d710:	f893 e001 	ldrb.w	lr, [r3, #1]
  40d714:	eb00 200e 	add.w	r0, r0, lr, lsl #8
  40d718:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
  40d71c:	e7ee      	b.n	40d6fc <lv_draw_map+0x208>
  40d71e:	9707      	str	r7, [sp, #28]
                map_buf_tmp += map_w * px_size_byte;
  40d720:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40d722:	991a      	ldr	r1, [sp, #104]	; 0x68
  40d724:	fb01 aa03 	mla	sl, r1, r3, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40d728:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40d72c:	f8bd 10e8 	ldrh.w	r1, [sp, #232]	; 0xe8
  40d730:	1a5b      	subs	r3, r3, r1
  40d732:	b29b      	uxth	r3, r3
  40d734:	3301      	adds	r3, #1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
  40d736:	fa02 f383 	sxtah	r3, r2, r3
  40d73a:	4598      	cmp	r8, r3
  40d73c:	d90b      	bls.n	40d756 <lv_draw_map+0x262>
                    blend_area.y2 ++;
  40d73e:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40d742:	3301      	adds	r3, #1
  40d744:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            for(y = 0; y < draw_area_h; y++) {
  40d748:	3601      	adds	r6, #1
  40d74a:	455e      	cmp	r6, fp
  40d74c:	da1a      	bge.n	40d784 <lv_draw_map+0x290>
  40d74e:	4653      	mov	r3, sl
  40d750:	2100      	movs	r1, #0
  40d752:	9f07      	ldr	r7, [sp, #28]
  40d754:	e7d5      	b.n	40d702 <lv_draw_map+0x20e>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
  40d756:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d758:	7b93      	ldrb	r3, [r2, #14]
  40d75a:	9302      	str	r3, [sp, #8]
  40d75c:	7813      	ldrb	r3, [r2, #0]
  40d75e:	9301      	str	r3, [sp, #4]
  40d760:	2302      	movs	r3, #2
  40d762:	9300      	str	r3, [sp, #0]
  40d764:	4623      	mov	r3, r4
  40d766:	462a      	mov	r2, r5
  40d768:	a925      	add	r1, sp, #148	; 0x94
  40d76a:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40d76c:	4f16      	ldr	r7, [pc, #88]	; (40d7c8 <lv_draw_map+0x2d4>)
  40d76e:	47b8      	blx	r7
                    blend_area.y1 = blend_area.y2 + 1;
  40d770:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
  40d774:	3301      	adds	r3, #1
  40d776:	b21b      	sxth	r3, r3
  40d778:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
                    blend_area.y2 = blend_area.y1;
  40d77c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                    px_i = 0;
  40d780:	2200      	movs	r2, #0
  40d782:	e7e1      	b.n	40d748 <lv_draw_map+0x254>
            if(blend_area.y1 != blend_area.y2) {
  40d784:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
  40d788:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40d78c:	429a      	cmp	r2, r3
  40d78e:	d00f      	beq.n	40d7b0 <lv_draw_map+0x2bc>
                blend_area.y2--;
  40d790:	3b01      	subs	r3, #1
  40d792:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
  40d796:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d798:	7b93      	ldrb	r3, [r2, #14]
  40d79a:	9302      	str	r3, [sp, #8]
  40d79c:	7813      	ldrb	r3, [r2, #0]
  40d79e:	9301      	str	r3, [sp, #4]
  40d7a0:	2302      	movs	r3, #2
  40d7a2:	9300      	str	r3, [sp, #0]
  40d7a4:	4623      	mov	r3, r4
  40d7a6:	462a      	mov	r2, r5
  40d7a8:	a925      	add	r1, sp, #148	; 0x94
  40d7aa:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40d7ac:	4e06      	ldr	r6, [pc, #24]	; (40d7c8 <lv_draw_map+0x2d4>)
  40d7ae:	47b0      	blx	r6
            _lv_mem_buf_release(mask_buf);
  40d7b0:	4620      	mov	r0, r4
  40d7b2:	4c0a      	ldr	r4, [pc, #40]	; (40d7dc <lv_draw_map+0x2e8>)
  40d7b4:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
  40d7b6:	4628      	mov	r0, r5
  40d7b8:	47a0      	blx	r4
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
  40d7ba:	e2ae      	b.n	40dd1a <lv_draw_map+0x826>
  40d7bc:	00409709 	.word	0x00409709
  40d7c0:	00415d25 	.word	0x00415d25
  40d7c4:	00410aa1 	.word	0x00410aa1
  40d7c8:	0040d3d5 	.word	0x0040d3d5
  40d7cc:	00415c21 	.word	0x00415c21
  40d7d0:	004164c7 	.word	0x004164c7
  40d7d4:	00417895 	.word	0x00417895
  40d7d8:	00417a21 	.word	0x00417a21
  40d7dc:	00417645 	.word	0x00417645
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
  40d7e0:	a83a      	add	r0, sp, #232	; 0xe8
  40d7e2:	4bb6      	ldr	r3, [pc, #728]	; (40dabc <lv_draw_map+0x5c8>)
  40d7e4:	4798      	blx	r3
  40d7e6:	9017      	str	r0, [sp, #92]	; 0x5c
  40d7e8:	e74e      	b.n	40d688 <lv_draw_map+0x194>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
  40d7ea:	2205      	movs	r2, #5

                trans_dsc.cfg.angle = draw_dsc->angle;
  40d7ec:	980a      	ldr	r0, [sp, #40]	; 0x28
  40d7ee:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40d7f2:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
                trans_dsc.cfg.zoom = draw_dsc->zoom;
  40d7f6:	8903      	ldrh	r3, [r0, #8]
  40d7f8:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
                trans_dsc.cfg.src = map_p;
  40d7fc:	9627      	str	r6, [sp, #156]	; 0x9c
                trans_dsc.cfg.src_w = map_w;
  40d7fe:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40d802:	9916      	ldr	r1, [sp, #88]	; 0x58
  40d804:	88cb      	ldrh	r3, [r1, #6]
  40d806:	8849      	ldrh	r1, [r1, #2]
  40d808:	1a5b      	subs	r3, r3, r1
  40d80a:	b29b      	uxth	r3, r3
  40d80c:	3301      	adds	r3, #1
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
  40d80e:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
                trans_dsc.cfg.cf = cf;
  40d812:	f88d 20ae 	strb.w	r2, [sp, #174]	; 0xae
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
  40d816:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  40d81a:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
  40d81e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  40d822:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
                trans_dsc.cfg.color = draw_dsc->recolor;
  40d826:	8983      	ldrh	r3, [r0, #12]
  40d828:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
                trans_dsc.cfg.antialias = draw_dsc->antialias;
  40d82c:	7bc3      	ldrb	r3, [r0, #15]
  40d82e:	f3c3 0300 	ubfx	r3, r3, #0, #1
  40d832:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf

                _lv_img_buf_transform_init(&trans_dsc);
  40d836:	a827      	add	r0, sp, #156	; 0x9c
  40d838:	4ba1      	ldr	r3, [pc, #644]	; (40dac0 <lv_draw_map+0x5cc>)
  40d83a:	4798      	blx	r3
            }
#endif
            uint16_t recolor_premult[3] = {0};
  40d83c:	2300      	movs	r3, #0
  40d83e:	9323      	str	r3, [sp, #140]	; 0x8c
  40d840:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
  40d844:	990a      	ldr	r1, [sp, #40]	; 0x28
  40d846:	7a8a      	ldrb	r2, [r1, #10]
  40d848:	43d3      	mvns	r3, r2
  40d84a:	b2db      	uxtb	r3, r3
  40d84c:	9310      	str	r3, [sp, #64]	; 0x40
            if(draw_dsc->recolor_opa != 0) {
  40d84e:	b1ba      	cbz	r2, 40d880 <lv_draw_map+0x38c>
  40d850:	898b      	ldrh	r3, [r1, #12]
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
  40d852:	f3c3 01c4 	ubfx	r1, r3, #3, #5
  40d856:	b292      	uxth	r2, r2
  40d858:	fb01 f102 	mul.w	r1, r1, r2
  40d85c:	f8ad 108c 	strh.w	r1, [sp, #140]	; 0x8c
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
  40d860:	f003 0007 	and.w	r0, r3, #7
  40d864:	f3c3 3142 	ubfx	r1, r3, #13, #3
  40d868:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  40d86c:	fb12 f101 	smulbb	r1, r2, r1
  40d870:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
  40d874:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40d878:	fb02 f203 	mul.w	r2, r2, r3
  40d87c:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
                lv_color_premult(draw_dsc->recolor, draw_dsc->recolor_opa, recolor_premult);
            }

            lv_draw_mask_res_t mask_res;
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40d880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d882:	9a08      	ldr	r2, [sp, #32]
  40d884:	4313      	orrs	r3, r2
  40d886:	9321      	str	r3, [sp, #132]	; 0x84
  40d888:	d10b      	bne.n	40d8a2 <lv_draw_map+0x3ae>
  40d88a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d88c:	8853      	ldrh	r3, [r2, #2]
  40d88e:	b9f3      	cbnz	r3, 40d8ce <lv_draw_map+0x3da>
                        draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40d890:	8913      	ldrh	r3, [r2, #8]
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40d892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40d896:	d01d      	beq.n	40d8d4 <lv_draw_map+0x3e0>
  40d898:	2302      	movs	r3, #2
  40d89a:	931b      	str	r3, [sp, #108]	; 0x6c
  40d89c:	e003      	b.n	40d8a6 <lv_draw_map+0x3b2>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
  40d89e:	2206      	movs	r2, #6
  40d8a0:	e7a4      	b.n	40d7ec <lv_draw_map+0x2f8>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40d8a2:	2302      	movs	r3, #2
  40d8a4:	931b      	str	r3, [sp, #108]	; 0x6c

            /*Prepare the `mask_buf`if there are other masks*/
            if(other_mask_cnt) {
  40d8a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d8a8:	b9bb      	cbnz	r3, 40d8da <lv_draw_map+0x3e6>
            }

            int32_t x;
            int32_t y;
#if LV_USE_IMG_TRANSFORM
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
  40d8aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d8ac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
  40d8b0:	f9bd 20ea 	ldrsh.w	r2, [sp, #234]	; 0xea
  40d8b4:	4413      	add	r3, r2
  40d8b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40d8b8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
  40d8bc:	1a9b      	subs	r3, r3, r2
  40d8be:	9312      	str	r3, [sp, #72]	; 0x48
#endif
            for(y = 0; y < draw_area_h; y++) {
  40d8c0:	2300      	movs	r3, #0
  40d8c2:	930c      	str	r3, [sp, #48]	; 0x30
        uint32_t px_i = 0;
  40d8c4:	9313      	str	r3, [sp, #76]	; 0x4c
  40d8c6:	4657      	mov	r7, sl
  40d8c8:	f8cd 9014 	str.w	r9, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
  40d8cc:	e192      	b.n	40dbf4 <lv_draw_map+0x700>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40d8ce:	2302      	movs	r3, #2
  40d8d0:	931b      	str	r3, [sp, #108]	; 0x6c
  40d8d2:	e7e8      	b.n	40d8a6 <lv_draw_map+0x3b2>
  40d8d4:	2301      	movs	r3, #1
  40d8d6:	931b      	str	r3, [sp, #108]	; 0x6c
  40d8d8:	e7e5      	b.n	40d8a6 <lv_draw_map+0x3b2>
                _lv_memset_ff(mask_buf, mask_buf_size);
  40d8da:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40d8dc:	4650      	mov	r0, sl
  40d8de:	4b79      	ldr	r3, [pc, #484]	; (40dac4 <lv_draw_map+0x5d0>)
  40d8e0:	4798      	blx	r3
  40d8e2:	e7e2      	b.n	40d8aa <lv_draw_map+0x3b6>
#if LV_USE_IMG_TRANSFORM
                    if(transform) {

                        /*Transform*/
                        bool ret;
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
  40d8e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40d8e6:	4443      	add	r3, r8
  40d8e8:	b21b      	sxth	r3, r3
  40d8ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40d8ec:	990c      	ldr	r1, [sp, #48]	; 0x30
  40d8ee:	440a      	add	r2, r1
  40d8f0:	b212      	sxth	r2, r2
 * @return true: there is valid pixel on these x/y coordinates; false: the rotated pixel was out of the image
 * @note the result is written back to `dsc->res_color` and `dsc->res_opa`
 */
static inline bool _lv_img_buf_transform(lv_img_transform_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
  40d8f2:	9927      	ldr	r1, [sp, #156]	; 0x9c

    /*Get the target point relative coordinates to the pivot*/
    int32_t xt = x - dsc->cfg.pivot_x;
  40d8f4:	f9bd 40a4 	ldrsh.w	r4, [sp, #164]	; 0xa4
  40d8f8:	1b1b      	subs	r3, r3, r4
    int32_t yt = y - dsc->cfg.pivot_y;
  40d8fa:	f9bd 40a6 	ldrsh.w	r4, [sp, #166]	; 0xa6
  40d8fe:	1b12      	subs	r2, r2, r4

    int32_t xs;
    int32_t ys;
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
  40d900:	f8bd 00aa 	ldrh.w	r0, [sp, #170]	; 0xaa
  40d904:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  40d908:	d035      	beq.n	40d976 <lv_draw_map+0x482>
        /*Get the source pixel from the upscaled image*/
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
    }
    else if(dsc->cfg.angle == 0) {
  40d90a:	f9bd 00a8 	ldrsh.w	r0, [sp, #168]	; 0xa8
  40d90e:	2800      	cmp	r0, #0
  40d910:	d143      	bne.n	40d99a <lv_draw_map+0x4a6>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40d912:	9835      	ldr	r0, [sp, #212]	; 0xd4
  40d914:	fb03 f300 	mul.w	r3, r3, r0
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40d918:	fb02 f200 	mul.w	r2, r2, r0
        xs = xt + dsc->tmp.pivot_x_256;
  40d91c:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40d91e:	eb00 1663 	add.w	r6, r0, r3, asr #5
        ys = yt + dsc->tmp.pivot_y_256;
  40d922:	9c31      	ldr	r4, [sp, #196]	; 0xc4
  40d924:	eb04 1362 	add.w	r3, r4, r2, asr #5
  40d928:	9309      	str	r3, [sp, #36]	; 0x24
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
    }

    /*Get the integer part of the source pixel*/
    int32_t xs_int = xs >> 8;
  40d92a:	1235      	asrs	r5, r6, #8
    int32_t ys_int = ys >> 8;
  40d92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d92e:	121b      	asrs	r3, r3, #8
  40d930:	461c      	mov	r4, r3
  40d932:	930f      	str	r3, [sp, #60]	; 0x3c

    if(xs_int >= dsc->cfg.src_w) return false;
  40d934:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
  40d938:	429d      	cmp	r5, r3
  40d93a:	f280 80b3 	bge.w	40daa4 <lv_draw_map+0x5b0>
    else if(xs_int < 0) return false;
  40d93e:	2d00      	cmp	r5, #0
  40d940:	f2c0 80b6 	blt.w	40dab0 <lv_draw_map+0x5bc>

    if(ys_int >= dsc->cfg.src_h) return false;
  40d944:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
  40d948:	4294      	cmp	r4, r2
  40d94a:	f280 80b3 	bge.w	40dab4 <lv_draw_map+0x5c0>
    else if(ys_int < 0) return false;
  40d94e:	2c00      	cmp	r4, #0
  40d950:	f2c0 80b2 	blt.w	40dab8 <lv_draw_map+0x5c4>

    uint8_t px_size;
    uint32_t pxi;
    if(dsc->tmp.native_color) {
  40d954:	f89d 20d0 	ldrb.w	r2, [sp, #208]	; 0xd0
  40d958:	f012 0f04 	tst.w	r2, #4
  40d95c:	d075      	beq.n	40da4a <lv_draw_map+0x556>
        if(dsc->tmp.has_alpha == 0) {
  40d95e:	f012 0f02 	tst.w	r2, #2
  40d962:	d157      	bne.n	40da14 <lv_draw_map+0x520>
            px_size = LV_COLOR_SIZE >> 3;

            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
  40d964:	fb03 5304 	mla	r3, r3, r4, r5
  40d968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
  40d96c:	4461      	add	r1, ip
    uint8_t * d8 = (uint8_t *)dst;
  40d96e:	aa2c      	add	r2, sp, #176	; 0xb0
  40d970:	2302      	movs	r3, #2
  40d972:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d974:	e02f      	b.n	40d9d6 <lv_draw_map+0x4e2>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
  40d976:	9d33      	ldr	r5, [sp, #204]	; 0xcc
  40d978:	fb05 f603 	mul.w	r6, r5, r3
  40d97c:	9c32      	ldr	r4, [sp, #200]	; 0xc8
  40d97e:	fb04 6612 	mls	r6, r4, r2, r6
  40d982:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40d984:	eb00 06a6 	add.w	r6, r0, r6, asr #2
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
  40d988:	fb05 f202 	mul.w	r2, r5, r2
  40d98c:	fb04 2403 	mla	r4, r4, r3, r2
  40d990:	9b31      	ldr	r3, [sp, #196]	; 0xc4
  40d992:	eb03 03a4 	add.w	r3, r3, r4, asr #2
  40d996:	9309      	str	r3, [sp, #36]	; 0x24
  40d998:	e7c7      	b.n	40d92a <lv_draw_map+0x436>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40d99a:	9c35      	ldr	r4, [sp, #212]	; 0xd4
  40d99c:	fb03 f304 	mul.w	r3, r3, r4
  40d9a0:	115b      	asrs	r3, r3, #5
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40d9a2:	fb02 f204 	mul.w	r2, r2, r4
  40d9a6:	1152      	asrs	r2, r2, #5
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
  40d9a8:	9c33      	ldr	r4, [sp, #204]	; 0xcc
  40d9aa:	fb04 f603 	mul.w	r6, r4, r3
  40d9ae:	9d32      	ldr	r5, [sp, #200]	; 0xc8
  40d9b0:	fb05 6612 	mls	r6, r5, r2, r6
  40d9b4:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40d9b6:	eb00 26a6 	add.w	r6, r0, r6, asr #10
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
  40d9ba:	fb04 f402 	mul.w	r4, r4, r2
  40d9be:	fb05 4303 	mla	r3, r5, r3, r4
  40d9c2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
  40d9c4:	eb04 23a3 	add.w	r3, r4, r3, asr #10
  40d9c8:	9309      	str	r3, [sp, #36]	; 0x24
  40d9ca:	e7ae      	b.n	40d92a <lv_draw_map+0x436>
        *d8 = *s8;
  40d9cc:	f811 0b01 	ldrb.w	r0, [r1], #1
  40d9d0:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40d9d4:	3b01      	subs	r3, #1
    while(len) {
  40d9d6:	2b00      	cmp	r3, #0
  40d9d8:	d1f8      	bne.n	40d9cc <lv_draw_map+0x4d8>
  40d9da:	9409      	str	r4, [sp, #36]	; 0x24
            px_size = LV_COLOR_SIZE >> 3;
  40d9dc:	2202      	movs	r2, #2
        px_size = 0;    /*unused*/
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    }

    if(dsc->tmp.chroma_keyed) {
  40d9de:	f89d 30d0 	ldrb.w	r3, [sp, #208]	; 0xd0
  40d9e2:	f013 0f01 	tst.w	r3, #1
  40d9e6:	d00f      	beq.n	40da08 <lv_draw_map+0x514>
        lv_color_t ct = LV_COLOR_TRANSP;
  40d9e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40d9ea:	f043 0307 	orr.w	r3, r3, #7
  40d9ee:	f36f 03c7 	bfc	r3, #3, #5
  40d9f2:	f36f 230c 	bfc	r3, #8, #5
  40d9f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
  40d9fa:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        if(dsc->res.color.full == ct.full) return false;
  40d9fe:	f8bd 10b0 	ldrh.w	r1, [sp, #176]	; 0xb0
  40da02:	b29b      	uxth	r3, r3
  40da04:	4299      	cmp	r1, r3
  40da06:	d037      	beq.n	40da78 <lv_draw_map+0x584>
    }

    if(dsc->cfg.antialias == false) return true;
  40da08:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
  40da0c:	2b00      	cmp	r3, #0
  40da0e:	d135      	bne.n	40da7c <lv_draw_map+0x588>
  40da10:	9806      	ldr	r0, [sp, #24]
  40da12:	e048      	b.n	40daa6 <lv_draw_map+0x5b2>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
  40da14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40da16:	fb03 5302 	mla	r3, r3, r2, r5
  40da1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40da1e:	931e      	str	r3, [sp, #120]	; 0x78
  40da20:	469c      	mov	ip, r3
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
  40da22:	18cb      	adds	r3, r1, r3
    uint8_t * d8 = (uint8_t *)dst;
  40da24:	a82c      	add	r0, sp, #176	; 0xb0
  40da26:	2202      	movs	r2, #2
  40da28:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40da2a:	e004      	b.n	40da36 <lv_draw_map+0x542>
        *d8 = *s8;
  40da2c:	f813 eb01 	ldrb.w	lr, [r3], #1
  40da30:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  40da34:	3a01      	subs	r2, #1
    while(len) {
  40da36:	2a00      	cmp	r2, #0
  40da38:	d1f8      	bne.n	40da2c <lv_draw_map+0x538>
  40da3a:	9409      	str	r4, [sp, #36]	; 0x24
            dsc->res.opa = src_u8[pxi + px_size - 1];
  40da3c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40da3e:	4419      	add	r1, r3
  40da40:	788b      	ldrb	r3, [r1, #2]
  40da42:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
  40da46:	2203      	movs	r2, #3
  40da48:	e7c9      	b.n	40d9de <lv_draw_map+0x4ea>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
  40da4a:	b229      	sxth	r1, r5
  40da4c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
  40da50:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
  40da54:	9220      	str	r2, [sp, #128]	; 0x80
  40da56:	911e      	str	r1, [sp, #120]	; 0x78
  40da58:	a82d      	add	r0, sp, #180	; 0xb4
  40da5a:	4c1b      	ldr	r4, [pc, #108]	; (40dac8 <lv_draw_map+0x5d4>)
  40da5c:	47a0      	blx	r4
  40da5e:	f8ad 00b0 	strh.w	r0, [sp, #176]	; 0xb0
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
  40da62:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40da64:	991e      	ldr	r1, [sp, #120]	; 0x78
  40da66:	a82d      	add	r0, sp, #180	; 0xb4
  40da68:	4b18      	ldr	r3, [pc, #96]	; (40dacc <lv_draw_map+0x5d8>)
  40da6a:	4798      	blx	r3
  40da6c:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
        pxi = 0; /*unused*/
  40da70:	f04f 0c00 	mov.w	ip, #0
        px_size = 0;    /*unused*/
  40da74:	4662      	mov	r2, ip
  40da76:	e7b2      	b.n	40d9de <lv_draw_map+0x4ea>
        if(dsc->res.color.full == ct.full) return false;
  40da78:	2000      	movs	r0, #0
  40da7a:	e014      	b.n	40daa6 <lv_draw_map+0x5b2>

    dsc->tmp.xs = xs;
  40da7c:	f8ad 60d8 	strh.w	r6, [sp, #216]	; 0xd8
    dsc->tmp.ys = ys;
  40da80:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40da84:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
    dsc->tmp.xs_int = xs_int;
  40da88:	f8ad 50dc 	strh.w	r5, [sp, #220]	; 0xdc
    dsc->tmp.ys_int = ys_int;
  40da8c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  40da90:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
    dsc->tmp.pxi = pxi;
  40da94:	f8cd c0e0 	str.w	ip, [sp, #224]	; 0xe0
    dsc->tmp.px_size = px_size;
  40da98:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4

    bool ret;
    ret = _lv_img_buf_transform_anti_alias(dsc);
  40da9c:	a827      	add	r0, sp, #156	; 0x9c
  40da9e:	4b0c      	ldr	r3, [pc, #48]	; (40dad0 <lv_draw_map+0x5dc>)
  40daa0:	4798      	blx	r3
  40daa2:	e000      	b.n	40daa6 <lv_draw_map+0x5b2>
    if(xs_int >= dsc->cfg.src_w) return false;
  40daa4:	2000      	movs	r0, #0
                        if(ret == false) {
  40daa6:	b9b8      	cbnz	r0, 40dad8 <lv_draw_map+0x5e4>
                            mask_buf[px_i] = LV_OPA_TRANSP;
  40daa8:	2300      	movs	r3, #0
  40daaa:	f807 3009 	strb.w	r3, [r7, r9]
                            continue;
  40daae:	e068      	b.n	40db82 <lv_draw_map+0x68e>
    else if(xs_int < 0) return false;
  40dab0:	2000      	movs	r0, #0
  40dab2:	e7f8      	b.n	40daa6 <lv_draw_map+0x5b2>
    if(ys_int >= dsc->cfg.src_h) return false;
  40dab4:	2000      	movs	r0, #0
  40dab6:	e7f6      	b.n	40daa6 <lv_draw_map+0x5b2>
    else if(ys_int < 0) return false;
  40dab8:	2000      	movs	r0, #0
  40daba:	e7f4      	b.n	40daa6 <lv_draw_map+0x5b2>
  40dabc:	004164c7 	.word	0x004164c7
  40dac0:	00413671 	.word	0x00413671
  40dac4:	00417a79 	.word	0x00417a79
  40dac8:	00413451 	.word	0x00413451
  40dacc:	00413575 	.word	0x00413575
  40dad0:	00413985 	.word	0x00413985
  40dad4:	0000e007 	.word	0x0000e007
                        }
                        else {
                            mask_buf[px_i] = trans_dsc.res.opa;
  40dad8:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
  40dadc:	f807 3009 	strb.w	r3, [r7, r9]
                            c.full = trans_dsc.res.color.full;
  40dae0:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
  40dae4:	e010      	b.n	40db08 <lv_draw_map+0x614>
#endif
                                continue;
                            }
                        }
                        else {
                            mask_buf[px_i] = 0xFF;
  40dae6:	23ff      	movs	r3, #255	; 0xff
  40dae8:	f807 3009 	strb.w	r3, [r7, r9]
#if LV_COLOR_DEPTH == 1
                        c.full = map_px[0];
#elif LV_COLOR_DEPTH == 8
                        c.full =  map_px[0];
#elif LV_COLOR_DEPTH == 16
                        c.full =  map_px[0] + (map_px[1] << 8);
  40daec:	f89a 2000 	ldrb.w	r2, [sl]
  40daf0:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40daf4:	eb02 2203 	add.w	r2, r2, r3, lsl #8
  40daf8:	b292      	uxth	r2, r2
  40dafa:	4613      	mov	r3, r2
#elif LV_COLOR_DEPTH == 32
                        c.full =  *((uint32_t *)map_px);
                        c.ch.alpha = 0xFF;
#endif
                        if(chroma_key) {
  40dafc:	990d      	ldr	r1, [sp, #52]	; 0x34
  40dafe:	b119      	cbz	r1, 40db08 <lv_draw_map+0x614>
                            if(c.full == chroma_keyed_color.full) {
  40db00:	f83f 1030 	ldrh.w	r1, [pc, #-48]	; 40dad4 <lv_draw_map+0x5e0>
  40db04:	428a      	cmp	r2, r1
  40db06:	d053      	beq.n	40dbb0 <lv_draw_map+0x6bc>
                                continue;
                            }
                        }
                    }

                    if(draw_dsc->recolor_opa != 0) {
  40db08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40db0a:	7a92      	ldrb	r2, [r2, #10]
  40db0c:	b3b2      	cbz	r2, 40db7c <lv_draw_map+0x688>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40db0e:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
  40db12:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  40db16:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40db18:	fb04 1202 	mla	r2, r4, r2, r1
  40db1c:	3280      	adds	r2, #128	; 0x80
  40db1e:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  40db22:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  40db26:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40db2a:	f362 0bc7 	bfi	fp, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40db2e:	f8bd 108e 	ldrh.w	r1, [sp, #142]	; 0x8e
  40db32:	f003 0007 	and.w	r0, r3, #7
  40db36:	f3c3 3242 	ubfx	r2, r3, #13, #3
  40db3a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
  40db3e:	fb02 1204 	mla	r2, r2, r4, r1
  40db42:	3280      	adds	r2, #128	; 0x80
  40db44:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  40db48:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  40db4c:	f3c2 6182 	ubfx	r1, r2, #26, #3
  40db50:	f361 0b02 	bfi	fp, r1, #0, #3
  40db54:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40db58:	f362 3b4f 	bfi	fp, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40db5c:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
  40db60:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40db64:	fb03 2304 	mla	r3, r3, r4, r2
  40db68:	3380      	adds	r3, #128	; 0x80
  40db6a:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40db6e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40db72:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40db76:	f363 2b0c 	bfi	fp, r3, #8, #5
  40db7a:	465b      	mov	r3, fp
                        c = lv_color_mix_premult(recolor_premult, c, recolor_opa_inv);
                    }

                    map2[px_i].full = c.full;
  40db7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40db7e:	f822 3019 	strh.w	r3, [r2, r9, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40db82:	f108 0801 	add.w	r8, r8, #1
  40db86:	9b07      	ldr	r3, [sp, #28]
  40db88:	449a      	add	sl, r3
  40db8a:	f109 0901 	add.w	r9, r9, #1
  40db8e:	9b05      	ldr	r3, [sp, #20]
  40db90:	4598      	cmp	r8, r3
  40db92:	da11      	bge.n	40dbb8 <lv_draw_map+0x6c4>
                    if(transform) {
  40db94:	9b06      	ldr	r3, [sp, #24]
  40db96:	2b00      	cmp	r3, #0
  40db98:	f47f aea4 	bne.w	40d8e4 <lv_draw_map+0x3f0>
                        if(alpha_byte) {
  40db9c:	9b08      	ldr	r3, [sp, #32]
  40db9e:	2b00      	cmp	r3, #0
  40dba0:	d0a1      	beq.n	40dae6 <lv_draw_map+0x5f2>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  40dba2:	f89a 3002 	ldrb.w	r3, [sl, #2]
                            mask_buf[px_i] = px_opa;
  40dba6:	f807 3009 	strb.w	r3, [r7, r9]
                            if(px_opa == 0) {
  40dbaa:	2b00      	cmp	r3, #0
  40dbac:	d0e9      	beq.n	40db82 <lv_draw_map+0x68e>
  40dbae:	e79d      	b.n	40daec <lv_draw_map+0x5f8>
                                mask_buf[px_i] = LV_OPA_TRANSP;
  40dbb0:	2300      	movs	r3, #0
  40dbb2:	f807 3009 	strb.w	r3, [r7, r9]
                                continue;
  40dbb6:	e7e4      	b.n	40db82 <lv_draw_map+0x68e>
                }

                /*Apply the masks if any*/
                if(other_mask_cnt) {
  40dbb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40dbba:	bb8b      	cbnz	r3, 40dc20 <lv_draw_map+0x72c>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
                    }
                }

                map_buf_tmp += map_w * px_size_byte;
  40dbbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40dbbe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40dbc0:	9911      	ldr	r1, [sp, #68]	; 0x44
  40dbc2:	fb02 1303 	mla	r3, r2, r3, r1
  40dbc6:	9311      	str	r3, [sp, #68]	; 0x44
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40dbc8:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40dbcc:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
  40dbd0:	1a9b      	subs	r3, r3, r2
  40dbd2:	b29b      	uxth	r3, r3
  40dbd4:	3301      	adds	r3, #1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
  40dbd6:	fa09 f383 	sxtah	r3, r9, r3
  40dbda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40dbdc:	429a      	cmp	r2, r3
  40dbde:	d94c      	bls.n	40dc7a <lv_draw_map+0x786>
                    blend_area.y2 ++;
  40dbe0:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40dbe4:	3301      	adds	r3, #1
  40dbe6:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
  40dbea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
            for(y = 0; y < draw_area_h; y++) {
  40dbee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40dbf0:	3301      	adds	r3, #1
  40dbf2:	930c      	str	r3, [sp, #48]	; 0x30
  40dbf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40dbf6:	9a18      	ldr	r2, [sp, #96]	; 0x60
  40dbf8:	4293      	cmp	r3, r2
  40dbfa:	da72      	bge.n	40dce2 <lv_draw_map+0x7ee>
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
  40dbfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40dbfe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
  40dc02:	f9bd 20e8 	ldrsh.w	r2, [sp, #232]	; 0xe8
  40dc06:	4413      	add	r3, r2
  40dc08:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40dc0a:	f9b2 2000 	ldrsh.w	r2, [r2]
  40dc0e:	1a9b      	subs	r3, r3, r2
  40dc10:	930e      	str	r3, [sp, #56]	; 0x38
                map_px = map_buf_tmp;
  40dc12:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40dc16:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
  40dc1a:	f04f 0800 	mov.w	r8, #0
  40dc1e:	e7b6      	b.n	40db8e <lv_draw_map+0x69a>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
  40dc20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40dc22:	443b      	add	r3, r7
  40dc24:	461d      	mov	r5, r3
  40dc26:	f8bd 00e8 	ldrh.w	r0, [sp, #232]	; 0xe8
  40dc2a:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40dc2c:	8a21      	ldrh	r1, [r4, #16]
  40dc2e:	4401      	add	r1, r0
  40dc30:	f8bd 20ea 	ldrh.w	r2, [sp, #234]	; 0xea
  40dc34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40dc36:	441a      	add	r2, r3
  40dc38:	8a63      	ldrh	r3, [r4, #18]
  40dc3a:	fa13 f282 	uxtah	r2, r3, r2
  40dc3e:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40dc42:	1a1b      	subs	r3, r3, r0
  40dc44:	b29b      	uxth	r3, r3
  40dc46:	3301      	adds	r3, #1
  40dc48:	b21b      	sxth	r3, r3
  40dc4a:	b212      	sxth	r2, r2
  40dc4c:	b209      	sxth	r1, r1
  40dc4e:	4628      	mov	r0, r5
  40dc50:	4c33      	ldr	r4, [pc, #204]	; (40dd20 <lv_draw_map+0x82c>)
  40dc52:	47a0      	blx	r4
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
  40dc54:	b118      	cbz	r0, 40dc5e <lv_draw_map+0x76a>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
  40dc56:	2802      	cmp	r0, #2
  40dc58:	d1b0      	bne.n	40dbbc <lv_draw_map+0x6c8>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
  40dc5a:	901b      	str	r0, [sp, #108]	; 0x6c
  40dc5c:	e7ae      	b.n	40dbbc <lv_draw_map+0x6c8>
  40dc5e:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
  40dc62:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
  40dc66:	1ac9      	subs	r1, r1, r3
  40dc68:	b289      	uxth	r1, r1
  40dc6a:	3101      	adds	r1, #1
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
  40dc6c:	b209      	sxth	r1, r1
  40dc6e:	4628      	mov	r0, r5
  40dc70:	4b2c      	ldr	r3, [pc, #176]	; (40dd24 <lv_draw_map+0x830>)
  40dc72:	4798      	blx	r3
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
  40dc74:	2302      	movs	r3, #2
  40dc76:	931b      	str	r3, [sp, #108]	; 0x6c
  40dc78:	e7a0      	b.n	40dbbc <lv_draw_map+0x6c8>
                }
                else {

                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
  40dc7a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40dc7c:	7bab      	ldrb	r3, [r5, #14]
  40dc7e:	9302      	str	r3, [sp, #8]
  40dc80:	782b      	ldrb	r3, [r5, #0]
  40dc82:	9301      	str	r3, [sp, #4]
  40dc84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40dc86:	9300      	str	r3, [sp, #0]
  40dc88:	463b      	mov	r3, r7
  40dc8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40dc8c:	a925      	add	r1, sp, #148	; 0x94
  40dc8e:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40dc90:	4c25      	ldr	r4, [pc, #148]	; (40dd28 <lv_draw_map+0x834>)
  40dc92:	47a0      	blx	r4

                    blend_area.y1 = blend_area.y2 + 1;
  40dc94:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
  40dc98:	3301      	adds	r3, #1
  40dc9a:	b21b      	sxth	r3, r3
  40dc9c:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
                    blend_area.y2 = blend_area.y1;
  40dca0:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a

                    px_i = 0;
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40dca4:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40dca6:	b943      	cbnz	r3, 40dcba <lv_draw_map+0x7c6>
  40dca8:	886b      	ldrh	r3, [r5, #2]
  40dcaa:	b96b      	cbnz	r3, 40dcc8 <lv_draw_map+0x7d4>
                                draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40dcac:	892b      	ldrh	r3, [r5, #8]
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40dcae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40dcb2:	d00c      	beq.n	40dcce <lv_draw_map+0x7da>
  40dcb4:	2302      	movs	r3, #2
  40dcb6:	931b      	str	r3, [sp, #108]	; 0x6c
  40dcb8:	e001      	b.n	40dcbe <lv_draw_map+0x7ca>
  40dcba:	2302      	movs	r3, #2
  40dcbc:	931b      	str	r3, [sp, #108]	; 0x6c

                    /*Prepare the `mask_buf`if there are other masks*/
                    if(other_mask_cnt) {
  40dcbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40dcc0:	b943      	cbnz	r3, 40dcd4 <lv_draw_map+0x7e0>
                    px_i = 0;
  40dcc2:	2300      	movs	r3, #0
  40dcc4:	9313      	str	r3, [sp, #76]	; 0x4c
  40dcc6:	e792      	b.n	40dbee <lv_draw_map+0x6fa>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40dcc8:	2302      	movs	r3, #2
  40dcca:	931b      	str	r3, [sp, #108]	; 0x6c
  40dccc:	e7f7      	b.n	40dcbe <lv_draw_map+0x7ca>
  40dcce:	2301      	movs	r3, #1
  40dcd0:	931b      	str	r3, [sp, #108]	; 0x6c
  40dcd2:	e7f4      	b.n	40dcbe <lv_draw_map+0x7ca>
                        _lv_memset_ff(mask_buf, mask_buf_size);
  40dcd4:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40dcd6:	4638      	mov	r0, r7
  40dcd8:	4b14      	ldr	r3, [pc, #80]	; (40dd2c <lv_draw_map+0x838>)
  40dcda:	4798      	blx	r3
                    px_i = 0;
  40dcdc:	2300      	movs	r3, #0
  40dcde:	9313      	str	r3, [sp, #76]	; 0x4c
  40dce0:	e785      	b.n	40dbee <lv_draw_map+0x6fa>
  40dce2:	46ba      	mov	sl, r7
                    }
                }
            }

            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
  40dce4:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
  40dce8:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40dcec:	429a      	cmp	r2, r3
  40dcee:	d00f      	beq.n	40dd10 <lv_draw_map+0x81c>
                blend_area.y2--;
  40dcf0:	3b01      	subs	r3, #1
  40dcf2:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
  40dcf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40dcf8:	7b93      	ldrb	r3, [r2, #14]
  40dcfa:	9302      	str	r3, [sp, #8]
  40dcfc:	7813      	ldrb	r3, [r2, #0]
  40dcfe:	9301      	str	r3, [sp, #4]
  40dd00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40dd02:	9300      	str	r3, [sp, #0]
  40dd04:	463b      	mov	r3, r7
  40dd06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40dd08:	a925      	add	r1, sp, #148	; 0x94
  40dd0a:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40dd0c:	4c06      	ldr	r4, [pc, #24]	; (40dd28 <lv_draw_map+0x834>)
  40dd0e:	47a0      	blx	r4
            }

            _lv_mem_buf_release(mask_buf);
  40dd10:	4650      	mov	r0, sl
  40dd12:	4c07      	ldr	r4, [pc, #28]	; (40dd30 <lv_draw_map+0x83c>)
  40dd14:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
  40dd16:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40dd18:	47a0      	blx	r4
        }
    }
}
  40dd1a:	b03d      	add	sp, #244	; 0xf4
  40dd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dd20:	004109d9 	.word	0x004109d9
  40dd24:	00417a21 	.word	0x00417a21
  40dd28:	0040d3d5 	.word	0x0040d3d5
  40dd2c:	00417a79 	.word	0x00417a79
  40dd30:	00417645 	.word	0x00417645

0040dd34 <show_error>:

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
  40dd34:	b570      	push	{r4, r5, r6, lr}
  40dd36:	b0a0      	sub	sp, #128	; 0x80
  40dd38:	4604      	mov	r4, r0
  40dd3a:	460d      	mov	r5, r1
  40dd3c:	4616      	mov	r6, r2
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
  40dd3e:	a80b      	add	r0, sp, #44	; 0x2c
  40dd40:	4b0b      	ldr	r3, [pc, #44]	; (40dd70 <show_error+0x3c>)
  40dd42:	4798      	blx	r3
    rect_dsc.bg_color = LV_COLOR_WHITE;
  40dd44:	4b0b      	ldr	r3, [pc, #44]	; (40dd74 <show_error+0x40>)
  40dd46:	881b      	ldrh	r3, [r3, #0]
  40dd48:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    lv_draw_rect(coords, clip_area, &rect_dsc);
  40dd4c:	aa0b      	add	r2, sp, #44	; 0x2c
  40dd4e:	4629      	mov	r1, r5
  40dd50:	4620      	mov	r0, r4
  40dd52:	4b09      	ldr	r3, [pc, #36]	; (40dd78 <show_error+0x44>)
  40dd54:	4798      	blx	r3

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
  40dd56:	a802      	add	r0, sp, #8
  40dd58:	4b08      	ldr	r3, [pc, #32]	; (40dd7c <show_error+0x48>)
  40dd5a:	4798      	blx	r3
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
  40dd5c:	2300      	movs	r3, #0
  40dd5e:	9300      	str	r3, [sp, #0]
  40dd60:	4633      	mov	r3, r6
  40dd62:	aa02      	add	r2, sp, #8
  40dd64:	4629      	mov	r1, r5
  40dd66:	4620      	mov	r0, r4
  40dd68:	4c05      	ldr	r4, [pc, #20]	; (40dd80 <show_error+0x4c>)
  40dd6a:	47a0      	blx	r4
}
  40dd6c:	b020      	add	sp, #128	; 0x80
  40dd6e:	bd70      	pop	{r4, r5, r6, pc}
  40dd70:	0041338d 	.word	0x0041338d
  40dd74:	0042e578 	.word	0x0042e578
  40dd78:	004133d9 	.word	0x004133d9
  40dd7c:	0040e919 	.word	0x0040e919
  40dd80:	0040e961 	.word	0x0040e961

0040dd84 <lv_draw_img_dsc_init>:
{
  40dd84:	b510      	push	{r4, lr}
  40dd86:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
  40dd88:	2110      	movs	r1, #16
  40dd8a:	4b07      	ldr	r3, [pc, #28]	; (40dda8 <lv_draw_img_dsc_init+0x24>)
  40dd8c:	4798      	blx	r3
    dsc->recolor = LV_COLOR_BLACK;
  40dd8e:	2300      	movs	r3, #0
  40dd90:	81a3      	strh	r3, [r4, #12]
    dsc->opa = LV_OPA_COVER;
  40dd92:	23ff      	movs	r3, #255	; 0xff
  40dd94:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
  40dd96:	f44f 7380 	mov.w	r3, #256	; 0x100
  40dd9a:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
  40dd9c:	7be3      	ldrb	r3, [r4, #15]
  40dd9e:	f043 0301 	orr.w	r3, r3, #1
  40dda2:	73e3      	strb	r3, [r4, #15]
  40dda4:	bd10      	pop	{r4, pc}
  40dda6:	bf00      	nop
  40dda8:	00417a21 	.word	0x00417a21

0040ddac <lv_img_cf_get_px_size>:
    switch(cf) {
  40ddac:	3804      	subs	r0, #4
  40ddae:	280a      	cmp	r0, #10
  40ddb0:	d807      	bhi.n	40ddc2 <lv_img_cf_get_px_size+0x16>
  40ddb2:	e8df f000 	tbb	[pc, r0]
  40ddb6:	0812      	.short	0x0812
  40ddb8:	0e0c0a12 	.word	0x0e0c0a12
  40ddbc:	0e0c0a10 	.word	0x0e0c0a10
  40ddc0:	10          	.byte	0x10
  40ddc1:	00          	.byte	0x00
            px_size = 0;
  40ddc2:	2000      	movs	r0, #0
  40ddc4:	4770      	bx	lr
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
  40ddc6:	2018      	movs	r0, #24
            break;
  40ddc8:	4770      	bx	lr
            px_size = 1;
  40ddca:	2001      	movs	r0, #1
            break;
  40ddcc:	4770      	bx	lr
            px_size = 2;
  40ddce:	2002      	movs	r0, #2
            break;
  40ddd0:	4770      	bx	lr
            px_size = 4;
  40ddd2:	2004      	movs	r0, #4
            break;
  40ddd4:	4770      	bx	lr
            px_size = 8;
  40ddd6:	2008      	movs	r0, #8
            break;
  40ddd8:	4770      	bx	lr
            px_size = LV_COLOR_SIZE;
  40ddda:	2010      	movs	r0, #16
}
  40dddc:	4770      	bx	lr

0040ddde <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
  40ddde:	2803      	cmp	r0, #3
  40dde0:	d005      	beq.n	40ddee <lv_img_cf_is_chroma_keyed+0x10>
  40dde2:	d302      	bcc.n	40ddea <lv_img_cf_is_chroma_keyed+0xc>
  40dde4:	3806      	subs	r0, #6
  40dde6:	2804      	cmp	r0, #4
  40dde8:	d901      	bls.n	40ddee <lv_img_cf_is_chroma_keyed+0x10>
            is_chroma_keyed = false;
  40ddea:	2000      	movs	r0, #0
}
  40ddec:	4770      	bx	lr
            is_chroma_keyed = true;
  40ddee:	2001      	movs	r0, #1
  40ddf0:	4770      	bx	lr

0040ddf2 <lv_img_cf_has_alpha>:
    switch(cf) {
  40ddf2:	3802      	subs	r0, #2
  40ddf4:	280c      	cmp	r0, #12
  40ddf6:	d80a      	bhi.n	40de0e <lv_img_cf_has_alpha+0x1c>
  40ddf8:	e8df f000 	tbb	[pc, r0]
  40ddfc:	07090907 	.word	0x07090907
  40de00:	07070709 	.word	0x07070709
  40de04:	07070707 	.word	0x07070707
  40de08:	07          	.byte	0x07
  40de09:	00          	.byte	0x00
            has_alpha = true;
  40de0a:	2001      	movs	r0, #1
  40de0c:	4770      	bx	lr
            has_alpha = false;
  40de0e:	2000      	movs	r0, #0
}
  40de10:	4770      	bx	lr
	...

0040de14 <lv_img_draw_core>:
{
  40de14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40de18:	b08f      	sub	sp, #60	; 0x3c
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
  40de1a:	781c      	ldrb	r4, [r3, #0]
  40de1c:	2c02      	cmp	r4, #2
  40de1e:	d803      	bhi.n	40de28 <lv_img_draw_core+0x14>
  40de20:	2001      	movs	r0, #1
}
  40de22:	b00f      	add	sp, #60	; 0x3c
  40de24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40de28:	461c      	mov	r4, r3
  40de2a:	460d      	mov	r5, r1
  40de2c:	4682      	mov	sl, r0
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
  40de2e:	8999      	ldrh	r1, [r3, #12]
  40de30:	4610      	mov	r0, r2
  40de32:	4b73      	ldr	r3, [pc, #460]	; (40e000 <lv_img_draw_core+0x1ec>)
  40de34:	4798      	blx	r3
    if(cdsc == NULL) return LV_RES_INV;
  40de36:	4606      	mov	r6, r0
  40de38:	2800      	cmp	r0, #0
  40de3a:	f000 80de 	beq.w	40dffa <lv_img_draw_core+0x1e6>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
  40de3e:	f890 800c 	ldrb.w	r8, [r0, #12]
  40de42:	f008 081f 	and.w	r8, r8, #31
  40de46:	4640      	mov	r0, r8
  40de48:	4b6e      	ldr	r3, [pc, #440]	; (40e004 <lv_img_draw_core+0x1f0>)
  40de4a:	4798      	blx	r3
  40de4c:	4607      	mov	r7, r0
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
  40de4e:	4640      	mov	r0, r8
  40de50:	4b6d      	ldr	r3, [pc, #436]	; (40e008 <lv_img_draw_core+0x1f4>)
  40de52:	4798      	blx	r3
  40de54:	4680      	mov	r8, r0
    if(cdsc->dec_dsc.error_msg != NULL) {
  40de56:	69b2      	ldr	r2, [r6, #24]
  40de58:	b12a      	cbz	r2, 40de66 <lv_img_draw_core+0x52>
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
  40de5a:	4629      	mov	r1, r5
  40de5c:	4650      	mov	r0, sl
  40de5e:	4b6b      	ldr	r3, [pc, #428]	; (40e00c <lv_img_draw_core+0x1f8>)
  40de60:	4798      	blx	r3
    return LV_RES_OK;
  40de62:	2001      	movs	r0, #1
  40de64:	e7dd      	b.n	40de22 <lv_img_draw_core+0xe>
    else if(cdsc->dec_dsc.img_data) {
  40de66:	6933      	ldr	r3, [r6, #16]
  40de68:	2b00      	cmp	r3, #0
  40de6a:	d053      	beq.n	40df14 <lv_img_draw_core+0x100>
  40de6c:	4651      	mov	r1, sl
  40de6e:	aa0a      	add	r2, sp, #40	; 0x28
  40de70:	2308      	movs	r3, #8
  40de72:	e004      	b.n	40de7e <lv_img_draw_core+0x6a>
        *d8 = *s8;
  40de74:	f811 0b01 	ldrb.w	r0, [r1], #1
  40de78:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40de7c:	3b01      	subs	r3, #1
    while(len) {
  40de7e:	2b00      	cmp	r3, #0
  40de80:	d1f8      	bne.n	40de74 <lv_img_draw_core+0x60>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
  40de82:	8863      	ldrh	r3, [r4, #2]
  40de84:	b91b      	cbnz	r3, 40de8e <lv_img_draw_core+0x7a>
  40de86:	8922      	ldrh	r2, [r4, #8]
  40de88:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  40de8c:	d030      	beq.n	40def0 <lv_img_draw_core+0xdc>
  40de8e:	f8ba 1004 	ldrh.w	r1, [sl, #4]
  40de92:	f8ba 2000 	ldrh.w	r2, [sl]
  40de96:	1a89      	subs	r1, r1, r2
  40de98:	b289      	uxth	r1, r1
  40de9a:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40de9c:	f8ba 2006 	ldrh.w	r2, [sl, #6]
  40dea0:	f8ba 0002 	ldrh.w	r0, [sl, #2]
  40dea4:	1a12      	subs	r2, r2, r0
  40dea6:	b292      	uxth	r2, r2
  40dea8:	3201      	adds	r2, #1
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
  40deaa:	1d20      	adds	r0, r4, #4
  40deac:	9001      	str	r0, [sp, #4]
  40deae:	8920      	ldrh	r0, [r4, #8]
  40deb0:	9000      	str	r0, [sp, #0]
  40deb2:	b21b      	sxth	r3, r3
  40deb4:	b212      	sxth	r2, r2
  40deb6:	b209      	sxth	r1, r1
  40deb8:	a80a      	add	r0, sp, #40	; 0x28
  40deba:	f8df 9170 	ldr.w	r9, [pc, #368]	; 40e02c <lv_img_draw_core+0x218>
  40debe:	47c8      	blx	r9
            map_area_rot.x1 += coords->x1;
  40dec0:	f8ba 2000 	ldrh.w	r2, [sl]
  40dec4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  40dec8:	4413      	add	r3, r2
  40deca:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            map_area_rot.y1 += coords->y1;
  40dece:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  40ded2:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
  40ded6:	4419      	add	r1, r3
  40ded8:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            map_area_rot.x2 += coords->x1;
  40dedc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
  40dee0:	440a      	add	r2, r1
  40dee2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            map_area_rot.y2 += coords->y1;
  40dee6:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  40deea:	4413      	add	r3, r2
  40deec:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
  40def0:	aa0a      	add	r2, sp, #40	; 0x28
  40def2:	4629      	mov	r1, r5
  40def4:	a80c      	add	r0, sp, #48	; 0x30
  40def6:	4b46      	ldr	r3, [pc, #280]	; (40e010 <lv_img_draw_core+0x1fc>)
  40def8:	4798      	blx	r3
        if(union_ok == false) {
  40defa:	b908      	cbnz	r0, 40df00 <lv_img_draw_core+0xec>
            return LV_RES_OK;
  40defc:	2001      	movs	r0, #1
  40defe:	e790      	b.n	40de22 <lv_img_draw_core+0xe>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
  40df00:	6932      	ldr	r2, [r6, #16]
  40df02:	f8cd 8004 	str.w	r8, [sp, #4]
  40df06:	9700      	str	r7, [sp, #0]
  40df08:	4623      	mov	r3, r4
  40df0a:	a90c      	add	r1, sp, #48	; 0x30
  40df0c:	4650      	mov	r0, sl
  40df0e:	4c41      	ldr	r4, [pc, #260]	; (40e014 <lv_img_draw_core+0x200>)
  40df10:	47a0      	blx	r4
  40df12:	e7a6      	b.n	40de62 <lv_img_draw_core+0x4e>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
  40df14:	4652      	mov	r2, sl
  40df16:	4629      	mov	r1, r5
  40df18:	a808      	add	r0, sp, #32
  40df1a:	4b3d      	ldr	r3, [pc, #244]	; (40e010 <lv_img_draw_core+0x1fc>)
  40df1c:	4798      	blx	r3
        if(union_ok == false) {
  40df1e:	b908      	cbnz	r0, 40df24 <lv_img_draw_core+0x110>
            return LV_RES_OK;
  40df20:	2001      	movs	r0, #1
  40df22:	e77e      	b.n	40de22 <lv_img_draw_core+0xe>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40df24:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40df28:	f10d 0938 	add.w	r9, sp, #56	; 0x38
  40df2c:	f839 2d18 	ldrh.w	r2, [r9, #-24]!
  40df30:	1a9b      	subs	r3, r3, r2
  40df32:	b29b      	uxth	r3, r3
  40df34:	3301      	adds	r3, #1
  40df36:	b21b      	sxth	r3, r3
  40df38:	9303      	str	r3, [sp, #12]
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
  40df3a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  40df3e:	4b36      	ldr	r3, [pc, #216]	; (40e018 <lv_img_draw_core+0x204>)
  40df40:	4798      	blx	r3
  40df42:	9007      	str	r0, [sp, #28]
    uint8_t * d8 = (uint8_t *)dst;
  40df44:	aa0a      	add	r2, sp, #40	; 0x28
  40df46:	2308      	movs	r3, #8
  40df48:	e004      	b.n	40df54 <lv_img_draw_core+0x140>
        *d8 = *s8;
  40df4a:	f819 1b01 	ldrb.w	r1, [r9], #1
  40df4e:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  40df52:	3b01      	subs	r3, #1
    while(len) {
  40df54:	2b00      	cmp	r3, #0
  40df56:	d1f8      	bne.n	40df4a <lv_img_draw_core+0x136>
        lv_area_set_height(&line, 1);
  40df58:	2101      	movs	r1, #1
  40df5a:	a80a      	add	r0, sp, #40	; 0x28
  40df5c:	4b2f      	ldr	r3, [pc, #188]	; (40e01c <lv_img_draw_core+0x208>)
  40df5e:	4798      	blx	r3
        int32_t x = mask_com.x1 - coords->x1;
  40df60:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
  40df64:	f9ba 2000 	ldrsh.w	r2, [sl]
        int32_t y = mask_com.y1 - coords->y1;
  40df68:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
  40df6c:	f9ba a002 	ldrsh.w	sl, [sl, #2]
  40df70:	eba9 0a0a 	sub.w	sl, r9, sl
  40df74:	9604      	str	r6, [sp, #16]
  40df76:	9e07      	ldr	r6, [sp, #28]
  40df78:	469b      	mov	fp, r3
  40df7a:	9502      	str	r5, [sp, #8]
  40df7c:	4615      	mov	r5, r2
  40df7e:	9406      	str	r4, [sp, #24]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
  40df80:	e009      	b.n	40df96 <lv_img_draw_core+0x182>
                lv_img_decoder_close(&cdsc->dec_dsc);
  40df82:	9805      	ldr	r0, [sp, #20]
  40df84:	4b26      	ldr	r3, [pc, #152]	; (40e020 <lv_img_draw_core+0x20c>)
  40df86:	4798      	blx	r3
                _lv_mem_buf_release(buf);
  40df88:	9807      	ldr	r0, [sp, #28]
  40df8a:	4b26      	ldr	r3, [pc, #152]	; (40e024 <lv_img_draw_core+0x210>)
  40df8c:	4798      	blx	r3
                return LV_RES_INV;
  40df8e:	2000      	movs	r0, #0
  40df90:	e747      	b.n	40de22 <lv_img_draw_core+0xe>
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
  40df92:	f109 0901 	add.w	r9, r9, #1
  40df96:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40df9a:	4599      	cmp	r9, r3
  40df9c:	dc29      	bgt.n	40dff2 <lv_img_draw_core+0x1de>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
  40df9e:	aa0a      	add	r2, sp, #40	; 0x28
  40dfa0:	9902      	ldr	r1, [sp, #8]
  40dfa2:	a80c      	add	r0, sp, #48	; 0x30
  40dfa4:	4b1a      	ldr	r3, [pc, #104]	; (40e010 <lv_img_draw_core+0x1fc>)
  40dfa6:	4798      	blx	r3
            if(union_ok == false) continue;
  40dfa8:	2800      	cmp	r0, #0
  40dfaa:	d0f2      	beq.n	40df92 <lv_img_draw_core+0x17e>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
  40dfac:	9804      	ldr	r0, [sp, #16]
  40dfae:	9005      	str	r0, [sp, #20]
  40dfb0:	ebab 0105 	sub.w	r1, fp, r5
  40dfb4:	9600      	str	r6, [sp, #0]
  40dfb6:	9b03      	ldr	r3, [sp, #12]
  40dfb8:	fa0f f28a 	sxth.w	r2, sl
  40dfbc:	b209      	sxth	r1, r1
  40dfbe:	4c1a      	ldr	r4, [pc, #104]	; (40e028 <lv_img_draw_core+0x214>)
  40dfc0:	47a0      	blx	r4
            if(read_res != LV_RES_OK) {
  40dfc2:	2801      	cmp	r0, #1
  40dfc4:	d1dd      	bne.n	40df82 <lv_img_draw_core+0x16e>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
  40dfc6:	f8cd 8004 	str.w	r8, [sp, #4]
  40dfca:	9700      	str	r7, [sp, #0]
  40dfcc:	9b06      	ldr	r3, [sp, #24]
  40dfce:	4632      	mov	r2, r6
  40dfd0:	a90c      	add	r1, sp, #48	; 0x30
  40dfd2:	a80a      	add	r0, sp, #40	; 0x28
  40dfd4:	4c0f      	ldr	r4, [pc, #60]	; (40e014 <lv_img_draw_core+0x200>)
  40dfd6:	47a0      	blx	r4
            line.y1++;
  40dfd8:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
  40dfdc:	3301      	adds	r3, #1
  40dfde:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            line.y2++;
  40dfe2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
  40dfe6:	3301      	adds	r3, #1
  40dfe8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            y++;
  40dfec:	f10a 0a01 	add.w	sl, sl, #1
  40dff0:	e7cf      	b.n	40df92 <lv_img_draw_core+0x17e>
        _lv_mem_buf_release(buf);
  40dff2:	9807      	ldr	r0, [sp, #28]
  40dff4:	4b0b      	ldr	r3, [pc, #44]	; (40e024 <lv_img_draw_core+0x210>)
  40dff6:	4798      	blx	r3
  40dff8:	e733      	b.n	40de62 <lv_img_draw_core+0x4e>
    if(cdsc == NULL) return LV_RES_INV;
  40dffa:	2000      	movs	r0, #0
  40dffc:	e711      	b.n	40de22 <lv_img_draw_core+0xe>
  40dffe:	bf00      	nop
  40e000:	00413e11 	.word	0x00413e11
  40e004:	0040dddf 	.word	0x0040dddf
  40e008:	0040ddf3 	.word	0x0040ddf3
  40e00c:	0040dd35 	.word	0x0040dd35
  40e010:	004164e3 	.word	0x004164e3
  40e014:	0040d4f5 	.word	0x0040d4f5
  40e018:	00417895 	.word	0x00417895
  40e01c:	004164bb 	.word	0x004164bb
  40e020:	0041495d 	.word	0x0041495d
  40e024:	00417645 	.word	0x00417645
  40e028:	00414939 	.word	0x00414939
  40e02c:	00413799 	.word	0x00413799

0040e030 <lv_draw_img>:
{
  40e030:	b570      	push	{r4, r5, r6, lr}
  40e032:	4604      	mov	r4, r0
  40e034:	460d      	mov	r5, r1
    if(src == NULL) {
  40e036:	b122      	cbz	r2, 40e042 <lv_draw_img+0x12>
  40e038:	4611      	mov	r1, r2
    if(dsc->opa <= LV_OPA_MIN) return;
  40e03a:	781a      	ldrb	r2, [r3, #0]
  40e03c:	2a02      	cmp	r2, #2
  40e03e:	d804      	bhi.n	40e04a <lv_draw_img+0x1a>
  40e040:	bd70      	pop	{r4, r5, r6, pc}
        show_error(coords, mask, "No\ndata");
  40e042:	4a08      	ldr	r2, [pc, #32]	; (40e064 <lv_draw_img+0x34>)
  40e044:	4b08      	ldr	r3, [pc, #32]	; (40e068 <lv_draw_img+0x38>)
  40e046:	4798      	blx	r3
        return;
  40e048:	bd70      	pop	{r4, r5, r6, pc}
    res = lv_img_draw_core(coords, mask, src, dsc);
  40e04a:	460a      	mov	r2, r1
  40e04c:	4629      	mov	r1, r5
  40e04e:	4e07      	ldr	r6, [pc, #28]	; (40e06c <lv_draw_img+0x3c>)
  40e050:	47b0      	blx	r6
    if(res == LV_RES_INV) {
  40e052:	2800      	cmp	r0, #0
  40e054:	d1f4      	bne.n	40e040 <lv_draw_img+0x10>
        show_error(coords, mask, "No\ndata");
  40e056:	4a03      	ldr	r2, [pc, #12]	; (40e064 <lv_draw_img+0x34>)
  40e058:	4629      	mov	r1, r5
  40e05a:	4620      	mov	r0, r4
  40e05c:	4b02      	ldr	r3, [pc, #8]	; (40e068 <lv_draw_img+0x38>)
  40e05e:	4798      	blx	r3
        return;
  40e060:	e7ee      	b.n	40e040 <lv_draw_img+0x10>
  40e062:	bf00      	nop
  40e064:	0042e57c 	.word	0x0042e57c
  40e068:	0040dd35 	.word	0x0040dd35
  40e06c:	0040de15 	.word	0x0040de15

0040e070 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
  40e070:	b160      	cbz	r0, 40e08c <lv_img_src_get_type+0x1c>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
  40e072:	7802      	ldrb	r2, [r0, #0]
  40e074:	f1a2 0320 	sub.w	r3, r2, #32
  40e078:	b2db      	uxtb	r3, r3
  40e07a:	2b5f      	cmp	r3, #95	; 0x5f
  40e07c:	d908      	bls.n	40e090 <lv_img_src_get_type+0x20>
    else if(u8_p[0] >= 0x80) {
  40e07e:	f012 0f80 	tst.w	r2, #128	; 0x80
  40e082:	d101      	bne.n	40e088 <lv_img_src_get_type+0x18>
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
  40e084:	2000      	movs	r0, #0
}
  40e086:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
  40e088:	2002      	movs	r0, #2
  40e08a:	4770      	bx	lr
    if(src == NULL) return img_src_type;
  40e08c:	2003      	movs	r0, #3
  40e08e:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
  40e090:	2001      	movs	r0, #1
  40e092:	4770      	bx	lr

0040e094 <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
  40e094:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  40e098:	b2db      	uxtb	r3, r3
  40e09a:	2b09      	cmp	r3, #9
  40e09c:	d917      	bls.n	40e0ce <hex_char_to_num+0x3a>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
  40e09e:	2860      	cmp	r0, #96	; 0x60
  40e0a0:	d901      	bls.n	40e0a6 <hex_char_to_num+0x12>
  40e0a2:	3820      	subs	r0, #32
  40e0a4:	b2c0      	uxtb	r0, r0

        switch(hex) {
  40e0a6:	3841      	subs	r0, #65	; 0x41
  40e0a8:	2805      	cmp	r0, #5
  40e0aa:	d80e      	bhi.n	40e0ca <hex_char_to_num+0x36>
  40e0ac:	e8df f000 	tbb	[pc, r0]
  40e0b0:	07051103 	.word	0x07051103
  40e0b4:	0b09      	.short	0x0b09
            case 'A':
                result = 10;
  40e0b6:	200a      	movs	r0, #10
  40e0b8:	4770      	bx	lr
                break;
            case 'B':
                result = 11;
                break;
            case 'C':
                result = 12;
  40e0ba:	200c      	movs	r0, #12
                break;
  40e0bc:	4770      	bx	lr
            case 'D':
                result = 13;
  40e0be:	200d      	movs	r0, #13
                break;
  40e0c0:	4770      	bx	lr
            case 'E':
                result = 14;
  40e0c2:	200e      	movs	r0, #14
                break;
  40e0c4:	4770      	bx	lr
            case 'F':
                result = 15;
  40e0c6:	200f      	movs	r0, #15
                break;
  40e0c8:	4770      	bx	lr
            default:
                result = 0;
  40e0ca:	2000      	movs	r0, #0
                break;
  40e0cc:	4770      	bx	lr
        result = hex - '0';
  40e0ce:	4618      	mov	r0, r3
  40e0d0:	4770      	bx	lr
                result = 11;
  40e0d2:	200b      	movs	r0, #11
        }
    }

    return result;
}
  40e0d4:	4770      	bx	lr
	...

0040e0d8 <draw_letter_subpx>:
{
  40e0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e0dc:	b09d      	sub	sp, #116	; 0x74
  40e0de:	f8bd 909c 	ldrh.w	r9, [sp, #156]	; 0x9c
  40e0e2:	f89d 40a0 	ldrb.w	r4, [sp, #160]	; 0xa0
  40e0e6:	9409      	str	r4, [sp, #36]	; 0x24
  40e0e8:	f89d 40a4 	ldrb.w	r4, [sp, #164]	; 0xa4
  40e0ec:	9416      	str	r4, [sp, #88]	; 0x58
    uint32_t bpp = g->bpp;
  40e0ee:	7a95      	ldrb	r5, [r2, #10]
    if(bpp == 3) bpp = 4;
  40e0f0:	2d03      	cmp	r5, #3
  40e0f2:	d00d      	beq.n	40e110 <draw_letter_subpx+0x38>
    switch(bpp) {
  40e0f4:	1e6c      	subs	r4, r5, #1
  40e0f6:	2c07      	cmp	r4, #7
  40e0f8:	f200 820e 	bhi.w	40e518 <draw_letter_subpx+0x440>
  40e0fc:	e8df f014 	tbh	[pc, r4, lsl #1]
  40e100:	0019000a 	.word	0x0019000a
  40e104:	000f020c 	.word	0x000f020c
  40e108:	020c020c 	.word	0x020c020c
  40e10c:	0014020c 	.word	0x0014020c
    if(bpp == 3) bpp = 4;
  40e110:	2504      	movs	r5, #4
  40e112:	e7ef      	b.n	40e0f4 <draw_letter_subpx+0x1c>
            bitmask_init  = 0x80;
  40e114:	2480      	movs	r4, #128	; 0x80
  40e116:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp1_opa_table;
  40e118:	4caf      	ldr	r4, [pc, #700]	; (40e3d8 <draw_letter_subpx+0x300>)
  40e11a:	940b      	str	r4, [sp, #44]	; 0x2c
  40e11c:	e00d      	b.n	40e13a <draw_letter_subpx+0x62>
            bitmask_init  = 0xF0;
  40e11e:	24f0      	movs	r4, #240	; 0xf0
  40e120:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp4_opa_table;
  40e122:	4cae      	ldr	r4, [pc, #696]	; (40e3dc <draw_letter_subpx+0x304>)
  40e124:	940b      	str	r4, [sp, #44]	; 0x2c
            break;
  40e126:	e008      	b.n	40e13a <draw_letter_subpx+0x62>
            bitmask_init  = 0xFF;
  40e128:	24ff      	movs	r4, #255	; 0xff
  40e12a:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp8_opa_table;
  40e12c:	4cac      	ldr	r4, [pc, #688]	; (40e3e0 <draw_letter_subpx+0x308>)
  40e12e:	940b      	str	r4, [sp, #44]	; 0x2c
            break;       /*No opa table, pixel value will be used directly*/
  40e130:	e003      	b.n	40e13a <draw_letter_subpx+0x62>
            bitmask_init  = 0xC0;
  40e132:	24c0      	movs	r4, #192	; 0xc0
  40e134:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp2_opa_table;
  40e136:	4cab      	ldr	r4, [pc, #684]	; (40e3e4 <draw_letter_subpx+0x30c>)
  40e138:	940b      	str	r4, [sp, #44]	; 0x2c
    int32_t box_w = g->box_w;
  40e13a:	8854      	ldrh	r4, [r2, #2]
  40e13c:	9411      	str	r4, [sp, #68]	; 0x44
    int32_t box_h = g->box_h;
  40e13e:	f8b2 e004 	ldrh.w	lr, [r2, #4]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
  40e142:	fb05 f604 	mul.w	r6, r5, r4
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
  40e146:	f9b3 2000 	ldrsh.w	r2, [r3]
  40e14a:	4282      	cmp	r2, r0
  40e14c:	f340 8097 	ble.w	40e27e <draw_letter_subpx+0x1a6>
  40e150:	1a12      	subs	r2, r2, r0
  40e152:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40e156:	920f      	str	r2, [sp, #60]	; 0x3c
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
  40e158:	4aa3      	ldr	r2, [pc, #652]	; (40e3e8 <draw_letter_subpx+0x310>)
  40e15a:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40e15c:	fb82 4204 	smull	r4, r2, r2, r4
  40e160:	4402      	add	r2, r0
  40e162:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
  40e166:	42a2      	cmp	r2, r4
  40e168:	f340 808c 	ble.w	40e284 <draw_letter_subpx+0x1ac>
  40e16c:	1a22      	subs	r2, r4, r0
  40e16e:	3201      	adds	r2, #1
  40e170:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40e174:	9208      	str	r2, [sp, #32]
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40e176:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  40e17a:	428a      	cmp	r2, r1
  40e17c:	f340 8085 	ble.w	40e28a <draw_letter_subpx+0x1b2>
  40e180:	1a52      	subs	r2, r2, r1
  40e182:	920d      	str	r2, [sp, #52]	; 0x34
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40e184:	eb0e 0201 	add.w	r2, lr, r1
  40e188:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
  40e18c:	42a2      	cmp	r2, r4
  40e18e:	dd7f      	ble.n	40e290 <draw_letter_subpx+0x1b8>
  40e190:	1a64      	subs	r4, r4, r1
  40e192:	1c62      	adds	r2, r4, #1
  40e194:	9213      	str	r2, [sp, #76]	; 0x4c
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
  40e196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40e198:	fb05 f402 	mul.w	r4, r5, r2
  40e19c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40e19e:	fb06 4402 	mla	r4, r6, r2, r4
    map_p += bit_ofs >> 3;
  40e1a2:	9e26      	ldr	r6, [sp, #152]	; 0x98
  40e1a4:	eb06 06e4 	add.w	r6, r6, r4, asr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
  40e1a8:	f004 0407 	and.w	r4, r4, #7
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
  40e1ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e1ae:	fb0e f202 	mul.w	r2, lr, r2
  40e1b2:	9212      	str	r2, [sp, #72]	; 0x48
  40e1b4:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
  40e1b8:	dd02      	ble.n	40e1c0 <draw_letter_subpx+0xe8>
  40e1ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40e1be:	9212      	str	r2, [sp, #72]	; 0x48
  40e1c0:	9317      	str	r3, [sp, #92]	; 0x5c
  40e1c2:	468a      	mov	sl, r1
  40e1c4:	4683      	mov	fp, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40e1c6:	9f12      	ldr	r7, [sp, #72]	; 0x48
  40e1c8:	4638      	mov	r0, r7
  40e1ca:	f8df 822c 	ldr.w	r8, [pc, #556]	; 40e3f8 <draw_letter_subpx+0x320>
  40e1ce:	47c0      	blx	r8
  40e1d0:	900c      	str	r0, [sp, #48]	; 0x30
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40e1d2:	0078      	lsls	r0, r7, #1
  40e1d4:	47c0      	blx	r8
  40e1d6:	900e      	str	r0, [sp, #56]	; 0x38
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40e1d8:	4b84      	ldr	r3, [pc, #528]	; (40e3ec <draw_letter_subpx+0x314>)
  40e1da:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40e1dc:	4b84      	ldr	r3, [pc, #528]	; (40e3f0 <draw_letter_subpx+0x318>)
  40e1de:	4798      	blx	r3
  40e1e0:	8a83      	ldrh	r3, [r0, #20]
  40e1e2:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
  40e1e6:	b291      	uxth	r1, r2
  40e1e8:	1a5b      	subs	r3, r3, r1
  40e1ea:	b29b      	uxth	r3, r3
  40e1ec:	3301      	adds	r3, #1
  40e1ee:	b21b      	sxth	r3, r3
  40e1f0:	4619      	mov	r1, r3
  40e1f2:	9314      	str	r3, [sp, #80]	; 0x50
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
  40e1f4:	f8d0 8008 	ldr.w	r8, [r0, #8]
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
  40e1f8:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
  40e1fc:	ebaa 0303 	sub.w	r3, sl, r3
  40e200:	4608      	mov	r0, r1
  40e202:	fb03 b301 	mla	r3, r3, r1, fp
  40e206:	1a9b      	subs	r3, r3, r2
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
  40e208:	4a77      	ldr	r2, [pc, #476]	; (40e3e8 <draw_letter_subpx+0x310>)
  40e20a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40e20c:	fb82 e107 	smull	lr, r1, r2, r7
  40e210:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
  40e214:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  40e216:	fb00 1007 	mla	r0, r0, r7, r1
  40e21a:	0040      	lsls	r0, r0, #1
  40e21c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  40e220:	4498      	add	r8, r3
    map_area.x1 = col_start / 3 + pos_x;
  40e222:	fa1f f08b 	uxth.w	r0, fp
  40e226:	4401      	add	r1, r0
  40e228:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
    map_area.x2 = col_end / 3  + pos_x - 1;
  40e22c:	9908      	ldr	r1, [sp, #32]
  40e22e:	fb82 2301 	smull	r2, r3, r2, r1
  40e232:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
  40e236:	4403      	add	r3, r0
  40e238:	b29b      	uxth	r3, r3
  40e23a:	3b01      	subs	r3, #1
  40e23c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    map_area.y1 = row_start + pos_y;
  40e240:	eb07 030a 	add.w	r3, r7, sl
  40e244:	b21b      	sxth	r3, r3
  40e246:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    map_area.y2 = map_area.y1;
  40e24a:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40e24e:	4b69      	ldr	r3, [pc, #420]	; (40e3f4 <draw_letter_subpx+0x31c>)
  40e250:	4798      	blx	r3
  40e252:	9015      	str	r0, [sp, #84]	; 0x54
    uint8_t txt_rgb[3] = {color.ch.red, (color.ch.green_h << 3) + color.ch.green_l, color.ch.blue};
  40e254:	f3c9 03c4 	ubfx	r3, r9, #3, #5
  40e258:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
  40e25c:	f009 0207 	and.w	r2, r9, #7
  40e260:	f3c9 3342 	ubfx	r3, r9, #13, #3
  40e264:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40e268:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
  40e26c:	f3c9 2904 	ubfx	r9, r9, #8, #5
  40e270:	f88d 9062 	strb.w	r9, [sp, #98]	; 0x62
    int32_t mask_p = 0;
  40e274:	2300      	movs	r3, #0
  40e276:	9310      	str	r3, [sp, #64]	; 0x40
  40e278:	f8bd 7014 	ldrh.w	r7, [sp, #20]
    for(row = row_start ; row < row_end; row++) {
  40e27c:	e0eb      	b.n	40e456 <draw_letter_subpx+0x37e>
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
  40e27e:	2200      	movs	r2, #0
  40e280:	920f      	str	r2, [sp, #60]	; 0x3c
  40e282:	e769      	b.n	40e158 <draw_letter_subpx+0x80>
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
  40e284:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e286:	9208      	str	r2, [sp, #32]
  40e288:	e775      	b.n	40e176 <draw_letter_subpx+0x9e>
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40e28a:	2200      	movs	r2, #0
  40e28c:	920d      	str	r2, [sp, #52]	; 0x34
  40e28e:	e779      	b.n	40e184 <draw_letter_subpx+0xac>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40e290:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
  40e294:	e77f      	b.n	40e196 <draw_letter_subpx+0xbe>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
  40e296:	2d08      	cmp	r5, #8
  40e298:	d00b      	beq.n	40e2b2 <draw_letter_subpx+0x1da>
  40e29a:	b2db      	uxtb	r3, r3
  40e29c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40e29e:	5cd2      	ldrb	r2, [r2, r3]
  40e2a0:	e007      	b.n	40e2b2 <draw_letter_subpx+0x1da>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40e2a2:	b2da      	uxtb	r2, r3
  40e2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e2a6:	fb03 f202 	mul.w	r2, r3, r2
  40e2aa:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40e2ae:	e000      	b.n	40e2b2 <draw_letter_subpx+0x1da>
                px_opa = 0;
  40e2b0:	2200      	movs	r2, #0
            font_rgb[subpx_cnt] = px_opa;
  40e2b2:	ab1c      	add	r3, sp, #112	; 0x70
  40e2b4:	440b      	add	r3, r1
  40e2b6:	f803 2c0c 	strb.w	r2, [r3, #-12]
            subpx_cnt ++;
  40e2ba:	3101      	adds	r1, #1
            if(subpx_cnt == 3) {
  40e2bc:	2903      	cmp	r1, #3
  40e2be:	d028      	beq.n	40e312 <draw_letter_subpx+0x23a>
            if(col_bit < (int32_t)(8 - bpp)) {
  40e2c0:	f1c5 0308 	rsb	r3, r5, #8
  40e2c4:	429c      	cmp	r4, r3
  40e2c6:	f280 8081 	bge.w	40e3cc <draw_letter_subpx+0x2f4>
                col_bit += bpp;
  40e2ca:	9b05      	ldr	r3, [sp, #20]
  40e2cc:	442b      	add	r3, r5
  40e2ce:	461c      	mov	r4, r3
                bitmask = bitmask >> bpp;
  40e2d0:	fa2e fe05 	lsr.w	lr, lr, r5
        for(col = col_start; col < col_end; col++) {
  40e2d4:	3001      	adds	r0, #1
  40e2d6:	9b08      	ldr	r3, [sp, #32]
  40e2d8:	4298      	cmp	r0, r3
  40e2da:	f280 808f 	bge.w	40e3fc <draw_letter_subpx+0x324>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
  40e2de:	7833      	ldrb	r3, [r6, #0]
  40e2e0:	ea0e 0203 	and.w	r2, lr, r3
  40e2e4:	9405      	str	r4, [sp, #20]
  40e2e6:	426b      	negs	r3, r5
  40e2e8:	1b1b      	subs	r3, r3, r4
  40e2ea:	3308      	adds	r3, #8
  40e2ec:	fa22 f303 	lsr.w	r3, r2, r3
            if(letter_px != 0) {
  40e2f0:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
  40e2f4:	d0dc      	beq.n	40e2b0 <draw_letter_subpx+0x1d8>
                if(opa == LV_OPA_COVER) {
  40e2f6:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40e2f8:	2fff      	cmp	r7, #255	; 0xff
  40e2fa:	d0cc      	beq.n	40e296 <draw_letter_subpx+0x1be>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40e2fc:	2d08      	cmp	r5, #8
  40e2fe:	d0d0      	beq.n	40e2a2 <draw_letter_subpx+0x1ca>
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
  40e300:	b2db      	uxtb	r3, r3
  40e302:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40e304:	5cd2      	ldrb	r2, [r2, r3]
  40e306:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e308:	fb02 f203 	mul.w	r2, r2, r3
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40e30c:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40e310:	e7cf      	b.n	40e2b2 <draw_letter_subpx+0x1da>
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red,
  40e312:	f898 9000 	ldrb.w	r9, [r8]
  40e316:	ea4f 0bd9 	mov.w	fp, r9, lsr #3
                                     (vdb_buf_tmp->ch.green_h << 3) + vdb_buf_tmp->ch.green_l,
  40e31a:	f009 0107 	and.w	r1, r9, #7
  40e31e:	f898 2001 	ldrb.w	r2, [r8, #1]
  40e322:	ea4f 1952 	mov.w	r9, r2, lsr #5
  40e326:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
                                     vdb_buf_tmp->ch.blue
  40e32a:	f002 021f 	and.w	r2, r2, #31
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
  40e32e:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
  40e332:	f89d 1064 	ldrb.w	r1, [sp, #100]	; 0x64
  40e336:	f1c1 0aff 	rsb	sl, r1, #255	; 0xff
  40e33a:	fb0a fa0b 	mul.w	sl, sl, fp
  40e33e:	fb01 aa03 	mla	sl, r1, r3, sl
  40e342:	f3ca 2a04 	ubfx	sl, sl, #8, #5
  40e346:	9b06      	ldr	r3, [sp, #24]
  40e348:	f36a 03c7 	bfi	r3, sl, #3, #5
  40e34c:	461f      	mov	r7, r3
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
  40e34e:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
  40e352:	f89d a066 	ldrb.w	sl, [sp, #102]	; 0x66
  40e356:	f1ca 0bff 	rsb	fp, sl, #255	; 0xff
  40e35a:	fb0b f202 	mul.w	r2, fp, r2
  40e35e:	fb0a 2203 	mla	r2, sl, r3, r2
  40e362:	f3c2 2204 	ubfx	r2, r2, #8, #5
  40e366:	463b      	mov	r3, r7
  40e368:	f362 230c 	bfi	r3, r2, #8, #5
  40e36c:	461f      	mov	r7, r3
                uint8_t green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
  40e36e:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
  40e372:	f89d b065 	ldrb.w	fp, [sp, #101]	; 0x65
  40e376:	f1cb 02ff 	rsb	r2, fp, #255	; 0xff
  40e37a:	fb02 f909 	mul.w	r9, r2, r9
  40e37e:	fb0b 9303 	mla	r3, fp, r3, r9
  40e382:	f3c3 2307 	ubfx	r3, r3, #8, #8
                res_color.ch.green_h = green >> 3;
  40e386:	f3c3 02c2 	ubfx	r2, r3, #3, #3
  40e38a:	f362 0702 	bfi	r7, r2, #0, #3
  40e38e:	463a      	mov	r2, r7
                res_color.ch.green_l = green & 0x7;
  40e390:	f363 324f 	bfi	r2, r3, #13, #3
  40e394:	9206      	str	r2, [sp, #24]
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
  40e396:	b951      	cbnz	r1, 40e3ae <draw_letter_subpx+0x2d6>
  40e398:	f1bb 0f00 	cmp.w	fp, #0
  40e39c:	d107      	bne.n	40e3ae <draw_letter_subpx+0x2d6>
  40e39e:	f1ba 0f00 	cmp.w	sl, #0
  40e3a2:	d104      	bne.n	40e3ae <draw_letter_subpx+0x2d6>
  40e3a4:	2300      	movs	r3, #0
  40e3a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40e3a8:	f802 300c 	strb.w	r3, [r2, ip]
  40e3ac:	e003      	b.n	40e3b6 <draw_letter_subpx+0x2de>
                else mask_buf[mask_p] = LV_OPA_COVER;
  40e3ae:	23ff      	movs	r3, #255	; 0xff
  40e3b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40e3b2:	f802 300c 	strb.w	r3, [r2, ip]
                color_buf[mask_p] = res_color;
  40e3b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40e3b8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  40e3bc:	f823 201c 	strh.w	r2, [r3, ip, lsl #1]
                mask_p++;
  40e3c0:	f10c 0c01 	add.w	ip, ip, #1
                vdb_buf_tmp++;
  40e3c4:	f108 0802 	add.w	r8, r8, #2
                subpx_cnt = 0;
  40e3c8:	2100      	movs	r1, #0
  40e3ca:	e779      	b.n	40e2c0 <draw_letter_subpx+0x1e8>
                map_p++;
  40e3cc:	3601      	adds	r6, #1
                bitmask = bitmask_init;
  40e3ce:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
                col_bit = 0;
  40e3d2:	2400      	movs	r4, #0
  40e3d4:	e77e      	b.n	40e2d4 <draw_letter_subpx+0x1fc>
  40e3d6:	bf00      	nop
  40e3d8:	0042e584 	.word	0x0042e584
  40e3dc:	0042e58c 	.word	0x0042e58c
  40e3e0:	0042e59c 	.word	0x0042e59c
  40e3e4:	0042e588 	.word	0x0042e588
  40e3e8:	55555556 	.word	0x55555556
  40e3ec:	00409709 	.word	0x00409709
  40e3f0:	00415d25 	.word	0x00415d25
  40e3f4:	00410aa1 	.word	0x00410aa1
  40e3f8:	00417895 	.word	0x00417895
  40e3fc:	46e3      	mov	fp, ip
  40e3fe:	f8bd 7018 	ldrh.w	r7, [sp, #24]
        if(other_mask_cnt) {
  40e402:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40e404:	2b00      	cmp	r3, #0
  40e406:	d134      	bne.n	40e472 <draw_letter_subpx+0x39a>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
  40e408:	9b08      	ldr	r3, [sp, #32]
  40e40a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40e40c:	eba3 0902 	sub.w	r9, r3, r2
  40e410:	465b      	mov	r3, fp
  40e412:	444b      	add	r3, r9
  40e414:	9912      	ldr	r1, [sp, #72]	; 0x48
  40e416:	4299      	cmp	r1, r3
  40e418:	dd4c      	ble.n	40e4b4 <draw_letter_subpx+0x3dc>
            map_area.y2 ++;
  40e41a:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
  40e41e:	3301      	adds	r3, #1
  40e420:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
  40e424:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
        col_bit += ((box_w - col_end) + col_start) * bpp;
  40e428:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40e42a:	9a08      	ldr	r2, [sp, #32]
  40e42c:	1a9b      	subs	r3, r3, r2
  40e42e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40e430:	4413      	add	r3, r2
  40e432:	fb03 4405 	mla	r4, r3, r5, r4
        map_p += (col_bit >> 3);
  40e436:	eb06 06e4 	add.w	r6, r6, r4, asr #3
        col_bit = col_bit & 0x7;
  40e43a:	f004 0407 	and.w	r4, r4, #7
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
  40e43e:	4b38      	ldr	r3, [pc, #224]	; (40e520 <draw_letter_subpx+0x448>)
  40e440:	fb83 2309 	smull	r2, r3, r3, r9
  40e444:	ebc3 79e9 	rsb	r9, r3, r9, asr #31
  40e448:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40e44a:	4499      	add	r9, r3
  40e44c:	eb08 0849 	add.w	r8, r8, r9, lsl #1
    for(row = row_start ; row < row_end; row++) {
  40e450:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e452:	3301      	adds	r3, #1
  40e454:	930d      	str	r3, [sp, #52]	; 0x34
  40e456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e458:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40e45a:	4293      	cmp	r3, r2
  40e45c:	da42      	bge.n	40e4e4 <draw_letter_subpx+0x40c>
        bitmask = bitmask_init >> col_bit;
  40e45e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40e460:	fa23 fe04 	lsr.w	lr, r3, r4
        for(col = col_start; col < col_end; col++) {
  40e464:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40e466:	980f      	ldr	r0, [sp, #60]	; 0x3c
        uint32_t subpx_cnt = 0;
  40e468:	2100      	movs	r1, #0
  40e46a:	469c      	mov	ip, r3
  40e46c:	f8ad 7018 	strh.w	r7, [sp, #24]
        for(col = col_start; col < col_end; col++) {
  40e470:	e731      	b.n	40e2d6 <draw_letter_subpx+0x1fe>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
  40e472:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40e474:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40e476:	4413      	add	r3, r2
  40e478:	469a      	mov	sl, r3
  40e47a:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
  40e47e:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
  40e482:	b28a      	uxth	r2, r1
  40e484:	1a9b      	subs	r3, r3, r2
  40e486:	b29b      	uxth	r3, r3
  40e488:	3301      	adds	r3, #1
  40e48a:	b21b      	sxth	r3, r3
  40e48c:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
  40e490:	4650      	mov	r0, sl
  40e492:	f8df 909c 	ldr.w	r9, [pc, #156]	; 40e530 <draw_letter_subpx+0x458>
  40e496:	47c8      	blx	r9
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40e498:	2800      	cmp	r0, #0
  40e49a:	d1b5      	bne.n	40e408 <draw_letter_subpx+0x330>
  40e49c:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
  40e4a0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
  40e4a4:	1ac9      	subs	r1, r1, r3
  40e4a6:	b289      	uxth	r1, r1
  40e4a8:	3101      	adds	r1, #1
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
  40e4aa:	b209      	sxth	r1, r1
  40e4ac:	4650      	mov	r0, sl
  40e4ae:	4b1d      	ldr	r3, [pc, #116]	; (40e524 <draw_letter_subpx+0x44c>)
  40e4b0:	4798      	blx	r3
  40e4b2:	e7a9      	b.n	40e408 <draw_letter_subpx+0x330>
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
  40e4b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40e4b6:	9302      	str	r3, [sp, #8]
  40e4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e4ba:	9301      	str	r3, [sp, #4]
  40e4bc:	2302      	movs	r3, #2
  40e4be:	9300      	str	r3, [sp, #0]
  40e4c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40e4c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40e4c4:	a91a      	add	r1, sp, #104	; 0x68
  40e4c6:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40e4c8:	f8df a05c 	ldr.w	sl, [pc, #92]	; 40e528 <draw_letter_subpx+0x450>
  40e4cc:	47d0      	blx	sl
            map_area.y1 = map_area.y2 + 1;
  40e4ce:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
  40e4d2:	3301      	adds	r3, #1
  40e4d4:	b21b      	sxth	r3, r3
  40e4d6:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            map_area.y2 = map_area.y1;
  40e4da:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            mask_p = 0;
  40e4de:	2300      	movs	r3, #0
  40e4e0:	9310      	str	r3, [sp, #64]	; 0x40
  40e4e2:	e7a1      	b.n	40e428 <draw_letter_subpx+0x350>
    if(map_area.y1 != map_area.y2) {
  40e4e4:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
  40e4e8:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
  40e4ec:	429a      	cmp	r2, r3
  40e4ee:	d00e      	beq.n	40e50e <draw_letter_subpx+0x436>
        map_area.y2--;
  40e4f0:	3b01      	subs	r3, #1
  40e4f2:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
  40e4f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40e4f8:	9302      	str	r3, [sp, #8]
  40e4fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e4fc:	9301      	str	r3, [sp, #4]
  40e4fe:	2302      	movs	r3, #2
  40e500:	9300      	str	r3, [sp, #0]
  40e502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40e504:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40e506:	a91a      	add	r1, sp, #104	; 0x68
  40e508:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40e50a:	4c07      	ldr	r4, [pc, #28]	; (40e528 <draw_letter_subpx+0x450>)
  40e50c:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  40e50e:	980c      	ldr	r0, [sp, #48]	; 0x30
  40e510:	4c06      	ldr	r4, [pc, #24]	; (40e52c <draw_letter_subpx+0x454>)
  40e512:	47a0      	blx	r4
    _lv_mem_buf_release(color_buf);
  40e514:	980e      	ldr	r0, [sp, #56]	; 0x38
  40e516:	47a0      	blx	r4
}
  40e518:	b01d      	add	sp, #116	; 0x74
  40e51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e51e:	bf00      	nop
  40e520:	55555556 	.word	0x55555556
  40e524:	00417a21 	.word	0x00417a21
  40e528:	0040d3d5 	.word	0x0040d3d5
  40e52c:	00417645 	.word	0x00417645
  40e530:	004109d9 	.word	0x004109d9

0040e534 <draw_letter_normal>:
{
  40e534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e538:	b093      	sub	sp, #76	; 0x4c
  40e53a:	468e      	mov	lr, r1
  40e53c:	f89d 6078 	ldrb.w	r6, [sp, #120]	; 0x78
  40e540:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
  40e544:	910d      	str	r1, [sp, #52]	; 0x34
    uint32_t bpp = g->bpp;
  40e546:	f892 a00a 	ldrb.w	sl, [r2, #10]
    if(bpp == 3) bpp = 4;
  40e54a:	f1ba 0f03 	cmp.w	sl, #3
  40e54e:	d00e      	beq.n	40e56e <draw_letter_normal+0x3a>
    switch(bpp) {
  40e550:	f10a 34ff 	add.w	r4, sl, #4294967295
  40e554:	2c07      	cmp	r4, #7
  40e556:	f200 8147 	bhi.w	40e7e8 <draw_letter_normal+0x2b4>
  40e55a:	e8df f014 	tbh	[pc, r4, lsl #1]
  40e55e:	000b      	.short	0x000b
  40e560:	0145001e 	.word	0x0145001e
  40e564:	01450011 	.word	0x01450011
  40e568:	01450145 	.word	0x01450145
  40e56c:	0017      	.short	0x0017
    if(bpp == 3) bpp = 4;
  40e56e:	f04f 0a04 	mov.w	sl, #4
  40e572:	e7ed      	b.n	40e550 <draw_letter_normal+0x1c>
            shades = 2;
  40e574:	2702      	movs	r7, #2
            bitmask_init  = 0x80;
  40e576:	2180      	movs	r1, #128	; 0x80
  40e578:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp1_opa_table;
  40e57a:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 40e81c <draw_letter_normal+0x2e8>
  40e57e:	e011      	b.n	40e5a4 <draw_letter_normal+0x70>
            shades = 16;
  40e580:	2710      	movs	r7, #16
            bitmask_init  = 0xF0;
  40e582:	21f0      	movs	r1, #240	; 0xf0
  40e584:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp4_opa_table;
  40e586:	f8df b298 	ldr.w	fp, [pc, #664]	; 40e820 <draw_letter_normal+0x2ec>
            break;
  40e58a:	e00b      	b.n	40e5a4 <draw_letter_normal+0x70>
            shades = 256;
  40e58c:	f44f 7780 	mov.w	r7, #256	; 0x100
            bitmask_init  = 0xFF;
  40e590:	21ff      	movs	r1, #255	; 0xff
  40e592:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp8_opa_table;
  40e594:	f8df b28c 	ldr.w	fp, [pc, #652]	; 40e824 <draw_letter_normal+0x2f0>
            break;       /*No opa table, pixel value will be used directly*/
  40e598:	e004      	b.n	40e5a4 <draw_letter_normal+0x70>
            shades = 4;
  40e59a:	2704      	movs	r7, #4
            bitmask_init  = 0xC0;
  40e59c:	21c0      	movs	r1, #192	; 0xc0
  40e59e:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp2_opa_table;
  40e5a0:	f8df b284 	ldr.w	fp, [pc, #644]	; 40e828 <draw_letter_normal+0x2f4>
    if(opa < LV_OPA_MAX) {
  40e5a4:	2efc      	cmp	r6, #252	; 0xfc
  40e5a6:	d821      	bhi.n	40e5ec <draw_letter_normal+0xb8>
        if(prev_opa != opa || prev_bpp != bpp) {
  40e5a8:	4c91      	ldr	r4, [pc, #580]	; (40e7f0 <draw_letter_normal+0x2bc>)
  40e5aa:	7824      	ldrb	r4, [r4, #0]
  40e5ac:	42a6      	cmp	r6, r4
  40e5ae:	d001      	beq.n	40e5b4 <draw_letter_normal+0x80>
  40e5b0:	2500      	movs	r5, #0
  40e5b2:	e009      	b.n	40e5c8 <draw_letter_normal+0x94>
  40e5b4:	4c8f      	ldr	r4, [pc, #572]	; (40e7f4 <draw_letter_normal+0x2c0>)
  40e5b6:	6824      	ldr	r4, [r4, #0]
  40e5b8:	45a2      	cmp	sl, r4
  40e5ba:	d010      	beq.n	40e5de <draw_letter_normal+0xaa>
  40e5bc:	2500      	movs	r5, #0
  40e5be:	e003      	b.n	40e5c8 <draw_letter_normal+0x94>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  40e5c0:	4631      	mov	r1, r6
  40e5c2:	4c8d      	ldr	r4, [pc, #564]	; (40e7f8 <draw_letter_normal+0x2c4>)
  40e5c4:	5561      	strb	r1, [r4, r5]
            for(i = 0; i < shades; i++) {
  40e5c6:	3501      	adds	r5, #1
  40e5c8:	42af      	cmp	r7, r5
  40e5ca:	d908      	bls.n	40e5de <draw_letter_normal+0xaa>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  40e5cc:	f81b 1005 	ldrb.w	r1, [fp, r5]
  40e5d0:	29ff      	cmp	r1, #255	; 0xff
  40e5d2:	d0f5      	beq.n	40e5c0 <draw_letter_normal+0x8c>
  40e5d4:	fb01 f106 	mul.w	r1, r1, r6
  40e5d8:	f3c1 2107 	ubfx	r1, r1, #8, #8
  40e5dc:	e7f1      	b.n	40e5c2 <draw_letter_normal+0x8e>
        prev_opa = opa;
  40e5de:	4c84      	ldr	r4, [pc, #528]	; (40e7f0 <draw_letter_normal+0x2bc>)
  40e5e0:	7026      	strb	r6, [r4, #0]
        prev_bpp = bpp;
  40e5e2:	4c84      	ldr	r4, [pc, #528]	; (40e7f4 <draw_letter_normal+0x2c0>)
  40e5e4:	f8c4 a000 	str.w	sl, [r4]
        bpp_opa_table_p = opa_table;
  40e5e8:	f8df b20c 	ldr.w	fp, [pc, #524]	; 40e7f8 <draw_letter_normal+0x2c4>
    int32_t box_w = g->box_w;
  40e5ec:	8855      	ldrh	r5, [r2, #2]
    int32_t box_h = g->box_h;
  40e5ee:	8897      	ldrh	r7, [r2, #4]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
  40e5f0:	fb0a f405 	mul.w	r4, sl, r5
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
  40e5f4:	f9b3 2000 	ldrsh.w	r2, [r3]
  40e5f8:	4282      	cmp	r2, r0
  40e5fa:	dd5a      	ble.n	40e6b2 <draw_letter_normal+0x17e>
  40e5fc:	1a12      	subs	r2, r2, r0
  40e5fe:	9207      	str	r2, [sp, #28]
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
  40e600:	182a      	adds	r2, r5, r0
  40e602:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
  40e606:	42b2      	cmp	r2, r6
  40e608:	dd56      	ble.n	40e6b8 <draw_letter_normal+0x184>
  40e60a:	1a36      	subs	r6, r6, r0
  40e60c:	f106 0801 	add.w	r8, r6, #1
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40e610:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  40e614:	4572      	cmp	r2, lr
  40e616:	dd51      	ble.n	40e6bc <draw_letter_normal+0x188>
  40e618:	eba2 020e 	sub.w	r2, r2, lr
  40e61c:	9206      	str	r2, [sp, #24]
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40e61e:	eb07 020e 	add.w	r2, r7, lr
  40e622:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
  40e626:	42b2      	cmp	r2, r6
  40e628:	dd4b      	ble.n	40e6c2 <draw_letter_normal+0x18e>
  40e62a:	eba6 060e 	sub.w	r6, r6, lr
  40e62e:	1c72      	adds	r2, r6, #1
  40e630:	9209      	str	r2, [sp, #36]	; 0x24
  40e632:	930e      	str	r3, [sp, #56]	; 0x38
  40e634:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
  40e638:	9008      	str	r0, [sp, #32]
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
  40e63a:	9b07      	ldr	r3, [sp, #28]
  40e63c:	fb0a f303 	mul.w	r3, sl, r3
  40e640:	9a06      	ldr	r2, [sp, #24]
  40e642:	fb04 3402 	mla	r4, r4, r2, r3
    map_p += bit_ofs >> 3;
  40e646:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  40e648:	eb06 06d4 	add.w	r6, r6, r4, lsr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
  40e64c:	f004 0407 	and.w	r4, r4, #7
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
  40e650:	4b6a      	ldr	r3, [pc, #424]	; (40e7fc <draw_letter_normal+0x2c8>)
  40e652:	4798      	blx	r3
  40e654:	4b6a      	ldr	r3, [pc, #424]	; (40e800 <draw_letter_normal+0x2cc>)
  40e656:	4798      	blx	r3
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
  40e658:	fb07 f705 	mul.w	r7, r7, r5
  40e65c:	42b8      	cmp	r0, r7
  40e65e:	bfa8      	it	ge
  40e660:	4638      	movge	r0, r7
  40e662:	900a      	str	r0, [sp, #40]	; 0x28
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40e664:	4b67      	ldr	r3, [pc, #412]	; (40e804 <draw_letter_normal+0x2d0>)
  40e666:	4798      	blx	r3
  40e668:	4681      	mov	r9, r0
    fill_area.x1 = col_start + pos_x;
  40e66a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40e66e:	9b07      	ldr	r3, [sp, #28]
  40e670:	18d3      	adds	r3, r2, r3
  40e672:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    fill_area.x2 = col_end  + pos_x - 1;
  40e676:	eb02 0308 	add.w	r3, r2, r8
  40e67a:	b29b      	uxth	r3, r3
  40e67c:	3b01      	subs	r3, #1
  40e67e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    fill_area.y1 = row_start + pos_y;
  40e682:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40e684:	9a06      	ldr	r2, [sp, #24]
  40e686:	4411      	add	r1, r2
  40e688:	b20b      	sxth	r3, r1
  40e68a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
  40e68e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40e692:	4b5d      	ldr	r3, [pc, #372]	; (40e808 <draw_letter_normal+0x2d4>)
  40e694:	4798      	blx	r3
  40e696:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32_t col_bit_max = 8 - bpp;
  40e698:	f1ca 0708 	rsb	r7, sl, #8
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
  40e69c:	9b07      	ldr	r3, [sp, #28]
  40e69e:	442b      	add	r3, r5
  40e6a0:	eba3 0308 	sub.w	r3, r3, r8
  40e6a4:	fb03 f30a 	mul.w	r3, r3, sl
  40e6a8:	930c      	str	r3, [sp, #48]	; 0x30
    int32_t mask_p = 0;
  40e6aa:	f04f 0e00 	mov.w	lr, #0
  40e6ae:	9708      	str	r7, [sp, #32]
    for(row = row_start ; row < row_end; row++) {
  40e6b0:	e03f      	b.n	40e732 <draw_letter_normal+0x1fe>
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
  40e6b2:	2200      	movs	r2, #0
  40e6b4:	9207      	str	r2, [sp, #28]
  40e6b6:	e7a3      	b.n	40e600 <draw_letter_normal+0xcc>
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
  40e6b8:	46a8      	mov	r8, r5
  40e6ba:	e7a9      	b.n	40e610 <draw_letter_normal+0xdc>
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40e6bc:	2200      	movs	r2, #0
  40e6be:	9206      	str	r2, [sp, #24]
  40e6c0:	e7ad      	b.n	40e61e <draw_letter_normal+0xea>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40e6c2:	9709      	str	r7, [sp, #36]	; 0x24
  40e6c4:	e7b5      	b.n	40e632 <draw_letter_normal+0xfe>
                mask_buf[mask_p] = 0;
  40e6c6:	2300      	movs	r3, #0
  40e6c8:	f809 3005 	strb.w	r3, [r9, r5]
  40e6cc:	e012      	b.n	40e6f4 <draw_letter_normal+0x1c0>
                map_p++;
  40e6ce:	3601      	adds	r6, #1
                bitmask = bitmask_init;
  40e6d0:	9805      	ldr	r0, [sp, #20]
                col_bit = 0;
  40e6d2:	2400      	movs	r4, #0
            mask_p++;
  40e6d4:	3501      	adds	r5, #1
        for(col = col_start; col < col_end; col++) {
  40e6d6:	3101      	adds	r1, #1
  40e6d8:	4541      	cmp	r1, r8
  40e6da:	da11      	bge.n	40e700 <draw_letter_normal+0x1cc>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
  40e6dc:	7833      	ldrb	r3, [r6, #0]
  40e6de:	4003      	ands	r3, r0
  40e6e0:	1b3a      	subs	r2, r7, r4
  40e6e2:	40d3      	lsrs	r3, r2
            if(letter_px) {
  40e6e4:	f013 0fff 	tst.w	r3, #255	; 0xff
  40e6e8:	d0ed      	beq.n	40e6c6 <draw_letter_normal+0x192>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
  40e6ea:	b2db      	uxtb	r3, r3
  40e6ec:	f81b 3003 	ldrb.w	r3, [fp, r3]
  40e6f0:	f809 3005 	strb.w	r3, [r9, r5]
            if(col_bit < col_bit_max) {
  40e6f4:	42bc      	cmp	r4, r7
  40e6f6:	d2ea      	bcs.n	40e6ce <draw_letter_normal+0x19a>
                col_bit += bpp;
  40e6f8:	4454      	add	r4, sl
                bitmask = bitmask >> bpp;
  40e6fa:	fa20 f00a 	lsr.w	r0, r0, sl
  40e6fe:	e7e9      	b.n	40e6d4 <draw_letter_normal+0x1a0>
  40e700:	9708      	str	r7, [sp, #32]
        if(other_mask_cnt) {
  40e702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40e704:	bb03      	cbnz	r3, 40e748 <draw_letter_normal+0x214>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
  40e706:	9b07      	ldr	r3, [sp, #28]
  40e708:	eba8 0303 	sub.w	r3, r8, r3
  40e70c:	442b      	add	r3, r5
  40e70e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40e710:	429a      	cmp	r2, r3
  40e712:	d938      	bls.n	40e786 <draw_letter_normal+0x252>
            fill_area.y2 ++;
  40e714:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40e718:	3301      	adds	r3, #1
  40e71a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
  40e71e:	46ae      	mov	lr, r5
        col_bit += col_bit_row_ofs;
  40e720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40e722:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
  40e724:	eb06 06d4 	add.w	r6, r6, r4, lsr #3
        col_bit = col_bit & 0x7;
  40e728:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start ; row < row_end; row++) {
  40e72c:	9b06      	ldr	r3, [sp, #24]
  40e72e:	3301      	adds	r3, #1
  40e730:	9306      	str	r3, [sp, #24]
  40e732:	9b06      	ldr	r3, [sp, #24]
  40e734:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40e736:	4293      	cmp	r3, r2
  40e738:	da3d      	bge.n	40e7b6 <draw_letter_normal+0x282>
        bitmask = bitmask_init >> col_bit;
  40e73a:	9b05      	ldr	r3, [sp, #20]
  40e73c:	fa23 f004 	lsr.w	r0, r3, r4
        for(col = col_start; col < col_end; col++) {
  40e740:	4675      	mov	r5, lr
  40e742:	9907      	ldr	r1, [sp, #28]
  40e744:	9f08      	ldr	r7, [sp, #32]
  40e746:	e7c7      	b.n	40e6d8 <draw_letter_normal+0x1a4>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
  40e748:	eb09 030e 	add.w	r3, r9, lr
  40e74c:	4618      	mov	r0, r3
  40e74e:	930f      	str	r3, [sp, #60]	; 0x3c
  40e750:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
  40e754:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  40e758:	b28a      	uxth	r2, r1
  40e75a:	1a9b      	subs	r3, r3, r2
  40e75c:	b29b      	uxth	r3, r3
  40e75e:	3301      	adds	r3, #1
  40e760:	b21b      	sxth	r3, r3
  40e762:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  40e766:	4f29      	ldr	r7, [pc, #164]	; (40e80c <draw_letter_normal+0x2d8>)
  40e768:	47b8      	blx	r7
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40e76a:	2800      	cmp	r0, #0
  40e76c:	d1cb      	bne.n	40e706 <draw_letter_normal+0x1d2>
  40e76e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
  40e772:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  40e776:	1ac9      	subs	r1, r1, r3
  40e778:	b289      	uxth	r1, r1
  40e77a:	3101      	adds	r1, #1
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
  40e77c:	b209      	sxth	r1, r1
  40e77e:	980f      	ldr	r0, [sp, #60]	; 0x3c
  40e780:	4b23      	ldr	r3, [pc, #140]	; (40e810 <draw_letter_normal+0x2dc>)
  40e782:	4798      	blx	r3
  40e784:	e7bf      	b.n	40e706 <draw_letter_normal+0x1d2>
            _lv_blend_fill(clip_area, &fill_area,
  40e786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e788:	9302      	str	r3, [sp, #8]
  40e78a:	23ff      	movs	r3, #255	; 0xff
  40e78c:	9301      	str	r3, [sp, #4]
  40e78e:	2302      	movs	r3, #2
  40e790:	9300      	str	r3, [sp, #0]
  40e792:	464b      	mov	r3, r9
  40e794:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
  40e798:	a910      	add	r1, sp, #64	; 0x40
  40e79a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40e79c:	4d1d      	ldr	r5, [pc, #116]	; (40e814 <draw_letter_normal+0x2e0>)
  40e79e:	47a8      	blx	r5
            fill_area.y1 = fill_area.y2 + 1;
  40e7a0:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  40e7a4:	3301      	adds	r3, #1
  40e7a6:	b21b      	sxth	r3, r3
  40e7a8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
  40e7ac:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            mask_p = 0;
  40e7b0:	f04f 0e00 	mov.w	lr, #0
  40e7b4:	e7b4      	b.n	40e720 <draw_letter_normal+0x1ec>
    if(fill_area.y1 != fill_area.y2) {
  40e7b6:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  40e7ba:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40e7be:	429a      	cmp	r2, r3
  40e7c0:	d00f      	beq.n	40e7e2 <draw_letter_normal+0x2ae>
        fill_area.y2--;
  40e7c2:	3b01      	subs	r3, #1
  40e7c4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        _lv_blend_fill(clip_area, &fill_area,
  40e7c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e7ca:	9302      	str	r3, [sp, #8]
  40e7cc:	23ff      	movs	r3, #255	; 0xff
  40e7ce:	9301      	str	r3, [sp, #4]
  40e7d0:	2302      	movs	r3, #2
  40e7d2:	9300      	str	r3, [sp, #0]
  40e7d4:	464b      	mov	r3, r9
  40e7d6:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
  40e7da:	a910      	add	r1, sp, #64	; 0x40
  40e7dc:	980e      	ldr	r0, [sp, #56]	; 0x38
  40e7de:	4c0d      	ldr	r4, [pc, #52]	; (40e814 <draw_letter_normal+0x2e0>)
  40e7e0:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  40e7e2:	4648      	mov	r0, r9
  40e7e4:	4b0c      	ldr	r3, [pc, #48]	; (40e818 <draw_letter_normal+0x2e4>)
  40e7e6:	4798      	blx	r3
}
  40e7e8:	b013      	add	sp, #76	; 0x4c
  40e7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e7ee:	bf00      	nop
  40e7f0:	2040c790 	.word	0x2040c790
  40e7f4:	2040c78c 	.word	0x2040c78c
  40e7f8:	2040c68c 	.word	0x2040c68c
  40e7fc:	00409709 	.word	0x00409709
  40e800:	00415c21 	.word	0x00415c21
  40e804:	00417895 	.word	0x00417895
  40e808:	00410aa1 	.word	0x00410aa1
  40e80c:	004109d9 	.word	0x004109d9
  40e810:	00417a21 	.word	0x00417a21
  40e814:	0040d2b5 	.word	0x0040d2b5
  40e818:	00417645 	.word	0x00417645
  40e81c:	0042e584 	.word	0x0042e584
  40e820:	0042e58c 	.word	0x0042e58c
  40e824:	0042e59c 	.word	0x0042e59c
  40e828:	0042e588 	.word	0x0042e588

0040e82c <lv_draw_letter>:
{
  40e82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e830:	b089      	sub	sp, #36	; 0x24
  40e832:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
  40e836:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
    if(opa < LV_OPA_MIN) return;
  40e83a:	2d01      	cmp	r5, #1
  40e83c:	d937      	bls.n	40e8ae <lv_draw_letter+0x82>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  40e83e:	2dfd      	cmp	r5, #253	; 0xfd
  40e840:	d900      	bls.n	40e844 <lv_draw_letter+0x18>
  40e842:	25ff      	movs	r5, #255	; 0xff
    if(font_p == NULL) {
  40e844:	b39a      	cbz	r2, 40e8ae <lv_draw_letter+0x82>
  40e846:	469b      	mov	fp, r3
  40e848:	4614      	mov	r4, r2
  40e84a:	4689      	mov	r9, r1
  40e84c:	4607      	mov	r7, r0
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
  40e84e:	2300      	movs	r3, #0
  40e850:	465a      	mov	r2, fp
  40e852:	a905      	add	r1, sp, #20
  40e854:	4620      	mov	r0, r4
  40e856:	4e2c      	ldr	r6, [pc, #176]	; (40e908 <lv_draw_letter+0xdc>)
  40e858:	47b0      	blx	r6
    if(g_ret == false)  {
  40e85a:	b340      	cbz	r0, 40e8ae <lv_draw_letter+0x82>
    if((g.box_h == 0) || (g.box_w == 0)) return;
  40e85c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40e860:	b32b      	cbz	r3, 40e8ae <lv_draw_letter+0x82>
  40e862:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  40e866:	b312      	cbz	r2, 40e8ae <lv_draw_letter+0x82>
    int32_t pos_x = pos_p->x + g.ofs_x;
  40e868:	f9b7 a000 	ldrsh.w	sl, [r7]
  40e86c:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
  40e870:	448a      	add	sl, r1
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
  40e872:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
  40e876:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
  40e87a:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
  40e87e:	1a09      	subs	r1, r1, r0
  40e880:	440f      	add	r7, r1
  40e882:	1aff      	subs	r7, r7, r3
  40e884:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
  40e888:	1a7f      	subs	r7, r7, r1
    if(pos_x + g.box_w < clip_area->x1 ||
  40e88a:	4452      	add	r2, sl
  40e88c:	f9b9 1000 	ldrsh.w	r1, [r9]
  40e890:	428a      	cmp	r2, r1
  40e892:	db0c      	blt.n	40e8ae <lv_draw_letter+0x82>
       pos_x > clip_area->x2 ||
  40e894:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
  40e898:	4592      	cmp	sl, r2
  40e89a:	dc08      	bgt.n	40e8ae <lv_draw_letter+0x82>
       pos_y + g.box_h < clip_area->y1 ||
  40e89c:	443b      	add	r3, r7
  40e89e:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
       pos_x > clip_area->x2 ||
  40e8a2:	4293      	cmp	r3, r2
  40e8a4:	db03      	blt.n	40e8ae <lv_draw_letter+0x82>
       pos_y > clip_area->y2)  {
  40e8a6:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
       pos_y + g.box_h < clip_area->y1 ||
  40e8aa:	429f      	cmp	r7, r3
  40e8ac:	dd02      	ble.n	40e8b4 <lv_draw_letter+0x88>
}
  40e8ae:	b009      	add	sp, #36	; 0x24
  40e8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
  40e8b4:	4659      	mov	r1, fp
  40e8b6:	4620      	mov	r0, r4
  40e8b8:	4b14      	ldr	r3, [pc, #80]	; (40e90c <lv_draw_letter+0xe0>)
  40e8ba:	4798      	blx	r3
    if(map_p == NULL) {
  40e8bc:	2800      	cmp	r0, #0
  40e8be:	d0f6      	beq.n	40e8ae <lv_draw_letter+0x82>
    if(font_p->subpx) {
  40e8c0:	7b22      	ldrb	r2, [r4, #12]
  40e8c2:	f012 0f03 	tst.w	r2, #3
  40e8c6:	d00f      	beq.n	40e8e8 <lv_draw_letter+0xbc>
        draw_letter_subpx(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
  40e8c8:	f8cd 800c 	str.w	r8, [sp, #12]
  40e8cc:	9502      	str	r5, [sp, #8]
  40e8ce:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
  40e8d2:	f8ad 2004 	strh.w	r2, [sp, #4]
  40e8d6:	9000      	str	r0, [sp, #0]
  40e8d8:	464b      	mov	r3, r9
  40e8da:	aa05      	add	r2, sp, #20
  40e8dc:	b239      	sxth	r1, r7
  40e8de:	fa0f f08a 	sxth.w	r0, sl
  40e8e2:	4c0b      	ldr	r4, [pc, #44]	; (40e910 <lv_draw_letter+0xe4>)
  40e8e4:	47a0      	blx	r4
  40e8e6:	e7e2      	b.n	40e8ae <lv_draw_letter+0x82>
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
  40e8e8:	f8cd 800c 	str.w	r8, [sp, #12]
  40e8ec:	9502      	str	r5, [sp, #8]
  40e8ee:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
  40e8f2:	f8ad 2004 	strh.w	r2, [sp, #4]
  40e8f6:	9000      	str	r0, [sp, #0]
  40e8f8:	464b      	mov	r3, r9
  40e8fa:	aa05      	add	r2, sp, #20
  40e8fc:	b239      	sxth	r1, r7
  40e8fe:	fa0f f08a 	sxth.w	r0, sl
  40e902:	4c04      	ldr	r4, [pc, #16]	; (40e914 <lv_draw_letter+0xe8>)
  40e904:	47a0      	blx	r4
  40e906:	e7d2      	b.n	40e8ae <lv_draw_letter+0x82>
  40e908:	00414a65 	.word	0x00414a65
  40e90c:	00414a5d 	.word	0x00414a5d
  40e910:	0040e0d9 	.word	0x0040e0d9
  40e914:	0040e535 	.word	0x0040e535

0040e918 <lv_draw_label_dsc_init>:
{
  40e918:	b510      	push	{r4, lr}
  40e91a:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
  40e91c:	2124      	movs	r1, #36	; 0x24
  40e91e:	4b0e      	ldr	r3, [pc, #56]	; (40e958 <lv_draw_label_dsc_init+0x40>)
  40e920:	4798      	blx	r3
    dsc->opa = LV_OPA_COVER;
  40e922:	23ff      	movs	r3, #255	; 0xff
  40e924:	7323      	strb	r3, [r4, #12]
    dsc->color = LV_COLOR_BLACK;
  40e926:	2300      	movs	r3, #0
  40e928:	8023      	strh	r3, [r4, #0]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
  40e92a:	4a0c      	ldr	r2, [pc, #48]	; (40e95c <lv_draw_label_dsc_init+0x44>)
  40e92c:	60a2      	str	r2, [r4, #8]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
  40e92e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40e932:	6162      	str	r2, [r4, #20]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
  40e934:	61a2      	str	r2, [r4, #24]
    dsc->sel_color = LV_COLOR_BLACK;
  40e936:	8063      	strh	r3, [r4, #2]
    dsc->sel_bg_color = LV_COLOR_BLUE;
  40e938:	7922      	ldrb	r2, [r4, #4]
  40e93a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
  40e93e:	f363 02c7 	bfi	r2, r3, #3, #5
  40e942:	7122      	strb	r2, [r4, #4]
  40e944:	7962      	ldrb	r2, [r4, #5]
  40e946:	f042 021f 	orr.w	r2, r2, #31
  40e94a:	f363 1247 	bfi	r2, r3, #5, #3
  40e94e:	7162      	strb	r2, [r4, #5]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
  40e950:	f884 3020 	strb.w	r3, [r4, #32]
  40e954:	bd10      	pop	{r4, pc}
  40e956:	bf00      	nop
  40e958:	00417a21 	.word	0x00417a21
  40e95c:	2040008c 	.word	0x2040008c

0040e960 <lv_draw_label>:
{
  40e960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e964:	b0b7      	sub	sp, #220	; 0xdc
  40e966:	9c40      	ldr	r4, [sp, #256]	; 0x100
    if(dsc->opa <= LV_OPA_MIN) return;
  40e968:	7b15      	ldrb	r5, [r2, #12]
  40e96a:	2d02      	cmp	r5, #2
  40e96c:	d903      	bls.n	40e976 <lv_draw_label+0x16>
    const lv_font_t * font = dsc->font;
  40e96e:	6895      	ldr	r5, [r2, #8]
  40e970:	9506      	str	r5, [sp, #24]
    if(txt[0] == '\0')  return;
  40e972:	781d      	ldrb	r5, [r3, #0]
  40e974:	b915      	cbnz	r5, 40e97c <lv_draw_label+0x1c>
}
  40e976:	b037      	add	sp, #220	; 0xdc
  40e978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e97c:	930c      	str	r3, [sp, #48]	; 0x30
  40e97e:	4616      	mov	r6, r2
  40e980:	460a      	mov	r2, r1
  40e982:	9109      	str	r1, [sp, #36]	; 0x24
  40e984:	4605      	mov	r5, r0
  40e986:	9010      	str	r0, [sp, #64]	; 0x40
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
  40e988:	4601      	mov	r1, r0
  40e98a:	a834      	add	r0, sp, #208	; 0xd0
  40e98c:	4ba8      	ldr	r3, [pc, #672]	; (40ec30 <lv_draw_label+0x2d0>)
  40e98e:	4798      	blx	r3
    if(!clip_ok) return;
  40e990:	2800      	cmp	r0, #0
  40e992:	d0f0      	beq.n	40e976 <lv_draw_label+0x16>
    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
  40e994:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40e998:	f012 0f02 	tst.w	r2, #2
  40e99c:	d12b      	bne.n	40e9f6 <lv_draw_label+0x96>
  40e99e:	88ab      	ldrh	r3, [r5, #4]
  40e9a0:	882a      	ldrh	r2, [r5, #0]
  40e9a2:	1a9b      	subs	r3, r3, r2
  40e9a4:	b29b      	uxth	r3, r3
  40e9a6:	3301      	adds	r3, #1
  40e9a8:	b21b      	sxth	r3, r3
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  40e9aa:	9a06      	ldr	r2, [sp, #24]
  40e9ac:	f9b2 8008 	ldrsh.w	r8, [r2, #8]
    int32_t line_height = line_height_font + dsc->line_space;
  40e9b0:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
  40e9b4:	4442      	add	r2, r8
  40e9b6:	920d      	str	r2, [sp, #52]	; 0x34
    pos.x = coords->x1;
  40e9b8:	9810      	ldr	r0, [sp, #64]	; 0x40
  40e9ba:	f9b0 2000 	ldrsh.w	r2, [r0]
  40e9be:	f8ad 20cc 	strh.w	r2, [sp, #204]	; 0xcc
    pos.y = coords->y1;
  40e9c2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    x_ofs = dsc->ofs_x;
  40e9c6:	f9b6 101c 	ldrsh.w	r1, [r6, #28]
  40e9ca:	9112      	str	r1, [sp, #72]	; 0x48
    y_ofs = dsc->ofs_y;
  40e9cc:	f9b6 101e 	ldrsh.w	r1, [r6, #30]
    pos.y += y_ofs;
  40e9d0:	440a      	add	r2, r1
  40e9d2:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
    if(hint && y_ofs == 0 && coords->y1 < 0) {
  40e9d6:	1c22      	adds	r2, r4, #0
  40e9d8:	bf18      	it	ne
  40e9da:	2201      	movne	r2, #1
  40e9dc:	2900      	cmp	r1, #0
  40e9de:	bf14      	ite	ne
  40e9e0:	2100      	movne	r1, #0
  40e9e2:	f002 0101 	andeq.w	r1, r2, #1
  40e9e6:	b341      	cbz	r1, 40ea3a <lv_draw_label+0xda>
  40e9e8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
  40e9ec:	2900      	cmp	r1, #0
  40e9ee:	db13      	blt.n	40ea18 <lv_draw_label+0xb8>
    int32_t last_line_start = -1;
  40e9f0:	f04f 37ff 	mov.w	r7, #4294967295
  40e9f4:	e023      	b.n	40ea3e <lv_draw_label+0xde>
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
  40e9f6:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40e9fa:	9202      	str	r2, [sp, #8]
  40e9fc:	f647 4218 	movw	r2, #31768	; 0x7c18
  40ea00:	9201      	str	r2, [sp, #4]
  40ea02:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
  40ea06:	9200      	str	r2, [sp, #0]
  40ea08:	68b2      	ldr	r2, [r6, #8]
  40ea0a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40ea0c:	a818      	add	r0, sp, #96	; 0x60
  40ea0e:	4d89      	ldr	r5, [pc, #548]	; (40ec34 <lv_draw_label+0x2d4>)
  40ea10:	47a8      	blx	r5
        w = p.x;
  40ea12:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
  40ea16:	e7c8      	b.n	40e9aa <lv_draw_label+0x4a>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
  40ea18:	68a0      	ldr	r0, [r4, #8]
  40ea1a:	1a40      	subs	r0, r0, r1
  40ea1c:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40ea20:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40ea24:	980d      	ldr	r0, [sp, #52]	; 0x34
  40ea26:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
  40ea2a:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
  40ea2e:	dd02      	ble.n	40ea36 <lv_draw_label+0xd6>
            hint->line_start = -1;
  40ea30:	f04f 31ff 	mov.w	r1, #4294967295
  40ea34:	6021      	str	r1, [r4, #0]
        last_line_start = hint->line_start;
  40ea36:	6827      	ldr	r7, [r4, #0]
  40ea38:	e001      	b.n	40ea3e <lv_draw_label+0xde>
    int32_t last_line_start = -1;
  40ea3a:	f04f 37ff 	mov.w	r7, #4294967295
    if(hint && last_line_start >= 0) {
  40ea3e:	2f00      	cmp	r7, #0
  40ea40:	bfb4      	ite	lt
  40ea42:	2200      	movlt	r2, #0
  40ea44:	f002 0201 	andge.w	r2, r2, #1
  40ea48:	b1d2      	cbz	r2, 40ea80 <lv_draw_label+0x120>
        pos.y += hint->y;
  40ea4a:	6862      	ldr	r2, [r4, #4]
  40ea4c:	f8bd 10ce 	ldrh.w	r1, [sp, #206]	; 0xce
  40ea50:	440a      	add	r2, r1
  40ea52:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40ea56:	b21b      	sxth	r3, r3
  40ea58:	4619      	mov	r1, r3
  40ea5a:	930e      	str	r3, [sp, #56]	; 0x38
  40ea5c:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40ea60:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40ea64:	9300      	str	r3, [sp, #0]
  40ea66:	460b      	mov	r3, r1
  40ea68:	9906      	ldr	r1, [sp, #24]
  40ea6a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40ea6c:	4438      	add	r0, r7
  40ea6e:	4d72      	ldr	r5, [pc, #456]	; (40ec38 <lv_draw_label+0x2d8>)
  40ea70:	47a8      	blx	r5
  40ea72:	eb07 0b00 	add.w	fp, r7, r0
  40ea76:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  40ea7a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    while(pos.y + line_height_font < mask->y1) {
  40ea7e:	e007      	b.n	40ea90 <lv_draw_label+0x130>
    uint32_t line_start     = 0;
  40ea80:	2700      	movs	r7, #0
  40ea82:	e7e8      	b.n	40ea56 <lv_draw_label+0xf6>
        if(txt[line_start] == '\0') return;
  40ea84:	782b      	ldrb	r3, [r5, #0]
        line_start = line_end;
  40ea86:	465f      	mov	r7, fp
        if(txt[line_start] == '\0') return;
  40ea88:	2b00      	cmp	r3, #0
  40ea8a:	f43f af74 	beq.w	40e976 <lv_draw_label+0x16>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40ea8e:	4683      	mov	fp, r0
    while(pos.y + line_height_font < mask->y1) {
  40ea90:	f9bd 30ce 	ldrsh.w	r3, [sp, #206]	; 0xce
  40ea94:	4443      	add	r3, r8
  40ea96:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
  40ea9a:	4293      	cmp	r3, r2
  40ea9c:	da28      	bge.n	40eaf0 <lv_draw_label+0x190>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40ea9e:	eb0a 050b 	add.w	r5, sl, fp
  40eaa2:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40eaa6:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40eaaa:	9300      	str	r3, [sp, #0]
  40eaac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40eaae:	9906      	ldr	r1, [sp, #24]
  40eab0:	4628      	mov	r0, r5
  40eab2:	4f61      	ldr	r7, [pc, #388]	; (40ec38 <lv_draw_label+0x2d8>)
  40eab4:	47b8      	blx	r7
  40eab6:	4458      	add	r0, fp
        pos.y += line_height;
  40eab8:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40eabc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40eabe:	4413      	add	r3, r2
  40eac0:	b21b      	sxth	r3, r3
  40eac2:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
  40eac6:	2c00      	cmp	r4, #0
  40eac8:	d0dc      	beq.n	40ea84 <lv_draw_label+0x124>
  40eaca:	f513 6f80 	cmn.w	r3, #1024	; 0x400
  40eace:	dbd9      	blt.n	40ea84 <lv_draw_label+0x124>
  40ead0:	6823      	ldr	r3, [r4, #0]
  40ead2:	2b00      	cmp	r3, #0
  40ead4:	dad6      	bge.n	40ea84 <lv_draw_label+0x124>
            hint->line_start = line_start;
  40ead6:	f8c4 b000 	str.w	fp, [r4]
            hint->y          = pos.y - coords->y1;
  40eada:	f9bd 30ce 	ldrsh.w	r3, [sp, #206]	; 0xce
  40eade:	9910      	ldr	r1, [sp, #64]	; 0x40
  40eae0:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  40eae4:	1a9b      	subs	r3, r3, r2
  40eae6:	6063      	str	r3, [r4, #4]
            hint->coord_y    = coords->y1;
  40eae8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  40eaec:	60a3      	str	r3, [r4, #8]
  40eaee:	e7c9      	b.n	40ea84 <lv_draw_label+0x124>
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
  40eaf0:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40eaf4:	f012 0f04 	tst.w	r2, #4
  40eaf8:	d124      	bne.n	40eb44 <lv_draw_label+0x1e4>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
  40eafa:	f012 0f08 	tst.w	r2, #8
  40eafe:	d13d      	bne.n	40eb7c <lv_draw_label+0x21c>
    lv_opa_t opa = dsc->opa;
  40eb00:	7b33      	ldrb	r3, [r6, #12]
  40eb02:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t sel_start = dsc->sel_start;
  40eb04:	6973      	ldr	r3, [r6, #20]
  40eb06:	4619      	mov	r1, r3
  40eb08:	461c      	mov	r4, r3
    uint32_t sel_end = dsc->sel_end;
  40eb0a:	f8d6 8018 	ldr.w	r8, [r6, #24]
    if(sel_start > sel_end) {
  40eb0e:	4543      	cmp	r3, r8
  40eb10:	d802      	bhi.n	40eb18 <lv_draw_label+0x1b8>
  40eb12:	4643      	mov	r3, r8
    uint32_t sel_start = dsc->sel_start;
  40eb14:	4688      	mov	r8, r1
    uint32_t sel_end = dsc->sel_end;
  40eb16:	461c      	mov	r4, r3
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
  40eb18:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40eb1c:	f013 0f03 	tst.w	r3, #3
  40eb20:	d144      	bne.n	40ebac <lv_draw_label+0x24c>
    lv_draw_rect_dsc_init(&draw_dsc_sel);
  40eb22:	a81a      	add	r0, sp, #104	; 0x68
  40eb24:	4b45      	ldr	r3, [pc, #276]	; (40ec3c <lv_draw_label+0x2dc>)
  40eb26:	4798      	blx	r3
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
  40eb28:	88b3      	ldrh	r3, [r6, #4]
  40eb2a:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    int32_t pos_x_start = pos.x;
  40eb2e:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
  40eb32:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t par_start = 0;
  40eb34:	2300      	movs	r3, #0
  40eb36:	9311      	str	r3, [sp, #68]	; 0x44
  40eb38:	f8cd b01c 	str.w	fp, [sp, #28]
  40eb3c:	46bb      	mov	fp, r7
  40eb3e:	46c2      	mov	sl, r8
  40eb40:	46a0      	mov	r8, r4
    while(txt[line_start] != '\0') {
  40eb42:	e170      	b.n	40ee26 <lv_draw_label+0x4c6>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40eb44:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40eb48:	9200      	str	r2, [sp, #0]
  40eb4a:	9a06      	ldr	r2, [sp, #24]
  40eb4c:	ebab 0107 	sub.w	r1, fp, r7
  40eb50:	980c      	ldr	r0, [sp, #48]	; 0x30
  40eb52:	4438      	add	r0, r7
  40eb54:	4c3a      	ldr	r4, [pc, #232]	; (40ec40 <lv_draw_label+0x2e0>)
  40eb56:	47a0      	blx	r4
  40eb58:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40eb5a:	8893      	ldrh	r3, [r2, #4]
  40eb5c:	8812      	ldrh	r2, [r2, #0]
  40eb5e:	1a9b      	subs	r3, r3, r2
  40eb60:	b29b      	uxth	r3, r3
  40eb62:	3301      	adds	r3, #1
  40eb64:	b21b      	sxth	r3, r3
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
  40eb66:	1a1b      	subs	r3, r3, r0
  40eb68:	d406      	bmi.n	40eb78 <lv_draw_label+0x218>
  40eb6a:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40eb6e:	eb02 0363 	add.w	r3, r2, r3, asr #1
  40eb72:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40eb76:	e7c3      	b.n	40eb00 <lv_draw_label+0x1a0>
  40eb78:	3301      	adds	r3, #1
  40eb7a:	e7f6      	b.n	40eb6a <lv_draw_label+0x20a>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40eb7c:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40eb80:	9200      	str	r2, [sp, #0]
  40eb82:	9a06      	ldr	r2, [sp, #24]
  40eb84:	ebab 0107 	sub.w	r1, fp, r7
  40eb88:	980c      	ldr	r0, [sp, #48]	; 0x30
  40eb8a:	4438      	add	r0, r7
  40eb8c:	4c2c      	ldr	r4, [pc, #176]	; (40ec40 <lv_draw_label+0x2e0>)
  40eb8e:	47a0      	blx	r4
  40eb90:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40eb92:	8893      	ldrh	r3, [r2, #4]
  40eb94:	8812      	ldrh	r2, [r2, #0]
  40eb96:	1a9b      	subs	r3, r3, r2
  40eb98:	b29b      	uxth	r3, r3
  40eb9a:	3301      	adds	r3, #1
  40eb9c:	b21b      	sxth	r3, r3
        pos.x += lv_area_get_width(coords) - line_width;
  40eb9e:	1a1b      	subs	r3, r3, r0
  40eba0:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40eba4:	4413      	add	r3, r2
  40eba6:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40ebaa:	e7a9      	b.n	40eb00 <lv_draw_label+0x1a0>
        lv_draw_line_dsc_init(&line_dsc);
  40ebac:	a830      	add	r0, sp, #192	; 0xc0
  40ebae:	4b25      	ldr	r3, [pc, #148]	; (40ec44 <lv_draw_label+0x2e4>)
  40ebb0:	4798      	blx	r3
        line_dsc.color = dsc->color;
  40ebb2:	8833      	ldrh	r3, [r6, #0]
  40ebb4:	f8ad 30c0 	strh.w	r3, [sp, #192]	; 0xc0
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
  40ebb8:	9b06      	ldr	r3, [sp, #24]
  40ebba:	f993 300e 	ldrsb.w	r3, [r3, #14]
  40ebbe:	b173      	cbz	r3, 40ebde <lv_draw_label+0x27e>
  40ebc0:	b21b      	sxth	r3, r3
  40ebc2:	f8ad 30c2 	strh.w	r3, [sp, #194]	; 0xc2
        line_dsc.opa = dsc->opa;
  40ebc6:	7b33      	ldrb	r3, [r6, #12]
  40ebc8:	f88d 30c8 	strb.w	r3, [sp, #200]	; 0xc8
        line_dsc.blend_mode = dsc->blend_mode;
  40ebcc:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
  40ebd0:	f89d 30c9 	ldrb.w	r3, [sp, #201]	; 0xc9
  40ebd4:	f362 0301 	bfi	r3, r2, #0, #2
  40ebd8:	f88d 30c9 	strb.w	r3, [sp, #201]	; 0xc9
  40ebdc:	e7a1      	b.n	40eb22 <lv_draw_label+0x1c2>
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
  40ebde:	2301      	movs	r3, #1
  40ebe0:	e7ef      	b.n	40ebc2 <lv_draw_label+0x262>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
  40ebe2:	4b19      	ldr	r3, [pc, #100]	; (40ec48 <lv_draw_label+0x2e8>)
  40ebe4:	681b      	ldr	r3, [r3, #0]
  40ebe6:	4459      	add	r1, fp
  40ebe8:	980c      	ldr	r0, [sp, #48]	; 0x30
  40ebea:	4798      	blx	r3
  40ebec:	9008      	str	r0, [sp, #32]
  40ebee:	e093      	b.n	40ed18 <lv_draw_label+0x3b8>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
  40ebf0:	b91f      	cbnz	r7, 40ebfa <lv_draw_label+0x29a>
                        par_start = i;
  40ebf2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40ebf4:	9311      	str	r3, [sp, #68]	; 0x44
                        cmd_state = CMD_STATE_PAR;
  40ebf6:	2701      	movs	r7, #1
                        continue;
  40ebf8:	e07c      	b.n	40ecf4 <lv_draw_label+0x394>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
  40ebfa:	2f01      	cmp	r7, #1
  40ebfc:	d004      	beq.n	40ec08 <lv_draw_label+0x2a8>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
  40ebfe:	2f02      	cmp	r7, #2
  40ec00:	f040 80a0 	bne.w	40ed44 <lv_draw_label+0x3e4>
                        cmd_state = CMD_STATE_WAIT;
  40ec04:	2700      	movs	r7, #0
  40ec06:	e075      	b.n	40ecf4 <lv_draw_label+0x394>
                        cmd_state = CMD_STATE_WAIT;
  40ec08:	2700      	movs	r7, #0
  40ec0a:	e09b      	b.n	40ed44 <lv_draw_label+0x3e4>
                    if(letter == ' ') {
  40ec0c:	9b05      	ldr	r3, [sp, #20]
  40ec0e:	2b20      	cmp	r3, #32
  40ec10:	d170      	bne.n	40ecf4 <lv_draw_label+0x394>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
  40ec12:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40ec14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ec16:	1a9b      	subs	r3, r3, r2
  40ec18:	2b07      	cmp	r3, #7
  40ec1a:	d004      	beq.n	40ec26 <lv_draw_label+0x2c6>
                            recolor.full = dsc->color.full;
  40ec1c:	8833      	ldrh	r3, [r6, #0]
  40ec1e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
  40ec22:	2702      	movs	r7, #2
                    continue;
  40ec24:	e066      	b.n	40ecf4 <lv_draw_label+0x394>
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
  40ec26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ec28:	1899      	adds	r1, r3, r2
    uint8_t * d8 = (uint8_t *)dst;
  40ec2a:	aa18      	add	r2, sp, #96	; 0x60
  40ec2c:	2306      	movs	r3, #6
  40ec2e:	e012      	b.n	40ec56 <lv_draw_label+0x2f6>
  40ec30:	004164e3 	.word	0x004164e3
  40ec34:	00418db5 	.word	0x00418db5
  40ec38:	00418c29 	.word	0x00418c29
  40ec3c:	0041338d 	.word	0x0041338d
  40ec40:	00418d09 	.word	0x00418d09
  40ec44:	0040f769 	.word	0x0040f769
  40ec48:	204000b4 	.word	0x204000b4
        *d8 = *s8;
  40ec4c:	f811 0b01 	ldrb.w	r0, [r1], #1
  40ec50:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40ec54:	3b01      	subs	r3, #1
    while(len) {
  40ec56:	2b00      	cmp	r3, #0
  40ec58:	d1f8      	bne.n	40ec4c <lv_draw_label+0x2ec>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
  40ec5a:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
  40ec5e:	4db8      	ldr	r5, [pc, #736]	; (40ef40 <lv_draw_label+0x5e0>)
  40ec60:	47a8      	blx	r5
  40ec62:	ea4f 1800 	mov.w	r8, r0, lsl #4
  40ec66:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
  40ec6a:	47a8      	blx	r5
  40ec6c:	4480      	add	r8, r0
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
  40ec6e:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
  40ec72:	47a8      	blx	r5
  40ec74:	0104      	lsls	r4, r0, #4
  40ec76:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
  40ec7a:	47a8      	blx	r5
  40ec7c:	4404      	add	r4, r0
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
  40ec7e:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
  40ec82:	47a8      	blx	r5
  40ec84:	0107      	lsls	r7, r0, #4
  40ec86:	f89d 0065 	ldrb.w	r0, [sp, #101]	; 0x65
  40ec8a:	47a8      	blx	r5
  40ec8c:	183b      	adds	r3, r7, r0
                            recolor = lv_color_make(r, g, b);
  40ec8e:	b2e4      	uxtb	r4, r4
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  40ec90:	0962      	lsrs	r2, r4, #5
  40ec92:	f3c8 08c4 	ubfx	r8, r8, #3, #5
  40ec96:	f3c3 03c4 	ubfx	r3, r3, #3, #5
  40ec9a:	f3c4 0482 	ubfx	r4, r4, #2, #3
  40ec9e:	9914      	ldr	r1, [sp, #80]	; 0x50
  40eca0:	f362 0102 	bfi	r1, r2, #0, #3
  40eca4:	460a      	mov	r2, r1
  40eca6:	f368 02c7 	bfi	r2, r8, #3, #5
  40ecaa:	f363 220c 	bfi	r2, r3, #8, #5
  40ecae:	4613      	mov	r3, r2
  40ecb0:	f364 334f 	bfi	r3, r4, #13, #3
  40ecb4:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
  40ecb8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
  40ecbc:	2702      	movs	r7, #2
  40ecbe:	e019      	b.n	40ecf4 <lv_draw_label+0x394>
            if(cmd_state == CMD_STATE_IN) color = recolor;
  40ecc0:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
  40ecc4:	e045      	b.n	40ed52 <lv_draw_label+0x3f2>
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
  40ecc6:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
  40ecca:	9302      	str	r3, [sp, #8]
  40eccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ecce:	9301      	str	r3, [sp, #4]
  40ecd0:	f8ad 8000 	strh.w	r8, [sp]
  40ecd4:	9b05      	ldr	r3, [sp, #20]
  40ecd6:	9a06      	ldr	r2, [sp, #24]
  40ecd8:	9909      	ldr	r1, [sp, #36]	; 0x24
  40ecda:	a833      	add	r0, sp, #204	; 0xcc
  40ecdc:	4c99      	ldr	r4, [pc, #612]	; (40ef44 <lv_draw_label+0x5e4>)
  40ecde:	47a0      	blx	r4
            if(letter_w > 0) {
  40ece0:	2d00      	cmp	r5, #0
  40ece2:	dd07      	ble.n	40ecf4 <lv_draw_label+0x394>
                pos.x += letter_w + dsc->letter_space;
  40ece4:	8a33      	ldrh	r3, [r6, #16]
  40ece6:	441d      	add	r5, r3
  40ece8:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40ecec:	fa13 f585 	uxtah	r5, r3, r5
  40ecf0:	f8ad 50cc 	strh.w	r5, [sp, #204]	; 0xcc
        while(i < line_end - line_start) {
  40ecf4:	9b07      	ldr	r3, [sp, #28]
  40ecf6:	eba3 030b 	sub.w	r3, r3, fp
  40ecfa:	992f      	ldr	r1, [sp, #188]	; 0xbc
  40ecfc:	428b      	cmp	r3, r1
  40ecfe:	d95b      	bls.n	40edb8 <lv_draw_label+0x458>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
  40ed00:	f64f 74ff 	movw	r4, #65535	; 0xffff
  40ed04:	45a2      	cmp	sl, r4
  40ed06:	bf18      	it	ne
  40ed08:	45a1      	cmpne	r9, r4
  40ed0a:	bf14      	ite	ne
  40ed0c:	2401      	movne	r4, #1
  40ed0e:	2400      	moveq	r4, #0
  40ed10:	f47f af67 	bne.w	40ebe2 <lv_draw_label+0x282>
            uint32_t logical_char_pos = 0;
  40ed14:	2300      	movs	r3, #0
  40ed16:	9308      	str	r3, [sp, #32]
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
  40ed18:	4d8b      	ldr	r5, [pc, #556]	; (40ef48 <lv_draw_label+0x5e8>)
  40ed1a:	682b      	ldr	r3, [r5, #0]
  40ed1c:	a92f      	add	r1, sp, #188	; 0xbc
  40ed1e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40ed22:	4640      	mov	r0, r8
  40ed24:	4798      	blx	r3
  40ed26:	9005      	str	r0, [sp, #20]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
  40ed28:	682b      	ldr	r3, [r5, #0]
  40ed2a:	2100      	movs	r1, #0
  40ed2c:	982f      	ldr	r0, [sp, #188]	; 0xbc
  40ed2e:	4440      	add	r0, r8
  40ed30:	4798      	blx	r3
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
  40ed32:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40ed36:	f013 0f01 	tst.w	r3, #1
  40ed3a:	d006      	beq.n	40ed4a <lv_draw_label+0x3ea>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
  40ed3c:	9b05      	ldr	r3, [sp, #20]
  40ed3e:	2b23      	cmp	r3, #35	; 0x23
  40ed40:	f43f af56 	beq.w	40ebf0 <lv_draw_label+0x290>
                if(cmd_state == CMD_STATE_PAR) {
  40ed44:	2f01      	cmp	r7, #1
  40ed46:	f43f af61 	beq.w	40ec0c <lv_draw_label+0x2ac>
            lv_color_t color = dsc->color;
  40ed4a:	f8b6 8000 	ldrh.w	r8, [r6]
            if(cmd_state == CMD_STATE_IN) color = recolor;
  40ed4e:	2f02      	cmp	r7, #2
  40ed50:	d0b6      	beq.n	40ecc0 <lv_draw_label+0x360>
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
  40ed52:	4602      	mov	r2, r0
  40ed54:	9905      	ldr	r1, [sp, #20]
  40ed56:	9806      	ldr	r0, [sp, #24]
  40ed58:	4b7c      	ldr	r3, [pc, #496]	; (40ef4c <lv_draw_label+0x5ec>)
  40ed5a:	4798      	blx	r3
  40ed5c:	4605      	mov	r5, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
  40ed5e:	2c00      	cmp	r4, #0
  40ed60:	d0b1      	beq.n	40ecc6 <lv_draw_label+0x366>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
  40ed62:	9a08      	ldr	r2, [sp, #32]
  40ed64:	4613      	mov	r3, r2
  40ed66:	4592      	cmp	sl, r2
  40ed68:	bf8c      	ite	hi
  40ed6a:	2300      	movhi	r3, #0
  40ed6c:	2301      	movls	r3, #1
  40ed6e:	4591      	cmp	r9, r2
  40ed70:	bf98      	it	ls
  40ed72:	2300      	movls	r3, #0
  40ed74:	2b00      	cmp	r3, #0
  40ed76:	d0a6      	beq.n	40ecc6 <lv_draw_label+0x366>
                    sel_coords.x1 = pos.x;
  40ed78:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
  40ed7c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    sel_coords.y1 = pos.y;
  40ed80:	f9bd 20ce 	ldrsh.w	r2, [sp, #206]	; 0xce
  40ed84:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
  40ed88:	fa10 f383 	uxtah	r3, r0, r3
  40ed8c:	8a31      	ldrh	r1, [r6, #16]
  40ed8e:	fa11 f383 	uxtah	r3, r1, r3
  40ed92:	b29b      	uxth	r3, r3
  40ed94:	3b01      	subs	r3, #1
  40ed96:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
                    sel_coords.y2 = pos.y + line_height - 1;
  40ed9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ed9c:	fa13 f282 	uxtah	r2, r3, r2
  40eda0:	b292      	uxth	r2, r2
  40eda2:	3a01      	subs	r2, #1
  40eda4:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
  40eda8:	aa1a      	add	r2, sp, #104	; 0x68
  40edaa:	9909      	ldr	r1, [sp, #36]	; 0x24
  40edac:	a818      	add	r0, sp, #96	; 0x60
  40edae:	4b68      	ldr	r3, [pc, #416]	; (40ef50 <lv_draw_label+0x5f0>)
  40edb0:	4798      	blx	r3
                    color = dsc->sel_color;
  40edb2:	f8b6 8002 	ldrh.w	r8, [r6, #2]
  40edb6:	e786      	b.n	40ecc6 <lv_draw_label+0x366>
  40edb8:	46c8      	mov	r8, r9
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
  40edba:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40edbe:	f013 0f02 	tst.w	r3, #2
  40edc2:	d143      	bne.n	40ee4c <lv_draw_label+0x4ec>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
  40edc4:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40edc8:	f013 0f01 	tst.w	r3, #1
  40edcc:	d166      	bne.n	40ee9c <lv_draw_label+0x53c>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40edce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40edd0:	9f07      	ldr	r7, [sp, #28]
  40edd2:	19d5      	adds	r5, r2, r7
  40edd4:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40edd8:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40eddc:	9300      	str	r3, [sp, #0]
  40edde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40ede0:	9906      	ldr	r1, [sp, #24]
  40ede2:	4628      	mov	r0, r5
  40ede4:	4c5b      	ldr	r4, [pc, #364]	; (40ef54 <lv_draw_label+0x5f4>)
  40ede6:	47a0      	blx	r4
  40ede8:	183c      	adds	r4, r7, r0
        pos.x = coords->x1;
  40edea:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40edec:	f9b3 3000 	ldrsh.w	r3, [r3]
  40edf0:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
  40edf4:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40edf8:	f012 0f04 	tst.w	r2, #4
  40edfc:	d170      	bne.n	40eee0 <lv_draw_label+0x580>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
  40edfe:	f012 0f08 	tst.w	r2, #8
  40ee02:	f040 8087 	bne.w	40ef14 <lv_draw_label+0x5b4>
        pos.y += line_height;
  40ee06:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40ee0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40ee0c:	4413      	add	r3, r2
  40ee0e:	b21b      	sxth	r3, r3
  40ee10:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        if(pos.y > mask->y2) return;
  40ee14:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40ee16:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        line_start = line_end;
  40ee1a:	f8dd b01c 	ldr.w	fp, [sp, #28]
        if(pos.y > mask->y2) return;
  40ee1e:	4293      	cmp	r3, r2
  40ee20:	f73f ada9 	bgt.w	40e976 <lv_draw_label+0x16>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40ee24:	9407      	str	r4, [sp, #28]
    while(txt[line_start] != '\0') {
  40ee26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40ee28:	4613      	mov	r3, r2
  40ee2a:	445b      	add	r3, fp
  40ee2c:	930a      	str	r3, [sp, #40]	; 0x28
  40ee2e:	f812 300b 	ldrb.w	r3, [r2, fp]
  40ee32:	2b00      	cmp	r3, #0
  40ee34:	f43f ad9f 	beq.w	40e976 <lv_draw_label+0x16>
        pos.x += x_ofs;
  40ee38:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40ee3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40ee3e:	4413      	add	r3, r2
  40ee40:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        i         = 0;
  40ee44:	2700      	movs	r7, #0
  40ee46:	972f      	str	r7, [sp, #188]	; 0xbc
  40ee48:	46c1      	mov	r9, r8
        while(i < line_end - line_start) {
  40ee4a:	e753      	b.n	40ecf4 <lv_draw_label+0x394>
            p1.x = pos_x_start;
  40ee4c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40ee50:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
  40ee54:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40ee58:	68b2      	ldr	r2, [r6, #8]
  40ee5a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
  40ee5e:	2a00      	cmp	r2, #0
  40ee60:	db18      	blt.n	40ee94 <lv_draw_label+0x534>
  40ee62:	eb03 0362 	add.w	r3, r3, r2, asr #1
  40ee66:	b29b      	uxth	r3, r3
  40ee68:	f9bd 20c2 	ldrsh.w	r2, [sp, #194]	; 0xc2
  40ee6c:	2a00      	cmp	r2, #0
  40ee6e:	db13      	blt.n	40ee98 <lv_draw_label+0x538>
  40ee70:	eb03 0362 	add.w	r3, r3, r2, asr #1
  40ee74:	b21b      	sxth	r3, r3
  40ee76:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            p2.x = pos.x;
  40ee7a:	f9bd 20cc 	ldrsh.w	r2, [sp, #204]	; 0xcc
  40ee7e:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p2.y = p1.y;
  40ee82:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  40ee86:	ab30      	add	r3, sp, #192	; 0xc0
  40ee88:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40ee8a:	a918      	add	r1, sp, #96	; 0x60
  40ee8c:	a817      	add	r0, sp, #92	; 0x5c
  40ee8e:	4c32      	ldr	r4, [pc, #200]	; (40ef58 <lv_draw_label+0x5f8>)
  40ee90:	47a0      	blx	r4
  40ee92:	e797      	b.n	40edc4 <lv_draw_label+0x464>
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
  40ee94:	3201      	adds	r2, #1
  40ee96:	e7e4      	b.n	40ee62 <lv_draw_label+0x502>
  40ee98:	3201      	adds	r2, #1
  40ee9a:	e7e9      	b.n	40ee70 <lv_draw_label+0x510>
            p1.x = pos_x_start;
  40ee9c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40eea0:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
  40eea4:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40eea8:	68b2      	ldr	r2, [r6, #8]
  40eeaa:	8911      	ldrh	r1, [r2, #8]
  40eeac:	440b      	add	r3, r1
  40eeae:	b29b      	uxth	r3, r3
  40eeb0:	8952      	ldrh	r2, [r2, #10]
  40eeb2:	1a9b      	subs	r3, r3, r2
  40eeb4:	b29b      	uxth	r3, r3
  40eeb6:	9a06      	ldr	r2, [sp, #24]
  40eeb8:	f992 200d 	ldrsb.w	r2, [r2, #13]
  40eebc:	b292      	uxth	r2, r2
  40eebe:	1a9b      	subs	r3, r3, r2
  40eec0:	b21b      	sxth	r3, r3
  40eec2:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            p2.x = pos.x;
  40eec6:	f9bd 20cc 	ldrsh.w	r2, [sp, #204]	; 0xcc
  40eeca:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p2.y = p1.y;
  40eece:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  40eed2:	ab30      	add	r3, sp, #192	; 0xc0
  40eed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40eed6:	a918      	add	r1, sp, #96	; 0x60
  40eed8:	a817      	add	r0, sp, #92	; 0x5c
  40eeda:	4c1f      	ldr	r4, [pc, #124]	; (40ef58 <lv_draw_label+0x5f8>)
  40eedc:	47a0      	blx	r4
  40eede:	e776      	b.n	40edce <lv_draw_label+0x46e>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40eee0:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40eee4:	9200      	str	r2, [sp, #0]
  40eee6:	9a06      	ldr	r2, [sp, #24]
  40eee8:	4601      	mov	r1, r0
  40eeea:	4628      	mov	r0, r5
  40eeec:	4d1b      	ldr	r5, [pc, #108]	; (40ef5c <lv_draw_label+0x5fc>)
  40eeee:	47a8      	blx	r5
  40eef0:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40eef2:	8893      	ldrh	r3, [r2, #4]
  40eef4:	8812      	ldrh	r2, [r2, #0]
  40eef6:	1a9b      	subs	r3, r3, r2
  40eef8:	b29b      	uxth	r3, r3
  40eefa:	3301      	adds	r3, #1
  40eefc:	b21b      	sxth	r3, r3
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
  40eefe:	1a18      	subs	r0, r3, r0
  40ef00:	d406      	bmi.n	40ef10 <lv_draw_label+0x5b0>
  40ef02:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40ef06:	eb03 0360 	add.w	r3, r3, r0, asr #1
  40ef0a:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40ef0e:	e77a      	b.n	40ee06 <lv_draw_label+0x4a6>
  40ef10:	3001      	adds	r0, #1
  40ef12:	e7f6      	b.n	40ef02 <lv_draw_label+0x5a2>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40ef14:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40ef18:	9200      	str	r2, [sp, #0]
  40ef1a:	9a06      	ldr	r2, [sp, #24]
  40ef1c:	4601      	mov	r1, r0
  40ef1e:	4628      	mov	r0, r5
  40ef20:	4d0e      	ldr	r5, [pc, #56]	; (40ef5c <lv_draw_label+0x5fc>)
  40ef22:	47a8      	blx	r5
  40ef24:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40ef26:	8893      	ldrh	r3, [r2, #4]
  40ef28:	8812      	ldrh	r2, [r2, #0]
  40ef2a:	1a9b      	subs	r3, r3, r2
  40ef2c:	b29b      	uxth	r3, r3
  40ef2e:	3301      	adds	r3, #1
  40ef30:	b21b      	sxth	r3, r3
            pos.x += lv_area_get_width(coords) - line_width;
  40ef32:	1a1b      	subs	r3, r3, r0
  40ef34:	f8bd 00cc 	ldrh.w	r0, [sp, #204]	; 0xcc
  40ef38:	4403      	add	r3, r0
  40ef3a:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40ef3e:	e762      	b.n	40ee06 <lv_draw_label+0x4a6>
  40ef40:	0040e095 	.word	0x0040e095
  40ef44:	0040e82d 	.word	0x0040e82d
  40ef48:	204000b8 	.word	0x204000b8
  40ef4c:	00414a6d 	.word	0x00414a6d
  40ef50:	004133d9 	.word	0x004133d9
  40ef54:	00418c29 	.word	0x00418c29
  40ef58:	0040f785 	.word	0x0040f785
  40ef5c:	00418d09 	.word	0x00418d09

0040ef60 <draw_line_hor>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
  40ef60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ef64:	b08b      	sub	sp, #44	; 0x2c
  40ef66:	4681      	mov	r9, r0
  40ef68:	468a      	mov	sl, r1
  40ef6a:	9204      	str	r2, [sp, #16]
  40ef6c:	461c      	mov	r4, r3
    lv_opa_t opa = dsc->opa;
  40ef6e:	f893 b008 	ldrb.w	fp, [r3, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40ef72:	4b76      	ldr	r3, [pc, #472]	; (40f14c <draw_line_hor+0x1ec>)
  40ef74:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40ef76:	4b76      	ldr	r3, [pc, #472]	; (40f150 <draw_line_hor+0x1f0>)
  40ef78:	4798      	blx	r3
  40ef7a:	4606      	mov	r6, r0

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
  40ef7c:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
  40ef80:	3d01      	subs	r5, #1
    int32_t w_half0 = w >> 1;
  40ef82:	ea4f 0865 	mov.w	r8, r5, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40ef86:	f005 0501 	and.w	r5, r5, #1
  40ef8a:	4445      	add	r5, r8

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40ef8c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40ef90:	b123      	cbz	r3, 40ef9c <draw_line_hor+0x3c>
  40ef92:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40ef96:	b943      	cbnz	r3, 40efaa <draw_line_hor+0x4a>
  40ef98:	2700      	movs	r7, #0
  40ef9a:	e000      	b.n	40ef9e <draw_line_hor+0x3e>
  40ef9c:	2700      	movs	r7, #0

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40ef9e:	4b6d      	ldr	r3, [pc, #436]	; (40f154 <draw_line_hor+0x1f4>)
  40efa0:	4798      	blx	r3
  40efa2:	b920      	cbnz	r0, 40efae <draw_line_hor+0x4e>
    else if(dashed) simple_mode = false;
  40efa4:	bb7f      	cbnz	r7, 40f006 <draw_line_hor+0xa6>
    bool simple_mode = true;
  40efa6:	2201      	movs	r2, #1
  40efa8:	e002      	b.n	40efb0 <draw_line_hor+0x50>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40efaa:	2701      	movs	r7, #1
  40efac:	e7f7      	b.n	40ef9e <draw_line_hor+0x3e>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40efae:	2200      	movs	r2, #0

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
  40efb0:	f9ba 3000 	ldrsh.w	r3, [sl]
  40efb4:	f9b9 1000 	ldrsh.w	r1, [r9]
  40efb8:	4618      	mov	r0, r3
  40efba:	428b      	cmp	r3, r1
  40efbc:	bfa8      	it	ge
  40efbe:	4608      	movge	r0, r1
  40efc0:	f8ad 0020 	strh.w	r0, [sp, #32]
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
  40efc4:	428b      	cmp	r3, r1
  40efc6:	bfb8      	it	lt
  40efc8:	460b      	movlt	r3, r1
  40efca:	b29b      	uxth	r3, r3
  40efcc:	3b01      	subs	r3, #1
  40efce:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y1 = point1->y - w_half1;
  40efd2:	f8b9 3002 	ldrh.w	r3, [r9, #2]
  40efd6:	1b5d      	subs	r5, r3, r5
  40efd8:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
    draw_area.y2 = point1->y + w_half0;
  40efdc:	4498      	add	r8, r3
  40efde:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
  40efe2:	b192      	cbz	r2, 40f00a <draw_line_hor+0xaa>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
  40efe4:	7a63      	ldrb	r3, [r4, #9]
  40efe6:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(clip, &draw_area,
  40efea:	8822      	ldrh	r2, [r4, #0]
  40efec:	9302      	str	r3, [sp, #8]
  40efee:	f8cd b004 	str.w	fp, [sp, #4]
  40eff2:	2301      	movs	r3, #1
  40eff4:	9300      	str	r3, [sp, #0]
  40eff6:	2300      	movs	r3, #0
  40eff8:	a908      	add	r1, sp, #32
  40effa:	9804      	ldr	r0, [sp, #16]
  40effc:	4c56      	ldr	r4, [pc, #344]	; (40f158 <draw_line_hor+0x1f8>)
  40effe:	47a0      	blx	r4
            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
    }
}
  40f000:	b00b      	add	sp, #44	; 0x2c
  40f002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dashed) simple_mode = false;
  40f006:	2200      	movs	r2, #0
  40f008:	e7d2      	b.n	40efb0 <draw_line_hor+0x50>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
  40f00a:	aa08      	add	r2, sp, #32
  40f00c:	9904      	ldr	r1, [sp, #16]
  40f00e:	4610      	mov	r0, r2
  40f010:	4b52      	ldr	r3, [pc, #328]	; (40f15c <draw_line_hor+0x1fc>)
  40f012:	4798      	blx	r3
        if(!is_common) return;
  40f014:	2800      	cmp	r0, #0
  40f016:	d0f3      	beq.n	40f000 <draw_line_hor+0xa0>
        draw_area.x1 -= disp_area->x1;
  40f018:	f9bd e020 	ldrsh.w	lr, [sp, #32]
  40f01c:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
  40f020:	b28b      	uxth	r3, r1
  40f022:	ebae 0503 	sub.w	r5, lr, r3
  40f026:	b2ad      	uxth	r5, r5
  40f028:	fa0f fc85 	sxth.w	ip, r5
  40f02c:	f8ad c020 	strh.w	ip, [sp, #32]
        draw_area.y1 -= disp_area->y1;
  40f030:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
  40f034:	f8b6 8012 	ldrh.w	r8, [r6, #18]
  40f038:	eba2 0008 	sub.w	r0, r2, r8
  40f03c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        draw_area.x2 -= disp_area->x1;
  40f040:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
  40f044:	1ac3      	subs	r3, r0, r3
  40f046:	b29b      	uxth	r3, r3
  40f048:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        draw_area.y2 -= disp_area->y1;
  40f04c:	f8bd 9026 	ldrh.w	r9, [sp, #38]	; 0x26
  40f050:	eba9 0808 	sub.w	r8, r9, r8
  40f054:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
  40f058:	1b5d      	subs	r5, r3, r5
  40f05a:	b2ad      	uxth	r5, r5
  40f05c:	3501      	adds	r5, #1
  40f05e:	b22d      	sxth	r5, r5
        fill_area.x1 = draw_area.x1 + disp_area->x1;
  40f060:	f8ad e018 	strh.w	lr, [sp, #24]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
  40f064:	f8ad 001c 	strh.w	r0, [sp, #28]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
  40f068:	f8ad 201a 	strh.w	r2, [sp, #26]
        fill_area.y2 = fill_area.y1;
  40f06c:	f8ad 201e 	strh.w	r2, [sp, #30]
        if(dashed) {
  40f070:	b1a7      	cbz	r7, 40f09c <draw_line_hor+0x13c>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
  40f072:	4461      	add	r1, ip
  40f074:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40f078:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  40f07c:	4413      	add	r3, r2
  40f07e:	fb91 fcf3 	sdiv	ip, r1, r3
  40f082:	fb03 111c 	mls	r1, r3, ip, r1
  40f086:	b20b      	sxth	r3, r1
  40f088:	9305      	str	r3, [sp, #20]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  40f08a:	46ab      	mov	fp, r5
  40f08c:	4628      	mov	r0, r5
  40f08e:	4b34      	ldr	r3, [pc, #208]	; (40f160 <draw_line_hor+0x200>)
  40f090:	4798      	blx	r3
  40f092:	4681      	mov	r9, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40f094:	f9bd 8022 	ldrsh.w	r8, [sp, #34]	; 0x22
  40f098:	46ba      	mov	sl, r7
  40f09a:	e037      	b.n	40f10c <draw_line_hor+0x1ac>
        lv_style_int_t dash_start = 0;
  40f09c:	2300      	movs	r3, #0
  40f09e:	9305      	str	r3, [sp, #20]
  40f0a0:	e7f3      	b.n	40f08a <draw_line_hor+0x12a>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
  40f0a2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  40f0a6:	440b      	add	r3, r1
  40f0a8:	429a      	cmp	r2, r3
  40f0aa:	da13      	bge.n	40f0d4 <draw_line_hor+0x174>
                            mask_buf[i] = 0x00;
  40f0ac:	2300      	movs	r3, #0
  40f0ae:	f809 3000 	strb.w	r3, [r9, r0]
  40f0b2:	4613      	mov	r3, r2
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
  40f0b4:	3001      	adds	r0, #1
  40f0b6:	b200      	sxth	r0, r0
  40f0b8:	3301      	adds	r3, #1
  40f0ba:	b21a      	sxth	r2, r3
  40f0bc:	42a8      	cmp	r0, r5
  40f0be:	da0b      	bge.n	40f0d8 <draw_line_hor+0x178>
                        if(dash_cnt <= dsc->dash_width) {
  40f0c0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40f0c4:	429a      	cmp	r2, r3
  40f0c6:	dcec      	bgt.n	40f0a2 <draw_line_hor+0x142>
                            int16_t diff = dsc->dash_width - dash_cnt;
  40f0c8:	b299      	uxth	r1, r3
  40f0ca:	1a8a      	subs	r2, r1, r2
                            i += diff;
  40f0cc:	fa10 f082 	uxtah	r0, r0, r2
  40f0d0:	b200      	sxth	r0, r0
  40f0d2:	e7ef      	b.n	40f0b4 <draw_line_hor+0x154>
                            dash_cnt = 0;
  40f0d4:	2300      	movs	r3, #0
  40f0d6:	e7ed      	b.n	40f0b4 <draw_line_hor+0x154>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  40f0d8:	2002      	movs	r0, #2
                           dsc->blend_mode);
  40f0da:	7a63      	ldrb	r3, [r4, #9]
  40f0dc:	f003 0303 	and.w	r3, r3, #3
            _lv_blend_fill(clip, &fill_area,
  40f0e0:	9302      	str	r3, [sp, #8]
  40f0e2:	7a23      	ldrb	r3, [r4, #8]
  40f0e4:	9301      	str	r3, [sp, #4]
  40f0e6:	9000      	str	r0, [sp, #0]
  40f0e8:	464b      	mov	r3, r9
  40f0ea:	8822      	ldrh	r2, [r4, #0]
  40f0ec:	a906      	add	r1, sp, #24
  40f0ee:	9804      	ldr	r0, [sp, #16]
  40f0f0:	4f19      	ldr	r7, [pc, #100]	; (40f158 <draw_line_hor+0x1f8>)
  40f0f2:	47b8      	blx	r7
            fill_area.y1++;
  40f0f4:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
  40f0f8:	3301      	adds	r3, #1
  40f0fa:	f8ad 301a 	strh.w	r3, [sp, #26]
            fill_area.y2++;
  40f0fe:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
  40f102:	3301      	adds	r3, #1
  40f104:	f8ad 301e 	strh.w	r3, [sp, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40f108:	f108 0801 	add.w	r8, r8, #1
  40f10c:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40f110:	4598      	cmp	r8, r3
  40f112:	dc17      	bgt.n	40f144 <draw_line_hor+0x1e4>
            _lv_memset_ff(mask_buf, draw_area_w);
  40f114:	4659      	mov	r1, fp
  40f116:	4648      	mov	r0, r9
  40f118:	4b12      	ldr	r3, [pc, #72]	; (40f164 <draw_line_hor+0x204>)
  40f11a:	4798      	blx	r3
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40f11c:	8a31      	ldrh	r1, [r6, #16]
  40f11e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  40f122:	4419      	add	r1, r3
  40f124:	8a72      	ldrh	r2, [r6, #18]
  40f126:	4442      	add	r2, r8
  40f128:	462b      	mov	r3, r5
  40f12a:	b212      	sxth	r2, r2
  40f12c:	b209      	sxth	r1, r1
  40f12e:	4648      	mov	r0, r9
  40f130:	4f0d      	ldr	r7, [pc, #52]	; (40f168 <draw_line_hor+0x208>)
  40f132:	47b8      	blx	r7
            if(dashed) {
  40f134:	f1ba 0f00 	cmp.w	sl, #0
  40f138:	d0cf      	beq.n	40f0da <draw_line_hor+0x17a>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
  40f13a:	2800      	cmp	r0, #0
  40f13c:	d0cd      	beq.n	40f0da <draw_line_hor+0x17a>
  40f13e:	9a05      	ldr	r2, [sp, #20]
  40f140:	2000      	movs	r0, #0
  40f142:	e7bb      	b.n	40f0bc <draw_line_hor+0x15c>
        _lv_mem_buf_release(mask_buf);
  40f144:	4648      	mov	r0, r9
  40f146:	4b09      	ldr	r3, [pc, #36]	; (40f16c <draw_line_hor+0x20c>)
  40f148:	4798      	blx	r3
  40f14a:	e759      	b.n	40f000 <draw_line_hor+0xa0>
  40f14c:	00409709 	.word	0x00409709
  40f150:	00415d25 	.word	0x00415d25
  40f154:	00410aa1 	.word	0x00410aa1
  40f158:	0040d2b5 	.word	0x0040d2b5
  40f15c:	004164e3 	.word	0x004164e3
  40f160:	00417895 	.word	0x00417895
  40f164:	00417a79 	.word	0x00417a79
  40f168:	004109d9 	.word	0x004109d9
  40f16c:	00417645 	.word	0x00417645

0040f170 <draw_line_ver>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_ver(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
  40f170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f174:	b08b      	sub	sp, #44	; 0x2c
  40f176:	4680      	mov	r8, r0
  40f178:	468a      	mov	sl, r1
  40f17a:	9204      	str	r2, [sp, #16]
  40f17c:	461d      	mov	r5, r3
    lv_opa_t opa = dsc->opa;
  40f17e:	f893 b008 	ldrb.w	fp, [r3, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40f182:	4b71      	ldr	r3, [pc, #452]	; (40f348 <draw_line_ver+0x1d8>)
  40f184:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40f186:	4b71      	ldr	r3, [pc, #452]	; (40f34c <draw_line_ver+0x1dc>)
  40f188:	4798      	blx	r3
  40f18a:	4607      	mov	r7, r0

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
  40f18c:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
  40f190:	3c01      	subs	r4, #1
    int32_t w_half0 = w >> 1;
  40f192:	ea4f 0964 	mov.w	r9, r4, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40f196:	f004 0401 	and.w	r4, r4, #1
  40f19a:	444c      	add	r4, r9

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40f19c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40f1a0:	b123      	cbz	r3, 40f1ac <draw_line_ver+0x3c>
  40f1a2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40f1a6:	b943      	cbnz	r3, 40f1ba <draw_line_ver+0x4a>
  40f1a8:	2600      	movs	r6, #0
  40f1aa:	e000      	b.n	40f1ae <draw_line_ver+0x3e>
  40f1ac:	2600      	movs	r6, #0

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40f1ae:	4b68      	ldr	r3, [pc, #416]	; (40f350 <draw_line_ver+0x1e0>)
  40f1b0:	4798      	blx	r3
  40f1b2:	b920      	cbnz	r0, 40f1be <draw_line_ver+0x4e>
    else if(dashed) simple_mode = false;
  40f1b4:	bb7e      	cbnz	r6, 40f216 <draw_line_ver+0xa6>
    bool simple_mode = true;
  40f1b6:	2201      	movs	r2, #1
  40f1b8:	e002      	b.n	40f1c0 <draw_line_ver+0x50>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40f1ba:	2601      	movs	r6, #1
  40f1bc:	e7f7      	b.n	40f1ae <draw_line_ver+0x3e>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40f1be:	2200      	movs	r2, #0

    lv_area_t draw_area;
    draw_area.x1 = point1->x - w_half1;
  40f1c0:	f8b8 3000 	ldrh.w	r3, [r8]
  40f1c4:	1b1c      	subs	r4, r3, r4
  40f1c6:	f8ad 4020 	strh.w	r4, [sp, #32]
    draw_area.x2 = point1->x + w_half0;
  40f1ca:	4499      	add	r9, r3
  40f1cc:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
  40f1d0:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
  40f1d4:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
  40f1d8:	4618      	mov	r0, r3
  40f1da:	428b      	cmp	r3, r1
  40f1dc:	bfa8      	it	ge
  40f1de:	4608      	movge	r0, r1
  40f1e0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
  40f1e4:	428b      	cmp	r3, r1
  40f1e6:	bfb8      	it	lt
  40f1e8:	460b      	movlt	r3, r1
  40f1ea:	b29b      	uxth	r3, r3
  40f1ec:	3b01      	subs	r3, #1
  40f1ee:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
  40f1f2:	b192      	cbz	r2, 40f21a <draw_line_ver+0xaa>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color,  NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
  40f1f4:	7a6b      	ldrb	r3, [r5, #9]
  40f1f6:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(clip, &draw_area,
  40f1fa:	882a      	ldrh	r2, [r5, #0]
  40f1fc:	9302      	str	r3, [sp, #8]
  40f1fe:	f8cd b004 	str.w	fp, [sp, #4]
  40f202:	2301      	movs	r3, #1
  40f204:	9300      	str	r3, [sp, #0]
  40f206:	2300      	movs	r3, #0
  40f208:	a908      	add	r1, sp, #32
  40f20a:	9804      	ldr	r0, [sp, #16]
  40f20c:	4c51      	ldr	r4, [pc, #324]	; (40f354 <draw_line_ver+0x1e4>)
  40f20e:	47a0      	blx	r4
            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
    }
}
  40f210:	b00b      	add	sp, #44	; 0x2c
  40f212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dashed) simple_mode = false;
  40f216:	2200      	movs	r2, #0
  40f218:	e7d2      	b.n	40f1c0 <draw_line_ver+0x50>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
  40f21a:	aa08      	add	r2, sp, #32
  40f21c:	9904      	ldr	r1, [sp, #16]
  40f21e:	4610      	mov	r0, r2
  40f220:	4b4d      	ldr	r3, [pc, #308]	; (40f358 <draw_line_ver+0x1e8>)
  40f222:	4798      	blx	r3
        if(!is_common) return;
  40f224:	2800      	cmp	r0, #0
  40f226:	d0f3      	beq.n	40f210 <draw_line_ver+0xa0>
        draw_area.x1 -= vdb->area.x1;
  40f228:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
  40f22c:	8a3b      	ldrh	r3, [r7, #16]
  40f22e:	eba0 0b03 	sub.w	fp, r0, r3
  40f232:	fa1f fb8b 	uxth.w	fp, fp
  40f236:	f8ad b020 	strh.w	fp, [sp, #32]
        draw_area.y1 -= vdb->area.y1;
  40f23a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
  40f23e:	f8b7 e012 	ldrh.w	lr, [r7, #18]
  40f242:	eba2 010e 	sub.w	r1, r2, lr
  40f246:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        draw_area.x2 -= vdb->area.x1;
  40f24a:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40f24e:	1acb      	subs	r3, r1, r3
  40f250:	b29b      	uxth	r3, r3
  40f252:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        draw_area.y2 -= vdb->area.y1;
  40f256:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
  40f25a:	eba4 040e 	sub.w	r4, r4, lr
  40f25e:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
  40f262:	eba3 0b0b 	sub.w	fp, r3, fp
  40f266:	fa1f fb8b 	uxth.w	fp, fp
  40f26a:	f10b 0b01 	add.w	fp, fp, #1
  40f26e:	fa0f fb8b 	sxth.w	fp, fp
        fill_area.x1 = draw_area.x1 + disp_area->x1;
  40f272:	f8ad 0018 	strh.w	r0, [sp, #24]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
  40f276:	f8ad 101c 	strh.w	r1, [sp, #28]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
  40f27a:	f8ad 201a 	strh.w	r2, [sp, #26]
        fill_area.y2 = fill_area.y1;
  40f27e:	f8ad 201e 	strh.w	r2, [sp, #30]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  40f282:	f8cd b014 	str.w	fp, [sp, #20]
  40f286:	4658      	mov	r0, fp
  40f288:	4b34      	ldr	r3, [pc, #208]	; (40f35c <draw_line_ver+0x1ec>)
  40f28a:	4798      	blx	r3
  40f28c:	4680      	mov	r8, r0
        if(dashed) {
  40f28e:	b19e      	cbz	r6, 40f2b8 <draw_line_ver+0x148>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
  40f290:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
  40f294:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
  40f298:	441a      	add	r2, r3
  40f29a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40f29e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
  40f2a2:	444b      	add	r3, r9
  40f2a4:	fb92 f9f3 	sdiv	r9, r2, r3
  40f2a8:	fb03 2919 	mls	r9, r3, r9, r2
  40f2ac:	fa0f f989 	sxth.w	r9, r9
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40f2b0:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  40f2b4:	46b2      	mov	sl, r6
  40f2b6:	e01c      	b.n	40f2f2 <draw_line_ver+0x182>
        lv_style_int_t dash_start = 0;
  40f2b8:	f04f 0900 	mov.w	r9, #0
  40f2bc:	e7f8      	b.n	40f2b0 <draw_line_ver+0x140>
                dash_cnt ++;
  40f2be:	f109 0901 	add.w	r9, r9, #1
  40f2c2:	fa0f f989 	sxth.w	r9, r9
            _lv_blend_fill(clip, &fill_area,
  40f2c6:	2300      	movs	r3, #0
  40f2c8:	9302      	str	r3, [sp, #8]
  40f2ca:	7a2b      	ldrb	r3, [r5, #8]
  40f2cc:	9301      	str	r3, [sp, #4]
  40f2ce:	9000      	str	r0, [sp, #0]
  40f2d0:	4643      	mov	r3, r8
  40f2d2:	882a      	ldrh	r2, [r5, #0]
  40f2d4:	a906      	add	r1, sp, #24
  40f2d6:	9804      	ldr	r0, [sp, #16]
  40f2d8:	4e1e      	ldr	r6, [pc, #120]	; (40f354 <draw_line_ver+0x1e4>)
  40f2da:	47b0      	blx	r6
            fill_area.y1++;
  40f2dc:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
  40f2e0:	3301      	adds	r3, #1
  40f2e2:	f8ad 301a 	strh.w	r3, [sp, #26]
            fill_area.y2++;
  40f2e6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
  40f2ea:	3301      	adds	r3, #1
  40f2ec:	f8ad 301e 	strh.w	r3, [sp, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40f2f0:	3401      	adds	r4, #1
  40f2f2:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40f2f6:	429c      	cmp	r4, r3
  40f2f8:	dc21      	bgt.n	40f33e <draw_line_ver+0x1ce>
            _lv_memset_ff(mask_buf, draw_area_w);
  40f2fa:	9905      	ldr	r1, [sp, #20]
  40f2fc:	4640      	mov	r0, r8
  40f2fe:	4b18      	ldr	r3, [pc, #96]	; (40f360 <draw_line_ver+0x1f0>)
  40f300:	4798      	blx	r3
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40f302:	8a39      	ldrh	r1, [r7, #16]
  40f304:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  40f308:	4419      	add	r1, r3
  40f30a:	8a7a      	ldrh	r2, [r7, #18]
  40f30c:	4422      	add	r2, r4
  40f30e:	465b      	mov	r3, fp
  40f310:	b212      	sxth	r2, r2
  40f312:	b209      	sxth	r1, r1
  40f314:	4640      	mov	r0, r8
  40f316:	4e13      	ldr	r6, [pc, #76]	; (40f364 <draw_line_ver+0x1f4>)
  40f318:	47b0      	blx	r6
            if(dashed) {
  40f31a:	f1ba 0f00 	cmp.w	sl, #0
  40f31e:	d0d2      	beq.n	40f2c6 <draw_line_ver+0x156>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
  40f320:	2800      	cmp	r0, #0
  40f322:	d0cc      	beq.n	40f2be <draw_line_ver+0x14e>
                    if(dash_cnt > dsc->dash_width) {
  40f324:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
  40f328:	4591      	cmp	r9, r2
  40f32a:	dd00      	ble.n	40f32e <draw_line_ver+0x1be>
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
  40f32c:	2000      	movs	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
  40f32e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40f332:	4413      	add	r3, r2
  40f334:	4599      	cmp	r9, r3
  40f336:	dbc2      	blt.n	40f2be <draw_line_ver+0x14e>
                        dash_cnt = 0;
  40f338:	f04f 0900 	mov.w	r9, #0
  40f33c:	e7bf      	b.n	40f2be <draw_line_ver+0x14e>
        _lv_mem_buf_release(mask_buf);
  40f33e:	4640      	mov	r0, r8
  40f340:	4b09      	ldr	r3, [pc, #36]	; (40f368 <draw_line_ver+0x1f8>)
  40f342:	4798      	blx	r3
  40f344:	e764      	b.n	40f210 <draw_line_ver+0xa0>
  40f346:	bf00      	nop
  40f348:	00409709 	.word	0x00409709
  40f34c:	00415d25 	.word	0x00415d25
  40f350:	00410aa1 	.word	0x00410aa1
  40f354:	0040d2b5 	.word	0x0040d2b5
  40f358:	004164e3 	.word	0x004164e3
  40f35c:	00417895 	.word	0x00417895
  40f360:	00417a79 	.word	0x00417a79
  40f364:	004109d9 	.word	0x004109d9
  40f368:	00417645 	.word	0x00417645

0040f36c <draw_line_skew>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_skew(const lv_point_t * point1, const lv_point_t * point2,
                                                 const lv_area_t * clip,
                                                 const lv_draw_line_dsc_t * dsc)
{
  40f36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f370:	b0bf      	sub	sp, #252	; 0xfc
  40f372:	9206      	str	r2, [sp, #24]
  40f374:	9305      	str	r3, [sp, #20]
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
  40f376:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40f37a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  40f37e:	4293      	cmp	r3, r2
  40f380:	f280 80e7 	bge.w	40f552 <draw_line_skew+0x1e6>
        p1.y = point1->y;
  40f384:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
        p2.y = point2->y;
  40f388:	f8ad 20f2 	strh.w	r2, [sp, #242]	; 0xf2
        p1.x = point1->x;
  40f38c:	f9b0 3000 	ldrsh.w	r3, [r0]
  40f390:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
        p2.x = point2->x;
  40f394:	f9b1 3000 	ldrsh.w	r3, [r1]
  40f398:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
  40f39c:	f9bd 80f0 	ldrsh.w	r8, [sp, #240]	; 0xf0
  40f3a0:	f9bd 70f4 	ldrsh.w	r7, [sp, #244]	; 0xf4
  40f3a4:	eba8 0907 	sub.w	r9, r8, r7
    int32_t ydiff = p2.y - p1.y;
  40f3a8:	f9bd 50f2 	ldrsh.w	r5, [sp, #242]	; 0xf2
  40f3ac:	f9bd 60f6 	ldrsh.w	r6, [sp, #246]	; 0xf6
  40f3b0:	1bab      	subs	r3, r5, r6
  40f3b2:	9307      	str	r3, [sp, #28]
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
  40f3b4:	ea89 7be9 	eor.w	fp, r9, r9, asr #31
  40f3b8:	ebab 7be9 	sub.w	fp, fp, r9, asr #31
  40f3bc:	2b00      	cmp	r3, #0
  40f3be:	bfb8      	it	lt
  40f3c0:	425b      	neglt	r3, r3
  40f3c2:	469a      	mov	sl, r3
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
  40f3c4:	9b05      	ldr	r3, [sp, #20]
  40f3c6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
  40f3ca:	45d3      	cmp	fp, sl
  40f3cc:	f340 80ce 	ble.w	40f56c <draw_line_skew+0x200>
  40f3d0:	ea4f 134a 	mov.w	r3, sl, lsl #5
  40f3d4:	fb93 f3fb 	sdiv	r3, r3, fp
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
  40f3d8:	49a1      	ldr	r1, [pc, #644]	; (40f660 <draw_line_skew+0x2f4>)
  40f3da:	5ccc      	ldrb	r4, [r1, r3]
  40f3dc:	fb04 f402 	mul.w	r4, r4, r2
  40f3e0:	343f      	adds	r4, #63	; 0x3f
  40f3e2:	11e3      	asrs	r3, r4, #7
    int32_t w_half0 = w >> 1;
  40f3e4:	1224      	asrs	r4, r4, #8
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40f3e6:	f003 0201 	and.w	r2, r3, #1
  40f3ea:	18a2      	adds	r2, r4, r2
  40f3ec:	9204      	str	r2, [sp, #16]

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
  40f3ee:	4642      	mov	r2, r8
  40f3f0:	45b8      	cmp	r8, r7
  40f3f2:	bfa8      	it	ge
  40f3f4:	463a      	movge	r2, r7
  40f3f6:	b292      	uxth	r2, r2
  40f3f8:	b29b      	uxth	r3, r3
  40f3fa:	1ad2      	subs	r2, r2, r3
  40f3fc:	f8ad 20e8 	strh.w	r2, [sp, #232]	; 0xe8
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
  40f400:	4642      	mov	r2, r8
  40f402:	45b8      	cmp	r8, r7
  40f404:	bfb8      	it	lt
  40f406:	463a      	movlt	r2, r7
  40f408:	fa13 f282 	uxtah	r2, r3, r2
  40f40c:	f8ad 20ec 	strh.w	r2, [sp, #236]	; 0xec
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
  40f410:	462a      	mov	r2, r5
  40f412:	42b5      	cmp	r5, r6
  40f414:	bfa8      	it	ge
  40f416:	4632      	movge	r2, r6
  40f418:	b292      	uxth	r2, r2
  40f41a:	1ad2      	subs	r2, r2, r3
  40f41c:	f8ad 20ea 	strh.w	r2, [sp, #234]	; 0xea
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
  40f420:	462a      	mov	r2, r5
  40f422:	42b5      	cmp	r5, r6
  40f424:	bfb8      	it	lt
  40f426:	4632      	movlt	r2, r6
  40f428:	fa13 f382 	uxtah	r3, r3, r2
  40f42c:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
  40f430:	9a06      	ldr	r2, [sp, #24]
  40f432:	a93a      	add	r1, sp, #232	; 0xe8
  40f434:	4608      	mov	r0, r1
  40f436:	4b8b      	ldr	r3, [pc, #556]	; (40f664 <draw_line_skew+0x2f8>)
  40f438:	4798      	blx	r3
    if(is_common == false) return;
  40f43a:	2800      	cmp	r0, #0
  40f43c:	f000 8187 	beq.w	40f74e <draw_line_skew+0x3e2>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
  40f440:	45d3      	cmp	fp, sl
  40f442:	f340 80b6 	ble.w	40f5b2 <draw_line_skew+0x246>
        if(xdiff > 0) {
  40f446:	f1b9 0f00 	cmp.w	r9, #0
  40f44a:	f340 8094 	ble.w	40f576 <draw_line_skew+0x20a>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
  40f44e:	b2b6      	uxth	r6, r6
  40f450:	b2a4      	uxth	r4, r4
  40f452:	1b32      	subs	r2, r6, r4
  40f454:	b2ad      	uxth	r5, r5
  40f456:	1b2c      	subs	r4, r5, r4
  40f458:	2300      	movs	r3, #0
  40f45a:	9301      	str	r3, [sp, #4]
  40f45c:	b224      	sxth	r4, r4
  40f45e:	9400      	str	r4, [sp, #0]
  40f460:	4643      	mov	r3, r8
  40f462:	b212      	sxth	r2, r2
  40f464:	4639      	mov	r1, r7
  40f466:	a82f      	add	r0, sp, #188	; 0xbc
  40f468:	4c7f      	ldr	r4, [pc, #508]	; (40f668 <draw_line_skew+0x2fc>)
  40f46a:	47a0      	blx	r4
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
  40f46c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40f470:	441e      	add	r6, r3
  40f472:	441d      	add	r5, r3
  40f474:	2301      	movs	r3, #1
  40f476:	9301      	str	r3, [sp, #4]
  40f478:	b22d      	sxth	r5, r5
  40f47a:	9500      	str	r5, [sp, #0]
  40f47c:	4643      	mov	r3, r8
  40f47e:	b232      	sxth	r2, r6
  40f480:	4639      	mov	r1, r7
  40f482:	a824      	add	r0, sp, #144	; 0x90
  40f484:	47a0      	blx	r4
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
  40f486:	2100      	movs	r1, #0
  40f488:	a82f      	add	r0, sp, #188	; 0xbc
  40f48a:	4c78      	ldr	r4, [pc, #480]	; (40f66c <draw_line_skew+0x300>)
  40f48c:	47a0      	blx	r4
  40f48e:	9008      	str	r0, [sp, #32]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
  40f490:	2100      	movs	r1, #0
  40f492:	a824      	add	r0, sp, #144	; 0x90
  40f494:	47a0      	blx	r4
  40f496:	9009      	str	r0, [sp, #36]	; 0x24
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
  40f498:	9b05      	ldr	r3, [sp, #20]
  40f49a:	7a5b      	ldrb	r3, [r3, #9]
  40f49c:	f013 0f10 	tst.w	r3, #16
  40f4a0:	f000 80a6 	beq.w	40f5f0 <draw_line_skew+0x284>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
  40f4a4:	f04f 33ff 	mov.w	r3, #4294967295
  40f4a8:	930b      	str	r3, [sp, #44]	; 0x2c
    int16_t mask_top_id = LV_MASK_ID_INV;
  40f4aa:	930a      	str	r3, [sp, #40]	; 0x28
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40f4ac:	4b70      	ldr	r3, [pc, #448]	; (40f670 <draw_line_skew+0x304>)
  40f4ae:	4798      	blx	r3
  40f4b0:	4605      	mov	r5, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40f4b2:	4b70      	ldr	r3, [pc, #448]	; (40f674 <draw_line_skew+0x308>)
  40f4b4:	4798      	blx	r3
  40f4b6:	4682      	mov	sl, r0

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
  40f4b8:	8a00      	ldrh	r0, [r0, #16]
  40f4ba:	f8bd 40e8 	ldrh.w	r4, [sp, #232]	; 0xe8
  40f4be:	1a24      	subs	r4, r4, r0
  40f4c0:	b2a4      	uxth	r4, r4
  40f4c2:	f8ad 40e8 	strh.w	r4, [sp, #232]	; 0xe8
    draw_area.y1 -= disp_area->y1;
  40f4c6:	f8ba 1012 	ldrh.w	r1, [sl, #18]
  40f4ca:	f8bd 20ea 	ldrh.w	r2, [sp, #234]	; 0xea
  40f4ce:	1a52      	subs	r2, r2, r1
  40f4d0:	f8ad 20ea 	strh.w	r2, [sp, #234]	; 0xea
    draw_area.x2 -= disp_area->x1;
  40f4d4:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40f4d8:	1a1b      	subs	r3, r3, r0
  40f4da:	b29b      	uxth	r3, r3
  40f4dc:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    draw_area.y2 -= disp_area->y1;
  40f4e0:	f8bd 20ee 	ldrh.w	r2, [sp, #238]	; 0xee
  40f4e4:	1a52      	subs	r2, r2, r1
  40f4e6:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
  40f4ea:	1b1c      	subs	r4, r3, r4
  40f4ec:	b2a4      	uxth	r4, r4
  40f4ee:	3401      	adds	r4, #1
  40f4f0:	b224      	sxth	r4, r4
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
  40f4f2:	4628      	mov	r0, r5
  40f4f4:	4b60      	ldr	r3, [pc, #384]	; (40f678 <draw_line_skew+0x30c>)
  40f4f6:	4798      	blx	r3
  40f4f8:	4683      	mov	fp, r0
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
  40f4fa:	a83a      	add	r0, sp, #232	; 0xe8
  40f4fc:	4b5f      	ldr	r3, [pc, #380]	; (40f67c <draw_line_skew+0x310>)
  40f4fe:	4798      	blx	r3
  40f500:	4583      	cmp	fp, r0
  40f502:	f200 80a3 	bhi.w	40f64c <draw_line_skew+0x2e0>
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40f506:	4658      	mov	r0, fp
  40f508:	4b5d      	ldr	r3, [pc, #372]	; (40f680 <draw_line_skew+0x314>)
  40f50a:	4798      	blx	r3
  40f50c:	4681      	mov	r9, r0

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
  40f50e:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
  40f512:	f8ba 3010 	ldrh.w	r3, [sl, #16]
  40f516:	441a      	add	r2, r3
  40f518:	b212      	sxth	r2, r2
  40f51a:	9204      	str	r2, [sp, #16]
  40f51c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    fill_area.x2 = draw_area.x2 + disp_area->x1;
  40f520:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
  40f524:	4413      	add	r3, r2
  40f526:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    fill_area.y1 = draw_area.y1 + disp_area->y1;
  40f52a:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
  40f52e:	f8ba 2012 	ldrh.w	r2, [sl, #18]
  40f532:	4413      	add	r3, r2
  40f534:	b21b      	sxth	r3, r3
  40f536:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    fill_area.y2 = fill_area.y1;
  40f53a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    _lv_memset_ff(mask_buf, mask_buf_size);
  40f53e:	4659      	mov	r1, fp
  40f540:	4b50      	ldr	r3, [pc, #320]	; (40f684 <draw_line_skew+0x318>)
  40f542:	4798      	blx	r3
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40f544:	f9bd 50ea 	ldrsh.w	r5, [sp, #234]	; 0xea
  40f548:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
  40f54c:	441d      	add	r5, r3
    uint32_t mask_p = 0;
  40f54e:	2600      	movs	r6, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40f550:	e0bd      	b.n	40f6ce <draw_line_skew+0x362>
        p1.y = point2->y;
  40f552:	f8ad 20f6 	strh.w	r2, [sp, #246]	; 0xf6
        p2.y = point1->y;
  40f556:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
        p1.x = point2->x;
  40f55a:	f9b1 3000 	ldrsh.w	r3, [r1]
  40f55e:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
        p2.x = point1->x;
  40f562:	f9b0 3000 	ldrsh.w	r3, [r0]
  40f566:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
  40f56a:	e717      	b.n	40f39c <draw_line_skew+0x30>
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
  40f56c:	ea4f 134b 	mov.w	r3, fp, lsl #5
  40f570:	fb93 f3fa 	sdiv	r3, r3, sl
  40f574:	e730      	b.n	40f3d8 <draw_line_skew+0x6c>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
  40f576:	b2b6      	uxth	r6, r6
  40f578:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40f57c:	18f2      	adds	r2, r6, r3
  40f57e:	b2ad      	uxth	r5, r5
  40f580:	442b      	add	r3, r5
  40f582:	2100      	movs	r1, #0
  40f584:	9101      	str	r1, [sp, #4]
  40f586:	b21b      	sxth	r3, r3
  40f588:	9300      	str	r3, [sp, #0]
  40f58a:	4643      	mov	r3, r8
  40f58c:	b212      	sxth	r2, r2
  40f58e:	4639      	mov	r1, r7
  40f590:	a82f      	add	r0, sp, #188	; 0xbc
  40f592:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 40f668 <draw_line_skew+0x2fc>
  40f596:	47d0      	blx	sl
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
  40f598:	b2a4      	uxth	r4, r4
  40f59a:	1b36      	subs	r6, r6, r4
  40f59c:	1b2d      	subs	r5, r5, r4
  40f59e:	2301      	movs	r3, #1
  40f5a0:	9301      	str	r3, [sp, #4]
  40f5a2:	b22d      	sxth	r5, r5
  40f5a4:	9500      	str	r5, [sp, #0]
  40f5a6:	4643      	mov	r3, r8
  40f5a8:	b232      	sxth	r2, r6
  40f5aa:	4639      	mov	r1, r7
  40f5ac:	a824      	add	r0, sp, #144	; 0x90
  40f5ae:	47d0      	blx	sl
  40f5b0:	e769      	b.n	40f486 <draw_line_skew+0x11a>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
  40f5b2:	b2bf      	uxth	r7, r7
  40f5b4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40f5b8:	18f9      	adds	r1, r7, r3
  40f5ba:	fa1f f888 	uxth.w	r8, r8
  40f5be:	4443      	add	r3, r8
  40f5c0:	2200      	movs	r2, #0
  40f5c2:	9201      	str	r2, [sp, #4]
  40f5c4:	9500      	str	r5, [sp, #0]
  40f5c6:	b21b      	sxth	r3, r3
  40f5c8:	4632      	mov	r2, r6
  40f5ca:	b209      	sxth	r1, r1
  40f5cc:	a82f      	add	r0, sp, #188	; 0xbc
  40f5ce:	f8df a098 	ldr.w	sl, [pc, #152]	; 40f668 <draw_line_skew+0x2fc>
  40f5d2:	47d0      	blx	sl
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
  40f5d4:	b2a4      	uxth	r4, r4
  40f5d6:	1b3f      	subs	r7, r7, r4
  40f5d8:	eba8 0804 	sub.w	r8, r8, r4
  40f5dc:	2301      	movs	r3, #1
  40f5de:	9301      	str	r3, [sp, #4]
  40f5e0:	9500      	str	r5, [sp, #0]
  40f5e2:	fa0f f388 	sxth.w	r3, r8
  40f5e6:	4632      	mov	r2, r6
  40f5e8:	b239      	sxth	r1, r7
  40f5ea:	a824      	add	r0, sp, #144	; 0x90
  40f5ec:	47d0      	blx	sl
  40f5ee:	e74a      	b.n	40f486 <draw_line_skew+0x11a>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
  40f5f0:	f9bd 10f4 	ldrsh.w	r1, [sp, #244]	; 0xf4
  40f5f4:	f9bd 20f6 	ldrsh.w	r2, [sp, #246]	; 0xf6
  40f5f8:	b28b      	uxth	r3, r1
  40f5fa:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  40f5fe:	1b5b      	subs	r3, r3, r5
  40f600:	fa1f f989 	uxth.w	r9, r9
  40f604:	fa19 f082 	uxtah	r0, r9, r2
  40f608:	2403      	movs	r4, #3
  40f60a:	9401      	str	r4, [sp, #4]
  40f60c:	b200      	sxth	r0, r0
  40f60e:	9000      	str	r0, [sp, #0]
  40f610:	b21b      	sxth	r3, r3
  40f612:	a819      	add	r0, sp, #100	; 0x64
  40f614:	4c14      	ldr	r4, [pc, #80]	; (40f668 <draw_line_skew+0x2fc>)
  40f616:	47a0      	blx	r4
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
  40f618:	f9bd 10f0 	ldrsh.w	r1, [sp, #240]	; 0xf0
  40f61c:	f9bd 20f2 	ldrsh.w	r2, [sp, #242]	; 0xf2
  40f620:	b28b      	uxth	r3, r1
  40f622:	1b5b      	subs	r3, r3, r5
  40f624:	fa19 f982 	uxtah	r9, r9, r2
  40f628:	2002      	movs	r0, #2
  40f62a:	9001      	str	r0, [sp, #4]
  40f62c:	fa0f f089 	sxth.w	r0, r9
  40f630:	9000      	str	r0, [sp, #0]
  40f632:	b21b      	sxth	r3, r3
  40f634:	a80e      	add	r0, sp, #56	; 0x38
  40f636:	47a0      	blx	r4
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
  40f638:	2100      	movs	r1, #0
  40f63a:	a819      	add	r0, sp, #100	; 0x64
  40f63c:	4c0b      	ldr	r4, [pc, #44]	; (40f66c <draw_line_skew+0x300>)
  40f63e:	47a0      	blx	r4
  40f640:	900a      	str	r0, [sp, #40]	; 0x28
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
  40f642:	2100      	movs	r1, #0
  40f644:	a80e      	add	r0, sp, #56	; 0x38
  40f646:	47a0      	blx	r4
  40f648:	900b      	str	r0, [sp, #44]	; 0x2c
  40f64a:	e72f      	b.n	40f4ac <draw_line_skew+0x140>
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
  40f64c:	a83a      	add	r0, sp, #232	; 0xe8
  40f64e:	4b0b      	ldr	r3, [pc, #44]	; (40f67c <draw_line_skew+0x310>)
  40f650:	4798      	blx	r3
  40f652:	4683      	mov	fp, r0
  40f654:	e757      	b.n	40f506 <draw_line_skew+0x19a>

        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
  40f656:	4621      	mov	r1, r4
  40f658:	4638      	mov	r0, r7
  40f65a:	4b0b      	ldr	r3, [pc, #44]	; (40f688 <draw_line_skew+0x31c>)
  40f65c:	4798      	blx	r3
  40f65e:	e048      	b.n	40f6f2 <draw_line_skew+0x386>
  40f660:	0042e69c 	.word	0x0042e69c
  40f664:	004164e3 	.word	0x004164e3
  40f668:	00410ac5 	.word	0x00410ac5
  40f66c:	004109a5 	.word	0x004109a5
  40f670:	00409709 	.word	0x00409709
  40f674:	00415d25 	.word	0x00415d25
  40f678:	00415c21 	.word	0x00415c21
  40f67c:	004164c7 	.word	0x004164c7
  40f680:	00417895 	.word	0x00417895
  40f684:	00417a79 	.word	0x00417a79
  40f688:	00417a21 	.word	0x00417a21
            fill_area.y2 ++;
        }
        else {
            _lv_blend_fill(&fill_area, clip,
                           dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                           dsc->blend_mode);
  40f68c:	9905      	ldr	r1, [sp, #20]
  40f68e:	7a4b      	ldrb	r3, [r1, #9]
  40f690:	f003 0303 	and.w	r3, r3, #3
            _lv_blend_fill(&fill_area, clip,
  40f694:	880a      	ldrh	r2, [r1, #0]
  40f696:	f8ad 201c 	strh.w	r2, [sp, #28]
  40f69a:	9302      	str	r3, [sp, #8]
  40f69c:	7a0b      	ldrb	r3, [r1, #8]
  40f69e:	9301      	str	r3, [sp, #4]
  40f6a0:	2302      	movs	r3, #2
  40f6a2:	9300      	str	r3, [sp, #0]
  40f6a4:	464b      	mov	r3, r9
  40f6a6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
  40f6aa:	9906      	ldr	r1, [sp, #24]
  40f6ac:	a80c      	add	r0, sp, #48	; 0x30
  40f6ae:	4e29      	ldr	r6, [pc, #164]	; (40f754 <draw_line_skew+0x3e8>)
  40f6b0:	47b0      	blx	r6

            fill_area.y1 = fill_area.y2 + 1;
  40f6b2:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
  40f6b6:	3301      	adds	r3, #1
  40f6b8:	b21b      	sxth	r3, r3
  40f6ba:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            fill_area.y2 = fill_area.y1;
  40f6be:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            mask_p = 0;
            _lv_memset_ff(mask_buf, mask_buf_size);
  40f6c2:	4659      	mov	r1, fp
  40f6c4:	4648      	mov	r0, r9
  40f6c6:	4b24      	ldr	r3, [pc, #144]	; (40f758 <draw_line_skew+0x3ec>)
  40f6c8:	4798      	blx	r3
            mask_p = 0;
  40f6ca:	2600      	movs	r6, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40f6cc:	3501      	adds	r5, #1
  40f6ce:	f9bd 30ee 	ldrsh.w	r3, [sp, #238]	; 0xee
  40f6d2:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
  40f6d6:	4413      	add	r3, r2
  40f6d8:	429d      	cmp	r5, r3
  40f6da:	dc14      	bgt.n	40f706 <draw_line_skew+0x39a>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
  40f6dc:	eb09 0706 	add.w	r7, r9, r6
  40f6e0:	4623      	mov	r3, r4
  40f6e2:	b22a      	sxth	r2, r5
  40f6e4:	9904      	ldr	r1, [sp, #16]
  40f6e6:	4638      	mov	r0, r7
  40f6e8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 40f764 <draw_line_skew+0x3f8>
  40f6ec:	47c0      	blx	r8
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40f6ee:	2800      	cmp	r0, #0
  40f6f0:	d0b1      	beq.n	40f656 <draw_line_skew+0x2ea>
        mask_p += draw_area_w;
  40f6f2:	4426      	add	r6, r4
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
  40f6f4:	19a3      	adds	r3, r4, r6
  40f6f6:	459b      	cmp	fp, r3
  40f6f8:	d9c8      	bls.n	40f68c <draw_line_skew+0x320>
            fill_area.y2 ++;
  40f6fa:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
  40f6fe:	3301      	adds	r3, #1
  40f700:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  40f704:	e7e2      	b.n	40f6cc <draw_line_skew+0x360>
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
  40f706:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
  40f70a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
  40f70e:	429a      	cmp	r2, r3
  40f710:	d011      	beq.n	40f736 <draw_line_skew+0x3ca>
        fill_area.y2--;
  40f712:	3b01      	subs	r3, #1
  40f714:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
  40f718:	9905      	ldr	r1, [sp, #20]
  40f71a:	7a4b      	ldrb	r3, [r1, #9]
  40f71c:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(&fill_area, clip,
  40f720:	880a      	ldrh	r2, [r1, #0]
  40f722:	9302      	str	r3, [sp, #8]
  40f724:	7a0b      	ldrb	r3, [r1, #8]
  40f726:	9301      	str	r3, [sp, #4]
  40f728:	2302      	movs	r3, #2
  40f72a:	9300      	str	r3, [sp, #0]
  40f72c:	464b      	mov	r3, r9
  40f72e:	9906      	ldr	r1, [sp, #24]
  40f730:	a80c      	add	r0, sp, #48	; 0x30
  40f732:	4c08      	ldr	r4, [pc, #32]	; (40f754 <draw_line_skew+0x3e8>)
  40f734:	47a0      	blx	r4

    }

    _lv_mem_buf_release(mask_buf);
  40f736:	4648      	mov	r0, r9
  40f738:	4b08      	ldr	r3, [pc, #32]	; (40f75c <draw_line_skew+0x3f0>)
  40f73a:	4798      	blx	r3

    lv_draw_mask_remove_id(mask_left_id);
  40f73c:	9808      	ldr	r0, [sp, #32]
  40f73e:	4c08      	ldr	r4, [pc, #32]	; (40f760 <draw_line_skew+0x3f4>)
  40f740:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_right_id);
  40f742:	9809      	ldr	r0, [sp, #36]	; 0x24
  40f744:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_top_id);
  40f746:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f748:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_bottom_id);
  40f74a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40f74c:	47a0      	blx	r4
}
  40f74e:	b03f      	add	sp, #252	; 0xfc
  40f750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f754:	0040d2b5 	.word	0x0040d2b5
  40f758:	00417a79 	.word	0x00417a79
  40f75c:	00417645 	.word	0x00417645
  40f760:	00410a29 	.word	0x00410a29
  40f764:	004109d9 	.word	0x004109d9

0040f768 <lv_draw_line_dsc_init>:
{
  40f768:	b510      	push	{r4, lr}
  40f76a:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
  40f76c:	210a      	movs	r1, #10
  40f76e:	4b04      	ldr	r3, [pc, #16]	; (40f780 <lv_draw_line_dsc_init+0x18>)
  40f770:	4798      	blx	r3
    dsc->width = 1;
  40f772:	2301      	movs	r3, #1
  40f774:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
  40f776:	23ff      	movs	r3, #255	; 0xff
  40f778:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
  40f77a:	2300      	movs	r3, #0
  40f77c:	8023      	strh	r3, [r4, #0]
  40f77e:	bd10      	pop	{r4, pc}
  40f780:	00417a21 	.word	0x00417a21

0040f784 <lv_draw_line>:
{
  40f784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40f788:	b09b      	sub	sp, #108	; 0x6c
    if(dsc->width == 0) return;
  40f78a:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
  40f78e:	2c00      	cmp	r4, #0
  40f790:	d05e      	beq.n	40f850 <lv_draw_line+0xcc>
    if(dsc->opa <= LV_OPA_MIN) return;
  40f792:	7a1d      	ldrb	r5, [r3, #8]
  40f794:	2d02      	cmp	r5, #2
  40f796:	d95b      	bls.n	40f850 <lv_draw_line+0xcc>
    if(point1->x == point2->x && point1->y == point2->y) return;
  40f798:	f9b0 5000 	ldrsh.w	r5, [r0]
  40f79c:	f9b1 6000 	ldrsh.w	r6, [r1]
  40f7a0:	42b5      	cmp	r5, r6
  40f7a2:	d058      	beq.n	40f856 <lv_draw_line+0xd2>
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
  40f7a4:	42b5      	cmp	r5, r6
  40f7a6:	bfa8      	it	ge
  40f7a8:	4635      	movge	r5, r6
  40f7aa:	b2ad      	uxth	r5, r5
  40f7ac:	4626      	mov	r6, r4
  40f7ae:	2c00      	cmp	r4, #0
  40f7b0:	db58      	blt.n	40f864 <lv_draw_line+0xe0>
  40f7b2:	f3c6 064f 	ubfx	r6, r6, #1, #16
  40f7b6:	1bad      	subs	r5, r5, r6
  40f7b8:	f8ad 5060 	strh.w	r5, [sp, #96]	; 0x60
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
  40f7bc:	f9b1 4000 	ldrsh.w	r4, [r1]
  40f7c0:	f9b0 5000 	ldrsh.w	r5, [r0]
  40f7c4:	42ac      	cmp	r4, r5
  40f7c6:	bfb8      	it	lt
  40f7c8:	462c      	movlt	r4, r5
  40f7ca:	fa16 f484 	uxtah	r4, r6, r4
  40f7ce:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
  40f7d2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  40f7d6:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
  40f7da:	42ac      	cmp	r4, r5
  40f7dc:	bfa8      	it	ge
  40f7de:	462c      	movge	r4, r5
  40f7e0:	b2a4      	uxth	r4, r4
  40f7e2:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40f7e6:	2d00      	cmp	r5, #0
  40f7e8:	db3e      	blt.n	40f868 <lv_draw_line+0xe4>
  40f7ea:	eba4 0465 	sub.w	r4, r4, r5, asr #1
  40f7ee:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
  40f7f2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  40f7f6:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
  40f7fa:	42ac      	cmp	r4, r5
  40f7fc:	bfb8      	it	lt
  40f7fe:	462c      	movlt	r4, r5
  40f800:	b2a4      	uxth	r4, r4
  40f802:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40f806:	2d00      	cmp	r5, #0
  40f808:	db30      	blt.n	40f86c <lv_draw_line+0xe8>
  40f80a:	461e      	mov	r6, r3
  40f80c:	4690      	mov	r8, r2
  40f80e:	460f      	mov	r7, r1
  40f810:	4681      	mov	r9, r0
  40f812:	eb04 0365 	add.w	r3, r4, r5, asr #1
  40f816:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
  40f81a:	a918      	add	r1, sp, #96	; 0x60
  40f81c:	4608      	mov	r0, r1
  40f81e:	4b45      	ldr	r3, [pc, #276]	; (40f934 <lv_draw_line+0x1b0>)
  40f820:	4798      	blx	r3
    if(!is_common) return;
  40f822:	b1a8      	cbz	r0, 40f850 <lv_draw_line+0xcc>
    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
  40f824:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
  40f828:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  40f82c:	429a      	cmp	r2, r3
  40f82e:	d01f      	beq.n	40f870 <lv_draw_line+0xec>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
  40f830:	f9b9 2000 	ldrsh.w	r2, [r9]
  40f834:	f9b7 3000 	ldrsh.w	r3, [r7]
  40f838:	429a      	cmp	r2, r3
  40f83a:	d020      	beq.n	40f87e <lv_draw_line+0xfa>
    else draw_line_skew(point1, point2, &clip_line, dsc);
  40f83c:	4633      	mov	r3, r6
  40f83e:	aa18      	add	r2, sp, #96	; 0x60
  40f840:	4639      	mov	r1, r7
  40f842:	4648      	mov	r0, r9
  40f844:	4c3c      	ldr	r4, [pc, #240]	; (40f938 <lv_draw_line+0x1b4>)
  40f846:	47a0      	blx	r4
    if(dsc->round_end || dsc->round_start) {
  40f848:	7a73      	ldrb	r3, [r6, #9]
  40f84a:	f013 0f0c 	tst.w	r3, #12
  40f84e:	d11d      	bne.n	40f88c <lv_draw_line+0x108>
}
  40f850:	b01b      	add	sp, #108	; 0x6c
  40f852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(point1->x == point2->x && point1->y == point2->y) return;
  40f856:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
  40f85a:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
  40f85e:	45be      	cmp	lr, r7
  40f860:	d1a0      	bne.n	40f7a4 <lv_draw_line+0x20>
  40f862:	e7f5      	b.n	40f850 <lv_draw_line+0xcc>
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
  40f864:	1c66      	adds	r6, r4, #1
  40f866:	e7a4      	b.n	40f7b2 <lv_draw_line+0x2e>
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
  40f868:	3501      	adds	r5, #1
  40f86a:	e7be      	b.n	40f7ea <lv_draw_line+0x66>
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
  40f86c:	3501      	adds	r5, #1
  40f86e:	e7cc      	b.n	40f80a <lv_draw_line+0x86>
    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
  40f870:	4633      	mov	r3, r6
  40f872:	aa18      	add	r2, sp, #96	; 0x60
  40f874:	4639      	mov	r1, r7
  40f876:	4648      	mov	r0, r9
  40f878:	4c30      	ldr	r4, [pc, #192]	; (40f93c <lv_draw_line+0x1b8>)
  40f87a:	47a0      	blx	r4
  40f87c:	e7e4      	b.n	40f848 <lv_draw_line+0xc4>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
  40f87e:	4633      	mov	r3, r6
  40f880:	aa18      	add	r2, sp, #96	; 0x60
  40f882:	4639      	mov	r1, r7
  40f884:	4648      	mov	r0, r9
  40f886:	4c2e      	ldr	r4, [pc, #184]	; (40f940 <lv_draw_line+0x1bc>)
  40f888:	47a0      	blx	r4
  40f88a:	e7dd      	b.n	40f848 <lv_draw_line+0xc4>
        lv_draw_rect_dsc_init(&cir_dsc);
  40f88c:	a803      	add	r0, sp, #12
  40f88e:	4b2d      	ldr	r3, [pc, #180]	; (40f944 <lv_draw_line+0x1c0>)
  40f890:	4798      	blx	r3
        cir_dsc.bg_color = dsc->color;
  40f892:	8833      	ldrh	r3, [r6, #0]
  40f894:	f8ad 300e 	strh.w	r3, [sp, #14]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
  40f898:	f647 73ff 	movw	r3, #32767	; 0x7fff
  40f89c:	f8ad 300c 	strh.w	r3, [sp, #12]
        cir_dsc.bg_opa = dsc->opa;
  40f8a0:	7a33      	ldrb	r3, [r6, #8]
  40f8a2:	f88d 3018 	strb.w	r3, [sp, #24]
        int32_t r = (dsc->width >> 1);
  40f8a6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
  40f8aa:	105c      	asrs	r4, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
  40f8ac:	b29b      	uxth	r3, r3
  40f8ae:	f083 0301 	eor.w	r3, r3, #1
  40f8b2:	f003 0501 	and.w	r5, r3, #1
        if(dsc->round_start) {
  40f8b6:	7a73      	ldrb	r3, [r6, #9]
  40f8b8:	f013 0f04 	tst.w	r3, #4
  40f8bc:	d11d      	bne.n	40f8fa <lv_draw_line+0x176>
        if(dsc->round_end) {
  40f8be:	7a73      	ldrb	r3, [r6, #9]
  40f8c0:	f013 0f08 	tst.w	r3, #8
  40f8c4:	d0c4      	beq.n	40f850 <lv_draw_line+0xcc>
            cir_area.x1 = point2->x - r;
  40f8c6:	883b      	ldrh	r3, [r7, #0]
  40f8c8:	b2a4      	uxth	r4, r4
  40f8ca:	1b1a      	subs	r2, r3, r4
  40f8cc:	f8ad 2004 	strh.w	r2, [sp, #4]
            cir_area.y1 = point2->y - r;
  40f8d0:	8879      	ldrh	r1, [r7, #2]
  40f8d2:	1b0a      	subs	r2, r1, r4
  40f8d4:	f8ad 2006 	strh.w	r2, [sp, #6]
            cir_area.x2 = point2->x + r - r_corr;
  40f8d8:	18e2      	adds	r2, r4, r3
  40f8da:	b292      	uxth	r2, r2
  40f8dc:	b2ad      	uxth	r5, r5
  40f8de:	1b52      	subs	r2, r2, r5
  40f8e0:	f8ad 2008 	strh.w	r2, [sp, #8]
            cir_area.y2 = point2->y + r - r_corr ;
  40f8e4:	440c      	add	r4, r1
  40f8e6:	b2a3      	uxth	r3, r4
  40f8e8:	1b5b      	subs	r3, r3, r5
  40f8ea:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
  40f8ee:	aa03      	add	r2, sp, #12
  40f8f0:	4641      	mov	r1, r8
  40f8f2:	a801      	add	r0, sp, #4
  40f8f4:	4b14      	ldr	r3, [pc, #80]	; (40f948 <lv_draw_line+0x1c4>)
  40f8f6:	4798      	blx	r3
  40f8f8:	e7aa      	b.n	40f850 <lv_draw_line+0xcc>
            cir_area.x1 = point1->x - r;
  40f8fa:	f8b9 2000 	ldrh.w	r2, [r9]
  40f8fe:	b2a3      	uxth	r3, r4
  40f900:	1ad1      	subs	r1, r2, r3
  40f902:	f8ad 1004 	strh.w	r1, [sp, #4]
            cir_area.y1 = point1->y - r;
  40f906:	f8b9 0002 	ldrh.w	r0, [r9, #2]
  40f90a:	1ac1      	subs	r1, r0, r3
  40f90c:	f8ad 1006 	strh.w	r1, [sp, #6]
            cir_area.x2 = point1->x + r - r_corr;
  40f910:	441a      	add	r2, r3
  40f912:	b292      	uxth	r2, r2
  40f914:	b2a9      	uxth	r1, r5
  40f916:	1a52      	subs	r2, r2, r1
  40f918:	f8ad 2008 	strh.w	r2, [sp, #8]
            cir_area.y2 = point1->y + r - r_corr ;
  40f91c:	4403      	add	r3, r0
  40f91e:	b29b      	uxth	r3, r3
  40f920:	1a5b      	subs	r3, r3, r1
  40f922:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
  40f926:	aa03      	add	r2, sp, #12
  40f928:	4641      	mov	r1, r8
  40f92a:	a801      	add	r0, sp, #4
  40f92c:	4b06      	ldr	r3, [pc, #24]	; (40f948 <lv_draw_line+0x1c4>)
  40f92e:	4798      	blx	r3
  40f930:	e7c5      	b.n	40f8be <lv_draw_line+0x13a>
  40f932:	bf00      	nop
  40f934:	004164e3 	.word	0x004164e3
  40f938:	0040f36d 	.word	0x0040f36d
  40f93c:	0040ef61 	.word	0x0040ef61
  40f940:	0040f171 	.word	0x0040f171
  40f944:	0041338d 	.word	0x0041338d
  40f948:	004133d9 	.word	0x004133d9

0040f94c <lv_draw_mask_fade>:
}

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_fade(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_fade_param_t * p)
{
  40f94c:	b4f0      	push	{r4, r5, r6, r7}
  40f94e:	9c04      	ldr	r4, [sp, #16]
    if(abs_y < p->cfg.coords.y1) return LV_DRAW_MASK_RES_FULL_COVER;
  40f950:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
  40f954:	4295      	cmp	r5, r2
  40f956:	dc7c      	bgt.n	40fa52 <lv_draw_mask_fade+0x106>
    if(abs_y > p->cfg.coords.y2) return LV_DRAW_MASK_RES_FULL_COVER;
  40f958:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
  40f95c:	42aa      	cmp	r2, r5
  40f95e:	dc7b      	bgt.n	40fa58 <lv_draw_mask_fade+0x10c>
    if(abs_x + len < p->cfg.coords.x1) return LV_DRAW_MASK_RES_FULL_COVER;
  40f960:	185f      	adds	r7, r3, r1
  40f962:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
  40f966:	42b7      	cmp	r7, r6
  40f968:	db78      	blt.n	40fa5c <lv_draw_mask_fade+0x110>
    if(abs_x > p->cfg.coords.x2) return LV_DRAW_MASK_RES_FULL_COVER;
  40f96a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  40f96e:	42a9      	cmp	r1, r5
  40f970:	dc76      	bgt.n	40fa60 <lv_draw_mask_fade+0x114>

    if(abs_x + len > p->cfg.coords.x2) len -= abs_x + len - p->cfg.coords.x2 - 1;
  40f972:	42af      	cmp	r7, r5
  40f974:	dd08      	ble.n	40f988 <lv_draw_mask_fade+0x3c>
  40f976:	b2ad      	uxth	r5, r5
  40f978:	b29f      	uxth	r7, r3
  40f97a:	187b      	adds	r3, r7, r1
  40f97c:	b29b      	uxth	r3, r3
  40f97e:	1aeb      	subs	r3, r5, r3
  40f980:	fa17 f383 	uxtah	r3, r7, r3
  40f984:	3301      	adds	r3, #1
  40f986:	b21b      	sxth	r3, r3

    if(abs_x < p->cfg.coords.x1) {
  40f988:	42b1      	cmp	r1, r6
  40f98a:	da03      	bge.n	40f994 <lv_draw_mask_fade+0x48>
        int32_t x_ofs = 0;
        x_ofs = p->cfg.coords.x1 - abs_x;
  40f98c:	1a71      	subs	r1, r6, r1
        len -= x_ofs;
  40f98e:	1a5b      	subs	r3, r3, r1
  40f990:	b21b      	sxth	r3, r3
        mask_buf += x_ofs;
  40f992:	4408      	add	r0, r1
    }

    int32_t i;

    if(abs_y <= p->cfg.y_top) {
  40f994:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  40f998:	428a      	cmp	r2, r1
  40f99a:	dd27      	ble.n	40f9ec <lv_draw_mask_fade+0xa0>
        for(i = 0; i < len; i++) {
            mask_buf[i] = mask_mix(mask_buf[i], p->cfg.opa_top);
        }
        return LV_DRAW_MASK_RES_CHANGED;
    }
    else if(abs_y >= p->cfg.y_bottom) {
  40f99c:	f9b4 5012 	ldrsh.w	r5, [r4, #18]
  40f9a0:	42aa      	cmp	r2, r5
  40f9a2:	da3c      	bge.n	40fa1e <lv_draw_mask_fade+0xd2>
        }
        return LV_DRAW_MASK_RES_CHANGED;
    }
    else {
        /*Calculate the opa proportionally*/
        int16_t opa_diff = p->cfg.opa_bottom - p->cfg.opa_top;
  40f9a4:	7d66      	ldrb	r6, [r4, #21]
  40f9a6:	7d27      	ldrb	r7, [r4, #20]
  40f9a8:	1bf4      	subs	r4, r6, r7
        int32_t y_diff = p->cfg.y_bottom - p->cfg.y_top + 1;
  40f9aa:	1a6d      	subs	r5, r5, r1
  40f9ac:	3501      	adds	r5, #1
        lv_opa_t opa_act = (int32_t)((int32_t)(abs_y - p->cfg.y_top) * opa_diff) / y_diff;
  40f9ae:	1a52      	subs	r2, r2, r1
  40f9b0:	fb02 f204 	mul.w	r2, r2, r4
  40f9b4:	fb92 f2f5 	sdiv	r2, r2, r5
        opa_act += p->cfg.opa_top;
  40f9b8:	fa57 f282 	uxtab	r2, r7, r2
  40f9bc:	b2d2      	uxtb	r2, r2

        for(i = 0; i < len; i++) {
  40f9be:	2100      	movs	r1, #0
  40f9c0:	e034      	b.n	40fa2c <lv_draw_mask_fade+0xe0>
}

LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
    if(mask_new <= LV_OPA_MIN) return 0;
  40f9c2:	2100      	movs	r1, #0
            mask_buf[i] = mask_mix(mask_buf[i], p->cfg.opa_top);
  40f9c4:	7031      	strb	r1, [r6, #0]
        for(i = 0; i < len; i++) {
  40f9c6:	3201      	adds	r2, #1
  40f9c8:	429a      	cmp	r2, r3
  40f9ca:	da11      	bge.n	40f9f0 <lv_draw_mask_fade+0xa4>
            mask_buf[i] = mask_mix(mask_buf[i], p->cfg.opa_top);
  40f9cc:	1886      	adds	r6, r0, r2
  40f9ce:	5c81      	ldrb	r1, [r0, r2]
  40f9d0:	7d25      	ldrb	r5, [r4, #20]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f9d2:	2dfc      	cmp	r5, #252	; 0xfc
  40f9d4:	d8f6      	bhi.n	40f9c4 <lv_draw_mask_fade+0x78>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f9d6:	2d02      	cmp	r5, #2
  40f9d8:	d9f3      	bls.n	40f9c2 <lv_draw_mask_fade+0x76>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f9da:	fb01 f105 	mul.w	r1, r1, r5
  40f9de:	eb01 2501 	add.w	r5, r1, r1, lsl #8
  40f9e2:	eb01 11c5 	add.w	r1, r1, r5, lsl #7
  40f9e6:	f3c1 51c7 	ubfx	r1, r1, #23, #8
  40f9ea:	e7eb      	b.n	40f9c4 <lv_draw_mask_fade+0x78>
  40f9ec:	2200      	movs	r2, #0
  40f9ee:	e7eb      	b.n	40f9c8 <lv_draw_mask_fade+0x7c>
        return LV_DRAW_MASK_RES_CHANGED;
  40f9f0:	2002      	movs	r0, #2
  40f9f2:	e02f      	b.n	40fa54 <lv_draw_mask_fade+0x108>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f9f4:	2500      	movs	r5, #0
            mask_buf[i] = mask_mix(mask_buf[i], p->cfg.opa_bottom);
  40f9f6:	7035      	strb	r5, [r6, #0]
        for(i = 0; i < len; i++) {
  40f9f8:	3201      	adds	r2, #1
  40f9fa:	429a      	cmp	r2, r3
  40f9fc:	da11      	bge.n	40fa22 <lv_draw_mask_fade+0xd6>
            mask_buf[i] = mask_mix(mask_buf[i], p->cfg.opa_bottom);
  40f9fe:	1886      	adds	r6, r0, r2
  40fa00:	5c85      	ldrb	r5, [r0, r2]
  40fa02:	7d61      	ldrb	r1, [r4, #21]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40fa04:	29fc      	cmp	r1, #252	; 0xfc
  40fa06:	d8f6      	bhi.n	40f9f6 <lv_draw_mask_fade+0xaa>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fa08:	2902      	cmp	r1, #2
  40fa0a:	d9f3      	bls.n	40f9f4 <lv_draw_mask_fade+0xa8>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40fa0c:	fb01 f105 	mul.w	r1, r1, r5
  40fa10:	eb01 2501 	add.w	r5, r1, r1, lsl #8
  40fa14:	eb01 11c5 	add.w	r1, r1, r5, lsl #7
  40fa18:	f3c1 55c7 	ubfx	r5, r1, #23, #8
  40fa1c:	e7eb      	b.n	40f9f6 <lv_draw_mask_fade+0xaa>
  40fa1e:	2200      	movs	r2, #0
  40fa20:	e7eb      	b.n	40f9fa <lv_draw_mask_fade+0xae>
        return LV_DRAW_MASK_RES_CHANGED;
  40fa22:	2002      	movs	r0, #2
  40fa24:	e016      	b.n	40fa54 <lv_draw_mask_fade+0x108>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fa26:	2400      	movs	r4, #0
            mask_buf[i] = mask_mix(mask_buf[i], opa_act);
  40fa28:	702c      	strb	r4, [r5, #0]
        for(i = 0; i < len; i++) {
  40fa2a:	3101      	adds	r1, #1
  40fa2c:	4299      	cmp	r1, r3
  40fa2e:	da0e      	bge.n	40fa4e <lv_draw_mask_fade+0x102>
            mask_buf[i] = mask_mix(mask_buf[i], opa_act);
  40fa30:	1845      	adds	r5, r0, r1
  40fa32:	5c44      	ldrb	r4, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40fa34:	2afc      	cmp	r2, #252	; 0xfc
  40fa36:	d8f7      	bhi.n	40fa28 <lv_draw_mask_fade+0xdc>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fa38:	2a02      	cmp	r2, #2
  40fa3a:	d9f4      	bls.n	40fa26 <lv_draw_mask_fade+0xda>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40fa3c:	fb02 f404 	mul.w	r4, r2, r4
  40fa40:	eb04 2604 	add.w	r6, r4, r4, lsl #8
  40fa44:	eb04 14c6 	add.w	r4, r4, r6, lsl #7
  40fa48:	f3c4 54c7 	ubfx	r4, r4, #23, #8
  40fa4c:	e7ec      	b.n	40fa28 <lv_draw_mask_fade+0xdc>
        return LV_DRAW_MASK_RES_CHANGED;
  40fa4e:	2002      	movs	r0, #2
  40fa50:	e000      	b.n	40fa54 <lv_draw_mask_fade+0x108>
    if(abs_y < p->cfg.coords.y1) return LV_DRAW_MASK_RES_FULL_COVER;
  40fa52:	2001      	movs	r0, #1
}
  40fa54:	bcf0      	pop	{r4, r5, r6, r7}
  40fa56:	4770      	bx	lr
    if(abs_y > p->cfg.coords.y2) return LV_DRAW_MASK_RES_FULL_COVER;
  40fa58:	2001      	movs	r0, #1
  40fa5a:	e7fb      	b.n	40fa54 <lv_draw_mask_fade+0x108>
    if(abs_x + len < p->cfg.coords.x1) return LV_DRAW_MASK_RES_FULL_COVER;
  40fa5c:	2001      	movs	r0, #1
  40fa5e:	e7f9      	b.n	40fa54 <lv_draw_mask_fade+0x108>
    if(abs_x > p->cfg.coords.x2) return LV_DRAW_MASK_RES_FULL_COVER;
  40fa60:	2001      	movs	r0, #1
  40fa62:	e7f7      	b.n	40fa54 <lv_draw_mask_fade+0x108>

0040fa64 <line_mask_flat>:
{
  40fa64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40fa66:	9e06      	ldr	r6, [sp, #24]
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
  40fa68:	69f4      	ldr	r4, [r6, #28]
  40fa6a:	fb01 f504 	mul.w	r5, r1, r4
  40fa6e:	12ad      	asrs	r5, r5, #10
    if(p->yx_steep > 0) {
  40fa70:	2c00      	cmp	r4, #0
  40fa72:	dd09      	ble.n	40fa88 <line_mask_flat+0x24>
        if(y_at_x > abs_y) {
  40fa74:	4295      	cmp	r5, r2
  40fa76:	dd11      	ble.n	40fa9c <line_mask_flat+0x38>
            if(p->inv) {
  40fa78:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40fa7c:	f013 0f02 	tst.w	r3, #2
  40fa80:	f000 80e2 	beq.w	40fc48 <line_mask_flat+0x1e4>
                return LV_DRAW_MASK_RES_FULL_COVER;
  40fa84:	2001      	movs	r0, #1
  40fa86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(y_at_x < abs_y) {
  40fa88:	4295      	cmp	r5, r2
  40fa8a:	da07      	bge.n	40fa9c <line_mask_flat+0x38>
            if(p->inv) {
  40fa8c:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40fa90:	f013 0f02 	tst.w	r3, #2
  40fa94:	f000 80da 	beq.w	40fc4c <line_mask_flat+0x1e8>
                return LV_DRAW_MASK_RES_FULL_COVER;
  40fa98:	2001      	movs	r0, #1
  40fa9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
  40fa9c:	461f      	mov	r7, r3
  40fa9e:	18cd      	adds	r5, r1, r3
  40faa0:	fb05 f504 	mul.w	r5, r5, r4
  40faa4:	12ad      	asrs	r5, r5, #10
    if(p->yx_steep > 0) {
  40faa6:	2c00      	cmp	r4, #0
  40faa8:	dd09      	ble.n	40fabe <line_mask_flat+0x5a>
        if(y_at_x < abs_y) {
  40faaa:	4295      	cmp	r5, r2
  40faac:	da11      	bge.n	40fad2 <line_mask_flat+0x6e>
            if(p->inv) {
  40faae:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40fab2:	f013 0f02 	tst.w	r3, #2
  40fab6:	f000 80cb 	beq.w	40fc50 <line_mask_flat+0x1ec>
                return LV_DRAW_MASK_RES_TRANSP;
  40faba:	2000      	movs	r0, #0
  40fabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(y_at_x > abs_y) {
  40fabe:	4295      	cmp	r5, r2
  40fac0:	dd07      	ble.n	40fad2 <line_mask_flat+0x6e>
            if(p->inv) {
  40fac2:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40fac6:	f013 0f02 	tst.w	r3, #2
  40faca:	f000 80c3 	beq.w	40fc54 <line_mask_flat+0x1f0>
                return LV_DRAW_MASK_RES_TRANSP;
  40face:	2000      	movs	r0, #0
  40fad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(p->yx_steep > 0) xe = ((abs_y << 8) * p->xy_steep) >> 10;
  40fad2:	2c00      	cmp	r4, #0
  40fad4:	dd39      	ble.n	40fb4a <line_mask_flat+0xe6>
  40fad6:	0212      	lsls	r2, r2, #8
  40fad8:	69b4      	ldr	r4, [r6, #24]
  40fada:	fb04 f202 	mul.w	r2, r4, r2
  40fade:	1292      	asrs	r2, r2, #10
    int32_t xei = xe >> 8;
  40fae0:	ea4f 2e22 	mov.w	lr, r2, asr #8
    if(xef == 0) px_h = 255;
  40fae4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
  40fae8:	d036      	beq.n	40fb58 <line_mask_flat+0xf4>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
  40faea:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
  40faee:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40faf0:	fb04 f505 	mul.w	r5, r4, r5
  40faf4:	122d      	asrs	r5, r5, #8
  40faf6:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
    int32_t k = xei - abs_x;
  40fafa:	ebae 0101 	sub.w	r1, lr, r1
    if(xef) {
  40fafe:	2a00      	cmp	r2, #0
  40fb00:	d05d      	beq.n	40fbbe <line_mask_flat+0x15a>
        if(k >= 0 && k < len) {
  40fb02:	2900      	cmp	r1, #0
  40fb04:	db1f      	blt.n	40fb46 <line_mask_flat+0xe2>
  40fb06:	428b      	cmp	r3, r1
  40fb08:	dd1d      	ble.n	40fb46 <line_mask_flat+0xe2>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
  40fb0a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  40fb0e:	f1c5 04ff 	rsb	r4, r5, #255	; 0xff
  40fb12:	fb04 f202 	mul.w	r2, r4, r2
  40fb16:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40fb1a:	43d4      	mvns	r4, r2
  40fb1c:	b2e4      	uxtb	r4, r4
            if(p->inv) m = 255 - m;
  40fb1e:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
  40fb22:	f01e 0f02 	tst.w	lr, #2
  40fb26:	d100      	bne.n	40fb2a <line_mask_flat+0xc6>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
  40fb28:	4622      	mov	r2, r4
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40fb2a:	5c44      	ldrb	r4, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40fb2c:	2afc      	cmp	r2, #252	; 0xfc
  40fb2e:	d809      	bhi.n	40fb44 <line_mask_flat+0xe0>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fb30:	2a02      	cmp	r2, #2
  40fb32:	d913      	bls.n	40fb5c <line_mask_flat+0xf8>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40fb34:	fb04 f202 	mul.w	r2, r4, r2
  40fb38:	eb02 2402 	add.w	r4, r2, r2, lsl #8
  40fb3c:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
  40fb40:	f3c2 54c7 	ubfx	r4, r2, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40fb44:	5444      	strb	r4, [r0, r1]
        k++;
  40fb46:	1c4a      	adds	r2, r1, #1
  40fb48:	e013      	b.n	40fb72 <line_mask_flat+0x10e>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
  40fb4a:	3201      	adds	r2, #1
  40fb4c:	0212      	lsls	r2, r2, #8
  40fb4e:	69b4      	ldr	r4, [r6, #24]
  40fb50:	fb04 f202 	mul.w	r2, r4, r2
  40fb54:	1292      	asrs	r2, r2, #10
  40fb56:	e7c3      	b.n	40fae0 <line_mask_flat+0x7c>
    if(xef == 0) px_h = 255;
  40fb58:	25ff      	movs	r5, #255	; 0xff
  40fb5a:	e7ce      	b.n	40fafa <line_mask_flat+0x96>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fb5c:	2400      	movs	r4, #0
  40fb5e:	e7f1      	b.n	40fb44 <line_mask_flat+0xe0>
  40fb60:	f04f 0e00 	mov.w	lr, #0
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40fb64:	f88c e000 	strb.w	lr, [ip]
        px_h -= p->spx;
  40fb68:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40fb6a:	1b2d      	subs	r5, r5, r4
        k++;
  40fb6c:	3201      	adds	r2, #1
        if(k >= len) break;
  40fb6e:	4297      	cmp	r7, r2
  40fb70:	dd27      	ble.n	40fbc2 <line_mask_flat+0x15e>
    while(px_h > p->spx) {
  40fb72:	f8d6 e024 	ldr.w	lr, [r6, #36]	; 0x24
  40fb76:	4575      	cmp	r5, lr
  40fb78:	dd23      	ble.n	40fbc2 <line_mask_flat+0x15e>
        if(k >= 0 && k < len) {
  40fb7a:	2a00      	cmp	r2, #0
  40fb7c:	dbf4      	blt.n	40fb68 <line_mask_flat+0x104>
  40fb7e:	42ba      	cmp	r2, r7
  40fb80:	daf2      	bge.n	40fb68 <line_mask_flat+0x104>
            m = px_h - (p->spx >> 1);
  40fb82:	b2ec      	uxtb	r4, r5
  40fb84:	f3ce 0e47 	ubfx	lr, lr, #1, #8
  40fb88:	eba4 040e 	sub.w	r4, r4, lr
  40fb8c:	b2e4      	uxtb	r4, r4
            if(p->inv) m = 255 - m;
  40fb8e:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
  40fb92:	f01e 0f02 	tst.w	lr, #2
  40fb96:	d001      	beq.n	40fb9c <line_mask_flat+0x138>
  40fb98:	43e4      	mvns	r4, r4
  40fb9a:	b2e4      	uxtb	r4, r4
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40fb9c:	eb00 0c02 	add.w	ip, r0, r2
  40fba0:	f810 e002 	ldrb.w	lr, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40fba4:	2cfc      	cmp	r4, #252	; 0xfc
  40fba6:	d8dd      	bhi.n	40fb64 <line_mask_flat+0x100>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fba8:	2c02      	cmp	r4, #2
  40fbaa:	d9d9      	bls.n	40fb60 <line_mask_flat+0xfc>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40fbac:	fb04 f40e 	mul.w	r4, r4, lr
  40fbb0:	eb04 2e04 	add.w	lr, r4, r4, lsl #8
  40fbb4:	eb04 14ce 	add.w	r4, r4, lr, lsl #7
  40fbb8:	f3c4 5ec7 	ubfx	lr, r4, #23, #8
  40fbbc:	e7d2      	b.n	40fb64 <line_mask_flat+0x100>
    int32_t k = xei - abs_x;
  40fbbe:	460a      	mov	r2, r1
  40fbc0:	e7d7      	b.n	40fb72 <line_mask_flat+0x10e>
    if(k < len && k >= 0) {
  40fbc2:	429a      	cmp	r2, r3
  40fbc4:	da27      	bge.n	40fc16 <line_mask_flat+0x1b2>
  40fbc6:	2a00      	cmp	r2, #0
  40fbc8:	db25      	blt.n	40fc16 <line_mask_flat+0x1b2>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
  40fbca:	69b4      	ldr	r4, [r6, #24]
  40fbcc:	fb04 f405 	mul.w	r4, r4, r5
  40fbd0:	12a4      	asrs	r4, r4, #10
        m = (x_inters * px_h) >> 9;
  40fbd2:	fb04 f505 	mul.w	r5, r4, r5
  40fbd6:	f3c5 2547 	ubfx	r5, r5, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
  40fbda:	69f4      	ldr	r4, [r6, #28]
  40fbdc:	2c00      	cmp	r4, #0
  40fbde:	db15      	blt.n	40fc0c <line_mask_flat+0x1a8>
        if(p->inv) m = 255 - m;
  40fbe0:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
  40fbe4:	f014 0f02 	tst.w	r4, #2
  40fbe8:	d001      	beq.n	40fbee <line_mask_flat+0x18a>
  40fbea:	43ed      	mvns	r5, r5
  40fbec:	b2ed      	uxtb	r5, r5
        mask_buf[k] = mask_mix(mask_buf[k], m);
  40fbee:	1887      	adds	r7, r0, r2
  40fbf0:	5c84      	ldrb	r4, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40fbf2:	2dfc      	cmp	r5, #252	; 0xfc
  40fbf4:	d80e      	bhi.n	40fc14 <line_mask_flat+0x1b0>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fbf6:	2d02      	cmp	r5, #2
  40fbf8:	d90b      	bls.n	40fc12 <line_mask_flat+0x1ae>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40fbfa:	fb05 f504 	mul.w	r5, r5, r4
  40fbfe:	eb05 2405 	add.w	r4, r5, r5, lsl #8
  40fc02:	eb05 15c4 	add.w	r5, r5, r4, lsl #7
  40fc06:	f3c5 54c7 	ubfx	r4, r5, #23, #8
  40fc0a:	e003      	b.n	40fc14 <line_mask_flat+0x1b0>
        if(p->yx_steep < 0) m = 255 - m;
  40fc0c:	43ed      	mvns	r5, r5
  40fc0e:	b2ed      	uxtb	r5, r5
  40fc10:	e7e6      	b.n	40fbe0 <line_mask_flat+0x17c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fc12:	2400      	movs	r4, #0
        mask_buf[k] = mask_mix(mask_buf[k], m);
  40fc14:	703c      	strb	r4, [r7, #0]
    if(p->inv) {
  40fc16:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
  40fc1a:	f014 0f02 	tst.w	r4, #2
  40fc1e:	d007      	beq.n	40fc30 <line_mask_flat+0x1cc>
        if(k > len) {
  40fc20:	428b      	cmp	r3, r1
  40fc22:	db19      	blt.n	40fc58 <line_mask_flat+0x1f4>
        if(k >= 0) {
  40fc24:	2900      	cmp	r1, #0
  40fc26:	db19      	blt.n	40fc5c <line_mask_flat+0x1f8>
            _lv_memset_00(&mask_buf[0], k);
  40fc28:	4b0e      	ldr	r3, [pc, #56]	; (40fc64 <line_mask_flat+0x200>)
  40fc2a:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40fc2c:	2002      	movs	r0, #2
  40fc2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(k < 0) {
  40fc30:	3201      	adds	r2, #1
  40fc32:	d415      	bmi.n	40fc60 <line_mask_flat+0x1fc>
        if(k <= len) {
  40fc34:	4293      	cmp	r3, r2
  40fc36:	da01      	bge.n	40fc3c <line_mask_flat+0x1d8>
    return LV_DRAW_MASK_RES_CHANGED;
  40fc38:	2002      	movs	r0, #2
}
  40fc3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            _lv_memset_00(&mask_buf[k], len - k);
  40fc3c:	1a99      	subs	r1, r3, r2
  40fc3e:	4410      	add	r0, r2
  40fc40:	4b08      	ldr	r3, [pc, #32]	; (40fc64 <line_mask_flat+0x200>)
  40fc42:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40fc44:	2002      	movs	r0, #2
  40fc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40fc48:	2000      	movs	r0, #0
  40fc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40fc4c:	2000      	movs	r0, #0
  40fc4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_FULL_COVER;
  40fc50:	2001      	movs	r0, #1
  40fc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_FULL_COVER;
  40fc54:	2001      	movs	r0, #1
  40fc56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40fc58:	2000      	movs	r0, #0
  40fc5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40fc5c:	2002      	movs	r0, #2
  40fc5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40fc60:	2000      	movs	r0, #0
  40fc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40fc64:	00417a21 	.word	0x00417a21

0040fc68 <line_mask_steep>:
{
  40fc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40fc6a:	9e06      	ldr	r6, [sp, #24]
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
  40fc6c:	69b5      	ldr	r5, [r6, #24]
  40fc6e:	fb02 f405 	mul.w	r4, r2, r5
  40fc72:	12a4      	asrs	r4, r4, #10
    if(p->xy_steep > 0) x_at_y++;
  40fc74:	2d00      	cmp	r5, #0
  40fc76:	dd0a      	ble.n	40fc8e <line_mask_steep+0x26>
  40fc78:	1c67      	adds	r7, r4, #1
    if(x_at_y < abs_x) {
  40fc7a:	428f      	cmp	r7, r1
  40fc7c:	da09      	bge.n	40fc92 <line_mask_steep+0x2a>
        if(p->inv) {
  40fc7e:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40fc82:	f013 0f02 	tst.w	r3, #2
  40fc86:	f000 8156 	beq.w	40ff36 <line_mask_steep+0x2ce>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40fc8a:	2001      	movs	r0, #1
  40fc8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
  40fc8e:	4627      	mov	r7, r4
  40fc90:	e7f3      	b.n	40fc7a <line_mask_steep+0x12>
    if(x_at_y > abs_x + len) {
  40fc92:	18cf      	adds	r7, r1, r3
  40fc94:	42bc      	cmp	r4, r7
  40fc96:	dd07      	ble.n	40fca8 <line_mask_steep+0x40>
        if(p->inv) {
  40fc98:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40fc9c:	f013 0f02 	tst.w	r3, #2
  40fca0:	f000 814b 	beq.w	40ff3a <line_mask_steep+0x2d2>
            return LV_DRAW_MASK_RES_TRANSP;
  40fca4:	2000      	movs	r0, #0
  40fca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
  40fca8:	0217      	lsls	r7, r2, #8
  40fcaa:	fb07 f705 	mul.w	r7, r7, r5
    int32_t xsi = xs >> 8;
  40fcae:	14bc      	asrs	r4, r7, #18
    int32_t xsf = xs & 0xFF;
  40fcb0:	f3c7 2e87 	ubfx	lr, r7, #10, #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
  40fcb4:	3201      	adds	r2, #1
  40fcb6:	0212      	lsls	r2, r2, #8
  40fcb8:	fb02 f205 	mul.w	r2, r2, r5
    int32_t xei = xe >> 8;
  40fcbc:	ea4f 4ca2 	mov.w	ip, r2, asr #18
    int32_t xef = xe & 0xFF;
  40fcc0:	f3c2 2287 	ubfx	r2, r2, #10, #8
    k = xsi - abs_x;
  40fcc4:	1a67      	subs	r7, r4, r1
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
  40fcc6:	4564      	cmp	r4, ip
  40fcc8:	d001      	beq.n	40fcce <line_mask_steep+0x66>
  40fcca:	2d00      	cmp	r5, #0
  40fccc:	db68      	blt.n	40fda0 <line_mask_steep+0x138>
    if(xsi == xei) {
  40fcce:	4564      	cmp	r4, ip
  40fcd0:	d06e      	beq.n	40fdb0 <line_mask_steep+0x148>
        if(p->xy_steep < 0) {
  40fcd2:	2d00      	cmp	r5, #0
  40fcd4:	f2c0 80ad 	blt.w	40fe32 <line_mask_steep+0x1ca>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
  40fcd8:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
  40fcdc:	69f5      	ldr	r5, [r6, #28]
  40fcde:	fb05 f502 	mul.w	r5, r5, r2
  40fce2:	12ad      	asrs	r5, r5, #10
            if(k >= 0 && k < len) {
  40fce4:	2f00      	cmp	r7, #0
  40fce6:	db22      	blt.n	40fd2e <line_mask_steep+0xc6>
  40fce8:	429f      	cmp	r7, r3
  40fcea:	da20      	bge.n	40fd2e <line_mask_steep+0xc6>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
  40fcec:	fb05 f202 	mul.w	r2, r5, r2
  40fcf0:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40fcf4:	ea6f 0e02 	mvn.w	lr, r2
  40fcf8:	fa5f fe8e 	uxtb.w	lr, lr
                if(p->inv) m = 255 - m;
  40fcfc:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
  40fd00:	f01c 0f02 	tst.w	ip, #2
  40fd04:	d100      	bne.n	40fd08 <line_mask_steep+0xa0>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
  40fd06:	4672      	mov	r2, lr
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40fd08:	eb00 0c07 	add.w	ip, r0, r7
  40fd0c:	f810 e007 	ldrb.w	lr, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40fd10:	2afc      	cmp	r2, #252	; 0xfc
  40fd12:	d80a      	bhi.n	40fd2a <line_mask_steep+0xc2>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fd14:	2a02      	cmp	r2, #2
  40fd16:	f240 80fd 	bls.w	40ff14 <line_mask_steep+0x2ac>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40fd1a:	fb02 f20e 	mul.w	r2, r2, lr
  40fd1e:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  40fd22:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  40fd26:	f3c2 5ec7 	ubfx	lr, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40fd2a:	f88c e000 	strb.w	lr, [ip]
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
  40fd2e:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
  40fd32:	69b2      	ldr	r2, [r6, #24]
  40fd34:	fb02 f205 	mul.w	r2, r2, r5
  40fd38:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40fd3a:	f117 0e01 	adds.w	lr, r7, #1
  40fd3e:	d41d      	bmi.n	40fd7c <line_mask_steep+0x114>
  40fd40:	4573      	cmp	r3, lr
  40fd42:	dd1b      	ble.n	40fd7c <line_mask_steep+0x114>
                m = ((255 - y_inters) * x_inters) >> 9;
  40fd44:	fb02 f205 	mul.w	r2, r2, r5
  40fd48:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
  40fd4c:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40fd50:	f015 0f02 	tst.w	r5, #2
  40fd54:	d001      	beq.n	40fd5a <line_mask_steep+0xf2>
  40fd56:	43d2      	mvns	r2, r2
  40fd58:	b2d2      	uxtb	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40fd5a:	f810 500e 	ldrb.w	r5, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40fd5e:	2afc      	cmp	r2, #252	; 0xfc
  40fd60:	d80a      	bhi.n	40fd78 <line_mask_steep+0x110>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fd62:	2a02      	cmp	r2, #2
  40fd64:	f240 80d9 	bls.w	40ff1a <line_mask_steep+0x2b2>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40fd68:	fb02 f205 	mul.w	r2, r2, r5
  40fd6c:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40fd70:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40fd74:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40fd78:	f800 500e 	strb.w	r5, [r0, lr]
            k++;
  40fd7c:	3702      	adds	r7, #2
            if(p->inv) {
  40fd7e:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40fd82:	f012 0f02 	tst.w	r2, #2
  40fd86:	f000 80ca 	beq.w	40ff1e <line_mask_steep+0x2b6>
                k = xsi - abs_x;
  40fd8a:	1a61      	subs	r1, r4, r1
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
  40fd8c:	428b      	cmp	r3, r1
  40fd8e:	f2c0 80e4 	blt.w	40ff5a <line_mask_steep+0x2f2>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
  40fd92:	2900      	cmp	r1, #0
  40fd94:	f2c0 80e3 	blt.w	40ff5e <line_mask_steep+0x2f6>
  40fd98:	4b74      	ldr	r3, [pc, #464]	; (40ff6c <line_mask_steep+0x304>)
  40fd9a:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40fd9c:	2002      	movs	r0, #2
  40fd9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
  40fda0:	f1be 0f00 	cmp.w	lr, #0
  40fda4:	d193      	bne.n	40fcce <line_mask_steep+0x66>
        k--;
  40fda6:	3f01      	subs	r7, #1
        xsi = xei;
  40fda8:	4664      	mov	r4, ip
        xsf = 0xFF;
  40fdaa:	f04f 0eff 	mov.w	lr, #255	; 0xff
  40fdae:	e78e      	b.n	40fcce <line_mask_steep+0x66>
        if(k >= 0 && k < len) {
  40fdb0:	2f00      	cmp	r7, #0
  40fdb2:	db1c      	blt.n	40fdee <line_mask_steep+0x186>
  40fdb4:	429f      	cmp	r7, r3
  40fdb6:	da1a      	bge.n	40fdee <line_mask_steep+0x186>
            m = (xsf + xef) >> 1;
  40fdb8:	4472      	add	r2, lr
  40fdba:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(p->inv) m = 255 - m;
  40fdbe:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40fdc2:	f015 0f02 	tst.w	r5, #2
  40fdc6:	d001      	beq.n	40fdcc <line_mask_steep+0x164>
  40fdc8:	43d2      	mvns	r2, r2
  40fdca:	b2d2      	uxtb	r2, r2
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40fdcc:	eb00 0e07 	add.w	lr, r0, r7
  40fdd0:	5dc5      	ldrb	r5, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40fdd2:	2afc      	cmp	r2, #252	; 0xfc
  40fdd4:	d809      	bhi.n	40fdea <line_mask_steep+0x182>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fdd6:	2a02      	cmp	r2, #2
  40fdd8:	d91a      	bls.n	40fe10 <line_mask_steep+0x1a8>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40fdda:	fb05 f202 	mul.w	r2, r5, r2
  40fdde:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40fde2:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40fde6:	f3c2 55c7 	ubfx	r5, r2, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40fdea:	f88e 5000 	strb.w	r5, [lr]
        k++;
  40fdee:	3701      	adds	r7, #1
        if(p->inv) {
  40fdf0:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40fdf4:	f012 0f02 	tst.w	r2, #2
  40fdf8:	d00c      	beq.n	40fe14 <line_mask_steep+0x1ac>
            k = xsi - abs_x;
  40fdfa:	1a61      	subs	r1, r4, r1
            if(k >= len) {
  40fdfc:	428b      	cmp	r3, r1
  40fdfe:	f340 809e 	ble.w	40ff3e <line_mask_steep+0x2d6>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
  40fe02:	2900      	cmp	r1, #0
  40fe04:	f2c0 809d 	blt.w	40ff42 <line_mask_steep+0x2da>
  40fe08:	4b58      	ldr	r3, [pc, #352]	; (40ff6c <line_mask_steep+0x304>)
  40fe0a:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40fe0c:	2002      	movs	r0, #2
  40fe0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  40fe10:	2500      	movs	r5, #0
  40fe12:	e7ea      	b.n	40fdea <line_mask_steep+0x182>
            if(k > len) k = len;
  40fe14:	42bb      	cmp	r3, r7
  40fe16:	da00      	bge.n	40fe1a <line_mask_steep+0x1b2>
  40fe18:	461f      	mov	r7, r3
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40fe1a:	2f00      	cmp	r7, #0
  40fe1c:	f000 8093 	beq.w	40ff46 <line_mask_steep+0x2de>
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
  40fe20:	2f00      	cmp	r7, #0
  40fe22:	f340 8092 	ble.w	40ff4a <line_mask_steep+0x2e2>
  40fe26:	1bd9      	subs	r1, r3, r7
  40fe28:	4438      	add	r0, r7
  40fe2a:	4b50      	ldr	r3, [pc, #320]	; (40ff6c <line_mask_steep+0x304>)
  40fe2c:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40fe2e:	2002      	movs	r0, #2
  40fe30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            y_inters = (xsf * (-p->yx_steep)) >> 10;
  40fe32:	69f2      	ldr	r2, [r6, #28]
  40fe34:	4252      	negs	r2, r2
  40fe36:	fb02 f20e 	mul.w	r2, r2, lr
  40fe3a:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40fe3c:	2f00      	cmp	r7, #0
  40fe3e:	db23      	blt.n	40fe88 <line_mask_steep+0x220>
  40fe40:	429f      	cmp	r7, r3
  40fe42:	da21      	bge.n	40fe88 <line_mask_steep+0x220>
                m = (y_inters * xsf) >> 9;
  40fe44:	fb02 fe0e 	mul.w	lr, r2, lr
  40fe48:	f3ce 2e47 	ubfx	lr, lr, #9, #8
                if(p->inv) m = 255 - m;
  40fe4c:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40fe50:	f015 0f02 	tst.w	r5, #2
  40fe54:	d003      	beq.n	40fe5e <line_mask_steep+0x1f6>
  40fe56:	ea6f 0e0e 	mvn.w	lr, lr
  40fe5a:	fa5f fe8e 	uxtb.w	lr, lr
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40fe5e:	eb00 0c07 	add.w	ip, r0, r7
  40fe62:	5dc5      	ldrb	r5, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40fe64:	f1be 0ffc 	cmp.w	lr, #252	; 0xfc
  40fe68:	d80c      	bhi.n	40fe84 <line_mask_steep+0x21c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fe6a:	f1be 0f02 	cmp.w	lr, #2
  40fe6e:	d908      	bls.n	40fe82 <line_mask_steep+0x21a>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40fe70:	fb0e fe05 	mul.w	lr, lr, r5
  40fe74:	eb0e 250e 	add.w	r5, lr, lr, lsl #8
  40fe78:	eb0e 1ec5 	add.w	lr, lr, r5, lsl #7
  40fe7c:	f3ce 55c7 	ubfx	r5, lr, #23, #8
  40fe80:	e000      	b.n	40fe84 <line_mask_steep+0x21c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fe82:	2500      	movs	r5, #0
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40fe84:	f88c 5000 	strb.w	r5, [ip]
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
  40fe88:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
  40fe8c:	69b2      	ldr	r2, [r6, #24]
  40fe8e:	4252      	negs	r2, r2
  40fe90:	fb02 f205 	mul.w	r2, r2, r5
  40fe94:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40fe96:	f1b7 0e01 	subs.w	lr, r7, #1
  40fe9a:	d41f      	bmi.n	40fedc <line_mask_steep+0x274>
  40fe9c:	4573      	cmp	r3, lr
  40fe9e:	dd1d      	ble.n	40fedc <line_mask_steep+0x274>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
  40fea0:	fb02 f205 	mul.w	r2, r2, r5
  40fea4:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40fea8:	43d5      	mvns	r5, r2
  40feaa:	b2ed      	uxtb	r5, r5
                if(p->inv) m = 255 - m;
  40feac:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
  40feb0:	f01c 0f02 	tst.w	ip, #2
  40feb4:	d100      	bne.n	40feb8 <line_mask_steep+0x250>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
  40feb6:	462a      	mov	r2, r5
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40feb8:	f810 500e 	ldrb.w	r5, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40febc:	2afc      	cmp	r2, #252	; 0xfc
  40febe:	d80b      	bhi.n	40fed8 <line_mask_steep+0x270>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fec0:	2a02      	cmp	r2, #2
  40fec2:	d908      	bls.n	40fed6 <line_mask_steep+0x26e>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40fec4:	fb02 f205 	mul.w	r2, r2, r5
  40fec8:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40fecc:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40fed0:	f3c2 55c7 	ubfx	r5, r2, #23, #8
  40fed4:	e000      	b.n	40fed8 <line_mask_steep+0x270>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fed6:	2500      	movs	r5, #0
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40fed8:	f800 500e 	strb.w	r5, [r0, lr]
            k += 2;
  40fedc:	3701      	adds	r7, #1
            if(p->inv) {
  40fede:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40fee2:	f012 0f02 	tst.w	r2, #2
  40fee6:	d00b      	beq.n	40ff00 <line_mask_steep+0x298>
                k = xsi - abs_x - 1;
  40fee8:	1a61      	subs	r1, r4, r1
  40feea:	3901      	subs	r1, #1
                if(k > len) k = len;
  40feec:	428b      	cmp	r3, r1
  40feee:	da01      	bge.n	40fef4 <line_mask_steep+0x28c>
    return LV_DRAW_MASK_RES_CHANGED;
  40fef0:	2002      	movs	r0, #2
  40fef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
  40fef4:	2900      	cmp	r1, #0
  40fef6:	dd2a      	ble.n	40ff4e <line_mask_steep+0x2e6>
  40fef8:	4b1c      	ldr	r3, [pc, #112]	; (40ff6c <line_mask_steep+0x304>)
  40fefa:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40fefc:	2002      	movs	r0, #2
  40fefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
  40ff00:	42bb      	cmp	r3, r7
  40ff02:	db26      	blt.n	40ff52 <line_mask_steep+0x2ea>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
  40ff04:	2f00      	cmp	r7, #0
  40ff06:	db26      	blt.n	40ff56 <line_mask_steep+0x2ee>
  40ff08:	1bd9      	subs	r1, r3, r7
  40ff0a:	4438      	add	r0, r7
  40ff0c:	4b17      	ldr	r3, [pc, #92]	; (40ff6c <line_mask_steep+0x304>)
  40ff0e:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40ff10:	2002      	movs	r0, #2
  40ff12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  40ff14:	f04f 0e00 	mov.w	lr, #0
  40ff18:	e707      	b.n	40fd2a <line_mask_steep+0xc2>
  40ff1a:	2500      	movs	r5, #0
  40ff1c:	e72c      	b.n	40fd78 <line_mask_steep+0x110>
                if(k > len) k = len;
  40ff1e:	42bb      	cmp	r3, r7
  40ff20:	da00      	bge.n	40ff24 <line_mask_steep+0x2bc>
  40ff22:	461f      	mov	r7, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40ff24:	b1ef      	cbz	r7, 40ff62 <line_mask_steep+0x2fa>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
  40ff26:	2f00      	cmp	r7, #0
  40ff28:	dd1d      	ble.n	40ff66 <line_mask_steep+0x2fe>
  40ff2a:	1bd9      	subs	r1, r3, r7
  40ff2c:	4438      	add	r0, r7
  40ff2e:	4b0f      	ldr	r3, [pc, #60]	; (40ff6c <line_mask_steep+0x304>)
  40ff30:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40ff32:	2002      	movs	r0, #2
  40ff34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40ff36:	2000      	movs	r0, #0
  40ff38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_FULL_COVER;
  40ff3a:	2001      	movs	r0, #1
  40ff3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40ff3e:	2000      	movs	r0, #0
  40ff40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ff42:	2002      	movs	r0, #2
  40ff44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40ff46:	2000      	movs	r0, #0
  40ff48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ff4a:	2002      	movs	r0, #2
  40ff4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ff4e:	2002      	movs	r0, #2
  40ff50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
  40ff52:	2001      	movs	r0, #1
  40ff54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ff56:	2002      	movs	r0, #2
  40ff58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
  40ff5a:	2000      	movs	r0, #0
  40ff5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ff5e:	2002      	movs	r0, #2
  40ff60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40ff62:	2000      	movs	r0, #0
  40ff64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ff66:	2002      	movs	r0, #2
}
  40ff68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ff6a:	bf00      	nop
  40ff6c:	00417a21 	.word	0x00417a21

0040ff70 <lv_draw_mask_line>:
{
  40ff70:	b570      	push	{r4, r5, r6, lr}
  40ff72:	b082      	sub	sp, #8
  40ff74:	9c06      	ldr	r4, [sp, #24]
    abs_y -= p->origo.y;
  40ff76:	8aa5      	ldrh	r5, [r4, #20]
  40ff78:	1b52      	subs	r2, r2, r5
  40ff7a:	b212      	sxth	r2, r2
    abs_x -= p->origo.x;
  40ff7c:	8a65      	ldrh	r5, [r4, #18]
  40ff7e:	1b49      	subs	r1, r1, r5
  40ff80:	b209      	sxth	r1, r1
    if(p->steep == 0) {
  40ff82:	6a26      	ldr	r6, [r4, #32]
  40ff84:	2e00      	cmp	r6, #0
  40ff86:	d146      	bne.n	410016 <lv_draw_mask_line+0xa6>
        if(p->flat) {
  40ff88:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  40ff8c:	f015 0f01 	tst.w	r5, #1
  40ff90:	d015      	beq.n	40ffbe <lv_draw_mask_line+0x4e>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
  40ff92:	7c23      	ldrb	r3, [r4, #16]
  40ff94:	f003 0303 	and.w	r3, r3, #3
  40ff98:	2b01      	cmp	r3, #1
  40ff9a:	d94a      	bls.n	410032 <lv_draw_mask_line+0xc2>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40ff9c:	2b02      	cmp	r3, #2
  40ff9e:	d003      	beq.n	40ffa8 <lv_draw_mask_line+0x38>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40ffa0:	2b03      	cmp	r3, #3
  40ffa2:	d006      	beq.n	40ffb2 <lv_draw_mask_line+0x42>
                return LV_DRAW_MASK_RES_TRANSP;
  40ffa4:	2000      	movs	r0, #0
  40ffa6:	e03e      	b.n	410026 <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40ffa8:	f112 0f01 	cmn.w	r2, #1
  40ffac:	d5f8      	bpl.n	40ffa0 <lv_draw_mask_line+0x30>
  40ffae:	2001      	movs	r0, #1
  40ffb0:	e039      	b.n	410026 <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40ffb2:	2a00      	cmp	r2, #0
  40ffb4:	dd01      	ble.n	40ffba <lv_draw_mask_line+0x4a>
  40ffb6:	2001      	movs	r0, #1
  40ffb8:	e035      	b.n	410026 <lv_draw_mask_line+0xb6>
                return LV_DRAW_MASK_RES_TRANSP;
  40ffba:	2000      	movs	r0, #0
  40ffbc:	e033      	b.n	410026 <lv_draw_mask_line+0xb6>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
  40ffbe:	7c22      	ldrb	r2, [r4, #16]
  40ffc0:	f002 0203 	and.w	r2, r2, #3
  40ffc4:	1e94      	subs	r4, r2, #2
  40ffc6:	b2e4      	uxtb	r4, r4
  40ffc8:	2c01      	cmp	r4, #1
  40ffca:	d934      	bls.n	410036 <lv_draw_mask_line+0xc6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40ffcc:	2a01      	cmp	r2, #1
  40ffce:	d009      	beq.n	40ffe4 <lv_draw_mask_line+0x74>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
  40ffd0:	b992      	cbnz	r2, 40fff8 <lv_draw_mask_line+0x88>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40ffd2:	18ca      	adds	r2, r1, r3
  40ffd4:	d431      	bmi.n	41003a <lv_draw_mask_line+0xca>
                    int32_t k = - abs_x;
  40ffd6:	424d      	negs	r5, r1
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
  40ffd8:	2d00      	cmp	r5, #0
  40ffda:	db30      	blt.n	41003e <lv_draw_mask_line+0xce>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
  40ffdc:	42ab      	cmp	r3, r5
  40ffde:	dc05      	bgt.n	40ffec <lv_draw_mask_line+0x7c>
                    return LV_DRAW_MASK_RES_CHANGED;
  40ffe0:	2002      	movs	r0, #2
  40ffe2:	e020      	b.n	410026 <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40ffe4:	2900      	cmp	r1, #0
  40ffe6:	ddf3      	ble.n	40ffd0 <lv_draw_mask_line+0x60>
  40ffe8:	2001      	movs	r0, #1
  40ffea:	e01c      	b.n	410026 <lv_draw_mask_line+0xb6>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
  40ffec:	4611      	mov	r1, r2
  40ffee:	4428      	add	r0, r5
  40fff0:	4b17      	ldr	r3, [pc, #92]	; (410050 <lv_draw_mask_line+0xe0>)
  40fff2:	4798      	blx	r3
                    return LV_DRAW_MASK_RES_CHANGED;
  40fff4:	2002      	movs	r0, #2
  40fff6:	e016      	b.n	410026 <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
  40fff8:	42d9      	cmn	r1, r3
  40fffa:	d422      	bmi.n	410042 <lv_draw_mask_line+0xd2>
                    int32_t k = - abs_x;
  40fffc:	4249      	negs	r1, r1
                    if(k < 0) k = 0;
  40fffe:	2900      	cmp	r1, #0
  410000:	db07      	blt.n	410012 <lv_draw_mask_line+0xa2>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
  410002:	4299      	cmp	r1, r3
  410004:	da1f      	bge.n	410046 <lv_draw_mask_line+0xd6>
                    else if(k >= 0 && k < len) _lv_memset_00(&mask_buf[0], k);
  410006:	2900      	cmp	r1, #0
  410008:	db1f      	blt.n	41004a <lv_draw_mask_line+0xda>
  41000a:	4b11      	ldr	r3, [pc, #68]	; (410050 <lv_draw_mask_line+0xe0>)
  41000c:	4798      	blx	r3
                    return LV_DRAW_MASK_RES_CHANGED;
  41000e:	2002      	movs	r0, #2
  410010:	e009      	b.n	410026 <lv_draw_mask_line+0xb6>
                    if(k < 0) k = 0;
  410012:	4631      	mov	r1, r6
  410014:	e7f5      	b.n	410002 <lv_draw_mask_line+0x92>
    if(p->flat) {
  410016:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  41001a:	f015 0f01 	tst.w	r5, #1
  41001e:	d104      	bne.n	41002a <lv_draw_mask_line+0xba>
        res = line_mask_steep(mask_buf, abs_x, abs_y, len, p);
  410020:	9400      	str	r4, [sp, #0]
  410022:	4c0c      	ldr	r4, [pc, #48]	; (410054 <lv_draw_mask_line+0xe4>)
  410024:	47a0      	blx	r4
}
  410026:	b002      	add	sp, #8
  410028:	bd70      	pop	{r4, r5, r6, pc}
        res = line_mask_flat(mask_buf, abs_x, abs_y, len, p);
  41002a:	9400      	str	r4, [sp, #0]
  41002c:	4c0a      	ldr	r4, [pc, #40]	; (410058 <lv_draw_mask_line+0xe8>)
  41002e:	47a0      	blx	r4
  410030:	e7f9      	b.n	410026 <lv_draw_mask_line+0xb6>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  410032:	2001      	movs	r0, #1
  410034:	e7f7      	b.n	410026 <lv_draw_mask_line+0xb6>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
  410036:	2001      	movs	r0, #1
  410038:	e7f5      	b.n	410026 <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  41003a:	2001      	movs	r0, #1
  41003c:	e7f3      	b.n	410026 <lv_draw_mask_line+0xb6>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
  41003e:	2000      	movs	r0, #0
  410040:	e7f1      	b.n	410026 <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
  410042:	2000      	movs	r0, #0
  410044:	e7ef      	b.n	410026 <lv_draw_mask_line+0xb6>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
  410046:	2000      	movs	r0, #0
  410048:	e7ed      	b.n	410026 <lv_draw_mask_line+0xb6>
                    return LV_DRAW_MASK_RES_CHANGED;
  41004a:	2002      	movs	r0, #2
  41004c:	e7eb      	b.n	410026 <lv_draw_mask_line+0xb6>
  41004e:	bf00      	nop
  410050:	00417a21 	.word	0x00417a21
  410054:	0040fc69 	.word	0x0040fc69
  410058:	0040fa65 	.word	0x0040fa65

0041005c <lv_draw_mask_angle>:
{
  41005c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  410060:	b082      	sub	sp, #8
  410062:	4680      	mov	r8, r0
  410064:	460e      	mov	r6, r1
  410066:	4615      	mov	r5, r2
  410068:	461f      	mov	r7, r3
  41006a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
  41006c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
  410070:	eba5 0e02 	sub.w	lr, r5, r2
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
  410074:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  410078:	1ac9      	subs	r1, r1, r3
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
  41007a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41007e:	2bb3      	cmp	r3, #179	; 0xb3
  410080:	f300 80a2 	bgt.w	4101c8 <lv_draw_mask_angle+0x16c>
  410084:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
  410088:	28b3      	cmp	r0, #179	; 0xb3
  41008a:	f300 809d 	bgt.w	4101c8 <lv_draw_mask_angle+0x16c>
  41008e:	2b00      	cmp	r3, #0
  410090:	f000 809a 	beq.w	4101c8 <lv_draw_mask_angle+0x16c>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
  410094:	2800      	cmp	r0, #0
  410096:	f000 8097 	beq.w	4101c8 <lv_draw_mask_angle+0x16c>
  41009a:	4283      	cmp	r3, r0
  41009c:	f340 8094 	ble.w	4101c8 <lv_draw_mask_angle+0x16c>
        if(abs_y < p->cfg.vertex_p.y) {
  4100a0:	4295      	cmp	r5, r2
  4100a2:	f2c0 819f 	blt.w	4103e4 <lv_draw_mask_angle+0x388>
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
  4100a6:	6d62      	ldr	r2, [r4, #84]	; 0x54
  4100a8:	fb02 f20e 	mul.w	r2, r2, lr
  4100ac:	1292      	asrs	r2, r2, #10
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
  4100ae:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  4100b2:	fb0e ce0c 	mla	lr, lr, ip, ip
  4100b6:	ea4f 2eae 	mov.w	lr, lr, asr #10
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
  4100ba:	b29b      	uxth	r3, r3
  4100bc:	f2a3 1c0f 	subw	ip, r3, #271	; 0x10f
  4100c0:	fa1f fc8c 	uxth.w	ip, ip
  4100c4:	f1bc 0f58 	cmp.w	ip, #88	; 0x58
  4100c8:	d802      	bhi.n	4100d0 <lv_draw_mask_angle+0x74>
  4100ca:	f1be 0f00 	cmp.w	lr, #0
  4100ce:	db49      	blt.n	410164 <lv_draw_mask_angle+0x108>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
  4100d0:	f103 3cff 	add.w	ip, r3, #4294967295
  4100d4:	fa1f fc8c 	uxth.w	ip, ip
  4100d8:	f1bc 0f59 	cmp.w	ip, #89	; 0x59
  4100dc:	d802      	bhi.n	4100e4 <lv_draw_mask_angle+0x88>
  4100de:	f1be 0f00 	cmp.w	lr, #0
  4100e2:	db42      	blt.n	41016a <lv_draw_mask_angle+0x10e>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
  4100e4:	3b5b      	subs	r3, #91	; 0x5b
  4100e6:	b29b      	uxth	r3, r3
  4100e8:	2bb2      	cmp	r3, #178	; 0xb2
  4100ea:	d804      	bhi.n	4100f6 <lv_draw_mask_angle+0x9a>
  4100ec:	f1be 0f00 	cmp.w	lr, #0
  4100f0:	dd01      	ble.n	4100f6 <lv_draw_mask_angle+0x9a>
  4100f2:	f04f 0e00 	mov.w	lr, #0
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
  4100f6:	b280      	uxth	r0, r0
  4100f8:	f2a0 130f 	subw	r3, r0, #271	; 0x10f
  4100fc:	b29b      	uxth	r3, r3
  4100fe:	2b58      	cmp	r3, #88	; 0x58
  410100:	d802      	bhi.n	410108 <lv_draw_mask_angle+0xac>
  410102:	f1be 0f00 	cmp.w	lr, #0
  410106:	db33      	blt.n	410170 <lv_draw_mask_angle+0x114>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
  410108:	1e43      	subs	r3, r0, #1
  41010a:	b29b      	uxth	r3, r3
  41010c:	2b59      	cmp	r3, #89	; 0x59
  41010e:	d802      	bhi.n	410116 <lv_draw_mask_angle+0xba>
  410110:	f1be 0f00 	cmp.w	lr, #0
  410114:	db2f      	blt.n	410176 <lv_draw_mask_angle+0x11a>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
  410116:	385b      	subs	r0, #91	; 0x5b
  410118:	b283      	uxth	r3, r0
  41011a:	2bb2      	cmp	r3, #178	; 0xb2
  41011c:	d804      	bhi.n	410128 <lv_draw_mask_angle+0xcc>
  41011e:	f1be 0f00 	cmp.w	lr, #0
  410122:	dd01      	ble.n	410128 <lv_draw_mask_angle+0xcc>
  410124:	f04f 0e00 	mov.w	lr, #0
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
  410128:	eba2 020e 	sub.w	r2, r2, lr
        int32_t tmp = start_angle_last + dist - rel_x;
  41012c:	eb0e 0e62 	add.w	lr, lr, r2, asr #1
  410130:	ebae 0a01 	sub.w	sl, lr, r1
        if(tmp > len) tmp = len;
  410134:	45ba      	cmp	sl, r7
  410136:	dd00      	ble.n	41013a <lv_draw_mask_angle+0xde>
  410138:	46ba      	mov	sl, r7
        if(tmp > 0) {
  41013a:	f1ba 0f00 	cmp.w	sl, #0
  41013e:	dd1d      	ble.n	41017c <lv_draw_mask_angle+0x120>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, &p->start_line);
  410140:	f104 0310 	add.w	r3, r4, #16
  410144:	9300      	str	r3, [sp, #0]
  410146:	fa0f f38a 	sxth.w	r3, sl
  41014a:	462a      	mov	r2, r5
  41014c:	4631      	mov	r1, r6
  41014e:	4640      	mov	r0, r8
  410150:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 410408 <lv_draw_mask_angle+0x3ac>
  410154:	47c8      	blx	r9
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
  410156:	4681      	mov	r9, r0
  410158:	b990      	cbnz	r0, 410180 <lv_draw_mask_angle+0x124>
                _lv_memset_00(&mask_buf[0], tmp);
  41015a:	4651      	mov	r1, sl
  41015c:	4640      	mov	r0, r8
  41015e:	4ba9      	ldr	r3, [pc, #676]	; (410404 <lv_draw_mask_angle+0x3a8>)
  410160:	4798      	blx	r3
  410162:	e00d      	b.n	410180 <lv_draw_mask_angle+0x124>
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
  410164:	f04f 0e00 	mov.w	lr, #0
  410168:	e7c5      	b.n	4100f6 <lv_draw_mask_angle+0x9a>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
  41016a:	f04f 0e00 	mov.w	lr, #0
  41016e:	e7c2      	b.n	4100f6 <lv_draw_mask_angle+0x9a>
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
  410170:	f04f 0e00 	mov.w	lr, #0
  410174:	e7d8      	b.n	410128 <lv_draw_mask_angle+0xcc>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
  410176:	f04f 0e00 	mov.w	lr, #0
  41017a:	e7d5      	b.n	410128 <lv_draw_mask_angle+0xcc>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
  41017c:	f04f 0901 	mov.w	r9, #1
        if(tmp > len) tmp = len;
  410180:	45ba      	cmp	sl, r7
  410182:	dd00      	ble.n	410186 <lv_draw_mask_angle+0x12a>
  410184:	46ba      	mov	sl, r7
        if(tmp < 0) tmp = 0;
  410186:	f1ba 0f00 	cmp.w	sl, #0
  41018a:	db14      	blt.n	4101b6 <lv_draw_mask_angle+0x15a>
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
  41018c:	44d0      	add	r8, sl
  41018e:	fa1f f38a 	uxth.w	r3, sl
  410192:	1999      	adds	r1, r3, r6
  410194:	1afb      	subs	r3, r7, r3
  410196:	343c      	adds	r4, #60	; 0x3c
  410198:	9400      	str	r4, [sp, #0]
  41019a:	b21b      	sxth	r3, r3
  41019c:	462a      	mov	r2, r5
  41019e:	b209      	sxth	r1, r1
  4101a0:	4640      	mov	r0, r8
  4101a2:	4c99      	ldr	r4, [pc, #612]	; (410408 <lv_draw_mask_angle+0x3ac>)
  4101a4:	47a0      	blx	r4
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
  4101a6:	4604      	mov	r4, r0
  4101a8:	b140      	cbz	r0, 4101bc <lv_draw_mask_angle+0x160>
        if(res1 == res2) return res1;
  4101aa:	45a1      	cmp	r9, r4
  4101ac:	f000 8122 	beq.w	4103f4 <lv_draw_mask_angle+0x398>
        else return LV_DRAW_MASK_RES_CHANGED;
  4101b0:	f04f 0902 	mov.w	r9, #2
  4101b4:	e11e      	b.n	4103f4 <lv_draw_mask_angle+0x398>
        if(tmp < 0) tmp = 0;
  4101b6:	f04f 0a00 	mov.w	sl, #0
  4101ba:	e7e7      	b.n	41018c <lv_draw_mask_angle+0x130>
            _lv_memset_00(&mask_buf[tmp], len - tmp);
  4101bc:	eba7 010a 	sub.w	r1, r7, sl
  4101c0:	4640      	mov	r0, r8
  4101c2:	4b90      	ldr	r3, [pc, #576]	; (410404 <lv_draw_mask_angle+0x3a8>)
  4101c4:	4798      	blx	r3
  4101c6:	e7f0      	b.n	4101aa <lv_draw_mask_angle+0x14e>
    else if(p->cfg.start_angle > 180 && p->cfg.end_angle > 180 && p->cfg.start_angle > p->cfg.end_angle) {
  4101c8:	2bb4      	cmp	r3, #180	; 0xb4
  4101ca:	f340 809c 	ble.w	410306 <lv_draw_mask_angle+0x2aa>
  4101ce:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
  4101d2:	28b4      	cmp	r0, #180	; 0xb4
  4101d4:	f340 8097 	ble.w	410306 <lv_draw_mask_angle+0x2aa>
  4101d8:	4283      	cmp	r3, r0
  4101da:	f340 8094 	ble.w	410306 <lv_draw_mask_angle+0x2aa>
        if(abs_y > p->cfg.vertex_p.y) {
  4101de:	4295      	cmp	r5, r2
  4101e0:	f300 8103 	bgt.w	4103ea <lv_draw_mask_angle+0x38e>
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
  4101e4:	6d62      	ldr	r2, [r4, #84]	; 0x54
  4101e6:	fb02 f20e 	mul.w	r2, r2, lr
  4101ea:	1292      	asrs	r2, r2, #10
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
  4101ec:	f8d4 a028 	ldr.w	sl, [r4, #40]	; 0x28
  4101f0:	fb0e aa0a 	mla	sl, lr, sl, sl
  4101f4:	ea4f 2aaa 	mov.w	sl, sl, asr #10
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
  4101f8:	b29b      	uxth	r3, r3
  4101fa:	f2a3 1e0f 	subw	lr, r3, #271	; 0x10f
  4101fe:	fa1f fe8e 	uxth.w	lr, lr
  410202:	f1be 0f58 	cmp.w	lr, #88	; 0x58
  410206:	d802      	bhi.n	41020e <lv_draw_mask_angle+0x1b2>
  410208:	f1ba 0f00 	cmp.w	sl, #0
  41020c:	db49      	blt.n	4102a2 <lv_draw_mask_angle+0x246>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
  41020e:	f103 3eff 	add.w	lr, r3, #4294967295
  410212:	fa1f fe8e 	uxth.w	lr, lr
  410216:	f1be 0f59 	cmp.w	lr, #89	; 0x59
  41021a:	d802      	bhi.n	410222 <lv_draw_mask_angle+0x1c6>
  41021c:	f1ba 0f00 	cmp.w	sl, #0
  410220:	db42      	blt.n	4102a8 <lv_draw_mask_angle+0x24c>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
  410222:	3b5b      	subs	r3, #91	; 0x5b
  410224:	b29b      	uxth	r3, r3
  410226:	2bb2      	cmp	r3, #178	; 0xb2
  410228:	d804      	bhi.n	410234 <lv_draw_mask_angle+0x1d8>
  41022a:	f1ba 0f00 	cmp.w	sl, #0
  41022e:	dd01      	ble.n	410234 <lv_draw_mask_angle+0x1d8>
  410230:	f04f 0a00 	mov.w	sl, #0
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
  410234:	b280      	uxth	r0, r0
  410236:	f2a0 130f 	subw	r3, r0, #271	; 0x10f
  41023a:	b29b      	uxth	r3, r3
  41023c:	2b58      	cmp	r3, #88	; 0x58
  41023e:	d802      	bhi.n	410246 <lv_draw_mask_angle+0x1ea>
  410240:	f1ba 0f00 	cmp.w	sl, #0
  410244:	db33      	blt.n	4102ae <lv_draw_mask_angle+0x252>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
  410246:	1e43      	subs	r3, r0, #1
  410248:	b29b      	uxth	r3, r3
  41024a:	2b59      	cmp	r3, #89	; 0x59
  41024c:	d802      	bhi.n	410254 <lv_draw_mask_angle+0x1f8>
  41024e:	f1ba 0f00 	cmp.w	sl, #0
  410252:	db2f      	blt.n	4102b4 <lv_draw_mask_angle+0x258>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
  410254:	385b      	subs	r0, #91	; 0x5b
  410256:	b280      	uxth	r0, r0
  410258:	28b2      	cmp	r0, #178	; 0xb2
  41025a:	d804      	bhi.n	410266 <lv_draw_mask_angle+0x20a>
  41025c:	f1ba 0f00 	cmp.w	sl, #0
  410260:	dd01      	ble.n	410266 <lv_draw_mask_angle+0x20a>
  410262:	f04f 0a00 	mov.w	sl, #0
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
  410266:	eba2 020a 	sub.w	r2, r2, sl
        int32_t tmp = start_angle_last + dist - rel_x;
  41026a:	eb0a 0a62 	add.w	sl, sl, r2, asr #1
  41026e:	ebaa 0a01 	sub.w	sl, sl, r1
        if(tmp > len) tmp = len;
  410272:	45ba      	cmp	sl, r7
  410274:	dd00      	ble.n	410278 <lv_draw_mask_angle+0x21c>
  410276:	46ba      	mov	sl, r7
        if(tmp > 0) {
  410278:	f1ba 0f00 	cmp.w	sl, #0
  41027c:	dd1d      	ble.n	4102ba <lv_draw_mask_angle+0x25e>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, (lv_draw_mask_line_param_t *)&p->end_line);
  41027e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
  410282:	9300      	str	r3, [sp, #0]
  410284:	fa0f f38a 	sxth.w	r3, sl
  410288:	462a      	mov	r2, r5
  41028a:	4631      	mov	r1, r6
  41028c:	4640      	mov	r0, r8
  41028e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 410408 <lv_draw_mask_angle+0x3ac>
  410292:	47c8      	blx	r9
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
  410294:	4681      	mov	r9, r0
  410296:	b990      	cbnz	r0, 4102be <lv_draw_mask_angle+0x262>
                _lv_memset_00(&mask_buf[0], tmp);
  410298:	4651      	mov	r1, sl
  41029a:	4640      	mov	r0, r8
  41029c:	4b59      	ldr	r3, [pc, #356]	; (410404 <lv_draw_mask_angle+0x3a8>)
  41029e:	4798      	blx	r3
  4102a0:	e00d      	b.n	4102be <lv_draw_mask_angle+0x262>
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
  4102a2:	f04f 0a00 	mov.w	sl, #0
  4102a6:	e7c5      	b.n	410234 <lv_draw_mask_angle+0x1d8>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
  4102a8:	f04f 0a00 	mov.w	sl, #0
  4102ac:	e7c2      	b.n	410234 <lv_draw_mask_angle+0x1d8>
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
  4102ae:	f04f 0a00 	mov.w	sl, #0
  4102b2:	e7d8      	b.n	410266 <lv_draw_mask_angle+0x20a>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
  4102b4:	f04f 0a00 	mov.w	sl, #0
  4102b8:	e7d5      	b.n	410266 <lv_draw_mask_angle+0x20a>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
  4102ba:	f04f 0901 	mov.w	r9, #1
        if(tmp > len) tmp = len;
  4102be:	45ba      	cmp	sl, r7
  4102c0:	dd00      	ble.n	4102c4 <lv_draw_mask_angle+0x268>
  4102c2:	46ba      	mov	sl, r7
        if(tmp < 0) tmp = 0;
  4102c4:	f1ba 0f00 	cmp.w	sl, #0
  4102c8:	db14      	blt.n	4102f4 <lv_draw_mask_angle+0x298>
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
  4102ca:	44d0      	add	r8, sl
  4102cc:	fa1f f38a 	uxth.w	r3, sl
  4102d0:	1999      	adds	r1, r3, r6
  4102d2:	1afb      	subs	r3, r7, r3
  4102d4:	3410      	adds	r4, #16
  4102d6:	9400      	str	r4, [sp, #0]
  4102d8:	b21b      	sxth	r3, r3
  4102da:	462a      	mov	r2, r5
  4102dc:	b209      	sxth	r1, r1
  4102de:	4640      	mov	r0, r8
  4102e0:	4c49      	ldr	r4, [pc, #292]	; (410408 <lv_draw_mask_angle+0x3ac>)
  4102e2:	47a0      	blx	r4
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
  4102e4:	4604      	mov	r4, r0
  4102e6:	b140      	cbz	r0, 4102fa <lv_draw_mask_angle+0x29e>
        if(res1 == res2) return res1;
  4102e8:	45a1      	cmp	r9, r4
  4102ea:	f000 8083 	beq.w	4103f4 <lv_draw_mask_angle+0x398>
        else return LV_DRAW_MASK_RES_CHANGED;
  4102ee:	f04f 0902 	mov.w	r9, #2
  4102f2:	e07f      	b.n	4103f4 <lv_draw_mask_angle+0x398>
        if(tmp < 0) tmp = 0;
  4102f4:	f04f 0a00 	mov.w	sl, #0
  4102f8:	e7e7      	b.n	4102ca <lv_draw_mask_angle+0x26e>
            _lv_memset_00(&mask_buf[tmp], len - tmp);
  4102fa:	eba7 010a 	sub.w	r1, r7, sl
  4102fe:	4640      	mov	r0, r8
  410300:	4b40      	ldr	r3, [pc, #256]	; (410404 <lv_draw_mask_angle+0x3a8>)
  410302:	4798      	blx	r3
  410304:	e7f0      	b.n	4102e8 <lv_draw_mask_angle+0x28c>
        if(p->cfg.start_angle == 180) {
  410306:	2bb4      	cmp	r3, #180	; 0xb4
  410308:	d021      	beq.n	41034e <lv_draw_mask_angle+0x2f2>
        else if(p->cfg.start_angle == 0) {
  41030a:	bb2b      	cbnz	r3, 410358 <lv_draw_mask_angle+0x2fc>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_UNKNOWN;
  41030c:	4295      	cmp	r5, r2
  41030e:	da3a      	bge.n	410386 <lv_draw_mask_angle+0x32a>
  410310:	f04f 0903 	mov.w	r9, #3
        if(p->cfg.end_angle == 180) {
  410314:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  410318:	2bb4      	cmp	r3, #180	; 0xb4
  41031a:	d03d      	beq.n	410398 <lv_draw_mask_angle+0x33c>
        else if(p->cfg.end_angle == 0) {
  41031c:	2b00      	cmp	r3, #0
  41031e:	d141      	bne.n	4103a4 <lv_draw_mask_angle+0x348>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
  410320:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  410324:	429d      	cmp	r5, r3
  410326:	da54      	bge.n	4103d2 <lv_draw_mask_angle+0x376>
  410328:	2001      	movs	r0, #1
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
  41032a:	2800      	cmp	r0, #0
  41032c:	bf18      	it	ne
  41032e:	f1b9 0f00 	cmpne.w	r9, #0
  410332:	d05d      	beq.n	4103f0 <lv_draw_mask_angle+0x394>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
  410334:	f1b9 0f03 	cmp.w	r9, #3
  410338:	bf08      	it	eq
  41033a:	2803      	cmpeq	r0, #3
  41033c:	d05e      	beq.n	4103fc <lv_draw_mask_angle+0x3a0>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
  41033e:	f1b9 0f01 	cmp.w	r9, #1
  410342:	bf08      	it	eq
  410344:	2801      	cmpeq	r0, #1
  410346:	d04a      	beq.n	4103de <lv_draw_mask_angle+0x382>
        else return LV_DRAW_MASK_RES_CHANGED;
  410348:	f04f 0902 	mov.w	r9, #2
  41034c:	e052      	b.n	4103f4 <lv_draw_mask_angle+0x398>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_FULL_COVER;
  41034e:	4295      	cmp	r5, r2
  410350:	da16      	bge.n	410380 <lv_draw_mask_angle+0x324>
  410352:	f04f 0901 	mov.w	r9, #1
  410356:	e7dd      	b.n	410314 <lv_draw_mask_angle+0x2b8>
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
  410358:	2bb3      	cmp	r3, #179	; 0xb3
  41035a:	dc01      	bgt.n	410360 <lv_draw_mask_angle+0x304>
  41035c:	4295      	cmp	r5, r2
  41035e:	db15      	blt.n	41038c <lv_draw_mask_angle+0x330>
  410360:	2bb4      	cmp	r3, #180	; 0xb4
  410362:	dd01      	ble.n	410368 <lv_draw_mask_angle+0x30c>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
  410364:	4295      	cmp	r5, r2
  410366:	da14      	bge.n	410392 <lv_draw_mask_angle+0x336>
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
  410368:	f104 0310 	add.w	r3, r4, #16
  41036c:	9300      	str	r3, [sp, #0]
  41036e:	463b      	mov	r3, r7
  410370:	462a      	mov	r2, r5
  410372:	4631      	mov	r1, r6
  410374:	4640      	mov	r0, r8
  410376:	f8df 9090 	ldr.w	r9, [pc, #144]	; 410408 <lv_draw_mask_angle+0x3ac>
  41037a:	47c8      	blx	r9
  41037c:	4681      	mov	r9, r0
  41037e:	e7c9      	b.n	410314 <lv_draw_mask_angle+0x2b8>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
  410380:	f04f 0903 	mov.w	r9, #3
  410384:	e7c6      	b.n	410314 <lv_draw_mask_angle+0x2b8>
            else res1 = LV_DRAW_MASK_RES_FULL_COVER;
  410386:	f04f 0901 	mov.w	r9, #1
  41038a:	e7c3      	b.n	410314 <lv_draw_mask_angle+0x2b8>
            res1 = LV_DRAW_MASK_RES_UNKNOWN;
  41038c:	f04f 0903 	mov.w	r9, #3
  410390:	e7c0      	b.n	410314 <lv_draw_mask_angle+0x2b8>
  410392:	f04f 0903 	mov.w	r9, #3
  410396:	e7bd      	b.n	410314 <lv_draw_mask_angle+0x2b8>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_UNKNOWN;
  410398:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  41039c:	429d      	cmp	r5, r3
  41039e:	da16      	bge.n	4103ce <lv_draw_mask_angle+0x372>
  4103a0:	2003      	movs	r0, #3
  4103a2:	e7c2      	b.n	41032a <lv_draw_mask_angle+0x2ce>
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
  4103a4:	2bb3      	cmp	r3, #179	; 0xb3
  4103a6:	dc03      	bgt.n	4103b0 <lv_draw_mask_angle+0x354>
  4103a8:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
  4103ac:	4295      	cmp	r5, r2
  4103ae:	db12      	blt.n	4103d6 <lv_draw_mask_angle+0x37a>
  4103b0:	2bb4      	cmp	r3, #180	; 0xb4
  4103b2:	dd03      	ble.n	4103bc <lv_draw_mask_angle+0x360>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
  4103b4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  4103b8:	429d      	cmp	r5, r3
  4103ba:	da0e      	bge.n	4103da <lv_draw_mask_angle+0x37e>
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
  4103bc:	343c      	adds	r4, #60	; 0x3c
  4103be:	9400      	str	r4, [sp, #0]
  4103c0:	463b      	mov	r3, r7
  4103c2:	462a      	mov	r2, r5
  4103c4:	4631      	mov	r1, r6
  4103c6:	4640      	mov	r0, r8
  4103c8:	4c0f      	ldr	r4, [pc, #60]	; (410408 <lv_draw_mask_angle+0x3ac>)
  4103ca:	47a0      	blx	r4
  4103cc:	e7ad      	b.n	41032a <lv_draw_mask_angle+0x2ce>
            else res2 = LV_DRAW_MASK_RES_FULL_COVER;
  4103ce:	2001      	movs	r0, #1
  4103d0:	e7ab      	b.n	41032a <lv_draw_mask_angle+0x2ce>
            else res2 = LV_DRAW_MASK_RES_UNKNOWN;
  4103d2:	2003      	movs	r0, #3
  4103d4:	e7a9      	b.n	41032a <lv_draw_mask_angle+0x2ce>
            res2 = LV_DRAW_MASK_RES_UNKNOWN;
  4103d6:	2003      	movs	r0, #3
  4103d8:	e7a7      	b.n	41032a <lv_draw_mask_angle+0x2ce>
  4103da:	2003      	movs	r0, #3
  4103dc:	e7a5      	b.n	41032a <lv_draw_mask_angle+0x2ce>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
  4103de:	f04f 0901 	mov.w	r9, #1
  4103e2:	e007      	b.n	4103f4 <lv_draw_mask_angle+0x398>
            return LV_DRAW_MASK_RES_FULL_COVER;
  4103e4:	f04f 0901 	mov.w	r9, #1
  4103e8:	e004      	b.n	4103f4 <lv_draw_mask_angle+0x398>
            return LV_DRAW_MASK_RES_FULL_COVER;
  4103ea:	f04f 0901 	mov.w	r9, #1
  4103ee:	e001      	b.n	4103f4 <lv_draw_mask_angle+0x398>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
  4103f0:	f04f 0900 	mov.w	r9, #0
}
  4103f4:	4648      	mov	r0, r9
  4103f6:	b002      	add	sp, #8
  4103f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
  4103fc:	f04f 0900 	mov.w	r9, #0
  410400:	e7f8      	b.n	4103f4 <lv_draw_mask_angle+0x398>
  410402:	bf00      	nop
  410404:	00417a21 	.word	0x00417a21
  410408:	0040ff71 	.word	0x0040ff71

0041040c <lv_draw_mask_radius>:
{
  41040c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410410:	b08b      	sub	sp, #44	; 0x2c
  410412:	9e14      	ldr	r6, [sp, #80]	; 0x50
    bool outer = p->cfg.outer;
  410414:	7cb5      	ldrb	r5, [r6, #18]
  410416:	f005 0501 	and.w	r5, r5, #1
    int32_t radius = p->cfg.radius;
  41041a:	f9b6 9010 	ldrsh.w	r9, [r6, #16]
    lv_area_copy(&rect, &p->cfg.rect);
  41041e:	f106 0c08 	add.w	ip, r6, #8
    uint8_t * d8 = (uint8_t *)dst;
  410422:	f10d 0e20 	add.w	lr, sp, #32
  410426:	2408      	movs	r4, #8
  410428:	e004      	b.n	410434 <lv_draw_mask_radius+0x28>
        *d8 = *s8;
  41042a:	f81c 7b01 	ldrb.w	r7, [ip], #1
  41042e:	f80e 7b01 	strb.w	r7, [lr], #1
        len--;
  410432:	3c01      	subs	r4, #1
    while(len) {
  410434:	2c00      	cmp	r4, #0
  410436:	d1f8      	bne.n	41042a <lv_draw_mask_radius+0x1e>
    if(outer == false) {
  410438:	2d00      	cmp	r5, #0
  41043a:	d13f      	bne.n	4104bc <lv_draw_mask_radius+0xb0>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
  41043c:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  410440:	4294      	cmp	r4, r2
  410442:	f300 829d 	bgt.w	410980 <lv_draw_mask_radius+0x574>
  410446:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
  41044a:	42a2      	cmp	r2, r4
  41044c:	f300 829c 	bgt.w	410988 <lv_draw_mask_radius+0x57c>
  410450:	461f      	mov	r7, r3
  410452:	468b      	mov	fp, r1
  410454:	4680      	mov	r8, r0
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
  410456:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
  41045a:	eb09 0103 	add.w	r1, r9, r3
  41045e:	458b      	cmp	fp, r1
  410460:	db07      	blt.n	410472 <lv_draw_mask_radius+0x66>
  410462:	eb07 000b 	add.w	r0, r7, fp
  410466:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  41046a:	eba1 0109 	sub.w	r1, r1, r9
  41046e:	4288      	cmp	r0, r1
  410470:	dd0b      	ble.n	41048a <lv_draw_mask_radius+0x7e>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
  410472:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
  410476:	eb09 0001 	add.w	r0, r9, r1
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
  41047a:	4282      	cmp	r2, r0
  41047c:	db50      	blt.n	410520 <lv_draw_mask_radius+0x114>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
  41047e:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	; 0x26
  410482:	eba0 0009 	sub.w	r0, r0, r9
  410486:	4282      	cmp	r2, r0
  410488:	dc4a      	bgt.n	410520 <lv_draw_mask_radius+0x114>
        if(outer == false) {
  41048a:	bb6d      	cbnz	r5, 4104e8 <lv_draw_mask_radius+0xdc>
            int32_t last =  rect.x1 - abs_x;
  41048c:	eba3 050b 	sub.w	r5, r3, fp
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
  410490:	42bd      	cmp	r5, r7
  410492:	f300 827d 	bgt.w	410990 <lv_draw_mask_radius+0x584>
            if(last >= 0) {
  410496:	2d00      	cmp	r5, #0
  410498:	db03      	blt.n	4104a2 <lv_draw_mask_radius+0x96>
                _lv_memset_00(&mask_buf[0], last);
  41049a:	4629      	mov	r1, r5
  41049c:	4640      	mov	r0, r8
  41049e:	4ba7      	ldr	r3, [pc, #668]	; (41073c <lv_draw_mask_radius+0x330>)
  4104a0:	4798      	blx	r3
            int32_t first = rect.x2 - abs_x + 1;
  4104a2:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
  4104a6:	eba3 040b 	sub.w	r4, r3, fp
  4104aa:	3401      	adds	r4, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
  4104ac:	2c00      	cmp	r4, #0
  4104ae:	f340 8271 	ble.w	410994 <lv_draw_mask_radius+0x588>
            else if(first < len) {
  4104b2:	42a7      	cmp	r7, r4
  4104b4:	dc0d      	bgt.n	4104d2 <lv_draw_mask_radius+0xc6>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  4104b6:	b195      	cbz	r5, 4104de <lv_draw_mask_radius+0xd2>
            else return LV_DRAW_MASK_RES_CHANGED;
  4104b8:	2002      	movs	r0, #2
  4104ba:	e262      	b.n	410982 <lv_draw_mask_radius+0x576>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
  4104bc:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  4104c0:	42a2      	cmp	r2, r4
  4104c2:	f2c0 8263 	blt.w	41098c <lv_draw_mask_radius+0x580>
  4104c6:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
  4104ca:	42a2      	cmp	r2, r4
  4104cc:	ddc0      	ble.n	410450 <lv_draw_mask_radius+0x44>
            return LV_DRAW_MASK_RES_FULL_COVER;
  4104ce:	2001      	movs	r0, #1
  4104d0:	e257      	b.n	410982 <lv_draw_mask_radius+0x576>
                _lv_memset_00(&mask_buf[first], len - first);
  4104d2:	1b39      	subs	r1, r7, r4
  4104d4:	eb08 0004 	add.w	r0, r8, r4
  4104d8:	4b98      	ldr	r3, [pc, #608]	; (41073c <lv_draw_mask_radius+0x330>)
  4104da:	4798      	blx	r3
  4104dc:	e7eb      	b.n	4104b6 <lv_draw_mask_radius+0xaa>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  4104de:	42a7      	cmp	r7, r4
  4104e0:	f000 825a 	beq.w	410998 <lv_draw_mask_radius+0x58c>
            else return LV_DRAW_MASK_RES_CHANGED;
  4104e4:	2002      	movs	r0, #2
  4104e6:	e24c      	b.n	410982 <lv_draw_mask_radius+0x576>
            if(first < 0) first = 0;
  4104e8:	ebb3 030b 	subs.w	r3, r3, fp
  4104ec:	d403      	bmi.n	4104f6 <lv_draw_mask_radius+0xea>
            if(first <= len) {
  4104ee:	42bb      	cmp	r3, r7
  4104f0:	dd03      	ble.n	4104fa <lv_draw_mask_radius+0xee>
        return LV_DRAW_MASK_RES_CHANGED;
  4104f2:	2002      	movs	r0, #2
  4104f4:	e245      	b.n	410982 <lv_draw_mask_radius+0x576>
            if(first < 0) first = 0;
  4104f6:	2300      	movs	r3, #0
  4104f8:	e7f9      	b.n	4104ee <lv_draw_mask_radius+0xe2>
                int32_t last =  rect.x2 - abs_x - first + 1;
  4104fa:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  4104fe:	eba1 010b 	sub.w	r1, r1, fp
  410502:	1ac9      	subs	r1, r1, r3
  410504:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
  410506:	185a      	adds	r2, r3, r1
  410508:	4297      	cmp	r7, r2
  41050a:	da00      	bge.n	41050e <lv_draw_mask_radius+0x102>
  41050c:	1af9      	subs	r1, r7, r3
                if(last >= 0) {
  41050e:	2900      	cmp	r1, #0
  410510:	f2c0 8244 	blt.w	41099c <lv_draw_mask_radius+0x590>
                    _lv_memset_00(&mask_buf[first], last);
  410514:	eb08 0003 	add.w	r0, r8, r3
  410518:	4b88      	ldr	r3, [pc, #544]	; (41073c <lv_draw_mask_radius+0x330>)
  41051a:	4798      	blx	r3
        return LV_DRAW_MASK_RES_CHANGED;
  41051c:	2002      	movs	r0, #2
  41051e:	e230      	b.n	410982 <lv_draw_mask_radius+0x576>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
  410520:	eba3 0b0b 	sub.w	fp, r3, fp
  410524:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
  410528:	b29b      	uxth	r3, r3
  41052a:	1ac3      	subs	r3, r0, r3
  41052c:	b29b      	uxth	r3, r3
  41052e:	3301      	adds	r3, #1
  410530:	b21b      	sxth	r3, r3
  410532:	9302      	str	r3, [sp, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410534:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
  410538:	b28c      	uxth	r4, r1
  41053a:	1b1b      	subs	r3, r3, r4
  41053c:	b29b      	uxth	r3, r3
  41053e:	3301      	adds	r3, #1
  410540:	b21b      	sxth	r3, r3
    abs_y -= rect.y1;
  410542:	1b14      	subs	r4, r2, r4
  410544:	b224      	sxth	r4, r4
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
  410546:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
  41054a:	fb0a fa0a 	mul.w	sl, sl, sl
    if(abs_y < radius || abs_y > h - radius - 1) {
  41054e:	45a1      	cmp	r9, r4
  410550:	dc06      	bgt.n	410560 <lv_draw_mask_radius+0x154>
  410552:	eba3 0209 	sub.w	r2, r3, r9
  410556:	3a01      	subs	r2, #1
  410558:	4294      	cmp	r4, r2
  41055a:	dc01      	bgt.n	410560 <lv_draw_mask_radius+0x154>
    return LV_DRAW_MASK_RES_CHANGED;
  41055c:	2002      	movs	r0, #2
  41055e:	e210      	b.n	410982 <lv_draw_mask_radius+0x576>
        if(radius <= 256) sqrt_mask = 0x800;
  410560:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
  410564:	f300 80b1 	bgt.w	4106ca <lv_draw_mask_radius+0x2be>
  410568:	f44f 6200 	mov.w	r2, #2048	; 0x800
  41056c:	9201      	str	r2, [sp, #4]
        if(abs_y < radius) {
  41056e:	45a1      	cmp	r9, r4
  410570:	f340 80b6 	ble.w	4106e0 <lv_draw_mask_radius+0x2d4>
            y = radius - abs_y;
  410574:	eba9 0404 	sub.w	r4, r9, r4
            if(y == p->y_prev) {
  410578:	6973      	ldr	r3, [r6, #20]
  41057a:	429c      	cmp	r4, r3
  41057c:	f000 80a9 	beq.w	4106d2 <lv_draw_mask_radius+0x2c6>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
  410580:	9a01      	ldr	r2, [sp, #4]
  410582:	a904      	add	r1, sp, #16
  410584:	fb04 a014 	mls	r0, r4, r4, sl
  410588:	4b6d      	ldr	r3, [pc, #436]	; (410740 <lv_draw_mask_radius+0x334>)
  41058a:	4798      	blx	r3
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
  41058c:	1e63      	subs	r3, r4, #1
  41058e:	9a01      	ldr	r2, [sp, #4]
  410590:	a905      	add	r1, sp, #20
  410592:	9303      	str	r3, [sp, #12]
  410594:	fb03 a013 	mls	r0, r3, r3, sl
  410598:	4b69      	ldr	r3, [pc, #420]	; (410740 <lv_draw_mask_radius+0x334>)
  41059a:	4798      	blx	r3
            p->y_prev = y - 1;
  41059c:	9b03      	ldr	r3, [sp, #12]
  41059e:	6173      	str	r3, [r6, #20]
            p->y_prev_x.f = x1.f;
  4105a0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4105a4:	8373      	strh	r3, [r6, #26]
            p->y_prev_x.i = x1.i;
  4105a6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  4105aa:	8333      	strh	r3, [r6, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
  4105ac:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  4105b0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  4105b4:	1e51      	subs	r1, r2, #1
  4105b6:	428b      	cmp	r3, r1
  4105b8:	f000 80b4 	beq.w	410724 <lv_draw_mask_radius+0x318>
        if(x0.i == x1.i) {
  4105bc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  4105c0:	4293      	cmp	r3, r2
  4105c2:	f000 80bf 	beq.w	410744 <lv_draw_mask_radius+0x338>
            int32_t ofs = radius - (x0.i + 1);
  4105c6:	3301      	adds	r3, #1
  4105c8:	eba9 0903 	sub.w	r9, r9, r3
            int32_t kl = k + ofs;
  4105cc:	eb0b 0609 	add.w	r6, fp, r9
            int32_t kr = k + (w - ofs - 1);
  4105d0:	9b02      	ldr	r3, [sp, #8]
  4105d2:	eba3 0909 	sub.w	r9, r3, r9
  4105d6:	f109 39ff 	add.w	r9, r9, #4294967295
  4105da:	44d9      	add	r9, fp
            if(outer) {
  4105dc:	b175      	cbz	r5, 4105fc <lv_draw_mask_radius+0x1f0>
                if(first < 0) first = 0;
  4105de:	1c70      	adds	r0, r6, #1
  4105e0:	f100 8116 	bmi.w	410810 <lv_draw_mask_radius+0x404>
                int32_t len_tmp = kr - first;
  4105e4:	eba9 0100 	sub.w	r1, r9, r0
                if(len_tmp + first > len) len_tmp = len - first;
  4105e8:	45b9      	cmp	r9, r7
  4105ea:	dd00      	ble.n	4105ee <lv_draw_mask_radius+0x1e2>
  4105ec:	1a39      	subs	r1, r7, r0
                if(first < len && len_tmp >= 0) {
  4105ee:	42b8      	cmp	r0, r7
  4105f0:	da04      	bge.n	4105fc <lv_draw_mask_radius+0x1f0>
  4105f2:	2900      	cmp	r1, #0
  4105f4:	db02      	blt.n	4105fc <lv_draw_mask_radius+0x1f0>
                    _lv_memset_00(&mask_buf[first], len_tmp);
  4105f6:	4440      	add	r0, r8
  4105f8:	4b50      	ldr	r3, [pc, #320]	; (41073c <lv_draw_mask_radius+0x330>)
  4105fa:	4798      	blx	r3
            uint32_t i = x0.i + 1;
  4105fc:	f8bd 0010 	ldrh.w	r0, [sp, #16]
  410600:	f100 0b01 	add.w	fp, r0, #1
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
  410604:	9a01      	ldr	r2, [sp, #4]
  410606:	a906      	add	r1, sp, #24
  410608:	fb00 a010 	mls	r0, r0, r0, sl
  41060c:	4b4c      	ldr	r3, [pc, #304]	; (410740 <lv_draw_mask_radius+0x334>)
  41060e:	4798      	blx	r3
            if(y_prev.f == 0) {
  410610:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  410614:	b93b      	cbnz	r3, 410626 <lv_draw_mask_radius+0x21a>
                y_prev.i--;
  410616:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  41061a:	3b01      	subs	r3, #1
  41061c:	f8ad 3018 	strh.w	r3, [sp, #24]
                y_prev.f = 0xFF;
  410620:	23ff      	movs	r3, #255	; 0xff
  410622:	f8ad 301a 	strh.w	r3, [sp, #26]
            if(y_prev.i >= y) {
  410626:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  41062a:	429c      	cmp	r4, r3
  41062c:	f300 8103 	bgt.w	410836 <lv_draw_mask_radius+0x42a>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
  410630:	9a01      	ldr	r2, [sp, #4]
  410632:	a907      	add	r1, sp, #28
  410634:	fb0b a01b 	mls	r0, fp, fp, sl
  410638:	4b41      	ldr	r3, [pc, #260]	; (410740 <lv_draw_mask_radius+0x334>)
  41063a:	4798      	blx	r3
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
  41063c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  410640:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
  410644:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  410648:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
  41064c:	fb03 f302 	mul.w	r3, r3, r2
  410650:	f3c3 2347 	ubfx	r3, r3, #9, #8
  410654:	43da      	mvns	r2, r3
  410656:	b2d2      	uxtb	r2, r2
                if(outer) m = 255 - m;
  410658:	b905      	cbnz	r5, 41065c <lv_draw_mask_radius+0x250>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
  41065a:	4613      	mov	r3, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  41065c:	2e00      	cmp	r6, #0
  41065e:	db13      	blt.n	410688 <lv_draw_mask_radius+0x27c>
  410660:	42be      	cmp	r6, r7
  410662:	da11      	bge.n	410688 <lv_draw_mask_radius+0x27c>
  410664:	eb08 0106 	add.w	r1, r8, r6
  410668:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  41066c:	2bfc      	cmp	r3, #252	; 0xfc
  41066e:	d80a      	bhi.n	410686 <lv_draw_mask_radius+0x27a>
    if(mask_new <= LV_OPA_MIN) return 0;
  410670:	2b02      	cmp	r3, #2
  410672:	f240 80cf 	bls.w	410814 <lv_draw_mask_radius+0x408>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  410676:	fb03 f202 	mul.w	r2, r3, r2
  41067a:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  41067e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  410682:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  410686:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  410688:	f1b9 0f00 	cmp.w	r9, #0
  41068c:	db13      	blt.n	4106b6 <lv_draw_mask_radius+0x2aa>
  41068e:	45b9      	cmp	r9, r7
  410690:	da11      	bge.n	4106b6 <lv_draw_mask_radius+0x2aa>
  410692:	eb08 0109 	add.w	r1, r8, r9
  410696:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  41069a:	2bfc      	cmp	r3, #252	; 0xfc
  41069c:	d80a      	bhi.n	4106b4 <lv_draw_mask_radius+0x2a8>
    if(mask_new <= LV_OPA_MIN) return 0;
  41069e:	2b02      	cmp	r3, #2
  4106a0:	f240 80ba 	bls.w	410818 <lv_draw_mask_radius+0x40c>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  4106a4:	fb03 f302 	mul.w	r3, r3, r2
  4106a8:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  4106ac:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  4106b0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  4106b4:	700a      	strb	r2, [r1, #0]
                kl--;
  4106b6:	3e01      	subs	r6, #1
                kr++;
  4106b8:	f109 0901 	add.w	r9, r9, #1
                y_prev.f = y_next.f;
  4106bc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4106c0:	f8ad 301a 	strh.w	r3, [sp, #26]
                i++;
  4106c4:	f10b 0b01 	add.w	fp, fp, #1
  4106c8:	e0b5      	b.n	410836 <lv_draw_mask_radius+0x42a>
        else sqrt_mask = 0x8000;
  4106ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4106ce:	9201      	str	r2, [sp, #4]
  4106d0:	e74d      	b.n	41056e <lv_draw_mask_radius+0x162>
                x0.f = p->y_prev_x.f;
  4106d2:	8b73      	ldrh	r3, [r6, #26]
  4106d4:	f8ad 3012 	strh.w	r3, [sp, #18]
                x0.i = p->y_prev_x.i;
  4106d8:	8b33      	ldrh	r3, [r6, #24]
  4106da:	f8ad 3010 	strh.w	r3, [sp, #16]
  4106de:	e755      	b.n	41058c <lv_draw_mask_radius+0x180>
            y = radius - (h - abs_y) + 1;
  4106e0:	1b1b      	subs	r3, r3, r4
  4106e2:	eba9 0003 	sub.w	r0, r9, r3
  4106e6:	1c44      	adds	r4, r0, #1
            if((y - 1) == p->y_prev) {
  4106e8:	6973      	ldr	r3, [r6, #20]
  4106ea:	4298      	cmp	r0, r3
  4106ec:	d013      	beq.n	410716 <lv_draw_mask_radius+0x30a>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
  4106ee:	9a01      	ldr	r2, [sp, #4]
  4106f0:	a905      	add	r1, sp, #20
  4106f2:	fb00 a010 	mls	r0, r0, r0, sl
  4106f6:	4b12      	ldr	r3, [pc, #72]	; (410740 <lv_draw_mask_radius+0x334>)
  4106f8:	4798      	blx	r3
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
  4106fa:	9a01      	ldr	r2, [sp, #4]
  4106fc:	a904      	add	r1, sp, #16
  4106fe:	fb04 a014 	mls	r0, r4, r4, sl
  410702:	4b0f      	ldr	r3, [pc, #60]	; (410740 <lv_draw_mask_radius+0x334>)
  410704:	4798      	blx	r3
            p->y_prev = y;
  410706:	6174      	str	r4, [r6, #20]
            p->y_prev_x.f = x0.f;
  410708:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  41070c:	8373      	strh	r3, [r6, #26]
            p->y_prev_x.i = x0.i;
  41070e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  410712:	8333      	strh	r3, [r6, #24]
  410714:	e74a      	b.n	4105ac <lv_draw_mask_radius+0x1a0>
                x1.f = p->y_prev_x.f;
  410716:	8b73      	ldrh	r3, [r6, #26]
  410718:	f8ad 3016 	strh.w	r3, [sp, #22]
                x1.i = p->y_prev_x.i;
  41071c:	8b33      	ldrh	r3, [r6, #24]
  41071e:	f8ad 3014 	strh.w	r3, [sp, #20]
  410722:	e7ea      	b.n	4106fa <lv_draw_mask_radius+0x2ee>
        if(x0.i == x1.i - 1 && x1.f == 0) {
  410724:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  410728:	2900      	cmp	r1, #0
  41072a:	f47f af47 	bne.w	4105bc <lv_draw_mask_radius+0x1b0>
            x1.i--;
  41072e:	3a01      	subs	r2, #1
  410730:	f8ad 2014 	strh.w	r2, [sp, #20]
            x1.f = 0xFF;
  410734:	22ff      	movs	r2, #255	; 0xff
  410736:	f8ad 2016 	strh.w	r2, [sp, #22]
  41073a:	e73f      	b.n	4105bc <lv_draw_mask_radius+0x1b0>
  41073c:	00417a21 	.word	0x00417a21
  410740:	004173f9 	.word	0x004173f9
            lv_opa_t m = (x0.f + x1.f) >> 1;
  410744:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  410748:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  41074c:	440a      	add	r2, r1
  41074e:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
  410752:	b10d      	cbz	r5, 410758 <lv_draw_mask_radius+0x34c>
  410754:	43d2      	mvns	r2, r2
  410756:	b2d2      	uxtb	r2, r2
            int32_t ofs = radius - x0.i - 1;
  410758:	eba9 0303 	sub.w	r3, r9, r3
  41075c:	3b01      	subs	r3, #1
            if(kl >= 0 && kl < len) {
  41075e:	eb1b 0103 	adds.w	r1, fp, r3
  410762:	d411      	bmi.n	410788 <lv_draw_mask_radius+0x37c>
  410764:	42b9      	cmp	r1, r7
  410766:	da0f      	bge.n	410788 <lv_draw_mask_radius+0x37c>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
  410768:	f818 0001 	ldrb.w	r0, [r8, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  41076c:	2afc      	cmp	r2, #252	; 0xfc
  41076e:	d809      	bhi.n	410784 <lv_draw_mask_radius+0x378>
    if(mask_new <= LV_OPA_MIN) return 0;
  410770:	2a02      	cmp	r2, #2
  410772:	d932      	bls.n	4107da <lv_draw_mask_radius+0x3ce>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  410774:	fb02 f000 	mul.w	r0, r2, r0
  410778:	eb00 2400 	add.w	r4, r0, r0, lsl #8
  41077c:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
  410780:	f3c0 50c7 	ubfx	r0, r0, #23, #8
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
  410784:	f808 0001 	strb.w	r0, [r8, r1]
            int32_t kr = k + (w - ofs - 1);
  410788:	9802      	ldr	r0, [sp, #8]
  41078a:	1ac3      	subs	r3, r0, r3
  41078c:	3b01      	subs	r3, #1
            if(kr >= 0 && kr < len) {
  41078e:	eb1b 0303 	adds.w	r3, fp, r3
  410792:	d411      	bmi.n	4107b8 <lv_draw_mask_radius+0x3ac>
  410794:	42bb      	cmp	r3, r7
  410796:	da0f      	bge.n	4107b8 <lv_draw_mask_radius+0x3ac>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
  410798:	f818 0003 	ldrb.w	r0, [r8, r3]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  41079c:	2afc      	cmp	r2, #252	; 0xfc
  41079e:	d809      	bhi.n	4107b4 <lv_draw_mask_radius+0x3a8>
    if(mask_new <= LV_OPA_MIN) return 0;
  4107a0:	2a02      	cmp	r2, #2
  4107a2:	d91c      	bls.n	4107de <lv_draw_mask_radius+0x3d2>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  4107a4:	fb02 f200 	mul.w	r2, r2, r0
  4107a8:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  4107ac:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  4107b0:	f3c2 50c7 	ubfx	r0, r2, #23, #8
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
  4107b4:	f808 0003 	strb.w	r0, [r8, r3]
            if(outer == false) {
  4107b8:	b19d      	cbz	r5, 4107e2 <lv_draw_mask_radius+0x3d6>
                if(first < 0) first = 0;
  4107ba:	1c48      	adds	r0, r1, #1
  4107bc:	d426      	bmi.n	41080c <lv_draw_mask_radius+0x400>
                int32_t len_tmp = kr - first;
  4107be:	1a19      	subs	r1, r3, r0
                if(len_tmp + first > len) len_tmp = len - first;
  4107c0:	42bb      	cmp	r3, r7
  4107c2:	dd00      	ble.n	4107c6 <lv_draw_mask_radius+0x3ba>
  4107c4:	1a39      	subs	r1, r7, r0
                if(first < len && len_tmp >= 0) {
  4107c6:	42b8      	cmp	r0, r7
  4107c8:	f280 80be 	bge.w	410948 <lv_draw_mask_radius+0x53c>
  4107cc:	2900      	cmp	r1, #0
  4107ce:	f2c0 80bb 	blt.w	410948 <lv_draw_mask_radius+0x53c>
                    _lv_memset_00(&mask_buf[first], len_tmp);
  4107d2:	4440      	add	r0, r8
  4107d4:	4b72      	ldr	r3, [pc, #456]	; (4109a0 <lv_draw_mask_radius+0x594>)
  4107d6:	4798      	blx	r3
  4107d8:	e0b6      	b.n	410948 <lv_draw_mask_radius+0x53c>
    if(mask_new <= LV_OPA_MIN) return 0;
  4107da:	2000      	movs	r0, #0
  4107dc:	e7d2      	b.n	410784 <lv_draw_mask_radius+0x378>
  4107de:	2000      	movs	r0, #0
  4107e0:	e7e8      	b.n	4107b4 <lv_draw_mask_radius+0x3a8>
                kr++;
  4107e2:	1c5c      	adds	r4, r3, #1
                if(kl > len)  {
  4107e4:	42b9      	cmp	r1, r7
  4107e6:	f300 80c9 	bgt.w	41097c <lv_draw_mask_radius+0x570>
                if(kl >= 0) {
  4107ea:	2900      	cmp	r1, #0
  4107ec:	db02      	blt.n	4107f4 <lv_draw_mask_radius+0x3e8>
                    _lv_memset_00(&mask_buf[0], kl);
  4107ee:	4640      	mov	r0, r8
  4107f0:	4b6b      	ldr	r3, [pc, #428]	; (4109a0 <lv_draw_mask_radius+0x594>)
  4107f2:	4798      	blx	r3
                if(kr < 0) {
  4107f4:	2c00      	cmp	r4, #0
  4107f6:	f2c0 80c1 	blt.w	41097c <lv_draw_mask_radius+0x570>
                if(kr <= len) {
  4107fa:	42bc      	cmp	r4, r7
  4107fc:	f300 80a4 	bgt.w	410948 <lv_draw_mask_radius+0x53c>
                    _lv_memset_00(&mask_buf[kr], len - kr);
  410800:	1b39      	subs	r1, r7, r4
  410802:	eb08 0004 	add.w	r0, r8, r4
  410806:	4b66      	ldr	r3, [pc, #408]	; (4109a0 <lv_draw_mask_radius+0x594>)
  410808:	4798      	blx	r3
  41080a:	e09d      	b.n	410948 <lv_draw_mask_radius+0x53c>
                if(first < 0) first = 0;
  41080c:	2000      	movs	r0, #0
  41080e:	e7d6      	b.n	4107be <lv_draw_mask_radius+0x3b2>
                if(first < 0) first = 0;
  410810:	2000      	movs	r0, #0
  410812:	e6e7      	b.n	4105e4 <lv_draw_mask_radius+0x1d8>
    if(mask_new <= LV_OPA_MIN) return 0;
  410814:	2200      	movs	r2, #0
  410816:	e736      	b.n	410686 <lv_draw_mask_radius+0x27a>
  410818:	2200      	movs	r2, #0
  41081a:	e74b      	b.n	4106b4 <lv_draw_mask_radius+0x2a8>
  41081c:	2200      	movs	r2, #0
  41081e:	e041      	b.n	4108a4 <lv_draw_mask_radius+0x498>
  410820:	2200      	movs	r2, #0
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  410822:	700a      	strb	r2, [r1, #0]
                kl--;
  410824:	3e01      	subs	r6, #1
                kr++;
  410826:	f109 0901 	add.w	r9, r9, #1
                y_prev.f = y_next.f;
  41082a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  41082e:	f8ad 301a 	strh.w	r3, [sp, #26]
            for(; i <= x1.i; i++) {
  410832:	f10b 0b01 	add.w	fp, fp, #1
  410836:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  41083a:	459b      	cmp	fp, r3
  41083c:	d849      	bhi.n	4108d2 <lv_draw_mask_radius+0x4c6>
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
  41083e:	fb0b a11b 	mls	r1, fp, fp, sl
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
  410842:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  410846:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  41084a:	0913      	lsrs	r3, r2, #4
  41084c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    uint32_t raw2 = raw * raw;
  410850:	fb03 f003 	mul.w	r0, r3, r3

    int32_t d = x - raw2;
  410854:	ebc0 2101 	rsb	r1, r0, r1, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
  410858:	0058      	lsls	r0, r3, #1
  41085a:	fb91 f1f0 	sdiv	r1, r1, r0
  41085e:	440b      	add	r3, r1

    q->i = d >> 4;
  410860:	1119      	asrs	r1, r3, #4
  410862:	f8ad 101c 	strh.w	r1, [sp, #28]
    q->f = (d & 0xF) << 4;
  410866:	011b      	lsls	r3, r3, #4
  410868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  41086c:	f8ad 301e 	strh.w	r3, [sp, #30]
                m = (y_prev.f + y_next.f) >> 1;
  410870:	4413      	add	r3, r2
  410872:	f3c3 0347 	ubfx	r3, r3, #1, #8
                if(outer) m = 255 - m;
  410876:	b10d      	cbz	r5, 41087c <lv_draw_mask_radius+0x470>
  410878:	43db      	mvns	r3, r3
  41087a:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  41087c:	2e00      	cmp	r6, #0
  41087e:	db12      	blt.n	4108a6 <lv_draw_mask_radius+0x49a>
  410880:	42be      	cmp	r6, r7
  410882:	da10      	bge.n	4108a6 <lv_draw_mask_radius+0x49a>
  410884:	eb08 0106 	add.w	r1, r8, r6
  410888:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  41088c:	2bfc      	cmp	r3, #252	; 0xfc
  41088e:	d809      	bhi.n	4108a4 <lv_draw_mask_radius+0x498>
    if(mask_new <= LV_OPA_MIN) return 0;
  410890:	2b02      	cmp	r3, #2
  410892:	d9c3      	bls.n	41081c <lv_draw_mask_radius+0x410>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  410894:	fb03 f202 	mul.w	r2, r3, r2
  410898:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  41089c:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  4108a0:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  4108a4:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  4108a6:	f1b9 0f00 	cmp.w	r9, #0
  4108aa:	dbbb      	blt.n	410824 <lv_draw_mask_radius+0x418>
  4108ac:	45b9      	cmp	r9, r7
  4108ae:	dab9      	bge.n	410824 <lv_draw_mask_radius+0x418>
  4108b0:	eb08 0109 	add.w	r1, r8, r9
  4108b4:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  4108b8:	2bfc      	cmp	r3, #252	; 0xfc
  4108ba:	d8b2      	bhi.n	410822 <lv_draw_mask_radius+0x416>
    if(mask_new <= LV_OPA_MIN) return 0;
  4108bc:	2b02      	cmp	r3, #2
  4108be:	d9af      	bls.n	410820 <lv_draw_mask_radius+0x414>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  4108c0:	fb03 f302 	mul.w	r3, r3, r2
  4108c4:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  4108c8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  4108cc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
  4108d0:	e7a7      	b.n	410822 <lv_draw_mask_radius+0x416>
            if(y_prev.f) {
  4108d2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  4108d6:	b3b2      	cbz	r2, 410946 <lv_draw_mask_radius+0x53a>
                m = (y_prev.f * x1.f) >> 9;
  4108d8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4108dc:	fb03 f302 	mul.w	r3, r3, r2
  4108e0:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
  4108e4:	b10d      	cbz	r5, 4108ea <lv_draw_mask_radius+0x4de>
  4108e6:	43db      	mvns	r3, r3
  4108e8:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  4108ea:	2e00      	cmp	r6, #0
  4108ec:	db12      	blt.n	410914 <lv_draw_mask_radius+0x508>
  4108ee:	42be      	cmp	r6, r7
  4108f0:	da10      	bge.n	410914 <lv_draw_mask_radius+0x508>
  4108f2:	eb08 0106 	add.w	r1, r8, r6
  4108f6:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  4108fa:	2bfc      	cmp	r3, #252	; 0xfc
  4108fc:	d809      	bhi.n	410912 <lv_draw_mask_radius+0x506>
    if(mask_new <= LV_OPA_MIN) return 0;
  4108fe:	2b02      	cmp	r3, #2
  410900:	d924      	bls.n	41094c <lv_draw_mask_radius+0x540>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  410902:	fb03 f202 	mul.w	r2, r3, r2
  410906:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  41090a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  41090e:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  410912:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  410914:	f1b9 0f00 	cmp.w	r9, #0
  410918:	db12      	blt.n	410940 <lv_draw_mask_radius+0x534>
  41091a:	45b9      	cmp	r9, r7
  41091c:	da10      	bge.n	410940 <lv_draw_mask_radius+0x534>
  41091e:	eb08 0109 	add.w	r1, r8, r9
  410922:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  410926:	2bfc      	cmp	r3, #252	; 0xfc
  410928:	d809      	bhi.n	41093e <lv_draw_mask_radius+0x532>
    if(mask_new <= LV_OPA_MIN) return 0;
  41092a:	2b02      	cmp	r3, #2
  41092c:	d910      	bls.n	410950 <lv_draw_mask_radius+0x544>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  41092e:	fb03 f302 	mul.w	r3, r3, r2
  410932:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  410936:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  41093a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  41093e:	700a      	strb	r2, [r1, #0]
                kl--;
  410940:	3e01      	subs	r6, #1
                kr++;
  410942:	f109 0901 	add.w	r9, r9, #1
            if(outer == 0) {
  410946:	b12d      	cbz	r5, 410954 <lv_draw_mask_radius+0x548>
    return LV_DRAW_MASK_RES_CHANGED;
  410948:	2002      	movs	r0, #2
  41094a:	e01a      	b.n	410982 <lv_draw_mask_radius+0x576>
    if(mask_new <= LV_OPA_MIN) return 0;
  41094c:	2200      	movs	r2, #0
  41094e:	e7e0      	b.n	410912 <lv_draw_mask_radius+0x506>
  410950:	2200      	movs	r2, #0
  410952:	e7f4      	b.n	41093e <lv_draw_mask_radius+0x532>
                kl++;
  410954:	1c71      	adds	r1, r6, #1
                if(kl > len) {
  410956:	42b9      	cmp	r1, r7
  410958:	dc10      	bgt.n	41097c <lv_draw_mask_radius+0x570>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
  41095a:	2900      	cmp	r1, #0
  41095c:	db02      	blt.n	410964 <lv_draw_mask_radius+0x558>
  41095e:	4640      	mov	r0, r8
  410960:	4b0f      	ldr	r3, [pc, #60]	; (4109a0 <lv_draw_mask_radius+0x594>)
  410962:	4798      	blx	r3
                if(kr < 0) {
  410964:	f1b9 0f00 	cmp.w	r9, #0
  410968:	db08      	blt.n	41097c <lv_draw_mask_radius+0x570>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
  41096a:	45b9      	cmp	r9, r7
  41096c:	daec      	bge.n	410948 <lv_draw_mask_radius+0x53c>
  41096e:	eba7 0109 	sub.w	r1, r7, r9
  410972:	eb08 0009 	add.w	r0, r8, r9
  410976:	4b0a      	ldr	r3, [pc, #40]	; (4109a0 <lv_draw_mask_radius+0x594>)
  410978:	4798      	blx	r3
  41097a:	e7e5      	b.n	410948 <lv_draw_mask_radius+0x53c>
                    return LV_DRAW_MASK_RES_TRANSP;
  41097c:	2000      	movs	r0, #0
  41097e:	e000      	b.n	410982 <lv_draw_mask_radius+0x576>
            return LV_DRAW_MASK_RES_TRANSP;
  410980:	2000      	movs	r0, #0
}
  410982:	b00b      	add	sp, #44	; 0x2c
  410984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  410988:	2000      	movs	r0, #0
  41098a:	e7fa      	b.n	410982 <lv_draw_mask_radius+0x576>
            return LV_DRAW_MASK_RES_FULL_COVER;
  41098c:	2001      	movs	r0, #1
  41098e:	e7f8      	b.n	410982 <lv_draw_mask_radius+0x576>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
  410990:	2000      	movs	r0, #0
  410992:	e7f6      	b.n	410982 <lv_draw_mask_radius+0x576>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
  410994:	2000      	movs	r0, #0
  410996:	e7f4      	b.n	410982 <lv_draw_mask_radius+0x576>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  410998:	2001      	movs	r0, #1
  41099a:	e7f2      	b.n	410982 <lv_draw_mask_radius+0x576>
        return LV_DRAW_MASK_RES_CHANGED;
  41099c:	2002      	movs	r0, #2
  41099e:	e7f0      	b.n	410982 <lv_draw_mask_radius+0x576>
  4109a0:	00417a21 	.word	0x00417a21

004109a4 <lv_draw_mask_add>:
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  4109a4:	2300      	movs	r3, #0
  4109a6:	2b0f      	cmp	r3, #15
  4109a8:	d806      	bhi.n	4109b8 <lv_draw_mask_add+0x14>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
  4109aa:	4a0a      	ldr	r2, [pc, #40]	; (4109d4 <lv_draw_mask_add+0x30>)
  4109ac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  4109b0:	b112      	cbz	r2, 4109b8 <lv_draw_mask_add+0x14>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  4109b2:	3301      	adds	r3, #1
  4109b4:	b2db      	uxtb	r3, r3
  4109b6:	e7f6      	b.n	4109a6 <lv_draw_mask_add+0x2>
    if(i >= _LV_MASK_MAX_NUM) {
  4109b8:	2b0f      	cmp	r3, #15
  4109ba:	d807      	bhi.n	4109cc <lv_draw_mask_add+0x28>
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
  4109bc:	4a05      	ldr	r2, [pc, #20]	; (4109d4 <lv_draw_mask_add+0x30>)
  4109be:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
  4109c2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4109c6:	6051      	str	r1, [r2, #4]
    return i;
  4109c8:	b218      	sxth	r0, r3
  4109ca:	4770      	bx	lr
        return LV_MASK_ID_INV;
  4109cc:	f04f 30ff 	mov.w	r0, #4294967295
}
  4109d0:	4770      	bx	lr
  4109d2:	bf00      	nop
  4109d4:	2043a338 	.word	0x2043a338

004109d8 <lv_draw_mask_apply>:
{
  4109d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4109dc:	b082      	sub	sp, #8
  4109de:	4680      	mov	r8, r0
  4109e0:	460f      	mov	r7, r1
  4109e2:	4616      	mov	r6, r2
  4109e4:	469a      	mov	sl, r3
    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
  4109e6:	4c0f      	ldr	r4, [pc, #60]	; (410a24 <lv_draw_mask_apply+0x4c>)
    bool changed = false;
  4109e8:	f04f 0900 	mov.w	r9, #0
    while(m->param) {
  4109ec:	e000      	b.n	4109f0 <lv_draw_mask_apply+0x18>
        m++;
  4109ee:	3408      	adds	r4, #8
    while(m->param) {
  4109f0:	6823      	ldr	r3, [r4, #0]
  4109f2:	b16b      	cbz	r3, 410a10 <lv_draw_mask_apply+0x38>
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
  4109f4:	681d      	ldr	r5, [r3, #0]
  4109f6:	9300      	str	r3, [sp, #0]
  4109f8:	4653      	mov	r3, sl
  4109fa:	4632      	mov	r2, r6
  4109fc:	4639      	mov	r1, r7
  4109fe:	4640      	mov	r0, r8
  410a00:	47a8      	blx	r5
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
  410a02:	4603      	mov	r3, r0
  410a04:	b140      	cbz	r0, 410a18 <lv_draw_mask_apply+0x40>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
  410a06:	2802      	cmp	r0, #2
  410a08:	d1f1      	bne.n	4109ee <lv_draw_mask_apply+0x16>
  410a0a:	f04f 0901 	mov.w	r9, #1
  410a0e:	e7ee      	b.n	4109ee <lv_draw_mask_apply+0x16>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  410a10:	f1b9 0f00 	cmp.w	r9, #0
  410a14:	d004      	beq.n	410a20 <lv_draw_mask_apply+0x48>
  410a16:	2302      	movs	r3, #2
}
  410a18:	4618      	mov	r0, r3
  410a1a:	b002      	add	sp, #8
  410a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  410a20:	2301      	movs	r3, #1
  410a22:	e7f9      	b.n	410a18 <lv_draw_mask_apply+0x40>
  410a24:	2043a338 	.word	0x2043a338

00410a28 <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
  410a28:	f1b0 3fff 	cmp.w	r0, #4294967295
  410a2c:	d00a      	beq.n	410a44 <lv_draw_mask_remove_id+0x1c>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
  410a2e:	4b06      	ldr	r3, [pc, #24]	; (410a48 <lv_draw_mask_remove_id+0x20>)
  410a30:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
  410a34:	2200      	movs	r2, #0
  410a36:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
  410a3a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  410a3e:	605a      	str	r2, [r3, #4]
}
  410a40:	4608      	mov	r0, r1
  410a42:	4770      	bx	lr
    void * p = NULL;
  410a44:	2100      	movs	r1, #0
    return p;
  410a46:	e7fb      	b.n	410a40 <lv_draw_mask_remove_id+0x18>
  410a48:	2043a338 	.word	0x2043a338

00410a4c <lv_draw_mask_remove_custom>:
{
  410a4c:	4601      	mov	r1, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  410a4e:	2300      	movs	r3, #0
    void * p = NULL;
  410a50:	4618      	mov	r0, r3
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  410a52:	e004      	b.n	410a5e <lv_draw_mask_remove_custom+0x12>
}
  410a54:	f85d 4b04 	ldr.w	r4, [sp], #4
  410a58:	4770      	bx	lr
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  410a5a:	3301      	adds	r3, #1
  410a5c:	b2db      	uxtb	r3, r3
  410a5e:	2b0f      	cmp	r3, #15
  410a60:	d81a      	bhi.n	410a98 <lv_draw_mask_remove_custom+0x4c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
  410a62:	4a0e      	ldr	r2, [pc, #56]	; (410a9c <lv_draw_mask_remove_custom+0x50>)
  410a64:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  410a68:	6852      	ldr	r2, [r2, #4]
  410a6a:	428a      	cmp	r2, r1
  410a6c:	d1f5      	bne.n	410a5a <lv_draw_mask_remove_custom+0xe>
{
  410a6e:	b410      	push	{r4}
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
  410a70:	4a0a      	ldr	r2, [pc, #40]	; (410a9c <lv_draw_mask_remove_custom+0x50>)
  410a72:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
  410a76:	2400      	movs	r4, #0
  410a78:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
  410a7c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  410a80:	6054      	str	r4, [r2, #4]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  410a82:	3301      	adds	r3, #1
  410a84:	b2db      	uxtb	r3, r3
  410a86:	2b0f      	cmp	r3, #15
  410a88:	d8e4      	bhi.n	410a54 <lv_draw_mask_remove_custom+0x8>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
  410a8a:	4a04      	ldr	r2, [pc, #16]	; (410a9c <lv_draw_mask_remove_custom+0x50>)
  410a8c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  410a90:	6852      	ldr	r2, [r2, #4]
  410a92:	428a      	cmp	r2, r1
  410a94:	d1f5      	bne.n	410a82 <lv_draw_mask_remove_custom+0x36>
  410a96:	e7eb      	b.n	410a70 <lv_draw_mask_remove_custom+0x24>
  410a98:	4770      	bx	lr
  410a9a:	bf00      	nop
  410a9c:	2043a338 	.word	0x2043a338

00410aa0 <lv_draw_mask_get_cnt>:
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  410aa0:	2300      	movs	r3, #0
    uint8_t cnt = 0;
  410aa2:	4618      	mov	r0, r3
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  410aa4:	e001      	b.n	410aaa <lv_draw_mask_get_cnt+0xa>
  410aa6:	3301      	adds	r3, #1
  410aa8:	b2db      	uxtb	r3, r3
  410aaa:	2b0f      	cmp	r3, #15
  410aac:	d807      	bhi.n	410abe <lv_draw_mask_get_cnt+0x1e>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
  410aae:	4a04      	ldr	r2, [pc, #16]	; (410ac0 <lv_draw_mask_get_cnt+0x20>)
  410ab0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  410ab4:	2a00      	cmp	r2, #0
  410ab6:	d0f6      	beq.n	410aa6 <lv_draw_mask_get_cnt+0x6>
  410ab8:	3001      	adds	r0, #1
  410aba:	b2c0      	uxtb	r0, r0
  410abc:	e7f3      	b.n	410aa6 <lv_draw_mask_get_cnt+0x6>
}
  410abe:	4770      	bx	lr
  410ac0:	2043a338 	.word	0x2043a338

00410ac4 <lv_draw_mask_line_points_init>:
{
  410ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  410ac8:	4604      	mov	r4, r0
  410aca:	4688      	mov	r8, r1
  410acc:	4616      	mov	r6, r2
  410ace:	461f      	mov	r7, r3
  410ad0:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
  410ad4:	212c      	movs	r1, #44	; 0x2c
  410ad6:	4b50      	ldr	r3, [pc, #320]	; (410c18 <lv_draw_mask_line_points_init+0x154>)
  410ad8:	4798      	blx	r3
    if(p1y > p2y) {
  410ada:	42ae      	cmp	r6, r5
  410adc:	dc05      	bgt.n	410aea <lv_draw_mask_line_points_init+0x26>
  410ade:	462b      	mov	r3, r5
  410ae0:	4635      	mov	r5, r6
  410ae2:	461e      	mov	r6, r3
  410ae4:	463b      	mov	r3, r7
  410ae6:	4647      	mov	r7, r8
  410ae8:	4698      	mov	r8, r3
    param->cfg.p1.x = p1x;
  410aea:	8127      	strh	r7, [r4, #8]
    param->cfg.p1.y = p1y;
  410aec:	8165      	strh	r5, [r4, #10]
    param->cfg.p2.x = p2x;
  410aee:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
  410af2:	81e6      	strh	r6, [r4, #14]
    param->cfg.side = side;
  410af4:	7c23      	ldrb	r3, [r4, #16]
  410af6:	f89d 201c 	ldrb.w	r2, [sp, #28]
  410afa:	f362 0301 	bfi	r3, r2, #0, #2
  410afe:	7423      	strb	r3, [r4, #16]
    param->origo.x = p1x;
  410b00:	8267      	strh	r7, [r4, #18]
    param->origo.y = p1y;
  410b02:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
  410b04:	eba8 0707 	sub.w	r7, r8, r7
  410b08:	ea87 72e7 	eor.w	r2, r7, r7, asr #31
  410b0c:	eba2 72e7 	sub.w	r2, r2, r7, asr #31
  410b10:	1b75      	subs	r5, r6, r5
  410b12:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
  410b16:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
  410b1a:	429a      	cmp	r2, r3
  410b1c:	bfd4      	ite	le
  410b1e:	2200      	movle	r2, #0
  410b20:	2201      	movgt	r2, #1
  410b22:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  410b26:	f362 0300 	bfi	r3, r2, #0, #1
  410b2a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->yx_steep = 0;
  410b2e:	2200      	movs	r2, #0
  410b30:	61e2      	str	r2, [r4, #28]
    param->xy_steep = 0;
  410b32:	61a2      	str	r2, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
  410b34:	4939      	ldr	r1, [pc, #228]	; (410c1c <lv_draw_mask_line_points_init+0x158>)
  410b36:	6021      	str	r1, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
  410b38:	7122      	strb	r2, [r4, #4]
    if(param->flat) {
  410b3a:	f013 0f01 	tst.w	r3, #1
  410b3e:	d024      	beq.n	410b8a <lv_draw_mask_line_points_init+0xc6>
        if(dx) {
  410b40:	b13f      	cbz	r7, 410b52 <lv_draw_mask_line_points_init+0x8e>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
  410b42:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  410b46:	fb93 f3f7 	sdiv	r3, r3, r7
            param->yx_steep = (m * dy) >> 10;
  410b4a:	fb03 f305 	mul.w	r3, r3, r5
  410b4e:	129b      	asrs	r3, r3, #10
  410b50:	61e3      	str	r3, [r4, #28]
        if(dy) {
  410b52:	b13d      	cbz	r5, 410b64 <lv_draw_mask_line_points_init+0xa0>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
  410b54:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
  410b58:	fb96 f5f5 	sdiv	r5, r6, r5
            param->xy_steep = (m * dx) >> 10;
  410b5c:	fb05 f707 	mul.w	r7, r5, r7
  410b60:	12bf      	asrs	r7, r7, #10
  410b62:	61a7      	str	r7, [r4, #24]
        param->steep = param->yx_steep;
  410b64:	69e3      	ldr	r3, [r4, #28]
  410b66:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
  410b68:	7c23      	ldrb	r3, [r4, #16]
  410b6a:	f013 0303 	ands.w	r3, r3, #3
  410b6e:	d121      	bne.n	410bb4 <lv_draw_mask_line_points_init+0xf0>
  410b70:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  410b74:	f36f 0341 	bfc	r3, #1, #1
  410b78:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
  410b7c:	6a22      	ldr	r2, [r4, #32]
  410b7e:	1093      	asrs	r3, r2, #2
  410b80:	6263      	str	r3, [r4, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
  410b82:	2a00      	cmp	r2, #0
  410b84:	db45      	blt.n	410c12 <lv_draw_mask_line_points_init+0x14e>
  410b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dy) {
  410b8a:	b13d      	cbz	r5, 410b9c <lv_draw_mask_line_points_init+0xd8>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
  410b8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  410b90:	fb93 f3f5 	sdiv	r3, r3, r5
            param->xy_steep = (m * dx) >> 10;
  410b94:	fb03 f307 	mul.w	r3, r3, r7
  410b98:	129b      	asrs	r3, r3, #10
  410b9a:	61a3      	str	r3, [r4, #24]
        if(dx) {
  410b9c:	b13f      	cbz	r7, 410bae <lv_draw_mask_line_points_init+0xea>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
  410b9e:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
  410ba2:	fb98 f7f7 	sdiv	r7, r8, r7
            param->yx_steep = (m * dy) >> 10;
  410ba6:	fb07 f505 	mul.w	r5, r7, r5
  410baa:	12ad      	asrs	r5, r5, #10
  410bac:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
  410bae:	69a3      	ldr	r3, [r4, #24]
  410bb0:	6223      	str	r3, [r4, #32]
  410bb2:	e7d9      	b.n	410b68 <lv_draw_mask_line_points_init+0xa4>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
  410bb4:	2b01      	cmp	r3, #1
  410bb6:	d00d      	beq.n	410bd4 <lv_draw_mask_line_points_init+0x110>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
  410bb8:	2b02      	cmp	r3, #2
  410bba:	d012      	beq.n	410be2 <lv_draw_mask_line_points_init+0x11e>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
  410bbc:	2b03      	cmp	r3, #3
  410bbe:	d1dd      	bne.n	410b7c <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 0;
  410bc0:	6a23      	ldr	r3, [r4, #32]
  410bc2:	2b00      	cmp	r3, #0
  410bc4:	dd1e      	ble.n	410c04 <lv_draw_mask_line_points_init+0x140>
  410bc6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  410bca:	f36f 0341 	bfc	r3, #1, #1
  410bce:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  410bd2:	e7d3      	b.n	410b7c <lv_draw_mask_line_points_init+0xb8>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
  410bd4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  410bd8:	f043 0302 	orr.w	r3, r3, #2
  410bdc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  410be0:	e7cc      	b.n	410b7c <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 1;
  410be2:	6a23      	ldr	r3, [r4, #32]
  410be4:	2b00      	cmp	r3, #0
  410be6:	dd06      	ble.n	410bf6 <lv_draw_mask_line_points_init+0x132>
  410be8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  410bec:	f043 0302 	orr.w	r3, r3, #2
  410bf0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  410bf4:	e7c2      	b.n	410b7c <lv_draw_mask_line_points_init+0xb8>
        else param->inv = 0;
  410bf6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  410bfa:	f36f 0341 	bfc	r3, #1, #1
  410bfe:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  410c02:	e7bb      	b.n	410b7c <lv_draw_mask_line_points_init+0xb8>
        else param->inv = 1;
  410c04:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  410c08:	f043 0302 	orr.w	r3, r3, #2
  410c0c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  410c10:	e7b4      	b.n	410b7c <lv_draw_mask_line_points_init+0xb8>
    if(param->steep < 0) param->spx = -param->spx;
  410c12:	425b      	negs	r3, r3
  410c14:	6263      	str	r3, [r4, #36]	; 0x24
}
  410c16:	e7b6      	b.n	410b86 <lv_draw_mask_line_points_init+0xc2>
  410c18:	00417a21 	.word	0x00417a21
  410c1c:	0040ff71 	.word	0x0040ff71

00410c20 <lv_draw_mask_line_angle_init>:
{
  410c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  410c24:	b083      	sub	sp, #12
  410c26:	4681      	mov	r9, r0
  410c28:	460d      	mov	r5, r1
  410c2a:	4616      	mov	r6, r2
  410c2c:	461c      	mov	r4, r3
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
  410c2e:	2bb4      	cmp	r3, #180	; 0xb4
  410c30:	dd02      	ble.n	410c38 <lv_draw_mask_line_angle_init+0x18>
  410c32:	f1a3 04b4 	sub.w	r4, r3, #180	; 0xb4
  410c36:	b224      	sxth	r4, r4
    p2x = (_lv_trigo_sin(angle + 90) >> 5) + p1x;
  410c38:	f104 005a 	add.w	r0, r4, #90	; 0x5a
  410c3c:	b200      	sxth	r0, r0
  410c3e:	4f0c      	ldr	r7, [pc, #48]	; (410c70 <lv_draw_mask_line_angle_init+0x50>)
  410c40:	47b8      	blx	r7
  410c42:	f340 184f 	sbfx	r8, r0, #5, #16
    p2y = (_lv_trigo_sin(angle) >> 5) + py;
  410c46:	4620      	mov	r0, r4
  410c48:	47b8      	blx	r7
  410c4a:	f340 104f 	sbfx	r0, r0, #5, #16
    lv_draw_mask_line_points_init(param, p1x, py, p2x, p2y, side);
  410c4e:	eb08 0305 	add.w	r3, r8, r5
  410c52:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
  410c56:	9201      	str	r2, [sp, #4]
  410c58:	4430      	add	r0, r6
  410c5a:	b200      	sxth	r0, r0
  410c5c:	9000      	str	r0, [sp, #0]
  410c5e:	b21b      	sxth	r3, r3
  410c60:	4632      	mov	r2, r6
  410c62:	4629      	mov	r1, r5
  410c64:	4648      	mov	r0, r9
  410c66:	4c03      	ldr	r4, [pc, #12]	; (410c74 <lv_draw_mask_line_angle_init+0x54>)
  410c68:	47a0      	blx	r4
}
  410c6a:	b003      	add	sp, #12
  410c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  410c70:	0041737d 	.word	0x0041737d
  410c74:	00410ac5 	.word	0x00410ac5

00410c78 <lv_draw_mask_angle_init>:
{
  410c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  410c7c:	b083      	sub	sp, #12
  410c7e:	4605      	mov	r5, r0
  410c80:	460e      	mov	r6, r1
  410c82:	4617      	mov	r7, r2
  410c84:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
    if(start_angle < 0)
  410c88:	2b00      	cmp	r3, #0
  410c8a:	db23      	blt.n	410cd4 <lv_draw_mask_angle_init+0x5c>
    else if(start_angle > 359)
  410c8c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
  410c90:	da22      	bge.n	410cd8 <lv_draw_mask_angle_init+0x60>
    if(end_angle < 0)
  410c92:	2c00      	cmp	r4, #0
  410c94:	db23      	blt.n	410cde <lv_draw_mask_angle_init+0x66>
    else if(end_angle > 359)
  410c96:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
  410c9a:	da22      	bge.n	410ce2 <lv_draw_mask_angle_init+0x6a>
    if(end_angle < start_angle) {
  410c9c:	42a3      	cmp	r3, r4
  410c9e:	dd23      	ble.n	410ce8 <lv_draw_mask_angle_init+0x70>
        param->delta_deg = 360 - start_angle + end_angle;
  410ca0:	1ae2      	subs	r2, r4, r3
  410ca2:	f502 72b4 	add.w	r2, r2, #360	; 0x168
  410ca6:	f8a5 2068 	strh.w	r2, [r5, #104]	; 0x68
    param->cfg.start_angle = start_angle;
  410caa:	81ab      	strh	r3, [r5, #12]
    param->cfg.end_angle = end_angle;
  410cac:	81ec      	strh	r4, [r5, #14]
    param->cfg.vertex_p.x = vertex_x;
  410cae:	812e      	strh	r6, [r5, #8]
    param->cfg.vertex_p.y = vertex_y;
  410cb0:	816f      	strh	r7, [r5, #10]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
  410cb2:	4a25      	ldr	r2, [pc, #148]	; (410d48 <lv_draw_mask_angle_init+0xd0>)
  410cb4:	602a      	str	r2, [r5, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
  410cb6:	2201      	movs	r2, #1
  410cb8:	712a      	strb	r2, [r5, #4]
    if(start_angle >= 0 && start_angle < 180) {
  410cba:	b29a      	uxth	r2, r3
  410cbc:	2ab3      	cmp	r2, #179	; 0xb3
  410cbe:	d91a      	bls.n	410cf6 <lv_draw_mask_angle_init+0x7e>
    else if(start_angle >= 180 && start_angle < 360) {
  410cc0:	3ab4      	subs	r2, #180	; 0xb4
  410cc2:	b292      	uxth	r2, r2
  410cc4:	2ab3      	cmp	r2, #179	; 0xb3
  410cc6:	d933      	bls.n	410d30 <lv_draw_mask_angle_init+0xb8>
        LV_DEBUG_ASSERT(false, "Unexpected start_angle", start_angle);
  410cc8:	461a      	mov	r2, r3
  410cca:	2300      	movs	r3, #0
  410ccc:	481f      	ldr	r0, [pc, #124]	; (410d4c <lv_draw_mask_angle_init+0xd4>)
  410cce:	4920      	ldr	r1, [pc, #128]	; (410d50 <lv_draw_mask_angle_init+0xd8>)
  410cd0:	4788      	blx	r1
  410cd2:	e7fe      	b.n	410cd2 <lv_draw_mask_angle_init+0x5a>
        start_angle = 0;
  410cd4:	2300      	movs	r3, #0
  410cd6:	e7dc      	b.n	410c92 <lv_draw_mask_angle_init+0x1a>
        start_angle = 359;
  410cd8:	f240 1367 	movw	r3, #359	; 0x167
  410cdc:	e7d9      	b.n	410c92 <lv_draw_mask_angle_init+0x1a>
        end_angle = 0;
  410cde:	2400      	movs	r4, #0
  410ce0:	e7dc      	b.n	410c9c <lv_draw_mask_angle_init+0x24>
        end_angle = 359;
  410ce2:	f240 1467 	movw	r4, #359	; 0x167
  410ce6:	e7d9      	b.n	410c9c <lv_draw_mask_angle_init+0x24>
        param->delta_deg = LV_MATH_ABS(end_angle - start_angle);
  410ce8:	1ae2      	subs	r2, r4, r3
  410cea:	2a00      	cmp	r2, #0
  410cec:	bfb8      	it	lt
  410cee:	4252      	neglt	r2, r2
  410cf0:	f8a5 2068 	strh.w	r2, [r5, #104]	; 0x68
  410cf4:	e7d9      	b.n	410caa <lv_draw_mask_angle_init+0x32>
        start_side = LV_DRAW_MASK_LINE_SIDE_LEFT;
  410cf6:	2100      	movs	r1, #0
    if(end_angle >= 0 && end_angle < 180) {
  410cf8:	b2a2      	uxth	r2, r4
  410cfa:	2ab3      	cmp	r2, #179	; 0xb3
  410cfc:	d920      	bls.n	410d40 <lv_draw_mask_angle_init+0xc8>
    else if(end_angle >= 180 && end_angle < 360) {
  410cfe:	3ab4      	subs	r2, #180	; 0xb4
  410d00:	b292      	uxth	r2, r2
  410d02:	2ab3      	cmp	r2, #179	; 0xb3
  410d04:	d816      	bhi.n	410d34 <lv_draw_mask_angle_init+0xbc>
        end_side = LV_DRAW_MASK_LINE_SIDE_LEFT;
  410d06:	f04f 0900 	mov.w	r9, #0
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
  410d0a:	9100      	str	r1, [sp, #0]
  410d0c:	463a      	mov	r2, r7
  410d0e:	4631      	mov	r1, r6
  410d10:	f105 0010 	add.w	r0, r5, #16
  410d14:	f8df 8040 	ldr.w	r8, [pc, #64]	; 410d58 <lv_draw_mask_angle_init+0xe0>
  410d18:	47c0      	blx	r8
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
  410d1a:	f8cd 9000 	str.w	r9, [sp]
  410d1e:	4623      	mov	r3, r4
  410d20:	463a      	mov	r2, r7
  410d22:	4631      	mov	r1, r6
  410d24:	f105 003c 	add.w	r0, r5, #60	; 0x3c
  410d28:	47c0      	blx	r8
}
  410d2a:	b003      	add	sp, #12
  410d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        start_side = LV_DRAW_MASK_LINE_SIDE_RIGHT;
  410d30:	2101      	movs	r1, #1
  410d32:	e7e1      	b.n	410cf8 <lv_draw_mask_angle_init+0x80>
        LV_DEBUG_ASSERT(false, "Unexpected end_angle", end_angle);
  410d34:	4622      	mov	r2, r4
  410d36:	2300      	movs	r3, #0
  410d38:	4806      	ldr	r0, [pc, #24]	; (410d54 <lv_draw_mask_angle_init+0xdc>)
  410d3a:	4905      	ldr	r1, [pc, #20]	; (410d50 <lv_draw_mask_angle_init+0xd8>)
  410d3c:	4788      	blx	r1
  410d3e:	e7fe      	b.n	410d3e <lv_draw_mask_angle_init+0xc6>
        end_side = LV_DRAW_MASK_LINE_SIDE_RIGHT;
  410d40:	f04f 0901 	mov.w	r9, #1
  410d44:	e7e1      	b.n	410d0a <lv_draw_mask_angle_init+0x92>
  410d46:	bf00      	nop
  410d48:	0041005d 	.word	0x0041005d
  410d4c:	0042e6c0 	.word	0x0042e6c0
  410d50:	00416db5 	.word	0x00416db5
  410d54:	0042e6d8 	.word	0x0042e6d8
  410d58:	00410c21 	.word	0x00410c21

00410d5c <lv_draw_mask_radius_init>:
{
  410d5c:	b470      	push	{r4, r5, r6}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410d5e:	888c      	ldrh	r4, [r1, #4]
  410d60:	880e      	ldrh	r6, [r1, #0]
  410d62:	1ba4      	subs	r4, r4, r6
  410d64:	b2a4      	uxth	r4, r4
  410d66:	3401      	adds	r4, #1
  410d68:	b226      	sxth	r6, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410d6a:	88cd      	ldrh	r5, [r1, #6]
  410d6c:	884c      	ldrh	r4, [r1, #2]
  410d6e:	1b2d      	subs	r5, r5, r4
  410d70:	b2ad      	uxth	r5, r5
  410d72:	3501      	adds	r5, #1
  410d74:	b22c      	sxth	r4, r5
    int32_t short_side = LV_MATH_MIN(w, h);
  410d76:	42b4      	cmp	r4, r6
  410d78:	bfa8      	it	ge
  410d7a:	4634      	movge	r4, r6
    if(radius > short_side >> 1) radius = short_side >> 1;
  410d7c:	1064      	asrs	r4, r4, #1
  410d7e:	42a2      	cmp	r2, r4
  410d80:	dd00      	ble.n	410d84 <lv_draw_mask_radius_init+0x28>
  410d82:	b222      	sxth	r2, r4
    uint8_t * d8 = (uint8_t *)dst;
  410d84:	f100 0508 	add.w	r5, r0, #8
    lv_area_copy(&param->cfg.rect, rect);
  410d88:	2408      	movs	r4, #8
  410d8a:	e004      	b.n	410d96 <lv_draw_mask_radius_init+0x3a>
        *d8 = *s8;
  410d8c:	f811 6b01 	ldrb.w	r6, [r1], #1
  410d90:	f805 6b01 	strb.w	r6, [r5], #1
        len--;
  410d94:	3c01      	subs	r4, #1
    while(len) {
  410d96:	2c00      	cmp	r4, #0
  410d98:	d1f8      	bne.n	410d8c <lv_draw_mask_radius_init+0x30>
    param->cfg.radius = radius;
  410d9a:	8202      	strh	r2, [r0, #16]
    param->cfg.outer = inv ? 1 : 0;
  410d9c:	7c82      	ldrb	r2, [r0, #18]
  410d9e:	f363 0200 	bfi	r2, r3, #0, #1
  410da2:	7482      	strb	r2, [r0, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
  410da4:	4b05      	ldr	r3, [pc, #20]	; (410dbc <lv_draw_mask_radius_init+0x60>)
  410da6:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
  410da8:	2302      	movs	r3, #2
  410daa:	7103      	strb	r3, [r0, #4]
    param->y_prev = INT32_MIN;
  410dac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  410db0:	6143      	str	r3, [r0, #20]
    param->y_prev_x.f = 0;
  410db2:	2300      	movs	r3, #0
  410db4:	8343      	strh	r3, [r0, #26]
    param->y_prev_x.i = 0;
  410db6:	8303      	strh	r3, [r0, #24]
}
  410db8:	bc70      	pop	{r4, r5, r6}
  410dba:	4770      	bx	lr
  410dbc:	0041040d 	.word	0x0041040d

00410dc0 <lv_draw_mask_fade_init>:
{
  410dc0:	b470      	push	{r4, r5, r6}
    uint8_t * d8 = (uint8_t *)dst;
  410dc2:	f100 0508 	add.w	r5, r0, #8
    lv_area_copy(&param->cfg.coords, coords);
  410dc6:	2408      	movs	r4, #8
  410dc8:	e004      	b.n	410dd4 <lv_draw_mask_fade_init+0x14>
        *d8 = *s8;
  410dca:	f811 6b01 	ldrb.w	r6, [r1], #1
  410dce:	f805 6b01 	strb.w	r6, [r5], #1
        len--;
  410dd2:	3c01      	subs	r4, #1
    while(len) {
  410dd4:	2c00      	cmp	r4, #0
  410dd6:	d1f8      	bne.n	410dca <lv_draw_mask_fade_init+0xa>
    param->cfg.opa_top = opa_top;
  410dd8:	7502      	strb	r2, [r0, #20]
    param->cfg.opa_bottom = opa_bottom;
  410dda:	f89d 200c 	ldrb.w	r2, [sp, #12]
  410dde:	7542      	strb	r2, [r0, #21]
    param->cfg.y_top = y_top;
  410de0:	8203      	strh	r3, [r0, #16]
    param->cfg.y_bottom = y_bottom;
  410de2:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  410de6:	8243      	strh	r3, [r0, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_fade;
  410de8:	4b02      	ldr	r3, [pc, #8]	; (410df4 <lv_draw_mask_fade_init+0x34>)
  410dea:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_FADE;
  410dec:	2303      	movs	r3, #3
  410dee:	7103      	strb	r3, [r0, #4]
}
  410df0:	bc70      	pop	{r4, r5, r6}
  410df2:	4770      	bx	lr
  410df4:	0040f94d 	.word	0x0040f94d

00410df8 <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
  410df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410dfc:	b085      	sub	sp, #20
  410dfe:	9002      	str	r0, [sp, #8]
  410e00:	9101      	str	r1, [sp, #4]
  410e02:	4615      	mov	r5, r2
    int32_t s_left = sw >> 1;
  410e04:	104f      	asrs	r7, r1, #1
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;
  410e06:	f011 0f01 	tst.w	r1, #1
  410e0a:	d10e      	bne.n	410e2a <shadow_blur_corner+0x32>
  410e0c:	f107 38ff 	add.w	r8, r7, #4294967295

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
  410e10:	9b02      	ldr	r3, [sp, #8]
  410e12:	469a      	mov	sl, r3
  410e14:	005e      	lsls	r6, r3, #1
  410e16:	4630      	mov	r0, r6
  410e18:	4b50      	ldr	r3, [pc, #320]	; (410f5c <shadow_blur_corner+0x164>)
  410e1a:	4798      	blx	r3
  410e1c:	4604      	mov	r4, r0

    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
  410e1e:	46a9      	mov	r9, r5

    for(y = 0; y < size; y++) {
  410e20:	f04f 0b00 	mov.w	fp, #0
  410e24:	9503      	str	r5, [sp, #12]
  410e26:	9d02      	ldr	r5, [sp, #8]
  410e28:	e024      	b.n	410e74 <shadow_blur_corner+0x7c>
    int32_t s_left = sw >> 1;
  410e2a:	46b8      	mov	r8, r7
  410e2c:	e7f0      	b.n	410e10 <shadow_blur_corner+0x18>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
        for(x = size - 1; x >= 0; x--) {
            sh_ups_blur_buf[x] = v;

            /*Forget the right pixel*/
            uint32_t right_val = 0;
  410e2e:	2200      	movs	r2, #0
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
            v -= right_val;
  410e30:	1a9b      	subs	r3, r3, r2

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
  410e32:	eba0 0e08 	sub.w	lr, r0, r8
  410e36:	f1be 0f01 	cmp.w	lr, #1
  410e3a:	d410      	bmi.n	410e5e <shadow_blur_corner+0x66>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
  410e3c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  410e40:	4472      	add	r2, lr
  410e42:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
            v += left_val;
  410e46:	4413      	add	r3, r2
        for(x = size - 1; x >= 0; x--) {
  410e48:	3801      	subs	r0, #1
  410e4a:	2800      	cmp	r0, #0
  410e4c:	db0a      	blt.n	410e64 <shadow_blur_corner+0x6c>
            sh_ups_blur_buf[x] = v;
  410e4e:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
  410e52:	19c2      	adds	r2, r0, r7
  410e54:	4291      	cmp	r1, r2
  410e56:	ddea      	ble.n	410e2e <shadow_blur_corner+0x36>
  410e58:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
  410e5c:	e7e8      	b.n	410e30 <shadow_blur_corner+0x38>
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
  410e5e:	f8b9 2000 	ldrh.w	r2, [r9]
  410e62:	e7f0      	b.n	410e46 <shadow_blur_corner+0x4e>
        }
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
  410e64:	4632      	mov	r2, r6
  410e66:	4621      	mov	r1, r4
  410e68:	4648      	mov	r0, r9
  410e6a:	4b3d      	ldr	r3, [pc, #244]	; (410f60 <shadow_blur_corner+0x168>)
  410e6c:	4798      	blx	r3
        sh_ups_tmp_buf += size;
  410e6e:	44b1      	add	r9, r6
    for(y = 0; y < size; y++) {
  410e70:	f10b 0b01 	add.w	fp, fp, #1
  410e74:	4629      	mov	r1, r5
  410e76:	45ab      	cmp	fp, r5
  410e78:	da09      	bge.n	410e8e <shadow_blur_corner+0x96>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
  410e7a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  410e7e:	4453      	add	r3, sl
  410e80:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
  410e84:	9a01      	ldr	r2, [sp, #4]
  410e86:	fb02 f303 	mul.w	r3, r2, r3
        for(x = size - 1; x >= 0; x--) {
  410e8a:	1e68      	subs	r0, r5, #1
  410e8c:	e7dd      	b.n	410e4a <shadow_blur_corner+0x52>
  410e8e:	9d03      	ldr	r5, [sp, #12]
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
  410e90:	882b      	ldrh	r3, [r5, #0]
  410e92:	9a01      	ldr	r2, [sp, #4]
  410e94:	4694      	mov	ip, r2
  410e96:	fb93 f3f2 	sdiv	r3, r3, r2
  410e9a:	802b      	strh	r3, [r5, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
  410e9c:	2301      	movs	r3, #1
  410e9e:	e002      	b.n	410ea6 <shadow_blur_corner+0xae>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
  410ea0:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
    for(i = 1; i < (uint32_t)size * size; i++) {
  410ea4:	3301      	adds	r3, #1
  410ea6:	fb0a f20a 	mul.w	r2, sl, sl
  410eaa:	4293      	cmp	r3, r2
  410eac:	d20d      	bcs.n	410eca <shadow_blur_corner+0xd2>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
  410eae:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
  410eb2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  410eb6:	4418      	add	r0, r3
  410eb8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
  410ebc:	4282      	cmp	r2, r0
  410ebe:	d0ef      	beq.n	410ea0 <shadow_blur_corner+0xa8>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
  410ec0:	fb92 f2fc 	sdiv	r2, r2, ip
  410ec4:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
  410ec8:	e7ec      	b.n	410ea4 <shadow_blur_corner+0xac>
  410eca:	f04f 0a00 	mov.w	sl, #0
  410ece:	e034      	b.n	410f3a <shadow_blur_corner+0x142>

    for(x = 0; x < size; x++) {
        sh_ups_tmp_buf = &sh_ups_buf[x];
        int32_t v = sh_ups_tmp_buf[0] * sw;
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
  410ed0:	f04f 0b00 	mov.w	fp, #0
  410ed4:	e011      	b.n	410efa <shadow_blur_corner+0x102>

            /*Forget the top pixel*/
            uint32_t top_val;
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
  410ed6:	f8b9 0000 	ldrh.w	r0, [r9]
  410eda:	e017      	b.n	410f0c <shadow_blur_corner+0x114>
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
  410edc:	1e48      	subs	r0, r1, #1
  410ede:	fb00 a001 	mla	r0, r0, r1, sl
  410ee2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
            v += bottom_val;
  410ee6:	4402      	add	r2, r0
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
  410ee8:	3301      	adds	r3, #1
  410eea:	44b1      	add	r9, r6
  410eec:	428b      	cmp	r3, r1
  410eee:	da18      	bge.n	410f22 <shadow_blur_corner+0x12a>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
  410ef0:	0058      	lsls	r0, r3, #1
  410ef2:	2a00      	cmp	r2, #0
  410ef4:	dbec      	blt.n	410ed0 <shadow_blur_corner+0xd8>
  410ef6:	f3c2 1b8f 	ubfx	fp, r2, #6, #16
  410efa:	f824 b000 	strh.w	fp, [r4, r0]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
  410efe:	1bd8      	subs	r0, r3, r7
  410f00:	2800      	cmp	r0, #0
  410f02:	dde8      	ble.n	410ed6 <shadow_blur_corner+0xde>
            else top_val = sh_ups_buf[(y - s_right) * size + x];
  410f04:	fb00 a001 	mla	r0, r0, r1, sl
  410f08:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
            v -= top_val;
  410f0c:	1a12      	subs	r2, r2, r0
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
  410f0e:	eb08 0003 	add.w	r0, r8, r3
  410f12:	3001      	adds	r0, #1
  410f14:	4281      	cmp	r1, r0
  410f16:	dde1      	ble.n	410edc <shadow_blur_corner+0xe4>
  410f18:	fb00 a001 	mla	r0, r0, r1, sl
  410f1c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
  410f20:	e7e1      	b.n	410ee6 <shadow_blur_corner+0xee>
  410f22:	2300      	movs	r3, #0
  410f24:	e005      	b.n	410f32 <shadow_blur_corner+0x13a>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
  410f26:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
  410f2a:	f8ae 2000 	strh.w	r2, [lr]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
  410f2e:	3301      	adds	r3, #1
  410f30:	44b6      	add	lr, r6
  410f32:	428b      	cmp	r3, r1
  410f34:	dbf7      	blt.n	410f26 <shadow_blur_corner+0x12e>
    for(x = 0; x < size; x++) {
  410f36:	f10a 0a01 	add.w	sl, sl, #1
  410f3a:	458a      	cmp	sl, r1
  410f3c:	da08      	bge.n	410f50 <shadow_blur_corner+0x158>
        sh_ups_tmp_buf = &sh_ups_buf[x];
  410f3e:	eb05 0e4a 	add.w	lr, r5, sl, lsl #1
        int32_t v = sh_ups_tmp_buf[0] * sw;
  410f42:	f835 201a 	ldrh.w	r2, [r5, sl, lsl #1]
  410f46:	fb02 f20c 	mul.w	r2, r2, ip
        sh_ups_tmp_buf = &sh_ups_buf[x];
  410f4a:	46f1      	mov	r9, lr
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
  410f4c:	2300      	movs	r3, #0
  410f4e:	e7cd      	b.n	410eec <shadow_blur_corner+0xf4>
        }
    }

    _lv_mem_buf_release(sh_ups_blur_buf);
  410f50:	4620      	mov	r0, r4
  410f52:	4b04      	ldr	r3, [pc, #16]	; (410f64 <shadow_blur_corner+0x16c>)
  410f54:	4798      	blx	r3
}
  410f56:	b005      	add	sp, #20
  410f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410f5c:	00417895 	.word	0x00417895
  410f60:	004176fd 	.word	0x004176fd
  410f64:	00417645 	.word	0x00417645

00410f68 <shadow_draw_corner_buf>:
{
  410f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410f6c:	b08f      	sub	sp, #60	; 0x3c
  410f6e:	4688      	mov	r8, r1
  410f70:	4692      	mov	sl, r2
  410f72:	461a      	mov	r2, r3
    int32_t size = sw_ori  + r;
  410f74:	eb0a 0503 	add.w	r5, sl, r3
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;
  410f78:	4604      	mov	r4, r0
    uint8_t * d8 = (uint8_t *)dst;
  410f7a:	a90c      	add	r1, sp, #48	; 0x30
  410f7c:	2308      	movs	r3, #8
  410f7e:	e004      	b.n	410f8a <shadow_draw_corner_buf+0x22>

    while(len) {
        *d8 = *s8;
  410f80:	f814 6b01 	ldrb.w	r6, [r4], #1
  410f84:	f801 6b01 	strb.w	r6, [r1], #1
        d8++;
        s8++;
        len--;
  410f88:	3b01      	subs	r3, #1
    while(len) {
  410f8a:	2b00      	cmp	r3, #0
  410f8c:	d1f8      	bne.n	410f80 <shadow_draw_corner_buf+0x18>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
  410f8e:	4651      	mov	r1, sl
  410f90:	f1ba 0f00 	cmp.w	sl, #0
  410f94:	db36      	blt.n	411004 <shadow_draw_corner_buf+0x9c>
  410f96:	f3c1 014f 	ubfx	r1, r1, #1, #16
  410f9a:	188b      	adds	r3, r1, r2
  410f9c:	b29b      	uxth	r3, r3
  410f9e:	f01a 0401 	ands.w	r4, sl, #1
  410fa2:	9403      	str	r4, [sp, #12]
  410fa4:	bf0c      	ite	eq
  410fa6:	2401      	moveq	r4, #1
  410fa8:	2400      	movne	r4, #0
  410faa:	1b1b      	subs	r3, r3, r4
  410fac:	3b01      	subs	r3, #1
  410fae:	b29b      	uxth	r3, r3
  410fb0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    sh_area.y1 = sw / 2 + 1;
  410fb4:	3101      	adds	r1, #1
  410fb6:	b289      	uxth	r1, r1
  410fb8:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410fbc:	8884      	ldrh	r4, [r0, #4]
  410fbe:	8806      	ldrh	r6, [r0, #0]
  410fc0:	1ba4      	subs	r4, r4, r6
  410fc2:	b2a4      	uxth	r4, r4
  410fc4:	3401      	adds	r4, #1
  410fc6:	b2a4      	uxth	r4, r4
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
  410fc8:	1b1b      	subs	r3, r3, r4
  410fca:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410fce:	88c3      	ldrh	r3, [r0, #6]
  410fd0:	8840      	ldrh	r0, [r0, #2]
  410fd2:	1a1b      	subs	r3, r3, r0
  410fd4:	b29b      	uxth	r3, r3
  410fd6:	3301      	adds	r3, #1
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
  410fd8:	fa11 f183 	uxtah	r1, r1, r3
  410fdc:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
  410fe0:	2300      	movs	r3, #0
  410fe2:	a90c      	add	r1, sp, #48	; 0x30
  410fe4:	a805      	add	r0, sp, #20
  410fe6:	4c4d      	ldr	r4, [pc, #308]	; (41111c <shadow_draw_corner_buf+0x1b4>)
  410fe8:	47a0      	blx	r4
    if(sw_ori == 1) sw = 1;
  410fea:	f1ba 0f01 	cmp.w	sl, #1
  410fee:	d00c      	beq.n	41100a <shadow_draw_corner_buf+0xa2>
    else sw = sw_ori >> 1;
  410ff0:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
  410ff4:	46a9      	mov	r9, r5
  410ff6:	4628      	mov	r0, r5
  410ff8:	4b49      	ldr	r3, [pc, #292]	; (411120 <shadow_draw_corner_buf+0x1b8>)
  410ffa:	4798      	blx	r3
  410ffc:	4604      	mov	r4, r0
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
  410ffe:	4646      	mov	r6, r8
    for(y = 0; y < size; y++) {
  411000:	2700      	movs	r7, #0
  411002:	e00d      	b.n	411020 <shadow_draw_corner_buf+0xb8>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
  411004:	f10a 0101 	add.w	r1, sl, #1
  411008:	e7c5      	b.n	410f96 <shadow_draw_corner_buf+0x2e>
    if(sw_ori == 1) sw = 1;
  41100a:	f04f 0a01 	mov.w	sl, #1
  41100e:	e7f1      	b.n	410ff4 <shadow_draw_corner_buf+0x8c>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
  411010:	ea4f 0149 	mov.w	r1, r9, lsl #1
  411014:	4630      	mov	r0, r6
  411016:	4b43      	ldr	r3, [pc, #268]	; (411124 <shadow_draw_corner_buf+0x1bc>)
  411018:	4798      	blx	r3
        sh_ups_tmp_buf += size;
  41101a:	eb06 0649 	add.w	r6, r6, r9, lsl #1
    for(y = 0; y < size; y++) {
  41101e:	3701      	adds	r7, #1
  411020:	42af      	cmp	r7, r5
  411022:	da2c      	bge.n	41107e <shadow_draw_corner_buf+0x116>
        _lv_memset_ff(mask_line, size);
  411024:	4649      	mov	r1, r9
  411026:	4620      	mov	r0, r4
  411028:	4b3f      	ldr	r3, [pc, #252]	; (411128 <shadow_draw_corner_buf+0x1c0>)
  41102a:	4798      	blx	r3
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
  41102c:	ab0e      	add	r3, sp, #56	; 0x38
  41102e:	f853 bd24 	ldr.w	fp, [r3, #-36]!
  411032:	9300      	str	r3, [sp, #0]
  411034:	b22b      	sxth	r3, r5
  411036:	b23a      	sxth	r2, r7
  411038:	2100      	movs	r1, #0
  41103a:	4620      	mov	r0, r4
  41103c:	47d8      	blx	fp
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  41103e:	2800      	cmp	r0, #0
  411040:	d0e6      	beq.n	411010 <shadow_draw_corner_buf+0xa8>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
  411042:	7823      	ldrb	r3, [r4, #0]
  411044:	019b      	lsls	r3, r3, #6
  411046:	4650      	mov	r0, sl
  411048:	fb93 f3fa 	sdiv	r3, r3, sl
  41104c:	8033      	strh	r3, [r6, #0]
            for(i = 1; i < size; i++) {
  41104e:	2301      	movs	r3, #1
  411050:	e007      	b.n	411062 <shadow_draw_corner_buf+0xfa>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
  411052:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  411056:	441a      	add	r2, r3
  411058:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
  41105c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
            for(i = 1; i < size; i++) {
  411060:	3301      	adds	r3, #1
  411062:	42ab      	cmp	r3, r5
  411064:	dad9      	bge.n	41101a <shadow_draw_corner_buf+0xb2>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
  411066:	5ce2      	ldrb	r2, [r4, r3]
  411068:	18e1      	adds	r1, r4, r3
  41106a:	f811 1c01 	ldrb.w	r1, [r1, #-1]
  41106e:	428a      	cmp	r2, r1
  411070:	d0ef      	beq.n	411052 <shadow_draw_corner_buf+0xea>
                else sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
  411072:	0192      	lsls	r2, r2, #6
  411074:	fb92 f2f0 	sdiv	r2, r2, r0
  411078:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
  41107c:	e7f0      	b.n	411060 <shadow_draw_corner_buf+0xf8>
    _lv_mem_buf_release(mask_line);
  41107e:	4620      	mov	r0, r4
  411080:	4b2a      	ldr	r3, [pc, #168]	; (41112c <shadow_draw_corner_buf+0x1c4>)
  411082:	4798      	blx	r3
    if(sw == 1) {
  411084:	f1ba 0f01 	cmp.w	sl, #1
  411088:	d021      	beq.n	4110ce <shadow_draw_corner_buf+0x166>
    shadow_blur_corner(size, sw, sh_buf);
  41108a:	b22c      	sxth	r4, r5
  41108c:	4642      	mov	r2, r8
  41108e:	4651      	mov	r1, sl
  411090:	4620      	mov	r0, r4
  411092:	4b27      	ldr	r3, [pc, #156]	; (411130 <shadow_draw_corner_buf+0x1c8>)
  411094:	4798      	blx	r3
    sw += sw_ori & 1;
  411096:	9b03      	ldr	r3, [sp, #12]
  411098:	4453      	add	r3, sl
  41109a:	b219      	sxth	r1, r3
    if(sw > 1) {
  41109c:	2901      	cmp	r1, #1
  41109e:	dd32      	ble.n	411106 <shadow_draw_corner_buf+0x19e>
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
  4110a0:	f8b8 3000 	ldrh.w	r3, [r8]
  4110a4:	019b      	lsls	r3, r3, #6
  4110a6:	460e      	mov	r6, r1
  4110a8:	fb93 f3f1 	sdiv	r3, r3, r1
  4110ac:	f8a8 3000 	strh.w	r3, [r8]
        for(i = 1; i < (uint32_t) size * size; i++) {
  4110b0:	2301      	movs	r3, #1
  4110b2:	e011      	b.n	4110d8 <shadow_draw_corner_buf+0x170>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
  4110b4:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  4110b8:	0992      	lsrs	r2, r2, #6
  4110ba:	f808 2003 	strb.w	r2, [r8, r3]
        for(i = 0; i < size * size; i++) {
  4110be:	3301      	adds	r3, #1
  4110c0:	fb05 f205 	mul.w	r2, r5, r5
  4110c4:	4293      	cmp	r3, r2
  4110c6:	dbf5      	blt.n	4110b4 <shadow_draw_corner_buf+0x14c>
}
  4110c8:	b00f      	add	sp, #60	; 0x3c
  4110ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4110ce:	2300      	movs	r3, #0
  4110d0:	e7f6      	b.n	4110c0 <shadow_draw_corner_buf+0x158>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
  4110d2:	f828 0013 	strh.w	r0, [r8, r3, lsl #1]
        for(i = 1; i < (uint32_t) size * size; i++) {
  4110d6:	3301      	adds	r3, #1
  4110d8:	fb09 f209 	mul.w	r2, r9, r9
  4110dc:	4293      	cmp	r3, r2
  4110de:	d20e      	bcs.n	4110fe <shadow_draw_corner_buf+0x196>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
  4110e0:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  4110e4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  4110e8:	4418      	add	r0, r3
  4110ea:	f838 0010 	ldrh.w	r0, [r8, r0, lsl #1]
  4110ee:	4282      	cmp	r2, r0
  4110f0:	d0ef      	beq.n	4110d2 <shadow_draw_corner_buf+0x16a>
            else sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
  4110f2:	0192      	lsls	r2, r2, #6
  4110f4:	fb92 f2f6 	sdiv	r2, r2, r6
  4110f8:	f828 2013 	strh.w	r2, [r8, r3, lsl #1]
  4110fc:	e7eb      	b.n	4110d6 <shadow_draw_corner_buf+0x16e>
        shadow_blur_corner(size, sw, sh_buf);
  4110fe:	4642      	mov	r2, r8
  411100:	4620      	mov	r0, r4
  411102:	4b0b      	ldr	r3, [pc, #44]	; (411130 <shadow_draw_corner_buf+0x1c8>)
  411104:	4798      	blx	r3
        for(i = 1; i < (uint32_t) size * size; i++) {
  411106:	2300      	movs	r3, #0
    for(x = 0; x < size * size; x++) {
  411108:	fb05 f205 	mul.w	r2, r5, r5
  41110c:	4293      	cmp	r3, r2
  41110e:	dadb      	bge.n	4110c8 <shadow_draw_corner_buf+0x160>
        res_buf[x] = sh_buf[x];
  411110:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  411114:	f808 2003 	strb.w	r2, [r8, r3]
    for(x = 0; x < size * size; x++) {
  411118:	3301      	adds	r3, #1
  41111a:	e7f5      	b.n	411108 <shadow_draw_corner_buf+0x1a0>
  41111c:	00410d5d 	.word	0x00410d5d
  411120:	00417895 	.word	0x00417895
  411124:	00417a21 	.word	0x00417a21
  411128:	00417a79 	.word	0x00417a79
  41112c:	00417645 	.word	0x00417645
  411130:	00410df9 	.word	0x00410df9

00411134 <draw_shadow>:
{
  411134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411138:	b0a7      	sub	sp, #156	; 0x9c
    if(dsc->shadow_width == 0) return;
  41113a:	f9b2 4022 	ldrsh.w	r4, [r2, #34]	; 0x22
  41113e:	2c00      	cmp	r4, #0
  411140:	f000 83f0 	beq.w	411924 <draw_shadow+0x7f0>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
  411144:	f892 702a 	ldrb.w	r7, [r2, #42]	; 0x2a
  411148:	2f02      	cmp	r7, #2
  41114a:	f240 83eb 	bls.w	411924 <draw_shadow+0x7f0>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
  41114e:	2c01      	cmp	r4, #1
  411150:	d07b      	beq.n	41124a <draw_shadow+0x116>
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
  411152:	8806      	ldrh	r6, [r0, #0]
  411154:	8c93      	ldrh	r3, [r2, #36]	; 0x24
  411156:	441e      	add	r6, r3
  411158:	b2b6      	uxth	r6, r6
  41115a:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
  41115e:	eba6 060e 	sub.w	r6, r6, lr
  411162:	b2b6      	uxth	r6, r6
  411164:	f8ad 6090 	strh.w	r6, [sp, #144]	; 0x90
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
  411168:	8885      	ldrh	r5, [r0, #4]
  41116a:	441d      	add	r5, r3
  41116c:	fa1e f585 	uxtah	r5, lr, r5
  411170:	b2ad      	uxth	r5, r5
  411172:	f8ad 5094 	strh.w	r5, [sp, #148]	; 0x94
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
  411176:	8843      	ldrh	r3, [r0, #2]
  411178:	f8b2 c026 	ldrh.w	ip, [r2, #38]	; 0x26
  41117c:	4463      	add	r3, ip
  41117e:	b29b      	uxth	r3, r3
  411180:	eba3 030e 	sub.w	r3, r3, lr
  411184:	b29b      	uxth	r3, r3
  411186:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
  41118a:	f8b0 8006 	ldrh.w	r8, [r0, #6]
  41118e:	44c4      	add	ip, r8
  411190:	fa1e fe8c 	uxtah	lr, lr, ip
  411194:	fa1f fe8e 	uxth.w	lr, lr
  411198:	f8ad e096 	strh.w	lr, [sp, #150]	; 0x96
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
  41119c:	46a0      	mov	r8, r4
  41119e:	2c00      	cmp	r4, #0
  4111a0:	db5c      	blt.n	41125c <draw_shadow+0x128>
  4111a2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4111a6:	f1c8 0800 	rsb	r8, r8, #0
  4111aa:	fa1f f888 	uxth.w	r8, r8
  4111ae:	eb06 0c08 	add.w	ip, r6, r8
  4111b2:	fa1f fc8c 	uxth.w	ip, ip
  4111b6:	f10c 3cff 	add.w	ip, ip, #4294967295
  4111ba:	f8ad c088 	strh.w	ip, [sp, #136]	; 0x88
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
  4111be:	46a4      	mov	ip, r4
  4111c0:	2c00      	cmp	r4, #0
  4111c2:	db4e      	blt.n	411262 <draw_shadow+0x12e>
  4111c4:	f3cc 0c4f 	ubfx	ip, ip, #1, #16
  4111c8:	4465      	add	r5, ip
  4111ca:	b2ad      	uxth	r5, r5
  4111cc:	3501      	adds	r5, #1
  4111ce:	f8ad 508c 	strh.w	r5, [sp, #140]	; 0x8c
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
  4111d2:	eb03 0608 	add.w	r6, r3, r8
  4111d6:	b2b6      	uxth	r6, r6
  4111d8:	3e01      	subs	r6, #1
  4111da:	f8ad 608a 	strh.w	r6, [sp, #138]	; 0x8a
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
  4111de:	eb0e 030c 	add.w	r3, lr, ip
  4111e2:	b29b      	uxth	r3, r3
  4111e4:	3301      	adds	r3, #1
  4111e6:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  4111ea:	2ffd      	cmp	r7, #253	; 0xfd
  4111ec:	d900      	bls.n	4111f0 <draw_shadow+0xbc>
  4111ee:	27ff      	movs	r7, #255	; 0xff
  4111f0:	4615      	mov	r5, r2
  4111f2:	4688      	mov	r8, r1
  4111f4:	9104      	str	r1, [sp, #16]
  4111f6:	4681      	mov	r9, r0
  4111f8:	9009      	str	r0, [sp, #36]	; 0x24
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  4111fa:	4b9a      	ldr	r3, [pc, #616]	; (411464 <draw_shadow+0x330>)
  4111fc:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  4111fe:	4b9a      	ldr	r3, [pc, #616]	; (411468 <draw_shadow+0x334>)
  411200:	4798      	blx	r3
  411202:	4606      	mov	r6, r0
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
  411204:	4642      	mov	r2, r8
  411206:	a922      	add	r1, sp, #136	; 0x88
  411208:	a820      	add	r0, sp, #128	; 0x80
  41120a:	4b98      	ldr	r3, [pc, #608]	; (41146c <draw_shadow+0x338>)
  41120c:	4798      	blx	r3
    if(is_common == false) return;
  41120e:	9006      	str	r0, [sp, #24]
  411210:	2800      	cmp	r0, #0
  411212:	f000 8387 	beq.w	411924 <draw_shadow+0x7f0>
    draw_area.x1 -= disp_area->x1;
  411216:	8a31      	ldrh	r1, [r6, #16]
  411218:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  41121c:	1a5b      	subs	r3, r3, r1
  41121e:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    draw_area.y1 -= disp_area->y1;
  411222:	8a72      	ldrh	r2, [r6, #18]
  411224:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
  411228:	1a9b      	subs	r3, r3, r2
  41122a:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    draw_area.x2 -= disp_area->x1;
  41122e:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  411232:	1a5b      	subs	r3, r3, r1
  411234:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    draw_area.y2 -= disp_area->y1;
  411238:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
  41123c:	1a9b      	subs	r3, r3, r2
  41123e:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    const uint8_t * s8 = (const uint8_t *)src;
  411242:	4649      	mov	r1, r9
    uint8_t * d8 = (uint8_t *)dst;
  411244:	aa1e      	add	r2, sp, #120	; 0x78
  411246:	2308      	movs	r3, #8
  411248:	e013      	b.n	411272 <draw_shadow+0x13e>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
  41124a:	6a53      	ldr	r3, [r2, #36]	; 0x24
  41124c:	2b00      	cmp	r3, #0
  41124e:	d180      	bne.n	411152 <draw_shadow+0x1e>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
  411250:	f9b2 3028 	ldrsh.w	r3, [r2, #40]	; 0x28
  411254:	2b00      	cmp	r3, #0
  411256:	f73f af7c 	bgt.w	411152 <draw_shadow+0x1e>
  41125a:	e363      	b.n	411924 <draw_shadow+0x7f0>
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
  41125c:	f104 0801 	add.w	r8, r4, #1
  411260:	e79f      	b.n	4111a2 <draw_shadow+0x6e>
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
  411262:	f104 0c01 	add.w	ip, r4, #1
  411266:	e7ad      	b.n	4111c4 <draw_shadow+0x90>
        *d8 = *s8;
  411268:	f811 0b01 	ldrb.w	r0, [r1], #1
  41126c:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  411270:	3b01      	subs	r3, #1
    while(len) {
  411272:	2b00      	cmp	r3, #0
  411274:	d1f8      	bne.n	411268 <draw_shadow+0x134>
    bg_coords.x1 += 1;
  411276:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
  41127a:	3201      	adds	r2, #1
  41127c:	b296      	uxth	r6, r2
  41127e:	f8ad 6078 	strh.w	r6, [sp, #120]	; 0x78
    bg_coords.y1 += 1;
  411282:	f8bd 007a 	ldrh.w	r0, [sp, #122]	; 0x7a
  411286:	3001      	adds	r0, #1
  411288:	b280      	uxth	r0, r0
  41128a:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    bg_coords.x2 -= 1;
  41128e:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
  411292:	3a01      	subs	r2, #1
  411294:	b292      	uxth	r2, r2
  411296:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
    bg_coords.y2 -= 1;
  41129a:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
  41129e:	3b01      	subs	r3, #1
  4112a0:	b29b      	uxth	r3, r3
  4112a2:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    int32_t r_bg = dsc->radius;
  4112a6:	f9b5 1000 	ldrsh.w	r1, [r5]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4112aa:	1b92      	subs	r2, r2, r6
  4112ac:	b292      	uxth	r2, r2
  4112ae:	3201      	adds	r2, #1
  4112b0:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4112b2:	1a1e      	subs	r6, r3, r0
  4112b4:	b2b6      	uxth	r6, r6
  4112b6:	3601      	adds	r6, #1
  4112b8:	b236      	sxth	r6, r6
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
  4112ba:	42b2      	cmp	r2, r6
  4112bc:	da00      	bge.n	4112c0 <draw_shadow+0x18c>
  4112be:	4616      	mov	r6, r2
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
  4112c0:	1076      	asrs	r6, r6, #1
  4112c2:	42b1      	cmp	r1, r6
  4112c4:	dc00      	bgt.n	4112c8 <draw_shadow+0x194>
    int32_t r_bg = dsc->radius;
  4112c6:	460e      	mov	r6, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4112c8:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
  4112cc:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
  4112d0:	1ad2      	subs	r2, r2, r3
  4112d2:	b292      	uxth	r2, r2
  4112d4:	3201      	adds	r2, #1
  4112d6:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4112d8:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
  4112dc:	f8bd 0092 	ldrh.w	r0, [sp, #146]	; 0x92
  4112e0:	1a1b      	subs	r3, r3, r0
  4112e2:	b29b      	uxth	r3, r3
  4112e4:	3301      	adds	r3, #1
  4112e6:	fa0f f883 	sxth.w	r8, r3
    short_side = LV_MATH_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
  4112ea:	4590      	cmp	r8, r2
  4112ec:	dd00      	ble.n	4112f0 <draw_shadow+0x1bc>
  4112ee:	4690      	mov	r8, r2
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
  4112f0:	ea4f 0868 	mov.w	r8, r8, asr #1
  4112f4:	4541      	cmp	r1, r8
  4112f6:	dc00      	bgt.n	4112fa <draw_shadow+0x1c6>
    int32_t r_sh = dsc->radius;
  4112f8:	4688      	mov	r8, r1
    int32_t corner_size = sw  + r_sh;
  4112fa:	4444      	add	r4, r8
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
  4112fc:	fb04 f004 	mul.w	r0, r4, r4
  411300:	0040      	lsls	r0, r0, #1
  411302:	4b5b      	ldr	r3, [pc, #364]	; (411470 <draw_shadow+0x33c>)
  411304:	4798      	blx	r3
  411306:	4601      	mov	r1, r0
  411308:	9007      	str	r0, [sp, #28]
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
  41130a:	fa0f f388 	sxth.w	r3, r8
  41130e:	f9b5 2022 	ldrsh.w	r2, [r5, #34]	; 0x22
  411312:	a824      	add	r0, sp, #144	; 0x90
  411314:	f8df 8168 	ldr.w	r8, [pc, #360]	; 411480 <draw_shadow+0x34c>
  411318:	47c0      	blx	r8
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
  41131a:	f8bd 208a 	ldrh.w	r2, [sp, #138]	; 0x8a
  41131e:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  411322:	1a9b      	subs	r3, r3, r2
  411324:	b29b      	uxth	r3, r3
  411326:	3301      	adds	r3, #1
  411328:	b21b      	sxth	r3, r3
  41132a:	2b00      	cmp	r3, #0
  41132c:	db21      	blt.n	411372 <draw_shadow+0x23e>
  41132e:	eb02 0363 	add.w	r3, r2, r3, asr #1
  411332:	b29b      	uxth	r3, r3
  411334:	930d      	str	r3, [sp, #52]	; 0x34
  411336:	fa0f fb83 	sxth.w	fp, r3
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
  41133a:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41133e:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  411342:	1a9b      	subs	r3, r3, r2
  411344:	b29b      	uxth	r3, r3
  411346:	3301      	adds	r3, #1
  411348:	b21b      	sxth	r3, r3
  41134a:	2b00      	cmp	r3, #0
  41134c:	db13      	blt.n	411376 <draw_shadow+0x242>
  41134e:	eb02 0363 	add.w	r3, r2, r3, asr #1
  411352:	b29b      	uxth	r3, r3
  411354:	930e      	str	r3, [sp, #56]	; 0x38
  411356:	b21b      	sxth	r3, r3
  411358:	930c      	str	r3, [sp, #48]	; 0x30
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
  41135a:	4b46      	ldr	r3, [pc, #280]	; (411474 <draw_shadow+0x340>)
  41135c:	4798      	blx	r3
  41135e:	b960      	cbnz	r0, 41137a <draw_shadow+0x246>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
  411360:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  411362:	2b00      	cmp	r3, #0
  411364:	d17a      	bne.n	41145c <draw_shadow+0x328>
    else if(dsc->shadow_spread != 0) simple_mode = false;
  411366:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
  41136a:	b143      	cbz	r3, 41137e <draw_shadow+0x24a>
  41136c:	2300      	movs	r3, #0
  41136e:	9306      	str	r3, [sp, #24]
  411370:	e005      	b.n	41137e <draw_shadow+0x24a>
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
  411372:	3301      	adds	r3, #1
  411374:	e7db      	b.n	41132e <draw_shadow+0x1fa>
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
  411376:	3301      	adds	r3, #1
  411378:	e7e9      	b.n	41134e <draw_shadow+0x21a>
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
  41137a:	2300      	movs	r3, #0
  41137c:	9306      	str	r3, [sp, #24]
  41137e:	f8bd 008c 	ldrh.w	r0, [sp, #140]	; 0x8c
  411382:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  411386:	1ac0      	subs	r0, r0, r3
  411388:	b280      	uxth	r0, r0
  41138a:	3001      	adds	r0, #1
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
  41138c:	b200      	sxth	r0, r0
  41138e:	4b38      	ldr	r3, [pc, #224]	; (411470 <draw_shadow+0x33c>)
  411390:	4798      	blx	r3
  411392:	9005      	str	r0, [sp, #20]
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
  411394:	b233      	sxth	r3, r6
  411396:	461a      	mov	r2, r3
  411398:	9308      	str	r3, [sp, #32]
  41139a:	2301      	movs	r3, #1
  41139c:	a91e      	add	r1, sp, #120	; 0x78
  41139e:	a817      	add	r0, sp, #92	; 0x5c
  4113a0:	4e35      	ldr	r6, [pc, #212]	; (411478 <draw_shadow+0x344>)
  4113a2:	47b0      	blx	r6
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  4113a4:	2100      	movs	r1, #0
  4113a6:	a817      	add	r0, sp, #92	; 0x5c
  4113a8:	4b34      	ldr	r3, [pc, #208]	; (41147c <draw_shadow+0x348>)
  4113aa:	4798      	blx	r3
  4113ac:	900b      	str	r0, [sp, #44]	; 0x2c
    a.x2 = sh_area.x2;
  4113ae:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  4113b2:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  4113b6:	b29b      	uxth	r3, r3
  4113b8:	b2a6      	uxth	r6, r4
  4113ba:	1b9b      	subs	r3, r3, r6
  4113bc:	b29b      	uxth	r3, r3
  4113be:	3301      	adds	r3, #1
  4113c0:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y1;
  4113c4:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  4113c8:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = a.y1 + corner_size - 1;
  4113cc:	fa16 f383 	uxtah	r3, r6, r3
  4113d0:	b29b      	uxth	r3, r3
  4113d2:	3b01      	subs	r3, #1
  4113d4:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    bool has_com = _lv_area_intersect(&ca, &a, clip);
  4113d8:	9a04      	ldr	r2, [sp, #16]
  4113da:	a915      	add	r1, sp, #84	; 0x54
  4113dc:	a813      	add	r0, sp, #76	; 0x4c
  4113de:	4b23      	ldr	r3, [pc, #140]	; (41146c <draw_shadow+0x338>)
  4113e0:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4113e2:	2800      	cmp	r0, #0
  4113e4:	d14e      	bne.n	411484 <draw_shadow+0x350>
    a.x2 = sh_area.x2;
  4113e6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  4113ea:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  4113ee:	b29b      	uxth	r3, r3
  4113f0:	1b9b      	subs	r3, r3, r6
  4113f2:	b29b      	uxth	r3, r3
  4113f4:	3301      	adds	r3, #1
  4113f6:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y2 - corner_size + 1;
  4113fa:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  4113fe:	b293      	uxth	r3, r2
  411400:	1b9b      	subs	r3, r3, r6
  411402:	b29b      	uxth	r3, r3
  411404:	3301      	adds	r3, #1
  411406:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  41140a:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  41140e:	9a04      	ldr	r2, [sp, #16]
  411410:	a915      	add	r1, sp, #84	; 0x54
  411412:	a813      	add	r0, sp, #76	; 0x4c
  411414:	4b15      	ldr	r3, [pc, #84]	; (41146c <draw_shadow+0x338>)
  411416:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  411418:	2800      	cmp	r0, #0
  41141a:	f040 80b0 	bne.w	41157e <draw_shadow+0x44a>
    a.x2 = sh_area.x2;
  41141e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  411422:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  411426:	b29b      	uxth	r3, r3
  411428:	1b9b      	subs	r3, r3, r6
  41142a:	b29b      	uxth	r3, r3
  41142c:	3301      	adds	r3, #1
  41142e:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y1 + corner_size;
  411432:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  411436:	4433      	add	r3, r6
  411438:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  41143c:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  411440:	1b9b      	subs	r3, r3, r6
  411442:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  411446:	9a04      	ldr	r2, [sp, #16]
  411448:	a915      	add	r1, sp, #84	; 0x54
  41144a:	a813      	add	r0, sp, #76	; 0x4c
  41144c:	4b07      	ldr	r3, [pc, #28]	; (41146c <draw_shadow+0x338>)
  41144e:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  411450:	2800      	cmp	r0, #0
  411452:	f040 8115 	bne.w	411680 <draw_shadow+0x54c>
  411456:	9907      	ldr	r1, [sp, #28]
  411458:	2000      	movs	r0, #0
  41145a:	e1ab      	b.n	4117b4 <draw_shadow+0x680>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
  41145c:	2300      	movs	r3, #0
  41145e:	9306      	str	r3, [sp, #24]
  411460:	e78d      	b.n	41137e <draw_shadow+0x24a>
  411462:	bf00      	nop
  411464:	00409709 	.word	0x00409709
  411468:	00415d25 	.word	0x00415d25
  41146c:	004164e3 	.word	0x004164e3
  411470:	00417895 	.word	0x00417895
  411474:	00410aa1 	.word	0x00410aa1
  411478:	00410d5d 	.word	0x00410d5d
  41147c:	004109a5 	.word	0x004109a5
  411480:	00410f69 	.word	0x00410f69
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  411484:	9a08      	ldr	r2, [sp, #32]
  411486:	a91e      	add	r1, sp, #120	; 0x78
  411488:	a815      	add	r0, sp, #84	; 0x54
  41148a:	4ba2      	ldr	r3, [pc, #648]	; (411714 <draw_shadow+0x5e0>)
  41148c:	4798      	blx	r3
  41148e:	2800      	cmp	r0, #0
  411490:	d1a9      	bne.n	4113e6 <draw_shadow+0x2b2>
        if(ca.y2 > h_half) ca.y2 = h_half;
  411492:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
  411496:	459b      	cmp	fp, r3
  411498:	da01      	bge.n	41149e <draw_shadow+0x36a>
  41149a:	f8ad b052 	strh.w	fp, [sp, #82]	; 0x52
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
  41149e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  4114a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4114a4:	429a      	cmp	r2, r3
  4114a6:	db03      	blt.n	4114b0 <draw_shadow+0x37c>
  4114a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4114aa:	3301      	adds	r3, #1
  4114ac:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4114b0:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
  4114b4:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  4114b8:	b291      	uxth	r1, r2
  4114ba:	1a5b      	subs	r3, r3, r1
  4114bc:	b29b      	uxth	r3, r3
  4114be:	3301      	adds	r3, #1
  4114c0:	b21b      	sxth	r3, r3
  4114c2:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4114c4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  4114c8:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  4114cc:	b288      	uxth	r0, r1
  4114ce:	1a1b      	subs	r3, r3, r0
  4114d0:	b29b      	uxth	r3, r3
  4114d2:	3301      	adds	r3, #1
  4114d4:	b21b      	sxth	r3, r3
  4114d6:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  4114d8:	2b00      	cmp	r3, #0
  4114da:	dd84      	ble.n	4113e6 <draw_shadow+0x2b2>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  4114dc:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  4114e0:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  4114e4:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  4114e8:	eba2 0808 	sub.w	r8, r2, r8
  4114ec:	fb08 1804 	mla	r8, r8, r4, r1
  4114f0:	9b07      	ldr	r3, [sp, #28]
  4114f2:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  4114f4:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  4114f6:	aa11      	add	r2, sp, #68	; 0x44
  4114f8:	2308      	movs	r3, #8
    while(len) {
  4114fa:	b12b      	cbz	r3, 411508 <draw_shadow+0x3d4>
        *d8 = *s8;
  4114fc:	f811 0b01 	ldrb.w	r0, [r1], #1
  411500:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  411504:	3b01      	subs	r3, #1
  411506:	e7f8      	b.n	4114fa <draw_shadow+0x3c6>
            fa.y2 = fa.y1;
  411508:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  41150c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  411510:	f04f 0900 	mov.w	r9, #0
  411514:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  411518:	46a3      	mov	fp, r4
  41151a:	46f2      	mov	sl, lr
  41151c:	e017      	b.n	41154e <draw_shadow+0x41a>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  41151e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  411522:	9302      	str	r3, [sp, #8]
  411524:	9701      	str	r7, [sp, #4]
  411526:	9000      	str	r0, [sp, #0]
  411528:	9b05      	ldr	r3, [sp, #20]
  41152a:	8c2a      	ldrh	r2, [r5, #32]
  41152c:	a911      	add	r1, sp, #68	; 0x44
  41152e:	9804      	ldr	r0, [sp, #16]
  411530:	4c79      	ldr	r4, [pc, #484]	; (411718 <draw_shadow+0x5e4>)
  411532:	47a0      	blx	r4
                fa.y1++;
  411534:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  411538:	3301      	adds	r3, #1
  41153a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  41153e:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  411542:	3301      	adds	r3, #1
  411544:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  411548:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  41154a:	f109 0901 	add.w	r9, r9, #1
  41154e:	45d1      	cmp	r9, sl
  411550:	da11      	bge.n	411576 <draw_shadow+0x442>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  411552:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  411554:	4641      	mov	r1, r8
  411556:	9c05      	ldr	r4, [sp, #20]
  411558:	4620      	mov	r0, r4
  41155a:	4b70      	ldr	r3, [pc, #448]	; (41171c <draw_shadow+0x5e8>)
  41155c:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  41155e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411560:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  411564:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  411568:	4620      	mov	r0, r4
  41156a:	4c6d      	ldr	r4, [pc, #436]	; (411720 <draw_shadow+0x5ec>)
  41156c:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  41156e:	2801      	cmp	r0, #1
  411570:	d1d5      	bne.n	41151e <draw_shadow+0x3ea>
  411572:	2002      	movs	r0, #2
  411574:	e7d3      	b.n	41151e <draw_shadow+0x3ea>
  411576:	465c      	mov	r4, fp
  411578:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
  41157c:	e733      	b.n	4113e6 <draw_shadow+0x2b2>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41157e:	9a08      	ldr	r2, [sp, #32]
  411580:	a91e      	add	r1, sp, #120	; 0x78
  411582:	a815      	add	r0, sp, #84	; 0x54
  411584:	4b63      	ldr	r3, [pc, #396]	; (411714 <draw_shadow+0x5e0>)
  411586:	4798      	blx	r3
  411588:	2800      	cmp	r0, #0
  41158a:	f47f af48 	bne.w	41141e <draw_shadow+0x2ea>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
  41158e:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  411592:	459b      	cmp	fp, r3
  411594:	db03      	blt.n	41159e <draw_shadow+0x46a>
  411596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  411598:	3301      	adds	r3, #1
  41159a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
  41159e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  4115a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4115a4:	429a      	cmp	r2, r3
  4115a6:	db03      	blt.n	4115b0 <draw_shadow+0x47c>
  4115a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4115aa:	3301      	adds	r3, #1
  4115ac:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4115b0:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  4115b4:	b293      	uxth	r3, r2
  4115b6:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
  4115ba:	1a5b      	subs	r3, r3, r1
  4115bc:	b29b      	uxth	r3, r3
  4115be:	3301      	adds	r3, #1
  4115c0:	b21b      	sxth	r3, r3
  4115c2:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4115c4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  4115c8:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  4115cc:	b288      	uxth	r0, r1
  4115ce:	1a1b      	subs	r3, r3, r0
  4115d0:	b29b      	uxth	r3, r3
  4115d2:	3301      	adds	r3, #1
  4115d4:	b21b      	sxth	r3, r3
  4115d6:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  4115d8:	2b00      	cmp	r3, #0
  4115da:	f77f af20 	ble.w	41141e <draw_shadow+0x2ea>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  4115de:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  4115e2:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  4115e6:	f9bd 805a 	ldrsh.w	r8, [sp, #90]	; 0x5a
  4115ea:	eba8 0802 	sub.w	r8, r8, r2
  4115ee:	fb08 1804 	mla	r8, r8, r4, r1
  4115f2:	9b07      	ldr	r3, [sp, #28]
  4115f4:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  4115f6:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  4115f8:	aa11      	add	r2, sp, #68	; 0x44
  4115fa:	2308      	movs	r3, #8
    while(len) {
  4115fc:	b12b      	cbz	r3, 41160a <draw_shadow+0x4d6>
        *d8 = *s8;
  4115fe:	f811 0b01 	ldrb.w	r0, [r1], #1
  411602:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  411606:	3b01      	subs	r3, #1
  411608:	e7f8      	b.n	4115fc <draw_shadow+0x4c8>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
  41160a:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  41160e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            for(y = 0; y < h; y++) {
  411612:	f04f 0900 	mov.w	r9, #0
  411616:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  41161a:	46a3      	mov	fp, r4
  41161c:	46f2      	mov	sl, lr
  41161e:	e017      	b.n	411650 <draw_shadow+0x51c>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  411620:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  411624:	9302      	str	r3, [sp, #8]
  411626:	9701      	str	r7, [sp, #4]
  411628:	9000      	str	r0, [sp, #0]
  41162a:	9b05      	ldr	r3, [sp, #20]
  41162c:	8c2a      	ldrh	r2, [r5, #32]
  41162e:	a911      	add	r1, sp, #68	; 0x44
  411630:	9804      	ldr	r0, [sp, #16]
  411632:	4c39      	ldr	r4, [pc, #228]	; (411718 <draw_shadow+0x5e4>)
  411634:	47a0      	blx	r4
                fa.y1--;
  411636:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  41163a:	3b01      	subs	r3, #1
  41163c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2--;
  411640:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  411644:	3b01      	subs	r3, #1
  411646:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  41164a:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  41164c:	f109 0901 	add.w	r9, r9, #1
  411650:	45d1      	cmp	r9, sl
  411652:	da11      	bge.n	411678 <draw_shadow+0x544>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  411654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  411656:	4641      	mov	r1, r8
  411658:	9c05      	ldr	r4, [sp, #20]
  41165a:	4620      	mov	r0, r4
  41165c:	4b2f      	ldr	r3, [pc, #188]	; (41171c <draw_shadow+0x5e8>)
  41165e:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  411660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411662:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  411666:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  41166a:	4620      	mov	r0, r4
  41166c:	4c2c      	ldr	r4, [pc, #176]	; (411720 <draw_shadow+0x5ec>)
  41166e:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  411670:	2801      	cmp	r0, #1
  411672:	d1d5      	bne.n	411620 <draw_shadow+0x4ec>
  411674:	2002      	movs	r0, #2
  411676:	e7d3      	b.n	411620 <draw_shadow+0x4ec>
  411678:	465c      	mov	r4, fp
  41167a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  41167e:	e6ce      	b.n	41141e <draw_shadow+0x2ea>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  411680:	9a08      	ldr	r2, [sp, #32]
  411682:	a91e      	add	r1, sp, #120	; 0x78
  411684:	a815      	add	r0, sp, #84	; 0x54
  411686:	4b23      	ldr	r3, [pc, #140]	; (411714 <draw_shadow+0x5e0>)
  411688:	4798      	blx	r3
  41168a:	2800      	cmp	r0, #0
  41168c:	f47f aee3 	bne.w	411456 <draw_shadow+0x322>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
  411690:	9b06      	ldr	r3, [sp, #24]
  411692:	b14b      	cbz	r3, 4116a8 <draw_shadow+0x574>
  411694:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411696:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  41169a:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
  41169e:	4293      	cmp	r3, r2
  4116a0:	bfb8      	it	lt
  4116a2:	4613      	movlt	r3, r2
  4116a4:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  4116a8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  4116ac:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
  4116b0:	b291      	uxth	r1, r2
  4116b2:	1a5b      	subs	r3, r3, r1
  4116b4:	b29b      	uxth	r3, r3
  4116b6:	3301      	adds	r3, #1
  4116b8:	b21b      	sxth	r3, r3
  4116ba:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  4116bc:	2b00      	cmp	r3, #0
  4116be:	f77f aeca 	ble.w	411456 <draw_shadow+0x322>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4116c2:	f8bd a052 	ldrh.w	sl, [sp, #82]	; 0x52
  4116c6:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  4116ca:	ebaa 0a03 	sub.w	sl, sl, r3
  4116ce:	fa1f fa8a 	uxth.w	sl, sl
  4116d2:	f10a 0a01 	add.w	sl, sl, #1
  4116d6:	fa0f fa8a 	sxth.w	sl, sl
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
  4116da:	1e63      	subs	r3, r4, #1
            sh_buf_tmp += ca.x1 - a.x1;
  4116dc:	f9bd 1054 	ldrsh.w	r1, [sp, #84]	; 0x54
  4116e0:	1a52      	subs	r2, r2, r1
  4116e2:	fb03 2304 	mla	r3, r3, r4, r2
  4116e6:	9a07      	ldr	r2, [sp, #28]
  4116e8:	18d3      	adds	r3, r2, r3
  4116ea:	930e      	str	r3, [sp, #56]	; 0x38
    const uint8_t * s8 = (const uint8_t *)src;
  4116ec:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  4116ee:	aa11      	add	r2, sp, #68	; 0x44
  4116f0:	2308      	movs	r3, #8
    while(len) {
  4116f2:	b12b      	cbz	r3, 411700 <draw_shadow+0x5cc>
        *d8 = *s8;
  4116f4:	f811 0b01 	ldrb.w	r0, [r1], #1
  4116f8:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4116fc:	3b01      	subs	r3, #1
  4116fe:	e7f8      	b.n	4116f2 <draw_shadow+0x5be>
            fa.y2 = fa.y1;
  411700:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  411704:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  411708:	f04f 0800 	mov.w	r8, #0
  41170c:	970f      	str	r7, [sp, #60]	; 0x3c
  41170e:	46a1      	mov	r9, r4
  411710:	9c06      	ldr	r4, [sp, #24]
  411712:	e02a      	b.n	41176a <draw_shadow+0x636>
  411714:	00416759 	.word	0x00416759
  411718:	0040d2b5 	.word	0x0040d2b5
  41171c:	004176fd 	.word	0x004176fd
  411720:	004109d9 	.word	0x004109d9
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  411724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411726:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  41172a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  41172e:	9805      	ldr	r0, [sp, #20]
  411730:	4fbc      	ldr	r7, [pc, #752]	; (411a24 <draw_shadow+0x8f0>)
  411732:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  411734:	2801      	cmp	r0, #1
  411736:	d023      	beq.n	411780 <draw_shadow+0x64c>
                _lv_blend_fill(clip, &fa,
  411738:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  41173c:	9302      	str	r3, [sp, #8]
  41173e:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
  411742:	9301      	str	r3, [sp, #4]
  411744:	9000      	str	r0, [sp, #0]
  411746:	9b05      	ldr	r3, [sp, #20]
  411748:	8c2a      	ldrh	r2, [r5, #32]
  41174a:	a911      	add	r1, sp, #68	; 0x44
  41174c:	9804      	ldr	r0, [sp, #16]
  41174e:	4fb6      	ldr	r7, [pc, #728]	; (411a28 <draw_shadow+0x8f4>)
  411750:	47b8      	blx	r7
                fa.y1++;
  411752:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  411756:	3301      	adds	r3, #1
  411758:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  41175c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  411760:	3301      	adds	r3, #1
  411762:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  411766:	f108 0801 	add.w	r8, r8, #1
  41176a:	45d0      	cmp	r8, sl
  41176c:	da0a      	bge.n	411784 <draw_shadow+0x650>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  41176e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  411770:	990e      	ldr	r1, [sp, #56]	; 0x38
  411772:	9805      	ldr	r0, [sp, #20]
  411774:	4bad      	ldr	r3, [pc, #692]	; (411a2c <draw_shadow+0x8f8>)
  411776:	4798      	blx	r3
                if(simple_mode) {
  411778:	2c00      	cmp	r4, #0
  41177a:	d0d3      	beq.n	411724 <draw_shadow+0x5f0>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  41177c:	2002      	movs	r0, #2
  41177e:	e7db      	b.n	411738 <draw_shadow+0x604>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  411780:	2002      	movs	r0, #2
  411782:	e7d9      	b.n	411738 <draw_shadow+0x604>
  411784:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  411786:	464c      	mov	r4, r9
  411788:	e665      	b.n	411456 <draw_shadow+0x322>
        for(x = 0; x < corner_size / 2; x++) {
  41178a:	ebb3 0f62 	cmp.w	r3, r2, asr #1
  41178e:	da0f      	bge.n	4117b0 <draw_shadow+0x67c>
            lv_opa_t tmp = sh_buf_tmp[x];
  411790:	f811 e003 	ldrb.w	lr, [r1, r3]
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
  411794:	1ae2      	subs	r2, r4, r3
  411796:	3a01      	subs	r2, #1
  411798:	f811 c002 	ldrb.w	ip, [r1, r2]
  41179c:	f801 c003 	strb.w	ip, [r1, r3]
            sh_buf_tmp[corner_size - x - 1] = tmp;
  4117a0:	f801 e002 	strb.w	lr, [r1, r2]
        for(x = 0; x < corner_size / 2; x++) {
  4117a4:	3301      	adds	r3, #1
  4117a6:	4622      	mov	r2, r4
  4117a8:	2c00      	cmp	r4, #0
  4117aa:	daee      	bge.n	41178a <draw_shadow+0x656>
  4117ac:	1c62      	adds	r2, r4, #1
  4117ae:	e7ec      	b.n	41178a <draw_shadow+0x656>
        sh_buf_tmp += corner_size;
  4117b0:	4421      	add	r1, r4
    for(y = 0; y < corner_size; y++) {
  4117b2:	3001      	adds	r0, #1
  4117b4:	42a0      	cmp	r0, r4
  4117b6:	da01      	bge.n	4117bc <draw_shadow+0x688>
  4117b8:	2300      	movs	r3, #0
  4117ba:	e7f4      	b.n	4117a6 <draw_shadow+0x672>
    a.x1 = sh_area.x1;
  4117bc:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  4117c0:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  4117c4:	fa16 f383 	uxtah	r3, r6, r3
  4117c8:	b29b      	uxth	r3, r3
  4117ca:	3b01      	subs	r3, #1
  4117cc:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1;
  4117d0:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  4117d4:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = a.y1 + corner_size - 1;
  4117d8:	fa16 f383 	uxtah	r3, r6, r3
  4117dc:	b29b      	uxth	r3, r3
  4117de:	3b01      	subs	r3, #1
  4117e0:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  4117e4:	9a04      	ldr	r2, [sp, #16]
  4117e6:	a915      	add	r1, sp, #84	; 0x54
  4117e8:	a813      	add	r0, sp, #76	; 0x4c
  4117ea:	4b91      	ldr	r3, [pc, #580]	; (411a30 <draw_shadow+0x8fc>)
  4117ec:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4117ee:	2800      	cmp	r0, #0
  4117f0:	f040 809b 	bne.w	41192a <draw_shadow+0x7f6>
    a.x1 = sh_area.x1;
  4117f4:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  4117f8:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  4117fc:	fa16 f383 	uxtah	r3, r6, r3
  411800:	b29b      	uxth	r3, r3
  411802:	3b01      	subs	r3, #1
  411804:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y2 - corner_size + 1;
  411808:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  41180c:	b293      	uxth	r3, r2
  41180e:	1b9b      	subs	r3, r3, r6
  411810:	b29b      	uxth	r3, r3
  411812:	3301      	adds	r3, #1
  411814:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  411818:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  41181c:	9a04      	ldr	r2, [sp, #16]
  41181e:	a915      	add	r1, sp, #84	; 0x54
  411820:	a813      	add	r0, sp, #76	; 0x4c
  411822:	4b83      	ldr	r3, [pc, #524]	; (411a30 <draw_shadow+0x8fc>)
  411824:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  411826:	2800      	cmp	r0, #0
  411828:	f040 810a 	bne.w	411a40 <draw_shadow+0x90c>
    a.x1 = sh_area.x1;
  41182c:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  411830:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  411834:	fa16 f383 	uxtah	r3, r6, r3
  411838:	b29b      	uxth	r3, r3
  41183a:	3b01      	subs	r3, #1
  41183c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1 + corner_size;
  411840:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  411844:	4433      	add	r3, r6
  411846:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  41184a:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  41184e:	1b9b      	subs	r3, r3, r6
  411850:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  411854:	9a04      	ldr	r2, [sp, #16]
  411856:	a915      	add	r1, sp, #84	; 0x54
  411858:	a813      	add	r0, sp, #76	; 0x4c
  41185a:	4b75      	ldr	r3, [pc, #468]	; (411a30 <draw_shadow+0x8fc>)
  41185c:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41185e:	2800      	cmp	r0, #0
  411860:	f040 816c 	bne.w	411b3c <draw_shadow+0xa08>
    a.x1 = sh_area.x1 + corner_size;
  411864:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  411868:	4433      	add	r3, r6
  41186a:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  41186e:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  411872:	1b9b      	subs	r3, r3, r6
  411874:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1;
  411878:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  41187c:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y1 + corner_size - 1;
  411880:	fa16 f383 	uxtah	r3, r6, r3
  411884:	b29b      	uxth	r3, r3
  411886:	3b01      	subs	r3, #1
  411888:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  41188c:	9a04      	ldr	r2, [sp, #16]
  41188e:	a915      	add	r1, sp, #84	; 0x54
  411890:	a813      	add	r0, sp, #76	; 0x4c
  411892:	4b67      	ldr	r3, [pc, #412]	; (411a30 <draw_shadow+0x8fc>)
  411894:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  411896:	2800      	cmp	r0, #0
  411898:	f040 81d1 	bne.w	411c3e <draw_shadow+0xb0a>
    a.x1 = sh_area.x1 + corner_size;
  41189c:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  4118a0:	4433      	add	r3, r6
  4118a2:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  4118a6:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  4118aa:	1b9b      	subs	r3, r3, r6
  4118ac:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y2 - corner_size + 1;
  4118b0:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  4118b4:	b293      	uxth	r3, r2
  4118b6:	1b9b      	subs	r3, r3, r6
  4118b8:	b29b      	uxth	r3, r3
  4118ba:	3301      	adds	r3, #1
  4118bc:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  4118c0:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  4118c4:	9a04      	ldr	r2, [sp, #16]
  4118c6:	a915      	add	r1, sp, #84	; 0x54
  4118c8:	a813      	add	r0, sp, #76	; 0x4c
  4118ca:	4b59      	ldr	r3, [pc, #356]	; (411a30 <draw_shadow+0x8fc>)
  4118cc:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4118ce:	2800      	cmp	r0, #0
  4118d0:	f040 8245 	bne.w	411d5e <draw_shadow+0xc2a>
    a.x1 = sh_area.x1 + corner_size;
  4118d4:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  4118d8:	4433      	add	r3, r6
  4118da:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  4118de:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  4118e2:	1b9b      	subs	r3, r3, r6
  4118e4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1 + corner_size;
  4118e8:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  4118ec:	4433      	add	r3, r6
  4118ee:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  4118f2:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  4118f6:	1b9e      	subs	r6, r3, r6
  4118f8:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  4118fc:	9a04      	ldr	r2, [sp, #16]
  4118fe:	a915      	add	r1, sp, #84	; 0x54
  411900:	a813      	add	r0, sp, #76	; 0x4c
  411902:	4b4b      	ldr	r3, [pc, #300]	; (411a30 <draw_shadow+0x8fc>)
  411904:	4798      	blx	r3
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  411906:	9b06      	ldr	r3, [sp, #24]
  411908:	f083 0301 	eor.w	r3, r3, #1
  41190c:	b2db      	uxtb	r3, r3
  41190e:	4218      	tst	r0, r3
  411910:	f040 82a9 	bne.w	411e66 <draw_shadow+0xd32>
    lv_draw_mask_remove_id(mask_rout_id);
  411914:	980b      	ldr	r0, [sp, #44]	; 0x2c
  411916:	4b47      	ldr	r3, [pc, #284]	; (411a34 <draw_shadow+0x900>)
  411918:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
  41191a:	9805      	ldr	r0, [sp, #20]
  41191c:	4c46      	ldr	r4, [pc, #280]	; (411a38 <draw_shadow+0x904>)
  41191e:	47a0      	blx	r4
    _lv_mem_buf_release(sh_buf);
  411920:	9807      	ldr	r0, [sp, #28]
  411922:	47a0      	blx	r4
}
  411924:	b027      	add	sp, #156	; 0x9c
  411926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41192a:	9a08      	ldr	r2, [sp, #32]
  41192c:	a91e      	add	r1, sp, #120	; 0x78
  41192e:	a815      	add	r0, sp, #84	; 0x54
  411930:	4b42      	ldr	r3, [pc, #264]	; (411a3c <draw_shadow+0x908>)
  411932:	4798      	blx	r3
  411934:	2800      	cmp	r0, #0
  411936:	f47f af5d 	bne.w	4117f4 <draw_shadow+0x6c0>
        if(ca.y2 > h_half) ca.y2 = h_half;
  41193a:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
  41193e:	459b      	cmp	fp, r3
  411940:	da01      	bge.n	411946 <draw_shadow+0x812>
  411942:	f8ad b052 	strh.w	fp, [sp, #82]	; 0x52
        if(ca.x2 > w_half) ca.x2 = w_half;
  411946:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  41194a:	990c      	ldr	r1, [sp, #48]	; 0x30
  41194c:	4299      	cmp	r1, r3
  41194e:	da01      	bge.n	411954 <draw_shadow+0x820>
  411950:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
  411954:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
  411958:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  41195c:	b291      	uxth	r1, r2
  41195e:	1a5b      	subs	r3, r3, r1
  411960:	b29b      	uxth	r3, r3
  411962:	3301      	adds	r3, #1
  411964:	b21b      	sxth	r3, r3
  411966:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411968:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  41196c:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  411970:	b288      	uxth	r0, r1
  411972:	1a1b      	subs	r3, r3, r0
  411974:	b29b      	uxth	r3, r3
  411976:	3301      	adds	r3, #1
  411978:	b21b      	sxth	r3, r3
  41197a:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  41197c:	2b00      	cmp	r3, #0
  41197e:	f77f af39 	ble.w	4117f4 <draw_shadow+0x6c0>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  411982:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  411986:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  41198a:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  41198e:	eba2 0808 	sub.w	r8, r2, r8
  411992:	fb08 1804 	mla	r8, r8, r4, r1
  411996:	9b07      	ldr	r3, [sp, #28]
  411998:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  41199a:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  41199c:	aa11      	add	r2, sp, #68	; 0x44
  41199e:	2308      	movs	r3, #8
    while(len) {
  4119a0:	b12b      	cbz	r3, 4119ae <draw_shadow+0x87a>
        *d8 = *s8;
  4119a2:	f811 0b01 	ldrb.w	r0, [r1], #1
  4119a6:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4119aa:	3b01      	subs	r3, #1
  4119ac:	e7f8      	b.n	4119a0 <draw_shadow+0x86c>
            fa.y2 = fa.y1;
  4119ae:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4119b2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  4119b6:	f04f 0900 	mov.w	r9, #0
  4119ba:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  4119be:	46a3      	mov	fp, r4
  4119c0:	46f2      	mov	sl, lr
  4119c2:	e017      	b.n	4119f4 <draw_shadow+0x8c0>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4119c4:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4119c8:	9302      	str	r3, [sp, #8]
  4119ca:	9701      	str	r7, [sp, #4]
  4119cc:	9000      	str	r0, [sp, #0]
  4119ce:	9b05      	ldr	r3, [sp, #20]
  4119d0:	8c2a      	ldrh	r2, [r5, #32]
  4119d2:	a911      	add	r1, sp, #68	; 0x44
  4119d4:	9804      	ldr	r0, [sp, #16]
  4119d6:	4c14      	ldr	r4, [pc, #80]	; (411a28 <draw_shadow+0x8f4>)
  4119d8:	47a0      	blx	r4
                fa.y1++;
  4119da:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4119de:	3301      	adds	r3, #1
  4119e0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  4119e4:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4119e8:	3301      	adds	r3, #1
  4119ea:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  4119ee:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  4119f0:	f109 0901 	add.w	r9, r9, #1
  4119f4:	45d1      	cmp	r9, sl
  4119f6:	da11      	bge.n	411a1c <draw_shadow+0x8e8>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  4119f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4119fa:	4641      	mov	r1, r8
  4119fc:	9c05      	ldr	r4, [sp, #20]
  4119fe:	4620      	mov	r0, r4
  411a00:	4b0a      	ldr	r3, [pc, #40]	; (411a2c <draw_shadow+0x8f8>)
  411a02:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  411a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411a06:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  411a0a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  411a0e:	4620      	mov	r0, r4
  411a10:	4c04      	ldr	r4, [pc, #16]	; (411a24 <draw_shadow+0x8f0>)
  411a12:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  411a14:	2801      	cmp	r0, #1
  411a16:	d1d5      	bne.n	4119c4 <draw_shadow+0x890>
  411a18:	2002      	movs	r0, #2
  411a1a:	e7d3      	b.n	4119c4 <draw_shadow+0x890>
  411a1c:	465c      	mov	r4, fp
  411a1e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  411a22:	e6e7      	b.n	4117f4 <draw_shadow+0x6c0>
  411a24:	004109d9 	.word	0x004109d9
  411a28:	0040d2b5 	.word	0x0040d2b5
  411a2c:	004176fd 	.word	0x004176fd
  411a30:	004164e3 	.word	0x004164e3
  411a34:	00410a29 	.word	0x00410a29
  411a38:	00417645 	.word	0x00417645
  411a3c:	00416759 	.word	0x00416759
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  411a40:	9a08      	ldr	r2, [sp, #32]
  411a42:	a91e      	add	r1, sp, #120	; 0x78
  411a44:	a815      	add	r0, sp, #84	; 0x54
  411a46:	4bb9      	ldr	r3, [pc, #740]	; (411d2c <draw_shadow+0xbf8>)
  411a48:	4798      	blx	r3
  411a4a:	2800      	cmp	r0, #0
  411a4c:	f47f aeee 	bne.w	41182c <draw_shadow+0x6f8>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
  411a50:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  411a54:	459b      	cmp	fp, r3
  411a56:	db03      	blt.n	411a60 <draw_shadow+0x92c>
  411a58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  411a5a:	3301      	adds	r3, #1
  411a5c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(ca.x2 > w_half) ca.x2 = w_half;
  411a60:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  411a64:	990c      	ldr	r1, [sp, #48]	; 0x30
  411a66:	4299      	cmp	r1, r3
  411a68:	da01      	bge.n	411a6e <draw_shadow+0x93a>
  411a6a:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411a6e:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  411a72:	fa1f fb82 	uxth.w	fp, r2
  411a76:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  411a7a:	ebab 0b03 	sub.w	fp, fp, r3
  411a7e:	fa1f fb8b 	uxth.w	fp, fp
  411a82:	f10b 0b01 	add.w	fp, fp, #1
  411a86:	fa0f fb8b 	sxth.w	fp, fp
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411a8a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  411a8e:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  411a92:	b288      	uxth	r0, r1
  411a94:	1a1b      	subs	r3, r3, r0
  411a96:	b29b      	uxth	r3, r3
  411a98:	3301      	adds	r3, #1
  411a9a:	b21b      	sxth	r3, r3
  411a9c:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  411a9e:	2b00      	cmp	r3, #0
  411aa0:	f77f aec4 	ble.w	41182c <draw_shadow+0x6f8>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  411aa4:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  411aa8:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  411aac:	f9bd 805a 	ldrsh.w	r8, [sp, #90]	; 0x5a
  411ab0:	eba8 0802 	sub.w	r8, r8, r2
  411ab4:	fb08 1804 	mla	r8, r8, r4, r1
  411ab8:	9b07      	ldr	r3, [sp, #28]
  411aba:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  411abc:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  411abe:	aa11      	add	r2, sp, #68	; 0x44
  411ac0:	2308      	movs	r3, #8
    while(len) {
  411ac2:	b12b      	cbz	r3, 411ad0 <draw_shadow+0x99c>
        *d8 = *s8;
  411ac4:	f811 0b01 	ldrb.w	r0, [r1], #1
  411ac8:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  411acc:	3b01      	subs	r3, #1
  411ace:	e7f8      	b.n	411ac2 <draw_shadow+0x98e>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
  411ad0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  411ad4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            for(y = 0; y < h; y++) {
  411ad8:	f04f 0900 	mov.w	r9, #0
  411adc:	46a2      	mov	sl, r4
  411ade:	e017      	b.n	411b10 <draw_shadow+0x9dc>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  411ae0:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  411ae4:	9302      	str	r3, [sp, #8]
  411ae6:	9701      	str	r7, [sp, #4]
  411ae8:	9000      	str	r0, [sp, #0]
  411aea:	9b05      	ldr	r3, [sp, #20]
  411aec:	8c2a      	ldrh	r2, [r5, #32]
  411aee:	a911      	add	r1, sp, #68	; 0x44
  411af0:	9804      	ldr	r0, [sp, #16]
  411af2:	4c8f      	ldr	r4, [pc, #572]	; (411d30 <draw_shadow+0xbfc>)
  411af4:	47a0      	blx	r4
                fa.y1--;
  411af6:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  411afa:	3b01      	subs	r3, #1
  411afc:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2--;
  411b00:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  411b04:	3b01      	subs	r3, #1
  411b06:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  411b0a:	44d0      	add	r8, sl
            for(y = 0; y < h; y++) {
  411b0c:	f109 0901 	add.w	r9, r9, #1
  411b10:	45d9      	cmp	r9, fp
  411b12:	da11      	bge.n	411b38 <draw_shadow+0xa04>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  411b14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  411b16:	4641      	mov	r1, r8
  411b18:	9c05      	ldr	r4, [sp, #20]
  411b1a:	4620      	mov	r0, r4
  411b1c:	4b85      	ldr	r3, [pc, #532]	; (411d34 <draw_shadow+0xc00>)
  411b1e:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  411b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411b22:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  411b26:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  411b2a:	4620      	mov	r0, r4
  411b2c:	4c82      	ldr	r4, [pc, #520]	; (411d38 <draw_shadow+0xc04>)
  411b2e:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  411b30:	2801      	cmp	r0, #1
  411b32:	d1d5      	bne.n	411ae0 <draw_shadow+0x9ac>
  411b34:	2002      	movs	r0, #2
  411b36:	e7d3      	b.n	411ae0 <draw_shadow+0x9ac>
  411b38:	4654      	mov	r4, sl
  411b3a:	e677      	b.n	41182c <draw_shadow+0x6f8>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  411b3c:	9a08      	ldr	r2, [sp, #32]
  411b3e:	a91e      	add	r1, sp, #120	; 0x78
  411b40:	a815      	add	r0, sp, #84	; 0x54
  411b42:	4b7a      	ldr	r3, [pc, #488]	; (411d2c <draw_shadow+0xbf8>)
  411b44:	4798      	blx	r3
  411b46:	2800      	cmp	r0, #0
  411b48:	f47f ae8c 	bne.w	411864 <draw_shadow+0x730>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
  411b4c:	9b06      	ldr	r3, [sp, #24]
  411b4e:	b14b      	cbz	r3, 411b64 <draw_shadow+0xa30>
  411b50:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  411b54:	9a09      	ldr	r2, [sp, #36]	; 0x24
  411b56:	f9b2 2000 	ldrsh.w	r2, [r2]
  411b5a:	4293      	cmp	r3, r2
  411b5c:	bfa8      	it	ge
  411b5e:	4613      	movge	r3, r2
  411b60:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
  411b64:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
  411b68:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  411b6c:	b29a      	uxth	r2, r3
  411b6e:	ebab 0b02 	sub.w	fp, fp, r2
  411b72:	fa1f fb8b 	uxth.w	fp, fp
  411b76:	f10b 0b01 	add.w	fp, fp, #1
  411b7a:	fa0f fb8b 	sxth.w	fp, fp
        if(w > 0) {
  411b7e:	f1bb 0f00 	cmp.w	fp, #0
  411b82:	f77f ae6f 	ble.w	411864 <draw_shadow+0x730>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411b86:	f8bd a052 	ldrh.w	sl, [sp, #82]	; 0x52
  411b8a:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
  411b8e:	ebaa 0a02 	sub.w	sl, sl, r2
  411b92:	fa1f fa8a 	uxth.w	sl, sl
  411b96:	f10a 0a01 	add.w	sl, sl, #1
  411b9a:	fa0f fa8a 	sxth.w	sl, sl
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
  411b9e:	1e62      	subs	r2, r4, #1
            sh_buf_tmp += ca.x1 - a.x1;
  411ba0:	f9bd 1054 	ldrsh.w	r1, [sp, #84]	; 0x54
  411ba4:	1a59      	subs	r1, r3, r1
  411ba6:	fb02 1304 	mla	r3, r2, r4, r1
  411baa:	9a07      	ldr	r2, [sp, #28]
  411bac:	18d3      	adds	r3, r2, r3
  411bae:	930a      	str	r3, [sp, #40]	; 0x28
    const uint8_t * s8 = (const uint8_t *)src;
  411bb0:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  411bb2:	aa11      	add	r2, sp, #68	; 0x44
  411bb4:	2308      	movs	r3, #8
    while(len) {
  411bb6:	b12b      	cbz	r3, 411bc4 <draw_shadow+0xa90>
        *d8 = *s8;
  411bb8:	f811 0b01 	ldrb.w	r0, [r1], #1
  411bbc:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  411bc0:	3b01      	subs	r3, #1
  411bc2:	e7f8      	b.n	411bb6 <draw_shadow+0xa82>
            fa.y2 = fa.y1;
  411bc4:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  411bc8:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  411bcc:	f04f 0800 	mov.w	r8, #0
  411bd0:	970c      	str	r7, [sp, #48]	; 0x30
  411bd2:	46a1      	mov	r9, r4
  411bd4:	9c06      	ldr	r4, [sp, #24]
  411bd6:	e022      	b.n	411c1e <draw_shadow+0xaea>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  411bd8:	465b      	mov	r3, fp
  411bda:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  411bde:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  411be2:	9805      	ldr	r0, [sp, #20]
  411be4:	4f54      	ldr	r7, [pc, #336]	; (411d38 <draw_shadow+0xc04>)
  411be6:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  411be8:	2801      	cmp	r0, #1
  411bea:	d023      	beq.n	411c34 <draw_shadow+0xb00>
                _lv_blend_fill(clip, &fa,
  411bec:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  411bf0:	9302      	str	r3, [sp, #8]
  411bf2:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
  411bf6:	9301      	str	r3, [sp, #4]
  411bf8:	9000      	str	r0, [sp, #0]
  411bfa:	9b05      	ldr	r3, [sp, #20]
  411bfc:	8c2a      	ldrh	r2, [r5, #32]
  411bfe:	a911      	add	r1, sp, #68	; 0x44
  411c00:	9804      	ldr	r0, [sp, #16]
  411c02:	4f4b      	ldr	r7, [pc, #300]	; (411d30 <draw_shadow+0xbfc>)
  411c04:	47b8      	blx	r7
                fa.y1++;
  411c06:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  411c0a:	3301      	adds	r3, #1
  411c0c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  411c10:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  411c14:	3301      	adds	r3, #1
  411c16:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  411c1a:	f108 0801 	add.w	r8, r8, #1
  411c1e:	45d0      	cmp	r8, sl
  411c20:	da0a      	bge.n	411c38 <draw_shadow+0xb04>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  411c22:	465a      	mov	r2, fp
  411c24:	990a      	ldr	r1, [sp, #40]	; 0x28
  411c26:	9805      	ldr	r0, [sp, #20]
  411c28:	4b42      	ldr	r3, [pc, #264]	; (411d34 <draw_shadow+0xc00>)
  411c2a:	4798      	blx	r3
                if(simple_mode) {
  411c2c:	2c00      	cmp	r4, #0
  411c2e:	d0d3      	beq.n	411bd8 <draw_shadow+0xaa4>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  411c30:	2002      	movs	r0, #2
  411c32:	e7db      	b.n	411bec <draw_shadow+0xab8>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  411c34:	2002      	movs	r0, #2
  411c36:	e7d9      	b.n	411bec <draw_shadow+0xab8>
  411c38:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  411c3a:	464c      	mov	r4, r9
  411c3c:	e612      	b.n	411864 <draw_shadow+0x730>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  411c3e:	9a08      	ldr	r2, [sp, #32]
  411c40:	a91e      	add	r1, sp, #120	; 0x78
  411c42:	a815      	add	r0, sp, #84	; 0x54
  411c44:	4b39      	ldr	r3, [pc, #228]	; (411d2c <draw_shadow+0xbf8>)
  411c46:	4798      	blx	r3
  411c48:	2800      	cmp	r0, #0
  411c4a:	f47f ae27 	bne.w	41189c <draw_shadow+0x768>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
  411c4e:	9b06      	ldr	r3, [sp, #24]
  411c50:	b14b      	cbz	r3, 411c66 <draw_shadow+0xb32>
  411c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411c54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  411c58:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  411c5c:	4293      	cmp	r3, r2
  411c5e:	bfa8      	it	ge
  411c60:	4613      	movge	r3, r2
  411c62:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411c66:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  411c6a:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
  411c6e:	1a9b      	subs	r3, r3, r2
  411c70:	b29b      	uxth	r3, r3
  411c72:	3301      	adds	r3, #1
  411c74:	b21b      	sxth	r3, r3
  411c76:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411c78:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
  411c7c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  411c80:	b29a      	uxth	r2, r3
  411c82:	ebab 0b02 	sub.w	fp, fp, r2
  411c86:	fa1f fb8b 	uxth.w	fp, fp
  411c8a:	f10b 0b01 	add.w	fp, fp, #1
  411c8e:	fa0f fb8b 	sxth.w	fp, fp
        sh_buf_tmp = sh_buf + corner_size - 1;
  411c92:	46a6      	mov	lr, r4
  411c94:	1e62      	subs	r2, r4, #1
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  411c96:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  411c9a:	eba3 0808 	sub.w	r8, r3, r8
  411c9e:	fb08 2804 	mla	r8, r8, r4, r2
  411ca2:	9b07      	ldr	r3, [sp, #28]
  411ca4:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  411ca6:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  411ca8:	aa11      	add	r2, sp, #68	; 0x44
  411caa:	2308      	movs	r3, #8
  411cac:	e004      	b.n	411cb8 <draw_shadow+0xb84>
        *d8 = *s8;
  411cae:	f811 0b01 	ldrb.w	r0, [r1], #1
  411cb2:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  411cb6:	3b01      	subs	r3, #1
    while(len) {
  411cb8:	2b00      	cmp	r3, #0
  411cba:	d1f8      	bne.n	411cae <draw_shadow+0xb7a>
        fa.y2 = fa.y1;
  411cbc:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  411cc0:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  411cc4:	f04f 0900 	mov.w	r9, #0
  411cc8:	940c      	str	r4, [sp, #48]	; 0x30
  411cca:	960d      	str	r6, [sp, #52]	; 0x34
  411ccc:	9e06      	ldr	r6, [sp, #24]
  411cce:	46f2      	mov	sl, lr
  411cd0:	e01e      	b.n	411d10 <draw_shadow+0xbdc>
            _lv_memset(mask_buf, opa_tmp, w);
  411cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  411cd4:	9805      	ldr	r0, [sp, #20]
  411cd6:	4b19      	ldr	r3, [pc, #100]	; (411d3c <draw_shadow+0xc08>)
  411cd8:	4798      	blx	r3
            if(simple_mode) {
  411cda:	b38e      	cbz	r6, 411d40 <draw_shadow+0xc0c>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
  411cdc:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  411cde:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  411ce2:	9302      	str	r3, [sp, #8]
  411ce4:	23ff      	movs	r3, #255	; 0xff
  411ce6:	9301      	str	r3, [sp, #4]
  411ce8:	9000      	str	r0, [sp, #0]
  411cea:	9b05      	ldr	r3, [sp, #20]
  411cec:	8c2a      	ldrh	r2, [r5, #32]
  411cee:	a911      	add	r1, sp, #68	; 0x44
  411cf0:	9804      	ldr	r0, [sp, #16]
  411cf2:	4c0f      	ldr	r4, [pc, #60]	; (411d30 <draw_shadow+0xbfc>)
  411cf4:	47a0      	blx	r4
            fa.y1++;
  411cf6:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  411cfa:	3301      	adds	r3, #1
  411cfc:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2++;
  411d00:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  411d04:	3301      	adds	r3, #1
  411d06:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            sh_buf_tmp += corner_size;
  411d0a:	44d0      	add	r8, sl
        for(y = 0; y < h; y++) {
  411d0c:	f109 0901 	add.w	r9, r9, #1
  411d10:	45d9      	cmp	r9, fp
  411d12:	da21      	bge.n	411d58 <draw_shadow+0xc24>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
  411d14:	f898 1000 	ldrb.w	r1, [r8]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
  411d18:	2fff      	cmp	r7, #255	; 0xff
  411d1a:	bf08      	it	eq
  411d1c:	29ff      	cmpeq	r1, #255	; 0xff
  411d1e:	d0d8      	beq.n	411cd2 <draw_shadow+0xb9e>
  411d20:	fb01 f107 	mul.w	r1, r1, r7
  411d24:	f3c1 2107 	ubfx	r1, r1, #8, #8
  411d28:	e7d3      	b.n	411cd2 <draw_shadow+0xb9e>
  411d2a:	bf00      	nop
  411d2c:	00416759 	.word	0x00416759
  411d30:	0040d2b5 	.word	0x0040d2b5
  411d34:	004176fd 	.word	0x004176fd
  411d38:	004109d9 	.word	0x004109d9
  411d3c:	004179c5 	.word	0x004179c5
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  411d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411d42:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  411d46:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  411d4a:	9805      	ldr	r0, [sp, #20]
  411d4c:	4c73      	ldr	r4, [pc, #460]	; (411f1c <draw_shadow+0xde8>)
  411d4e:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  411d50:	2801      	cmp	r0, #1
  411d52:	d1c4      	bne.n	411cde <draw_shadow+0xbaa>
  411d54:	2002      	movs	r0, #2
  411d56:	e7c2      	b.n	411cde <draw_shadow+0xbaa>
  411d58:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  411d5a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  411d5c:	e59e      	b.n	41189c <draw_shadow+0x768>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  411d5e:	9a08      	ldr	r2, [sp, #32]
  411d60:	a91e      	add	r1, sp, #120	; 0x78
  411d62:	a815      	add	r0, sp, #84	; 0x54
  411d64:	4b6e      	ldr	r3, [pc, #440]	; (411f20 <draw_shadow+0xdec>)
  411d66:	4798      	blx	r3
  411d68:	2800      	cmp	r0, #0
  411d6a:	f47f adb3 	bne.w	4118d4 <draw_shadow+0x7a0>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
  411d6e:	9b06      	ldr	r3, [sp, #24]
  411d70:	b14b      	cbz	r3, 411d86 <draw_shadow+0xc52>
  411d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411d74:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  411d78:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  411d7c:	4293      	cmp	r3, r2
  411d7e:	bfb8      	it	lt
  411d80:	4613      	movlt	r3, r2
  411d82:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411d86:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  411d8a:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
  411d8e:	1a9b      	subs	r3, r3, r2
  411d90:	b29b      	uxth	r3, r3
  411d92:	3301      	adds	r3, #1
  411d94:	b21b      	sxth	r3, r3
  411d96:	9309      	str	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411d98:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  411d9c:	fa1f f982 	uxth.w	r9, r2
  411da0:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  411da4:	eba9 0903 	sub.w	r9, r9, r3
  411da8:	fa1f f989 	uxth.w	r9, r9
  411dac:	f109 0901 	add.w	r9, r9, #1
  411db0:	fa0f f989 	sxth.w	r9, r9
        sh_buf_tmp = sh_buf + corner_size - 1;
  411db4:	46a2      	mov	sl, r4
  411db6:	1e61      	subs	r1, r4, #1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  411db8:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  411dbc:	1a9b      	subs	r3, r3, r2
  411dbe:	fb03 1404 	mla	r4, r3, r4, r1
  411dc2:	9b07      	ldr	r3, [sp, #28]
  411dc4:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  411dc6:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  411dc8:	aa11      	add	r2, sp, #68	; 0x44
  411dca:	2308      	movs	r3, #8
  411dcc:	e004      	b.n	411dd8 <draw_shadow+0xca4>
        *d8 = *s8;
  411dce:	f811 0b01 	ldrb.w	r0, [r1], #1
  411dd2:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  411dd6:	3b01      	subs	r3, #1
    while(len) {
  411dd8:	2b00      	cmp	r3, #0
  411dda:	d1f8      	bne.n	411dce <draw_shadow+0xc9a>
        fa.y1 = fa.y2;
  411ddc:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  411de0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(y = 0; y < h; y++) {
  411de4:	f04f 0800 	mov.w	r8, #0
  411de8:	f8dd b018 	ldr.w	fp, [sp, #24]
  411dec:	960a      	str	r6, [sp, #40]	; 0x28
  411dee:	e020      	b.n	411e32 <draw_shadow+0xcfe>
            _lv_memset(mask_buf, opa_tmp, w);
  411df0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  411df2:	9805      	ldr	r0, [sp, #20]
  411df4:	4b4b      	ldr	r3, [pc, #300]	; (411f24 <draw_shadow+0xdf0>)
  411df6:	4798      	blx	r3
            if(simple_mode) {
  411df8:	f1bb 0f00 	cmp.w	fp, #0
  411dfc:	d025      	beq.n	411e4a <draw_shadow+0xd16>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
  411dfe:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  411e00:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  411e04:	9302      	str	r3, [sp, #8]
  411e06:	23ff      	movs	r3, #255	; 0xff
  411e08:	9301      	str	r3, [sp, #4]
  411e0a:	9000      	str	r0, [sp, #0]
  411e0c:	9b05      	ldr	r3, [sp, #20]
  411e0e:	8c2a      	ldrh	r2, [r5, #32]
  411e10:	a911      	add	r1, sp, #68	; 0x44
  411e12:	9804      	ldr	r0, [sp, #16]
  411e14:	4e44      	ldr	r6, [pc, #272]	; (411f28 <draw_shadow+0xdf4>)
  411e16:	47b0      	blx	r6
            fa.y1--;
  411e18:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  411e1c:	3b01      	subs	r3, #1
  411e1e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2--;
  411e22:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  411e26:	3b01      	subs	r3, #1
  411e28:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            sh_buf_tmp += corner_size;
  411e2c:	4454      	add	r4, sl
        for(y = 0; y < h; y++) {
  411e2e:	f108 0801 	add.w	r8, r8, #1
  411e32:	45c8      	cmp	r8, r9
  411e34:	da15      	bge.n	411e62 <draw_shadow+0xd2e>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
  411e36:	7821      	ldrb	r1, [r4, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
  411e38:	2fff      	cmp	r7, #255	; 0xff
  411e3a:	bf08      	it	eq
  411e3c:	29ff      	cmpeq	r1, #255	; 0xff
  411e3e:	d0d7      	beq.n	411df0 <draw_shadow+0xcbc>
  411e40:	fb01 f107 	mul.w	r1, r1, r7
  411e44:	f3c1 2107 	ubfx	r1, r1, #8, #8
  411e48:	e7d2      	b.n	411df0 <draw_shadow+0xcbc>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  411e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411e4c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  411e50:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  411e54:	9805      	ldr	r0, [sp, #20]
  411e56:	4e31      	ldr	r6, [pc, #196]	; (411f1c <draw_shadow+0xde8>)
  411e58:	47b0      	blx	r6
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  411e5a:	2801      	cmp	r0, #1
  411e5c:	d1d0      	bne.n	411e00 <draw_shadow+0xccc>
  411e5e:	2002      	movs	r0, #2
  411e60:	e7ce      	b.n	411e00 <draw_shadow+0xccc>
  411e62:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  411e64:	e536      	b.n	4118d4 <draw_shadow+0x7a0>
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  411e66:	9a08      	ldr	r2, [sp, #32]
  411e68:	a91e      	add	r1, sp, #120	; 0x78
  411e6a:	a815      	add	r0, sp, #84	; 0x54
  411e6c:	4b2c      	ldr	r3, [pc, #176]	; (411f20 <draw_shadow+0xdec>)
  411e6e:	4798      	blx	r3
  411e70:	2800      	cmp	r0, #0
  411e72:	f47f ad4f 	bne.w	411914 <draw_shadow+0x7e0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411e76:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
  411e7a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  411e7e:	1af6      	subs	r6, r6, r3
  411e80:	b2b6      	uxth	r6, r6
  411e82:	3601      	adds	r6, #1
  411e84:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411e86:	f8bd 8052 	ldrh.w	r8, [sp, #82]	; 0x52
  411e8a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  411e8e:	eba8 0803 	sub.w	r8, r8, r3
  411e92:	fa1f f888 	uxth.w	r8, r8
  411e96:	f108 0801 	add.w	r8, r8, #1
  411e9a:	fa0f f888 	sxth.w	r8, r8
    const uint8_t * s8 = (const uint8_t *)src;
  411e9e:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  411ea0:	aa11      	add	r2, sp, #68	; 0x44
  411ea2:	2308      	movs	r3, #8
    while(len) {
  411ea4:	b12b      	cbz	r3, 411eb2 <draw_shadow+0xd7e>
        *d8 = *s8;
  411ea6:	f811 0b01 	ldrb.w	r0, [r1], #1
  411eaa:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  411eae:	3b01      	subs	r3, #1
  411eb0:	e7f8      	b.n	411ea4 <draw_shadow+0xd70>
        fa.y2 = fa.y1;
  411eb2:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  411eb6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  411eba:	2400      	movs	r4, #0
  411ebc:	f8dd 9014 	ldr.w	r9, [sp, #20]
  411ec0:	e016      	b.n	411ef0 <draw_shadow+0xdbc>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  411ec2:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  411ec6:	9302      	str	r3, [sp, #8]
  411ec8:	23ff      	movs	r3, #255	; 0xff
  411eca:	9301      	str	r3, [sp, #4]
  411ecc:	9000      	str	r0, [sp, #0]
  411ece:	464b      	mov	r3, r9
  411ed0:	8c2a      	ldrh	r2, [r5, #32]
  411ed2:	a911      	add	r1, sp, #68	; 0x44
  411ed4:	9804      	ldr	r0, [sp, #16]
  411ed6:	4f14      	ldr	r7, [pc, #80]	; (411f28 <draw_shadow+0xdf4>)
  411ed8:	47b8      	blx	r7
            fa.y1++;
  411eda:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  411ede:	3301      	adds	r3, #1
  411ee0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2++;
  411ee4:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  411ee8:	3301      	adds	r3, #1
  411eea:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  411eee:	3401      	adds	r4, #1
  411ef0:	4544      	cmp	r4, r8
  411ef2:	f6bf ad0f 	bge.w	411914 <draw_shadow+0x7e0>
            _lv_memset(mask_buf, dsc->shadow_opa, w);
  411ef6:	4632      	mov	r2, r6
  411ef8:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
  411efc:	4648      	mov	r0, r9
  411efe:	4b09      	ldr	r3, [pc, #36]	; (411f24 <draw_shadow+0xdf0>)
  411f00:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  411f02:	4633      	mov	r3, r6
  411f04:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  411f08:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  411f0c:	4648      	mov	r0, r9
  411f0e:	4f03      	ldr	r7, [pc, #12]	; (411f1c <draw_shadow+0xde8>)
  411f10:	47b8      	blx	r7
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  411f12:	2801      	cmp	r0, #1
  411f14:	d1d5      	bne.n	411ec2 <draw_shadow+0xd8e>
  411f16:	2002      	movs	r0, #2
  411f18:	e7d3      	b.n	411ec2 <draw_shadow+0xd8e>
  411f1a:	bf00      	nop
  411f1c:	004109d9 	.word	0x004109d9
  411f20:	00416759 	.word	0x00416759
  411f24:	004179c5 	.word	0x004179c5
  411f28:	0040d2b5 	.word	0x0040d2b5

00411f2c <draw_full_border>:
}
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
  411f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411f30:	b0a5      	sub	sp, #148	; 0x94
  411f32:	4683      	mov	fp, r0
  411f34:	460c      	mov	r4, r1
  411f36:	9205      	str	r2, [sp, #20]
  411f38:	461e      	mov	r6, r3
  411f3a:	f89d 50b8 	ldrb.w	r5, [sp, #184]	; 0xb8
  411f3e:	f89d 70c0 	ldrb.w	r7, [sp, #192]	; 0xc0
  411f42:	f89d 80c4 	ldrb.w	r8, [sp, #196]	; 0xc4
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  411f46:	4baa      	ldr	r3, [pc, #680]	; (4121f0 <draw_full_border+0x2c4>)
  411f48:	4798      	blx	r3
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;
  411f4a:	2800      	cmp	r0, #0
  411f4c:	d13d      	bne.n	411fca <draw_full_border+0x9e>
    bool simple_mode = true;
  411f4e:	f04f 0a01 	mov.w	sl, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411f52:	f8bb 1004 	ldrh.w	r1, [fp, #4]
  411f56:	f8bb 2000 	ldrh.w	r2, [fp]
  411f5a:	1a8a      	subs	r2, r1, r2
  411f5c:	b292      	uxth	r2, r2
  411f5e:	3201      	adds	r2, #1
  411f60:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411f62:	f8bb 0006 	ldrh.w	r0, [fp, #6]
  411f66:	f8bb 3002 	ldrh.w	r3, [fp, #2]
  411f6a:	1ac0      	subs	r0, r0, r3
  411f6c:	b280      	uxth	r0, r0
  411f6e:	3001      	adds	r0, #1
  411f70:	b200      	sxth	r0, r0

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
  411f72:	88a3      	ldrh	r3, [r4, #4]
  411f74:	1a59      	subs	r1, r3, r1
  411f76:	b289      	uxth	r1, r1
  411f78:	910c      	str	r1, [sp, #48]	; 0x30
  411f7a:	fa0f f981 	sxth.w	r9, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411f7e:	8821      	ldrh	r1, [r4, #0]
  411f80:	1a5b      	subs	r3, r3, r1
  411f82:	b29b      	uxth	r3, r3
  411f84:	3301      	adds	r3, #1
  411f86:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411f88:	88e1      	ldrh	r1, [r4, #6]
  411f8a:	f8b4 e002 	ldrh.w	lr, [r4, #2]
  411f8e:	eba1 010e 	sub.w	r1, r1, lr
  411f92:	b289      	uxth	r1, r1
  411f94:	3101      	adds	r1, #1
  411f96:	b209      	sxth	r1, r1
    int32_t coords_out_w = lv_area_get_width(area_outer);
    int32_t coords_out_h = lv_area_get_height(area_outer);

    int32_t rin;
    int32_t rout;
    if(radius_is_in) {
  411f98:	b1d5      	cbz	r5, 411fd0 <draw_full_border+0xa4>
        rin = radius;
        int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
  411f9a:	4282      	cmp	r2, r0
  411f9c:	bfa8      	it	ge
  411f9e:	4602      	movge	r2, r0
        if(rin > short_side >> 1) rin = short_side >> 1;
  411fa0:	1055      	asrs	r5, r2, #1
  411fa2:	42ae      	cmp	r6, r5
  411fa4:	dc00      	bgt.n	411fa8 <draw_full_border+0x7c>
        rin = radius;
  411fa6:	4635      	mov	r5, r6

        /*Get the outer area*/
        rout = rin + border_width;
  411fa8:	eb05 0309 	add.w	r3, r5, r9
  411fac:	9306      	str	r3, [sp, #24]
        rin = rout - border_width;
        if(rin < 0) rin = 0;

    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  411fae:	4b91      	ldr	r3, [pc, #580]	; (4121f4 <draw_full_border+0x2c8>)
  411fb0:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  411fb2:	4b91      	ldr	r3, [pc, #580]	; (4121f8 <draw_full_border+0x2cc>)
  411fb4:	4798      	blx	r3
  411fb6:	4606      	mov	r6, r0

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
  411fb8:	9a05      	ldr	r2, [sp, #20]
  411fba:	4621      	mov	r1, r4
  411fbc:	a822      	add	r0, sp, #136	; 0x88
  411fbe:	4b8f      	ldr	r3, [pc, #572]	; (4121fc <draw_full_border+0x2d0>)
  411fc0:	4798      	blx	r3
    if(is_common == false) return;
  411fc2:	b998      	cbnz	r0, 411fec <draw_full_border+0xc0>
        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
    lv_draw_mask_remove_id(mask_rout_id);
    _lv_mem_buf_release(mask_buf);
}
  411fc4:	b025      	add	sp, #148	; 0x94
  411fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(other_mask_cnt) simple_mode = false;
  411fca:	f04f 0a00 	mov.w	sl, #0
  411fce:	e7c0      	b.n	411f52 <draw_full_border+0x26>
        int32_t short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
  411fd0:	4299      	cmp	r1, r3
  411fd2:	bfa8      	it	ge
  411fd4:	4619      	movge	r1, r3
        if(rout > short_side >> 1) rout = short_side >> 1;
  411fd6:	104b      	asrs	r3, r1, #1
  411fd8:	9306      	str	r3, [sp, #24]
  411fda:	429e      	cmp	r6, r3
  411fdc:	dc00      	bgt.n	411fe0 <draw_full_border+0xb4>
        rout = radius;
  411fde:	9606      	str	r6, [sp, #24]
        if(rin < 0) rin = 0;
  411fe0:	9b06      	ldr	r3, [sp, #24]
  411fe2:	ebb3 0509 	subs.w	r5, r3, r9
  411fe6:	d5e2      	bpl.n	411fae <draw_full_border+0x82>
  411fe8:	2500      	movs	r5, #0
  411fea:	e7e0      	b.n	411fae <draw_full_border+0x82>
    draw_area.x1 -= disp_area->x1;
  411fec:	f8b6 e010 	ldrh.w	lr, [r6, #16]
  411ff0:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  411ff4:	eba3 030e 	sub.w	r3, r3, lr
  411ff8:	b29a      	uxth	r2, r3
  411ffa:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
    draw_area.y1 -= disp_area->y1;
  411ffe:	8a70      	ldrh	r0, [r6, #18]
  412000:	f8bd 108a 	ldrh.w	r1, [sp, #138]	; 0x8a
  412004:	1a09      	subs	r1, r1, r0
  412006:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
    draw_area.x2 -= disp_area->x1;
  41200a:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  41200e:	eba3 030e 	sub.w	r3, r3, lr
  412012:	b29b      	uxth	r3, r3
  412014:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    draw_area.y2 -= disp_area->y1;
  412018:	f8bd 108e 	ldrh.w	r1, [sp, #142]	; 0x8e
  41201c:	1a09      	subs	r1, r1, r0
  41201e:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  412022:	1a9b      	subs	r3, r3, r2
  412024:	b29b      	uxth	r3, r3
  412026:	3301      	adds	r3, #1
  412028:	b21b      	sxth	r3, r3
  41202a:	9309      	str	r3, [sp, #36]	; 0x24
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
  41202c:	2301      	movs	r3, #1
  41202e:	b22a      	sxth	r2, r5
  412030:	4659      	mov	r1, fp
  412032:	a81b      	add	r0, sp, #108	; 0x6c
  412034:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 412214 <draw_full_border+0x2e8>
  412038:	47d8      	blx	fp
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
  41203a:	2100      	movs	r1, #0
  41203c:	a81b      	add	r0, sp, #108	; 0x6c
  41203e:	4d70      	ldr	r5, [pc, #448]	; (412200 <draw_full_border+0x2d4>)
  412040:	47a8      	blx	r5
  412042:	900d      	str	r0, [sp, #52]	; 0x34
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
  412044:	2300      	movs	r3, #0
  412046:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
  41204a:	4621      	mov	r1, r4
  41204c:	a814      	add	r0, sp, #80	; 0x50
  41204e:	47d8      	blx	fp
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  412050:	2100      	movs	r1, #0
  412052:	a814      	add	r0, sp, #80	; 0x50
  412054:	47a8      	blx	r5
  412056:	900e      	str	r0, [sp, #56]	; 0x38
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  412058:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41205a:	9308      	str	r3, [sp, #32]
  41205c:	4618      	mov	r0, r3
  41205e:	4b69      	ldr	r3, [pc, #420]	; (412204 <draw_full_border+0x2d8>)
  412060:	4798      	blx	r3
  412062:	9007      	str	r0, [sp, #28]
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
  412064:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  412068:	f109 39ff 	add.w	r9, r9, #4294967295
  41206c:	464b      	mov	r3, r9
  41206e:	9a06      	ldr	r2, [sp, #24]
  412070:	4591      	cmp	r9, r2
  412072:	bfb8      	it	lt
  412074:	4613      	movlt	r3, r2
  412076:	4619      	mov	r1, r3
  412078:	930f      	str	r3, [sp, #60]	; 0x3c
    if(simple_mode) {
  41207a:	f1ba 0f00 	cmp.w	sl, #0
  41207e:	f000 8197 	beq.w	4123b0 <draw_full_border+0x484>
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
  412082:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  412086:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  41208a:	1ad2      	subs	r2, r2, r3
  41208c:	188a      	adds	r2, r1, r2
  41208e:	920b      	str	r2, [sp, #44]	; 0x2c
        fill_area.x1 = area_outer->x1;
  412090:	f9b4 2000 	ldrsh.w	r2, [r4]
  412094:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  412098:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  41209c:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  4120a0:	f9bd 908a 	ldrsh.w	r9, [sp, #138]	; 0x8a
  4120a4:	fa1f f289 	uxth.w	r2, r9
  4120a8:	fa12 f383 	uxtah	r3, r2, r3
  4120ac:	b21b      	sxth	r3, r3
  4120ae:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  4120b2:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  4120b6:	46ba      	mov	sl, r7
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
  4120b8:	e02c      	b.n	412114 <draw_full_border+0x1e8>
            fill_area2.x1 = area_outer->x2 - rout + 1;
  4120ba:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  4120be:	b29a      	uxth	r2, r3
  4120c0:	1b55      	subs	r5, r2, r5
  4120c2:	b2ad      	uxth	r5, r5
  4120c4:	3501      	adds	r5, #1
  4120c6:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x2;
  4120ca:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  4120ce:	9a06      	ldr	r2, [sp, #24]
  4120d0:	1a9b      	subs	r3, r3, r2
  4120d2:	3301      	adds	r3, #1
  4120d4:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  4120d8:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  4120dc:	440a      	add	r2, r1
            if(mask_ofs < 0) mask_ofs = 0;
  4120de:	1a9b      	subs	r3, r3, r2
  4120e0:	d46c      	bmi.n	4121bc <draw_full_border+0x290>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
  4120e2:	f8cd 8008 	str.w	r8, [sp, #8]
  4120e6:	f8cd a004 	str.w	sl, [sp, #4]
  4120ea:	9700      	str	r7, [sp, #0]
  4120ec:	9a07      	ldr	r2, [sp, #28]
  4120ee:	4413      	add	r3, r2
  4120f0:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  4120f4:	a910      	add	r1, sp, #64	; 0x40
  4120f6:	9805      	ldr	r0, [sp, #20]
  4120f8:	4d43      	ldr	r5, [pc, #268]	; (412208 <draw_full_border+0x2dc>)
  4120fa:	47a8      	blx	r5
            fill_area.y1++;
  4120fc:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  412100:	3301      	adds	r3, #1
  412102:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  412106:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  41210a:	3301      	adds	r3, #1
  41210c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
  412110:	f109 0901 	add.w	r9, r9, #1
  412114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  412116:	4599      	cmp	r9, r3
  412118:	dc52      	bgt.n	4121c0 <draw_full_border+0x294>
            _lv_memset_ff(mask_buf, draw_area_w);
  41211a:	9908      	ldr	r1, [sp, #32]
  41211c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  412120:	4658      	mov	r0, fp
  412122:	4b3a      	ldr	r3, [pc, #232]	; (41220c <draw_full_border+0x2e0>)
  412124:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  412126:	8a31      	ldrh	r1, [r6, #16]
  412128:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  41212c:	4419      	add	r1, r3
  41212e:	8a72      	ldrh	r2, [r6, #18]
  412130:	444a      	add	r2, r9
  412132:	9b09      	ldr	r3, [sp, #36]	; 0x24
  412134:	b212      	sxth	r2, r2
  412136:	b209      	sxth	r1, r1
  412138:	4658      	mov	r0, fp
  41213a:	4d35      	ldr	r5, [pc, #212]	; (412210 <draw_full_border+0x2e4>)
  41213c:	47a8      	blx	r5
  41213e:	4607      	mov	r7, r0
            fill_area2.y1 = fill_area.y1;
  412140:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  412144:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area2.y2 = fill_area.y2;
  412148:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  41214c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fill_area2.x1 = area_outer->x1;
  412150:	f9b4 3000 	ldrsh.w	r3, [r4]
  412154:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x1 + rout - 1;
  412158:	8823      	ldrh	r3, [r4, #0]
  41215a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  41215e:	442b      	add	r3, r5
  412160:	b29b      	uxth	r3, r3
  412162:	3b01      	subs	r3, #1
  412164:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
  412168:	f8cd 8008 	str.w	r8, [sp, #8]
  41216c:	f8cd a004 	str.w	sl, [sp, #4]
  412170:	9000      	str	r0, [sp, #0]
  412172:	465b      	mov	r3, fp
  412174:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  412178:	a910      	add	r1, sp, #64	; 0x40
  41217a:	9805      	ldr	r0, [sp, #20]
  41217c:	f8df b088 	ldr.w	fp, [pc, #136]	; 412208 <draw_full_border+0x2dc>
  412180:	47d8      	blx	fp
            if(fill_area2.y2 < area_outer->y1 + border_width) {
  412182:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  412186:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  41218a:	990a      	ldr	r1, [sp, #40]	; 0x28
  41218c:	440b      	add	r3, r1
  41218e:	429a      	cmp	r2, r3
  412190:	da93      	bge.n	4120ba <draw_full_border+0x18e>
                fill_area2.x1 = area_outer->x1 + rout;
  412192:	8823      	ldrh	r3, [r4, #0]
  412194:	442b      	add	r3, r5
  412196:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                fill_area2.x2 = area_outer->x2 - rout;
  41219a:	88a3      	ldrh	r3, [r4, #4]
  41219c:	1b5b      	subs	r3, r3, r5
  41219e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  4121a2:	f8cd 8008 	str.w	r8, [sp, #8]
  4121a6:	f8cd a004 	str.w	sl, [sp, #4]
  4121aa:	2301      	movs	r3, #1
  4121ac:	9300      	str	r3, [sp, #0]
  4121ae:	2300      	movs	r3, #0
  4121b0:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  4121b4:	a910      	add	r1, sp, #64	; 0x40
  4121b6:	9805      	ldr	r0, [sp, #20]
  4121b8:	47d8      	blx	fp
  4121ba:	e77e      	b.n	4120ba <draw_full_border+0x18e>
            if(mask_ofs < 0) mask_ofs = 0;
  4121bc:	2300      	movs	r3, #0
  4121be:	e790      	b.n	4120e2 <draw_full_border+0x1b6>
  4121c0:	4657      	mov	r7, sl
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
  4121c2:	f9b4 9006 	ldrsh.w	r9, [r4, #6]
  4121c6:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  4121ca:	eba9 0903 	sub.w	r9, r9, r3
  4121ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4121d0:	eba9 0902 	sub.w	r9, r9, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
  4121d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4121d6:	4549      	cmp	r1, r9
  4121d8:	db01      	blt.n	4121de <draw_full_border+0x2b2>
  4121da:	f101 0901 	add.w	r9, r1, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
  4121de:	fa19 f383 	uxtah	r3, r9, r3
  4121e2:	b21b      	sxth	r3, r3
  4121e4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  4121e8:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  4121ec:	46ba      	mov	sl, r7
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
  4121ee:	e040      	b.n	412272 <draw_full_border+0x346>
  4121f0:	00410aa1 	.word	0x00410aa1
  4121f4:	00409709 	.word	0x00409709
  4121f8:	00415d25 	.word	0x00415d25
  4121fc:	004164e3 	.word	0x004164e3
  412200:	004109a5 	.word	0x004109a5
  412204:	00417895 	.word	0x00417895
  412208:	0040d2b5 	.word	0x0040d2b5
  41220c:	00417a79 	.word	0x00417a79
  412210:	004109d9 	.word	0x004109d9
  412214:	00410d5d 	.word	0x00410d5d
            fill_area2.x1 = area_outer->x2 - rout + 1;
  412218:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  41221c:	b29a      	uxth	r2, r3
  41221e:	1b55      	subs	r5, r2, r5
  412220:	b2ad      	uxth	r5, r5
  412222:	3501      	adds	r5, #1
  412224:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x2;
  412228:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  41222c:	9a06      	ldr	r2, [sp, #24]
  41222e:	1a9b      	subs	r3, r3, r2
  412230:	3301      	adds	r3, #1
  412232:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  412236:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  41223a:	440a      	add	r2, r1
            if(mask_ofs < 0) mask_ofs = 0;
  41223c:	1a9b      	subs	r3, r3, r2
  41223e:	d46d      	bmi.n	41231c <draw_full_border+0x3f0>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
  412240:	f8cd 8008 	str.w	r8, [sp, #8]
  412244:	f8cd a004 	str.w	sl, [sp, #4]
  412248:	9700      	str	r7, [sp, #0]
  41224a:	9a07      	ldr	r2, [sp, #28]
  41224c:	4413      	add	r3, r2
  41224e:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  412252:	a910      	add	r1, sp, #64	; 0x40
  412254:	9805      	ldr	r0, [sp, #20]
  412256:	4d79      	ldr	r5, [pc, #484]	; (41243c <draw_full_border+0x510>)
  412258:	47a8      	blx	r5
            fill_area.y1++;
  41225a:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  41225e:	3301      	adds	r3, #1
  412260:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  412264:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  412268:	3301      	adds	r3, #1
  41226a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
  41226e:	f109 0901 	add.w	r9, r9, #1
  412272:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  412276:	4599      	cmp	r9, r3
  412278:	dc52      	bgt.n	412320 <draw_full_border+0x3f4>
            _lv_memset_ff(mask_buf, draw_area_w);
  41227a:	9908      	ldr	r1, [sp, #32]
  41227c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  412280:	4658      	mov	r0, fp
  412282:	4b6f      	ldr	r3, [pc, #444]	; (412440 <draw_full_border+0x514>)
  412284:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  412286:	8a31      	ldrh	r1, [r6, #16]
  412288:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  41228c:	4419      	add	r1, r3
  41228e:	8a72      	ldrh	r2, [r6, #18]
  412290:	444a      	add	r2, r9
  412292:	9b09      	ldr	r3, [sp, #36]	; 0x24
  412294:	b212      	sxth	r2, r2
  412296:	b209      	sxth	r1, r1
  412298:	4658      	mov	r0, fp
  41229a:	4d6a      	ldr	r5, [pc, #424]	; (412444 <draw_full_border+0x518>)
  41229c:	47a8      	blx	r5
  41229e:	4607      	mov	r7, r0
            fill_area2.x1 = area_outer->x1;
  4122a0:	f9b4 3000 	ldrsh.w	r3, [r4]
  4122a4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x1 + rout - 1;
  4122a8:	8823      	ldrh	r3, [r4, #0]
  4122aa:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  4122ae:	442b      	add	r3, r5
  4122b0:	b29b      	uxth	r3, r3
  4122b2:	3b01      	subs	r3, #1
  4122b4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            fill_area2.y1 = fill_area.y1;
  4122b8:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4122bc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area2.y2 = fill_area.y2;
  4122c0:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  4122c4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
  4122c8:	f8cd 8008 	str.w	r8, [sp, #8]
  4122cc:	f8cd a004 	str.w	sl, [sp, #4]
  4122d0:	9000      	str	r0, [sp, #0]
  4122d2:	465b      	mov	r3, fp
  4122d4:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  4122d8:	a910      	add	r1, sp, #64	; 0x40
  4122da:	9805      	ldr	r0, [sp, #20]
  4122dc:	f8df b15c 	ldr.w	fp, [pc, #348]	; 41243c <draw_full_border+0x510>
  4122e0:	47d8      	blx	fp
            if(fill_area2.y2 > area_outer->y2 - border_width) {
  4122e2:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  4122e6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  4122ea:	990a      	ldr	r1, [sp, #40]	; 0x28
  4122ec:	1a5b      	subs	r3, r3, r1
  4122ee:	429a      	cmp	r2, r3
  4122f0:	dd92      	ble.n	412218 <draw_full_border+0x2ec>
                fill_area2.x1 = area_outer->x1 + rout;
  4122f2:	8823      	ldrh	r3, [r4, #0]
  4122f4:	442b      	add	r3, r5
  4122f6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                fill_area2.x2 = area_outer->x2 - rout;
  4122fa:	88a3      	ldrh	r3, [r4, #4]
  4122fc:	1b5b      	subs	r3, r3, r5
  4122fe:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  412302:	f8cd 8008 	str.w	r8, [sp, #8]
  412306:	f8cd a004 	str.w	sl, [sp, #4]
  41230a:	2301      	movs	r3, #1
  41230c:	9300      	str	r3, [sp, #0]
  41230e:	2300      	movs	r3, #0
  412310:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  412314:	a910      	add	r1, sp, #64	; 0x40
  412316:	9805      	ldr	r0, [sp, #20]
  412318:	47d8      	blx	fp
  41231a:	e77d      	b.n	412218 <draw_full_border+0x2ec>
            if(mask_ofs < 0) mask_ofs = 0;
  41231c:	2300      	movs	r3, #0
  41231e:	e78f      	b.n	412240 <draw_full_border+0x314>
        fill_area.y1 = area_outer->y1 + corner_size + 1;
  412320:	8863      	ldrh	r3, [r4, #2]
  412322:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
  412326:	444b      	add	r3, r9
  412328:	b29b      	uxth	r3, r3
  41232a:	3301      	adds	r3, #1
  41232c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = area_outer->y2 - corner_size - 1;
  412330:	88e3      	ldrh	r3, [r4, #6]
  412332:	eba3 0309 	sub.w	r3, r3, r9
  412336:	b29b      	uxth	r3, r3
  412338:	3b01      	subs	r3, #1
  41233a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        fill_area.x1 = area_outer->x1;
  41233e:	f9b4 3000 	ldrsh.w	r3, [r4]
  412342:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x1 + border_width - 1;
  412346:	8823      	ldrh	r3, [r4, #0]
  412348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41234a:	4413      	add	r3, r2
  41234c:	b29b      	uxth	r3, r3
  41234e:	3b01      	subs	r3, #1
  412350:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  412354:	f8cd 8008 	str.w	r8, [sp, #8]
  412358:	f8cd a004 	str.w	sl, [sp, #4]
  41235c:	2601      	movs	r6, #1
  41235e:	9600      	str	r6, [sp, #0]
  412360:	2300      	movs	r3, #0
  412362:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  412366:	a912      	add	r1, sp, #72	; 0x48
  412368:	f8dd 9014 	ldr.w	r9, [sp, #20]
  41236c:	4648      	mov	r0, r9
  41236e:	4d33      	ldr	r5, [pc, #204]	; (41243c <draw_full_border+0x510>)
  412370:	47a8      	blx	r5
        fill_area.x1 = area_outer->x2 - border_width + 1;
  412372:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  412376:	b293      	uxth	r3, r2
  412378:	990c      	ldr	r1, [sp, #48]	; 0x30
  41237a:	1a5b      	subs	r3, r3, r1
  41237c:	b29b      	uxth	r3, r3
  41237e:	4433      	add	r3, r6
  412380:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  412384:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  412388:	f8cd 8008 	str.w	r8, [sp, #8]
  41238c:	f8cd a004 	str.w	sl, [sp, #4]
  412390:	9600      	str	r6, [sp, #0]
  412392:	2300      	movs	r3, #0
  412394:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  412398:	a912      	add	r1, sp, #72	; 0x48
  41239a:	4648      	mov	r0, r9
  41239c:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_rin_id);
  41239e:	980d      	ldr	r0, [sp, #52]	; 0x34
  4123a0:	4c29      	ldr	r4, [pc, #164]	; (412448 <draw_full_border+0x51c>)
  4123a2:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rout_id);
  4123a4:	980e      	ldr	r0, [sp, #56]	; 0x38
  4123a6:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  4123a8:	9807      	ldr	r0, [sp, #28]
  4123aa:	4b28      	ldr	r3, [pc, #160]	; (41244c <draw_full_border+0x520>)
  4123ac:	4798      	blx	r3
  4123ae:	e609      	b.n	411fc4 <draw_full_border+0x98>
        fill_area.x1 = area_outer->x1;
  4123b0:	f9b4 3000 	ldrsh.w	r3, [r4]
  4123b4:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  4123b8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  4123bc:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  4123c0:	8a73      	ldrh	r3, [r6, #18]
  4123c2:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
  4123c6:	fa13 f384 	uxtah	r3, r3, r4
  4123ca:	b21b      	sxth	r3, r3
  4123cc:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  4123d0:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  4123d4:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4123d8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  4123dc:	f8dd a014 	ldr.w	sl, [sp, #20]
  4123e0:	463d      	mov	r5, r7
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  4123e2:	e025      	b.n	412430 <draw_full_border+0x504>
            _lv_memset_ff(mask_buf, draw_area_w);
  4123e4:	9908      	ldr	r1, [sp, #32]
  4123e6:	4658      	mov	r0, fp
  4123e8:	4b15      	ldr	r3, [pc, #84]	; (412440 <draw_full_border+0x514>)
  4123ea:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  4123ec:	8a31      	ldrh	r1, [r6, #16]
  4123ee:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  4123f2:	4419      	add	r1, r3
  4123f4:	8a72      	ldrh	r2, [r6, #18]
  4123f6:	4422      	add	r2, r4
  4123f8:	464b      	mov	r3, r9
  4123fa:	b212      	sxth	r2, r2
  4123fc:	b209      	sxth	r1, r1
  4123fe:	4658      	mov	r0, fp
  412400:	4f10      	ldr	r7, [pc, #64]	; (412444 <draw_full_border+0x518>)
  412402:	47b8      	blx	r7
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
  412404:	f8cd 8008 	str.w	r8, [sp, #8]
  412408:	9501      	str	r5, [sp, #4]
  41240a:	9000      	str	r0, [sp, #0]
  41240c:	465b      	mov	r3, fp
  41240e:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  412412:	a912      	add	r1, sp, #72	; 0x48
  412414:	4650      	mov	r0, sl
  412416:	4f09      	ldr	r7, [pc, #36]	; (41243c <draw_full_border+0x510>)
  412418:	47b8      	blx	r7
            fill_area.y1++;
  41241a:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  41241e:	3301      	adds	r3, #1
  412420:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  412424:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  412428:	3301      	adds	r3, #1
  41242a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  41242e:	3401      	adds	r4, #1
  412430:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  412434:	429c      	cmp	r4, r3
  412436:	ddd5      	ble.n	4123e4 <draw_full_border+0x4b8>
  412438:	e7b1      	b.n	41239e <draw_full_border+0x472>
  41243a:	bf00      	nop
  41243c:	0040d2b5 	.word	0x0040d2b5
  412440:	00417a79 	.word	0x00417a79
  412444:	004109d9 	.word	0x004109d9
  412448:	00410a29 	.word	0x00410a29
  41244c:	00417645 	.word	0x00417645

00412450 <draw_outline>:
    if(dsc->outline_opa <= LV_OPA_MIN) return;
  412450:	7f93      	ldrb	r3, [r2, #30]
  412452:	2b02      	cmp	r3, #2
  412454:	d957      	bls.n	412506 <draw_outline+0xb6>
    if(dsc->outline_width == 0) return;
  412456:	f9b2 301a 	ldrsh.w	r3, [r2, #26]
  41245a:	2b00      	cmp	r3, #0
  41245c:	d053      	beq.n	412506 <draw_outline+0xb6>
{
  41245e:	b530      	push	{r4, r5, lr}
  412460:	b089      	sub	sp, #36	; 0x24
  412462:	ac06      	add	r4, sp, #24
  412464:	2308      	movs	r3, #8
  412466:	e004      	b.n	412472 <draw_outline+0x22>
        *d8 = *s8;
  412468:	f810 5b01 	ldrb.w	r5, [r0], #1
  41246c:	f804 5b01 	strb.w	r5, [r4], #1
        len--;
  412470:	3b01      	subs	r3, #1
    while(len) {
  412472:	2b00      	cmp	r3, #0
  412474:	d1f8      	bne.n	412468 <draw_outline+0x18>
    area_inner.x1 -= dsc->outline_pad;
  412476:	8b93      	ldrh	r3, [r2, #28]
  412478:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  41247c:	1ac0      	subs	r0, r0, r3
  41247e:	f8ad 0018 	strh.w	r0, [sp, #24]
    area_inner.y1 -= dsc->outline_pad;
  412482:	f8bd 001a 	ldrh.w	r0, [sp, #26]
  412486:	1ac0      	subs	r0, r0, r3
  412488:	f8ad 001a 	strh.w	r0, [sp, #26]
    area_inner.x2 += dsc->outline_pad;
  41248c:	f8bd 001c 	ldrh.w	r0, [sp, #28]
  412490:	4418      	add	r0, r3
  412492:	f8ad 001c 	strh.w	r0, [sp, #28]
    area_inner.y2 += dsc->outline_pad;
  412496:	f8bd 001e 	ldrh.w	r0, [sp, #30]
  41249a:	4403      	add	r3, r0
  41249c:	f8ad 301e 	strh.w	r3, [sp, #30]
    const uint8_t * s8 = (const uint8_t *)src;
  4124a0:	ac06      	add	r4, sp, #24
    uint8_t * d8 = (uint8_t *)dst;
  4124a2:	a804      	add	r0, sp, #16
  4124a4:	2308      	movs	r3, #8
  4124a6:	e004      	b.n	4124b2 <draw_outline+0x62>
        *d8 = *s8;
  4124a8:	f814 5b01 	ldrb.w	r5, [r4], #1
  4124ac:	f800 5b01 	strb.w	r5, [r0], #1
        len--;
  4124b0:	3b01      	subs	r3, #1
    while(len) {
  4124b2:	2b00      	cmp	r3, #0
  4124b4:	d1f8      	bne.n	4124a8 <draw_outline+0x58>
  4124b6:	4610      	mov	r0, r2
  4124b8:	460a      	mov	r2, r1
    area_outer.x1 -= dsc->outline_width;
  4124ba:	8b43      	ldrh	r3, [r0, #26]
  4124bc:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  4124c0:	1ae4      	subs	r4, r4, r3
  4124c2:	f8ad 4010 	strh.w	r4, [sp, #16]
    area_outer.x2 += dsc->outline_width;
  4124c6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  4124ca:	441c      	add	r4, r3
  4124cc:	f8ad 4014 	strh.w	r4, [sp, #20]
    area_outer.y1 -= dsc->outline_width;
  4124d0:	f8bd 4012 	ldrh.w	r4, [sp, #18]
  4124d4:	1ae4      	subs	r4, r4, r3
  4124d6:	f8ad 4012 	strh.w	r4, [sp, #18]
    area_outer.y2 += dsc->outline_width;
  4124da:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  4124de:	440b      	add	r3, r1
  4124e0:	f8ad 3016 	strh.w	r3, [sp, #22]
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
  4124e4:	f9b0 3000 	ldrsh.w	r3, [r0]
  4124e8:	7fc1      	ldrb	r1, [r0, #31]
  4124ea:	9103      	str	r1, [sp, #12]
  4124ec:	7f81      	ldrb	r1, [r0, #30]
  4124ee:	9102      	str	r1, [sp, #8]
  4124f0:	8b01      	ldrh	r1, [r0, #24]
  4124f2:	f8ad 1004 	strh.w	r1, [sp, #4]
  4124f6:	2101      	movs	r1, #1
  4124f8:	9100      	str	r1, [sp, #0]
  4124fa:	a904      	add	r1, sp, #16
  4124fc:	a806      	add	r0, sp, #24
  4124fe:	4c02      	ldr	r4, [pc, #8]	; (412508 <draw_outline+0xb8>)
  412500:	47a0      	blx	r4
}
  412502:	b009      	add	sp, #36	; 0x24
  412504:	bd30      	pop	{r4, r5, pc}
  412506:	4770      	bx	lr
  412508:	00411f2d 	.word	0x00411f2d

0041250c <draw_border>:
    if(dsc->border_opa <= LV_OPA_MIN) return;
  41250c:	7d13      	ldrb	r3, [r2, #20]
  41250e:	2b02      	cmp	r3, #2
  412510:	f240 8197 	bls.w	412842 <draw_border+0x336>
    if(dsc->border_width == 0) return;
  412514:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
  412518:	2b00      	cmp	r3, #0
  41251a:	f000 8192 	beq.w	412842 <draw_border+0x336>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
  41251e:	f9b2 3012 	ldrsh.w	r3, [r2, #18]
  412522:	2b00      	cmp	r3, #0
  412524:	f000 818d 	beq.w	412842 <draw_border+0x336>
    if(dsc->border_post) return;
  412528:	7d93      	ldrb	r3, [r2, #22]
  41252a:	f013 0f01 	tst.w	r3, #1
  41252e:	f040 8188 	bne.w	412842 <draw_border+0x336>
{
  412532:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412536:	b0a3      	sub	sp, #140	; 0x8c
  412538:	8885      	ldrh	r5, [r0, #4]
  41253a:	8803      	ldrh	r3, [r0, #0]
  41253c:	1aed      	subs	r5, r5, r3
  41253e:	b2ad      	uxth	r5, r5
  412540:	3501      	adds	r5, #1
  412542:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  412544:	88c3      	ldrh	r3, [r0, #6]
  412546:	8844      	ldrh	r4, [r0, #2]
  412548:	1b1b      	subs	r3, r3, r4
  41254a:	b29b      	uxth	r3, r3
  41254c:	3301      	adds	r3, #1
  41254e:	b21b      	sxth	r3, r3
    int32_t rout = dsc->radius;
  412550:	f9b2 4000 	ldrsh.w	r4, [r2]
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
  412554:	429d      	cmp	r5, r3
  412556:	bfa8      	it	ge
  412558:	461d      	movge	r5, r3
    if(rout > short_side >> 1) rout = short_side >> 1;
  41255a:	106d      	asrs	r5, r5, #1
  41255c:	42ac      	cmp	r4, r5
  41255e:	dc00      	bgt.n	412562 <draw_border+0x56>
    int32_t rout = dsc->radius;
  412560:	4625      	mov	r5, r4
    const uint8_t * s8 = (const uint8_t *)src;
  412562:	4606      	mov	r6, r0
    uint8_t * d8 = (uint8_t *)dst;
  412564:	ac20      	add	r4, sp, #128	; 0x80
  412566:	2308      	movs	r3, #8
  412568:	e004      	b.n	412574 <draw_border+0x68>
        *d8 = *s8;
  41256a:	f816 7b01 	ldrb.w	r7, [r6], #1
  41256e:	f804 7b01 	strb.w	r7, [r4], #1
        len--;
  412572:	3b01      	subs	r3, #1
    while(len) {
  412574:	2b00      	cmp	r3, #0
  412576:	d1f8      	bne.n	41256a <draw_border+0x5e>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
  412578:	f8bd 7080 	ldrh.w	r7, [sp, #128]	; 0x80
  41257c:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
  412580:	b2b4      	uxth	r4, r6
  412582:	f014 0f04 	tst.w	r4, #4
  412586:	d039      	beq.n	4125fc <draw_border+0xf0>
  412588:	8a13      	ldrh	r3, [r2, #16]
  41258a:	443b      	add	r3, r7
  41258c:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
  412590:	f8bd 7084 	ldrh.w	r7, [sp, #132]	; 0x84
  412594:	f014 0f08 	tst.w	r4, #8
  412598:	d036      	beq.n	412608 <draw_border+0xfc>
  41259a:	8a13      	ldrh	r3, [r2, #16]
  41259c:	1afb      	subs	r3, r7, r3
  41259e:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
  4125a2:	f8bd 7082 	ldrh.w	r7, [sp, #130]	; 0x82
  4125a6:	f014 0f02 	tst.w	r4, #2
  4125aa:	d033      	beq.n	412614 <draw_border+0x108>
  4125ac:	8a13      	ldrh	r3, [r2, #16]
  4125ae:	443b      	add	r3, r7
  4125b0:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
  4125b4:	f8bd 7086 	ldrh.w	r7, [sp, #134]	; 0x86
  4125b8:	f014 0f01 	tst.w	r4, #1
  4125bc:	d030      	beq.n	412620 <draw_border+0x114>
  4125be:	8a13      	ldrh	r3, [r2, #16]
  4125c0:	4692      	mov	sl, r2
  4125c2:	9105      	str	r1, [sp, #20]
  4125c4:	4604      	mov	r4, r0
  4125c6:	1afb      	subs	r3, r7, r3
  4125c8:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
  4125cc:	2e0f      	cmp	r6, #15
  4125ce:	d02d      	beq.n	41262c <draw_border+0x120>
        lv_opa_t opa = dsc->border_opa;
  4125d0:	f892 9014 	ldrb.w	r9, [r2, #20]
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  4125d4:	f1b9 0ffd 	cmp.w	r9, #253	; 0xfd
  4125d8:	d901      	bls.n	4125de <draw_border+0xd2>
  4125da:	f04f 09ff 	mov.w	r9, #255	; 0xff
        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  4125de:	4b99      	ldr	r3, [pc, #612]	; (412844 <draw_border+0x338>)
  4125e0:	4798      	blx	r3
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  4125e2:	4b99      	ldr	r3, [pc, #612]	; (412848 <draw_border+0x33c>)
  4125e4:	4798      	blx	r3
  4125e6:	4680      	mov	r8, r0
        is_common = _lv_area_intersect(&draw_area, coords, clip);
  4125e8:	9a05      	ldr	r2, [sp, #20]
  4125ea:	4621      	mov	r1, r4
  4125ec:	a80e      	add	r0, sp, #56	; 0x38
  4125ee:	4b97      	ldr	r3, [pc, #604]	; (41284c <draw_border+0x340>)
  4125f0:	4798      	blx	r3
        if(is_common == false) return;
  4125f2:	2800      	cmp	r0, #0
  4125f4:	d12d      	bne.n	412652 <draw_border+0x146>
}
  4125f6:	b023      	add	sp, #140	; 0x8c
  4125f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
  4125fc:	8a13      	ldrh	r3, [r2, #16]
  4125fe:	442b      	add	r3, r5
  412600:	b29b      	uxth	r3, r3
  412602:	425b      	negs	r3, r3
  412604:	b29b      	uxth	r3, r3
  412606:	e7c0      	b.n	41258a <draw_border+0x7e>
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
  412608:	8a13      	ldrh	r3, [r2, #16]
  41260a:	442b      	add	r3, r5
  41260c:	b29b      	uxth	r3, r3
  41260e:	425b      	negs	r3, r3
  412610:	b29b      	uxth	r3, r3
  412612:	e7c3      	b.n	41259c <draw_border+0x90>
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
  412614:	8a13      	ldrh	r3, [r2, #16]
  412616:	442b      	add	r3, r5
  412618:	b29b      	uxth	r3, r3
  41261a:	425b      	negs	r3, r3
  41261c:	b29b      	uxth	r3, r3
  41261e:	e7c6      	b.n	4125ae <draw_border+0xa2>
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
  412620:	8a13      	ldrh	r3, [r2, #16]
  412622:	442b      	add	r3, r5
  412624:	b29b      	uxth	r3, r3
  412626:	425b      	negs	r3, r3
  412628:	b29b      	uxth	r3, r3
  41262a:	e7c9      	b.n	4125c0 <draw_border+0xb4>
        draw_full_border(&area_inner, coords, clip, dsc->radius, false, dsc->border_color, dsc->border_opa,
  41262c:	f9b2 3000 	ldrsh.w	r3, [r2]
  412630:	7d52      	ldrb	r2, [r2, #21]
  412632:	9203      	str	r2, [sp, #12]
  412634:	f89a 2014 	ldrb.w	r2, [sl, #20]
  412638:	9202      	str	r2, [sp, #8]
  41263a:	f8ba 200e 	ldrh.w	r2, [sl, #14]
  41263e:	f8ad 2004 	strh.w	r2, [sp, #4]
  412642:	2200      	movs	r2, #0
  412644:	9200      	str	r2, [sp, #0]
  412646:	460a      	mov	r2, r1
  412648:	4601      	mov	r1, r0
  41264a:	a820      	add	r0, sp, #128	; 0x80
  41264c:	4c80      	ldr	r4, [pc, #512]	; (412850 <draw_border+0x344>)
  41264e:	47a0      	blx	r4
  412650:	e7d1      	b.n	4125f6 <draw_border+0xea>
        draw_area.x1 -= disp_area->x1;
  412652:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  412656:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
  41265a:	1a5b      	subs	r3, r3, r1
  41265c:	b29a      	uxth	r2, r3
  41265e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        draw_area.y1 -= disp_area->y1;
  412662:	f8b8 0012 	ldrh.w	r0, [r8, #18]
  412666:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
  41266a:	1a1b      	subs	r3, r3, r0
  41266c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
        draw_area.x2 -= disp_area->x1;
  412670:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  412674:	1a5b      	subs	r3, r3, r1
  412676:	b29b      	uxth	r3, r3
  412678:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        draw_area.y2 -= disp_area->y1;
  41267c:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
  412680:	1a09      	subs	r1, r1, r0
  412682:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  412686:	1a9b      	subs	r3, r3, r2
  412688:	b29b      	uxth	r3, r3
  41268a:	3301      	adds	r3, #1
  41268c:	b21b      	sxth	r3, r3
  41268e:	9308      	str	r3, [sp, #32]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  412690:	9306      	str	r3, [sp, #24]
  412692:	4618      	mov	r0, r3
  412694:	4b6f      	ldr	r3, [pc, #444]	; (412854 <draw_border+0x348>)
  412696:	4798      	blx	r3
  412698:	4607      	mov	r7, r0
        if(rout > 0) {
  41269a:	2d00      	cmp	r5, #0
  41269c:	dd53      	ble.n	412746 <draw_border+0x23a>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
  41269e:	2300      	movs	r3, #0
  4126a0:	462a      	mov	r2, r5
  4126a2:	4621      	mov	r1, r4
  4126a4:	a812      	add	r0, sp, #72	; 0x48
  4126a6:	4e6c      	ldr	r6, [pc, #432]	; (412858 <draw_border+0x34c>)
  4126a8:	47b0      	blx	r6
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  4126aa:	2100      	movs	r1, #0
  4126ac:	a812      	add	r0, sp, #72	; 0x48
  4126ae:	4b6b      	ldr	r3, [pc, #428]	; (41285c <draw_border+0x350>)
  4126b0:	4798      	blx	r3
  4126b2:	900a      	str	r0, [sp, #40]	; 0x28
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
  4126b4:	f8ba 2010 	ldrh.w	r2, [sl, #16]
  4126b8:	1aaa      	subs	r2, r5, r2
  4126ba:	2301      	movs	r3, #1
  4126bc:	b212      	sxth	r2, r2
  4126be:	a920      	add	r1, sp, #128	; 0x80
  4126c0:	a819      	add	r0, sp, #100	; 0x64
  4126c2:	4e65      	ldr	r6, [pc, #404]	; (412858 <draw_border+0x34c>)
  4126c4:	47b0      	blx	r6
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
  4126c6:	2100      	movs	r1, #0
  4126c8:	a819      	add	r0, sp, #100	; 0x64
  4126ca:	4b64      	ldr	r3, [pc, #400]	; (41285c <draw_border+0x350>)
  4126cc:	4798      	blx	r3
  4126ce:	900b      	str	r0, [sp, #44]	; 0x2c
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
  4126d0:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
  4126d4:	3b01      	subs	r3, #1
  4126d6:	429d      	cmp	r5, r3
  4126d8:	bfb8      	it	lt
  4126da:	461d      	movlt	r5, r3
        lv_color_t color = dsc->border_color;
  4126dc:	f8ba 300e 	ldrh.w	r3, [sl, #14]
  4126e0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
  4126e4:	f89a 3015 	ldrb.w	r3, [sl, #21]
  4126e8:	9307      	str	r3, [sp, #28]
        fill_area.x1 = coords->x1;
  4126ea:	f9b4 3000 	ldrsh.w	r3, [r4]
  4126ee:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        fill_area.x2 = coords->x2;
  4126f2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  4126f6:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  4126fa:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  4126fe:	f9bd 603a 	ldrsh.w	r6, [sp, #58]	; 0x3a
  412702:	fa13 f386 	uxtah	r3, r3, r6
  412706:	b21b      	sxth	r3, r3
  412708:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = fill_area.y1;
  41270c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
  412710:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
  412714:	2b04      	cmp	r3, #4
  412716:	d01a      	beq.n	41274e <draw_border+0x242>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
  412718:	2b08      	cmp	r3, #8
  41271a:	d01f      	beq.n	41275c <draw_border+0x250>
        uint32_t buf_ofs = 0;
  41271c:	f04f 0b00 	mov.w	fp, #0
        volatile bool top_only = false;
  412720:	2200      	movs	r2, #0
  412722:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
        volatile bool bottom_only = false;
  412726:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
  41272a:	2b02      	cmp	r3, #2
  41272c:	d023      	beq.n	412776 <draw_border+0x26a>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
  41272e:	2b01      	cmp	r3, #1
  412730:	d025      	beq.n	41277e <draw_border+0x272>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
  412732:	2b03      	cmp	r3, #3
  412734:	d027      	beq.n	412786 <draw_border+0x27a>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  412736:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
  41273a:	bb53      	cbnz	r3, 412792 <draw_border+0x286>
  41273c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
  412740:	b363      	cbz	r3, 41279c <draw_border+0x290>
  412742:	2300      	movs	r3, #0
  412744:	e026      	b.n	412794 <draw_border+0x288>
        int16_t mask_rout_id = LV_MASK_ID_INV;
  412746:	f04f 33ff 	mov.w	r3, #4294967295
  41274a:	930a      	str	r3, [sp, #40]	; 0x28
  41274c:	e7b2      	b.n	4126b4 <draw_border+0x1a8>
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
  41274e:	8822      	ldrh	r2, [r4, #0]
  412750:	442a      	add	r2, r5
  412752:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
        uint32_t buf_ofs = 0;
  412756:	f04f 0b00 	mov.w	fp, #0
  41275a:	e7e1      	b.n	412720 <draw_border+0x214>
            fill_area.x1 = coords->x2 - corner_size;
  41275c:	f8b4 b004 	ldrh.w	fp, [r4, #4]
  412760:	ebab 0b05 	sub.w	fp, fp, r5
  412764:	fa0f fb8b 	sxth.w	fp, fp
  412768:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
            buf_ofs = fill_area.x1 - coords->x1;
  41276c:	f9b4 2000 	ldrsh.w	r2, [r4]
  412770:	ebab 0b02 	sub.w	fp, fp, r2
  412774:	e7d4      	b.n	412720 <draw_border+0x214>
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
  412776:	2201      	movs	r2, #1
  412778:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  41277c:	e7d7      	b.n	41272e <draw_border+0x222>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
  41277e:	2201      	movs	r2, #1
  412780:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  412784:	e7d5      	b.n	412732 <draw_border+0x226>
            top_only = true;
  412786:	2301      	movs	r3, #1
  412788:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            bottom_only = true;
  41278c:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  412790:	e7d1      	b.n	412736 <draw_border+0x22a>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  412792:	2300      	movs	r3, #0
  412794:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  412798:	46a2      	mov	sl, r4
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  41279a:	e02b      	b.n	4127f4 <draw_border+0x2e8>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  41279c:	2301      	movs	r3, #1
  41279e:	e7f9      	b.n	412794 <draw_border+0x288>
                _lv_memset_ff(mask_buf, draw_area_w);
  4127a0:	9906      	ldr	r1, [sp, #24]
  4127a2:	4638      	mov	r0, r7
  4127a4:	4b2e      	ldr	r3, [pc, #184]	; (412860 <draw_border+0x354>)
  4127a6:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  4127a8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  4127ac:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
  4127b0:	4419      	add	r1, r3
  4127b2:	f8b8 2012 	ldrh.w	r2, [r8, #18]
  4127b6:	4432      	add	r2, r6
  4127b8:	9b08      	ldr	r3, [sp, #32]
  4127ba:	b212      	sxth	r2, r2
  4127bc:	b209      	sxth	r1, r1
  4127be:	4638      	mov	r0, r7
  4127c0:	4c28      	ldr	r4, [pc, #160]	; (412864 <draw_border+0x358>)
  4127c2:	47a0      	blx	r4
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
  4127c4:	9b07      	ldr	r3, [sp, #28]
  4127c6:	9302      	str	r3, [sp, #8]
  4127c8:	f8cd 9004 	str.w	r9, [sp, #4]
  4127cc:	9000      	str	r0, [sp, #0]
  4127ce:	eb07 030b 	add.w	r3, r7, fp
  4127d2:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
  4127d6:	a910      	add	r1, sp, #64	; 0x40
  4127d8:	9805      	ldr	r0, [sp, #20]
  4127da:	4c23      	ldr	r4, [pc, #140]	; (412868 <draw_border+0x35c>)
  4127dc:	47a0      	blx	r4
            fill_area.y1++;
  4127de:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
  4127e2:	3301      	adds	r3, #1
  4127e4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
  4127e8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4127ec:	3301      	adds	r3, #1
  4127ee:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  4127f2:	3601      	adds	r6, #1
  4127f4:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
  4127f8:	429e      	cmp	r6, r3
  4127fa:	dc19      	bgt.n	412830 <draw_border+0x324>
            if(normal ||
  4127fc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  412800:	2b00      	cmp	r3, #0
  412802:	d1cd      	bne.n	4127a0 <draw_border+0x294>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  412804:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
            if(normal ||
  412808:	b133      	cbz	r3, 412818 <draw_border+0x30c>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  41280a:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  41280e:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
  412812:	442b      	add	r3, r5
  412814:	429a      	cmp	r2, r3
  412816:	ddc3      	ble.n	4127a0 <draw_border+0x294>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
  412818:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  41281c:	2b00      	cmp	r3, #0
  41281e:	d0de      	beq.n	4127de <draw_border+0x2d2>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
  412820:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  412824:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
  412828:	1b5b      	subs	r3, r3, r5
  41282a:	429a      	cmp	r2, r3
  41282c:	dbd7      	blt.n	4127de <draw_border+0x2d2>
  41282e:	e7b7      	b.n	4127a0 <draw_border+0x294>
        lv_draw_mask_remove_id(mask_rin_id);
  412830:	980b      	ldr	r0, [sp, #44]	; 0x2c
  412832:	4c0e      	ldr	r4, [pc, #56]	; (41286c <draw_border+0x360>)
  412834:	47a0      	blx	r4
        lv_draw_mask_remove_id(mask_rout_id);
  412836:	980a      	ldr	r0, [sp, #40]	; 0x28
  412838:	47a0      	blx	r4
        _lv_mem_buf_release(mask_buf);
  41283a:	4638      	mov	r0, r7
  41283c:	4b0c      	ldr	r3, [pc, #48]	; (412870 <draw_border+0x364>)
  41283e:	4798      	blx	r3
  412840:	e6d9      	b.n	4125f6 <draw_border+0xea>
  412842:	4770      	bx	lr
  412844:	00409709 	.word	0x00409709
  412848:	00415d25 	.word	0x00415d25
  41284c:	004164e3 	.word	0x004164e3
  412850:	00411f2d 	.word	0x00411f2d
  412854:	00417895 	.word	0x00417895
  412858:	00410d5d 	.word	0x00410d5d
  41285c:	004109a5 	.word	0x004109a5
  412860:	00417a79 	.word	0x00417a79
  412864:	004109d9 	.word	0x004109d9
  412868:	0040d2b5 	.word	0x0040d2b5
  41286c:	00410a29 	.word	0x00410a29
  412870:	00417645 	.word	0x00417645

00412874 <draw_pattern>:
    if(dsc->pattern_image == NULL) return;
  412874:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  412876:	2b00      	cmp	r3, #0
  412878:	f000 814e 	beq.w	412b18 <draw_pattern+0x2a4>
{
  41287c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412880:	b09f      	sub	sp, #124	; 0x7c
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
  412882:	f892 4036 	ldrb.w	r4, [r2, #54]	; 0x36
  412886:	2c02      	cmp	r4, #2
  412888:	d802      	bhi.n	412890 <draw_pattern+0x1c>
}
  41288a:	b01f      	add	sp, #124	; 0x7c
  41288c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412890:	4614      	mov	r4, r2
  412892:	460e      	mov	r6, r1
  412894:	4605      	mov	r5, r0
    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
  412896:	4618      	mov	r0, r3
  412898:	4ba0      	ldr	r3, [pc, #640]	; (412b1c <draw_pattern+0x2a8>)
  41289a:	4798      	blx	r3
  41289c:	4680      	mov	r8, r0
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
  41289e:	2801      	cmp	r0, #1
  4128a0:	d908      	bls.n	4128b4 <draw_pattern+0x40>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
  4128a2:	2802      	cmp	r0, #2
  4128a4:	d022      	beq.n	4128ec <draw_pattern+0x78>
        lv_draw_img(coords, clip, NULL, NULL);
  4128a6:	2300      	movs	r3, #0
  4128a8:	461a      	mov	r2, r3
  4128aa:	4631      	mov	r1, r6
  4128ac:	4628      	mov	r0, r5
  4128ae:	4c9c      	ldr	r4, [pc, #624]	; (412b20 <draw_pattern+0x2ac>)
  4128b0:	47a0      	blx	r4
        return;
  4128b2:	e7ea      	b.n	41288a <draw_pattern+0x16>
        lv_res_t res = lv_img_decoder_get_info(dsc->pattern_image, &header);
  4128b4:	a907      	add	r1, sp, #28
  4128b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4128b8:	4b9a      	ldr	r3, [pc, #616]	; (412b24 <draw_pattern+0x2b0>)
  4128ba:	4798      	blx	r3
        if(res != LV_RES_OK) {
  4128bc:	2801      	cmp	r0, #1
  4128be:	d1e4      	bne.n	41288a <draw_pattern+0x16>
        img_w = header.w;
  4128c0:	9b07      	ldr	r3, [sp, #28]
  4128c2:	f3c3 2b8a 	ubfx	fp, r3, #10, #11
        img_h = header.h;
  4128c6:	f8bd a01e 	ldrh.w	sl, [sp, #30]
  4128ca:	f3ca 1a4a 	ubfx	sl, sl, #5, #11
        lv_draw_img_dsc_init(&img_dsc);
  4128ce:	a81a      	add	r0, sp, #104	; 0x68
  4128d0:	4b95      	ldr	r3, [pc, #596]	; (412b28 <draw_pattern+0x2b4>)
  4128d2:	4798      	blx	r3
        img_dsc.opa = dsc->pattern_opa;
  4128d4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  4128d8:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
  4128dc:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
  4128e0:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
        img_dsc.recolor = dsc->pattern_recolor;
  4128e4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
  4128e6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
  4128ea:	e01d      	b.n	412928 <draw_pattern+0xb4>
        lv_draw_label_dsc_init(&label_dsc);
  4128ec:	a811      	add	r0, sp, #68	; 0x44
  4128ee:	4b8f      	ldr	r3, [pc, #572]	; (412b2c <draw_pattern+0x2b8>)
  4128f0:	4798      	blx	r3
        label_dsc.color = dsc->pattern_recolor;
  4128f2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
  4128f4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        label_dsc.font = dsc->pattern_font;
  4128f8:	6b22      	ldr	r2, [r4, #48]	; 0x30
  4128fa:	9213      	str	r2, [sp, #76]	; 0x4c
        label_dsc.opa = dsc->pattern_opa;
  4128fc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  412900:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
  412904:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
  412908:	2100      	movs	r1, #0
  41290a:	9102      	str	r1, [sp, #8]
  41290c:	f647 4118 	movw	r1, #31768	; 0x7c18
  412910:	9101      	str	r1, [sp, #4]
  412912:	f9bd 1052 	ldrsh.w	r1, [sp, #82]	; 0x52
  412916:	9100      	str	r1, [sp, #0]
  412918:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  41291a:	a807      	add	r0, sp, #28
  41291c:	4f84      	ldr	r7, [pc, #528]	; (412b30 <draw_pattern+0x2bc>)
  41291e:	47b8      	blx	r7
        img_w = s.x;
  412920:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
        img_h = s.y;
  412924:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
    if(img_w == 0 || img_h == 0) return;
  412928:	f1ba 0f00 	cmp.w	sl, #0
  41292c:	bf18      	it	ne
  41292e:	f1bb 0f00 	cmpne.w	fp, #0
  412932:	d0aa      	beq.n	41288a <draw_pattern+0x16>
    if(dsc->pattern_repeat) {
  412934:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  412938:	f013 0f01 	tst.w	r3, #1
  41293c:	d148      	bne.n	4129d0 <draw_pattern+0x15c>
  41293e:	88a8      	ldrh	r0, [r5, #4]
  412940:	882b      	ldrh	r3, [r5, #0]
  412942:	1ac0      	subs	r0, r0, r3
  412944:	b280      	uxth	r0, r0
  412946:	3001      	adds	r0, #1
  412948:	b200      	sxth	r0, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41294a:	88ea      	ldrh	r2, [r5, #6]
  41294c:	8869      	ldrh	r1, [r5, #2]
  41294e:	1a52      	subs	r2, r2, r1
  412950:	b292      	uxth	r2, r2
  412952:	3201      	adds	r2, #1
  412954:	b212      	sxth	r2, r2
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
  412956:	ebb0 000b 	subs.w	r0, r0, fp
  41295a:	f100 80ba 	bmi.w	412ad2 <draw_pattern+0x25e>
  41295e:	eb03 0360 	add.w	r3, r3, r0, asr #1
  412962:	b29b      	uxth	r3, r3
  412964:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
  412968:	eba2 020a 	sub.w	r2, r2, sl
  41296c:	4610      	mov	r0, r2
  41296e:	2a00      	cmp	r2, #0
  412970:	f2c0 80b1 	blt.w	412ad6 <draw_pattern+0x262>
  412974:	eb01 0160 	add.w	r1, r1, r0, asr #1
  412978:	b289      	uxth	r1, r1
  41297a:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
  41297e:	445b      	add	r3, fp
  412980:	b29b      	uxth	r3, r3
  412982:	3b01      	subs	r3, #1
  412984:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
  412988:	eb01 030a 	add.w	r3, r1, sl
  41298c:	b29b      	uxth	r3, r3
  41298e:	3b01      	subs	r3, #1
  412990:	b29b      	uxth	r3, r3
  412992:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        if(src_type == LV_IMG_SRC_SYMBOL) {
  412996:	f1b8 0f02 	cmp.w	r8, #2
  41299a:	f000 809e 	beq.w	412ada <draw_pattern+0x266>
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
  41299e:	f9b4 2000 	ldrsh.w	r2, [r4]
  4129a2:	4629      	mov	r1, r5
  4129a4:	a80f      	add	r0, sp, #60	; 0x3c
  4129a6:	4b63      	ldr	r3, [pc, #396]	; (412b34 <draw_pattern+0x2c0>)
  4129a8:	4798      	blx	r3
  4129aa:	2800      	cmp	r0, #0
  4129ac:	f000 809e 	beq.w	412aec <draw_pattern+0x278>
        int16_t radius_mask_id = LV_MASK_ID_INV;
  4129b0:	f04f 35ff 	mov.w	r5, #4294967295
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  4129b4:	f1b8 0f02 	cmp.w	r8, #2
  4129b8:	f000 80a5 	beq.w	412b06 <draw_pattern+0x292>
        else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
  4129bc:	ab1a      	add	r3, sp, #104	; 0x68
  4129be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4129c0:	4631      	mov	r1, r6
  4129c2:	a80f      	add	r0, sp, #60	; 0x3c
  4129c4:	4c56      	ldr	r4, [pc, #344]	; (412b20 <draw_pattern+0x2ac>)
  4129c6:	47a0      	blx	r4
        lv_draw_mask_remove_id(radius_mask_id);
  4129c8:	4628      	mov	r0, r5
  4129ca:	4b5b      	ldr	r3, [pc, #364]	; (412b38 <draw_pattern+0x2c4>)
  4129cc:	4798      	blx	r3
  4129ce:	e75c      	b.n	41288a <draw_pattern+0x16>
        lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
  4129d0:	2300      	movs	r3, #0
  4129d2:	f9b4 2000 	ldrsh.w	r2, [r4]
  4129d6:	4629      	mov	r1, r5
  4129d8:	a808      	add	r0, sp, #32
  4129da:	4f58      	ldr	r7, [pc, #352]	; (412b3c <draw_pattern+0x2c8>)
  4129dc:	47b8      	blx	r7
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
  4129de:	2100      	movs	r1, #0
  4129e0:	a808      	add	r0, sp, #32
  4129e2:	4b57      	ldr	r3, [pc, #348]	; (412b40 <draw_pattern+0x2cc>)
  4129e4:	4798      	blx	r3
  4129e6:	9005      	str	r0, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4129e8:	88ab      	ldrh	r3, [r5, #4]
  4129ea:	882a      	ldrh	r2, [r5, #0]
  4129ec:	1a9b      	subs	r3, r3, r2
  4129ee:	b29b      	uxth	r3, r3
  4129f0:	3301      	adds	r3, #1
  4129f2:	b21b      	sxth	r3, r3
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
  4129f4:	fb93 f2fb 	sdiv	r2, r3, fp
  4129f8:	fb02 331b 	mls	r3, r2, fp, r3
  4129fc:	2b00      	cmp	r3, #0
  4129fe:	db1e      	blt.n	412a3e <draw_pattern+0x1ca>
  412a00:	105b      	asrs	r3, r3, #1
  412a02:	4618      	mov	r0, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  412a04:	88ea      	ldrh	r2, [r5, #6]
  412a06:	886b      	ldrh	r3, [r5, #2]
  412a08:	1ad2      	subs	r2, r2, r3
  412a0a:	b292      	uxth	r2, r2
  412a0c:	3201      	adds	r2, #1
  412a0e:	b212      	sxth	r2, r2
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
  412a10:	fb92 f1fa 	sdiv	r1, r2, sl
  412a14:	fb01 221a 	mls	r2, r1, sl, r2
  412a18:	2a00      	cmp	r2, #0
  412a1a:	db12      	blt.n	412a42 <draw_pattern+0x1ce>
        coords_tmp.y1 = coords->y1 - ofs_y;
  412a1c:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  412a20:	b29b      	uxth	r3, r3
  412a22:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
  412a26:	fa1f fa8a 	uxth.w	sl, sl
  412a2a:	4453      	add	r3, sl
  412a2c:	b29b      	uxth	r3, r3
  412a2e:	3b01      	subs	r3, #1
  412a30:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  412a34:	f8cd b010 	str.w	fp, [sp, #16]
  412a38:	4683      	mov	fp, r0
  412a3a:	46a1      	mov	r9, r4
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
  412a3c:	e031      	b.n	412aa2 <draw_pattern+0x22e>
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
  412a3e:	3301      	adds	r3, #1
  412a40:	e7de      	b.n	412a00 <draw_pattern+0x18c>
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
  412a42:	3201      	adds	r2, #1
  412a44:	e7ea      	b.n	412a1c <draw_pattern+0x1a8>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  412a46:	2300      	movs	r3, #0
  412a48:	9300      	str	r3, [sp, #0]
  412a4a:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
  412a4e:	aa11      	add	r2, sp, #68	; 0x44
  412a50:	4631      	mov	r1, r6
  412a52:	a80f      	add	r0, sp, #60	; 0x3c
  412a54:	4c3b      	ldr	r4, [pc, #236]	; (412b44 <draw_pattern+0x2d0>)
  412a56:	47a0      	blx	r4
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
  412a58:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  412a5c:	443b      	add	r3, r7
  412a5e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  412a62:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  412a66:	443b      	add	r3, r7
  412a68:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  412a6c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
  412a70:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  412a74:	429a      	cmp	r2, r3
  412a76:	dc0a      	bgt.n	412a8e <draw_pattern+0x21a>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  412a78:	f1b8 0f02 	cmp.w	r8, #2
  412a7c:	d0e3      	beq.n	412a46 <draw_pattern+0x1d2>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
  412a7e:	ab1a      	add	r3, sp, #104	; 0x68
  412a80:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
  412a84:	4631      	mov	r1, r6
  412a86:	a80f      	add	r0, sp, #60	; 0x3c
  412a88:	4c25      	ldr	r4, [pc, #148]	; (412b20 <draw_pattern+0x2ac>)
  412a8a:	47a0      	blx	r4
  412a8c:	e7e4      	b.n	412a58 <draw_pattern+0x1e4>
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
  412a8e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
  412a92:	4453      	add	r3, sl
  412a94:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  412a98:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
  412a9c:	4453      	add	r3, sl
  412a9e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  412aa2:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
  412aa6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  412aaa:	429a      	cmp	r2, r3
  412aac:	dc0d      	bgt.n	412aca <draw_pattern+0x256>
            coords_tmp.x1 = coords->x1 - ofs_x;
  412aae:	882b      	ldrh	r3, [r5, #0]
  412ab0:	eba3 030b 	sub.w	r3, r3, fp
  412ab4:	b29b      	uxth	r3, r3
  412ab6:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
  412aba:	f8bd 7010 	ldrh.w	r7, [sp, #16]
  412abe:	443b      	add	r3, r7
  412ac0:	b29b      	uxth	r3, r3
  412ac2:	3b01      	subs	r3, #1
  412ac4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
  412ac8:	e7d0      	b.n	412a6c <draw_pattern+0x1f8>
        lv_draw_mask_remove_id(radius_mask_id);
  412aca:	9805      	ldr	r0, [sp, #20]
  412acc:	4b1a      	ldr	r3, [pc, #104]	; (412b38 <draw_pattern+0x2c4>)
  412ace:	4798      	blx	r3
  412ad0:	e6db      	b.n	41288a <draw_pattern+0x16>
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
  412ad2:	3001      	adds	r0, #1
  412ad4:	e743      	b.n	41295e <draw_pattern+0xea>
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
  412ad6:	1c50      	adds	r0, r2, #1
  412ad8:	e74c      	b.n	412974 <draw_pattern+0x100>
            coords_tmp.y1 += y_corr;
  412ada:	f002 0201 	and.w	r2, r2, #1
  412ade:	4411      	add	r1, r2
  412ae0:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
            coords_tmp.y2 += y_corr;
  412ae4:	4413      	add	r3, r2
  412ae6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  412aea:	e758      	b.n	41299e <draw_pattern+0x12a>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
  412aec:	2300      	movs	r3, #0
  412aee:	f9b4 2000 	ldrsh.w	r2, [r4]
  412af2:	4629      	mov	r1, r5
  412af4:	a808      	add	r0, sp, #32
  412af6:	4d11      	ldr	r5, [pc, #68]	; (412b3c <draw_pattern+0x2c8>)
  412af8:	47a8      	blx	r5
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
  412afa:	2100      	movs	r1, #0
  412afc:	a808      	add	r0, sp, #32
  412afe:	4b10      	ldr	r3, [pc, #64]	; (412b40 <draw_pattern+0x2cc>)
  412b00:	4798      	blx	r3
  412b02:	4605      	mov	r5, r0
  412b04:	e756      	b.n	4129b4 <draw_pattern+0x140>
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  412b06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  412b08:	2200      	movs	r2, #0
  412b0a:	9200      	str	r2, [sp, #0]
  412b0c:	aa11      	add	r2, sp, #68	; 0x44
  412b0e:	4631      	mov	r1, r6
  412b10:	a80f      	add	r0, sp, #60	; 0x3c
  412b12:	4c0c      	ldr	r4, [pc, #48]	; (412b44 <draw_pattern+0x2d0>)
  412b14:	47a0      	blx	r4
  412b16:	e757      	b.n	4129c8 <draw_pattern+0x154>
  412b18:	4770      	bx	lr
  412b1a:	bf00      	nop
  412b1c:	0040e071 	.word	0x0040e071
  412b20:	0040e031 	.word	0x0040e031
  412b24:	00414839 	.word	0x00414839
  412b28:	0040dd85 	.word	0x0040dd85
  412b2c:	0040e919 	.word	0x0040e919
  412b30:	00418db5 	.word	0x00418db5
  412b34:	00416759 	.word	0x00416759
  412b38:	00410a29 	.word	0x00410a29
  412b3c:	00410d5d 	.word	0x00410d5d
  412b40:	004109a5 	.word	0x004109a5
  412b44:	0040e961 	.word	0x0040e961

00412b48 <draw_value_str>:
{
  412b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  412b4c:	b093      	sub	sp, #76	; 0x4c
    if(dsc->value_str == NULL) return;
  412b4e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  412b50:	b11d      	cbz	r5, 412b5a <draw_value_str+0x12>
    if(dsc->value_opa <= LV_OPA_MIN) return;
  412b52:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
  412b56:	2b02      	cmp	r3, #2
  412b58:	d802      	bhi.n	412b60 <draw_value_str+0x18>
}
  412b5a:	b013      	add	sp, #76	; 0x4c
  412b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412b60:	4614      	mov	r4, r2
  412b62:	460e      	mov	r6, r1
  412b64:	4680      	mov	r8, r0
    _lv_txt_get_size(&s, str, dsc->value_font, dsc->value_letter_space, dsc->value_line_space, LV_COORD_MAX,
  412b66:	f9b2 304c 	ldrsh.w	r3, [r2, #76]	; 0x4c
  412b6a:	2700      	movs	r7, #0
  412b6c:	9702      	str	r7, [sp, #8]
  412b6e:	f647 4218 	movw	r2, #31768	; 0x7c18
  412b72:	9201      	str	r2, [sp, #4]
  412b74:	f9b4 204e 	ldrsh.w	r2, [r4, #78]	; 0x4e
  412b78:	9200      	str	r2, [sp, #0]
  412b7a:	6c22      	ldr	r2, [r4, #64]	; 0x40
  412b7c:	4629      	mov	r1, r5
  412b7e:	a811      	add	r0, sp, #68	; 0x44
  412b80:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 412c34 <draw_value_str+0xec>
  412b84:	47c8      	blx	r9
    value_area.x1 = 0;
  412b86:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
    value_area.y1 = 0;
  412b8a:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
    value_area.x2 = s.x - 1;
  412b8e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  412b92:	3b01      	subs	r3, #1
  412b94:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    value_area.y2 = s.y - 1;
  412b98:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  412b9c:	3b01      	subs	r3, #1
  412b9e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
  412ba2:	ab0e      	add	r3, sp, #56	; 0x38
  412ba4:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  412ba8:	a90f      	add	r1, sp, #60	; 0x3c
  412baa:	4640      	mov	r0, r8
  412bac:	f8df 8088 	ldr.w	r8, [pc, #136]	; 412c38 <draw_value_str+0xf0>
  412bb0:	47c0      	blx	r8
    value_area.x1 += p_align.x + dsc->value_ofs_x;
  412bb2:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  412bb6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  412bba:	441a      	add	r2, r3
  412bbc:	b292      	uxth	r2, r2
  412bbe:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  412bc2:	4413      	add	r3, r2
  412bc4:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    value_area.y1 += p_align.y + dsc->value_ofs_y;
  412bc8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
  412bcc:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
  412bd0:	440b      	add	r3, r1
  412bd2:	b29b      	uxth	r3, r3
  412bd4:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
  412bd8:	4419      	add	r1, r3
  412bda:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    value_area.x2 += p_align.x + dsc->value_ofs_x;
  412bde:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
  412be2:	440a      	add	r2, r1
  412be4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    value_area.y2 += p_align.y + dsc->value_ofs_y;
  412be8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
  412bec:	4413      	add	r3, r2
  412bee:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    lv_draw_label_dsc_init(&label_dsc);
  412bf2:	a805      	add	r0, sp, #20
  412bf4:	4b0d      	ldr	r3, [pc, #52]	; (412c2c <draw_value_str+0xe4>)
  412bf6:	4798      	blx	r3
    label_dsc.font = dsc->value_font;
  412bf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
  412bfa:	9307      	str	r3, [sp, #28]
    label_dsc.letter_space = dsc->value_letter_space;
  412bfc:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
  412c00:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    label_dsc.line_space = dsc->value_line_space;
  412c04:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
  412c08:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    label_dsc.color = dsc->value_color;
  412c0c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  412c10:	f8ad 3014 	strh.w	r3, [sp, #20]
    label_dsc.opa = dsc->value_opa;
  412c14:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  412c18:	f88d 3020 	strb.w	r3, [sp, #32]
    lv_draw_label(&value_area, clip, &label_dsc, str, NULL);
  412c1c:	9700      	str	r7, [sp, #0]
  412c1e:	462b      	mov	r3, r5
  412c20:	aa05      	add	r2, sp, #20
  412c22:	4631      	mov	r1, r6
  412c24:	a80f      	add	r0, sp, #60	; 0x3c
  412c26:	4c02      	ldr	r4, [pc, #8]	; (412c30 <draw_value_str+0xe8>)
  412c28:	47a0      	blx	r4
  412c2a:	e796      	b.n	412b5a <draw_value_str+0x12>
  412c2c:	0040e919 	.word	0x0040e919
  412c30:	0040e961 	.word	0x0040e961
  412c34:	00418db5 	.word	0x00418db5
  412c38:	00416821 	.word	0x00416821

00412c3c <draw_bg>:
    if(dsc->bg_opa <= LV_OPA_MIN) return;
  412c3c:	7b13      	ldrb	r3, [r2, #12]
  412c3e:	2b02      	cmp	r3, #2
  412c40:	f240 839c 	bls.w	41337c <draw_bg+0x740>
{
  412c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412c48:	b0a5      	sub	sp, #148	; 0x94
  412c4a:	ad22      	add	r5, sp, #136	; 0x88
  412c4c:	2308      	movs	r3, #8
  412c4e:	e004      	b.n	412c5a <draw_bg+0x1e>
        *d8 = *s8;
  412c50:	f810 6b01 	ldrb.w	r6, [r0], #1
  412c54:	f805 6b01 	strb.w	r6, [r5], #1
        len--;
  412c58:	3b01      	subs	r3, #1
    while(len) {
  412c5a:	2b00      	cmp	r3, #0
  412c5c:	d1f8      	bne.n	412c50 <draw_bg+0x14>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
  412c5e:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
  412c62:	2b01      	cmp	r3, #1
  412c64:	dd22      	ble.n	412cac <draw_bg+0x70>
  412c66:	7d13      	ldrb	r3, [r2, #20]
  412c68:	2bfc      	cmp	r3, #252	; 0xfc
  412c6a:	d91f      	bls.n	412cac <draw_bg+0x70>
  412c6c:	f9b2 3000 	ldrsh.w	r3, [r2]
  412c70:	b1e3      	cbz	r3, 412cac <draw_bg+0x70>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
  412c72:	8a53      	ldrh	r3, [r2, #18]
  412c74:	f3c3 0080 	ubfx	r0, r3, #2, #1
  412c78:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
  412c7c:	4428      	add	r0, r5
  412c7e:	f8ad 0088 	strh.w	r0, [sp, #136]	; 0x88
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
  412c82:	f3c3 0040 	ubfx	r0, r3, #1, #1
  412c86:	f8bd 508a 	ldrh.w	r5, [sp, #138]	; 0x8a
  412c8a:	4428      	add	r0, r5
  412c8c:	f8ad 008a 	strh.w	r0, [sp, #138]	; 0x8a
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
  412c90:	f3c3 05c0 	ubfx	r5, r3, #3, #1
  412c94:	f8bd 008c 	ldrh.w	r0, [sp, #140]	; 0x8c
  412c98:	1b40      	subs	r0, r0, r5
  412c9a:	f8ad 008c 	strh.w	r0, [sp, #140]	; 0x8c
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
  412c9e:	f003 0301 	and.w	r3, r3, #1
  412ca2:	f8bd 008e 	ldrh.w	r0, [sp, #142]	; 0x8e
  412ca6:	1ac3      	subs	r3, r0, r3
  412ca8:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    lv_opa_t opa = dsc->bg_opa;
  412cac:	7b13      	ldrb	r3, [r2, #12]
  412cae:	9305      	str	r3, [sp, #20]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  412cb0:	2bfd      	cmp	r3, #253	; 0xfd
  412cb2:	d901      	bls.n	412cb8 <draw_bg+0x7c>
  412cb4:	23ff      	movs	r3, #255	; 0xff
  412cb6:	9305      	str	r3, [sp, #20]
  412cb8:	4692      	mov	sl, r2
  412cba:	460d      	mov	r5, r1
  412cbc:	910a      	str	r1, [sp, #40]	; 0x28
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  412cbe:	4bad      	ldr	r3, [pc, #692]	; (412f74 <draw_bg+0x338>)
  412cc0:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  412cc2:	4bad      	ldr	r3, [pc, #692]	; (412f78 <draw_bg+0x33c>)
  412cc4:	4798      	blx	r3
  412cc6:	4607      	mov	r7, r0
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
  412cc8:	462a      	mov	r2, r5
  412cca:	a922      	add	r1, sp, #136	; 0x88
  412ccc:	a820      	add	r0, sp, #128	; 0x80
  412cce:	4bab      	ldr	r3, [pc, #684]	; (412f7c <draw_bg+0x340>)
  412cd0:	4798      	blx	r3
    if(is_common == false) return;
  412cd2:	9006      	str	r0, [sp, #24]
  412cd4:	b910      	cbnz	r0, 412cdc <draw_bg+0xa0>
}
  412cd6:	b025      	add	sp, #148	; 0x94
  412cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    draw_area.x1 -= disp_area->x1;
  412cdc:	8a39      	ldrh	r1, [r7, #16]
  412cde:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  412ce2:	1a5b      	subs	r3, r3, r1
  412ce4:	b29a      	uxth	r2, r3
  412ce6:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
    draw_area.y1 -= disp_area->y1;
  412cea:	8a7d      	ldrh	r5, [r7, #18]
  412cec:	f8bd 0082 	ldrh.w	r0, [sp, #130]	; 0x82
  412cf0:	1b40      	subs	r0, r0, r5
  412cf2:	f8ad 0082 	strh.w	r0, [sp, #130]	; 0x82
    draw_area.x2 -= disp_area->x1;
  412cf6:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  412cfa:	1a5b      	subs	r3, r3, r1
  412cfc:	b29b      	uxth	r3, r3
  412cfe:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    draw_area.y2 -= disp_area->y1;
  412d02:	f8bd 1086 	ldrh.w	r1, [sp, #134]	; 0x86
  412d06:	1b49      	subs	r1, r1, r5
  412d08:	f8ad 1086 	strh.w	r1, [sp, #134]	; 0x86
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  412d0c:	1a9b      	subs	r3, r3, r2
  412d0e:	b29b      	uxth	r3, r3
  412d10:	3301      	adds	r3, #1
  412d12:	b21b      	sxth	r3, r3
  412d14:	930d      	str	r3, [sp, #52]	; 0x34
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  412d16:	930c      	str	r3, [sp, #48]	; 0x30
  412d18:	4618      	mov	r0, r3
  412d1a:	4b99      	ldr	r3, [pc, #612]	; (412f80 <draw_bg+0x344>)
  412d1c:	4798      	blx	r3
  412d1e:	9008      	str	r0, [sp, #32]
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
  412d20:	f89a 8006 	ldrb.w	r8, [sl, #6]
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
  412d24:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  412d28:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  412d2c:	429a      	cmp	r2, r3
  412d2e:	d00a      	beq.n	412d46 <draw_bg+0x10a>
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
  412d30:	4b94      	ldr	r3, [pc, #592]	; (412f84 <draw_bg+0x348>)
  412d32:	4798      	blx	r3
  412d34:	b283      	uxth	r3, r0
  412d36:	930e      	str	r3, [sp, #56]	; 0x38
    if(other_mask_cnt) simple_mode = false;
  412d38:	b943      	cbnz	r3, 412d4c <draw_bg+0x110>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
  412d3a:	f1b8 0f02 	cmp.w	r8, #2
  412d3e:	d068      	beq.n	412e12 <draw_bg+0x1d6>
    bool simple_mode = true;
  412d40:	9b06      	ldr	r3, [sp, #24]
  412d42:	9309      	str	r3, [sp, #36]	; 0x24
  412d44:	e004      	b.n	412d50 <draw_bg+0x114>
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
  412d46:	f04f 0800 	mov.w	r8, #0
  412d4a:	e7f1      	b.n	412d30 <draw_bg+0xf4>
    if(other_mask_cnt) simple_mode = false;
  412d4c:	2300      	movs	r3, #0
  412d4e:	9309      	str	r3, [sp, #36]	; 0x24
  412d50:	f8bd b08c 	ldrh.w	fp, [sp, #140]	; 0x8c
  412d54:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  412d58:	ebab 0b03 	sub.w	fp, fp, r3
  412d5c:	fa1f fb8b 	uxth.w	fp, fp
  412d60:	f10b 0b01 	add.w	fp, fp, #1
  412d64:	fa0f fb8b 	sxth.w	fp, fp
    int32_t coords_w = lv_area_get_width(&coords_bg);
  412d68:	f8cd b010 	str.w	fp, [sp, #16]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  412d6c:	f8bd 508e 	ldrh.w	r5, [sp, #142]	; 0x8e
  412d70:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  412d74:	1aed      	subs	r5, r5, r3
  412d76:	b2ad      	uxth	r5, r5
  412d78:	3501      	adds	r5, #1
  412d7a:	b22d      	sxth	r5, r5
    int32_t rout = dsc->radius;
  412d7c:	f9ba 3000 	ldrsh.w	r3, [sl]
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
  412d80:	455d      	cmp	r5, fp
  412d82:	bfa8      	it	ge
  412d84:	465d      	movge	r5, fp
    if(rout > short_side >> 1) rout = short_side >> 1;
  412d86:	106d      	asrs	r5, r5, #1
  412d88:	42ab      	cmp	r3, r5
  412d8a:	dc00      	bgt.n	412d8e <draw_bg+0x152>
    int32_t rout = dsc->radius;
  412d8c:	461d      	mov	r5, r3
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
  412d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  412d90:	2d00      	cmp	r5, #0
  412d92:	bf14      	ite	ne
  412d94:	2300      	movne	r3, #0
  412d96:	f003 0301 	andeq.w	r3, r3, #1
  412d9a:	b113      	cbz	r3, 412da2 <draw_bg+0x166>
  412d9c:	f1b8 0f00 	cmp.w	r8, #0
  412da0:	d03a      	beq.n	412e18 <draw_bg+0x1dc>
        if(rout > 0) {
  412da2:	2d00      	cmp	r5, #0
  412da4:	dd4a      	ble.n	412e3c <draw_bg+0x200>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
  412da6:	2300      	movs	r3, #0
  412da8:	462a      	mov	r2, r5
  412daa:	a922      	add	r1, sp, #136	; 0x88
  412dac:	a819      	add	r0, sp, #100	; 0x64
  412dae:	4e76      	ldr	r6, [pc, #472]	; (412f88 <draw_bg+0x34c>)
  412db0:	47b0      	blx	r6
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  412db2:	2100      	movs	r1, #0
  412db4:	a819      	add	r0, sp, #100	; 0x64
  412db6:	4b75      	ldr	r3, [pc, #468]	; (412f8c <draw_bg+0x350>)
  412db8:	4798      	blx	r3
  412dba:	9010      	str	r0, [sp, #64]	; 0x40
        lv_color_t grad_color = dsc->bg_color;
  412dbc:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  412dc0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        if(grad_dir == LV_GRAD_DIR_HOR) {
  412dc4:	f1b8 0f02 	cmp.w	r8, #2
  412dc8:	d03c      	beq.n	412e44 <draw_bg+0x208>
        lv_color_t * grad_map = NULL;
  412dca:	2300      	movs	r3, #0
  412dcc:	930f      	str	r3, [sp, #60]	; 0x3c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  412dce:	f9bd 208c 	ldrsh.w	r2, [sp, #140]	; 0x8c
  412dd2:	b293      	uxth	r3, r2
  412dd4:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  412dd8:	b288      	uxth	r0, r1
  412dda:	1a1b      	subs	r3, r3, r0
  412ddc:	b29b      	uxth	r3, r3
  412dde:	3301      	adds	r3, #1
  412de0:	b21b      	sxth	r3, r3
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
  412de2:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  412de6:	2b32      	cmp	r3, #50	; 0x32
  412de8:	dc01      	bgt.n	412dee <draw_bg+0x1b2>
        bool split = false;
  412dea:	2300      	movs	r3, #0
  412dec:	9306      	str	r3, [sp, #24]
        fill_area.x1 = coords_bg.x1;
  412dee:	f8ad 1054 	strh.w	r1, [sp, #84]	; 0x54
        fill_area.x2 = coords_bg.x2;
  412df2:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  412df6:	8a7b      	ldrh	r3, [r7, #18]
  412df8:	f9bd 6082 	ldrsh.w	r6, [sp, #130]	; 0x82
  412dfc:	fa13 f386 	uxtah	r3, r3, r6
  412e00:	b21b      	sxth	r3, r3
  412e02:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
        fill_area.y2 = fill_area.y1;
  412e06:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
  412e0a:	46b9      	mov	r9, r7
  412e0c:	f8bd b01c 	ldrh.w	fp, [sp, #28]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  412e10:	e1ec      	b.n	4131ec <draw_bg+0x5b0>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
  412e12:	2300      	movs	r3, #0
  412e14:	9309      	str	r3, [sp, #36]	; 0x24
  412e16:	e79b      	b.n	412d50 <draw_bg+0x114>
        _lv_blend_fill(clip, &coords_bg,
  412e18:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  412e1c:	f89a 300d 	ldrb.w	r3, [sl, #13]
  412e20:	9302      	str	r3, [sp, #8]
  412e22:	9b05      	ldr	r3, [sp, #20]
  412e24:	9301      	str	r3, [sp, #4]
  412e26:	2301      	movs	r3, #1
  412e28:	9300      	str	r3, [sp, #0]
  412e2a:	2300      	movs	r3, #0
  412e2c:	a922      	add	r1, sp, #136	; 0x88
  412e2e:	980a      	ldr	r0, [sp, #40]	; 0x28
  412e30:	4c57      	ldr	r4, [pc, #348]	; (412f90 <draw_bg+0x354>)
  412e32:	47a0      	blx	r4
    int16_t mask_rout_id = LV_MASK_ID_INV;
  412e34:	f04f 33ff 	mov.w	r3, #4294967295
  412e38:	9310      	str	r3, [sp, #64]	; 0x40
        _lv_blend_fill(clip, &coords_bg,
  412e3a:	e234      	b.n	4132a6 <draw_bg+0x66a>
    int16_t mask_rout_id = LV_MASK_ID_INV;
  412e3c:	f04f 33ff 	mov.w	r3, #4294967295
  412e40:	9310      	str	r3, [sp, #64]	; 0x40
  412e42:	e7bb      	b.n	412dbc <draw_bg+0x180>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
  412e44:	ea4f 004b 	mov.w	r0, fp, lsl #1
  412e48:	4b4d      	ldr	r3, [pc, #308]	; (412f80 <draw_bg+0x344>)
  412e4a:	4798      	blx	r3
  412e4c:	900f      	str	r0, [sp, #60]	; 0x3c
            for(i = 0; i < coords_w; i++) {
  412e4e:	f04f 0900 	mov.w	r9, #0
  412e52:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  412e56:	9512      	str	r5, [sp, #72]	; 0x48
  412e58:	4684      	mov	ip, r0
  412e5a:	9713      	str	r7, [sp, #76]	; 0x4c
  412e5c:	f8dd e010 	ldr.w	lr, [sp, #16]
  412e60:	e004      	b.n	412e6c <draw_bg+0x230>
    if(i <= min) return dsc->bg_color;
  412e62:	f8ba 3002 	ldrh.w	r3, [sl, #2]
                grad_map[i] = grad_get(dsc, coords_w, i);
  412e66:	8033      	strh	r3, [r6, #0]
            for(i = 0; i < coords_w; i++) {
  412e68:	f109 0901 	add.w	r9, r9, #1
  412e6c:	45f1      	cmp	r9, lr
  412e6e:	da66      	bge.n	412f3e <draw_bg+0x302>
                grad_map[i] = grad_get(dsc, coords_w, i);
  412e70:	eb0c 0649 	add.w	r6, ip, r9, lsl #1
  412e74:	fa0f f389 	sxth.w	r3, r9
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  412e78:	f9ba 0008 	ldrsh.w	r0, [sl, #8]
  412e7c:	fb0b f200 	mul.w	r2, fp, r0
  412e80:	1212      	asrs	r2, r2, #8
    if(i <= min) return dsc->bg_color;
  412e82:	429a      	cmp	r2, r3
  412e84:	daed      	bge.n	412e62 <draw_bg+0x226>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  412e86:	f9ba 100a 	ldrsh.w	r1, [sl, #10]
  412e8a:	fb01 f50b 	mul.w	r5, r1, fp
    if(i >= max) return dsc->bg_grad_color;
  412e8e:	ebb3 2f25 	cmp.w	r3, r5, asr #8
  412e92:	da51      	bge.n	412f38 <draw_bg+0x2fc>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  412e94:	1a09      	subs	r1, r1, r0
    d = (s * d) >> 8;
  412e96:	fb01 f10b 	mul.w	r1, r1, fp
  412e9a:	1209      	asrs	r1, r1, #8
    i -= min;
  412e9c:	1a9b      	subs	r3, r3, r2
  412e9e:	b21b      	sxth	r3, r3
    lv_opa_t mix = (i * 255) / d;
  412ea0:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
  412ea4:	fb93 f3f1 	sdiv	r3, r3, r1
  412ea8:	b2db      	uxtb	r3, r3
  412eaa:	f8ba 0004 	ldrh.w	r0, [sl, #4]
  412eae:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  412eb2:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  412eb6:	f3c1 05c4 	ubfx	r5, r1, #3, #5
  412eba:	f1c3 07ff 	rsb	r7, r3, #255	; 0xff
  412ebe:	fb07 f505 	mul.w	r5, r7, r5
  412ec2:	fb03 5202 	mla	r2, r3, r2, r5
  412ec6:	3280      	adds	r2, #128	; 0x80
  412ec8:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  412ecc:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  412ed0:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  412ed4:	f362 04c7 	bfi	r4, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  412ed8:	f000 0507 	and.w	r5, r0, #7
  412edc:	f3c0 3242 	ubfx	r2, r0, #13, #3
  412ee0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
  412ee4:	f001 0807 	and.w	r8, r1, #7
  412ee8:	f3c1 3542 	ubfx	r5, r1, #13, #3
  412eec:	eb05 05c8 	add.w	r5, r5, r8, lsl #3
  412ef0:	fb05 f507 	mul.w	r5, r5, r7
  412ef4:	fb02 5203 	mla	r2, r2, r3, r5
  412ef8:	3280      	adds	r2, #128	; 0x80
  412efa:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  412efe:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  412f02:	f3c2 6582 	ubfx	r5, r2, #26, #3
  412f06:	f365 0402 	bfi	r4, r5, #0, #3
  412f0a:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  412f0e:	f362 344f 	bfi	r4, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  412f12:	f3c0 2004 	ubfx	r0, r0, #8, #5
  412f16:	f3c1 2104 	ubfx	r1, r1, #8, #5
  412f1a:	fb01 f707 	mul.w	r7, r1, r7
  412f1e:	fb00 7303 	mla	r3, r0, r3, r7
  412f22:	3380      	adds	r3, #128	; 0x80
  412f24:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  412f28:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  412f2c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  412f30:	f363 240c 	bfi	r4, r3, #8, #5
  412f34:	4623      	mov	r3, r4
  412f36:	e796      	b.n	412e66 <draw_bg+0x22a>
    if(i >= max) return dsc->bg_grad_color;
  412f38:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  412f3c:	e793      	b.n	412e66 <draw_bg+0x22a>
  412f3e:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
  412f42:	9d12      	ldr	r5, [sp, #72]	; 0x48
  412f44:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  412f46:	e742      	b.n	412dce <draw_bg+0x192>
                    _lv_memset(mask_buf, opa, draw_area_w);
  412f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  412f4a:	9905      	ldr	r1, [sp, #20]
  412f4c:	9f08      	ldr	r7, [sp, #32]
  412f4e:	4638      	mov	r0, r7
  412f50:	4b10      	ldr	r3, [pc, #64]	; (412f94 <draw_bg+0x358>)
  412f52:	4798      	blx	r3
                    mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  412f54:	f8b9 1010 	ldrh.w	r1, [r9, #16]
  412f58:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  412f5c:	4419      	add	r1, r3
  412f5e:	f8b9 2012 	ldrh.w	r2, [r9, #18]
  412f62:	4432      	add	r2, r6
  412f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  412f66:	b212      	sxth	r2, r2
  412f68:	b209      	sxth	r1, r1
  412f6a:	4638      	mov	r0, r7
  412f6c:	4f0a      	ldr	r7, [pc, #40]	; (412f98 <draw_bg+0x35c>)
  412f6e:	47b8      	blx	r7
  412f70:	9004      	str	r0, [sp, #16]
  412f72:	e028      	b.n	412fc6 <draw_bg+0x38a>
  412f74:	00409709 	.word	0x00409709
  412f78:	00415d25 	.word	0x00415d25
  412f7c:	004164e3 	.word	0x004164e3
  412f80:	00417895 	.word	0x00417895
  412f84:	00410aa1 	.word	0x00410aa1
  412f88:	00410d5d 	.word	0x00410d5d
  412f8c:	004109a5 	.word	0x004109a5
  412f90:	0040d2b5 	.word	0x0040d2b5
  412f94:	004179c5 	.word	0x004179c5
  412f98:	004109d9 	.word	0x004109d9
                _lv_memset(mask_buf, opa, draw_area_w);
  412f9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  412f9e:	9905      	ldr	r1, [sp, #20]
  412fa0:	9f08      	ldr	r7, [sp, #32]
  412fa2:	4638      	mov	r0, r7
  412fa4:	4bb5      	ldr	r3, [pc, #724]	; (41327c <draw_bg+0x640>)
  412fa6:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  412fa8:	f8b9 1010 	ldrh.w	r1, [r9, #16]
  412fac:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  412fb0:	4419      	add	r1, r3
  412fb2:	f8b9 2012 	ldrh.w	r2, [r9, #18]
  412fb6:	4432      	add	r2, r6
  412fb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  412fba:	b212      	sxth	r2, r2
  412fbc:	b209      	sxth	r1, r1
  412fbe:	4638      	mov	r0, r7
  412fc0:	4faf      	ldr	r7, [pc, #700]	; (413280 <draw_bg+0x644>)
  412fc2:	47b8      	blx	r7
  412fc4:	9004      	str	r0, [sp, #16]
            if(mask_res == LV_DRAW_MASK_RES_CHANGED) {
  412fc6:	9b04      	ldr	r3, [sp, #16]
  412fc8:	2b02      	cmp	r3, #2
  412fca:	d061      	beq.n	413090 <draw_bg+0x454>
            opa2 = opa;
  412fcc:	9b05      	ldr	r3, [sp, #20]
  412fce:	9307      	str	r3, [sp, #28]
            if(grad_dir == LV_GRAD_DIR_VER) {
  412fd0:	f1b8 0f01 	cmp.w	r8, #1
  412fd4:	d05f      	beq.n	413096 <draw_bg+0x45a>
            if(simple_mode && split &&
  412fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  412fd8:	9a06      	ldr	r2, [sp, #24]
  412fda:	4013      	ands	r3, r2
  412fdc:	f013 0fff 	tst.w	r3, #255	; 0xff
  412fe0:	f000 80e8 	beq.w	4131b4 <draw_bg+0x578>
               (y < coords_bg.y1 + rout + 1 ||
  412fe4:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  412fe8:	442b      	add	r3, r5
  412fea:	3301      	adds	r3, #1
            if(simple_mode && split &&
  412fec:	429c      	cmp	r4, r3
  412fee:	db06      	blt.n	412ffe <draw_bg+0x3c2>
                y > coords_bg.y2 - rout - 1)) {
  412ff0:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  412ff4:	1b5b      	subs	r3, r3, r5
  412ff6:	3b01      	subs	r3, #1
               (y < coords_bg.y1 + rout + 1 ||
  412ff8:	429c      	cmp	r4, r3
  412ffa:	f340 80db 	ble.w	4131b4 <draw_bg+0x578>
                fill_area2.x1 = coords_bg.x1;
  412ffe:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  413002:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                fill_area2.x2 = coords_bg.x1 + rout - 1;
  413006:	b2ac      	uxth	r4, r5
  413008:	fa14 f383 	uxtah	r3, r4, r3
  41300c:	b29b      	uxth	r3, r3
  41300e:	3b01      	subs	r3, #1
  413010:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                fill_area2.y1 = fill_area.y1;
  413014:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
  413018:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                fill_area2.y2 = fill_area.y2;
  41301c:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  413020:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                _lv_blend_fill(clip, &fill_area2,
  413024:	f89a 300d 	ldrb.w	r3, [sl, #13]
  413028:	9302      	str	r3, [sp, #8]
  41302a:	9b07      	ldr	r3, [sp, #28]
  41302c:	9301      	str	r3, [sp, #4]
  41302e:	9b04      	ldr	r3, [sp, #16]
  413030:	9300      	str	r3, [sp, #0]
  413032:	9b08      	ldr	r3, [sp, #32]
  413034:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  413038:	a917      	add	r1, sp, #92	; 0x5c
  41303a:	980a      	ldr	r0, [sp, #40]	; 0x28
  41303c:	4f91      	ldr	r7, [pc, #580]	; (413284 <draw_bg+0x648>)
  41303e:	47b8      	blx	r7
                if(grad_dir == LV_GRAD_DIR_VER) {
  413040:	f1b8 0f01 	cmp.w	r8, #1
  413044:	f000 809c 	beq.w	413180 <draw_bg+0x544>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
  413048:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  41304c:	b29a      	uxth	r2, r3
  41304e:	1b14      	subs	r4, r2, r4
  413050:	b2a4      	uxth	r4, r4
  413052:	3401      	adds	r4, #1
  413054:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
                fill_area2.x2 = coords_bg.x2;
  413058:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  41305c:	1b5b      	subs	r3, r3, r5
  41305e:	3301      	adds	r3, #1
  413060:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
  413064:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
  413068:	440a      	add	r2, r1
                if(mask_ofs < 0) mask_ofs = 0;
  41306a:	1a9b      	subs	r3, r3, r2
  41306c:	f100 80a0 	bmi.w	4131b0 <draw_bg+0x574>
                _lv_blend_fill(clip, &fill_area2,
  413070:	f89a 200d 	ldrb.w	r2, [sl, #13]
  413074:	9202      	str	r2, [sp, #8]
  413076:	9a07      	ldr	r2, [sp, #28]
  413078:	9201      	str	r2, [sp, #4]
  41307a:	9a04      	ldr	r2, [sp, #16]
  41307c:	9200      	str	r2, [sp, #0]
  41307e:	9a08      	ldr	r2, [sp, #32]
  413080:	4413      	add	r3, r2
  413082:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  413086:	a917      	add	r1, sp, #92	; 0x5c
  413088:	980a      	ldr	r0, [sp, #40]	; 0x28
  41308a:	4c7e      	ldr	r4, [pc, #504]	; (413284 <draw_bg+0x648>)
  41308c:	47a0      	blx	r4
                y > coords_bg.y2 - rout - 1)) {
  41308e:	e0a2      	b.n	4131d6 <draw_bg+0x59a>
                opa2 = LV_OPA_COVER;
  413090:	23ff      	movs	r3, #255	; 0xff
  413092:	9307      	str	r3, [sp, #28]
  413094:	e79c      	b.n	412fd0 <draw_bg+0x394>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  413096:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
  41309a:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  41309e:	1ad2      	subs	r2, r2, r3
  4130a0:	b292      	uxth	r2, r2
  4130a2:	3201      	adds	r2, #1
  4130a4:	b212      	sxth	r2, r2
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
  4130a6:	1ae3      	subs	r3, r4, r3
  4130a8:	b29b      	uxth	r3, r3
  4130aa:	fa0f fe83 	sxth.w	lr, r3
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  4130ae:	f9ba c008 	ldrsh.w	ip, [sl, #8]
  4130b2:	fb02 f10c 	mul.w	r1, r2, ip
  4130b6:	1209      	asrs	r1, r1, #8
    if(i <= min) return dsc->bg_color;
  4130b8:	4571      	cmp	r1, lr
  4130ba:	da59      	bge.n	413170 <draw_bg+0x534>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  4130bc:	f9ba 000a 	ldrsh.w	r0, [sl, #10]
  4130c0:	fb00 f702 	mul.w	r7, r0, r2
    if(i >= max) return dsc->bg_grad_color;
  4130c4:	ebbe 2f27 	cmp.w	lr, r7, asr #8
  4130c8:	da57      	bge.n	41317a <draw_bg+0x53e>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  4130ca:	eba0 000c 	sub.w	r0, r0, ip
    d = (s * d) >> 8;
  4130ce:	fb00 f202 	mul.w	r2, r0, r2
  4130d2:	1212      	asrs	r2, r2, #8
    i -= min;
  4130d4:	1a5b      	subs	r3, r3, r1
  4130d6:	b21b      	sxth	r3, r3
    lv_opa_t mix = (i * 255) / d;
  4130d8:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
  4130dc:	fb93 f3f2 	sdiv	r3, r3, r2
  4130e0:	b2db      	uxtb	r3, r3
  4130e2:	f8ba 0004 	ldrh.w	r0, [sl, #4]
  4130e6:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4130ea:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  4130ee:	f3c1 0ec4 	ubfx	lr, r1, #3, #5
  4130f2:	f1c3 0cff 	rsb	ip, r3, #255	; 0xff
  4130f6:	fb0c fe0e 	mul.w	lr, ip, lr
  4130fa:	fb03 e202 	mla	r2, r3, r2, lr
  4130fe:	3280      	adds	r2, #128	; 0x80
  413100:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  413104:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  413108:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  41310c:	f362 0bc7 	bfi	fp, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  413110:	f000 0e07 	and.w	lr, r0, #7
  413114:	f3c0 3242 	ubfx	r2, r0, #13, #3
  413118:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  41311c:	f001 0707 	and.w	r7, r1, #7
  413120:	f3c1 3e42 	ubfx	lr, r1, #13, #3
  413124:	eb0e 0ec7 	add.w	lr, lr, r7, lsl #3
  413128:	fb0e fe0c 	mul.w	lr, lr, ip
  41312c:	fb02 e203 	mla	r2, r2, r3, lr
  413130:	3280      	adds	r2, #128	; 0x80
  413132:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  413136:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  41313a:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  41313e:	f36e 0b02 	bfi	fp, lr, #0, #3
  413142:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  413146:	f362 3b4f 	bfi	fp, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41314a:	f3c0 2004 	ubfx	r0, r0, #8, #5
  41314e:	f3c1 2104 	ubfx	r1, r1, #8, #5
  413152:	fb01 fc0c 	mul.w	ip, r1, ip
  413156:	fb00 c303 	mla	r3, r0, r3, ip
  41315a:	3380      	adds	r3, #128	; 0x80
  41315c:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  413160:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  413164:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  413168:	f363 2b0c 	bfi	fp, r3, #8, #5
  41316c:	465b      	mov	r3, fp
  41316e:	e001      	b.n	413174 <draw_bg+0x538>
    if(i <= min) return dsc->bg_color;
  413170:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  413174:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  413178:	e72d      	b.n	412fd6 <draw_bg+0x39a>
    if(i >= max) return dsc->bg_grad_color;
  41317a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  41317e:	e7f9      	b.n	413174 <draw_bg+0x538>
                    fill_area2.x1 = coords_bg.x1 + rout;
  413180:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  413184:	4423      	add	r3, r4
  413186:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                    fill_area2.x2 = coords_bg.x2 - rout;
  41318a:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  41318e:	1b1b      	subs	r3, r3, r4
  413190:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    _lv_blend_fill(clip, &fill_area2,
  413194:	f89a 300d 	ldrb.w	r3, [sl, #13]
  413198:	9302      	str	r3, [sp, #8]
  41319a:	9b05      	ldr	r3, [sp, #20]
  41319c:	9301      	str	r3, [sp, #4]
  41319e:	2301      	movs	r3, #1
  4131a0:	9300      	str	r3, [sp, #0]
  4131a2:	2300      	movs	r3, #0
  4131a4:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  4131a8:	a917      	add	r1, sp, #92	; 0x5c
  4131aa:	980a      	ldr	r0, [sp, #40]	; 0x28
  4131ac:	47b8      	blx	r7
  4131ae:	e74b      	b.n	413048 <draw_bg+0x40c>
                if(mask_ofs < 0) mask_ofs = 0;
  4131b0:	2300      	movs	r3, #0
  4131b2:	e75d      	b.n	413070 <draw_bg+0x434>
                if(grad_dir == LV_GRAD_DIR_HOR) {
  4131b4:	f1b8 0f02 	cmp.w	r8, #2
  4131b8:	d034      	beq.n	413224 <draw_bg+0x5e8>
                else if(grad_dir == LV_GRAD_DIR_VER) {
  4131ba:	f1b8 0f01 	cmp.w	r8, #1
  4131be:	d03f      	beq.n	413240 <draw_bg+0x604>
                else if(other_mask_cnt != 0 || !split) {
  4131c0:	9b06      	ldr	r3, [sp, #24]
  4131c2:	f083 0301 	eor.w	r3, r3, #1
  4131c6:	b2db      	uxtb	r3, r3
  4131c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4131ca:	2a00      	cmp	r2, #0
  4131cc:	bf18      	it	ne
  4131ce:	f043 0301 	orrne.w	r3, r3, #1
  4131d2:	2b00      	cmp	r3, #0
  4131d4:	d143      	bne.n	41325e <draw_bg+0x622>
            fill_area.y1++;
  4131d6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
  4131da:	3301      	adds	r3, #1
  4131dc:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2++;
  4131e0:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  4131e4:	3301      	adds	r3, #1
  4131e6:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  4131ea:	3601      	adds	r6, #1
  4131ec:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  4131f0:	429e      	cmp	r6, r3
  4131f2:	dc4b      	bgt.n	41328c <draw_bg+0x650>
            int32_t y = h + vdb->area.y1;
  4131f4:	f9b9 4012 	ldrsh.w	r4, [r9, #18]
  4131f8:	4434      	add	r4, r6
            if(y > coords_bg.y1 + rout + 1 &&
  4131fa:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  4131fe:	442b      	add	r3, r5
  413200:	3301      	adds	r3, #1
  413202:	429c      	cmp	r4, r3
  413204:	f77f aeca 	ble.w	412f9c <draw_bg+0x360>
               y < coords_bg.y2 - rout - 1) {
  413208:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  41320c:	1b5b      	subs	r3, r3, r5
  41320e:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
  413210:	429c      	cmp	r4, r3
  413212:	f6bf aec3 	bge.w	412f9c <draw_bg+0x360>
                if(simple_mode == false) {
  413216:	9b09      	ldr	r3, [sp, #36]	; 0x24
  413218:	2b00      	cmp	r3, #0
  41321a:	f43f ae95 	beq.w	412f48 <draw_bg+0x30c>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
  41321e:	2301      	movs	r3, #1
  413220:	9304      	str	r3, [sp, #16]
  413222:	e6d0      	b.n	412fc6 <draw_bg+0x38a>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
  413224:	f89a 300d 	ldrb.w	r3, [sl, #13]
  413228:	9302      	str	r3, [sp, #8]
  41322a:	9b07      	ldr	r3, [sp, #28]
  41322c:	9301      	str	r3, [sp, #4]
  41322e:	9b04      	ldr	r3, [sp, #16]
  413230:	9300      	str	r3, [sp, #0]
  413232:	9b08      	ldr	r3, [sp, #32]
  413234:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  413236:	a915      	add	r1, sp, #84	; 0x54
  413238:	980a      	ldr	r0, [sp, #40]	; 0x28
  41323a:	4c13      	ldr	r4, [pc, #76]	; (413288 <draw_bg+0x64c>)
  41323c:	47a0      	blx	r4
  41323e:	e7ca      	b.n	4131d6 <draw_bg+0x59a>
                    _lv_blend_fill(clip, &fill_area,
  413240:	f89a 300d 	ldrb.w	r3, [sl, #13]
  413244:	9302      	str	r3, [sp, #8]
  413246:	9b07      	ldr	r3, [sp, #28]
  413248:	9301      	str	r3, [sp, #4]
  41324a:	9b04      	ldr	r3, [sp, #16]
  41324c:	9300      	str	r3, [sp, #0]
  41324e:	9b08      	ldr	r3, [sp, #32]
  413250:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  413254:	a915      	add	r1, sp, #84	; 0x54
  413256:	980a      	ldr	r0, [sp, #40]	; 0x28
  413258:	4c0a      	ldr	r4, [pc, #40]	; (413284 <draw_bg+0x648>)
  41325a:	47a0      	blx	r4
  41325c:	e7bb      	b.n	4131d6 <draw_bg+0x59a>
                    _lv_blend_fill(clip, &fill_area,
  41325e:	f89a 300d 	ldrb.w	r3, [sl, #13]
  413262:	9302      	str	r3, [sp, #8]
  413264:	9b07      	ldr	r3, [sp, #28]
  413266:	9301      	str	r3, [sp, #4]
  413268:	9b04      	ldr	r3, [sp, #16]
  41326a:	9300      	str	r3, [sp, #0]
  41326c:	9b08      	ldr	r3, [sp, #32]
  41326e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  413272:	a915      	add	r1, sp, #84	; 0x54
  413274:	980a      	ldr	r0, [sp, #40]	; 0x28
  413276:	4c03      	ldr	r4, [pc, #12]	; (413284 <draw_bg+0x648>)
  413278:	47a0      	blx	r4
  41327a:	e7ac      	b.n	4131d6 <draw_bg+0x59a>
  41327c:	004179c5 	.word	0x004179c5
  413280:	004109d9 	.word	0x004109d9
  413284:	0040d2b5 	.word	0x0040d2b5
  413288:	0040d3d5 	.word	0x0040d3d5
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
  41328c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41328e:	f1b8 0f00 	cmp.w	r8, #0
  413292:	bf08      	it	eq
  413294:	2b00      	cmpeq	r3, #0
  413296:	d101      	bne.n	41329c <draw_bg+0x660>
  413298:	9b06      	ldr	r3, [sp, #24]
  41329a:	b95b      	cbnz	r3, 4132b4 <draw_bg+0x678>
        if(grad_map) _lv_mem_buf_release(grad_map);
  41329c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  41329e:	b113      	cbz	r3, 4132a6 <draw_bg+0x66a>
  4132a0:	4618      	mov	r0, r3
  4132a2:	4b37      	ldr	r3, [pc, #220]	; (413380 <draw_bg+0x744>)
  4132a4:	4798      	blx	r3
    lv_draw_mask_remove_id(mask_rout_id);
  4132a6:	9810      	ldr	r0, [sp, #64]	; 0x40
  4132a8:	4b36      	ldr	r3, [pc, #216]	; (413384 <draw_bg+0x748>)
  4132aa:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
  4132ac:	9808      	ldr	r0, [sp, #32]
  4132ae:	4b34      	ldr	r3, [pc, #208]	; (413380 <draw_bg+0x744>)
  4132b0:	4798      	blx	r3
  4132b2:	e510      	b.n	412cd6 <draw_bg+0x9a>
            fill_area.x1 = coords_bg.x1 + rout;
  4132b4:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  4132b8:	b2ad      	uxth	r5, r5
  4132ba:	442b      	add	r3, r5
  4132bc:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            fill_area.x2 = coords_bg.x2 - rout;
  4132c0:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  4132c4:	1b5b      	subs	r3, r3, r5
  4132c6:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            fill_area.y1 = coords_bg.y1;
  4132ca:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  4132ce:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y1 + rout;
  4132d2:	fa15 f383 	uxtah	r3, r5, r3
  4132d6:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  4132da:	f89a 300d 	ldrb.w	r3, [sl, #13]
  4132de:	9302      	str	r3, [sp, #8]
  4132e0:	9b05      	ldr	r3, [sp, #20]
  4132e2:	9301      	str	r3, [sp, #4]
  4132e4:	2301      	movs	r3, #1
  4132e6:	9300      	str	r3, [sp, #0]
  4132e8:	2300      	movs	r3, #0
  4132ea:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  4132ee:	a915      	add	r1, sp, #84	; 0x54
  4132f0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4132f2:	4c25      	ldr	r4, [pc, #148]	; (413388 <draw_bg+0x74c>)
  4132f4:	47a0      	blx	r4
            fill_area.y1 = coords_bg.y2 - rout;
  4132f6:	f9bd 108e 	ldrsh.w	r1, [sp, #142]	; 0x8e
  4132fa:	b28b      	uxth	r3, r1
  4132fc:	1b5b      	subs	r3, r3, r5
  4132fe:	b21b      	sxth	r3, r3
  413300:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
  413304:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
  413308:	4293      	cmp	r3, r2
  41330a:	dc03      	bgt.n	413314 <draw_bg+0x6d8>
  41330c:	b293      	uxth	r3, r2
  41330e:	3301      	adds	r3, #1
  413310:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y2;
  413314:	f8ad 105a 	strh.w	r1, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  413318:	f89a 300d 	ldrb.w	r3, [sl, #13]
  41331c:	9302      	str	r3, [sp, #8]
  41331e:	9f05      	ldr	r7, [sp, #20]
  413320:	9701      	str	r7, [sp, #4]
  413322:	2601      	movs	r6, #1
  413324:	9600      	str	r6, [sp, #0]
  413326:	2300      	movs	r3, #0
  413328:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  41332c:	a915      	add	r1, sp, #84	; 0x54
  41332e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  413332:	4640      	mov	r0, r8
  413334:	4c14      	ldr	r4, [pc, #80]	; (413388 <draw_bg+0x74c>)
  413336:	47a0      	blx	r4
            fill_area.x1 = coords_bg.x1;
  413338:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  41333c:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            fill_area.x2 = coords_bg.x2;
  413340:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  413344:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            fill_area.y1 = coords_bg.y1 + rout + 1;
  413348:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  41334c:	442b      	add	r3, r5
  41334e:	b29b      	uxth	r3, r3
  413350:	4433      	add	r3, r6
  413352:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y2 - rout - 1;
  413356:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  41335a:	1b5b      	subs	r3, r3, r5
  41335c:	b29b      	uxth	r3, r3
  41335e:	3b01      	subs	r3, #1
  413360:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  413364:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  413368:	f89a 300d 	ldrb.w	r3, [sl, #13]
  41336c:	9302      	str	r3, [sp, #8]
  41336e:	9701      	str	r7, [sp, #4]
  413370:	9600      	str	r6, [sp, #0]
  413372:	2300      	movs	r3, #0
  413374:	a915      	add	r1, sp, #84	; 0x54
  413376:	4640      	mov	r0, r8
  413378:	47a0      	blx	r4
  41337a:	e78f      	b.n	41329c <draw_bg+0x660>
  41337c:	4770      	bx	lr
  41337e:	bf00      	nop
  413380:	00417645 	.word	0x00417645
  413384:	00410a29 	.word	0x00410a29
  413388:	0040d2b5 	.word	0x0040d2b5

0041338c <lv_draw_rect_dsc_init>:
{
  41338c:	b510      	push	{r4, lr}
  41338e:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
  413390:	2154      	movs	r1, #84	; 0x54
  413392:	4b0e      	ldr	r3, [pc, #56]	; (4133cc <lv_draw_rect_dsc_init+0x40>)
  413394:	4798      	blx	r3
    dsc->bg_color = LV_COLOR_WHITE;
  413396:	4b0e      	ldr	r3, [pc, #56]	; (4133d0 <lv_draw_rect_dsc_init+0x44>)
  413398:	881b      	ldrh	r3, [r3, #0]
  41339a:	8063      	strh	r3, [r4, #2]
    dsc->bg_grad_color = LV_COLOR_BLACK;
  41339c:	2300      	movs	r3, #0
  41339e:	80a3      	strh	r3, [r4, #4]
    dsc->border_color = LV_COLOR_BLACK;
  4133a0:	81e3      	strh	r3, [r4, #14]
    dsc->pattern_recolor = LV_COLOR_BLACK;
  4133a2:	86a3      	strh	r3, [r4, #52]	; 0x34
    dsc->value_color = LV_COLOR_BLACK;
  4133a4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    dsc->shadow_color = LV_COLOR_BLACK;
  4133a8:	8423      	strh	r3, [r4, #32]
    dsc->bg_grad_color_stop = 0xFF;
  4133aa:	23ff      	movs	r3, #255	; 0xff
  4133ac:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
  4133ae:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
  4133b0:	77a3      	strb	r3, [r4, #30]
    dsc->border_opa = LV_OPA_COVER;
  4133b2:	7523      	strb	r3, [r4, #20]
    dsc->pattern_opa = LV_OPA_COVER;
  4133b4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
  4133b8:	4a06      	ldr	r2, [pc, #24]	; (4133d4 <lv_draw_rect_dsc_init+0x48>)
  4133ba:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->value_opa = LV_OPA_COVER;
  4133bc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
  4133c0:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->shadow_opa = LV_OPA_COVER;
  4133c2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    dsc->border_side = LV_BORDER_SIDE_FULL;
  4133c6:	230f      	movs	r3, #15
  4133c8:	8263      	strh	r3, [r4, #18]
  4133ca:	bd10      	pop	{r4, pc}
  4133cc:	00417a21 	.word	0x00417a21
  4133d0:	0042e6f0 	.word	0x0042e6f0
  4133d4:	2040008c 	.word	0x2040008c

004133d8 <lv_draw_rect>:
{
  4133d8:	b570      	push	{r4, r5, r6, lr}
  4133da:	88c3      	ldrh	r3, [r0, #6]
  4133dc:	8844      	ldrh	r4, [r0, #2]
  4133de:	1b1b      	subs	r3, r3, r4
  4133e0:	b29b      	uxth	r3, r3
  4133e2:	3301      	adds	r3, #1
  4133e4:	b21b      	sxth	r3, r3
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
  4133e6:	2b00      	cmp	r3, #0
  4133e8:	dd25      	ble.n	413436 <lv_draw_rect+0x5e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4133ea:	8883      	ldrh	r3, [r0, #4]
  4133ec:	8804      	ldrh	r4, [r0, #0]
  4133ee:	1b1b      	subs	r3, r3, r4
  4133f0:	b29b      	uxth	r3, r3
  4133f2:	3301      	adds	r3, #1
  4133f4:	b21b      	sxth	r3, r3
  4133f6:	2b00      	cmp	r3, #0
  4133f8:	dd1d      	ble.n	413436 <lv_draw_rect+0x5e>
  4133fa:	4616      	mov	r6, r2
  4133fc:	460d      	mov	r5, r1
  4133fe:	4604      	mov	r4, r0
    draw_shadow(coords, clip, dsc);
  413400:	4b0d      	ldr	r3, [pc, #52]	; (413438 <lv_draw_rect+0x60>)
  413402:	4798      	blx	r3
    draw_bg(coords, clip, dsc);
  413404:	4632      	mov	r2, r6
  413406:	4629      	mov	r1, r5
  413408:	4620      	mov	r0, r4
  41340a:	4b0c      	ldr	r3, [pc, #48]	; (41343c <lv_draw_rect+0x64>)
  41340c:	4798      	blx	r3
    draw_pattern(coords, clip, dsc);
  41340e:	4632      	mov	r2, r6
  413410:	4629      	mov	r1, r5
  413412:	4620      	mov	r0, r4
  413414:	4b0a      	ldr	r3, [pc, #40]	; (413440 <lv_draw_rect+0x68>)
  413416:	4798      	blx	r3
    draw_border(coords, clip, dsc);
  413418:	4632      	mov	r2, r6
  41341a:	4629      	mov	r1, r5
  41341c:	4620      	mov	r0, r4
  41341e:	4b09      	ldr	r3, [pc, #36]	; (413444 <lv_draw_rect+0x6c>)
  413420:	4798      	blx	r3
    draw_value_str(coords, clip, dsc);
  413422:	4632      	mov	r2, r6
  413424:	4629      	mov	r1, r5
  413426:	4620      	mov	r0, r4
  413428:	4b07      	ldr	r3, [pc, #28]	; (413448 <lv_draw_rect+0x70>)
  41342a:	4798      	blx	r3
    draw_outline(coords, clip, dsc);
  41342c:	4632      	mov	r2, r6
  41342e:	4629      	mov	r1, r5
  413430:	4620      	mov	r0, r4
  413432:	4b06      	ldr	r3, [pc, #24]	; (41344c <lv_draw_rect+0x74>)
  413434:	4798      	blx	r3
  413436:	bd70      	pop	{r4, r5, r6, pc}
  413438:	00411135 	.word	0x00411135
  41343c:	00412c3d 	.word	0x00412c3d
  413440:	00412875 	.word	0x00412875
  413444:	0041250d 	.word	0x0041250d
  413448:	00412b49 	.word	0x00412b49
  41344c:	00412451 	.word	0x00412451

00413450 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
  413450:	b5f0      	push	{r4, r5, r6, r7, lr}
  413452:	b083      	sub	sp, #12
    lv_color_t p_color = LV_COLOR_BLACK;
  413454:	2400      	movs	r4, #0
  413456:	f8ad 4004 	strh.w	r4, [sp, #4]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
  41345a:	6885      	ldr	r5, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
  41345c:	7804      	ldrb	r4, [r0, #0]
  41345e:	f004 041f 	and.w	r4, r4, #31
  413462:	2c06      	cmp	r4, #6
  413464:	bf18      	it	ne
  413466:	2c04      	cmpne	r4, #4
  413468:	d010      	beq.n	41348c <lv_img_buf_get_px_color+0x3c>
  41346a:	2c05      	cmp	r4, #5
  41346c:	d00e      	beq.n	41348c <lv_img_buf_get_px_color+0x3c>
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
#if LV_COLOR_SIZE == 32
        p_color.ch.alpha = 0xFF; /*Only the color should be get so use a default alpha value*/
#endif
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
  41346e:	2c07      	cmp	r4, #7
  413470:	d02b      	beq.n	4134ca <lv_img_buf_get_px_color+0x7a>
         * dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 8, 16, 24 ...*/
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
  413472:	2c08      	cmp	r4, #8
  413474:	d03f      	beq.n	4134f6 <lv_img_buf_get_px_color+0xa6>
         * dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
         * so the possible real width are 4, 8, 12 ...*/
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
  413476:	2c09      	cmp	r4, #9
  413478:	d055      	beq.n	413526 <lv_img_buf_get_px_color+0xd6>
         * dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
         * so the possible real width are 2, 4, 6 ...*/
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  41347a:	2c0a      	cmp	r4, #10
  41347c:	d06c      	beq.n	413558 <lv_img_buf_get_px_color+0x108>
        buf_u8 += 4 * 256;
        uint32_t px  = dsc->header.w * y + x;
        p_color.full = buf_u8[px];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  41347e:	3c0b      	subs	r4, #11
  413480:	b2e4      	uxtb	r4, r4
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
  413482:	2c03      	cmp	r4, #3
  413484:	d81d      	bhi.n	4134c2 <lv_img_buf_get_px_color+0x72>
        p_color = color;
  413486:	f8ad 3004 	strh.w	r3, [sp, #4]
  41348a:	e01a      	b.n	4134c2 <lv_img_buf_get_px_color+0x72>
  41348c:	4616      	mov	r6, r2
  41348e:	460f      	mov	r7, r1
  413490:	4604      	mov	r4, r0
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
  413492:	7800      	ldrb	r0, [r0, #0]
  413494:	f000 001f 	and.w	r0, r0, #31
  413498:	4b35      	ldr	r3, [pc, #212]	; (413570 <lv_img_buf_get_px_color+0x120>)
  41349a:	4798      	blx	r3
  41349c:	f3c0 00c7 	ubfx	r0, r0, #3, #8
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
  4134a0:	6822      	ldr	r2, [r4, #0]
  4134a2:	f3c2 228a 	ubfx	r2, r2, #10, #11
  4134a6:	fb02 7206 	mla	r2, r2, r6, r7
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
  4134aa:	fb00 5002 	mla	r0, r0, r2, r5
    uint8_t * d8 = (uint8_t *)dst;
  4134ae:	aa01      	add	r2, sp, #4
  4134b0:	2302      	movs	r3, #2
  4134b2:	e004      	b.n	4134be <lv_img_buf_get_px_color+0x6e>
        *d8 = *s8;
  4134b4:	f810 1b01 	ldrb.w	r1, [r0], #1
  4134b8:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  4134bc:	3b01      	subs	r3, #1
    while(len) {
  4134be:	2b00      	cmp	r3, #0
  4134c0:	d1f8      	bne.n	4134b4 <lv_img_buf_get_px_color+0x64>
    }
    return p_color;
}
  4134c2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  4134c6:	b003      	add	sp, #12
  4134c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint8_t bit = x & 0x7;
  4134ca:	f001 0407 	and.w	r4, r1, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
  4134ce:	6800      	ldr	r0, [r0, #0]
  4134d0:	f3c0 208a 	ubfx	r0, r0, #10, #11
  4134d4:	3007      	adds	r0, #7
  4134d6:	10c0      	asrs	r0, r0, #3
  4134d8:	fb00 f202 	mul.w	r2, r0, r2
  4134dc:	eb02 02e1 	add.w	r2, r2, r1, asr #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  4134e0:	18a8      	adds	r0, r5, r2
  4134e2:	7a03      	ldrb	r3, [r0, #8]
  4134e4:	f1c4 0207 	rsb	r2, r4, #7
  4134e8:	2101      	movs	r1, #1
  4134ea:	4091      	lsls	r1, r2
  4134ec:	400b      	ands	r3, r1
  4134ee:	4113      	asrs	r3, r2
  4134f0:	f8ad 3004 	strh.w	r3, [sp, #4]
  4134f4:	e7e5      	b.n	4134c2 <lv_img_buf_get_px_color+0x72>
        uint8_t bit = (x & 0x3) * 2;
  4134f6:	f001 0303 	and.w	r3, r1, #3
  4134fa:	005b      	lsls	r3, r3, #1
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
  4134fc:	6800      	ldr	r0, [r0, #0]
  4134fe:	f3c0 208a 	ubfx	r0, r0, #10, #11
  413502:	3003      	adds	r0, #3
  413504:	1080      	asrs	r0, r0, #2
  413506:	fb00 f202 	mul.w	r2, r0, r2
  41350a:	eb02 02a1 	add.w	r2, r2, r1, asr #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  41350e:	18a8      	adds	r0, r5, r2
  413510:	7c02      	ldrb	r2, [r0, #16]
  413512:	f1c3 0306 	rsb	r3, r3, #6
  413516:	2103      	movs	r1, #3
  413518:	4099      	lsls	r1, r3
  41351a:	400a      	ands	r2, r1
  41351c:	fa42 f303 	asr.w	r3, r2, r3
  413520:	f8ad 3004 	strh.w	r3, [sp, #4]
  413524:	e7cd      	b.n	4134c2 <lv_img_buf_get_px_color+0x72>
        uint8_t bit = (x & 0x1) * 4;
  413526:	f001 0301 	and.w	r3, r1, #1
  41352a:	009b      	lsls	r3, r3, #2
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
  41352c:	6800      	ldr	r0, [r0, #0]
  41352e:	f3c0 208a 	ubfx	r0, r0, #10, #11
  413532:	3001      	adds	r0, #1
  413534:	1040      	asrs	r0, r0, #1
  413536:	fb00 f202 	mul.w	r2, r0, r2
  41353a:	eb02 0261 	add.w	r2, r2, r1, asr #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  41353e:	18a8      	adds	r0, r5, r2
  413540:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  413544:	f1c3 0304 	rsb	r3, r3, #4
  413548:	210f      	movs	r1, #15
  41354a:	4099      	lsls	r1, r3
  41354c:	400a      	ands	r2, r1
  41354e:	fa42 f303 	asr.w	r3, r2, r3
  413552:	f8ad 3004 	strh.w	r3, [sp, #4]
  413556:	e7b4      	b.n	4134c2 <lv_img_buf_get_px_color+0x72>
        uint32_t px  = dsc->header.w * y + x;
  413558:	6800      	ldr	r0, [r0, #0]
  41355a:	f3c0 208a 	ubfx	r0, r0, #10, #11
  41355e:	fb00 1202 	mla	r2, r0, r2, r1
        p_color.full = buf_u8[px];
  413562:	18a8      	adds	r0, r5, r2
  413564:	f890 3400 	ldrb.w	r3, [r0, #1024]	; 0x400
  413568:	f8ad 3004 	strh.w	r3, [sp, #4]
  41356c:	e7a9      	b.n	4134c2 <lv_img_buf_get_px_color+0x72>
  41356e:	bf00      	nop
  413570:	0040ddad 	.word	0x0040ddad

00413574 <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
  413574:	b5f0      	push	{r4, r5, r6, r7, lr}
  413576:	b085      	sub	sp, #20
  413578:	4604      	mov	r4, r0
  41357a:	460e      	mov	r6, r1
  41357c:	4617      	mov	r7, r2
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
  41357e:	6885      	ldr	r5, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
  413580:	7803      	ldrb	r3, [r0, #0]
  413582:	f003 031f 	and.w	r3, r3, #31
  413586:	2b05      	cmp	r3, #5
  413588:	d00a      	beq.n	4135a0 <lv_img_buf_get_px_alpha+0x2c>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
  41358a:	2b0b      	cmp	r3, #11
  41358c:	d012      	beq.n	4135b4 <lv_img_buf_get_px_alpha+0x40>
         * so the possible real width are 8 ,16, 24 ...*/
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
  41358e:	2b0c      	cmp	r3, #12
  413590:	d029      	beq.n	4135e6 <lv_img_buf_get_px_alpha+0x72>
         * so the possible real width are 4 ,8, 12 ...*/
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
  413592:	2b0d      	cmp	r3, #13
  413594:	d043      	beq.n	41361e <lv_img_buf_get_px_alpha+0xaa>
         * so the possible real width are 2 ,4, 6 ...*/
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  413596:	2b0e      	cmp	r3, #14
  413598:	d05f      	beq.n	41365a <lv_img_buf_get_px_alpha+0xe6>
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
  41359a:	20ff      	movs	r0, #255	; 0xff
}
  41359c:	b005      	add	sp, #20
  41359e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
  4135a0:	6801      	ldr	r1, [r0, #0]
  4135a2:	f3c1 218a 	ubfx	r1, r1, #10, #11
  4135a6:	fb01 6102 	mla	r1, r1, r2, r6
  4135aa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  4135ae:	440d      	add	r5, r1
  4135b0:	78a8      	ldrb	r0, [r5, #2]
  4135b2:	e7f3      	b.n	41359c <lv_img_buf_get_px_alpha+0x28>
        uint8_t bit = x & 0x7;
  4135b4:	f001 0207 	and.w	r2, r1, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
  4135b8:	6801      	ldr	r1, [r0, #0]
  4135ba:	f3c1 218a 	ubfx	r1, r1, #10, #11
  4135be:	3107      	adds	r1, #7
  4135c0:	10c9      	asrs	r1, r1, #3
  4135c2:	fb01 f107 	mul.w	r1, r1, r7
  4135c6:	eb01 01e6 	add.w	r1, r1, r6, asr #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  4135ca:	5c6b      	ldrb	r3, [r5, r1]
  4135cc:	f1c2 0207 	rsb	r2, r2, #7
  4135d0:	2101      	movs	r1, #1
  4135d2:	4091      	lsls	r1, r2
  4135d4:	400b      	ands	r3, r1
  4135d6:	4113      	asrs	r3, r2
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
  4135d8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4135dc:	d101      	bne.n	4135e2 <lv_img_buf_get_px_alpha+0x6e>
  4135de:	20ff      	movs	r0, #255	; 0xff
  4135e0:	e7dc      	b.n	41359c <lv_img_buf_get_px_alpha+0x28>
  4135e2:	2000      	movs	r0, #0
  4135e4:	e7da      	b.n	41359c <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
  4135e6:	4b20      	ldr	r3, [pc, #128]	; (413668 <lv_img_buf_get_px_alpha+0xf4>)
  4135e8:	681b      	ldr	r3, [r3, #0]
  4135ea:	9300      	str	r3, [sp, #0]
        uint8_t bit = (x & 0x3) * 2;
  4135ec:	f001 0203 	and.w	r2, r1, #3
  4135f0:	0052      	lsls	r2, r2, #1
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
  4135f2:	6801      	ldr	r1, [r0, #0]
  4135f4:	f3c1 218a 	ubfx	r1, r1, #10, #11
  4135f8:	3103      	adds	r1, #3
  4135fa:	1089      	asrs	r1, r1, #2
  4135fc:	fb01 f107 	mul.w	r1, r1, r7
  413600:	eb01 01a6 	add.w	r1, r1, r6, asr #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  413604:	5c6b      	ldrb	r3, [r5, r1]
  413606:	f1c2 0206 	rsb	r2, r2, #6
  41360a:	2103      	movs	r1, #3
  41360c:	4091      	lsls	r1, r2
  41360e:	400b      	ands	r3, r1
  413610:	4113      	asrs	r3, r2
        return opa_table[px_opa];
  413612:	aa04      	add	r2, sp, #16
  413614:	fa52 f383 	uxtab	r3, r2, r3
  413618:	f813 0c10 	ldrb.w	r0, [r3, #-16]
  41361c:	e7be      	b.n	41359c <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
  41361e:	4b13      	ldr	r3, [pc, #76]	; (41366c <lv_img_buf_get_px_alpha+0xf8>)
  413620:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  413622:	f10d 0e10 	add.w	lr, sp, #16
  413626:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
        uint8_t bit = (x & 0x1) * 4;
  41362a:	f006 0201 	and.w	r2, r6, #1
  41362e:	0092      	lsls	r2, r2, #2
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
  413630:	6821      	ldr	r1, [r4, #0]
  413632:	f3c1 218a 	ubfx	r1, r1, #10, #11
  413636:	3101      	adds	r1, #1
  413638:	1049      	asrs	r1, r1, #1
  41363a:	fb01 f107 	mul.w	r1, r1, r7
  41363e:	eb01 0166 	add.w	r1, r1, r6, asr #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  413642:	5c6b      	ldrb	r3, [r5, r1]
  413644:	f1c2 0204 	rsb	r2, r2, #4
  413648:	210f      	movs	r1, #15
  41364a:	4091      	lsls	r1, r2
  41364c:	400b      	ands	r3, r1
  41364e:	4113      	asrs	r3, r2
        return opa_table[px_opa];
  413650:	fa5e f383 	uxtab	r3, lr, r3
  413654:	f813 0c10 	ldrb.w	r0, [r3, #-16]
  413658:	e7a0      	b.n	41359c <lv_img_buf_get_px_alpha+0x28>
        uint32_t px = dsc->header.w * y + x;
  41365a:	6801      	ldr	r1, [r0, #0]
  41365c:	f3c1 218a 	ubfx	r1, r1, #10, #11
  413660:	fb01 6102 	mla	r1, r1, r2, r6
        return buf_u8[px];
  413664:	5c68      	ldrb	r0, [r5, r1]
  413666:	e799      	b.n	41359c <lv_img_buf_get_px_alpha+0x28>
  413668:	0042e6f4 	.word	0x0042e6f4
  41366c:	0042e6f8 	.word	0x0042e6f8

00413670 <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to transform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
  413670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413674:	4604      	mov	r4, r0
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
  413676:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  41367a:	021b      	lsls	r3, r3, #8
  41367c:	6243      	str	r3, [r0, #36]	; 0x24
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
  41367e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  413682:	021b      	lsls	r3, r3, #8
  413684:	6283      	str	r3, [r0, #40]	; 0x28

    int32_t angle_low = dsc->cfg.angle / 10;
  413686:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
  41368a:	4e3f      	ldr	r6, [pc, #252]	; (413788 <_lv_img_buf_transform_init+0x118>)
  41368c:	fb86 3200 	smull	r3, r2, r6, r0
  413690:	17c3      	asrs	r3, r0, #31
  413692:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  413696:	b21b      	sxth	r3, r3
    int32_t angle_high = angle_low + 1;
  413698:	f103 0901 	add.w	r9, r3, #1
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
  41369c:	f06f 0709 	mvn.w	r7, #9
  4136a0:	fb07 0703 	mla	r7, r7, r3, r0

    int32_t s1 = _lv_trigo_sin(-angle_low);
  4136a4:	b29d      	uxth	r5, r3
  4136a6:	4268      	negs	r0, r5
  4136a8:	b200      	sxth	r0, r0
  4136aa:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 413794 <_lv_img_buf_transform_init+0x124>
  4136ae:	47d0      	blx	sl
  4136b0:	4680      	mov	r8, r0
    int32_t s2 = _lv_trigo_sin(-angle_high);
  4136b2:	fa1f f989 	uxth.w	r9, r9
  4136b6:	f1c9 0000 	rsb	r0, r9, #0
  4136ba:	b200      	sxth	r0, r0
  4136bc:	47d0      	blx	sl
  4136be:	4683      	mov	fp, r0

    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
  4136c0:	f1c5 005a 	rsb	r0, r5, #90	; 0x5a
  4136c4:	b200      	sxth	r0, r0
  4136c6:	47d0      	blx	sl
  4136c8:	4605      	mov	r5, r0
    int32_t c2 = _lv_trigo_sin(-angle_high + 90);
  4136ca:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
  4136ce:	b200      	sxth	r0, r0
  4136d0:	47d0      	blx	sl

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
  4136d2:	f1c7 020a 	rsb	r2, r7, #10
  4136d6:	fb0b f307 	mul.w	r3, fp, r7
  4136da:	fb02 3308 	mla	r3, r2, r8, r3
  4136de:	fb86 e103 	smull	lr, r1, r6, r3
  4136e2:	17db      	asrs	r3, r3, #31
  4136e4:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
  4136e8:	fb00 f007 	mul.w	r0, r0, r7
  4136ec:	fb02 0005 	mla	r0, r2, r5, r0
  4136f0:	fb86 2600 	smull	r2, r6, r6, r0
  4136f4:	17c0      	asrs	r0, r0, #31
  4136f6:	ebc0 00a6 	rsb	r0, r0, r6, asr #2

    /*Use smaller value to avoid overflow*/
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  4136fa:	115b      	asrs	r3, r3, #5
  4136fc:	62e3      	str	r3, [r4, #44]	; 0x2c
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  4136fe:	1140      	asrs	r0, r0, #5
  413700:	6320      	str	r0, [r4, #48]	; 0x30

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
  413702:	7ca0      	ldrb	r0, [r4, #18]
  413704:	4b21      	ldr	r3, [pc, #132]	; (41378c <_lv_img_buf_transform_init+0x11c>)
  413706:	4798      	blx	r3
  413708:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  41370c:	f360 0300 	bfi	r3, r0, #0, #1
  413710:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
  413714:	7ca0      	ldrb	r0, [r4, #18]
  413716:	4b1e      	ldr	r3, [pc, #120]	; (413790 <_lv_img_buf_transform_init+0x120>)
  413718:	4798      	blx	r3
  41371a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  41371e:	f360 0341 	bfi	r3, r0, #1, #1
  413722:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
  413726:	7ca2      	ldrb	r2, [r4, #18]
  413728:	1f13      	subs	r3, r2, #4
  41372a:	b2db      	uxtb	r3, r3
  41372c:	2b02      	cmp	r3, #2
  41372e:	d924      	bls.n	41377a <_lv_img_buf_transform_init+0x10a>
       dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
        dsc->tmp.native_color = 1;
    }
    else {
        dsc->tmp.native_color = 0;
  413730:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  413734:	f36f 0382 	bfc	r3, #2, #1
  413738:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
  41373c:	6823      	ldr	r3, [r4, #0]
  41373e:	6223      	str	r3, [r4, #32]
    dsc->tmp.img_dsc.header.always_zero = 0;
  413740:	7e23      	ldrb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
  413742:	f003 031f 	and.w	r3, r3, #31
  413746:	f362 0304 	bfi	r3, r2, #0, #5
  41374a:	7623      	strb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
  41374c:	88a2      	ldrh	r2, [r4, #4]
  41374e:	69a3      	ldr	r3, [r4, #24]
  413750:	f362 2394 	bfi	r3, r2, #10, #11
  413754:	61a3      	str	r3, [r4, #24]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
  413756:	88e2      	ldrh	r2, [r4, #6]
  413758:	0c1b      	lsrs	r3, r3, #16
  41375a:	f362 134f 	bfi	r3, r2, #5, #11
  41375e:	8363      	strh	r3, [r4, #26]

    /* The inverse of the zoom will be sued during the transformation
     *  + dsc->cfg.zoom / 2 for rounding*/
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
  413760:	89e2      	ldrh	r2, [r4, #14]
  413762:	0853      	lsrs	r3, r2, #1
  413764:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  413768:	fb93 f3f2 	sdiv	r3, r3, r2
  41376c:	63a3      	str	r3, [r4, #56]	; 0x38

    dsc->res.opa = LV_OPA_COVER;
  41376e:	23ff      	movs	r3, #255	; 0xff
  413770:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
  413772:	8a23      	ldrh	r3, [r4, #16]
  413774:	82a3      	strh	r3, [r4, #20]
  413776:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dsc->tmp.native_color = 1;
  41377a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  41377e:	f043 0304 	orr.w	r3, r3, #4
  413782:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  413786:	e7d9      	b.n	41373c <_lv_img_buf_transform_init+0xcc>
  413788:	66666667 	.word	0x66666667
  41378c:	0040dddf 	.word	0x0040dddf
  413790:	0040ddf3 	.word	0x0040ddf3
  413794:	0041737d 	.word	0x0041737d

00413798 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
  413798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41379c:	b083      	sub	sp, #12
  41379e:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  4137a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
#if LV_USE_IMG_TRANSFORM
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
  4137a4:	2b00      	cmp	r3, #0
  4137a6:	bf08      	it	eq
  4137a8:	f5be 7f80 	cmpeq.w	lr, #256	; 0x100
  4137ac:	d109      	bne.n	4137c2 <_lv_img_buf_get_transformed_area+0x2a>
        res->x1 = 0;
  4137ae:	2300      	movs	r3, #0
  4137b0:	8003      	strh	r3, [r0, #0]
        res->y1 = 0;
  4137b2:	8043      	strh	r3, [r0, #2]
        res->x2 = w - 1;
  4137b4:	3901      	subs	r1, #1
  4137b6:	8081      	strh	r1, [r0, #4]
        res->y2 = h - 1;
  4137b8:	3a01      	subs	r2, #1
  4137ba:	80c2      	strh	r2, [r0, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
  4137bc:	b003      	add	sp, #12
  4137be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4137c2:	461f      	mov	r7, r3
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
  4137c4:	f9b5 6000 	ldrsh.w	r6, [r5]
  4137c8:	4276      	negs	r6, r6
  4137ca:	fb0e f606 	mul.w	r6, lr, r6
  4137ce:	1236      	asrs	r6, r6, #8
  4137d0:	3e01      	subs	r6, #1
  4137d2:	b2b6      	uxth	r6, r6
  4137d4:	8006      	strh	r6, [r0, #0]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
  4137d6:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
  4137da:	4264      	negs	r4, r4
  4137dc:	fb04 f40e 	mul.w	r4, r4, lr
  4137e0:	1224      	asrs	r4, r4, #8
  4137e2:	3c01      	subs	r4, #1
  4137e4:	b2a4      	uxth	r4, r4
  4137e6:	8044      	strh	r4, [r0, #2]
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
  4137e8:	f9b5 3000 	ldrsh.w	r3, [r5]
  4137ec:	1ac9      	subs	r1, r1, r3
  4137ee:	fb01 f10e 	mul.w	r1, r1, lr
  4137f2:	1209      	asrs	r1, r1, #8
  4137f4:	3102      	adds	r1, #2
  4137f6:	b289      	uxth	r1, r1
  4137f8:	8081      	strh	r1, [r0, #4]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
  4137fa:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  4137fe:	1ad3      	subs	r3, r2, r3
  413800:	fb03 f30e 	mul.w	r3, r3, lr
  413804:	121b      	asrs	r3, r3, #8
  413806:	3302      	adds	r3, #2
  413808:	b29b      	uxth	r3, r3
  41380a:	80c3      	strh	r3, [r0, #6]
    if(angle == 0) {
  41380c:	b967      	cbnz	r7, 413828 <_lv_img_buf_get_transformed_area+0x90>
        res->x1 += pivot->x;
  41380e:	882a      	ldrh	r2, [r5, #0]
  413810:	4416      	add	r6, r2
  413812:	8006      	strh	r6, [r0, #0]
        res->y1 += pivot->y;
  413814:	886a      	ldrh	r2, [r5, #2]
  413816:	4414      	add	r4, r2
  413818:	8044      	strh	r4, [r0, #2]
        res->x2 += pivot->x;
  41381a:	882a      	ldrh	r2, [r5, #0]
  41381c:	4411      	add	r1, r2
  41381e:	8081      	strh	r1, [r0, #4]
        res->y2 += pivot->y;
  413820:	886a      	ldrh	r2, [r5, #2]
  413822:	4413      	add	r3, r2
  413824:	80c3      	strh	r3, [r0, #6]
        return;
  413826:	e7c9      	b.n	4137bc <_lv_img_buf_get_transformed_area+0x24>
  413828:	4604      	mov	r4, r0
    int32_t angle_low = angle / 10;
  41382a:	f8df 8150 	ldr.w	r8, [pc, #336]	; 41397c <_lv_img_buf_get_transformed_area+0x1e4>
  41382e:	fb88 3007 	smull	r3, r0, r8, r7
  413832:	17fe      	asrs	r6, r7, #31
  413834:	ebc6 06a0 	rsb	r6, r6, r0, asr #2
  413838:	b236      	sxth	r6, r6
    int32_t angle_high = angle_low + 1;
  41383a:	f106 0a01 	add.w	sl, r6, #1
    int32_t angle_rem = angle  - (angle_low * 10);
  41383e:	f06f 0009 	mvn.w	r0, #9
  413842:	fb00 7706 	mla	r7, r0, r6, r7
    int32_t s1 = _lv_trigo_sin(angle_low);
  413846:	4630      	mov	r0, r6
  413848:	f8df 9134 	ldr.w	r9, [pc, #308]	; 413980 <_lv_img_buf_get_transformed_area+0x1e8>
  41384c:	47c8      	blx	r9
  41384e:	9001      	str	r0, [sp, #4]
    int32_t s2 = _lv_trigo_sin(angle_high);
  413850:	fa0f f08a 	sxth.w	r0, sl
  413854:	47c8      	blx	r9
  413856:	4683      	mov	fp, r0
    int32_t c1 = _lv_trigo_sin(angle_low + 90);
  413858:	f106 005a 	add.w	r0, r6, #90	; 0x5a
  41385c:	b200      	sxth	r0, r0
  41385e:	47c8      	blx	r9
  413860:	4606      	mov	r6, r0
    int32_t c2 = _lv_trigo_sin(angle_high + 90);
  413862:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
  413866:	b200      	sxth	r0, r0
  413868:	47c8      	blx	r9
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
  41386a:	f1c7 030a 	rsb	r3, r7, #10
  41386e:	fb0b fb07 	mul.w	fp, fp, r7
  413872:	9a01      	ldr	r2, [sp, #4]
  413874:	fb03 bb02 	mla	fp, r3, r2, fp
  413878:	fb88 210b 	smull	r2, r1, r8, fp
  41387c:	ea4f 72eb 	mov.w	r2, fp, asr #31
  413880:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
  413884:	fb00 f007 	mul.w	r0, r0, r7
  413888:	fb03 0606 	mla	r6, r3, r6, r0
  41388c:	fb88 3806 	smull	r3, r8, r8, r6
  413890:	17f6      	asrs	r6, r6, #31
  413892:	ebc6 08a8 	rsb	r8, r6, r8, asr #2
    sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  413896:	1152      	asrs	r2, r2, #5
    cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  413898:	ea4f 1868 	mov.w	r8, r8, asr #5
    xt = res->x1;
  41389c:	f9b4 0000 	ldrsh.w	r0, [r4]
    yt = res->y1;
  4138a0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  4138a4:	fb00 f608 	mul.w	r6, r0, r8
  4138a8:	fb03 f102 	mul.w	r1, r3, r2
  4138ac:	eba6 0c01 	sub.w	ip, r6, r1
  4138b0:	882f      	ldrh	r7, [r5, #0]
  4138b2:	eb07 2cac 	add.w	ip, r7, ip, asr #10
  4138b6:	fa0f fc8c 	sxth.w	ip, ip
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  4138ba:	fb00 f002 	mul.w	r0, r0, r2
  4138be:	fb03 f308 	mul.w	r3, r3, r8
  4138c2:	eb00 0e03 	add.w	lr, r0, r3
  4138c6:	886d      	ldrh	r5, [r5, #2]
  4138c8:	eb05 2eae 	add.w	lr, r5, lr, asr #10
  4138cc:	fa0f fe8e 	sxth.w	lr, lr
    xt = res->x2;
  4138d0:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  4138d4:	fb09 fb08 	mul.w	fp, r9, r8
  4138d8:	ebab 0101 	sub.w	r1, fp, r1
  4138dc:	eb07 21a1 	add.w	r1, r7, r1, asr #10
  4138e0:	b209      	sxth	r1, r1
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  4138e2:	fb09 f902 	mul.w	r9, r9, r2
  4138e6:	444b      	add	r3, r9
  4138e8:	eb05 23a3 	add.w	r3, r5, r3, asr #10
  4138ec:	b21b      	sxth	r3, r3
    yt = res->y2;
  4138ee:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  4138f2:	fb0a f202 	mul.w	r2, sl, r2
  4138f6:	1ab6      	subs	r6, r6, r2
  4138f8:	eb07 26a6 	add.w	r6, r7, r6, asr #10
  4138fc:	b236      	sxth	r6, r6
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  4138fe:	fb0a f808 	mul.w	r8, sl, r8
  413902:	4440      	add	r0, r8
  413904:	eb05 20a0 	add.w	r0, r5, r0, asr #10
  413908:	b200      	sxth	r0, r0
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  41390a:	ebab 0202 	sub.w	r2, fp, r2
  41390e:	eb07 27a2 	add.w	r7, r7, r2, asr #10
  413912:	b23f      	sxth	r7, r7
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  413914:	44c8      	add	r8, r9
  413916:	eb05 25a8 	add.w	r5, r5, r8, asr #10
  41391a:	b22d      	sxth	r5, r5
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
  41391c:	460a      	mov	r2, r1
  41391e:	42b9      	cmp	r1, r7
  413920:	bfa8      	it	ge
  413922:	463a      	movge	r2, r7
  413924:	46e0      	mov	r8, ip
  413926:	45b4      	cmp	ip, r6
  413928:	bfa8      	it	ge
  41392a:	46b0      	movge	r8, r6
  41392c:	4542      	cmp	r2, r8
  41392e:	bfa8      	it	ge
  413930:	4642      	movge	r2, r8
  413932:	8022      	strh	r2, [r4, #0]
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
  413934:	42b9      	cmp	r1, r7
  413936:	bfb8      	it	lt
  413938:	4639      	movlt	r1, r7
  41393a:	45b4      	cmp	ip, r6
  41393c:	bfb8      	it	lt
  41393e:	46b4      	movlt	ip, r6
  413940:	458c      	cmp	ip, r1
  413942:	bfb8      	it	lt
  413944:	468c      	movlt	ip, r1
  413946:	f8a4 c004 	strh.w	ip, [r4, #4]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
  41394a:	461a      	mov	r2, r3
  41394c:	42ab      	cmp	r3, r5
  41394e:	bfa8      	it	ge
  413950:	462a      	movge	r2, r5
  413952:	4671      	mov	r1, lr
  413954:	4586      	cmp	lr, r0
  413956:	bfa8      	it	ge
  413958:	4601      	movge	r1, r0
  41395a:	428a      	cmp	r2, r1
  41395c:	bfa8      	it	ge
  41395e:	460a      	movge	r2, r1
  413960:	8062      	strh	r2, [r4, #2]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
  413962:	429d      	cmp	r5, r3
  413964:	bfb8      	it	lt
  413966:	461d      	movlt	r5, r3
  413968:	4586      	cmp	lr, r0
  41396a:	bfb8      	it	lt
  41396c:	4686      	movlt	lr, r0
  41396e:	45ae      	cmp	lr, r5
  413970:	bfb8      	it	lt
  413972:	46ae      	movlt	lr, r5
  413974:	f8a4 e006 	strh.w	lr, [r4, #6]
  413978:	e720      	b.n	4137bc <_lv_img_buf_get_transformed_area+0x24>
  41397a:	bf00      	nop
  41397c:	66666667 	.word	0x66666667
  413980:	0041737d 	.word	0x0041737d

00413984 <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
  413984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413988:	b089      	sub	sp, #36	; 0x24
  41398a:	4604      	mov	r4, r0
    const uint8_t * src_u8 = dsc->cfg.src;
  41398c:	6801      	ldr	r1, [r0, #0]

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
  41398e:	f9b0 603c 	ldrsh.w	r6, [r0, #60]	; 0x3c
  413992:	b2f2      	uxtb	r2, r6
    int ys_fract = dsc->tmp.ys & 0xff;
  413994:	f9b0 503e 	ldrsh.w	r5, [r0, #62]	; 0x3e
  413998:	b2eb      	uxtb	r3, r5
    int32_t xn;      /*x neighbor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
  41399a:	2a6f      	cmp	r2, #111	; 0x6f
  41399c:	dc28      	bgt.n	4139f0 <_lv_img_buf_transform_anti_alias+0x6c>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
  41399e:	f9b0 2040 	ldrsh.w	r2, [r0, #64]	; 0x40
  4139a2:	2a01      	cmp	r2, #1
  4139a4:	d422      	bmi.n	4139ec <_lv_img_buf_transform_anti_alias+0x68>
        xn = - 1;
  4139a6:	f04f 37ff 	mov.w	r7, #4294967295
        xr = xs_fract + 0x80;
  4139aa:	b2f6      	uxtb	r6, r6
  4139ac:	f086 0680 	eor.w	r6, r6, #128	; 0x80
    }

    int32_t yn;      /*x neighbor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
  4139b0:	2b6f      	cmp	r3, #111	; 0x6f
  4139b2:	dc34      	bgt.n	413a1e <_lv_img_buf_transform_anti_alias+0x9a>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
  4139b4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
  4139b8:	2b01      	cmp	r3, #1
  4139ba:	d42d      	bmi.n	413a18 <_lv_img_buf_transform_anti_alias+0x94>
        yn = - 1;
  4139bc:	f04f 38ff 	mov.w	r8, #4294967295

        yr = ys_fract + 0x80;
  4139c0:	b2ed      	uxtb	r5, r5
  4139c2:	f085 0580 	eor.w	r5, r5, #128	; 0x80
    else {
        yn = 0;
        yr = 0xFF;
    }

    lv_color_t c00 = dsc->res.color;
  4139c6:	f8b4 9014 	ldrh.w	r9, [r4, #20]
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
  4139ca:	f894 a016 	ldrb.w	sl, [r4, #22]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
  4139ce:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4139d2:	f013 0f04 	tst.w	r3, #4
  4139d6:	f000 808b 	beq.w	413af0 <_lv_img_buf_transform_anti_alias+0x16c>
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
  4139da:	6c62      	ldr	r2, [r4, #68]	; 0x44
  4139dc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  4139e0:	fb03 2307 	mla	r3, r3, r7, r2
  4139e4:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  4139e6:	a807      	add	r0, sp, #28
  4139e8:	2202      	movs	r2, #2
  4139ea:	e034      	b.n	413a56 <_lv_img_buf_transform_anti_alias+0xd2>
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
  4139ec:	2700      	movs	r7, #0
  4139ee:	e7dc      	b.n	4139aa <_lv_img_buf_transform_anti_alias+0x26>
    else if(xs_fract > 0x90) {
  4139f0:	2a90      	cmp	r2, #144	; 0x90
  4139f2:	dd0e      	ble.n	413a12 <_lv_img_buf_transform_anti_alias+0x8e>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
  4139f4:	f9b0 2040 	ldrsh.w	r2, [r0, #64]	; 0x40
  4139f8:	3201      	adds	r2, #1
  4139fa:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
  4139fe:	4282      	cmp	r2, r0
  413a00:	da05      	bge.n	413a0e <_lv_img_buf_transform_anti_alias+0x8a>
        xn =  1;
  413a02:	2701      	movs	r7, #1
        xr = (0xFF - xs_fract) + 0x80;
  413a04:	b2f6      	uxtb	r6, r6
  413a06:	f1c6 067f 	rsb	r6, r6, #127	; 0x7f
  413a0a:	b2f6      	uxtb	r6, r6
  413a0c:	e7d0      	b.n	4139b0 <_lv_img_buf_transform_anti_alias+0x2c>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
  413a0e:	2700      	movs	r7, #0
  413a10:	e7f8      	b.n	413a04 <_lv_img_buf_transform_anti_alias+0x80>
        xr = 0xFF;
  413a12:	26ff      	movs	r6, #255	; 0xff
        xn = 0;
  413a14:	2700      	movs	r7, #0
  413a16:	e7cb      	b.n	4139b0 <_lv_img_buf_transform_anti_alias+0x2c>
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
  413a18:	f04f 0800 	mov.w	r8, #0
  413a1c:	e7d0      	b.n	4139c0 <_lv_img_buf_transform_anti_alias+0x3c>
    else if(ys_fract > 0x90) {
  413a1e:	2b90      	cmp	r3, #144	; 0x90
  413a20:	dd10      	ble.n	413a44 <_lv_img_buf_transform_anti_alias+0xc0>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
  413a22:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
  413a26:	3301      	adds	r3, #1
  413a28:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
  413a2c:	4293      	cmp	r3, r2
  413a2e:	da06      	bge.n	413a3e <_lv_img_buf_transform_anti_alias+0xba>
        yn =  1;
  413a30:	f04f 0801 	mov.w	r8, #1
        yr = (0xFF - ys_fract) + 0x80;
  413a34:	b2ed      	uxtb	r5, r5
  413a36:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
  413a3a:	b2ed      	uxtb	r5, r5
  413a3c:	e7c3      	b.n	4139c6 <_lv_img_buf_transform_anti_alias+0x42>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
  413a3e:	f04f 0800 	mov.w	r8, #0
  413a42:	e7f7      	b.n	413a34 <_lv_img_buf_transform_anti_alias+0xb0>
        yr = 0xFF;
  413a44:	25ff      	movs	r5, #255	; 0xff
        yn = 0;
  413a46:	f04f 0800 	mov.w	r8, #0
  413a4a:	e7bc      	b.n	4139c6 <_lv_img_buf_transform_anti_alias+0x42>
        *d8 = *s8;
  413a4c:	f813 eb01 	ldrb.w	lr, [r3], #1
  413a50:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  413a54:	3a01      	subs	r2, #1
    while(len) {
  413a56:	2a00      	cmp	r2, #0
  413a58:	d1f8      	bne.n	413a4c <_lv_img_buf_transform_anti_alias+0xc8>
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
  413a5a:	6c62      	ldr	r2, [r4, #68]	; 0x44
  413a5c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
  413a60:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  413a64:	fb03 f300 	mul.w	r3, r3, r0
  413a68:	fb03 2308 	mla	r3, r3, r8, r2
  413a6c:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  413a6e:	a806      	add	r0, sp, #24
  413a70:	2202      	movs	r2, #2
  413a72:	e004      	b.n	413a7e <_lv_img_buf_transform_anti_alias+0xfa>
        *d8 = *s8;
  413a74:	f813 eb01 	ldrb.w	lr, [r3], #1
  413a78:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  413a7c:	3a01      	subs	r2, #1
    while(len) {
  413a7e:	2a00      	cmp	r2, #0
  413a80:	d1f8      	bne.n	413a74 <_lv_img_buf_transform_anti_alias+0xf0>
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
  413a82:	6c60      	ldr	r0, [r4, #68]	; 0x44
  413a84:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  413a88:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  413a8c:	fb03 f302 	mul.w	r3, r3, r2
  413a90:	fb03 f308 	mul.w	r3, r3, r8
  413a94:	fb02 3307 	mla	r3, r2, r7, r3
  413a98:	4403      	add	r3, r0
  413a9a:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  413a9c:	a805      	add	r0, sp, #20
  413a9e:	2202      	movs	r2, #2
  413aa0:	e004      	b.n	413aac <_lv_img_buf_transform_anti_alias+0x128>
        *d8 = *s8;
  413aa2:	f813 eb01 	ldrb.w	lr, [r3], #1
  413aa6:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  413aaa:	3a01      	subs	r2, #1
    while(len) {
  413aac:	2a00      	cmp	r2, #0
  413aae:	d1f8      	bne.n	413aa2 <_lv_img_buf_transform_anti_alias+0x11e>
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
  413ab0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  413ab4:	f013 0f02 	tst.w	r3, #2
  413ab8:	d06a      	beq.n	413b90 <_lv_img_buf_transform_anti_alias+0x20c>
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
  413aba:	6c60      	ldr	r0, [r4, #68]	; 0x44
  413abc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  413ac0:	fb03 f207 	mul.w	r2, r3, r7
  413ac4:	1887      	adds	r7, r0, r2
  413ac6:	441f      	add	r7, r3
  413ac8:	3f01      	subs	r7, #1
  413aca:	f811 b007 	ldrb.w	fp, [r1, r7]
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
  413ace:	f9b4 7004 	ldrsh.w	r7, [r4, #4]
  413ad2:	fb07 f703 	mul.w	r7, r7, r3
  413ad6:	fb07 f808 	mul.w	r8, r7, r8
  413ada:	eb00 0708 	add.w	r7, r0, r8
  413ade:	441f      	add	r7, r3
  413ae0:	3f01      	subs	r7, #1
  413ae2:	5dcf      	ldrb	r7, [r1, r7]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
  413ae4:	4442      	add	r2, r8
  413ae6:	4402      	add	r2, r0
  413ae8:	4413      	add	r3, r2
  413aea:	3b01      	subs	r3, #1
  413aec:	5cc8      	ldrb	r0, [r1, r3]
  413aee:	e052      	b.n	413b96 <_lv_img_buf_transform_anti_alias+0x212>
        }
    }
    else {
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
  413af0:	f104 0318 	add.w	r3, r4, #24
  413af4:	4618      	mov	r0, r3
  413af6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  413afa:	b2bf      	uxth	r7, r7
  413afc:	4439      	add	r1, r7
  413afe:	8a23      	ldrh	r3, [r4, #16]
  413b00:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
  413b04:	b209      	sxth	r1, r1
  413b06:	9001      	str	r0, [sp, #4]
  413b08:	f8df b300 	ldr.w	fp, [pc, #768]	; 413e0c <_lv_img_buf_transform_anti_alias+0x488>
  413b0c:	47d8      	blx	fp
  413b0e:	f8ad 001c 	strh.w	r0, [sp, #28]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
  413b12:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  413b16:	fa1f f888 	uxth.w	r8, r8
  413b1a:	4442      	add	r2, r8
  413b1c:	8a23      	ldrh	r3, [r4, #16]
  413b1e:	b212      	sxth	r2, r2
  413b20:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
  413b24:	9801      	ldr	r0, [sp, #4]
  413b26:	47d8      	blx	fp
  413b28:	f8ad 0018 	strh.w	r0, [sp, #24]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
  413b2c:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  413b30:	4439      	add	r1, r7
  413b32:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  413b36:	4442      	add	r2, r8
  413b38:	8a23      	ldrh	r3, [r4, #16]
  413b3a:	b212      	sxth	r2, r2
  413b3c:	b209      	sxth	r1, r1
  413b3e:	9801      	ldr	r0, [sp, #4]
  413b40:	47d8      	blx	fp
  413b42:	f8ad 0014 	strh.w	r0, [sp, #20]

        if(dsc->tmp.has_alpha) {
  413b46:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  413b4a:	f013 0f02 	tst.w	r3, #2
  413b4e:	d058      	beq.n	413c02 <_lv_img_buf_transform_anti_alias+0x27e>
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
  413b50:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
  413b54:	9202      	str	r2, [sp, #8]
  413b56:	fa17 f782 	uxtah	r7, r7, r2
  413b5a:	b23f      	sxth	r7, r7
  413b5c:	463b      	mov	r3, r7
  413b5e:	f9b4 7042 	ldrsh.w	r7, [r4, #66]	; 0x42
  413b62:	463a      	mov	r2, r7
  413b64:	9303      	str	r3, [sp, #12]
  413b66:	4619      	mov	r1, r3
  413b68:	9801      	ldr	r0, [sp, #4]
  413b6a:	4ba7      	ldr	r3, [pc, #668]	; (413e08 <_lv_img_buf_transform_anti_alias+0x484>)
  413b6c:	4798      	blx	r3
  413b6e:	4683      	mov	fp, r0
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
  413b70:	fa18 f887 	uxtah	r8, r8, r7
  413b74:	fa0f f888 	sxth.w	r8, r8
  413b78:	4642      	mov	r2, r8
  413b7a:	9902      	ldr	r1, [sp, #8]
  413b7c:	9801      	ldr	r0, [sp, #4]
  413b7e:	4fa2      	ldr	r7, [pc, #648]	; (413e08 <_lv_img_buf_transform_anti_alias+0x484>)
  413b80:	47b8      	blx	r7
  413b82:	4607      	mov	r7, r0
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
  413b84:	4642      	mov	r2, r8
  413b86:	9903      	ldr	r1, [sp, #12]
  413b88:	9801      	ldr	r0, [sp, #4]
  413b8a:	4b9f      	ldr	r3, [pc, #636]	; (413e08 <_lv_img_buf_transform_anti_alias+0x484>)
  413b8c:	4798      	blx	r3
  413b8e:	e002      	b.n	413b96 <_lv_img_buf_transform_anti_alias+0x212>
    lv_opa_t a11 = 0;
  413b90:	2000      	movs	r0, #0
    lv_opa_t a01 = 0;
  413b92:	4607      	mov	r7, r0
    lv_opa_t a10 = 0;
  413b94:	4683      	mov	fp, r0
        }
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
  413b96:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  413b9a:	f013 0f02 	tst.w	r3, #2
  413b9e:	d036      	beq.n	413c0e <_lv_img_buf_transform_anti_alias+0x28a>
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
  413ba0:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
  413ba4:	fb03 f10b 	mul.w	r1, r3, fp
  413ba8:	fb06 110a 	mla	r1, r6, sl, r1
  413bac:	f3c1 2107 	ubfx	r1, r1, #8, #8
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
  413bb0:	fb03 f300 	mul.w	r3, r3, r0
  413bb4:	fb06 3307 	mla	r3, r6, r7, r3
  413bb8:	f3c3 2307 	ubfx	r3, r3, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
  413bbc:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
  413bc0:	fb02 f203 	mul.w	r2, r2, r3
  413bc4:	fb05 2201 	mla	r2, r5, r1, r2
  413bc8:	1212      	asrs	r2, r2, #8
  413bca:	75a2      	strb	r2, [r4, #22]

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
  413bcc:	2902      	cmp	r1, #2
  413bce:	bf98      	it	ls
  413bd0:	2b02      	cmpls	r3, #2
  413bd2:	f240 8117 	bls.w	413e04 <_lv_img_buf_transform_anti_alias+0x480>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
  413bd6:	2902      	cmp	r1, #2
  413bd8:	d800      	bhi.n	413bdc <_lv_img_buf_transform_anti_alias+0x258>
  413bda:	2500      	movs	r5, #0
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
  413bdc:	2b02      	cmp	r3, #2
  413bde:	d800      	bhi.n	413be2 <_lv_img_buf_transform_anti_alias+0x25e>
  413be0:	25ff      	movs	r5, #255	; 0xff
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
  413be2:	f1ba 0f02 	cmp.w	sl, #2
  413be6:	d910      	bls.n	413c0a <_lv_img_buf_transform_anti_alias+0x286>
    lv_opa_t xr0 = xr;
  413be8:	4632      	mov	r2, r6
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
  413bea:	f1bb 0f02 	cmp.w	fp, #2
  413bee:	d800      	bhi.n	413bf2 <_lv_img_buf_transform_anti_alias+0x26e>
  413bf0:	22ff      	movs	r2, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
  413bf2:	2f02      	cmp	r7, #2
  413bf4:	d800      	bhi.n	413bf8 <_lv_img_buf_transform_anti_alias+0x274>
  413bf6:	2600      	movs	r6, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
  413bf8:	2802      	cmp	r0, #2
  413bfa:	d962      	bls.n	413cc2 <_lv_img_buf_transform_anti_alias+0x33e>
  413bfc:	4633      	mov	r3, r6
  413bfe:	4616      	mov	r6, r2
  413c00:	e008      	b.n	413c14 <_lv_img_buf_transform_anti_alias+0x290>
    lv_opa_t a11 = 0;
  413c02:	2000      	movs	r0, #0
    lv_opa_t a01 = 0;
  413c04:	4607      	mov	r7, r0
    lv_opa_t a10 = 0;
  413c06:	4683      	mov	fp, r0
  413c08:	e7c5      	b.n	413b96 <_lv_img_buf_transform_anti_alias+0x212>
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
  413c0a:	2200      	movs	r2, #0
  413c0c:	e7ed      	b.n	413bea <_lv_img_buf_transform_anti_alias+0x266>
    }
    else {
        xr0 = xr;
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
  413c0e:	23ff      	movs	r3, #255	; 0xff
  413c10:	75a3      	strb	r3, [r4, #22]
        xr1 = xr;
  413c12:	4633      	mov	r3, r6
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
  413c14:	2e00      	cmp	r6, #0
  413c16:	d157      	bne.n	413cc8 <_lv_img_buf_transform_anti_alias+0x344>
  413c18:	f8bd 901c 	ldrh.w	r9, [sp, #28]
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
  413c1c:	2b00      	cmp	r3, #0
  413c1e:	f040 809c 	bne.w	413d5a <_lv_img_buf_transform_anti_alias+0x3d6>
  413c22:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
  413c26:	2d00      	cmp	r5, #0
  413c28:	f000 80e5 	beq.w	413df6 <_lv_img_buf_transform_anti_alias+0x472>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
  413c2c:	2dff      	cmp	r5, #255	; 0xff
  413c2e:	f000 80e5 	beq.w	413dfc <_lv_img_buf_transform_anti_alias+0x478>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  413c32:	f3c9 02c4 	ubfx	r2, r9, #3, #5
  413c36:	f3c3 01c4 	ubfx	r1, r3, #3, #5
  413c3a:	f1c5 00ff 	rsb	r0, r5, #255	; 0xff
  413c3e:	fb00 f101 	mul.w	r1, r0, r1
  413c42:	fb05 1202 	mla	r2, r5, r2, r1
  413c46:	3280      	adds	r2, #128	; 0x80
  413c48:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  413c4c:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  413c50:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  413c54:	f04f 0100 	mov.w	r1, #0
  413c58:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  413c5c:	f009 0607 	and.w	r6, r9, #7
  413c60:	f3c9 3242 	ubfx	r2, r9, #13, #3
  413c64:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
  413c68:	f003 0707 	and.w	r7, r3, #7
  413c6c:	f3c3 3642 	ubfx	r6, r3, #13, #3
  413c70:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
  413c74:	fb06 f600 	mul.w	r6, r6, r0
  413c78:	fb02 6205 	mla	r2, r2, r5, r6
  413c7c:	3280      	adds	r2, #128	; 0x80
  413c7e:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  413c82:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  413c86:	f3c2 6682 	ubfx	r6, r2, #26, #3
  413c8a:	f366 0102 	bfi	r1, r6, #0, #3
  413c8e:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  413c92:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  413c96:	f3c9 2904 	ubfx	r9, r9, #8, #5
  413c9a:	f3c3 2304 	ubfx	r3, r3, #8, #5
  413c9e:	fb03 f000 	mul.w	r0, r3, r0
  413ca2:	fb09 0505 	mla	r5, r9, r5, r0
  413ca6:	3580      	adds	r5, #128	; 0x80
  413ca8:	eb05 2305 	add.w	r3, r5, r5, lsl #8
  413cac:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
  413cb0:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  413cb4:	f365 210c 	bfi	r1, r5, #8, #5
    else dsc->res.color = lv_color_mix(c0, c1, yr);
  413cb8:	82a1      	strh	r1, [r4, #20]

    return true;
  413cba:	2001      	movs	r0, #1
}
  413cbc:	b009      	add	sp, #36	; 0x24
  413cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  413cc2:	4616      	mov	r6, r2
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
  413cc4:	23ff      	movs	r3, #255	; 0xff
  413cc6:	e7a5      	b.n	413c14 <_lv_img_buf_transform_anti_alias+0x290>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
  413cc8:	2eff      	cmp	r6, #255	; 0xff
  413cca:	d0a7      	beq.n	413c1c <_lv_img_buf_transform_anti_alias+0x298>
  413ccc:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  413cd0:	f3c9 02c4 	ubfx	r2, r9, #3, #5
  413cd4:	f3c0 01c4 	ubfx	r1, r0, #3, #5
  413cd8:	f1c6 07ff 	rsb	r7, r6, #255	; 0xff
  413cdc:	fb07 f101 	mul.w	r1, r7, r1
  413ce0:	fb06 1202 	mla	r2, r6, r2, r1
  413ce4:	3280      	adds	r2, #128	; 0x80
  413ce6:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  413cea:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  413cee:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  413cf2:	f04f 0100 	mov.w	r1, #0
  413cf6:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  413cfa:	f009 0e07 	and.w	lr, r9, #7
  413cfe:	f3c9 3242 	ubfx	r2, r9, #13, #3
  413d02:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  413d06:	f000 0c07 	and.w	ip, r0, #7
  413d0a:	f3c0 3e42 	ubfx	lr, r0, #13, #3
  413d0e:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
  413d12:	fb0e fe07 	mul.w	lr, lr, r7
  413d16:	fb02 e206 	mla	r2, r2, r6, lr
  413d1a:	3280      	adds	r2, #128	; 0x80
  413d1c:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  413d20:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  413d24:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  413d28:	f36e 0102 	bfi	r1, lr, #0, #3
  413d2c:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  413d30:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  413d34:	f3c9 2904 	ubfx	r9, r9, #8, #5
  413d38:	f3c0 2004 	ubfx	r0, r0, #8, #5
  413d3c:	fb00 f707 	mul.w	r7, r0, r7
  413d40:	fb09 7606 	mla	r6, r9, r6, r7
  413d44:	3680      	adds	r6, #128	; 0x80
  413d46:	eb06 2206 	add.w	r2, r6, r6, lsl #8
  413d4a:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
  413d4e:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  413d52:	f366 210c 	bfi	r1, r6, #8, #5
  413d56:	4689      	mov	r9, r1
  413d58:	e760      	b.n	413c1c <_lv_img_buf_transform_anti_alias+0x298>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
  413d5a:	2bff      	cmp	r3, #255	; 0xff
  413d5c:	d048      	beq.n	413df0 <_lv_img_buf_transform_anti_alias+0x46c>
  413d5e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  413d62:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  413d66:	f3c6 02c4 	ubfx	r2, r6, #3, #5
  413d6a:	f3c0 01c4 	ubfx	r1, r0, #3, #5
  413d6e:	f1c3 07ff 	rsb	r7, r3, #255	; 0xff
  413d72:	fb07 f101 	mul.w	r1, r7, r1
  413d76:	fb03 1202 	mla	r2, r3, r2, r1
  413d7a:	3280      	adds	r2, #128	; 0x80
  413d7c:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  413d80:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  413d84:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  413d88:	f04f 0100 	mov.w	r1, #0
  413d8c:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  413d90:	f006 0e07 	and.w	lr, r6, #7
  413d94:	f3c6 3242 	ubfx	r2, r6, #13, #3
  413d98:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  413d9c:	f000 0c07 	and.w	ip, r0, #7
  413da0:	f3c0 3e42 	ubfx	lr, r0, #13, #3
  413da4:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
  413da8:	fb0e fe07 	mul.w	lr, lr, r7
  413dac:	fb02 e203 	mla	r2, r2, r3, lr
  413db0:	3280      	adds	r2, #128	; 0x80
  413db2:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  413db6:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  413dba:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  413dbe:	f36e 0102 	bfi	r1, lr, #0, #3
  413dc2:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  413dc6:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  413dca:	f3c6 2604 	ubfx	r6, r6, #8, #5
  413dce:	f3c0 2004 	ubfx	r0, r0, #8, #5
  413dd2:	fb00 f707 	mul.w	r7, r0, r7
  413dd6:	fb06 7303 	mla	r3, r6, r3, r7
  413dda:	3380      	adds	r3, #128	; 0x80
  413ddc:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  413de0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  413de4:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  413de8:	f363 210c 	bfi	r1, r3, #8, #5
  413dec:	460b      	mov	r3, r1
  413dee:	e71a      	b.n	413c26 <_lv_img_buf_transform_anti_alias+0x2a2>
  413df0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  413df4:	e717      	b.n	413c26 <_lv_img_buf_transform_anti_alias+0x2a2>
    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
  413df6:	82a3      	strh	r3, [r4, #20]
    return true;
  413df8:	2001      	movs	r0, #1
  413dfa:	e75f      	b.n	413cbc <_lv_img_buf_transform_anti_alias+0x338>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
  413dfc:	f8a4 9014 	strh.w	r9, [r4, #20]
    return true;
  413e00:	2001      	movs	r0, #1
  413e02:	e75b      	b.n	413cbc <_lv_img_buf_transform_anti_alias+0x338>
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
  413e04:	2000      	movs	r0, #0
  413e06:	e759      	b.n	413cbc <_lv_img_buf_transform_anti_alias+0x338>
  413e08:	00413575 	.word	0x00413575
  413e0c:	00413451 	.word	0x00413451

00413e10 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
  413e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;

#if LV_IMG_CACHE_DEF_SIZE
    if(entry_cnt == 0) {
  413e14:	4b4c      	ldr	r3, [pc, #304]	; (413f48 <_lv_img_cache_open+0x138>)
  413e16:	881f      	ldrh	r7, [r3, #0]
  413e18:	2f00      	cmp	r7, #0
  413e1a:	f000 8091 	beq.w	413f40 <_lv_img_cache_open+0x130>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
  413e1e:	4b4b      	ldr	r3, [pc, #300]	; (413f4c <_lv_img_cache_open+0x13c>)
  413e20:	681e      	ldr	r6, [r3, #0]

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
  413e22:	2300      	movs	r3, #0
  413e24:	e001      	b.n	413e2a <_lv_img_cache_open+0x1a>
  413e26:	3301      	adds	r3, #1
  413e28:	b29b      	uxth	r3, r3
  413e2a:	42bb      	cmp	r3, r7
  413e2c:	d20a      	bcs.n	413e44 <_lv_img_cache_open+0x34>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
  413e2e:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
  413e32:	00ac      	lsls	r4, r5, #2
  413e34:	4434      	add	r4, r6
  413e36:	6a25      	ldr	r5, [r4, #32]
  413e38:	4a45      	ldr	r2, [pc, #276]	; (413f50 <_lv_img_cache_open+0x140>)
  413e3a:	4295      	cmp	r5, r2
  413e3c:	dbf3      	blt.n	413e26 <_lv_img_cache_open+0x16>
            cache[i].life -= LV_IMG_CACHE_AGING;
  413e3e:	3d01      	subs	r5, #1
  413e40:	6225      	str	r5, [r4, #32]
  413e42:	e7f0      	b.n	413e26 <_lv_img_cache_open+0x16>
  413e44:	4688      	mov	r8, r1
  413e46:	4607      	mov	r7, r0
  413e48:	2400      	movs	r4, #0
  413e4a:	e00c      	b.n	413e66 <_lv_img_cache_open+0x56>

    for(i = 0; i < entry_cnt; i++) {
        bool match = false;
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
        if(src_type == LV_IMG_SRC_VARIABLE) {
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  413e4c:	892a      	ldrh	r2, [r5, #8]
  413e4e:	fa1f f388 	uxth.w	r3, r8
  413e52:	429a      	cmp	r2, r3
  413e54:	d020      	beq.n	413e98 <_lv_img_cache_open+0x88>
        bool match = false;
  413e56:	2300      	movs	r3, #0
  413e58:	e002      	b.n	413e60 <_lv_img_cache_open+0x50>
        }
        else if(src_type == LV_IMG_SRC_FILE) {
  413e5a:	2801      	cmp	r0, #1
  413e5c:	d015      	beq.n	413e8a <_lv_img_cache_open+0x7a>
        bool match = false;
  413e5e:	2300      	movs	r3, #0
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
        }

        if(match) {
  413e60:	b9f3      	cbnz	r3, 413ea0 <_lv_img_cache_open+0x90>
    for(i = 0; i < entry_cnt; i++) {
  413e62:	3401      	adds	r4, #1
  413e64:	b2a4      	uxth	r4, r4
  413e66:	4b38      	ldr	r3, [pc, #224]	; (413f48 <_lv_img_cache_open+0x138>)
  413e68:	881b      	ldrh	r3, [r3, #0]
  413e6a:	429c      	cmp	r4, r3
  413e6c:	d223      	bcs.n	413eb6 <_lv_img_cache_open+0xa6>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
  413e6e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  413e72:	009d      	lsls	r5, r3, #2
  413e74:	4435      	add	r5, r6
  413e76:	6868      	ldr	r0, [r5, #4]
  413e78:	4b36      	ldr	r3, [pc, #216]	; (413f54 <_lv_img_cache_open+0x144>)
  413e7a:	4798      	blx	r3
        if(src_type == LV_IMG_SRC_VARIABLE) {
  413e7c:	2800      	cmp	r0, #0
  413e7e:	d1ec      	bne.n	413e5a <_lv_img_cache_open+0x4a>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  413e80:	686b      	ldr	r3, [r5, #4]
  413e82:	42bb      	cmp	r3, r7
  413e84:	d0e2      	beq.n	413e4c <_lv_img_cache_open+0x3c>
        bool match = false;
  413e86:	2300      	movs	r3, #0
  413e88:	e7ea      	b.n	413e60 <_lv_img_cache_open+0x50>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
  413e8a:	4639      	mov	r1, r7
  413e8c:	6868      	ldr	r0, [r5, #4]
  413e8e:	4b32      	ldr	r3, [pc, #200]	; (413f58 <_lv_img_cache_open+0x148>)
  413e90:	4798      	blx	r3
  413e92:	b118      	cbz	r0, 413e9c <_lv_img_cache_open+0x8c>
        bool match = false;
  413e94:	2300      	movs	r3, #0
  413e96:	e7e3      	b.n	413e60 <_lv_img_cache_open+0x50>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  413e98:	2301      	movs	r3, #1
  413e9a:	e7e1      	b.n	413e60 <_lv_img_cache_open+0x50>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
  413e9c:	2301      	movs	r3, #1
  413e9e:	e7df      	b.n	413e60 <_lv_img_cache_open+0x50>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
  413ea0:	696b      	ldr	r3, [r5, #20]
  413ea2:	6a2a      	ldr	r2, [r5, #32]
  413ea4:	4413      	add	r3, r2
  413ea6:	622b      	str	r3, [r5, #32]
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
  413ea8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  413eac:	dd04      	ble.n	413eb8 <_lv_img_cache_open+0xa8>
  413eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  413eb2:	622b      	str	r3, [r5, #32]
  413eb4:	e000      	b.n	413eb8 <_lv_img_cache_open+0xa8>
    lv_img_cache_entry_t * cached_src = NULL;
  413eb6:	2500      	movs	r5, #0
            break;
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src) return cached_src;
  413eb8:	b115      	cbz	r5, 413ec0 <_lv_img_cache_open+0xb0>
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
}
  413eba:	4628      	mov	r0, r5
  413ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  413ec0:	4634      	mov	r4, r6
  413ec2:	2301      	movs	r3, #1
  413ec4:	e001      	b.n	413eca <_lv_img_cache_open+0xba>
    for(i = 1; i < entry_cnt; i++) {
  413ec6:	3301      	adds	r3, #1
  413ec8:	b29b      	uxth	r3, r3
  413eca:	4a1f      	ldr	r2, [pc, #124]	; (413f48 <_lv_img_cache_open+0x138>)
  413ecc:	8812      	ldrh	r2, [r2, #0]
  413ece:	4293      	cmp	r3, r2
  413ed0:	d209      	bcs.n	413ee6 <_lv_img_cache_open+0xd6>
        if(cache[i].life < cached_src->life) {
  413ed2:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  413ed6:	008a      	lsls	r2, r1, #2
  413ed8:	4432      	add	r2, r6
  413eda:	6a10      	ldr	r0, [r2, #32]
  413edc:	6a21      	ldr	r1, [r4, #32]
  413ede:	4288      	cmp	r0, r1
  413ee0:	daf1      	bge.n	413ec6 <_lv_img_cache_open+0xb6>
            cached_src = &cache[i];
  413ee2:	4614      	mov	r4, r2
  413ee4:	e7ef      	b.n	413ec6 <_lv_img_cache_open+0xb6>
    if(cached_src->dec_dsc.src) {
  413ee6:	6863      	ldr	r3, [r4, #4]
  413ee8:	b113      	cbz	r3, 413ef0 <_lv_img_cache_open+0xe0>
        lv_img_decoder_close(&cached_src->dec_dsc);
  413eea:	4620      	mov	r0, r4
  413eec:	4b1b      	ldr	r3, [pc, #108]	; (413f5c <_lv_img_cache_open+0x14c>)
  413eee:	4798      	blx	r3
    t_start                          = lv_tick_get();
  413ef0:	4b1b      	ldr	r3, [pc, #108]	; (413f60 <_lv_img_cache_open+0x150>)
  413ef2:	4798      	blx	r3
  413ef4:	4606      	mov	r6, r0
    cached_src->dec_dsc.time_to_open = 0;
  413ef6:	2300      	movs	r3, #0
  413ef8:	6163      	str	r3, [r4, #20]
    lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
  413efa:	4642      	mov	r2, r8
  413efc:	4639      	mov	r1, r7
  413efe:	4620      	mov	r0, r4
  413f00:	4b18      	ldr	r3, [pc, #96]	; (413f64 <_lv_img_cache_open+0x154>)
  413f02:	4798      	blx	r3
    if(open_res == LV_RES_INV) {
  413f04:	b148      	cbz	r0, 413f1a <_lv_img_cache_open+0x10a>
    cached_src->life = 0;
  413f06:	2300      	movs	r3, #0
  413f08:	6223      	str	r3, [r4, #32]
    if(cached_src->dec_dsc.time_to_open == 0) {
  413f0a:	6963      	ldr	r3, [r4, #20]
  413f0c:	b19b      	cbz	r3, 413f36 <_lv_img_cache_open+0x126>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
  413f0e:	6963      	ldr	r3, [r4, #20]
  413f10:	b9c3      	cbnz	r3, 413f44 <_lv_img_cache_open+0x134>
  413f12:	2301      	movs	r3, #1
  413f14:	6163      	str	r3, [r4, #20]
    return cached_src;
  413f16:	4625      	mov	r5, r4
  413f18:	e7cf      	b.n	413eba <_lv_img_cache_open+0xaa>
        lv_img_decoder_close(&cached_src->dec_dsc);
  413f1a:	4620      	mov	r0, r4
  413f1c:	4b0f      	ldr	r3, [pc, #60]	; (413f5c <_lv_img_cache_open+0x14c>)
  413f1e:	4798      	blx	r3
        _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
  413f20:	2120      	movs	r1, #32
  413f22:	4620      	mov	r0, r4
  413f24:	4e10      	ldr	r6, [pc, #64]	; (413f68 <_lv_img_cache_open+0x158>)
  413f26:	47b0      	blx	r6
        _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
  413f28:	2124      	movs	r1, #36	; 0x24
  413f2a:	4620      	mov	r0, r4
  413f2c:	47b0      	blx	r6
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
  413f2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  413f32:	6223      	str	r3, [r4, #32]
        return NULL;
  413f34:	e7c1      	b.n	413eba <_lv_img_cache_open+0xaa>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
  413f36:	4630      	mov	r0, r6
  413f38:	4b0c      	ldr	r3, [pc, #48]	; (413f6c <_lv_img_cache_open+0x15c>)
  413f3a:	4798      	blx	r3
  413f3c:	6160      	str	r0, [r4, #20]
  413f3e:	e7e6      	b.n	413f0e <_lv_img_cache_open+0xfe>
        return NULL;
  413f40:	2500      	movs	r5, #0
  413f42:	e7ba      	b.n	413eba <_lv_img_cache_open+0xaa>
    return cached_src;
  413f44:	4625      	mov	r5, r4
  413f46:	e7b8      	b.n	413eba <_lv_img_cache_open+0xaa>
  413f48:	2040c792 	.word	0x2040c792
  413f4c:	2043a324 	.word	0x2043a324
  413f50:	80000002 	.word	0x80000002
  413f54:	0040e071 	.word	0x0040e071
  413f58:	00428a09 	.word	0x00428a09
  413f5c:	0041495d 	.word	0x0041495d
  413f60:	0041602d 	.word	0x0041602d
  413f64:	0041489d 	.word	0x0041489d
  413f68:	00417a21 	.word	0x00417a21
  413f6c:	00416049 	.word	0x00416049

00413f70 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
  413f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  413f74:	4606      	mov	r6, r0
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
  413f76:	4b11      	ldr	r3, [pc, #68]	; (413fbc <lv_img_cache_invalidate_src+0x4c>)
  413f78:	681f      	ldr	r7, [r3, #0]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
  413f7a:	2400      	movs	r4, #0
  413f7c:	e00d      	b.n	413f9a <lv_img_cache_invalidate_src+0x2a>
        if(cache[i].dec_dsc.src == src || src == NULL) {
            if(cache[i].dec_dsc.src != NULL) {
  413f7e:	b113      	cbz	r3, 413f86 <lv_img_cache_invalidate_src+0x16>
                lv_img_decoder_close(&cache[i].dec_dsc);
  413f80:	4628      	mov	r0, r5
  413f82:	4b0f      	ldr	r3, [pc, #60]	; (413fc0 <lv_img_cache_invalidate_src+0x50>)
  413f84:	4798      	blx	r3
            }

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
  413f86:	2120      	movs	r1, #32
  413f88:	4628      	mov	r0, r5
  413f8a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 413fc8 <lv_img_cache_invalidate_src+0x58>
  413f8e:	47c0      	blx	r8
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
  413f90:	2124      	movs	r1, #36	; 0x24
  413f92:	4628      	mov	r0, r5
  413f94:	47c0      	blx	r8
    for(i = 0; i < entry_cnt; i++) {
  413f96:	3401      	adds	r4, #1
  413f98:	b2a4      	uxth	r4, r4
  413f9a:	4b0a      	ldr	r3, [pc, #40]	; (413fc4 <lv_img_cache_invalidate_src+0x54>)
  413f9c:	881b      	ldrh	r3, [r3, #0]
  413f9e:	429c      	cmp	r4, r3
  413fa0:	d209      	bcs.n	413fb6 <lv_img_cache_invalidate_src+0x46>
        if(cache[i].dec_dsc.src == src || src == NULL) {
  413fa2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  413fa6:	0098      	lsls	r0, r3, #2
  413fa8:	183d      	adds	r5, r7, r0
  413faa:	686b      	ldr	r3, [r5, #4]
  413fac:	42b3      	cmp	r3, r6
  413fae:	d0e6      	beq.n	413f7e <lv_img_cache_invalidate_src+0xe>
  413fb0:	2e00      	cmp	r6, #0
  413fb2:	d1f0      	bne.n	413f96 <lv_img_cache_invalidate_src+0x26>
  413fb4:	e7e3      	b.n	413f7e <lv_img_cache_invalidate_src+0xe>
        }
    }
#endif
}
  413fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  413fba:	bf00      	nop
  413fbc:	2043a324 	.word	0x2043a324
  413fc0:	0041495d 	.word	0x0041495d
  413fc4:	2040c792 	.word	0x2040c792
  413fc8:	00417a21 	.word	0x00417a21

00413fcc <lv_img_cache_set_size>:
{
  413fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413fce:	4604      	mov	r4, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
  413fd0:	4b1c      	ldr	r3, [pc, #112]	; (414044 <lv_img_cache_set_size+0x78>)
  413fd2:	681b      	ldr	r3, [r3, #0]
  413fd4:	b133      	cbz	r3, 413fe4 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
  413fd6:	2000      	movs	r0, #0
  413fd8:	4b1b      	ldr	r3, [pc, #108]	; (414048 <lv_img_cache_set_size+0x7c>)
  413fda:	4798      	blx	r3
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
  413fdc:	4b19      	ldr	r3, [pc, #100]	; (414044 <lv_img_cache_set_size+0x78>)
  413fde:	6818      	ldr	r0, [r3, #0]
  413fe0:	4b1a      	ldr	r3, [pc, #104]	; (41404c <lv_img_cache_set_size+0x80>)
  413fe2:	4798      	blx	r3
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
  413fe4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  413fe8:	0098      	lsls	r0, r3, #2
  413fea:	4b19      	ldr	r3, [pc, #100]	; (414050 <lv_img_cache_set_size+0x84>)
  413fec:	4798      	blx	r3
  413fee:	4b15      	ldr	r3, [pc, #84]	; (414044 <lv_img_cache_set_size+0x78>)
  413ff0:	6018      	str	r0, [r3, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
  413ff2:	4b18      	ldr	r3, [pc, #96]	; (414054 <lv_img_cache_set_size+0x88>)
  413ff4:	4798      	blx	r3
  413ff6:	b130      	cbz	r0, 414006 <lv_img_cache_set_size+0x3a>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
  413ff8:	4b12      	ldr	r3, [pc, #72]	; (414044 <lv_img_cache_set_size+0x78>)
  413ffa:	681b      	ldr	r3, [r3, #0]
  413ffc:	b153      	cbz	r3, 414014 <lv_img_cache_set_size+0x48>
    entry_cnt = new_entry_cnt;
  413ffe:	4b16      	ldr	r3, [pc, #88]	; (414058 <lv_img_cache_set_size+0x8c>)
  414000:	801c      	strh	r4, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
  414002:	2400      	movs	r4, #0
  414004:	e019      	b.n	41403a <lv_img_cache_set_size+0x6e>
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
  414006:	4b0f      	ldr	r3, [pc, #60]	; (414044 <lv_img_cache_set_size+0x78>)
  414008:	681a      	ldr	r2, [r3, #0]
  41400a:	2300      	movs	r3, #0
  41400c:	4813      	ldr	r0, [pc, #76]	; (41405c <lv_img_cache_set_size+0x90>)
  41400e:	4914      	ldr	r1, [pc, #80]	; (414060 <lv_img_cache_set_size+0x94>)
  414010:	4788      	blx	r1
  414012:	e7fe      	b.n	414012 <lv_img_cache_set_size+0x46>
        entry_cnt = 0;
  414014:	2200      	movs	r2, #0
  414016:	4b10      	ldr	r3, [pc, #64]	; (414058 <lv_img_cache_set_size+0x8c>)
  414018:	801a      	strh	r2, [r3, #0]
        return;
  41401a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
  41401c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  414020:	009d      	lsls	r5, r3, #2
  414022:	4f08      	ldr	r7, [pc, #32]	; (414044 <lv_img_cache_set_size+0x78>)
  414024:	6838      	ldr	r0, [r7, #0]
  414026:	2120      	movs	r1, #32
  414028:	4428      	add	r0, r5
  41402a:	4e0e      	ldr	r6, [pc, #56]	; (414064 <lv_img_cache_set_size+0x98>)
  41402c:	47b0      	blx	r6
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
  41402e:	6838      	ldr	r0, [r7, #0]
  414030:	2124      	movs	r1, #36	; 0x24
  414032:	4428      	add	r0, r5
  414034:	47b0      	blx	r6
    for(i = 0; i < entry_cnt; i++) {
  414036:	3401      	adds	r4, #1
  414038:	b2a4      	uxth	r4, r4
  41403a:	4b07      	ldr	r3, [pc, #28]	; (414058 <lv_img_cache_set_size+0x8c>)
  41403c:	881b      	ldrh	r3, [r3, #0]
  41403e:	429c      	cmp	r4, r3
  414040:	d3ec      	bcc.n	41401c <lv_img_cache_set_size+0x50>
  414042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  414044:	2043a324 	.word	0x2043a324
  414048:	00413f71 	.word	0x00413f71
  41404c:	004175b1 	.word	0x004175b1
  414050:	004174ed 	.word	0x004174ed
  414054:	00416da9 	.word	0x00416da9
  414058:	2040c792 	.word	0x2040c792
  41405c:	0042e54c 	.word	0x0042e54c
  414060:	00416db5 	.word	0x00416db5
  414064:	00417a21 	.word	0x00417a21

00414068 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
  414068:	b530      	push	{r4, r5, lr}
  41406a:	b085      	sub	sp, #20
  41406c:	460c      	mov	r4, r1
  41406e:	4615      	mov	r5, r2
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
  414070:	4608      	mov	r0, r1
  414072:	4b2b      	ldr	r3, [pc, #172]	; (414120 <lv_img_decoder_built_in_info+0xb8>)
  414074:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
  414076:	b9d8      	cbnz	r0, 4140b0 <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
  414078:	7823      	ldrb	r3, [r4, #0]
  41407a:	f003 031f 	and.w	r3, r3, #31
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  41407e:	3b04      	subs	r3, #4
  414080:	b2db      	uxtb	r3, r3
  414082:	2b0a      	cmp	r3, #10
  414084:	d849      	bhi.n	41411a <lv_img_decoder_built_in_info+0xb2>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
  414086:	6823      	ldr	r3, [r4, #0]
  414088:	f3c3 238a 	ubfx	r3, r3, #10, #11
  41408c:	682a      	ldr	r2, [r5, #0]
  41408e:	f363 2294 	bfi	r2, r3, #10, #11
  414092:	602a      	str	r2, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
  414094:	8863      	ldrh	r3, [r4, #2]
  414096:	f3c3 134a 	ubfx	r3, r3, #5, #11
  41409a:	886a      	ldrh	r2, [r5, #2]
  41409c:	f363 124f 	bfi	r2, r3, #5, #11
  4140a0:	806a      	strh	r2, [r5, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
  4140a2:	7822      	ldrb	r2, [r4, #0]
  4140a4:	782b      	ldrb	r3, [r5, #0]
  4140a6:	f362 0304 	bfi	r3, r2, #0, #5
  4140aa:	702b      	strb	r3, [r5, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
  4140ac:	2001      	movs	r0, #1
  4140ae:	e004      	b.n	4140ba <lv_img_decoder_built_in_info+0x52>
    else if(src_type == LV_IMG_SRC_FILE) {
  4140b0:	2801      	cmp	r0, #1
  4140b2:	d004      	beq.n	4140be <lv_img_decoder_built_in_info+0x56>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
  4140b4:	2802      	cmp	r0, #2
  4140b6:	d022      	beq.n	4140fe <lv_img_decoder_built_in_info+0x96>
        return LV_RES_INV;
  4140b8:	2000      	movs	r0, #0
}
  4140ba:	b005      	add	sp, #20
  4140bc:	bd30      	pop	{r4, r5, pc}
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
  4140be:	2202      	movs	r2, #2
  4140c0:	4621      	mov	r1, r4
  4140c2:	a802      	add	r0, sp, #8
  4140c4:	4b17      	ldr	r3, [pc, #92]	; (414124 <lv_img_decoder_built_in_info+0xbc>)
  4140c6:	4798      	blx	r3
        if(res == LV_FS_RES_OK) {
  4140c8:	b148      	cbz	r0, 4140de <lv_img_decoder_built_in_info+0x76>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  4140ca:	782b      	ldrb	r3, [r5, #0]
  4140cc:	f003 031f 	and.w	r3, r3, #31
  4140d0:	331c      	adds	r3, #28
  4140d2:	f003 031f 	and.w	r3, r3, #31
  4140d6:	2b0a      	cmp	r3, #10
  4140d8:	d80f      	bhi.n	4140fa <lv_img_decoder_built_in_info+0x92>
    return LV_RES_OK;
  4140da:	2001      	movs	r0, #1
  4140dc:	e7ed      	b.n	4140ba <lv_img_decoder_built_in_info+0x52>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
  4140de:	ab01      	add	r3, sp, #4
  4140e0:	2204      	movs	r2, #4
  4140e2:	4629      	mov	r1, r5
  4140e4:	a802      	add	r0, sp, #8
  4140e6:	4c10      	ldr	r4, [pc, #64]	; (414128 <lv_img_decoder_built_in_info+0xc0>)
  4140e8:	47a0      	blx	r4
  4140ea:	4604      	mov	r4, r0
            lv_fs_close(&file);
  4140ec:	a802      	add	r0, sp, #8
  4140ee:	4b0f      	ldr	r3, [pc, #60]	; (41412c <lv_img_decoder_built_in_info+0xc4>)
  4140f0:	4798      	blx	r3
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
  4140f2:	b914      	cbnz	r4, 4140fa <lv_img_decoder_built_in_info+0x92>
  4140f4:	9b01      	ldr	r3, [sp, #4]
  4140f6:	2b04      	cmp	r3, #4
  4140f8:	d0e7      	beq.n	4140ca <lv_img_decoder_built_in_info+0x62>
                return LV_RES_INV;
  4140fa:	2000      	movs	r0, #0
  4140fc:	e7dd      	b.n	4140ba <lv_img_decoder_built_in_info+0x52>
        header->w = 1;
  4140fe:	682b      	ldr	r3, [r5, #0]
  414100:	2001      	movs	r0, #1
  414102:	f360 2394 	bfi	r3, r0, #10, #11
  414106:	602b      	str	r3, [r5, #0]
        header->h = 1;
  414108:	0c1a      	lsrs	r2, r3, #16
  41410a:	f360 124f 	bfi	r2, r0, #5, #11
  41410e:	806a      	strh	r2, [r5, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
  414110:	220b      	movs	r2, #11
  414112:	f362 0304 	bfi	r3, r2, #0, #5
  414116:	702b      	strb	r3, [r5, #0]
  414118:	e7cf      	b.n	4140ba <lv_img_decoder_built_in_info+0x52>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  41411a:	2000      	movs	r0, #0
  41411c:	e7cd      	b.n	4140ba <lv_img_decoder_built_in_info+0x52>
  41411e:	bf00      	nop
  414120:	0040e071 	.word	0x0040e071
  414124:	00416f01 	.word	0x00416f01
  414128:	00416e7d 	.word	0x00416e7d
  41412c:	00416e4d 	.word	0x00416e4d

00414130 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
  414130:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  414132:	69cc      	ldr	r4, [r1, #28]
    if(user_data) {
  414134:	b1a4      	cbz	r4, 414160 <lv_img_decoder_built_in_close+0x30>
  414136:	460d      	mov	r5, r1
#if LV_USE_FILESYSTEM
        if(user_data->f) {
  414138:	6820      	ldr	r0, [r4, #0]
  41413a:	b120      	cbz	r0, 414146 <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
  41413c:	4b09      	ldr	r3, [pc, #36]	; (414164 <lv_img_decoder_built_in_close+0x34>)
  41413e:	4798      	blx	r3
            lv_mem_free(user_data->f);
  414140:	6820      	ldr	r0, [r4, #0]
  414142:	4b09      	ldr	r3, [pc, #36]	; (414168 <lv_img_decoder_built_in_close+0x38>)
  414144:	4798      	blx	r3
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
  414146:	6860      	ldr	r0, [r4, #4]
  414148:	b108      	cbz	r0, 41414e <lv_img_decoder_built_in_close+0x1e>
  41414a:	4b07      	ldr	r3, [pc, #28]	; (414168 <lv_img_decoder_built_in_close+0x38>)
  41414c:	4798      	blx	r3
        if(user_data->opa) lv_mem_free(user_data->opa);
  41414e:	68a0      	ldr	r0, [r4, #8]
  414150:	b108      	cbz	r0, 414156 <lv_img_decoder_built_in_close+0x26>
  414152:	4b05      	ldr	r3, [pc, #20]	; (414168 <lv_img_decoder_built_in_close+0x38>)
  414154:	4798      	blx	r3

        lv_mem_free(user_data);
  414156:	4620      	mov	r0, r4
  414158:	4b03      	ldr	r3, [pc, #12]	; (414168 <lv_img_decoder_built_in_close+0x38>)
  41415a:	4798      	blx	r3

        dsc->user_data = NULL;
  41415c:	2300      	movs	r3, #0
  41415e:	61eb      	str	r3, [r5, #28]
  414160:	bd38      	pop	{r3, r4, r5, pc}
  414162:	bf00      	nop
  414164:	00416e4d 	.word	0x00416e4d
  414168:	004175b1 	.word	0x004175b1

0041416c <lv_img_decoder_built_in_open>:
{
  41416c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  414170:	b082      	sub	sp, #8
  414172:	4607      	mov	r7, r0
  414174:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
  414176:	7a8b      	ldrb	r3, [r1, #10]
  414178:	2b01      	cmp	r3, #1
  41417a:	d016      	beq.n	4141aa <lv_img_decoder_built_in_open+0x3e>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  41417c:	b923      	cbnz	r3, 414188 <lv_img_decoder_built_in_open+0x1c>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
  41417e:	684b      	ldr	r3, [r1, #4]
  414180:	689b      	ldr	r3, [r3, #8]
  414182:	2b00      	cmp	r3, #0
  414184:	f000 810b 	beq.w	41439e <lv_img_decoder_built_in_open+0x232>
    lv_img_cf_t cf = dsc->header.cf;
  414188:	7b20      	ldrb	r0, [r4, #12]
  41418a:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
  41418e:	1f03      	subs	r3, r0, #4
  414190:	b2db      	uxtb	r3, r3
  414192:	2b02      	cmp	r3, #2
  414194:	d851      	bhi.n	41423a <lv_img_decoder_built_in_open+0xce>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  414196:	7aa3      	ldrb	r3, [r4, #10]
  414198:	2b00      	cmp	r3, #0
  41419a:	d14a      	bne.n	414232 <lv_img_decoder_built_in_open+0xc6>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
  41419c:	6863      	ldr	r3, [r4, #4]
  41419e:	689b      	ldr	r3, [r3, #8]
  4141a0:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
  4141a2:	2001      	movs	r0, #1
}
  4141a4:	b002      	add	sp, #8
  4141a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
  4141aa:	6848      	ldr	r0, [r1, #4]
  4141ac:	4b7d      	ldr	r3, [pc, #500]	; (4143a4 <lv_img_decoder_built_in_open+0x238>)
  4141ae:	4798      	blx	r3
  4141b0:	497d      	ldr	r1, [pc, #500]	; (4143a8 <lv_img_decoder_built_in_open+0x23c>)
  4141b2:	4b7e      	ldr	r3, [pc, #504]	; (4143ac <lv_img_decoder_built_in_open+0x240>)
  4141b4:	4798      	blx	r3
  4141b6:	b9a8      	cbnz	r0, 4141e4 <lv_img_decoder_built_in_open+0x78>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
  4141b8:	2202      	movs	r2, #2
  4141ba:	6861      	ldr	r1, [r4, #4]
  4141bc:	4668      	mov	r0, sp
  4141be:	4b7c      	ldr	r3, [pc, #496]	; (4143b0 <lv_img_decoder_built_in_open+0x244>)
  4141c0:	4798      	blx	r3
        if(res != LV_FS_RES_OK) {
  4141c2:	b978      	cbnz	r0, 4141e4 <lv_img_decoder_built_in_open+0x78>
        if(dsc->user_data == NULL) {
  4141c4:	69e3      	ldr	r3, [r4, #28]
  4141c6:	b17b      	cbz	r3, 4141e8 <lv_img_decoder_built_in_open+0x7c>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  4141c8:	69e5      	ldr	r5, [r4, #28]
        user_data->f = lv_mem_alloc(sizeof(f));
  4141ca:	2008      	movs	r0, #8
  4141cc:	4b79      	ldr	r3, [pc, #484]	; (4143b4 <lv_img_decoder_built_in_open+0x248>)
  4141ce:	4798      	blx	r3
  4141d0:	6028      	str	r0, [r5, #0]
        LV_ASSERT_MEM(user_data->f);
  4141d2:	4b79      	ldr	r3, [pc, #484]	; (4143b8 <lv_img_decoder_built_in_open+0x24c>)
  4141d4:	4798      	blx	r3
  4141d6:	b1d8      	cbz	r0, 414210 <lv_img_decoder_built_in_open+0xa4>
        if(user_data->f == NULL) {
  4141d8:	682b      	ldr	r3, [r5, #0]
  4141da:	bb3b      	cbnz	r3, 41422c <lv_img_decoder_built_in_open+0xc0>
            lv_img_decoder_built_in_close(decoder, dsc);
  4141dc:	4621      	mov	r1, r4
  4141de:	4638      	mov	r0, r7
  4141e0:	4b76      	ldr	r3, [pc, #472]	; (4143bc <lv_img_decoder_built_in_open+0x250>)
  4141e2:	4798      	blx	r3
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
  4141e4:	2000      	movs	r0, #0
  4141e6:	e7dd      	b.n	4141a4 <lv_img_decoder_built_in_open+0x38>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
  4141e8:	200c      	movs	r0, #12
  4141ea:	4b72      	ldr	r3, [pc, #456]	; (4143b4 <lv_img_decoder_built_in_open+0x248>)
  4141ec:	4798      	blx	r3
  4141ee:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
  4141f0:	4b71      	ldr	r3, [pc, #452]	; (4143b8 <lv_img_decoder_built_in_open+0x24c>)
  4141f2:	4798      	blx	r3
  4141f4:	b928      	cbnz	r0, 414202 <lv_img_decoder_built_in_open+0x96>
  4141f6:	69e2      	ldr	r2, [r4, #28]
  4141f8:	2300      	movs	r3, #0
  4141fa:	4871      	ldr	r0, [pc, #452]	; (4143c0 <lv_img_decoder_built_in_open+0x254>)
  4141fc:	4971      	ldr	r1, [pc, #452]	; (4143c4 <lv_img_decoder_built_in_open+0x258>)
  4141fe:	4788      	blx	r1
  414200:	e7fe      	b.n	414200 <lv_img_decoder_built_in_open+0x94>
            if(dsc->user_data == NULL) {
  414202:	69e0      	ldr	r0, [r4, #28]
  414204:	2800      	cmp	r0, #0
  414206:	d0ed      	beq.n	4141e4 <lv_img_decoder_built_in_open+0x78>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
  414208:	210c      	movs	r1, #12
  41420a:	4b6f      	ldr	r3, [pc, #444]	; (4143c8 <lv_img_decoder_built_in_open+0x25c>)
  41420c:	4798      	blx	r3
  41420e:	e7db      	b.n	4141c8 <lv_img_decoder_built_in_open+0x5c>
        LV_ASSERT_MEM(user_data->f);
  414210:	682a      	ldr	r2, [r5, #0]
  414212:	2300      	movs	r3, #0
  414214:	486a      	ldr	r0, [pc, #424]	; (4143c0 <lv_img_decoder_built_in_open+0x254>)
  414216:	496b      	ldr	r1, [pc, #428]	; (4143c4 <lv_img_decoder_built_in_open+0x258>)
  414218:	4788      	blx	r1
  41421a:	e7fe      	b.n	41421a <lv_img_decoder_built_in_open+0xae>
        *d8 = *s8;
  41421c:	f811 0b01 	ldrb.w	r0, [r1], #1
  414220:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  414224:	3a01      	subs	r2, #1
    while(len) {
  414226:	2a00      	cmp	r2, #0
  414228:	d1f8      	bne.n	41421c <lv_img_decoder_built_in_open+0xb0>
  41422a:	e7ad      	b.n	414188 <lv_img_decoder_built_in_open+0x1c>
  41422c:	4669      	mov	r1, sp
  41422e:	2208      	movs	r2, #8
  414230:	e7f9      	b.n	414226 <lv_img_decoder_built_in_open+0xba>
            dsc->img_data = NULL;
  414232:	2300      	movs	r3, #0
  414234:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
  414236:	2001      	movs	r0, #1
  414238:	e7b4      	b.n	4141a4 <lv_img_decoder_built_in_open+0x38>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
  41423a:	1fc3      	subs	r3, r0, #7
  41423c:	b2db      	uxtb	r3, r3
  41423e:	2b03      	cmp	r3, #3
  414240:	d909      	bls.n	414256 <lv_img_decoder_built_in_open+0xea>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
  414242:	f1a0 030b 	sub.w	r3, r0, #11
  414246:	b2db      	uxtb	r3, r3
  414248:	2b03      	cmp	r3, #3
  41424a:	f200 80a2 	bhi.w	414392 <lv_img_decoder_built_in_open+0x226>
        dsc->img_data = NULL;
  41424e:	2300      	movs	r3, #0
  414250:	6123      	str	r3, [r4, #16]
        return LV_RES_OK; /*Nothing to process*/
  414252:	2001      	movs	r0, #1
  414254:	e7a6      	b.n	4141a4 <lv_img_decoder_built_in_open+0x38>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
  414256:	4b5d      	ldr	r3, [pc, #372]	; (4143cc <lv_img_decoder_built_in_open+0x260>)
  414258:	4798      	blx	r3
  41425a:	4682      	mov	sl, r0
        uint32_t palette_size = 1 << px_size;
  41425c:	2601      	movs	r6, #1
  41425e:	4086      	lsls	r6, r0
        if(dsc->user_data == NULL) {
  414260:	69e3      	ldr	r3, [r4, #28]
  414262:	b17b      	cbz	r3, 414284 <lv_img_decoder_built_in_open+0x118>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  414264:	69e5      	ldr	r5, [r4, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
  414266:	2002      	movs	r0, #2
  414268:	fa00 f00a 	lsl.w	r0, r0, sl
  41426c:	4b51      	ldr	r3, [pc, #324]	; (4143b4 <lv_img_decoder_built_in_open+0x248>)
  41426e:	4798      	blx	r3
  414270:	6068      	str	r0, [r5, #4]
        LV_ASSERT_MEM(user_data->palette);
  414272:	4b51      	ldr	r3, [pc, #324]	; (4143b8 <lv_img_decoder_built_in_open+0x24c>)
  414274:	4798      	blx	r3
  414276:	b9f0      	cbnz	r0, 4142b6 <lv_img_decoder_built_in_open+0x14a>
  414278:	686a      	ldr	r2, [r5, #4]
  41427a:	2300      	movs	r3, #0
  41427c:	4850      	ldr	r0, [pc, #320]	; (4143c0 <lv_img_decoder_built_in_open+0x254>)
  41427e:	4951      	ldr	r1, [pc, #324]	; (4143c4 <lv_img_decoder_built_in_open+0x258>)
  414280:	4788      	blx	r1
  414282:	e7fe      	b.n	414282 <lv_img_decoder_built_in_open+0x116>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
  414284:	200c      	movs	r0, #12
  414286:	4b4b      	ldr	r3, [pc, #300]	; (4143b4 <lv_img_decoder_built_in_open+0x248>)
  414288:	4798      	blx	r3
  41428a:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
  41428c:	4b4a      	ldr	r3, [pc, #296]	; (4143b8 <lv_img_decoder_built_in_open+0x24c>)
  41428e:	4798      	blx	r3
  414290:	b928      	cbnz	r0, 41429e <lv_img_decoder_built_in_open+0x132>
  414292:	69e2      	ldr	r2, [r4, #28]
  414294:	2300      	movs	r3, #0
  414296:	484a      	ldr	r0, [pc, #296]	; (4143c0 <lv_img_decoder_built_in_open+0x254>)
  414298:	494a      	ldr	r1, [pc, #296]	; (4143c4 <lv_img_decoder_built_in_open+0x258>)
  41429a:	4788      	blx	r1
  41429c:	e7fe      	b.n	41429c <lv_img_decoder_built_in_open+0x130>
            if(dsc->user_data == NULL) {
  41429e:	69e0      	ldr	r0, [r4, #28]
  4142a0:	b928      	cbnz	r0, 4142ae <lv_img_decoder_built_in_open+0x142>
                lv_img_decoder_built_in_close(decoder, dsc);
  4142a2:	4621      	mov	r1, r4
  4142a4:	4638      	mov	r0, r7
  4142a6:	4b45      	ldr	r3, [pc, #276]	; (4143bc <lv_img_decoder_built_in_open+0x250>)
  4142a8:	4798      	blx	r3
                return LV_RES_INV;
  4142aa:	2000      	movs	r0, #0
  4142ac:	e77a      	b.n	4141a4 <lv_img_decoder_built_in_open+0x38>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
  4142ae:	210c      	movs	r1, #12
  4142b0:	4b45      	ldr	r3, [pc, #276]	; (4143c8 <lv_img_decoder_built_in_open+0x25c>)
  4142b2:	4798      	blx	r3
  4142b4:	e7d6      	b.n	414264 <lv_img_decoder_built_in_open+0xf8>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
  4142b6:	4630      	mov	r0, r6
  4142b8:	4b3e      	ldr	r3, [pc, #248]	; (4143b4 <lv_img_decoder_built_in_open+0x248>)
  4142ba:	4798      	blx	r3
  4142bc:	60a8      	str	r0, [r5, #8]
        LV_ASSERT_MEM(user_data->opa);
  4142be:	4b3e      	ldr	r3, [pc, #248]	; (4143b8 <lv_img_decoder_built_in_open+0x24c>)
  4142c0:	4798      	blx	r3
  4142c2:	b158      	cbz	r0, 4142dc <lv_img_decoder_built_in_open+0x170>
        if(user_data->palette == NULL || user_data->opa == NULL) {
  4142c4:	686b      	ldr	r3, [r5, #4]
  4142c6:	b17b      	cbz	r3, 4142e8 <lv_img_decoder_built_in_open+0x17c>
  4142c8:	68ab      	ldr	r3, [r5, #8]
  4142ca:	b16b      	cbz	r3, 4142e8 <lv_img_decoder_built_in_open+0x17c>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  4142cc:	7aa3      	ldrb	r3, [r4, #10]
  4142ce:	2b01      	cmp	r3, #1
  4142d0:	d010      	beq.n	4142f4 <lv_img_decoder_built_in_open+0x188>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
  4142d2:	6863      	ldr	r3, [r4, #4]
  4142d4:	f8d3 c008 	ldr.w	ip, [r3, #8]
            for(i = 0; i < palette_size; i++) {
  4142d8:	2300      	movs	r3, #0
  4142da:	e054      	b.n	414386 <lv_img_decoder_built_in_open+0x21a>
        LV_ASSERT_MEM(user_data->opa);
  4142dc:	68aa      	ldr	r2, [r5, #8]
  4142de:	2300      	movs	r3, #0
  4142e0:	4837      	ldr	r0, [pc, #220]	; (4143c0 <lv_img_decoder_built_in_open+0x254>)
  4142e2:	4938      	ldr	r1, [pc, #224]	; (4143c4 <lv_img_decoder_built_in_open+0x258>)
  4142e4:	4788      	blx	r1
  4142e6:	e7fe      	b.n	4142e6 <lv_img_decoder_built_in_open+0x17a>
            lv_img_decoder_built_in_close(decoder, dsc);
  4142e8:	4621      	mov	r1, r4
  4142ea:	4638      	mov	r0, r7
  4142ec:	4b33      	ldr	r3, [pc, #204]	; (4143bc <lv_img_decoder_built_in_open+0x250>)
  4142ee:	4798      	blx	r3
            return LV_RES_INV;
  4142f0:	2000      	movs	r0, #0
  4142f2:	e757      	b.n	4141a4 <lv_img_decoder_built_in_open+0x38>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
  4142f4:	2104      	movs	r1, #4
  4142f6:	6828      	ldr	r0, [r5, #0]
  4142f8:	4b35      	ldr	r3, [pc, #212]	; (4143d0 <lv_img_decoder_built_in_open+0x264>)
  4142fa:	4798      	blx	r3
            for(i = 0; i < palette_size; i++) {
  4142fc:	2700      	movs	r7, #0
  4142fe:	e022      	b.n	414346 <lv_img_decoder_built_in_open+0x1da>
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
  414300:	2300      	movs	r3, #0
  414302:	2204      	movs	r2, #4
  414304:	4669      	mov	r1, sp
  414306:	6828      	ldr	r0, [r5, #0]
  414308:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 4143d4 <lv_img_decoder_built_in_open+0x268>
  41430c:	47c0      	blx	r8
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
  41430e:	6869      	ldr	r1, [r5, #4]
  414310:	f89d 0002 	ldrb.w	r0, [sp, #2]
  414314:	f89d 3001 	ldrb.w	r3, [sp, #1]
  414318:	f89d 2000 	ldrb.w	r2, [sp]
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  41431c:	ea4f 1e53 	mov.w	lr, r3, lsr #5
  414320:	08c0      	lsrs	r0, r0, #3
  414322:	08d2      	lsrs	r2, r2, #3
  414324:	f3c3 0382 	ubfx	r3, r3, #2, #3
  414328:	f36e 0902 	bfi	r9, lr, #0, #3
  41432c:	f360 09c7 	bfi	r9, r0, #3, #5
  414330:	f362 290c 	bfi	r9, r2, #8, #5
  414334:	f363 394f 	bfi	r9, r3, #13, #3
  414338:	f821 9017 	strh.w	r9, [r1, r7, lsl #1]
                user_data->opa[i]     = cur_color.ch.alpha;
  41433c:	68ab      	ldr	r3, [r5, #8]
  41433e:	f89d 2003 	ldrb.w	r2, [sp, #3]
  414342:	55da      	strb	r2, [r3, r7]
            for(i = 0; i < palette_size; i++) {
  414344:	3701      	adds	r7, #1
  414346:	42b7      	cmp	r7, r6
  414348:	d3da      	bcc.n	414300 <lv_img_decoder_built_in_open+0x194>
  41434a:	e01e      	b.n	41438a <lv_img_decoder_built_in_open+0x21e>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
  41434c:	6869      	ldr	r1, [r5, #4]
  41434e:	eb0c 0083 	add.w	r0, ip, r3, lsl #2
  414352:	f890 e002 	ldrb.w	lr, [r0, #2]
  414356:	7842      	ldrb	r2, [r0, #1]
  414358:	f81c 7023 	ldrb.w	r7, [ip, r3, lsl #2]
  41435c:	ea4f 1952 	mov.w	r9, r2, lsr #5
  414360:	ea4f 0ede 	mov.w	lr, lr, lsr #3
  414364:	08ff      	lsrs	r7, r7, #3
  414366:	f3c2 0282 	ubfx	r2, r2, #2, #3
  41436a:	f369 0802 	bfi	r8, r9, #0, #3
  41436e:	f36e 08c7 	bfi	r8, lr, #3, #5
  414372:	f367 280c 	bfi	r8, r7, #8, #5
  414376:	f362 384f 	bfi	r8, r2, #13, #3
  41437a:	f821 8013 	strh.w	r8, [r1, r3, lsl #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
  41437e:	68aa      	ldr	r2, [r5, #8]
  414380:	78c1      	ldrb	r1, [r0, #3]
  414382:	54d1      	strb	r1, [r2, r3]
            for(i = 0; i < palette_size; i++) {
  414384:	3301      	adds	r3, #1
  414386:	42b3      	cmp	r3, r6
  414388:	d3e0      	bcc.n	41434c <lv_img_decoder_built_in_open+0x1e0>
        dsc->img_data = NULL;
  41438a:	2300      	movs	r3, #0
  41438c:	6123      	str	r3, [r4, #16]
        return LV_RES_OK;
  41438e:	2001      	movs	r0, #1
  414390:	e708      	b.n	4141a4 <lv_img_decoder_built_in_open+0x38>
        lv_img_decoder_built_in_close(decoder, dsc);
  414392:	4621      	mov	r1, r4
  414394:	4638      	mov	r0, r7
  414396:	4b09      	ldr	r3, [pc, #36]	; (4143bc <lv_img_decoder_built_in_open+0x250>)
  414398:	4798      	blx	r3
        return LV_RES_INV;
  41439a:	2000      	movs	r0, #0
  41439c:	e702      	b.n	4141a4 <lv_img_decoder_built_in_open+0x38>
            return LV_RES_INV;
  41439e:	2000      	movs	r0, #0
  4143a0:	e700      	b.n	4141a4 <lv_img_decoder_built_in_open+0x38>
  4143a2:	bf00      	nop
  4143a4:	00416fc1 	.word	0x00416fc1
  4143a8:	0042e71c 	.word	0x0042e71c
  4143ac:	00428a09 	.word	0x00428a09
  4143b0:	00416f01 	.word	0x00416f01
  4143b4:	004174ed 	.word	0x004174ed
  4143b8:	00416da9 	.word	0x00416da9
  4143bc:	00414131 	.word	0x00414131
  4143c0:	0042e54c 	.word	0x0042e54c
  4143c4:	00416db5 	.word	0x00416db5
  4143c8:	00417a21 	.word	0x00417a21
  4143cc:	0040ddad 	.word	0x0040ddad
  4143d0:	00416eb9 	.word	0x00416eb9
  4143d4:	00416e7d 	.word	0x00416e7d

004143d8 <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
  4143d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4143dc:	b083      	sub	sp, #12
  4143de:	4680      	mov	r8, r0
  4143e0:	4689      	mov	r9, r1
  4143e2:	4614      	mov	r4, r2
  4143e4:	461f      	mov	r7, r3
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  4143e6:	69c6      	ldr	r6, [r0, #28]
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
  4143e8:	7b00      	ldrb	r0, [r0, #12]
  4143ea:	f000 001f 	and.w	r0, r0, #31
  4143ee:	4b15      	ldr	r3, [pc, #84]	; (414444 <lv_img_decoder_built_in_line_true_color+0x6c>)
  4143f0:	4798      	blx	r3
  4143f2:	4605      	mov	r5, r0

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
  4143f4:	f8d8 100c 	ldr.w	r1, [r8, #12]
  4143f8:	f3c1 218a 	ubfx	r1, r1, #10, #11
  4143fc:	fb01 9104 	mla	r1, r1, r4, r9
  414400:	fb01 f100 	mul.w	r1, r1, r0
  414404:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
  414406:	3104      	adds	r1, #4
  414408:	6830      	ldr	r0, [r6, #0]
  41440a:	4b0f      	ldr	r3, [pc, #60]	; (414448 <lv_img_decoder_built_in_line_true_color+0x70>)
  41440c:	4798      	blx	r3
    if(res != LV_FS_RES_OK) {
  41440e:	b118      	cbz	r0, 414418 <lv_img_decoder_built_in_line_true_color+0x40>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
  414410:	2000      	movs	r0, #0
    LV_UNUSED(len);
    LV_UNUSED(buf);
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
    return LV_RES_INV;
#endif
}
  414412:	b003      	add	sp, #12
  414414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint32_t btr = len * (px_size >> 3);
  414418:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  41441c:	fb05 f507 	mul.w	r5, r5, r7
    uint32_t br  = 0;
  414420:	ab02      	add	r3, sp, #8
  414422:	2200      	movs	r2, #0
  414424:	f843 2d04 	str.w	r2, [r3, #-4]!
    res = lv_fs_read(user_data->f, buf, btr, &br);
  414428:	462a      	mov	r2, r5
  41442a:	990a      	ldr	r1, [sp, #40]	; 0x28
  41442c:	6830      	ldr	r0, [r6, #0]
  41442e:	4c07      	ldr	r4, [pc, #28]	; (41444c <lv_img_decoder_built_in_line_true_color+0x74>)
  414430:	47a0      	blx	r4
    if(res != LV_FS_RES_OK || btr != br) {
  414432:	b920      	cbnz	r0, 41443e <lv_img_decoder_built_in_line_true_color+0x66>
  414434:	9b01      	ldr	r3, [sp, #4]
  414436:	429d      	cmp	r5, r3
  414438:	d1eb      	bne.n	414412 <lv_img_decoder_built_in_line_true_color+0x3a>
    return LV_RES_OK;
  41443a:	2001      	movs	r0, #1
  41443c:	e7e9      	b.n	414412 <lv_img_decoder_built_in_line_true_color+0x3a>
        return LV_RES_INV;
  41443e:	2000      	movs	r0, #0
  414440:	e7e7      	b.n	414412 <lv_img_decoder_built_in_line_true_color+0x3a>
  414442:	bf00      	nop
  414444:	0040ddad 	.word	0x0040ddad
  414448:	00416eb9 	.word	0x00416eb9
  41444c:	00416e7d 	.word	0x00416e7d

00414450 <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
  414450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414454:	b08b      	sub	sp, #44	; 0x2c
  414456:	4680      	mov	r8, r0
  414458:	460c      	mov	r4, r1
  41445a:	4693      	mov	fp, r2
  41445c:	461e      	mov	r6, r3
  41445e:	9d14      	ldr	r5, [sp, #80]	; 0x50

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
  414460:	2700      	movs	r7, #0
  414462:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
  414466:	23ff      	movs	r3, #255	; 0xff
  414468:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
  41446c:	4b6a      	ldr	r3, [pc, #424]	; (414618 <lv_img_decoder_built_in_line_alpha+0x1c8>)
  41446e:	f853 2b04 	ldr.w	r2, [r3], #4
  414472:	9208      	str	r2, [sp, #32]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
  414474:	f10d 0e10 	add.w	lr, sp, #16
  414478:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  41447a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
  41447e:	f8b8 0008 	ldrh.w	r0, [r8, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
  414482:	463b      	mov	r3, r7
  414484:	e008      	b.n	414498 <lv_img_decoder_built_in_line_alpha+0x48>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
  414486:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  41448a:	b281      	uxth	r1, r0
  41448c:	54a9      	strb	r1, [r5, r2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
  41448e:	3201      	adds	r2, #1
  414490:	0a09      	lsrs	r1, r1, #8
  414492:	54a9      	strb	r1, [r5, r2]
    for(i = 0; i < len; i++) {
  414494:	3301      	adds	r3, #1
  414496:	b21b      	sxth	r3, r3
  414498:	42b3      	cmp	r3, r6
  41449a:	dbf4      	blt.n	414486 <lv_img_decoder_built_in_line_alpha+0x36>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
  41449c:	f898 000c 	ldrb.w	r0, [r8, #12]
  4144a0:	f000 001f 	and.w	r0, r0, #31
  4144a4:	4b5d      	ldr	r3, [pc, #372]	; (41461c <lv_img_decoder_built_in_line_alpha+0x1cc>)
  4144a6:	4798      	blx	r3
  4144a8:	4681      	mov	r9, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
  4144aa:	2701      	movs	r7, #1
  4144ac:	4087      	lsls	r7, r0
  4144ae:	b2bf      	uxth	r7, r7
  4144b0:	3f01      	subs	r7, #1
  4144b2:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
  4144b4:	f898 300c 	ldrb.w	r3, [r8, #12]
  4144b8:	f003 031f 	and.w	r3, r3, #31
  4144bc:	3b0b      	subs	r3, #11
  4144be:	2b03      	cmp	r3, #3
  4144c0:	d864      	bhi.n	41458c <lv_img_decoder_built_in_line_alpha+0x13c>
  4144c2:	e8df f003 	tbb	[pc, r3]
  4144c6:	2802      	.short	0x2802
  4144c8:	5740      	.short	0x5740
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
  4144ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4144ce:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4144d2:	10da      	asrs	r2, r3, #3
  4144d4:	b211      	sxth	r1, r2
  4144d6:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x7) w++;
  4144d8:	f013 0f07 	tst.w	r3, #7
  4144dc:	d001      	beq.n	4144e2 <lv_img_decoder_built_in_line_alpha+0x92>
  4144de:	1c53      	adds	r3, r2, #1
  4144e0:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 3); /*First pixel*/
  4144e2:	10e3      	asrs	r3, r4, #3
  4144e4:	9a01      	ldr	r2, [sp, #4]
  4144e6:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 7 - (x & 0x7);
  4144ea:	43e4      	mvns	r4, r4
  4144ec:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
  4144f0:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
            pos = 0;
            break;
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  4144f4:	f8d8 301c 	ldr.w	r3, [r8, #28]
  4144f8:	9303      	str	r3, [sp, #12]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
  4144fa:	9801      	ldr	r0, [sp, #4]
  4144fc:	4b48      	ldr	r3, [pc, #288]	; (414620 <lv_img_decoder_built_in_line_alpha+0x1d0>)
  4144fe:	4798      	blx	r3
  414500:	9002      	str	r0, [sp, #8]
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  414502:	f898 300a 	ldrb.w	r3, [r8, #10]
  414506:	2b00      	cmp	r3, #0
  414508:	d149      	bne.n	41459e <lv_img_decoder_built_in_line_alpha+0x14e>
        const lv_img_dsc_t * img_dsc = dsc->src;
  41450a:	f8d8 3004 	ldr.w	r3, [r8, #4]

        data_tmp = img_dsc->data + ofs;
  41450e:	689b      	ldr	r3, [r3, #8]
  414510:	449b      	add	fp, r3
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
        lv_fs_read(user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
  414512:	2100      	movs	r1, #0
  414514:	e05d      	b.n	4145d2 <lv_img_decoder_built_in_line_alpha+0x182>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  414516:	f8d8 300c 	ldr.w	r3, [r8, #12]
  41451a:	f3c3 238a 	ubfx	r3, r3, #10, #11
  41451e:	109a      	asrs	r2, r3, #2
  414520:	b211      	sxth	r1, r2
  414522:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x3) w++;
  414524:	f013 0f03 	tst.w	r3, #3
  414528:	d001      	beq.n	41452e <lv_img_decoder_built_in_line_alpha+0xde>
  41452a:	1c53      	adds	r3, r2, #1
  41452c:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 2); /*First pixel*/
  41452e:	10a3      	asrs	r3, r4, #2
  414530:	9a01      	ldr	r2, [sp, #4]
  414532:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 6 - ((x & 0x3) * 2);
  414536:	b2a4      	uxth	r4, r4
  414538:	43e4      	mvns	r4, r4
  41453a:	f004 0403 	and.w	r4, r4, #3
  41453e:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
  414540:	f10d 0a20 	add.w	sl, sp, #32
            break;
  414544:	e7d6      	b.n	4144f4 <lv_img_decoder_built_in_line_alpha+0xa4>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  414546:	f8d8 300c 	ldr.w	r3, [r8, #12]
  41454a:	f3c3 238a 	ubfx	r3, r3, #10, #11
  41454e:	105a      	asrs	r2, r3, #1
  414550:	b211      	sxth	r1, r2
  414552:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x1) w++;
  414554:	f013 0f01 	tst.w	r3, #1
  414558:	d001      	beq.n	41455e <lv_img_decoder_built_in_line_alpha+0x10e>
  41455a:	1c53      	adds	r3, r2, #1
  41455c:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 1); /*First pixel*/
  41455e:	1063      	asrs	r3, r4, #1
  414560:	9a01      	ldr	r2, [sp, #4]
  414562:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 4 - ((x & 0x1) * 4);
  414566:	f014 0f01 	tst.w	r4, #1
  41456a:	d114      	bne.n	414596 <lv_img_decoder_built_in_line_alpha+0x146>
  41456c:	2404      	movs	r4, #4
            opa_table = alpha4_opa_table;
  41456e:	f10d 0a10 	add.w	sl, sp, #16
  414572:	e7bf      	b.n	4144f4 <lv_img_decoder_built_in_line_alpha+0xa4>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
  414574:	f8d8 300c 	ldr.w	r3, [r8, #12]
  414578:	f3c3 238a 	ubfx	r3, r3, #10, #11
  41457c:	b29a      	uxth	r2, r3
  41457e:	b21b      	sxth	r3, r3
  414580:	9301      	str	r3, [sp, #4]
            ofs += w * y + x;  /*First pixel*/
  414582:	fb0b 4b02 	mla	fp, fp, r2, r4
            pos = 0;
  414586:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
  414588:	46a2      	mov	sl, r4
            break;
  41458a:	e7b3      	b.n	4144f4 <lv_img_decoder_built_in_line_alpha+0xa4>
    int8_t pos   = 0;
  41458c:	2400      	movs	r4, #0
    uint32_t ofs = 0;
  41458e:	46a3      	mov	fp, r4
    lv_coord_t w = 0;
  414590:	9401      	str	r4, [sp, #4]
    const lv_opa_t * opa_table = NULL;
  414592:	46a2      	mov	sl, r4
  414594:	e7ae      	b.n	4144f4 <lv_img_decoder_built_in_line_alpha+0xa4>
            pos       = 4 - ((x & 0x1) * 4);
  414596:	2400      	movs	r4, #0
            opa_table = alpha4_opa_table;
  414598:	f10d 0a10 	add.w	sl, sp, #16
  41459c:	e7aa      	b.n	4144f4 <lv_img_decoder_built_in_line_alpha+0xa4>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
  41459e:	f10b 0104 	add.w	r1, fp, #4
  4145a2:	9b03      	ldr	r3, [sp, #12]
  4145a4:	6818      	ldr	r0, [r3, #0]
  4145a6:	4b1f      	ldr	r3, [pc, #124]	; (414624 <lv_img_decoder_built_in_line_alpha+0x1d4>)
  4145a8:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
  4145aa:	2300      	movs	r3, #0
  4145ac:	9a01      	ldr	r2, [sp, #4]
  4145ae:	9902      	ldr	r1, [sp, #8]
  4145b0:	9803      	ldr	r0, [sp, #12]
  4145b2:	6800      	ldr	r0, [r0, #0]
  4145b4:	f8df b074 	ldr.w	fp, [pc, #116]	; 41462c <lv_img_decoder_built_in_line_alpha+0x1dc>
  4145b8:	47d8      	blx	fp
        data_tmp = fs_buf;
  4145ba:	f8dd b008 	ldr.w	fp, [sp, #8]
  4145be:	e7a8      	b.n	414512 <lv_img_decoder_built_in_line_alpha+0xc2>
    }

    for(i = 0; i < len; i++) {
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  4145c0:	f805 e000 	strb.w	lr, [r5, r0]
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
  4145c4:	eba4 0409 	sub.w	r4, r4, r9
  4145c8:	b264      	sxtb	r4, r4
        if(pos < 0) {
  4145ca:	2c00      	cmp	r4, #0
  4145cc:	db17      	blt.n	4145fe <lv_img_decoder_built_in_line_alpha+0x1ae>
    for(i = 0; i < len; i++) {
  4145ce:	3101      	adds	r1, #1
  4145d0:	b209      	sxth	r1, r1
  4145d2:	42b1      	cmp	r1, r6
  4145d4:	da19      	bge.n	41460a <lv_img_decoder_built_in_line_alpha+0x1ba>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
  4145d6:	f89b 3000 	ldrb.w	r3, [fp]
  4145da:	fa07 f204 	lsl.w	r2, r7, r4
  4145de:	4013      	ands	r3, r2
  4145e0:	4123      	asrs	r3, r4
  4145e2:	fa5f fe83 	uxtb.w	lr, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  4145e6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
  4145ea:	3002      	adds	r0, #2
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
  4145ec:	f898 200c 	ldrb.w	r2, [r8, #12]
  4145f0:	f002 021f 	and.w	r2, r2, #31
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  4145f4:	2a0e      	cmp	r2, #14
  4145f6:	d0e3      	beq.n	4145c0 <lv_img_decoder_built_in_line_alpha+0x170>
  4145f8:	f81a e00e 	ldrb.w	lr, [sl, lr]
  4145fc:	e7e0      	b.n	4145c0 <lv_img_decoder_built_in_line_alpha+0x170>
            pos = 8 - px_size;
  4145fe:	f1c9 0408 	rsb	r4, r9, #8
  414602:	b264      	sxtb	r4, r4
            data_tmp++;
  414604:	f10b 0b01 	add.w	fp, fp, #1
  414608:	e7e1      	b.n	4145ce <lv_img_decoder_built_in_line_alpha+0x17e>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
  41460a:	9802      	ldr	r0, [sp, #8]
  41460c:	4b06      	ldr	r3, [pc, #24]	; (414628 <lv_img_decoder_built_in_line_alpha+0x1d8>)
  41460e:	4798      	blx	r3

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
  414610:	2001      	movs	r0, #1
  414612:	b00b      	add	sp, #44	; 0x2c
  414614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414618:	0042e708 	.word	0x0042e708
  41461c:	0040ddad 	.word	0x0040ddad
  414620:	00417895 	.word	0x00417895
  414624:	00416eb9 	.word	0x00416eb9
  414628:	00417645 	.word	0x00417645
  41462c:	00416e7d 	.word	0x00416e7d

00414630 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
  414630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414634:	b083      	sub	sp, #12
  414636:	4682      	mov	sl, r0
  414638:	460c      	mov	r4, r1
  41463a:	4616      	mov	r6, r2
  41463c:	4699      	mov	r9, r3
  41463e:	9d0c      	ldr	r5, [sp, #48]	; 0x30

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
  414640:	7b00      	ldrb	r0, [r0, #12]
  414642:	f000 001f 	and.w	r0, r0, #31
  414646:	4b5d      	ldr	r3, [pc, #372]	; (4147bc <lv_img_decoder_built_in_line_indexed+0x18c>)
  414648:	4798      	blx	r3
  41464a:	4680      	mov	r8, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
  41464c:	2701      	movs	r7, #1
  41464e:	4087      	lsls	r7, r0
  414650:	b2bf      	uxth	r7, r7
  414652:	3f01      	subs	r7, #1
  414654:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
  414656:	f89a 300c 	ldrb.w	r3, [sl, #12]
  41465a:	f003 031f 	and.w	r3, r3, #31
  41465e:	3b07      	subs	r3, #7
  414660:	2b03      	cmp	r3, #3
  414662:	d868      	bhi.n	414736 <lv_img_decoder_built_in_line_indexed+0x106>
  414664:	e8df f003 	tbb	[pc, r3]
  414668:	58412902 	.word	0x58412902
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
  41466c:	f8da 300c 	ldr.w	r3, [sl, #12]
  414670:	f3c3 238a 	ubfx	r3, r3, #10, #11
  414674:	10da      	asrs	r2, r3, #3
  414676:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x7) w++;
  41467a:	f013 0f07 	tst.w	r3, #7
  41467e:	d001      	beq.n	414684 <lv_img_decoder_built_in_line_indexed+0x54>
  414680:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 3); /*First pixel*/
  414684:	10e3      	asrs	r3, r4, #3
  414686:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 8;                /*Skip the palette*/
  41468a:	f106 0308 	add.w	r3, r6, #8
  41468e:	9301      	str	r3, [sp, #4]
            pos = 7 - (x & 0x7);
  414690:	43e4      	mvns	r4, r4
  414692:	f004 0407 	and.w	r4, r4, #7
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  414696:	f8da 601c 	ldr.w	r6, [sl, #28]

#if LV_USE_FILESYSTEM
    uint8_t * fs_buf = _lv_mem_buf_get(w);
  41469a:	4658      	mov	r0, fp
  41469c:	4b48      	ldr	r3, [pc, #288]	; (4147c0 <lv_img_decoder_built_in_line_indexed+0x190>)
  41469e:	4798      	blx	r3
  4146a0:	9000      	str	r0, [sp, #0]
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  4146a2:	f89a 300a 	ldrb.w	r3, [sl, #10]
  4146a6:	2b00      	cmp	r3, #0
  4146a8:	d14c      	bne.n	414744 <lv_img_decoder_built_in_line_indexed+0x114>
        const lv_img_dsc_t * img_dsc = dsc->src;
  4146aa:	f8da 3004 	ldr.w	r3, [sl, #4]
        data_tmp                     = img_dsc->data + ofs;
  4146ae:	689b      	ldr	r3, [r3, #8]
  4146b0:	9a01      	ldr	r2, [sp, #4]
  4146b2:	441a      	add	r2, r3
  4146b4:	4696      	mov	lr, r2
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
        lv_fs_read(user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
  4146b6:	2100      	movs	r1, #0
  4146b8:	e056      	b.n	414768 <lv_img_decoder_built_in_line_indexed+0x138>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  4146ba:	f8da 300c 	ldr.w	r3, [sl, #12]
  4146be:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4146c2:	109a      	asrs	r2, r3, #2
  4146c4:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x3) w++;
  4146c8:	f013 0f03 	tst.w	r3, #3
  4146cc:	d001      	beq.n	4146d2 <lv_img_decoder_built_in_line_indexed+0xa2>
  4146ce:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 2); /*First pixel*/
  4146d2:	10a3      	asrs	r3, r4, #2
  4146d4:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 16;               /*Skip the palette*/
  4146d8:	f106 0310 	add.w	r3, r6, #16
  4146dc:	9301      	str	r3, [sp, #4]
            pos = 6 - ((x & 0x3) * 2);
  4146de:	b2a4      	uxth	r4, r4
  4146e0:	43e4      	mvns	r4, r4
  4146e2:	f004 0403 	and.w	r4, r4, #3
  4146e6:	0064      	lsls	r4, r4, #1
            break;
  4146e8:	e7d5      	b.n	414696 <lv_img_decoder_built_in_line_indexed+0x66>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  4146ea:	f8da 300c 	ldr.w	r3, [sl, #12]
  4146ee:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4146f2:	105a      	asrs	r2, r3, #1
  4146f4:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x1) w++;
  4146f8:	f013 0f01 	tst.w	r3, #1
  4146fc:	d001      	beq.n	414702 <lv_img_decoder_built_in_line_indexed+0xd2>
  4146fe:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 1); /*First pixel*/
  414702:	1063      	asrs	r3, r4, #1
  414704:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 64;               /*Skip the palette*/
  414708:	f106 0340 	add.w	r3, r6, #64	; 0x40
  41470c:	9301      	str	r3, [sp, #4]
            pos = 4 - ((x & 0x1) * 4);
  41470e:	f014 0f01 	tst.w	r4, #1
  414712:	d115      	bne.n	414740 <lv_img_decoder_built_in_line_indexed+0x110>
  414714:	2404      	movs	r4, #4
  414716:	e7be      	b.n	414696 <lv_img_decoder_built_in_line_indexed+0x66>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
  414718:	f8da 300c 	ldr.w	r3, [sl, #12]
  41471c:	f3c3 2b8a 	ubfx	fp, r3, #10, #11
  414720:	fa1f f38b 	uxth.w	r3, fp
  414724:	fa0f fb8b 	sxth.w	fp, fp
            ofs += w * y + x;  /*First pixel*/
  414728:	fb06 4403 	mla	r4, r6, r3, r4
            ofs += 1024;       /*Skip the palette*/
  41472c:	f504 6380 	add.w	r3, r4, #1024	; 0x400
  414730:	9301      	str	r3, [sp, #4]
            pos = 0;
  414732:	2400      	movs	r4, #0
            break;
  414734:	e7af      	b.n	414696 <lv_img_decoder_built_in_line_indexed+0x66>
    uint32_t ofs = 0;
  414736:	2300      	movs	r3, #0
  414738:	9301      	str	r3, [sp, #4]
    int8_t pos   = 0;
  41473a:	461c      	mov	r4, r3
    lv_coord_t w = 0;
  41473c:	469b      	mov	fp, r3
  41473e:	e7aa      	b.n	414696 <lv_img_decoder_built_in_line_indexed+0x66>
            pos = 4 - ((x & 0x1) * 4);
  414740:	2400      	movs	r4, #0
  414742:	e7a8      	b.n	414696 <lv_img_decoder_built_in_line_indexed+0x66>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
  414744:	9901      	ldr	r1, [sp, #4]
  414746:	3104      	adds	r1, #4
  414748:	6830      	ldr	r0, [r6, #0]
  41474a:	4b1e      	ldr	r3, [pc, #120]	; (4147c4 <lv_img_decoder_built_in_line_indexed+0x194>)
  41474c:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
  41474e:	2300      	movs	r3, #0
  414750:	465a      	mov	r2, fp
  414752:	f8dd b000 	ldr.w	fp, [sp]
  414756:	4659      	mov	r1, fp
  414758:	6830      	ldr	r0, [r6, #0]
  41475a:	f8df a070 	ldr.w	sl, [pc, #112]	; 4147cc <lv_img_decoder_built_in_line_indexed+0x19c>
  41475e:	47d0      	blx	sl
        data_tmp = fs_buf;
  414760:	46de      	mov	lr, fp
  414762:	e7a8      	b.n	4146b6 <lv_img_decoder_built_in_line_indexed+0x86>
        return LV_RES_INV;
#endif
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
  414764:	3101      	adds	r1, #1
  414766:	b209      	sxth	r1, r1
  414768:	4549      	cmp	r1, r9
  41476a:	da20      	bge.n	4147ae <lv_img_decoder_built_in_line_indexed+0x17e>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
  41476c:	f89e 3000 	ldrb.w	r3, [lr]
  414770:	fa07 f204 	lsl.w	r2, r7, r4
  414774:	4013      	ands	r3, r2
  414776:	4123      	asrs	r3, r4

        lv_color_t color = user_data->palette[val_act];
  414778:	6870      	ldr	r0, [r6, #4]
  41477a:	b2db      	uxtb	r3, r3
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
  41477c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
  414780:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
  414784:	54a8      	strb	r0, [r5, r2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
  414786:	f102 0c01 	add.w	ip, r2, #1
  41478a:	0a00      	lsrs	r0, r0, #8
  41478c:	f805 000c 	strb.w	r0, [r5, ip]
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
  414790:	3202      	adds	r2, #2
  414792:	68b0      	ldr	r0, [r6, #8]
  414794:	5cc3      	ldrb	r3, [r0, r3]
  414796:	54ab      	strb	r3, [r5, r2]

        pos -= px_size;
  414798:	eba4 0408 	sub.w	r4, r4, r8
  41479c:	b264      	sxtb	r4, r4
        if(pos < 0) {
  41479e:	2c00      	cmp	r4, #0
  4147a0:	dae0      	bge.n	414764 <lv_img_decoder_built_in_line_indexed+0x134>
            pos = 8 - px_size;
  4147a2:	f1c8 0408 	rsb	r4, r8, #8
  4147a6:	b264      	sxtb	r4, r4
            data_tmp++;
  4147a8:	f10e 0e01 	add.w	lr, lr, #1
  4147ac:	e7da      	b.n	414764 <lv_img_decoder_built_in_line_indexed+0x134>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
  4147ae:	9800      	ldr	r0, [sp, #0]
  4147b0:	4b05      	ldr	r3, [pc, #20]	; (4147c8 <lv_img_decoder_built_in_line_indexed+0x198>)
  4147b2:	4798      	blx	r3
    return LV_RES_OK;
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
  4147b4:	2001      	movs	r0, #1
  4147b6:	b003      	add	sp, #12
  4147b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4147bc:	0040ddad 	.word	0x0040ddad
  4147c0:	00417895 	.word	0x00417895
  4147c4:	00416eb9 	.word	0x00416eb9
  4147c8:	00417645 	.word	0x00417645
  4147cc:	00416e7d 	.word	0x00416e7d

004147d0 <lv_img_decoder_built_in_read_line>:
{
  4147d0:	b530      	push	{r4, r5, lr}
  4147d2:	b083      	sub	sp, #12
  4147d4:	4608      	mov	r0, r1
  4147d6:	4611      	mov	r1, r2
  4147d8:	461a      	mov	r2, r3
  4147da:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
  4147de:	7b04      	ldrb	r4, [r0, #12]
  4147e0:	f004 041f 	and.w	r4, r4, #31
  4147e4:	1f25      	subs	r5, r4, #4
  4147e6:	b2ed      	uxtb	r5, r5
  4147e8:	2d02      	cmp	r5, #2
  4147ea:	d80a      	bhi.n	414802 <lv_img_decoder_built_in_read_line+0x32>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  4147ec:	7a84      	ldrb	r4, [r0, #10]
  4147ee:	2c01      	cmp	r4, #1
  4147f0:	d002      	beq.n	4147f8 <lv_img_decoder_built_in_read_line+0x28>
    lv_res_t res = LV_RES_INV;
  4147f2:	2000      	movs	r0, #0
}
  4147f4:	b003      	add	sp, #12
  4147f6:	bd30      	pop	{r4, r5, pc}
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
  4147f8:	9c07      	ldr	r4, [sp, #28]
  4147fa:	9400      	str	r4, [sp, #0]
  4147fc:	4c0b      	ldr	r4, [pc, #44]	; (41482c <lv_img_decoder_built_in_read_line+0x5c>)
  4147fe:	47a0      	blx	r4
  414800:	e7f8      	b.n	4147f4 <lv_img_decoder_built_in_read_line+0x24>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  414802:	f1a4 050b 	sub.w	r5, r4, #11
  414806:	b2ed      	uxtb	r5, r5
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
  414808:	2d03      	cmp	r5, #3
  41480a:	d905      	bls.n	414818 <lv_img_decoder_built_in_read_line+0x48>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  41480c:	3c07      	subs	r4, #7
  41480e:	b2e4      	uxtb	r4, r4
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
  414810:	2c03      	cmp	r4, #3
  414812:	d906      	bls.n	414822 <lv_img_decoder_built_in_read_line+0x52>
        return LV_RES_INV;
  414814:	2000      	movs	r0, #0
  414816:	e7ed      	b.n	4147f4 <lv_img_decoder_built_in_read_line+0x24>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
  414818:	9c07      	ldr	r4, [sp, #28]
  41481a:	9400      	str	r4, [sp, #0]
  41481c:	4c04      	ldr	r4, [pc, #16]	; (414830 <lv_img_decoder_built_in_read_line+0x60>)
  41481e:	47a0      	blx	r4
  414820:	e7e8      	b.n	4147f4 <lv_img_decoder_built_in_read_line+0x24>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
  414822:	9c07      	ldr	r4, [sp, #28]
  414824:	9400      	str	r4, [sp, #0]
  414826:	4c03      	ldr	r4, [pc, #12]	; (414834 <lv_img_decoder_built_in_read_line+0x64>)
  414828:	47a0      	blx	r4
  41482a:	e7e3      	b.n	4147f4 <lv_img_decoder_built_in_read_line+0x24>
  41482c:	004143d9 	.word	0x004143d9
  414830:	00414451 	.word	0x00414451
  414834:	00414631 	.word	0x00414631

00414838 <lv_img_decoder_get_info>:
{
  414838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41483a:	4607      	mov	r7, r0
  41483c:	460e      	mov	r6, r1
    header->always_zero = 0;
  41483e:	780b      	ldrb	r3, [r1, #0]
  414840:	f36f 1347 	bfc	r3, #5, #3
  414844:	700b      	strb	r3, [r1, #0]
    header->h = 0;
  414846:	884b      	ldrh	r3, [r1, #2]
  414848:	f36f 134f 	bfc	r3, #5, #11
  41484c:	804b      	strh	r3, [r1, #2]
    header->w = 0;
  41484e:	680b      	ldr	r3, [r1, #0]
  414850:	f36f 2394 	bfc	r3, #10, #11
  414854:	600b      	str	r3, [r1, #0]
    header->cf = LV_IMG_CF_UNKNOWN;
  414856:	f36f 0304 	bfc	r3, #0, #5
  41485a:	700b      	strb	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  41485c:	480c      	ldr	r0, [pc, #48]	; (414890 <lv_img_decoder_get_info+0x58>)
  41485e:	4b0d      	ldr	r3, [pc, #52]	; (414894 <lv_img_decoder_get_info+0x5c>)
  414860:	4798      	blx	r3
  414862:	4604      	mov	r4, r0
    lv_res_t res = LV_RES_INV;
  414864:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  414866:	e005      	b.n	414874 <lv_img_decoder_get_info+0x3c>
        res = LV_RES_INV;
  414868:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  41486a:	4621      	mov	r1, r4
  41486c:	4808      	ldr	r0, [pc, #32]	; (414890 <lv_img_decoder_get_info+0x58>)
  41486e:	4b0a      	ldr	r3, [pc, #40]	; (414898 <lv_img_decoder_get_info+0x60>)
  414870:	4798      	blx	r3
  414872:	4604      	mov	r4, r0
  414874:	b14c      	cbz	r4, 41488a <lv_img_decoder_get_info+0x52>
        if(d->info_cb) {
  414876:	6823      	ldr	r3, [r4, #0]
  414878:	2b00      	cmp	r3, #0
  41487a:	d0f5      	beq.n	414868 <lv_img_decoder_get_info+0x30>
            res = d->info_cb(d, src, header);
  41487c:	4632      	mov	r2, r6
  41487e:	4639      	mov	r1, r7
  414880:	4620      	mov	r0, r4
  414882:	4798      	blx	r3
  414884:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
  414886:	2801      	cmp	r0, #1
  414888:	d1ef      	bne.n	41486a <lv_img_decoder_get_info+0x32>
}
  41488a:	4628      	mov	r0, r5
  41488c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41488e:	bf00      	nop
  414890:	2043a270 	.word	0x2043a270
  414894:	004170b9 	.word	0x004170b9
  414898:	004170cd 	.word	0x004170cd

0041489c <lv_img_decoder_open>:
{
  41489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41489e:	4606      	mov	r6, r0
  4148a0:	460f      	mov	r7, r1
    dsc->color     = color;
  4148a2:	8102      	strh	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
  4148a4:	4608      	mov	r0, r1
  4148a6:	4b1d      	ldr	r3, [pc, #116]	; (41491c <lv_img_decoder_open+0x80>)
  4148a8:	4798      	blx	r3
  4148aa:	72b0      	strb	r0, [r6, #10]
    dsc->user_data = NULL;
  4148ac:	2300      	movs	r3, #0
  4148ae:	61f3      	str	r3, [r6, #28]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
  4148b0:	2801      	cmp	r0, #1
  4148b2:	d006      	beq.n	4148c2 <lv_img_decoder_open+0x26>
        dsc->src       = src;
  4148b4:	6077      	str	r7, [r6, #4]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  4148b6:	481a      	ldr	r0, [pc, #104]	; (414920 <lv_img_decoder_open+0x84>)
  4148b8:	4b1a      	ldr	r3, [pc, #104]	; (414924 <lv_img_decoder_open+0x88>)
  4148ba:	4798      	blx	r3
  4148bc:	4604      	mov	r4, r0
    lv_res_t res = LV_RES_INV;
  4148be:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  4148c0:	e00f      	b.n	4148e2 <lv_img_decoder_open+0x46>
        size_t fnlen = strlen(src);
  4148c2:	4638      	mov	r0, r7
  4148c4:	4b18      	ldr	r3, [pc, #96]	; (414928 <lv_img_decoder_open+0x8c>)
  4148c6:	4798      	blx	r3
        dsc->src = lv_mem_alloc(fnlen + 1);
  4148c8:	3001      	adds	r0, #1
  4148ca:	4b18      	ldr	r3, [pc, #96]	; (41492c <lv_img_decoder_open+0x90>)
  4148cc:	4798      	blx	r3
  4148ce:	6070      	str	r0, [r6, #4]
        strcpy((char *)dsc->src, src);
  4148d0:	4639      	mov	r1, r7
  4148d2:	4b17      	ldr	r3, [pc, #92]	; (414930 <lv_img_decoder_open+0x94>)
  4148d4:	4798      	blx	r3
  4148d6:	e7ee      	b.n	4148b6 <lv_img_decoder_open+0x1a>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  4148d8:	4621      	mov	r1, r4
  4148da:	4811      	ldr	r0, [pc, #68]	; (414920 <lv_img_decoder_open+0x84>)
  4148dc:	4b15      	ldr	r3, [pc, #84]	; (414934 <lv_img_decoder_open+0x98>)
  4148de:	4798      	blx	r3
  4148e0:	4604      	mov	r4, r0
  4148e2:	b1c4      	cbz	r4, 414916 <lv_img_decoder_open+0x7a>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
  4148e4:	6823      	ldr	r3, [r4, #0]
  4148e6:	2b00      	cmp	r3, #0
  4148e8:	d0f6      	beq.n	4148d8 <lv_img_decoder_open+0x3c>
  4148ea:	6862      	ldr	r2, [r4, #4]
  4148ec:	2a00      	cmp	r2, #0
  4148ee:	d0f3      	beq.n	4148d8 <lv_img_decoder_open+0x3c>
        res = d->info_cb(d, src, &dsc->header);
  4148f0:	f106 020c 	add.w	r2, r6, #12
  4148f4:	4639      	mov	r1, r7
  4148f6:	4620      	mov	r0, r4
  4148f8:	4798      	blx	r3
  4148fa:	4605      	mov	r5, r0
        if(res != LV_RES_OK) continue;
  4148fc:	2801      	cmp	r0, #1
  4148fe:	d1eb      	bne.n	4148d8 <lv_img_decoder_open+0x3c>
        dsc->error_msg = NULL;
  414900:	2300      	movs	r3, #0
  414902:	61b3      	str	r3, [r6, #24]
        dsc->img_data  = NULL;
  414904:	6133      	str	r3, [r6, #16]
        dsc->decoder   = d;
  414906:	6034      	str	r4, [r6, #0]
        res = d->open_cb(d, dsc);
  414908:	6863      	ldr	r3, [r4, #4]
  41490a:	4631      	mov	r1, r6
  41490c:	4620      	mov	r0, r4
  41490e:	4798      	blx	r3
  414910:	4605      	mov	r5, r0
        if(res == LV_RES_OK) break;
  414912:	2801      	cmp	r0, #1
  414914:	d1e0      	bne.n	4148d8 <lv_img_decoder_open+0x3c>
}
  414916:	4628      	mov	r0, r5
  414918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41491a:	bf00      	nop
  41491c:	0040e071 	.word	0x0040e071
  414920:	2043a270 	.word	0x2043a270
  414924:	004170b9 	.word	0x004170b9
  414928:	00428dc1 	.word	0x00428dc1
  41492c:	004174ed 	.word	0x004174ed
  414930:	00428cdd 	.word	0x00428cdd
  414934:	004170cd 	.word	0x004170cd

00414938 <lv_img_decoder_read_line>:
{
  414938:	b570      	push	{r4, r5, r6, lr}
  41493a:	b082      	sub	sp, #8
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
  41493c:	6806      	ldr	r6, [r0, #0]
  41493e:	68b4      	ldr	r4, [r6, #8]
  414940:	b154      	cbz	r4, 414958 <lv_img_decoder_read_line+0x20>
  414942:	461d      	mov	r5, r3
  414944:	4613      	mov	r3, r2
  414946:	460a      	mov	r2, r1
  414948:	4601      	mov	r1, r0
  41494a:	9806      	ldr	r0, [sp, #24]
  41494c:	9001      	str	r0, [sp, #4]
  41494e:	9500      	str	r5, [sp, #0]
  414950:	4630      	mov	r0, r6
  414952:	47a0      	blx	r4
}
  414954:	b002      	add	sp, #8
  414956:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
  414958:	2000      	movs	r0, #0
  41495a:	e7fb      	b.n	414954 <lv_img_decoder_read_line+0x1c>

0041495c <lv_img_decoder_close>:
    if(dsc->decoder) {
  41495c:	6803      	ldr	r3, [r0, #0]
  41495e:	b183      	cbz	r3, 414982 <lv_img_decoder_close+0x26>
{
  414960:	b510      	push	{r4, lr}
  414962:	4604      	mov	r4, r0
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
  414964:	68da      	ldr	r2, [r3, #12]
  414966:	b112      	cbz	r2, 41496e <lv_img_decoder_close+0x12>
  414968:	4601      	mov	r1, r0
  41496a:	4618      	mov	r0, r3
  41496c:	4790      	blx	r2
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  41496e:	7aa3      	ldrb	r3, [r4, #10]
  414970:	2b01      	cmp	r3, #1
  414972:	d000      	beq.n	414976 <lv_img_decoder_close+0x1a>
  414974:	bd10      	pop	{r4, pc}
            lv_mem_free(dsc->src);
  414976:	6860      	ldr	r0, [r4, #4]
  414978:	4b02      	ldr	r3, [pc, #8]	; (414984 <lv_img_decoder_close+0x28>)
  41497a:	4798      	blx	r3
            dsc->src = NULL;
  41497c:	2300      	movs	r3, #0
  41497e:	6063      	str	r3, [r4, #4]
}
  414980:	e7f8      	b.n	414974 <lv_img_decoder_close+0x18>
  414982:	4770      	bx	lr
  414984:	004175b1 	.word	0x004175b1

00414988 <lv_img_decoder_create>:
{
  414988:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
  41498a:	480a      	ldr	r0, [pc, #40]	; (4149b4 <lv_img_decoder_create+0x2c>)
  41498c:	4b0a      	ldr	r3, [pc, #40]	; (4149b8 <lv_img_decoder_create+0x30>)
  41498e:	4798      	blx	r3
  414990:	4604      	mov	r4, r0
    LV_ASSERT_MEM(decoder);
  414992:	4b0a      	ldr	r3, [pc, #40]	; (4149bc <lv_img_decoder_create+0x34>)
  414994:	4798      	blx	r3
  414996:	b130      	cbz	r0, 4149a6 <lv_img_decoder_create+0x1e>
    if(decoder == NULL) return NULL;
  414998:	b11c      	cbz	r4, 4149a2 <lv_img_decoder_create+0x1a>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
  41499a:	2110      	movs	r1, #16
  41499c:	4620      	mov	r0, r4
  41499e:	4b08      	ldr	r3, [pc, #32]	; (4149c0 <lv_img_decoder_create+0x38>)
  4149a0:	4798      	blx	r3
}
  4149a2:	4620      	mov	r0, r4
  4149a4:	bd10      	pop	{r4, pc}
    LV_ASSERT_MEM(decoder);
  4149a6:	4622      	mov	r2, r4
  4149a8:	2300      	movs	r3, #0
  4149aa:	4806      	ldr	r0, [pc, #24]	; (4149c4 <lv_img_decoder_create+0x3c>)
  4149ac:	4906      	ldr	r1, [pc, #24]	; (4149c8 <lv_img_decoder_create+0x40>)
  4149ae:	4788      	blx	r1
  4149b0:	e7fe      	b.n	4149b0 <lv_img_decoder_create+0x28>
  4149b2:	bf00      	nop
  4149b4:	2043a270 	.word	0x2043a270
  4149b8:	00417021 	.word	0x00417021
  4149bc:	00416da9 	.word	0x00416da9
  4149c0:	00417a21 	.word	0x00417a21
  4149c4:	0042e54c 	.word	0x0042e54c
  4149c8:	00416db5 	.word	0x00416db5

004149cc <lv_img_decoder_set_info_cb>:
    decoder->info_cb = info_cb;
  4149cc:	6001      	str	r1, [r0, #0]
  4149ce:	4770      	bx	lr

004149d0 <lv_img_decoder_set_open_cb>:
    decoder->open_cb = open_cb;
  4149d0:	6041      	str	r1, [r0, #4]
  4149d2:	4770      	bx	lr

004149d4 <lv_img_decoder_set_read_line_cb>:
    decoder->read_line_cb = read_line_cb;
  4149d4:	6081      	str	r1, [r0, #8]
  4149d6:	4770      	bx	lr

004149d8 <lv_img_decoder_set_close_cb>:
    decoder->close_cb = close_cb;
  4149d8:	60c1      	str	r1, [r0, #12]
  4149da:	4770      	bx	lr

004149dc <_lv_img_decoder_init>:
{
  4149dc:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
  4149de:	2110      	movs	r1, #16
  4149e0:	4810      	ldr	r0, [pc, #64]	; (414a24 <_lv_img_decoder_init+0x48>)
  4149e2:	4b11      	ldr	r3, [pc, #68]	; (414a28 <_lv_img_decoder_init+0x4c>)
  4149e4:	4798      	blx	r3
    decoder = lv_img_decoder_create();
  4149e6:	4b11      	ldr	r3, [pc, #68]	; (414a2c <_lv_img_decoder_init+0x50>)
  4149e8:	4798      	blx	r3
    if(decoder == NULL) {
  4149ea:	4604      	mov	r4, r0
  4149ec:	b178      	cbz	r0, 414a0e <_lv_img_decoder_init+0x32>
    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
  4149ee:	4910      	ldr	r1, [pc, #64]	; (414a30 <_lv_img_decoder_init+0x54>)
  4149f0:	4b10      	ldr	r3, [pc, #64]	; (414a34 <_lv_img_decoder_init+0x58>)
  4149f2:	4798      	blx	r3
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
  4149f4:	4910      	ldr	r1, [pc, #64]	; (414a38 <_lv_img_decoder_init+0x5c>)
  4149f6:	4620      	mov	r0, r4
  4149f8:	4b10      	ldr	r3, [pc, #64]	; (414a3c <_lv_img_decoder_init+0x60>)
  4149fa:	4798      	blx	r3
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
  4149fc:	4910      	ldr	r1, [pc, #64]	; (414a40 <_lv_img_decoder_init+0x64>)
  4149fe:	4620      	mov	r0, r4
  414a00:	4b10      	ldr	r3, [pc, #64]	; (414a44 <_lv_img_decoder_init+0x68>)
  414a02:	4798      	blx	r3
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
  414a04:	4910      	ldr	r1, [pc, #64]	; (414a48 <_lv_img_decoder_init+0x6c>)
  414a06:	4620      	mov	r0, r4
  414a08:	4b10      	ldr	r3, [pc, #64]	; (414a4c <_lv_img_decoder_init+0x70>)
  414a0a:	4798      	blx	r3
  414a0c:	bd10      	pop	{r4, pc}
        LV_ASSERT_MEM(decoder);
  414a0e:	4b10      	ldr	r3, [pc, #64]	; (414a50 <_lv_img_decoder_init+0x74>)
  414a10:	4798      	blx	r3
  414a12:	2800      	cmp	r0, #0
  414a14:	d1fa      	bne.n	414a0c <_lv_img_decoder_init+0x30>
  414a16:	4622      	mov	r2, r4
  414a18:	2300      	movs	r3, #0
  414a1a:	480e      	ldr	r0, [pc, #56]	; (414a54 <_lv_img_decoder_init+0x78>)
  414a1c:	490e      	ldr	r1, [pc, #56]	; (414a58 <_lv_img_decoder_init+0x7c>)
  414a1e:	4788      	blx	r1
  414a20:	e7fe      	b.n	414a20 <_lv_img_decoder_init+0x44>
  414a22:	bf00      	nop
  414a24:	2043a270 	.word	0x2043a270
  414a28:	0041700f 	.word	0x0041700f
  414a2c:	00414989 	.word	0x00414989
  414a30:	00414069 	.word	0x00414069
  414a34:	004149cd 	.word	0x004149cd
  414a38:	0041416d 	.word	0x0041416d
  414a3c:	004149d1 	.word	0x004149d1
  414a40:	004147d1 	.word	0x004147d1
  414a44:	004149d5 	.word	0x004149d5
  414a48:	00414131 	.word	0x00414131
  414a4c:	004149d9 	.word	0x004149d9
  414a50:	00416da9 	.word	0x00416da9
  414a54:	0042e54c 	.word	0x0042e54c
  414a58:	00416db5 	.word	0x00416db5

00414a5c <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
  414a5c:	b508      	push	{r3, lr}
    return font_p->get_glyph_bitmap(font_p, letter);
  414a5e:	6843      	ldr	r3, [r0, #4]
  414a60:	4798      	blx	r3
}
  414a62:	bd08      	pop	{r3, pc}

00414a64 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
  414a64:	b510      	push	{r4, lr}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
  414a66:	6804      	ldr	r4, [r0, #0]
  414a68:	47a0      	blx	r4
}
  414a6a:	bd10      	pop	{r4, pc}

00414a6c <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
  414a6c:	b510      	push	{r4, lr}
  414a6e:	b084      	sub	sp, #16
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
  414a70:	4613      	mov	r3, r2
  414a72:	460a      	mov	r2, r1
  414a74:	a901      	add	r1, sp, #4
  414a76:	4c04      	ldr	r4, [pc, #16]	; (414a88 <lv_font_get_glyph_width+0x1c>)
  414a78:	47a0      	blx	r4
    if(ret) return g.adv_w;
  414a7a:	b118      	cbz	r0, 414a84 <lv_font_get_glyph_width+0x18>
  414a7c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
  414a80:	b004      	add	sp, #16
  414a82:	bd10      	pop	{r4, pc}
    else return 0;
  414a84:	2000      	movs	r0, #0
  414a86:	e7fb      	b.n	414a80 <lv_font_get_glyph_width+0x14>
  414a88:	00414a65 	.word	0x00414a65

00414a8c <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
  414a8c:	7803      	ldrb	r3, [r0, #0]
  414a8e:	780a      	ldrb	r2, [r1, #0]
  414a90:	4293      	cmp	r3, r2
  414a92:	d001      	beq.n	414a98 <kern_pair_8_compare+0xc>
  414a94:	1a98      	subs	r0, r3, r2
  414a96:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
  414a98:	7840      	ldrb	r0, [r0, #1]
  414a9a:	784b      	ldrb	r3, [r1, #1]
  414a9c:	1ac0      	subs	r0, r0, r3

}
  414a9e:	4770      	bx	lr

00414aa0 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
  414aa0:	8803      	ldrh	r3, [r0, #0]
  414aa2:	880a      	ldrh	r2, [r1, #0]
  414aa4:	4293      	cmp	r3, r2
  414aa6:	d001      	beq.n	414aac <kern_pair_16_compare+0xc>
  414aa8:	1a98      	subs	r0, r3, r2
  414aaa:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
  414aac:	8840      	ldrh	r0, [r0, #2]
  414aae:	884b      	ldrh	r3, [r1, #2]
  414ab0:	1ac0      	subs	r0, r0, r3
}
  414ab2:	4770      	bx	lr

00414ab4 <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
  414ab4:	8800      	ldrh	r0, [r0, #0]
  414ab6:	880b      	ldrh	r3, [r1, #0]
}
  414ab8:	1ac0      	subs	r0, r0, r3
  414aba:	4770      	bx	lr

00414abc <get_glyph_dsc_id>:
    if(letter == '\0') return 0;
  414abc:	460b      	mov	r3, r1
  414abe:	2900      	cmp	r1, #0
  414ac0:	d061      	beq.n	414b86 <get_glyph_dsc_id+0xca>
{
  414ac2:	b5f0      	push	{r4, r5, r6, r7, lr}
  414ac4:	b085      	sub	sp, #20
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  414ac6:	6904      	ldr	r4, [r0, #16]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
  414ac8:	6962      	ldr	r2, [r4, #20]
  414aca:	4291      	cmp	r1, r2
  414acc:	d013      	beq.n	414af6 <get_glyph_dsc_id+0x3a>
  414ace:	2200      	movs	r2, #0
    for(i = 0; i < fdsc->cmap_num; i++) {
  414ad0:	8a61      	ldrh	r1, [r4, #18]
  414ad2:	f3c1 0108 	ubfx	r1, r1, #0, #9
  414ad6:	428a      	cmp	r2, r1
  414ad8:	da51      	bge.n	414b7e <get_glyph_dsc_id+0xc2>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
  414ada:	68a0      	ldr	r0, [r4, #8]
  414adc:	eb02 0582 	add.w	r5, r2, r2, lsl #2
  414ae0:	00a9      	lsls	r1, r5, #2
  414ae2:	460e      	mov	r6, r1
  414ae4:	1847      	adds	r7, r0, r1
  414ae6:	5841      	ldr	r1, [r0, r1]
  414ae8:	1a59      	subs	r1, r3, r1
        if(rcp > fdsc->cmaps[i].range_length) continue;
  414aea:	88b8      	ldrh	r0, [r7, #4]
  414aec:	4281      	cmp	r1, r0
  414aee:	d904      	bls.n	414afa <get_glyph_dsc_id+0x3e>
    for(i = 0; i < fdsc->cmap_num; i++) {
  414af0:	3201      	adds	r2, #1
  414af2:	b292      	uxth	r2, r2
  414af4:	e7ec      	b.n	414ad0 <get_glyph_dsc_id+0x14>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
  414af6:	69a0      	ldr	r0, [r4, #24]
  414af8:	e00a      	b.n	414b10 <get_glyph_dsc_id+0x54>
  414afa:	461d      	mov	r5, r3
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
  414afc:	7cbb      	ldrb	r3, [r7, #18]
  414afe:	2b02      	cmp	r3, #2
  414b00:	d008      	beq.n	414b14 <get_glyph_dsc_id+0x58>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
  414b02:	b953      	cbnz	r3, 414b1a <get_glyph_dsc_id+0x5e>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
  414b04:	68fb      	ldr	r3, [r7, #12]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
  414b06:	88f8      	ldrh	r0, [r7, #6]
  414b08:	5c5b      	ldrb	r3, [r3, r1]
  414b0a:	4418      	add	r0, r3
        fdsc->last_letter = letter;
  414b0c:	6165      	str	r5, [r4, #20]
        fdsc->last_glyph_id = glyph_id;
  414b0e:	61a0      	str	r0, [r4, #24]
}
  414b10:	b005      	add	sp, #20
  414b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
  414b14:	88f8      	ldrh	r0, [r7, #6]
  414b16:	4408      	add	r0, r1
  414b18:	e7f8      	b.n	414b0c <get_glyph_dsc_id+0x50>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
  414b1a:	2b03      	cmp	r3, #3
  414b1c:	d003      	beq.n	414b26 <get_glyph_dsc_id+0x6a>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
  414b1e:	2b01      	cmp	r3, #1
  414b20:	d017      	beq.n	414b52 <get_glyph_dsc_id+0x96>
        uint32_t glyph_id = 0;
  414b22:	2000      	movs	r0, #0
  414b24:	e7f2      	b.n	414b0c <get_glyph_dsc_id+0x50>
            uint16_t key = rcp;
  414b26:	a804      	add	r0, sp, #16
  414b28:	f820 1d02 	strh.w	r1, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
  414b2c:	68b9      	ldr	r1, [r7, #8]
  414b2e:	8a3a      	ldrh	r2, [r7, #16]
  414b30:	4b16      	ldr	r3, [pc, #88]	; (414b8c <get_glyph_dsc_id+0xd0>)
  414b32:	9300      	str	r3, [sp, #0]
  414b34:	2302      	movs	r3, #2
  414b36:	4f16      	ldr	r7, [pc, #88]	; (414b90 <get_glyph_dsc_id+0xd4>)
  414b38:	47b8      	blx	r7
            if(p) {
  414b3a:	4603      	mov	r3, r0
  414b3c:	b138      	cbz	r0, 414b4e <get_glyph_dsc_id+0x92>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
  414b3e:	68a2      	ldr	r2, [r4, #8]
  414b40:	4416      	add	r6, r2
  414b42:	68b0      	ldr	r0, [r6, #8]
  414b44:	1a18      	subs	r0, r3, r0
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
  414b46:	88f3      	ldrh	r3, [r6, #6]
  414b48:	eb03 0060 	add.w	r0, r3, r0, asr #1
  414b4c:	e7de      	b.n	414b0c <get_glyph_dsc_id+0x50>
        uint32_t glyph_id = 0;
  414b4e:	2000      	movs	r0, #0
  414b50:	e7dc      	b.n	414b0c <get_glyph_dsc_id+0x50>
            uint16_t key = rcp;
  414b52:	a804      	add	r0, sp, #16
  414b54:	f820 1d02 	strh.w	r1, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
  414b58:	68b9      	ldr	r1, [r7, #8]
  414b5a:	8a3a      	ldrh	r2, [r7, #16]
  414b5c:	4b0b      	ldr	r3, [pc, #44]	; (414b8c <get_glyph_dsc_id+0xd0>)
  414b5e:	9300      	str	r3, [sp, #0]
  414b60:	2302      	movs	r3, #2
  414b62:	4f0b      	ldr	r7, [pc, #44]	; (414b90 <get_glyph_dsc_id+0xd4>)
  414b64:	47b8      	blx	r7
            if(p) {
  414b66:	b140      	cbz	r0, 414b7a <get_glyph_dsc_id+0xbe>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
  414b68:	68a3      	ldr	r3, [r4, #8]
  414b6a:	441e      	add	r6, r3
  414b6c:	68b3      	ldr	r3, [r6, #8]
  414b6e:	1ac2      	subs	r2, r0, r3
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
  414b70:	68f1      	ldr	r1, [r6, #12]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
  414b72:	88f3      	ldrh	r3, [r6, #6]
  414b74:	5a88      	ldrh	r0, [r1, r2]
  414b76:	4418      	add	r0, r3
  414b78:	e7c8      	b.n	414b0c <get_glyph_dsc_id+0x50>
        uint32_t glyph_id = 0;
  414b7a:	2000      	movs	r0, #0
  414b7c:	e7c6      	b.n	414b0c <get_glyph_dsc_id+0x50>
    fdsc->last_letter = letter;
  414b7e:	6163      	str	r3, [r4, #20]
    fdsc->last_glyph_id = 0;
  414b80:	2000      	movs	r0, #0
  414b82:	61a0      	str	r0, [r4, #24]
    return 0;
  414b84:	e7c4      	b.n	414b10 <get_glyph_dsc_id+0x54>
    if(letter == '\0') return 0;
  414b86:	4608      	mov	r0, r1
  414b88:	4770      	bx	lr
  414b8a:	bf00      	nop
  414b8c:	00414ab5 	.word	0x00414ab5
  414b90:	00418f69 	.word	0x00418f69

00414b94 <get_kern_value>:
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  414b94:	6903      	ldr	r3, [r0, #16]
    if(fdsc->kern_classes == 0) {
  414b96:	7cd8      	ldrb	r0, [r3, #19]
  414b98:	f010 0f20 	tst.w	r0, #32
  414b9c:	d13a      	bne.n	414c14 <get_kern_value+0x80>
{
  414b9e:	b570      	push	{r4, r5, r6, lr}
  414ba0:	b084      	sub	sp, #16
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
  414ba2:	68dc      	ldr	r4, [r3, #12]
        if(kdsc->glyph_ids_size == 0) {
  414ba4:	7ae3      	ldrb	r3, [r4, #11]
  414ba6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
  414baa:	d004      	beq.n	414bb6 <get_kern_value+0x22>
        else if(kdsc->glyph_ids_size == 1) {
  414bac:	2b40      	cmp	r3, #64	; 0x40
  414bae:	d01a      	beq.n	414be6 <get_kern_value+0x52>
    int8_t value = 0;
  414bb0:	2000      	movs	r0, #0
}
  414bb2:	b004      	add	sp, #16
  414bb4:	bd70      	pop	{r4, r5, r6, pc}
            const uint16_t * g_ids = kdsc->glyph_ids;
  414bb6:	6825      	ldr	r5, [r4, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
  414bb8:	0212      	lsls	r2, r2, #8
  414bba:	b292      	uxth	r2, r2
  414bbc:	440a      	add	r2, r1
  414bbe:	a804      	add	r0, sp, #16
  414bc0:	f820 2d04 	strh.w	r2, [r0, #-4]!
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
  414bc4:	68a2      	ldr	r2, [r4, #8]
  414bc6:	4b1d      	ldr	r3, [pc, #116]	; (414c3c <get_kern_value+0xa8>)
  414bc8:	9300      	str	r3, [sp, #0]
  414bca:	2302      	movs	r3, #2
  414bcc:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  414bd0:	4629      	mov	r1, r5
  414bd2:	4e1b      	ldr	r6, [pc, #108]	; (414c40 <get_kern_value+0xac>)
  414bd4:	47b0      	blx	r6
            if(kid_p) {
  414bd6:	b120      	cbz	r0, 414be2 <get_kern_value+0x4e>
                lv_uintptr_t ofs = kid_p - g_ids;
  414bd8:	1b43      	subs	r3, r0, r5
  414bda:	105b      	asrs	r3, r3, #1
                value = kdsc->values[ofs];
  414bdc:	6862      	ldr	r2, [r4, #4]
  414bde:	56d0      	ldrsb	r0, [r2, r3]
  414be0:	e7e7      	b.n	414bb2 <get_kern_value+0x1e>
    int8_t value = 0;
  414be2:	2000      	movs	r0, #0
  414be4:	e7e5      	b.n	414bb2 <get_kern_value+0x1e>
            const uint32_t * g_ids = kdsc->glyph_ids;
  414be6:	6825      	ldr	r5, [r4, #0]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
  414be8:	eb01 4202 	add.w	r2, r1, r2, lsl #16
  414bec:	a804      	add	r0, sp, #16
  414bee:	f840 2d04 	str.w	r2, [r0, #-4]!
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
  414bf2:	68a2      	ldr	r2, [r4, #8]
  414bf4:	4b13      	ldr	r3, [pc, #76]	; (414c44 <get_kern_value+0xb0>)
  414bf6:	9300      	str	r3, [sp, #0]
  414bf8:	2304      	movs	r3, #4
  414bfa:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  414bfe:	4629      	mov	r1, r5
  414c00:	4e0f      	ldr	r6, [pc, #60]	; (414c40 <get_kern_value+0xac>)
  414c02:	47b0      	blx	r6
            if(kid_p) {
  414c04:	b120      	cbz	r0, 414c10 <get_kern_value+0x7c>
                lv_uintptr_t ofs = kid_p - g_ids;
  414c06:	1b43      	subs	r3, r0, r5
  414c08:	109b      	asrs	r3, r3, #2
                value = kdsc->values[ofs];
  414c0a:	6862      	ldr	r2, [r4, #4]
  414c0c:	56d0      	ldrsb	r0, [r2, r3]
  414c0e:	e7d0      	b.n	414bb2 <get_kern_value+0x1e>
    int8_t value = 0;
  414c10:	2000      	movs	r0, #0
  414c12:	e7ce      	b.n	414bb2 <get_kern_value+0x1e>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
  414c14:	68d8      	ldr	r0, [r3, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
  414c16:	6843      	ldr	r3, [r0, #4]
  414c18:	5c5b      	ldrb	r3, [r3, r1]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
  414c1a:	6881      	ldr	r1, [r0, #8]
  414c1c:	5c8a      	ldrb	r2, [r1, r2]
        if(left_class > 0 && right_class > 0) {
  414c1e:	2b00      	cmp	r3, #0
  414c20:	bf18      	it	ne
  414c22:	2a00      	cmpne	r2, #0
  414c24:	d007      	beq.n	414c36 <get_kern_value+0xa2>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
  414c26:	6801      	ldr	r1, [r0, #0]
  414c28:	3b01      	subs	r3, #1
  414c2a:	7b40      	ldrb	r0, [r0, #13]
  414c2c:	3a01      	subs	r2, #1
  414c2e:	fb00 2303 	mla	r3, r0, r3, r2
  414c32:	56c8      	ldrsb	r0, [r1, r3]
  414c34:	4770      	bx	lr
    int8_t value = 0;
  414c36:	2000      	movs	r0, #0
  414c38:	4770      	bx	lr
  414c3a:	bf00      	nop
  414c3c:	00414a8d 	.word	0x00414a8d
  414c40:	00418f69 	.word	0x00418f69
  414c44:	00414aa1 	.word	0x00414aa1

00414c48 <decompress>:
{
  414c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414c4c:	b087      	sub	sp, #28
  414c4e:	460e      	mov	r6, r1
  414c50:	4614      	mov	r4, r2
  414c52:	9301      	str	r3, [sp, #4]
  414c54:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
  414c58:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  414c5c:	9304      	str	r3, [sp, #16]
    if(bpp == 3) wr_size = 4;
  414c5e:	2f03      	cmp	r7, #3
  414c60:	d018      	beq.n	414c94 <decompress+0x4c>
    uint8_t wr_size = bpp;
  414c62:	9702      	str	r7, [sp, #8]
    rle_in = in;
  414c64:	4ba8      	ldr	r3, [pc, #672]	; (414f08 <decompress+0x2c0>)
  414c66:	6018      	str	r0, [r3, #0]
    rle_bpp = bpp;
  414c68:	4ba8      	ldr	r3, [pc, #672]	; (414f0c <decompress+0x2c4>)
  414c6a:	701f      	strb	r7, [r3, #0]
    rle_state = RLE_STATE_SINGLE;
  414c6c:	2300      	movs	r3, #0
  414c6e:	4aa8      	ldr	r2, [pc, #672]	; (414f10 <decompress+0x2c8>)
  414c70:	7013      	strb	r3, [r2, #0]
    rle_rdp = 0;
  414c72:	4aa8      	ldr	r2, [pc, #672]	; (414f14 <decompress+0x2cc>)
  414c74:	6013      	str	r3, [r2, #0]
    rle_prev_v = 0;
  414c76:	4aa8      	ldr	r2, [pc, #672]	; (414f18 <decompress+0x2d0>)
  414c78:	7013      	strb	r3, [r2, #0]
    rle_cnt = 0;
  414c7a:	4aa8      	ldr	r2, [pc, #672]	; (414f1c <decompress+0x2d4>)
  414c7c:	7013      	strb	r3, [r2, #0]
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
  414c7e:	4620      	mov	r0, r4
  414c80:	4ba7      	ldr	r3, [pc, #668]	; (414f20 <decompress+0x2d8>)
  414c82:	4798      	blx	r3
  414c84:	4605      	mov	r5, r0
    if(prefilter) {
  414c86:	9b04      	ldr	r3, [sp, #16]
  414c88:	b93b      	cbnz	r3, 414c9a <decompress+0x52>
    uint8_t * line_buf2 = NULL;
  414c8a:	2300      	movs	r3, #0
  414c8c:	9303      	str	r3, [sp, #12]
    for(i = 0; i < w; i++) {
  414c8e:	2000      	movs	r0, #0
  414c90:	46a6      	mov	lr, r4
  414c92:	e03a      	b.n	414d0a <decompress+0xc2>
    if(bpp == 3) wr_size = 4;
  414c94:	2304      	movs	r3, #4
  414c96:	9302      	str	r3, [sp, #8]
  414c98:	e7e4      	b.n	414c64 <decompress+0x1c>
        line_buf2 = _lv_mem_buf_get(w);
  414c9a:	4620      	mov	r0, r4
  414c9c:	4ba0      	ldr	r3, [pc, #640]	; (414f20 <decompress+0x2d8>)
  414c9e:	4798      	blx	r3
  414ca0:	9003      	str	r0, [sp, #12]
  414ca2:	e7f4      	b.n	414c8e <decompress+0x46>
            bit_mask = 0x1;
  414ca4:	f04f 0801 	mov.w	r8, #1
  414ca8:	e011      	b.n	414cce <decompress+0x86>
            bit_mask = 0x7;
  414caa:	f04f 0807 	mov.w	r8, #7
  414cae:	e00e      	b.n	414cce <decompress+0x86>
            bit_mask = 0xF;
  414cb0:	f04f 080f 	mov.w	r8, #15
  414cb4:	e00b      	b.n	414cce <decompress+0x86>
            bit_mask = 0xFF;
  414cb6:	f04f 08ff 	mov.w	r8, #255	; 0xff
  414cba:	e008      	b.n	414cce <decompress+0x86>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414cbc:	2301      	movs	r3, #1
  414cbe:	4093      	lsls	r3, r2
  414cc0:	b2db      	uxtb	r3, r3
  414cc2:	3b01      	subs	r3, #1
  414cc4:	fa5f f883 	uxtb.w	r8, r3
  414cc8:	e001      	b.n	414cce <decompress+0x86>
            bit_mask = 0x3;
  414cca:	f04f 0803 	mov.w	r8, #3
    uint32_t byte_pos = bit_pos >> 3;
  414cce:	08e3      	lsrs	r3, r4, #3
    bit_pos = bit_pos & 0x7;
  414cd0:	f004 0107 	and.w	r1, r4, #7
    if(bit_pos + len >= 8) {
  414cd4:	eb01 0902 	add.w	r9, r1, r2
  414cd8:	f1b9 0f07 	cmp.w	r9, #7
  414cdc:	d83c      	bhi.n	414d58 <decompress+0x110>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414cde:	f81a 3003 	ldrb.w	r3, [sl, r3]
  414ce2:	4249      	negs	r1, r1
  414ce4:	1a89      	subs	r1, r1, r2
  414ce6:	3108      	adds	r1, #8
  414ce8:	410b      	asrs	r3, r1
  414cea:	ea03 0308 	and.w	r3, r3, r8
        if(rle_rdp != 0 && rle_prev_v == ret) {
  414cee:	b11c      	cbz	r4, 414cf8 <decompress+0xb0>
  414cf0:	4989      	ldr	r1, [pc, #548]	; (414f18 <decompress+0x2d0>)
  414cf2:	7809      	ldrb	r1, [r1, #0]
  414cf4:	4299      	cmp	r1, r3
  414cf6:	d03d      	beq.n	414d74 <decompress+0x12c>
        rle_prev_v = ret;
  414cf8:	4987      	ldr	r1, [pc, #540]	; (414f18 <decompress+0x2d0>)
  414cfa:	700b      	strb	r3, [r1, #0]
        rle_rdp += rle_bpp;
  414cfc:	4422      	add	r2, r4
  414cfe:	4985      	ldr	r1, [pc, #532]	; (414f14 <decompress+0x2cc>)
  414d00:	600a      	str	r2, [r1, #0]
        out[i] = rle_next();
  414d02:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  414d06:	3001      	adds	r0, #1
  414d08:	b200      	sxth	r0, r0
  414d0a:	4586      	cmp	lr, r0
  414d0c:	f340 8188 	ble.w	415020 <decompress+0x3d8>
        out[i] = rle_next();
  414d10:	eb05 0c00 	add.w	ip, r5, r0
    if(rle_state == RLE_STATE_SINGLE) {
  414d14:	4b7e      	ldr	r3, [pc, #504]	; (414f10 <decompress+0x2c8>)
  414d16:	781b      	ldrb	r3, [r3, #0]
  414d18:	2b00      	cmp	r3, #0
  414d1a:	d136      	bne.n	414d8a <decompress+0x142>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  414d1c:	4b7a      	ldr	r3, [pc, #488]	; (414f08 <decompress+0x2c0>)
  414d1e:	f8d3 a000 	ldr.w	sl, [r3]
  414d22:	4b7c      	ldr	r3, [pc, #496]	; (414f14 <decompress+0x2cc>)
  414d24:	681c      	ldr	r4, [r3, #0]
  414d26:	4b79      	ldr	r3, [pc, #484]	; (414f0c <decompress+0x2c4>)
  414d28:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  414d2a:	1e51      	subs	r1, r2, #1
  414d2c:	2907      	cmp	r1, #7
  414d2e:	d8c5      	bhi.n	414cbc <decompress+0x74>
  414d30:	a301      	add	r3, pc, #4	; (adr r3, 414d38 <decompress+0xf0>)
  414d32:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
  414d36:	bf00      	nop
  414d38:	00414ca5 	.word	0x00414ca5
  414d3c:	00414ccb 	.word	0x00414ccb
  414d40:	00414cab 	.word	0x00414cab
  414d44:	00414cb1 	.word	0x00414cb1
  414d48:	00414cbd 	.word	0x00414cbd
  414d4c:	00414cbd 	.word	0x00414cbd
  414d50:	00414cbd 	.word	0x00414cbd
  414d54:	00414cb7 	.word	0x00414cb7
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414d58:	f81a 9003 	ldrb.w	r9, [sl, r3]
  414d5c:	4453      	add	r3, sl
  414d5e:	785b      	ldrb	r3, [r3, #1]
  414d60:	eb03 2309 	add.w	r3, r3, r9, lsl #8
  414d64:	b29b      	uxth	r3, r3
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414d66:	4249      	negs	r1, r1
  414d68:	1a89      	subs	r1, r1, r2
  414d6a:	3110      	adds	r1, #16
  414d6c:	410b      	asrs	r3, r1
  414d6e:	ea03 0308 	and.w	r3, r3, r8
  414d72:	e7bc      	b.n	414cee <decompress+0xa6>
            rle_cnt = 0;
  414d74:	f04f 0800 	mov.w	r8, #0
  414d78:	4968      	ldr	r1, [pc, #416]	; (414f1c <decompress+0x2d4>)
  414d7a:	f881 8000 	strb.w	r8, [r1]
            rle_state = RLE_STATE_REPEATE;
  414d7e:	f04f 0801 	mov.w	r8, #1
  414d82:	4963      	ldr	r1, [pc, #396]	; (414f10 <decompress+0x2c8>)
  414d84:	f881 8000 	strb.w	r8, [r1]
  414d88:	e7b6      	b.n	414cf8 <decompress+0xb0>
    else if(rle_state == RLE_STATE_REPEATE) {
  414d8a:	2b01      	cmp	r3, #1
  414d8c:	d004      	beq.n	414d98 <decompress+0x150>
    else if(rle_state == RLE_STATE_COUNTER) {
  414d8e:	2b02      	cmp	r3, #2
  414d90:	f000 80f3 	beq.w	414f7a <decompress+0x332>
    uint8_t ret = 0;
  414d94:	2300      	movs	r3, #0
  414d96:	e7b4      	b.n	414d02 <decompress+0xba>
        v = get_bits(rle_in, rle_rdp, 1);
  414d98:	4b5b      	ldr	r3, [pc, #364]	; (414f08 <decompress+0x2c0>)
  414d9a:	f8d3 8000 	ldr.w	r8, [r3]
  414d9e:	4b5d      	ldr	r3, [pc, #372]	; (414f14 <decompress+0x2cc>)
  414da0:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  414da2:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  414da4:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  414da8:	1c5c      	adds	r4, r3, #1
  414daa:	2c07      	cmp	r4, #7
  414dac:	d81d      	bhi.n	414dea <decompress+0x1a2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414dae:	f818 1001 	ldrb.w	r1, [r8, r1]
  414db2:	f1c3 0307 	rsb	r3, r3, #7
  414db6:	fa41 f303 	asr.w	r3, r1, r3
  414dba:	f003 0101 	and.w	r1, r3, #1
        rle_cnt++;
  414dbe:	4b57      	ldr	r3, [pc, #348]	; (414f1c <decompress+0x2d4>)
  414dc0:	781c      	ldrb	r4, [r3, #0]
  414dc2:	3401      	adds	r4, #1
  414dc4:	b2e4      	uxtb	r4, r4
  414dc6:	701c      	strb	r4, [r3, #0]
        rle_rdp += 1;
  414dc8:	3201      	adds	r2, #1
  414dca:	4b52      	ldr	r3, [pc, #328]	; (414f14 <decompress+0x2cc>)
  414dcc:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  414dce:	2901      	cmp	r1, #1
  414dd0:	d018      	beq.n	414e04 <decompress+0x1bc>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  414dd2:	4b4e      	ldr	r3, [pc, #312]	; (414f0c <decompress+0x2c4>)
  414dd4:	781c      	ldrb	r4, [r3, #0]
    switch(len) {
  414dd6:	1e63      	subs	r3, r4, #1
  414dd8:	2b07      	cmp	r3, #7
  414dda:	f200 808e 	bhi.w	414efa <decompress+0x2b2>
  414dde:	e8df f003 	tbb	[pc, r3]
  414de2:	a184      	.short	0xa184
  414de4:	8c8c8886 	.word	0x8c8c8886
  414de8:	8a8c      	.short	0x8a8c
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414dea:	f818 4001 	ldrb.w	r4, [r8, r1]
  414dee:	4441      	add	r1, r8
  414df0:	7849      	ldrb	r1, [r1, #1]
  414df2:	eb01 2104 	add.w	r1, r1, r4, lsl #8
  414df6:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414df8:	f1c3 030f 	rsb	r3, r3, #15
  414dfc:	4119      	asrs	r1, r3
  414dfe:	f001 0101 	and.w	r1, r1, #1
  414e02:	e7dc      	b.n	414dbe <decompress+0x176>
            ret = rle_prev_v;
  414e04:	4b44      	ldr	r3, [pc, #272]	; (414f18 <decompress+0x2d0>)
  414e06:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  414e08:	2c0b      	cmp	r4, #11
  414e0a:	f47f af7a 	bne.w	414d02 <decompress+0xba>
    uint32_t byte_pos = bit_pos >> 3;
  414e0e:	08d4      	lsrs	r4, r2, #3
    bit_pos = bit_pos & 0x7;
  414e10:	f002 0907 	and.w	r9, r2, #7
    if(bit_pos + len >= 8) {
  414e14:	f109 0a06 	add.w	sl, r9, #6
  414e18:	f1ba 0f07 	cmp.w	sl, #7
  414e1c:	d815      	bhi.n	414e4a <decompress+0x202>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414e1e:	f818 4004 	ldrb.w	r4, [r8, r4]
  414e22:	f1c9 0902 	rsb	r9, r9, #2
  414e26:	fa44 f409 	asr.w	r4, r4, r9
  414e2a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  414e2e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 414f1c <decompress+0x2d4>
  414e32:	f889 4000 	strb.w	r4, [r9]
                rle_rdp += 6;
  414e36:	3206      	adds	r2, #6
  414e38:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 414f14 <decompress+0x2cc>
  414e3c:	f8c9 2000 	str.w	r2, [r9]
                if(rle_cnt != 0) {
  414e40:	b18c      	cbz	r4, 414e66 <decompress+0x21e>
                    rle_state = RLE_STATE_COUNTER;
  414e42:	2102      	movs	r1, #2
  414e44:	4a32      	ldr	r2, [pc, #200]	; (414f10 <decompress+0x2c8>)
  414e46:	7011      	strb	r1, [r2, #0]
  414e48:	e75b      	b.n	414d02 <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414e4a:	f818 a004 	ldrb.w	sl, [r8, r4]
  414e4e:	4444      	add	r4, r8
  414e50:	7864      	ldrb	r4, [r4, #1]
  414e52:	eb04 240a 	add.w	r4, r4, sl, lsl #8
  414e56:	b2a4      	uxth	r4, r4
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414e58:	f1c9 090a 	rsb	r9, r9, #10
  414e5c:	fa44 f409 	asr.w	r4, r4, r9
  414e60:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  414e64:	e7e3      	b.n	414e2e <decompress+0x1e6>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  414e66:	4b29      	ldr	r3, [pc, #164]	; (414f0c <decompress+0x2c4>)
  414e68:	781c      	ldrb	r4, [r3, #0]
    switch(len) {
  414e6a:	1e63      	subs	r3, r4, #1
  414e6c:	2b07      	cmp	r3, #7
  414e6e:	d824      	bhi.n	414eba <decompress+0x272>
  414e70:	e8df f003 	tbb	[pc, r3]
  414e74:	1f042905 	.word	0x1f042905
  414e78:	21232323 	.word	0x21232323
            bit_mask = 0x7;
  414e7c:	2107      	movs	r1, #7
    uint32_t byte_pos = bit_pos >> 3;
  414e7e:	ea4f 09d2 	mov.w	r9, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  414e82:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  414e86:	eb03 0a04 	add.w	sl, r3, r4
  414e8a:	f1ba 0f07 	cmp.w	sl, #7
  414e8e:	d81c      	bhi.n	414eca <decompress+0x282>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414e90:	f818 8009 	ldrb.w	r8, [r8, r9]
  414e94:	425b      	negs	r3, r3
  414e96:	1b1b      	subs	r3, r3, r4
  414e98:	3308      	adds	r3, #8
  414e9a:	fa48 f303 	asr.w	r3, r8, r3
  414e9e:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  414ea0:	491d      	ldr	r1, [pc, #116]	; (414f18 <decompress+0x2d0>)
  414ea2:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  414ea4:	4422      	add	r2, r4
  414ea6:	491b      	ldr	r1, [pc, #108]	; (414f14 <decompress+0x2cc>)
  414ea8:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  414eaa:	2100      	movs	r1, #0
  414eac:	4a18      	ldr	r2, [pc, #96]	; (414f10 <decompress+0x2c8>)
  414eae:	7011      	strb	r1, [r2, #0]
  414eb0:	e727      	b.n	414d02 <decompress+0xba>
            bit_mask = 0xF;
  414eb2:	210f      	movs	r1, #15
  414eb4:	e7e3      	b.n	414e7e <decompress+0x236>
            bit_mask = 0xFF;
  414eb6:	21ff      	movs	r1, #255	; 0xff
  414eb8:	e7e1      	b.n	414e7e <decompress+0x236>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414eba:	2101      	movs	r1, #1
  414ebc:	40a1      	lsls	r1, r4
  414ebe:	b2c9      	uxtb	r1, r1
  414ec0:	3901      	subs	r1, #1
  414ec2:	b2c9      	uxtb	r1, r1
  414ec4:	e7db      	b.n	414e7e <decompress+0x236>
            bit_mask = 0x3;
  414ec6:	2103      	movs	r1, #3
  414ec8:	e7d9      	b.n	414e7e <decompress+0x236>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414eca:	f818 a009 	ldrb.w	sl, [r8, r9]
  414ece:	44c8      	add	r8, r9
  414ed0:	f898 8001 	ldrb.w	r8, [r8, #1]
  414ed4:	eb08 280a 	add.w	r8, r8, sl, lsl #8
  414ed8:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414edc:	425b      	negs	r3, r3
  414ede:	1b1b      	subs	r3, r3, r4
  414ee0:	3310      	adds	r3, #16
  414ee2:	fa48 f303 	asr.w	r3, r8, r3
  414ee6:	400b      	ands	r3, r1
  414ee8:	e7da      	b.n	414ea0 <decompress+0x258>
            bit_mask = 0x1;
  414eea:	2301      	movs	r3, #1
  414eec:	e01b      	b.n	414f26 <decompress+0x2de>
            bit_mask = 0x7;
  414eee:	2307      	movs	r3, #7
  414ef0:	e019      	b.n	414f26 <decompress+0x2de>
            bit_mask = 0xF;
  414ef2:	230f      	movs	r3, #15
  414ef4:	e017      	b.n	414f26 <decompress+0x2de>
            bit_mask = 0xFF;
  414ef6:	23ff      	movs	r3, #255	; 0xff
  414ef8:	e015      	b.n	414f26 <decompress+0x2de>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414efa:	2301      	movs	r3, #1
  414efc:	40a3      	lsls	r3, r4
  414efe:	b2db      	uxtb	r3, r3
  414f00:	3b01      	subs	r3, #1
  414f02:	b2db      	uxtb	r3, r3
  414f04:	e00f      	b.n	414f26 <decompress+0x2de>
  414f06:	bf00      	nop
  414f08:	2040c798 	.word	0x2040c798
  414f0c:	2040c794 	.word	0x2040c794
  414f10:	2040c7a4 	.word	0x2040c7a4
  414f14:	2040c7a0 	.word	0x2040c7a0
  414f18:	2040c79c 	.word	0x2040c79c
  414f1c:	2040c795 	.word	0x2040c795
  414f20:	00417895 	.word	0x00417895
            bit_mask = 0x3;
  414f24:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  414f26:	ea4f 09d2 	mov.w	r9, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  414f2a:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  414f2e:	eb01 0a04 	add.w	sl, r1, r4
  414f32:	f1ba 0f07 	cmp.w	sl, #7
  414f36:	d810      	bhi.n	414f5a <decompress+0x312>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414f38:	f818 8009 	ldrb.w	r8, [r8, r9]
  414f3c:	4249      	negs	r1, r1
  414f3e:	1b09      	subs	r1, r1, r4
  414f40:	3108      	adds	r1, #8
  414f42:	fa48 f101 	asr.w	r1, r8, r1
  414f46:	400b      	ands	r3, r1
            rle_prev_v = ret;
  414f48:	49b4      	ldr	r1, [pc, #720]	; (41521c <decompress+0x5d4>)
  414f4a:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  414f4c:	4422      	add	r2, r4
  414f4e:	49b4      	ldr	r1, [pc, #720]	; (415220 <decompress+0x5d8>)
  414f50:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  414f52:	2100      	movs	r1, #0
  414f54:	4ab3      	ldr	r2, [pc, #716]	; (415224 <decompress+0x5dc>)
  414f56:	7011      	strb	r1, [r2, #0]
  414f58:	e6d3      	b.n	414d02 <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414f5a:	f818 a009 	ldrb.w	sl, [r8, r9]
  414f5e:	44c8      	add	r8, r9
  414f60:	f898 8001 	ldrb.w	r8, [r8, #1]
  414f64:	eb08 280a 	add.w	r8, r8, sl, lsl #8
  414f68:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414f6c:	4249      	negs	r1, r1
  414f6e:	1b09      	subs	r1, r1, r4
  414f70:	3110      	adds	r1, #16
  414f72:	fa48 f101 	asr.w	r1, r8, r1
  414f76:	400b      	ands	r3, r1
  414f78:	e7e6      	b.n	414f48 <decompress+0x300>
        ret = rle_prev_v;
  414f7a:	4ba8      	ldr	r3, [pc, #672]	; (41521c <decompress+0x5d4>)
  414f7c:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  414f7e:	49aa      	ldr	r1, [pc, #680]	; (415228 <decompress+0x5e0>)
  414f80:	780a      	ldrb	r2, [r1, #0]
  414f82:	3a01      	subs	r2, #1
  414f84:	b2d2      	uxtb	r2, r2
  414f86:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  414f88:	2a00      	cmp	r2, #0
  414f8a:	f47f aeba 	bne.w	414d02 <decompress+0xba>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  414f8e:	4ba7      	ldr	r3, [pc, #668]	; (41522c <decompress+0x5e4>)
  414f90:	f8d3 a000 	ldr.w	sl, [r3]
  414f94:	4ba2      	ldr	r3, [pc, #648]	; (415220 <decompress+0x5d8>)
  414f96:	681c      	ldr	r4, [r3, #0]
  414f98:	4ba5      	ldr	r3, [pc, #660]	; (415230 <decompress+0x5e8>)
  414f9a:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  414f9c:	1e53      	subs	r3, r2, #1
  414f9e:	2b07      	cmp	r3, #7
  414fa0:	d80d      	bhi.n	414fbe <decompress+0x376>
  414fa2:	e8df f003 	tbb	[pc, r3]
  414fa6:	1204      	.short	0x1204
  414fa8:	0c0c0806 	.word	0x0c0c0806
  414fac:	0a0c      	.short	0x0a0c
            bit_mask = 0x1;
  414fae:	2301      	movs	r3, #1
  414fb0:	e00c      	b.n	414fcc <decompress+0x384>
            bit_mask = 0x7;
  414fb2:	2307      	movs	r3, #7
  414fb4:	e00a      	b.n	414fcc <decompress+0x384>
            bit_mask = 0xF;
  414fb6:	230f      	movs	r3, #15
  414fb8:	e008      	b.n	414fcc <decompress+0x384>
            bit_mask = 0xFF;
  414fba:	23ff      	movs	r3, #255	; 0xff
  414fbc:	e006      	b.n	414fcc <decompress+0x384>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414fbe:	2301      	movs	r3, #1
  414fc0:	4093      	lsls	r3, r2
  414fc2:	b2db      	uxtb	r3, r3
  414fc4:	3b01      	subs	r3, #1
  414fc6:	b2db      	uxtb	r3, r3
  414fc8:	e000      	b.n	414fcc <decompress+0x384>
            bit_mask = 0x3;
  414fca:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  414fcc:	ea4f 08d4 	mov.w	r8, r4, lsr #3
    bit_pos = bit_pos & 0x7;
  414fd0:	f004 0107 	and.w	r1, r4, #7
    if(bit_pos + len >= 8) {
  414fd4:	eb01 0902 	add.w	r9, r1, r2
  414fd8:	f1b9 0f07 	cmp.w	r9, #7
  414fdc:	d810      	bhi.n	415000 <decompress+0x3b8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414fde:	f81a 8008 	ldrb.w	r8, [sl, r8]
  414fe2:	4249      	negs	r1, r1
  414fe4:	1a89      	subs	r1, r1, r2
  414fe6:	3108      	adds	r1, #8
  414fe8:	fa48 f101 	asr.w	r1, r8, r1
  414fec:	400b      	ands	r3, r1
            rle_prev_v = ret;
  414fee:	498b      	ldr	r1, [pc, #556]	; (41521c <decompress+0x5d4>)
  414ff0:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  414ff2:	4422      	add	r2, r4
  414ff4:	498a      	ldr	r1, [pc, #552]	; (415220 <decompress+0x5d8>)
  414ff6:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  414ff8:	2100      	movs	r1, #0
  414ffa:	4a8a      	ldr	r2, [pc, #552]	; (415224 <decompress+0x5dc>)
  414ffc:	7011      	strb	r1, [r2, #0]
  414ffe:	e680      	b.n	414d02 <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  415000:	f81a 9008 	ldrb.w	r9, [sl, r8]
  415004:	44d0      	add	r8, sl
  415006:	f898 8001 	ldrb.w	r8, [r8, #1]
  41500a:	eb08 2809 	add.w	r8, r8, r9, lsl #8
  41500e:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  415012:	4249      	negs	r1, r1
  415014:	1a89      	subs	r1, r1, r2
  415016:	3110      	adds	r1, #16
  415018:	fa48 f101 	asr.w	r1, r8, r1
  41501c:	400b      	ands	r3, r1
  41501e:	e7e6      	b.n	414fee <decompress+0x3a6>
  415020:	4674      	mov	r4, lr
    for(i = 0; i < w; i++) {
  415022:	f04f 0c00 	mov.w	ip, #0
  415026:	4660      	mov	r0, ip
  415028:	f8dd e008 	ldr.w	lr, [sp, #8]
  41502c:	e048      	b.n	4150c0 <decompress+0x478>
        switch(val) {
  41502e:	2907      	cmp	r1, #7
  415030:	d805      	bhi.n	41503e <decompress+0x3f6>
  415032:	e8df f001 	tbb	[pc, r1]
  415036:	0723      	.short	0x0723
  415038:	17130f0b 	.word	0x17130f0b
  41503c:	1f1b      	.short	0x1f1b
        len = 4;
  41503e:	f04f 0804 	mov.w	r8, #4
  415042:	e01e      	b.n	415082 <decompress+0x43a>
  415044:	f04f 0804 	mov.w	r8, #4
                val = 2;
  415048:	2102      	movs	r1, #2
  41504a:	e01a      	b.n	415082 <decompress+0x43a>
        len = 4;
  41504c:	f04f 0804 	mov.w	r8, #4
                val = 4;
  415050:	4641      	mov	r1, r8
  415052:	e016      	b.n	415082 <decompress+0x43a>
        len = 4;
  415054:	f04f 0804 	mov.w	r8, #4
                val = 6;
  415058:	2106      	movs	r1, #6
  41505a:	e012      	b.n	415082 <decompress+0x43a>
        len = 4;
  41505c:	f04f 0804 	mov.w	r8, #4
                val = 9;
  415060:	2109      	movs	r1, #9
  415062:	e00e      	b.n	415082 <decompress+0x43a>
        len = 4;
  415064:	f04f 0804 	mov.w	r8, #4
                val = 11;
  415068:	210b      	movs	r1, #11
  41506a:	e00a      	b.n	415082 <decompress+0x43a>
        len = 4;
  41506c:	f04f 0804 	mov.w	r8, #4
                val = 13;
  415070:	210d      	movs	r1, #13
  415072:	e006      	b.n	415082 <decompress+0x43a>
        len = 4;
  415074:	f04f 0804 	mov.w	r8, #4
                val = 15;
  415078:	210f      	movs	r1, #15
  41507a:	e002      	b.n	415082 <decompress+0x43a>
        len = 4;
  41507c:	f04f 0804 	mov.w	r8, #4
                val = 0;
  415080:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  415082:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  415086:	4252      	negs	r2, r2
  415088:	eba2 0208 	sub.w	r2, r2, r8
  41508c:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  41508e:	2301      	movs	r3, #1
  415090:	fa03 f308 	lsl.w	r3, r3, r8
  415094:	b2db      	uxtb	r3, r3
  415096:	3b01      	subs	r3, #1
  415098:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  41509a:	f3c0 08cf 	ubfx	r8, r0, #3, #16
  41509e:	43db      	mvns	r3, r3
  4150a0:	4093      	lsls	r3, r2
  4150a2:	f816 9008 	ldrb.w	r9, [r6, r8]
  4150a6:	ea09 0303 	and.w	r3, r9, r3
  4150aa:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  4150ac:	fa01 f202 	lsl.w	r2, r1, r2
  4150b0:	431a      	orrs	r2, r3
  4150b2:	f806 2008 	strb.w	r2, [r6, r8]
        wrp += wr_size;
  4150b6:	4470      	add	r0, lr
    for(x = 0; x < w; x++) {
  4150b8:	f10c 0c01 	add.w	ip, ip, #1
  4150bc:	fa0f fc8c 	sxth.w	ip, ip
  4150c0:	45a4      	cmp	ip, r4
  4150c2:	da05      	bge.n	4150d0 <decompress+0x488>
        bits_write(out, wrp, line_buf1[x], bpp);
  4150c4:	f815 100c 	ldrb.w	r1, [r5, ip]
    if(len == 3) {
  4150c8:	2f03      	cmp	r7, #3
  4150ca:	d0b0      	beq.n	41502e <decompress+0x3e6>
  4150cc:	46b8      	mov	r8, r7
  4150ce:	e7d8      	b.n	415082 <decompress+0x43a>
  4150d0:	2301      	movs	r3, #1
  4150d2:	9300      	str	r3, [sp, #0]
  4150d4:	f000 bc62 	b.w	41599c <decompress+0xd54>
            bit_mask = 0x1;
  4150d8:	2301      	movs	r3, #1
  4150da:	e00c      	b.n	4150f6 <decompress+0x4ae>
            bit_mask = 0x7;
  4150dc:	2307      	movs	r3, #7
  4150de:	e00a      	b.n	4150f6 <decompress+0x4ae>
            bit_mask = 0xF;
  4150e0:	230f      	movs	r3, #15
  4150e2:	e008      	b.n	4150f6 <decompress+0x4ae>
            bit_mask = 0xFF;
  4150e4:	23ff      	movs	r3, #255	; 0xff
  4150e6:	e006      	b.n	4150f6 <decompress+0x4ae>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4150e8:	2301      	movs	r3, #1
  4150ea:	408b      	lsls	r3, r1
  4150ec:	b2db      	uxtb	r3, r3
  4150ee:	3b01      	subs	r3, #1
  4150f0:	b2db      	uxtb	r3, r3
  4150f2:	e000      	b.n	4150f6 <decompress+0x4ae>
            bit_mask = 0x3;
  4150f4:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  4150f6:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    bit_pos = bit_pos & 0x7;
  4150fa:	f000 0207 	and.w	r2, r0, #7
    if(bit_pos + len >= 8) {
  4150fe:	eb02 0b01 	add.w	fp, r2, r1
  415102:	f1bb 0f07 	cmp.w	fp, #7
  415106:	d83d      	bhi.n	415184 <decompress+0x53c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  415108:	f81a 8008 	ldrb.w	r8, [sl, r8]
  41510c:	4252      	negs	r2, r2
  41510e:	1a52      	subs	r2, r2, r1
  415110:	3208      	adds	r2, #8
  415112:	fa48 f202 	asr.w	r2, r8, r2
  415116:	4013      	ands	r3, r2
        if(rle_rdp != 0 && rle_prev_v == ret) {
  415118:	b118      	cbz	r0, 415122 <decompress+0x4da>
  41511a:	4a40      	ldr	r2, [pc, #256]	; (41521c <decompress+0x5d4>)
  41511c:	7812      	ldrb	r2, [r2, #0]
  41511e:	429a      	cmp	r2, r3
  415120:	d041      	beq.n	4151a6 <decompress+0x55e>
        rle_prev_v = ret;
  415122:	4a3e      	ldr	r2, [pc, #248]	; (41521c <decompress+0x5d4>)
  415124:	7013      	strb	r3, [r2, #0]
        rle_rdp += rle_bpp;
  415126:	4401      	add	r1, r0
  415128:	4a3d      	ldr	r2, [pc, #244]	; (415220 <decompress+0x5d8>)
  41512a:	6011      	str	r1, [r2, #0]
        out[i] = rle_next();
  41512c:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  415130:	f10e 0e01 	add.w	lr, lr, #1
  415134:	fa0f fe8e 	sxth.w	lr, lr
  415138:	4574      	cmp	r4, lr
  41513a:	f340 8191 	ble.w	415460 <decompress+0x818>
        out[i] = rle_next();
  41513e:	eb09 0c0e 	add.w	ip, r9, lr
    if(rle_state == RLE_STATE_SINGLE) {
  415142:	4b38      	ldr	r3, [pc, #224]	; (415224 <decompress+0x5dc>)
  415144:	781b      	ldrb	r3, [r3, #0]
  415146:	2b00      	cmp	r3, #0
  415148:	d138      	bne.n	4151bc <decompress+0x574>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  41514a:	4b38      	ldr	r3, [pc, #224]	; (41522c <decompress+0x5e4>)
  41514c:	f8d3 a000 	ldr.w	sl, [r3]
  415150:	4b33      	ldr	r3, [pc, #204]	; (415220 <decompress+0x5d8>)
  415152:	6818      	ldr	r0, [r3, #0]
  415154:	4b36      	ldr	r3, [pc, #216]	; (415230 <decompress+0x5e8>)
  415156:	7819      	ldrb	r1, [r3, #0]
    switch(len) {
  415158:	1e4b      	subs	r3, r1, #1
  41515a:	2b07      	cmp	r3, #7
  41515c:	d8c4      	bhi.n	4150e8 <decompress+0x4a0>
  41515e:	a201      	add	r2, pc, #4	; (adr r2, 415164 <decompress+0x51c>)
  415160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  415164:	004150d9 	.word	0x004150d9
  415168:	004150f5 	.word	0x004150f5
  41516c:	004150dd 	.word	0x004150dd
  415170:	004150e1 	.word	0x004150e1
  415174:	004150e9 	.word	0x004150e9
  415178:	004150e9 	.word	0x004150e9
  41517c:	004150e9 	.word	0x004150e9
  415180:	004150e5 	.word	0x004150e5
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  415184:	f81a b008 	ldrb.w	fp, [sl, r8]
  415188:	44d0      	add	r8, sl
  41518a:	f898 8001 	ldrb.w	r8, [r8, #1]
  41518e:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  415192:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  415196:	4252      	negs	r2, r2
  415198:	1a52      	subs	r2, r2, r1
  41519a:	3210      	adds	r2, #16
  41519c:	fa4b fb02 	asr.w	fp, fp, r2
  4151a0:	ea0b 0303 	and.w	r3, fp, r3
  4151a4:	e7b8      	b.n	415118 <decompress+0x4d0>
            rle_cnt = 0;
  4151a6:	f04f 0800 	mov.w	r8, #0
  4151aa:	4a1f      	ldr	r2, [pc, #124]	; (415228 <decompress+0x5e0>)
  4151ac:	f882 8000 	strb.w	r8, [r2]
            rle_state = RLE_STATE_REPEATE;
  4151b0:	f04f 0801 	mov.w	r8, #1
  4151b4:	4a1b      	ldr	r2, [pc, #108]	; (415224 <decompress+0x5dc>)
  4151b6:	f882 8000 	strb.w	r8, [r2]
  4151ba:	e7b2      	b.n	415122 <decompress+0x4da>
    else if(rle_state == RLE_STATE_REPEATE) {
  4151bc:	2b01      	cmp	r3, #1
  4151be:	d004      	beq.n	4151ca <decompress+0x582>
    else if(rle_state == RLE_STATE_COUNTER) {
  4151c0:	2b02      	cmp	r3, #2
  4151c2:	f000 80f3 	beq.w	4153ac <decompress+0x764>
    uint8_t ret = 0;
  4151c6:	2300      	movs	r3, #0
  4151c8:	e7b0      	b.n	41512c <decompress+0x4e4>
        v = get_bits(rle_in, rle_rdp, 1);
  4151ca:	4b18      	ldr	r3, [pc, #96]	; (41522c <decompress+0x5e4>)
  4151cc:	f8d3 8000 	ldr.w	r8, [r3]
  4151d0:	4b13      	ldr	r3, [pc, #76]	; (415220 <decompress+0x5d8>)
  4151d2:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  4151d4:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  4151d6:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  4151da:	1c58      	adds	r0, r3, #1
  4151dc:	2807      	cmp	r0, #7
  4151de:	d829      	bhi.n	415234 <decompress+0x5ec>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4151e0:	f818 1001 	ldrb.w	r1, [r8, r1]
  4151e4:	f1c3 0307 	rsb	r3, r3, #7
  4151e8:	fa41 f303 	asr.w	r3, r1, r3
  4151ec:	f003 0101 	and.w	r1, r3, #1
        rle_cnt++;
  4151f0:	4b0d      	ldr	r3, [pc, #52]	; (415228 <decompress+0x5e0>)
  4151f2:	7818      	ldrb	r0, [r3, #0]
  4151f4:	3001      	adds	r0, #1
  4151f6:	b2c0      	uxtb	r0, r0
  4151f8:	7018      	strb	r0, [r3, #0]
        rle_rdp += 1;
  4151fa:	3201      	adds	r2, #1
  4151fc:	4b08      	ldr	r3, [pc, #32]	; (415220 <decompress+0x5d8>)
  4151fe:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  415200:	2901      	cmp	r1, #1
  415202:	d024      	beq.n	41524e <decompress+0x606>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  415204:	4b0a      	ldr	r3, [pc, #40]	; (415230 <decompress+0x5e8>)
  415206:	7818      	ldrb	r0, [r3, #0]
    switch(len) {
  415208:	1e43      	subs	r3, r0, #1
  41520a:	2b07      	cmp	r3, #7
  41520c:	f200 809c 	bhi.w	415348 <decompress+0x700>
  415210:	e8df f003 	tbb	[pc, r3]
  415214:	9694a092 	.word	0x9694a092
  415218:	989a9a9a 	.word	0x989a9a9a
  41521c:	2040c79c 	.word	0x2040c79c
  415220:	2040c7a0 	.word	0x2040c7a0
  415224:	2040c7a4 	.word	0x2040c7a4
  415228:	2040c795 	.word	0x2040c795
  41522c:	2040c798 	.word	0x2040c798
  415230:	2040c794 	.word	0x2040c794
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  415234:	f818 0001 	ldrb.w	r0, [r8, r1]
  415238:	4441      	add	r1, r8
  41523a:	7849      	ldrb	r1, [r1, #1]
  41523c:	eb01 2100 	add.w	r1, r1, r0, lsl #8
  415240:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  415242:	f1c3 030f 	rsb	r3, r3, #15
  415246:	4119      	asrs	r1, r3
  415248:	f001 0101 	and.w	r1, r1, #1
  41524c:	e7d0      	b.n	4151f0 <decompress+0x5a8>
            ret = rle_prev_v;
  41524e:	4bb8      	ldr	r3, [pc, #736]	; (415530 <decompress+0x8e8>)
  415250:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  415252:	280b      	cmp	r0, #11
  415254:	f47f af6a 	bne.w	41512c <decompress+0x4e4>
    uint32_t byte_pos = bit_pos >> 3;
  415258:	08d0      	lsrs	r0, r2, #3
    bit_pos = bit_pos & 0x7;
  41525a:	f002 0a07 	and.w	sl, r2, #7
    if(bit_pos + len >= 8) {
  41525e:	f10a 0b06 	add.w	fp, sl, #6
  415262:	f1bb 0f07 	cmp.w	fp, #7
  415266:	d815      	bhi.n	415294 <decompress+0x64c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  415268:	f818 0000 	ldrb.w	r0, [r8, r0]
  41526c:	f1ca 0a02 	rsb	sl, sl, #2
  415270:	fa40 f00a 	asr.w	r0, r0, sl
  415274:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  415278:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 415540 <decompress+0x8f8>
  41527c:	f88a 0000 	strb.w	r0, [sl]
                rle_rdp += 6;
  415280:	3206      	adds	r2, #6
  415282:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 41553c <decompress+0x8f4>
  415286:	f8ca 2000 	str.w	r2, [sl]
                if(rle_cnt != 0) {
  41528a:	b188      	cbz	r0, 4152b0 <decompress+0x668>
                    rle_state = RLE_STATE_COUNTER;
  41528c:	2102      	movs	r1, #2
  41528e:	4aa9      	ldr	r2, [pc, #676]	; (415534 <decompress+0x8ec>)
  415290:	7011      	strb	r1, [r2, #0]
  415292:	e74b      	b.n	41512c <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  415294:	f818 b000 	ldrb.w	fp, [r8, r0]
  415298:	4440      	add	r0, r8
  41529a:	7840      	ldrb	r0, [r0, #1]
  41529c:	eb00 200b 	add.w	r0, r0, fp, lsl #8
  4152a0:	b280      	uxth	r0, r0
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4152a2:	f1ca 0a0a 	rsb	sl, sl, #10
  4152a6:	fa40 f00a 	asr.w	r0, r0, sl
  4152aa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  4152ae:	e7e3      	b.n	415278 <decompress+0x630>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4152b0:	4ba1      	ldr	r3, [pc, #644]	; (415538 <decompress+0x8f0>)
  4152b2:	f893 b000 	ldrb.w	fp, [r3]
    switch(len) {
  4152b6:	f10b 33ff 	add.w	r3, fp, #4294967295
  4152ba:	2b07      	cmp	r3, #7
  4152bc:	d80b      	bhi.n	4152d6 <decompress+0x68e>
  4152be:	e8df f003 	tbb	[pc, r3]
  4152c2:	1112      	.short	0x1112
  4152c4:	0a0a0604 	.word	0x0a0a0604
  4152c8:	080a      	.short	0x080a
            bit_mask = 0x7;
  4152ca:	2107      	movs	r1, #7
  4152cc:	e00b      	b.n	4152e6 <decompress+0x69e>
            bit_mask = 0xF;
  4152ce:	210f      	movs	r1, #15
  4152d0:	e009      	b.n	4152e6 <decompress+0x69e>
            bit_mask = 0xFF;
  4152d2:	21ff      	movs	r1, #255	; 0xff
  4152d4:	e007      	b.n	4152e6 <decompress+0x69e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4152d6:	2101      	movs	r1, #1
  4152d8:	fa01 f10b 	lsl.w	r1, r1, fp
  4152dc:	b2c9      	uxtb	r1, r1
  4152de:	3901      	subs	r1, #1
  4152e0:	b2c9      	uxtb	r1, r1
  4152e2:	e000      	b.n	4152e6 <decompress+0x69e>
            bit_mask = 0x3;
  4152e4:	2103      	movs	r1, #3
    uint32_t byte_pos = bit_pos >> 3;
  4152e6:	08d0      	lsrs	r0, r2, #3
    bit_pos = bit_pos & 0x7;
  4152e8:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  4152ec:	eb03 0a0b 	add.w	sl, r3, fp
  4152f0:	f1ba 0f07 	cmp.w	sl, #7
  4152f4:	d811      	bhi.n	41531a <decompress+0x6d2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4152f6:	f818 0000 	ldrb.w	r0, [r8, r0]
  4152fa:	425b      	negs	r3, r3
  4152fc:	eba3 030b 	sub.w	r3, r3, fp
  415300:	3308      	adds	r3, #8
  415302:	fa40 f303 	asr.w	r3, r0, r3
  415306:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  415308:	4989      	ldr	r1, [pc, #548]	; (415530 <decompress+0x8e8>)
  41530a:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  41530c:	445a      	add	r2, fp
  41530e:	498b      	ldr	r1, [pc, #556]	; (41553c <decompress+0x8f4>)
  415310:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  415312:	2100      	movs	r1, #0
  415314:	4a87      	ldr	r2, [pc, #540]	; (415534 <decompress+0x8ec>)
  415316:	7011      	strb	r1, [r2, #0]
  415318:	e708      	b.n	41512c <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41531a:	f818 a000 	ldrb.w	sl, [r8, r0]
  41531e:	4440      	add	r0, r8
  415320:	7840      	ldrb	r0, [r0, #1]
  415322:	eb00 200a 	add.w	r0, r0, sl, lsl #8
  415326:	b280      	uxth	r0, r0
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  415328:	425b      	negs	r3, r3
  41532a:	eba3 030b 	sub.w	r3, r3, fp
  41532e:	3310      	adds	r3, #16
  415330:	fa40 f303 	asr.w	r3, r0, r3
  415334:	400b      	ands	r3, r1
  415336:	e7e7      	b.n	415308 <decompress+0x6c0>
            bit_mask = 0x1;
  415338:	2301      	movs	r3, #1
  41533a:	e00c      	b.n	415356 <decompress+0x70e>
            bit_mask = 0x7;
  41533c:	2307      	movs	r3, #7
  41533e:	e00a      	b.n	415356 <decompress+0x70e>
            bit_mask = 0xF;
  415340:	230f      	movs	r3, #15
  415342:	e008      	b.n	415356 <decompress+0x70e>
            bit_mask = 0xFF;
  415344:	23ff      	movs	r3, #255	; 0xff
  415346:	e006      	b.n	415356 <decompress+0x70e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  415348:	2301      	movs	r3, #1
  41534a:	4083      	lsls	r3, r0
  41534c:	b2db      	uxtb	r3, r3
  41534e:	3b01      	subs	r3, #1
  415350:	b2db      	uxtb	r3, r3
  415352:	e000      	b.n	415356 <decompress+0x70e>
            bit_mask = 0x3;
  415354:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  415356:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  41535a:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  41535e:	eb01 0b00 	add.w	fp, r1, r0
  415362:	f1bb 0f07 	cmp.w	fp, #7
  415366:	d810      	bhi.n	41538a <decompress+0x742>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  415368:	f818 800a 	ldrb.w	r8, [r8, sl]
  41536c:	4249      	negs	r1, r1
  41536e:	1a09      	subs	r1, r1, r0
  415370:	3108      	adds	r1, #8
  415372:	fa48 f101 	asr.w	r1, r8, r1
  415376:	400b      	ands	r3, r1
            rle_prev_v = ret;
  415378:	496d      	ldr	r1, [pc, #436]	; (415530 <decompress+0x8e8>)
  41537a:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  41537c:	4402      	add	r2, r0
  41537e:	496f      	ldr	r1, [pc, #444]	; (41553c <decompress+0x8f4>)
  415380:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  415382:	2100      	movs	r1, #0
  415384:	4a6b      	ldr	r2, [pc, #428]	; (415534 <decompress+0x8ec>)
  415386:	7011      	strb	r1, [r2, #0]
  415388:	e6d0      	b.n	41512c <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41538a:	f818 b00a 	ldrb.w	fp, [r8, sl]
  41538e:	44d0      	add	r8, sl
  415390:	f898 8001 	ldrb.w	r8, [r8, #1]
  415394:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  415398:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  41539c:	4249      	negs	r1, r1
  41539e:	1a09      	subs	r1, r1, r0
  4153a0:	3110      	adds	r1, #16
  4153a2:	fa4b fb01 	asr.w	fp, fp, r1
  4153a6:	ea0b 0303 	and.w	r3, fp, r3
  4153aa:	e7e5      	b.n	415378 <decompress+0x730>
        ret = rle_prev_v;
  4153ac:	4b60      	ldr	r3, [pc, #384]	; (415530 <decompress+0x8e8>)
  4153ae:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  4153b0:	4963      	ldr	r1, [pc, #396]	; (415540 <decompress+0x8f8>)
  4153b2:	780a      	ldrb	r2, [r1, #0]
  4153b4:	3a01      	subs	r2, #1
  4153b6:	b2d2      	uxtb	r2, r2
  4153b8:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  4153ba:	2a00      	cmp	r2, #0
  4153bc:	f47f aeb6 	bne.w	41512c <decompress+0x4e4>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4153c0:	4b60      	ldr	r3, [pc, #384]	; (415544 <decompress+0x8fc>)
  4153c2:	f8d3 a000 	ldr.w	sl, [r3]
  4153c6:	4b5d      	ldr	r3, [pc, #372]	; (41553c <decompress+0x8f4>)
  4153c8:	6818      	ldr	r0, [r3, #0]
  4153ca:	4b5b      	ldr	r3, [pc, #364]	; (415538 <decompress+0x8f0>)
  4153cc:	7819      	ldrb	r1, [r3, #0]
    switch(len) {
  4153ce:	1e4b      	subs	r3, r1, #1
  4153d0:	2b07      	cmp	r3, #7
  4153d2:	d80d      	bhi.n	4153f0 <decompress+0x7a8>
  4153d4:	e8df f003 	tbb	[pc, r3]
  4153d8:	08061204 	.word	0x08061204
  4153dc:	0a0c0c0c 	.word	0x0a0c0c0c
            bit_mask = 0x1;
  4153e0:	2301      	movs	r3, #1
  4153e2:	e00c      	b.n	4153fe <decompress+0x7b6>
            bit_mask = 0x7;
  4153e4:	2307      	movs	r3, #7
  4153e6:	e00a      	b.n	4153fe <decompress+0x7b6>
            bit_mask = 0xF;
  4153e8:	230f      	movs	r3, #15
  4153ea:	e008      	b.n	4153fe <decompress+0x7b6>
            bit_mask = 0xFF;
  4153ec:	23ff      	movs	r3, #255	; 0xff
  4153ee:	e006      	b.n	4153fe <decompress+0x7b6>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4153f0:	2301      	movs	r3, #1
  4153f2:	408b      	lsls	r3, r1
  4153f4:	b2db      	uxtb	r3, r3
  4153f6:	3b01      	subs	r3, #1
  4153f8:	b2db      	uxtb	r3, r3
  4153fa:	e000      	b.n	4153fe <decompress+0x7b6>
            bit_mask = 0x3;
  4153fc:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  4153fe:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    bit_pos = bit_pos & 0x7;
  415402:	f000 0207 	and.w	r2, r0, #7
    if(bit_pos + len >= 8) {
  415406:	eb02 0b01 	add.w	fp, r2, r1
  41540a:	f1bb 0f07 	cmp.w	fp, #7
  41540e:	d810      	bhi.n	415432 <decompress+0x7ea>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  415410:	f81a 8008 	ldrb.w	r8, [sl, r8]
  415414:	4252      	negs	r2, r2
  415416:	1a52      	subs	r2, r2, r1
  415418:	3208      	adds	r2, #8
  41541a:	fa48 f202 	asr.w	r2, r8, r2
  41541e:	4013      	ands	r3, r2
            rle_prev_v = ret;
  415420:	4a43      	ldr	r2, [pc, #268]	; (415530 <decompress+0x8e8>)
  415422:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
  415424:	4401      	add	r1, r0
  415426:	4a45      	ldr	r2, [pc, #276]	; (41553c <decompress+0x8f4>)
  415428:	6011      	str	r1, [r2, #0]
            rle_state = RLE_STATE_SINGLE;
  41542a:	2100      	movs	r1, #0
  41542c:	4a41      	ldr	r2, [pc, #260]	; (415534 <decompress+0x8ec>)
  41542e:	7011      	strb	r1, [r2, #0]
  415430:	e67c      	b.n	41512c <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  415432:	f81a b008 	ldrb.w	fp, [sl, r8]
  415436:	44d0      	add	r8, sl
  415438:	f898 8001 	ldrb.w	r8, [r8, #1]
  41543c:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  415440:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  415444:	4252      	negs	r2, r2
  415446:	1a52      	subs	r2, r2, r1
  415448:	3210      	adds	r2, #16
  41544a:	fa4b fb02 	asr.w	fp, fp, r2
  41544e:	ea0b 0303 	and.w	r3, fp, r3
  415452:	e7e5      	b.n	415420 <decompress+0x7d8>
  415454:	f04f 0e00 	mov.w	lr, #0
  415458:	9005      	str	r0, [sp, #20]
  41545a:	f8dd 900c 	ldr.w	r9, [sp, #12]
  41545e:	e66b      	b.n	415138 <decompress+0x4f0>
  415460:	9805      	ldr	r0, [sp, #20]
    for(i = 0; i < w; i++) {
  415462:	f04f 0c00 	mov.w	ip, #0
  415466:	f8dd e008 	ldr.w	lr, [sp, #8]
  41546a:	f8dd 800c 	ldr.w	r8, [sp, #12]
  41546e:	e048      	b.n	415502 <decompress+0x8ba>
        switch(val) {
  415470:	2907      	cmp	r1, #7
  415472:	d805      	bhi.n	415480 <decompress+0x838>
  415474:	e8df f001 	tbb	[pc, r1]
  415478:	0f0b0723 	.word	0x0f0b0723
  41547c:	1f1b1713 	.word	0x1f1b1713
        len = 4;
  415480:	f04f 0904 	mov.w	r9, #4
  415484:	e01e      	b.n	4154c4 <decompress+0x87c>
  415486:	f04f 0904 	mov.w	r9, #4
                val = 2;
  41548a:	2102      	movs	r1, #2
  41548c:	e01a      	b.n	4154c4 <decompress+0x87c>
        len = 4;
  41548e:	f04f 0904 	mov.w	r9, #4
                val = 4;
  415492:	4649      	mov	r1, r9
  415494:	e016      	b.n	4154c4 <decompress+0x87c>
        len = 4;
  415496:	f04f 0904 	mov.w	r9, #4
                val = 6;
  41549a:	2106      	movs	r1, #6
  41549c:	e012      	b.n	4154c4 <decompress+0x87c>
        len = 4;
  41549e:	f04f 0904 	mov.w	r9, #4
                val = 9;
  4154a2:	2109      	movs	r1, #9
  4154a4:	e00e      	b.n	4154c4 <decompress+0x87c>
        len = 4;
  4154a6:	f04f 0904 	mov.w	r9, #4
                val = 11;
  4154aa:	210b      	movs	r1, #11
  4154ac:	e00a      	b.n	4154c4 <decompress+0x87c>
        len = 4;
  4154ae:	f04f 0904 	mov.w	r9, #4
                val = 13;
  4154b2:	210d      	movs	r1, #13
  4154b4:	e006      	b.n	4154c4 <decompress+0x87c>
        len = 4;
  4154b6:	f04f 0904 	mov.w	r9, #4
                val = 15;
  4154ba:	210f      	movs	r1, #15
  4154bc:	e002      	b.n	4154c4 <decompress+0x87c>
        len = 4;
  4154be:	f04f 0904 	mov.w	r9, #4
                val = 0;
  4154c2:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  4154c4:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  4154c8:	4252      	negs	r2, r2
  4154ca:	eba2 0209 	sub.w	r2, r2, r9
  4154ce:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4154d0:	2301      	movs	r3, #1
  4154d2:	fa03 f309 	lsl.w	r3, r3, r9
  4154d6:	b2db      	uxtb	r3, r3
  4154d8:	3b01      	subs	r3, #1
  4154da:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  4154dc:	f3c0 09cf 	ubfx	r9, r0, #3, #16
  4154e0:	43db      	mvns	r3, r3
  4154e2:	4093      	lsls	r3, r2
  4154e4:	f816 a009 	ldrb.w	sl, [r6, r9]
  4154e8:	ea0a 0303 	and.w	r3, sl, r3
  4154ec:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  4154ee:	fa01 f202 	lsl.w	r2, r1, r2
  4154f2:	431a      	orrs	r2, r3
  4154f4:	f806 2009 	strb.w	r2, [r6, r9]
                wrp += wr_size;
  4154f8:	4470      	add	r0, lr
            for(x = 0; x < w; x++) {
  4154fa:	f10c 0c01 	add.w	ip, ip, #1
  4154fe:	fa0f fc8c 	sxth.w	ip, ip
  415502:	45a4      	cmp	ip, r4
  415504:	f280 8246 	bge.w	415994 <decompress+0xd4c>
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
  415508:	f818 100c 	ldrb.w	r1, [r8, ip]
  41550c:	f815 300c 	ldrb.w	r3, [r5, ip]
  415510:	4059      	eors	r1, r3
  415512:	f805 100c 	strb.w	r1, [r5, ip]
    if(len == 3) {
  415516:	2f03      	cmp	r7, #3
  415518:	d0aa      	beq.n	415470 <decompress+0x828>
  41551a:	46b9      	mov	r9, r7
  41551c:	e7d2      	b.n	4154c4 <decompress+0x87c>
            bit_mask = 0x1;
  41551e:	f04f 0901 	mov.w	r9, #1
  415522:	e01d      	b.n	415560 <decompress+0x918>
            bit_mask = 0x7;
  415524:	f04f 0907 	mov.w	r9, #7
  415528:	e01a      	b.n	415560 <decompress+0x918>
            bit_mask = 0xF;
  41552a:	f04f 090f 	mov.w	r9, #15
  41552e:	e017      	b.n	415560 <decompress+0x918>
  415530:	2040c79c 	.word	0x2040c79c
  415534:	2040c7a4 	.word	0x2040c7a4
  415538:	2040c794 	.word	0x2040c794
  41553c:	2040c7a0 	.word	0x2040c7a0
  415540:	2040c795 	.word	0x2040c795
  415544:	2040c798 	.word	0x2040c798
            bit_mask = 0xFF;
  415548:	f04f 09ff 	mov.w	r9, #255	; 0xff
  41554c:	e008      	b.n	415560 <decompress+0x918>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  41554e:	2301      	movs	r3, #1
  415550:	4093      	lsls	r3, r2
  415552:	b2db      	uxtb	r3, r3
  415554:	3b01      	subs	r3, #1
  415556:	fa5f f983 	uxtb.w	r9, r3
  41555a:	e001      	b.n	415560 <decompress+0x918>
            bit_mask = 0x3;
  41555c:	f04f 0903 	mov.w	r9, #3
    uint32_t byte_pos = bit_pos >> 3;
  415560:	ea4f 0ad8 	mov.w	sl, r8, lsr #3
    bit_pos = bit_pos & 0x7;
  415564:	f008 0107 	and.w	r1, r8, #7
    if(bit_pos + len >= 8) {
  415568:	188b      	adds	r3, r1, r2
  41556a:	2b07      	cmp	r3, #7
  41556c:	d840      	bhi.n	4155f0 <decompress+0x9a8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  41556e:	f81b 300a 	ldrb.w	r3, [fp, sl]
  415572:	4249      	negs	r1, r1
  415574:	1a89      	subs	r1, r1, r2
  415576:	3108      	adds	r1, #8
  415578:	410b      	asrs	r3, r1
  41557a:	ea03 0309 	and.w	r3, r3, r9
        if(rle_rdp != 0 && rle_prev_v == ret) {
  41557e:	f1b8 0f00 	cmp.w	r8, #0
  415582:	d003      	beq.n	41558c <decompress+0x944>
  415584:	49b9      	ldr	r1, [pc, #740]	; (41586c <decompress+0xc24>)
  415586:	7809      	ldrb	r1, [r1, #0]
  415588:	4299      	cmp	r1, r3
  41558a:	d040      	beq.n	41560e <decompress+0x9c6>
        rle_prev_v = ret;
  41558c:	49b7      	ldr	r1, [pc, #732]	; (41586c <decompress+0xc24>)
  41558e:	700b      	strb	r3, [r1, #0]
        rle_rdp += rle_bpp;
  415590:	4442      	add	r2, r8
  415592:	49b7      	ldr	r1, [pc, #732]	; (415870 <decompress+0xc28>)
  415594:	600a      	str	r2, [r1, #0]
        out[i] = rle_next();
  415596:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  41559a:	f10e 0e01 	add.w	lr, lr, #1
  41559e:	fa0f fe8e 	sxth.w	lr, lr
  4155a2:	4574      	cmp	r4, lr
  4155a4:	f340 81a0 	ble.w	4158e8 <decompress+0xca0>
        out[i] = rle_next();
  4155a8:	eb05 0c0e 	add.w	ip, r5, lr
    if(rle_state == RLE_STATE_SINGLE) {
  4155ac:	4bb1      	ldr	r3, [pc, #708]	; (415874 <decompress+0xc2c>)
  4155ae:	781b      	ldrb	r3, [r3, #0]
  4155b0:	2b00      	cmp	r3, #0
  4155b2:	d137      	bne.n	415624 <decompress+0x9dc>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4155b4:	4bb0      	ldr	r3, [pc, #704]	; (415878 <decompress+0xc30>)
  4155b6:	f8d3 b000 	ldr.w	fp, [r3]
  4155ba:	4bad      	ldr	r3, [pc, #692]	; (415870 <decompress+0xc28>)
  4155bc:	f8d3 8000 	ldr.w	r8, [r3]
  4155c0:	4bae      	ldr	r3, [pc, #696]	; (41587c <decompress+0xc34>)
  4155c2:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  4155c4:	1e53      	subs	r3, r2, #1
  4155c6:	2b07      	cmp	r3, #7
  4155c8:	d8c1      	bhi.n	41554e <decompress+0x906>
  4155ca:	a101      	add	r1, pc, #4	; (adr r1, 4155d0 <decompress+0x988>)
  4155cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  4155d0:	0041551f 	.word	0x0041551f
  4155d4:	0041555d 	.word	0x0041555d
  4155d8:	00415525 	.word	0x00415525
  4155dc:	0041552b 	.word	0x0041552b
  4155e0:	0041554f 	.word	0x0041554f
  4155e4:	0041554f 	.word	0x0041554f
  4155e8:	0041554f 	.word	0x0041554f
  4155ec:	00415549 	.word	0x00415549
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4155f0:	f81b 300a 	ldrb.w	r3, [fp, sl]
  4155f4:	44da      	add	sl, fp
  4155f6:	f89a a001 	ldrb.w	sl, [sl, #1]
  4155fa:	eb0a 2303 	add.w	r3, sl, r3, lsl #8
  4155fe:	b29b      	uxth	r3, r3
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  415600:	4249      	negs	r1, r1
  415602:	1a89      	subs	r1, r1, r2
  415604:	3110      	adds	r1, #16
  415606:	410b      	asrs	r3, r1
  415608:	ea03 0309 	and.w	r3, r3, r9
  41560c:	e7b7      	b.n	41557e <decompress+0x936>
            rle_cnt = 0;
  41560e:	f04f 0900 	mov.w	r9, #0
  415612:	499b      	ldr	r1, [pc, #620]	; (415880 <decompress+0xc38>)
  415614:	f881 9000 	strb.w	r9, [r1]
            rle_state = RLE_STATE_REPEATE;
  415618:	f04f 0901 	mov.w	r9, #1
  41561c:	4995      	ldr	r1, [pc, #596]	; (415874 <decompress+0xc2c>)
  41561e:	f881 9000 	strb.w	r9, [r1]
  415622:	e7b3      	b.n	41558c <decompress+0x944>
    else if(rle_state == RLE_STATE_REPEATE) {
  415624:	2b01      	cmp	r3, #1
  415626:	d004      	beq.n	415632 <decompress+0x9ea>
    else if(rle_state == RLE_STATE_COUNTER) {
  415628:	2b02      	cmp	r3, #2
  41562a:	f000 80fa 	beq.w	415822 <decompress+0xbda>
    uint8_t ret = 0;
  41562e:	2300      	movs	r3, #0
  415630:	e7b1      	b.n	415596 <decompress+0x94e>
        v = get_bits(rle_in, rle_rdp, 1);
  415632:	4b91      	ldr	r3, [pc, #580]	; (415878 <decompress+0xc30>)
  415634:	f8d3 9000 	ldr.w	r9, [r3]
  415638:	4b8d      	ldr	r3, [pc, #564]	; (415870 <decompress+0xc28>)
  41563a:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  41563c:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  41563e:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  415642:	f103 0801 	add.w	r8, r3, #1
  415646:	f1b8 0f07 	cmp.w	r8, #7
  41564a:	d822      	bhi.n	415692 <decompress+0xa4a>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  41564c:	f819 1001 	ldrb.w	r1, [r9, r1]
  415650:	f1c3 0307 	rsb	r3, r3, #7
  415654:	4119      	asrs	r1, r3
  415656:	f001 0101 	and.w	r1, r1, #1
        rle_cnt++;
  41565a:	4b89      	ldr	r3, [pc, #548]	; (415880 <decompress+0xc38>)
  41565c:	f893 8000 	ldrb.w	r8, [r3]
  415660:	f108 0801 	add.w	r8, r8, #1
  415664:	fa5f f888 	uxtb.w	r8, r8
  415668:	f883 8000 	strb.w	r8, [r3]
        rle_rdp += 1;
  41566c:	3201      	adds	r2, #1
  41566e:	4b80      	ldr	r3, [pc, #512]	; (415870 <decompress+0xc28>)
  415670:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  415672:	2901      	cmp	r1, #1
  415674:	d01a      	beq.n	4156ac <decompress+0xa64>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  415676:	4b81      	ldr	r3, [pc, #516]	; (41587c <decompress+0xc34>)
  415678:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  41567c:	f108 33ff 	add.w	r3, r8, #4294967295
  415680:	2b07      	cmp	r3, #7
  415682:	f200 8099 	bhi.w	4157b8 <decompress+0xb70>
  415686:	e8df f003 	tbb	[pc, r3]
  41568a:	9e8f      	.short	0x9e8f
  41568c:	97979391 	.word	0x97979391
  415690:	9597      	.short	0x9597
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  415692:	f819 8001 	ldrb.w	r8, [r9, r1]
  415696:	4449      	add	r1, r9
  415698:	7849      	ldrb	r1, [r1, #1]
  41569a:	eb01 2108 	add.w	r1, r1, r8, lsl #8
  41569e:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4156a0:	f1c3 030f 	rsb	r3, r3, #15
  4156a4:	4119      	asrs	r1, r3
  4156a6:	f001 0101 	and.w	r1, r1, #1
  4156aa:	e7d6      	b.n	41565a <decompress+0xa12>
            ret = rle_prev_v;
  4156ac:	4b6f      	ldr	r3, [pc, #444]	; (41586c <decompress+0xc24>)
  4156ae:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  4156b0:	f1b8 0f0b 	cmp.w	r8, #11
  4156b4:	f47f af6f 	bne.w	415596 <decompress+0x94e>
    uint32_t byte_pos = bit_pos >> 3;
  4156b8:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  4156bc:	f002 0b07 	and.w	fp, r2, #7
    if(bit_pos + len >= 8) {
  4156c0:	f10b 0806 	add.w	r8, fp, #6
  4156c4:	f1b8 0f07 	cmp.w	r8, #7
  4156c8:	d817      	bhi.n	4156fa <decompress+0xab2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4156ca:	f819 a00a 	ldrb.w	sl, [r9, sl]
  4156ce:	f1cb 0802 	rsb	r8, fp, #2
  4156d2:	fa4a f808 	asr.w	r8, sl, r8
  4156d6:	f008 083f 	and.w	r8, r8, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  4156da:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 415880 <decompress+0xc38>
  4156de:	f88a 8000 	strb.w	r8, [sl]
                rle_rdp += 6;
  4156e2:	3206      	adds	r2, #6
  4156e4:	f8df a188 	ldr.w	sl, [pc, #392]	; 415870 <decompress+0xc28>
  4156e8:	f8ca 2000 	str.w	r2, [sl]
                if(rle_cnt != 0) {
  4156ec:	f1b8 0f00 	cmp.w	r8, #0
  4156f0:	d013      	beq.n	41571a <decompress+0xad2>
                    rle_state = RLE_STATE_COUNTER;
  4156f2:	2102      	movs	r1, #2
  4156f4:	4a5f      	ldr	r2, [pc, #380]	; (415874 <decompress+0xc2c>)
  4156f6:	7011      	strb	r1, [r2, #0]
  4156f8:	e74d      	b.n	415596 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4156fa:	f819 800a 	ldrb.w	r8, [r9, sl]
  4156fe:	44ca      	add	sl, r9
  415700:	f89a a001 	ldrb.w	sl, [sl, #1]
  415704:	eb0a 2808 	add.w	r8, sl, r8, lsl #8
  415708:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  41570c:	f1cb 0b0a 	rsb	fp, fp, #10
  415710:	fa48 f80b 	asr.w	r8, r8, fp
  415714:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  415718:	e7df      	b.n	4156da <decompress+0xa92>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  41571a:	4b58      	ldr	r3, [pc, #352]	; (41587c <decompress+0xc34>)
  41571c:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  415720:	f108 33ff 	add.w	r3, r8, #4294967295
  415724:	2b07      	cmp	r3, #7
  415726:	d80b      	bhi.n	415740 <decompress+0xaf8>
  415728:	e8df f003 	tbb	[pc, r3]
  41572c:	06041112 	.word	0x06041112
  415730:	080a0a0a 	.word	0x080a0a0a
            bit_mask = 0x7;
  415734:	2107      	movs	r1, #7
  415736:	e00b      	b.n	415750 <decompress+0xb08>
            bit_mask = 0xF;
  415738:	210f      	movs	r1, #15
  41573a:	e009      	b.n	415750 <decompress+0xb08>
            bit_mask = 0xFF;
  41573c:	21ff      	movs	r1, #255	; 0xff
  41573e:	e007      	b.n	415750 <decompress+0xb08>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  415740:	2101      	movs	r1, #1
  415742:	fa01 f108 	lsl.w	r1, r1, r8
  415746:	b2c9      	uxtb	r1, r1
  415748:	3901      	subs	r1, #1
  41574a:	b2c9      	uxtb	r1, r1
  41574c:	e000      	b.n	415750 <decompress+0xb08>
            bit_mask = 0x3;
  41574e:	2103      	movs	r1, #3
    uint32_t byte_pos = bit_pos >> 3;
  415750:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  415754:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  415758:	eb03 0b08 	add.w	fp, r3, r8
  41575c:	f1bb 0f07 	cmp.w	fp, #7
  415760:	d811      	bhi.n	415786 <decompress+0xb3e>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  415762:	f819 900a 	ldrb.w	r9, [r9, sl]
  415766:	425b      	negs	r3, r3
  415768:	eba3 0308 	sub.w	r3, r3, r8
  41576c:	3308      	adds	r3, #8
  41576e:	fa49 f303 	asr.w	r3, r9, r3
  415772:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  415774:	493d      	ldr	r1, [pc, #244]	; (41586c <decompress+0xc24>)
  415776:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  415778:	4442      	add	r2, r8
  41577a:	493d      	ldr	r1, [pc, #244]	; (415870 <decompress+0xc28>)
  41577c:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  41577e:	2100      	movs	r1, #0
  415780:	4a3c      	ldr	r2, [pc, #240]	; (415874 <decompress+0xc2c>)
  415782:	7011      	strb	r1, [r2, #0]
  415784:	e707      	b.n	415596 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  415786:	f819 b00a 	ldrb.w	fp, [r9, sl]
  41578a:	44d1      	add	r9, sl
  41578c:	f899 9001 	ldrb.w	r9, [r9, #1]
  415790:	eb09 290b 	add.w	r9, r9, fp, lsl #8
  415794:	fa1f f989 	uxth.w	r9, r9
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  415798:	425b      	negs	r3, r3
  41579a:	eba3 0308 	sub.w	r3, r3, r8
  41579e:	3310      	adds	r3, #16
  4157a0:	fa49 f303 	asr.w	r3, r9, r3
  4157a4:	400b      	ands	r3, r1
  4157a6:	e7e5      	b.n	415774 <decompress+0xb2c>
            bit_mask = 0x1;
  4157a8:	2301      	movs	r3, #1
  4157aa:	e00d      	b.n	4157c8 <decompress+0xb80>
            bit_mask = 0x7;
  4157ac:	2307      	movs	r3, #7
  4157ae:	e00b      	b.n	4157c8 <decompress+0xb80>
            bit_mask = 0xF;
  4157b0:	230f      	movs	r3, #15
  4157b2:	e009      	b.n	4157c8 <decompress+0xb80>
            bit_mask = 0xFF;
  4157b4:	23ff      	movs	r3, #255	; 0xff
  4157b6:	e007      	b.n	4157c8 <decompress+0xb80>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4157b8:	2301      	movs	r3, #1
  4157ba:	fa03 f308 	lsl.w	r3, r3, r8
  4157be:	b2db      	uxtb	r3, r3
  4157c0:	3b01      	subs	r3, #1
  4157c2:	b2db      	uxtb	r3, r3
  4157c4:	e000      	b.n	4157c8 <decompress+0xb80>
            bit_mask = 0x3;
  4157c6:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  4157c8:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  4157cc:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  4157d0:	eb01 0b08 	add.w	fp, r1, r8
  4157d4:	f1bb 0f07 	cmp.w	fp, #7
  4157d8:	d811      	bhi.n	4157fe <decompress+0xbb6>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4157da:	f819 900a 	ldrb.w	r9, [r9, sl]
  4157de:	4249      	negs	r1, r1
  4157e0:	eba1 0108 	sub.w	r1, r1, r8
  4157e4:	3108      	adds	r1, #8
  4157e6:	fa49 f101 	asr.w	r1, r9, r1
  4157ea:	400b      	ands	r3, r1
            rle_prev_v = ret;
  4157ec:	491f      	ldr	r1, [pc, #124]	; (41586c <decompress+0xc24>)
  4157ee:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  4157f0:	4442      	add	r2, r8
  4157f2:	491f      	ldr	r1, [pc, #124]	; (415870 <decompress+0xc28>)
  4157f4:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  4157f6:	2100      	movs	r1, #0
  4157f8:	4a1e      	ldr	r2, [pc, #120]	; (415874 <decompress+0xc2c>)
  4157fa:	7011      	strb	r1, [r2, #0]
  4157fc:	e6cb      	b.n	415596 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4157fe:	f819 b00a 	ldrb.w	fp, [r9, sl]
  415802:	44d1      	add	r9, sl
  415804:	f899 9001 	ldrb.w	r9, [r9, #1]
  415808:	eb09 290b 	add.w	r9, r9, fp, lsl #8
  41580c:	fa1f f989 	uxth.w	r9, r9
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  415810:	4249      	negs	r1, r1
  415812:	eba1 0108 	sub.w	r1, r1, r8
  415816:	3110      	adds	r1, #16
  415818:	fa49 f901 	asr.w	r9, r9, r1
  41581c:	ea09 0303 	and.w	r3, r9, r3
  415820:	e7e4      	b.n	4157ec <decompress+0xba4>
        ret = rle_prev_v;
  415822:	4b12      	ldr	r3, [pc, #72]	; (41586c <decompress+0xc24>)
  415824:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  415826:	4916      	ldr	r1, [pc, #88]	; (415880 <decompress+0xc38>)
  415828:	780a      	ldrb	r2, [r1, #0]
  41582a:	3a01      	subs	r2, #1
  41582c:	b2d2      	uxtb	r2, r2
  41582e:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  415830:	2a00      	cmp	r2, #0
  415832:	f47f aeb0 	bne.w	415596 <decompress+0x94e>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  415836:	4b10      	ldr	r3, [pc, #64]	; (415878 <decompress+0xc30>)
  415838:	f8d3 a000 	ldr.w	sl, [r3]
  41583c:	4b0c      	ldr	r3, [pc, #48]	; (415870 <decompress+0xc28>)
  41583e:	f8d3 9000 	ldr.w	r9, [r3]
  415842:	4b0e      	ldr	r3, [pc, #56]	; (41587c <decompress+0xc34>)
  415844:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  415848:	f108 33ff 	add.w	r3, r8, #4294967295
  41584c:	2b07      	cmp	r3, #7
  41584e:	d819      	bhi.n	415884 <decompress+0xc3c>
  415850:	e8df f003 	tbb	[pc, r3]
  415854:	08061f04 	.word	0x08061f04
  415858:	0a181818 	.word	0x0a181818
            bit_mask = 0x1;
  41585c:	2301      	movs	r3, #1
  41585e:	e019      	b.n	415894 <decompress+0xc4c>
            bit_mask = 0x7;
  415860:	2307      	movs	r3, #7
  415862:	e017      	b.n	415894 <decompress+0xc4c>
            bit_mask = 0xF;
  415864:	230f      	movs	r3, #15
  415866:	e015      	b.n	415894 <decompress+0xc4c>
            bit_mask = 0xFF;
  415868:	23ff      	movs	r3, #255	; 0xff
  41586a:	e013      	b.n	415894 <decompress+0xc4c>
  41586c:	2040c79c 	.word	0x2040c79c
  415870:	2040c7a0 	.word	0x2040c7a0
  415874:	2040c7a4 	.word	0x2040c7a4
  415878:	2040c798 	.word	0x2040c798
  41587c:	2040c794 	.word	0x2040c794
  415880:	2040c795 	.word	0x2040c795
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  415884:	2301      	movs	r3, #1
  415886:	fa03 f308 	lsl.w	r3, r3, r8
  41588a:	b2db      	uxtb	r3, r3
  41588c:	3b01      	subs	r3, #1
  41588e:	b2db      	uxtb	r3, r3
  415890:	e000      	b.n	415894 <decompress+0xc4c>
            bit_mask = 0x3;
  415892:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  415894:	ea4f 01d9 	mov.w	r1, r9, lsr #3
    bit_pos = bit_pos & 0x7;
  415898:	f009 0207 	and.w	r2, r9, #7
    if(bit_pos + len >= 8) {
  41589c:	eb02 0b08 	add.w	fp, r2, r8
  4158a0:	f1bb 0f07 	cmp.w	fp, #7
  4158a4:	d812      	bhi.n	4158cc <decompress+0xc84>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4158a6:	f81a a001 	ldrb.w	sl, [sl, r1]
  4158aa:	4251      	negs	r1, r2
  4158ac:	eba1 0108 	sub.w	r1, r1, r8
  4158b0:	3108      	adds	r1, #8
  4158b2:	fa4a f101 	asr.w	r1, sl, r1
  4158b6:	400b      	ands	r3, r1
            rle_prev_v = ret;
  4158b8:	4a42      	ldr	r2, [pc, #264]	; (4159c4 <decompress+0xd7c>)
  4158ba:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
  4158bc:	eb08 0209 	add.w	r2, r8, r9
  4158c0:	4941      	ldr	r1, [pc, #260]	; (4159c8 <decompress+0xd80>)
  4158c2:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  4158c4:	2100      	movs	r1, #0
  4158c6:	4a41      	ldr	r2, [pc, #260]	; (4159cc <decompress+0xd84>)
  4158c8:	7011      	strb	r1, [r2, #0]
  4158ca:	e664      	b.n	415596 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4158cc:	f81a b001 	ldrb.w	fp, [sl, r1]
  4158d0:	4451      	add	r1, sl
  4158d2:	7849      	ldrb	r1, [r1, #1]
  4158d4:	eb01 210b 	add.w	r1, r1, fp, lsl #8
  4158d8:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4158da:	4252      	negs	r2, r2
  4158dc:	eba2 0208 	sub.w	r2, r2, r8
  4158e0:	3210      	adds	r2, #16
  4158e2:	4111      	asrs	r1, r2
  4158e4:	400b      	ands	r3, r1
  4158e6:	e7e7      	b.n	4158b8 <decompress+0xc70>
    for(i = 0; i < w; i++) {
  4158e8:	f04f 0c00 	mov.w	ip, #0
  4158ec:	f8dd e008 	ldr.w	lr, [sp, #8]
  4158f0:	e048      	b.n	415984 <decompress+0xd3c>
        switch(val) {
  4158f2:	2907      	cmp	r1, #7
  4158f4:	d805      	bhi.n	415902 <decompress+0xcba>
  4158f6:	e8df f001 	tbb	[pc, r1]
  4158fa:	0723      	.short	0x0723
  4158fc:	17130f0b 	.word	0x17130f0b
  415900:	1f1b      	.short	0x1f1b
        len = 4;
  415902:	f04f 0804 	mov.w	r8, #4
  415906:	e01e      	b.n	415946 <decompress+0xcfe>
  415908:	f04f 0804 	mov.w	r8, #4
                val = 2;
  41590c:	2102      	movs	r1, #2
  41590e:	e01a      	b.n	415946 <decompress+0xcfe>
        len = 4;
  415910:	f04f 0804 	mov.w	r8, #4
                val = 4;
  415914:	4641      	mov	r1, r8
  415916:	e016      	b.n	415946 <decompress+0xcfe>
        len = 4;
  415918:	f04f 0804 	mov.w	r8, #4
                val = 6;
  41591c:	2106      	movs	r1, #6
  41591e:	e012      	b.n	415946 <decompress+0xcfe>
        len = 4;
  415920:	f04f 0804 	mov.w	r8, #4
                val = 9;
  415924:	2109      	movs	r1, #9
  415926:	e00e      	b.n	415946 <decompress+0xcfe>
        len = 4;
  415928:	f04f 0804 	mov.w	r8, #4
                val = 11;
  41592c:	210b      	movs	r1, #11
  41592e:	e00a      	b.n	415946 <decompress+0xcfe>
        len = 4;
  415930:	f04f 0804 	mov.w	r8, #4
                val = 13;
  415934:	210d      	movs	r1, #13
  415936:	e006      	b.n	415946 <decompress+0xcfe>
        len = 4;
  415938:	f04f 0804 	mov.w	r8, #4
                val = 15;
  41593c:	210f      	movs	r1, #15
  41593e:	e002      	b.n	415946 <decompress+0xcfe>
        len = 4;
  415940:	f04f 0804 	mov.w	r8, #4
                val = 0;
  415944:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  415946:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  41594a:	4252      	negs	r2, r2
  41594c:	eba2 0208 	sub.w	r2, r2, r8
  415950:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  415952:	2301      	movs	r3, #1
  415954:	fa03 f308 	lsl.w	r3, r3, r8
  415958:	b2db      	uxtb	r3, r3
  41595a:	3b01      	subs	r3, #1
  41595c:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  41595e:	f3c0 08cf 	ubfx	r8, r0, #3, #16
  415962:	43db      	mvns	r3, r3
  415964:	4093      	lsls	r3, r2
  415966:	f816 9008 	ldrb.w	r9, [r6, r8]
  41596a:	ea09 0303 	and.w	r3, r9, r3
  41596e:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  415970:	fa01 f202 	lsl.w	r2, r1, r2
  415974:	431a      	orrs	r2, r3
  415976:	f806 2008 	strb.w	r2, [r6, r8]
                wrp += wr_size;
  41597a:	4470      	add	r0, lr
            for(x = 0; x < w; x++) {
  41597c:	f10c 0c01 	add.w	ip, ip, #1
  415980:	fa0f fc8c 	sxth.w	ip, ip
  415984:	45a4      	cmp	ip, r4
  415986:	da05      	bge.n	415994 <decompress+0xd4c>
                bits_write(out, wrp, line_buf1[x], bpp);
  415988:	f815 100c 	ldrb.w	r1, [r5, ip]
    if(len == 3) {
  41598c:	2f03      	cmp	r7, #3
  41598e:	d0b0      	beq.n	4158f2 <decompress+0xcaa>
  415990:	46b8      	mov	r8, r7
  415992:	e7d8      	b.n	415946 <decompress+0xcfe>
    for(y = 1; y < h; y++) {
  415994:	9b00      	ldr	r3, [sp, #0]
  415996:	3301      	adds	r3, #1
  415998:	b21b      	sxth	r3, r3
  41599a:	9300      	str	r3, [sp, #0]
  41599c:	9b00      	ldr	r3, [sp, #0]
  41599e:	9a01      	ldr	r2, [sp, #4]
  4159a0:	4293      	cmp	r3, r2
  4159a2:	da06      	bge.n	4159b2 <decompress+0xd6a>
        if(prefilter) {
  4159a4:	9b04      	ldr	r3, [sp, #16]
  4159a6:	2b00      	cmp	r3, #0
  4159a8:	f47f ad54 	bne.w	415454 <decompress+0x80c>
  4159ac:	f04f 0e00 	mov.w	lr, #0
  4159b0:	e5f7      	b.n	4155a2 <decompress+0x95a>
    _lv_mem_buf_release(line_buf1);
  4159b2:	4628      	mov	r0, r5
  4159b4:	4c06      	ldr	r4, [pc, #24]	; (4159d0 <decompress+0xd88>)
  4159b6:	47a0      	blx	r4
    _lv_mem_buf_release(line_buf2);
  4159b8:	9803      	ldr	r0, [sp, #12]
  4159ba:	47a0      	blx	r4
}
  4159bc:	b007      	add	sp, #28
  4159be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4159c2:	bf00      	nop
  4159c4:	2040c79c 	.word	0x2040c79c
  4159c8:	2040c7a0 	.word	0x2040c7a0
  4159cc:	2040c7a4 	.word	0x2040c7a4
  4159d0:	00417645 	.word	0x00417645

004159d4 <lv_font_get_bitmap_fmt_txt>:
{
  4159d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4159d8:	b082      	sub	sp, #8
    if(unicode_letter == '\t') unicode_letter = ' ';
  4159da:	2909      	cmp	r1, #9
  4159dc:	d01e      	beq.n	415a1c <lv_font_get_bitmap_fmt_txt+0x48>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  4159de:	6905      	ldr	r5, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
  4159e0:	4b37      	ldr	r3, [pc, #220]	; (415ac0 <lv_font_get_bitmap_fmt_txt+0xec>)
  4159e2:	4798      	blx	r3
    if(!gid) return NULL;
  4159e4:	4607      	mov	r7, r0
  4159e6:	2800      	cmp	r0, #0
  4159e8:	d063      	beq.n	415ab2 <lv_font_get_bitmap_fmt_txt+0xde>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
  4159ea:	686e      	ldr	r6, [r5, #4]
  4159ec:	eb06 08c0 	add.w	r8, r6, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
  4159f0:	7ceb      	ldrb	r3, [r5, #19]
  4159f2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  4159f6:	d013      	beq.n	415a20 <lv_font_get_bitmap_fmt_txt+0x4c>
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
  4159f8:	f898 3004 	ldrb.w	r3, [r8, #4]
  4159fc:	f898 4005 	ldrb.w	r4, [r8, #5]
  415a00:	fb04 f403 	mul.w	r4, r4, r3
        if(gsize == 0) return NULL;
  415a04:	2c00      	cmp	r4, #0
  415a06:	d056      	beq.n	415ab6 <lv_font_get_bitmap_fmt_txt+0xe2>
        switch(fdsc->bpp) {
  415a08:	7ceb      	ldrb	r3, [r5, #19]
  415a0a:	f3c3 0343 	ubfx	r3, r3, #1, #4
  415a0e:	3b01      	subs	r3, #1
  415a10:	2b03      	cmp	r3, #3
  415a12:	d80e      	bhi.n	415a32 <lv_font_get_bitmap_fmt_txt+0x5e>
  415a14:	e8df f003 	tbb	[pc, r3]
  415a18:	44413e0b 	.word	0x44413e0b
    if(unicode_letter == '\t') unicode_letter = ' ';
  415a1c:	2120      	movs	r1, #32
  415a1e:	e7de      	b.n	4159de <lv_font_get_bitmap_fmt_txt+0xa>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
  415a20:	6828      	ldr	r0, [r5, #0]
  415a22:	f856 3037 	ldr.w	r3, [r6, r7, lsl #3]
  415a26:	f3c3 0313 	ubfx	r3, r3, #0, #20
  415a2a:	4418      	add	r0, r3
  415a2c:	e02f      	b.n	415a8e <lv_font_get_bitmap_fmt_txt+0xba>
                buf_size = (gsize + 7) >> 3;
  415a2e:	3407      	adds	r4, #7
  415a30:	08e4      	lsrs	r4, r4, #3
        if(_lv_mem_get_size(LV_GC_ROOT(_lv_font_decompr_buf)) < buf_size) {
  415a32:	4b24      	ldr	r3, [pc, #144]	; (415ac4 <lv_font_get_bitmap_fmt_txt+0xf0>)
  415a34:	6818      	ldr	r0, [r3, #0]
  415a36:	4b24      	ldr	r3, [pc, #144]	; (415ac8 <lv_font_get_bitmap_fmt_txt+0xf4>)
  415a38:	4798      	blx	r3
  415a3a:	4284      	cmp	r4, r0
  415a3c:	d90c      	bls.n	415a58 <lv_font_get_bitmap_fmt_txt+0x84>
            uint8_t * tmp = lv_mem_realloc(LV_GC_ROOT(_lv_font_decompr_buf), buf_size);
  415a3e:	4621      	mov	r1, r4
  415a40:	4b20      	ldr	r3, [pc, #128]	; (415ac4 <lv_font_get_bitmap_fmt_txt+0xf0>)
  415a42:	6818      	ldr	r0, [r3, #0]
  415a44:	4b21      	ldr	r3, [pc, #132]	; (415acc <lv_font_get_bitmap_fmt_txt+0xf8>)
  415a46:	4798      	blx	r3
  415a48:	4604      	mov	r4, r0
            LV_ASSERT_MEM(tmp);
  415a4a:	4b21      	ldr	r3, [pc, #132]	; (415ad0 <lv_font_get_bitmap_fmt_txt+0xfc>)
  415a4c:	4798      	blx	r3
  415a4e:	b350      	cbz	r0, 415aa6 <lv_font_get_bitmap_fmt_txt+0xd2>
            if(tmp == NULL) return NULL;
  415a50:	2c00      	cmp	r4, #0
  415a52:	d032      	beq.n	415aba <lv_font_get_bitmap_fmt_txt+0xe6>
            LV_GC_ROOT(_lv_font_decompr_buf) = tmp;
  415a54:	4b1b      	ldr	r3, [pc, #108]	; (415ac4 <lv_font_get_bitmap_fmt_txt+0xf0>)
  415a56:	601c      	str	r4, [r3, #0]
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
  415a58:	7ceb      	ldrb	r3, [r5, #19]
  415a5a:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
  415a5e:	2c40      	cmp	r4, #64	; 0x40
  415a60:	bf14      	ite	ne
  415a62:	2400      	movne	r4, #0
  415a64:	2401      	moveq	r4, #1
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
  415a66:	f8d5 e000 	ldr.w	lr, [r5]
  415a6a:	f856 0037 	ldr.w	r0, [r6, r7, lsl #3]
  415a6e:	f3c0 0013 	ubfx	r0, r0, #0, #20
                   (uint8_t)fdsc->bpp, prefilter);
  415a72:	f3c3 0143 	ubfx	r1, r3, #1, #4
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
  415a76:	f898 3005 	ldrb.w	r3, [r8, #5]
  415a7a:	f898 2004 	ldrb.w	r2, [r8, #4]
  415a7e:	4d11      	ldr	r5, [pc, #68]	; (415ac4 <lv_font_get_bitmap_fmt_txt+0xf0>)
  415a80:	9401      	str	r4, [sp, #4]
  415a82:	9100      	str	r1, [sp, #0]
  415a84:	6829      	ldr	r1, [r5, #0]
  415a86:	4470      	add	r0, lr
  415a88:	4c12      	ldr	r4, [pc, #72]	; (415ad4 <lv_font_get_bitmap_fmt_txt+0x100>)
  415a8a:	47a0      	blx	r4
        return LV_GC_ROOT(_lv_font_decompr_buf);
  415a8c:	6828      	ldr	r0, [r5, #0]
}
  415a8e:	b002      	add	sp, #8
  415a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                buf_size = (gsize + 3) >> 2;
  415a94:	3403      	adds	r4, #3
  415a96:	08a4      	lsrs	r4, r4, #2
                break;
  415a98:	e7cb      	b.n	415a32 <lv_font_get_bitmap_fmt_txt+0x5e>
                buf_size = (gsize + 1) >> 1;
  415a9a:	3401      	adds	r4, #1
  415a9c:	0864      	lsrs	r4, r4, #1
                break;
  415a9e:	e7c8      	b.n	415a32 <lv_font_get_bitmap_fmt_txt+0x5e>
                buf_size = (gsize + 1) >> 1;
  415aa0:	3401      	adds	r4, #1
  415aa2:	0864      	lsrs	r4, r4, #1
                break;
  415aa4:	e7c5      	b.n	415a32 <lv_font_get_bitmap_fmt_txt+0x5e>
            LV_ASSERT_MEM(tmp);
  415aa6:	4622      	mov	r2, r4
  415aa8:	2300      	movs	r3, #0
  415aaa:	480b      	ldr	r0, [pc, #44]	; (415ad8 <lv_font_get_bitmap_fmt_txt+0x104>)
  415aac:	490b      	ldr	r1, [pc, #44]	; (415adc <lv_font_get_bitmap_fmt_txt+0x108>)
  415aae:	4788      	blx	r1
  415ab0:	e7fe      	b.n	415ab0 <lv_font_get_bitmap_fmt_txt+0xdc>
    if(!gid) return NULL;
  415ab2:	2000      	movs	r0, #0
  415ab4:	e7eb      	b.n	415a8e <lv_font_get_bitmap_fmt_txt+0xba>
        if(gsize == 0) return NULL;
  415ab6:	2000      	movs	r0, #0
  415ab8:	e7e9      	b.n	415a8e <lv_font_get_bitmap_fmt_txt+0xba>
            if(tmp == NULL) return NULL;
  415aba:	2000      	movs	r0, #0
  415abc:	e7e7      	b.n	415a8e <lv_font_get_bitmap_fmt_txt+0xba>
  415abe:	bf00      	nop
  415ac0:	00414abd 	.word	0x00414abd
  415ac4:	2043a254 	.word	0x2043a254
  415ac8:	00417625 	.word	0x00417625
  415acc:	0041781d 	.word	0x0041781d
  415ad0:	00416da9 	.word	0x00416da9
  415ad4:	00414c49 	.word	0x00414c49
  415ad8:	0042e54c 	.word	0x0042e54c
  415adc:	00416db5 	.word	0x00416db5

00415ae0 <lv_font_get_glyph_dsc_fmt_txt>:
{
  415ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  415ae4:	4607      	mov	r7, r0
  415ae6:	460c      	mov	r4, r1
  415ae8:	4699      	mov	r9, r3
    if(unicode_letter == '\t') {
  415aea:	2a09      	cmp	r2, #9
  415aec:	d034      	beq.n	415b58 <lv_font_get_glyph_dsc_fmt_txt+0x78>
    bool is_tab = false;
  415aee:	2500      	movs	r5, #0
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  415af0:	693e      	ldr	r6, [r7, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
  415af2:	4611      	mov	r1, r2
  415af4:	4638      	mov	r0, r7
  415af6:	4b20      	ldr	r3, [pc, #128]	; (415b78 <lv_font_get_glyph_dsc_fmt_txt+0x98>)
  415af8:	4798      	blx	r3
    if(!gid) return false;
  415afa:	4680      	mov	r8, r0
  415afc:	2800      	cmp	r0, #0
  415afe:	d035      	beq.n	415b6c <lv_font_get_glyph_dsc_fmt_txt+0x8c>
    if(fdsc->kern_dsc) {
  415b00:	68f3      	ldr	r3, [r6, #12]
  415b02:	2b00      	cmp	r3, #0
  415b04:	d030      	beq.n	415b68 <lv_font_get_glyph_dsc_fmt_txt+0x88>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
  415b06:	4649      	mov	r1, r9
  415b08:	4638      	mov	r0, r7
  415b0a:	4b1b      	ldr	r3, [pc, #108]	; (415b78 <lv_font_get_glyph_dsc_fmt_txt+0x98>)
  415b0c:	4798      	blx	r3
        if(gid_next) {
  415b0e:	4602      	mov	r2, r0
  415b10:	bb28      	cbnz	r0, 415b5e <lv_font_get_glyph_dsc_fmt_txt+0x7e>
    int8_t kvalue = 0;
  415b12:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
  415b14:	6871      	ldr	r1, [r6, #4]
  415b16:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
  415b1a:	8a33      	ldrh	r3, [r6, #16]
  415b1c:	fb03 f300 	mul.w	r3, r3, r0
  415b20:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
  415b22:	8848      	ldrh	r0, [r1, #2]
  415b24:	f3c0 100b 	ubfx	r0, r0, #4, #12
    if(is_tab) adv_w *= 2;
  415b28:	b105      	cbz	r5, 415b2c <lv_font_get_glyph_dsc_fmt_txt+0x4c>
  415b2a:	0040      	lsls	r0, r0, #1
    adv_w += kv;
  415b2c:	4403      	add	r3, r0
    adv_w  = (adv_w + (1 << 3)) >> 4;
  415b2e:	3308      	adds	r3, #8
  415b30:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
  415b32:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
  415b34:	794b      	ldrb	r3, [r1, #5]
  415b36:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
  415b38:	790a      	ldrb	r2, [r1, #4]
  415b3a:	8062      	strh	r2, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
  415b3c:	f991 3006 	ldrsb.w	r3, [r1, #6]
  415b40:	80e3      	strh	r3, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
  415b42:	f991 3007 	ldrsb.w	r3, [r1, #7]
  415b46:	8123      	strh	r3, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
  415b48:	7cf3      	ldrb	r3, [r6, #19]
  415b4a:	f3c3 0343 	ubfx	r3, r3, #1, #4
  415b4e:	72a3      	strb	r3, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
  415b50:	b185      	cbz	r5, 415b74 <lv_font_get_glyph_dsc_fmt_txt+0x94>
  415b52:	0052      	lsls	r2, r2, #1
  415b54:	8062      	strh	r2, [r4, #2]
  415b56:	e00a      	b.n	415b6e <lv_font_get_glyph_dsc_fmt_txt+0x8e>
        is_tab = true;
  415b58:	2501      	movs	r5, #1
        unicode_letter = ' ';
  415b5a:	2220      	movs	r2, #32
  415b5c:	e7c8      	b.n	415af0 <lv_font_get_glyph_dsc_fmt_txt+0x10>
            kvalue = get_kern_value(font, gid, gid_next);
  415b5e:	4641      	mov	r1, r8
  415b60:	4638      	mov	r0, r7
  415b62:	4b06      	ldr	r3, [pc, #24]	; (415b7c <lv_font_get_glyph_dsc_fmt_txt+0x9c>)
  415b64:	4798      	blx	r3
  415b66:	e7d5      	b.n	415b14 <lv_font_get_glyph_dsc_fmt_txt+0x34>
    int8_t kvalue = 0;
  415b68:	2000      	movs	r0, #0
  415b6a:	e7d3      	b.n	415b14 <lv_font_get_glyph_dsc_fmt_txt+0x34>
    if(!gid) return false;
  415b6c:	2500      	movs	r5, #0
}
  415b6e:	4628      	mov	r0, r5
  415b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
  415b74:	2501      	movs	r5, #1
  415b76:	e7fa      	b.n	415b6e <lv_font_get_glyph_dsc_fmt_txt+0x8e>
  415b78:	00414abd 	.word	0x00414abd
  415b7c:	00414b95 	.word	0x00414b95

00415b80 <_lv_font_clean_up_fmt_txt>:
{
  415b80:	b508      	push	{r3, lr}
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
  415b82:	4b04      	ldr	r3, [pc, #16]	; (415b94 <_lv_font_clean_up_fmt_txt+0x14>)
  415b84:	6818      	ldr	r0, [r3, #0]
  415b86:	b120      	cbz	r0, 415b92 <_lv_font_clean_up_fmt_txt+0x12>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
  415b88:	4b03      	ldr	r3, [pc, #12]	; (415b98 <_lv_font_clean_up_fmt_txt+0x18>)
  415b8a:	4798      	blx	r3
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
  415b8c:	2200      	movs	r2, #0
  415b8e:	4b01      	ldr	r3, [pc, #4]	; (415b94 <_lv_font_clean_up_fmt_txt+0x14>)
  415b90:	601a      	str	r2, [r3, #0]
  415b92:	bd08      	pop	{r3, pc}
  415b94:	2043a254 	.word	0x2043a254
  415b98:	004175b1 	.word	0x004175b1

00415b9c <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
  415b9c:	b510      	push	{r4, lr}
  415b9e:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
  415ba0:	2134      	movs	r1, #52	; 0x34
  415ba2:	4b13      	ldr	r3, [pc, #76]	; (415bf0 <lv_disp_drv_init+0x54>)
  415ba4:	4798      	blx	r3

    driver->flush_cb         = NULL;
  415ba6:	2300      	movs	r3, #0
  415ba8:	60e3      	str	r3, [r4, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
  415baa:	f44f 72a0 	mov.w	r2, #320	; 0x140
  415bae:	8022      	strh	r2, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
  415bb0:	22f0      	movs	r2, #240	; 0xf0
  415bb2:	8062      	strh	r2, [r4, #2]
    driver->buffer           = NULL;
  415bb4:	6063      	str	r3, [r4, #4]
    driver->rotated          = 0;
  415bb6:	7a22      	ldrb	r2, [r4, #8]
  415bb8:	f363 0241 	bfi	r2, r3, #1, #1
  415bbc:	7222      	strb	r2, [r4, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
  415bbe:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  415bc2:	f042 0207 	orr.w	r2, r2, #7
  415bc6:	f363 02c7 	bfi	r2, r3, #3, #5
  415bca:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  415bce:	22e0      	movs	r2, #224	; 0xe0
  415bd0:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
    driver->dpi = LV_DPI;
  415bd4:	8922      	ldrh	r2, [r4, #8]
  415bd6:	2194      	movs	r1, #148	; 0x94
  415bd8:	f361 028b 	bfi	r2, r1, #2, #10
  415bdc:	8122      	strh	r2, [r4, #8]

#if LV_ANTIALIAS
    driver->antialiasing = true;
  415bde:	b2d2      	uxtb	r2, r2
  415be0:	f042 0201 	orr.w	r2, r2, #1
  415be4:	7222      	strb	r2, [r4, #8]
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
  415be6:	62a3      	str	r3, [r4, #40]	; 0x28
    driver->gpu_fill_cb  = NULL;
  415be8:	62e3      	str	r3, [r4, #44]	; 0x2c

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
  415bea:	6163      	str	r3, [r4, #20]
  415bec:	bd10      	pop	{r4, pc}
  415bee:	bf00      	nop
  415bf0:	00417a21 	.word	0x00417a21

00415bf4 <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
  415bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  415bf6:	4604      	mov	r4, r0
  415bf8:	460d      	mov	r5, r1
  415bfa:	4617      	mov	r7, r2
  415bfc:	461e      	mov	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
  415bfe:	2124      	movs	r1, #36	; 0x24
  415c00:	4b03      	ldr	r3, [pc, #12]	; (415c10 <lv_disp_buf_init+0x1c>)
  415c02:	4798      	blx	r3

    disp_buf->buf1    = buf1;
  415c04:	6025      	str	r5, [r4, #0]
    disp_buf->buf2    = buf2;
  415c06:	6067      	str	r7, [r4, #4]
    disp_buf->buf_act = disp_buf->buf1;
  415c08:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
  415c0a:	60e6      	str	r6, [r4, #12]
  415c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  415c0e:	bf00      	nop
  415c10:	00417a21 	.word	0x00417a21

00415c14 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
  415c14:	4b01      	ldr	r3, [pc, #4]	; (415c1c <lv_disp_get_default+0x8>)
  415c16:	6818      	ldr	r0, [r3, #0]
  415c18:	4770      	bx	lr
  415c1a:	bf00      	nop
  415c1c:	2040c7a8 	.word	0x2040c7a8

00415c20 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
  415c20:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  415c22:	4603      	mov	r3, r0
  415c24:	b138      	cbz	r0, 415c36 <lv_disp_get_hor_res+0x16>

    if(disp == NULL)
  415c26:	b16b      	cbz	r3, 415c44 <lv_disp_get_hor_res+0x24>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
  415c28:	7a1a      	ldrb	r2, [r3, #8]
  415c2a:	f012 0f02 	tst.w	r2, #2
  415c2e:	d006      	beq.n	415c3e <lv_disp_get_hor_res+0x1e>
  415c30:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
  415c34:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  415c36:	4b05      	ldr	r3, [pc, #20]	; (415c4c <lv_disp_get_hor_res+0x2c>)
  415c38:	4798      	blx	r3
  415c3a:	4603      	mov	r3, r0
  415c3c:	e7f3      	b.n	415c26 <lv_disp_get_hor_res+0x6>
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
  415c3e:	f9b3 0000 	ldrsh.w	r0, [r3]
  415c42:	bd08      	pop	{r3, pc}
        return LV_HOR_RES_MAX;
  415c44:	f44f 70a0 	mov.w	r0, #320	; 0x140
}
  415c48:	bd08      	pop	{r3, pc}
  415c4a:	bf00      	nop
  415c4c:	00415c15 	.word	0x00415c15

00415c50 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
  415c50:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  415c52:	4603      	mov	r3, r0
  415c54:	b138      	cbz	r0, 415c66 <lv_disp_get_ver_res+0x16>

    if(disp == NULL)
  415c56:	b16b      	cbz	r3, 415c74 <lv_disp_get_ver_res+0x24>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
  415c58:	7a1a      	ldrb	r2, [r3, #8]
  415c5a:	f012 0f02 	tst.w	r2, #2
  415c5e:	d006      	beq.n	415c6e <lv_disp_get_ver_res+0x1e>
  415c60:	f9b3 0000 	ldrsh.w	r0, [r3]
  415c64:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  415c66:	4b04      	ldr	r3, [pc, #16]	; (415c78 <lv_disp_get_ver_res+0x28>)
  415c68:	4798      	blx	r3
  415c6a:	4603      	mov	r3, r0
  415c6c:	e7f3      	b.n	415c56 <lv_disp_get_ver_res+0x6>
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
  415c6e:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
  415c72:	bd08      	pop	{r3, pc}
        return LV_VER_RES_MAX;
  415c74:	20f0      	movs	r0, #240	; 0xf0
}
  415c76:	bd08      	pop	{r3, pc}
  415c78:	00415c15 	.word	0x00415c15

00415c7c <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
  415c7c:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  415c7e:	4603      	mov	r3, r0
  415c80:	b120      	cbz	r0, 415c8c <lv_disp_get_dpi+0x10>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
  415c82:	b13b      	cbz	r3, 415c94 <lv_disp_get_dpi+0x18>
    return disp->driver.dpi;
  415c84:	8918      	ldrh	r0, [r3, #8]
  415c86:	f3c0 0089 	ubfx	r0, r0, #2, #10
  415c8a:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  415c8c:	4b02      	ldr	r3, [pc, #8]	; (415c98 <lv_disp_get_dpi+0x1c>)
  415c8e:	4798      	blx	r3
  415c90:	4603      	mov	r3, r0
  415c92:	e7f6      	b.n	415c82 <lv_disp_get_dpi+0x6>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
  415c94:	2094      	movs	r0, #148	; 0x94
}
  415c96:	bd08      	pop	{r3, pc}
  415c98:	00415c15 	.word	0x00415c15

00415c9c <lv_disp_get_size_category>:
 * Get the size category of the display based on it's hor. res. and dpi.
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
  415c9c:	b538      	push	{r3, r4, r5, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  415c9e:	4605      	mov	r5, r0
  415ca0:	b1a0      	cbz	r0, 415ccc <lv_disp_get_size_category+0x30>

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
  415ca2:	b1bd      	cbz	r5, 415cd4 <lv_disp_get_size_category+0x38>
    else w = lv_disp_get_hor_res(disp);
  415ca4:	4628      	mov	r0, r5
  415ca6:	4b10      	ldr	r3, [pc, #64]	; (415ce8 <lv_disp_get_size_category+0x4c>)
  415ca8:	4798      	blx	r3
  415caa:	4604      	mov	r4, r0

    uint32_t dpi = lv_disp_get_dpi(disp);
  415cac:	4628      	mov	r0, r5
  415cae:	4b0f      	ldr	r3, [pc, #60]	; (415cec <lv_disp_get_size_category+0x50>)
  415cb0:	4798      	blx	r3

    w = w * 10 / dpi;
  415cb2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  415cb6:	0063      	lsls	r3, r4, #1
  415cb8:	fbb3 f0f0 	udiv	r0, r3, r0

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
  415cbc:	281d      	cmp	r0, #29
  415cbe:	d90c      	bls.n	415cda <lv_disp_get_size_category+0x3e>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
  415cc0:	2831      	cmp	r0, #49	; 0x31
  415cc2:	d90c      	bls.n	415cde <lv_disp_get_size_category+0x42>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
  415cc4:	2845      	cmp	r0, #69	; 0x45
  415cc6:	d80c      	bhi.n	415ce2 <lv_disp_get_size_category+0x46>
  415cc8:	2002      	movs	r0, #2
  415cca:	bd38      	pop	{r3, r4, r5, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  415ccc:	4b08      	ldr	r3, [pc, #32]	; (415cf0 <lv_disp_get_size_category+0x54>)
  415cce:	4798      	blx	r3
  415cd0:	4605      	mov	r5, r0
  415cd2:	e7e6      	b.n	415ca2 <lv_disp_get_size_category+0x6>
    if(disp == NULL) w = LV_HOR_RES_MAX;
  415cd4:	f44f 74a0 	mov.w	r4, #320	; 0x140
  415cd8:	e7e8      	b.n	415cac <lv_disp_get_size_category+0x10>
    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
  415cda:	2000      	movs	r0, #0
  415cdc:	bd38      	pop	{r3, r4, r5, pc}
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
  415cde:	2001      	movs	r0, #1
  415ce0:	bd38      	pop	{r3, r4, r5, pc}
    else return LV_DISP_SIZE_EXTRA_LARGE;
  415ce2:	2003      	movs	r0, #3
}
  415ce4:	bd38      	pop	{r3, r4, r5, pc}
  415ce6:	bf00      	nop
  415ce8:	00415c21 	.word	0x00415c21
  415cec:	00415c7d 	.word	0x00415c7d
  415cf0:	00415c15 	.word	0x00415c15

00415cf4 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
  415cf4:	6842      	ldr	r2, [r0, #4]
  415cf6:	2300      	movs	r3, #0
  415cf8:	6193      	str	r3, [r2, #24]
    disp_drv->buffer->flushing_last = 0;
  415cfa:	6842      	ldr	r2, [r0, #4]
  415cfc:	61d3      	str	r3, [r2, #28]
  415cfe:	4770      	bx	lr

00415d00 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
  415d00:	b508      	push	{r3, lr}
    if(disp == NULL)
  415d02:	b120      	cbz	r0, 415d0e <lv_disp_get_next+0xe>
  415d04:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
  415d06:	4804      	ldr	r0, [pc, #16]	; (415d18 <lv_disp_get_next+0x18>)
  415d08:	4b04      	ldr	r3, [pc, #16]	; (415d1c <lv_disp_get_next+0x1c>)
  415d0a:	4798      	blx	r3
}
  415d0c:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
  415d0e:	4802      	ldr	r0, [pc, #8]	; (415d18 <lv_disp_get_next+0x18>)
  415d10:	4b03      	ldr	r3, [pc, #12]	; (415d20 <lv_disp_get_next+0x20>)
  415d12:	4798      	blx	r3
  415d14:	bd08      	pop	{r3, pc}
  415d16:	bf00      	nop
  415d18:	2043a264 	.word	0x2043a264
  415d1c:	004170cd 	.word	0x004170cd
  415d20:	004170b9 	.word	0x004170b9

00415d24 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
  415d24:	6840      	ldr	r0, [r0, #4]
  415d26:	4770      	bx	lr

00415d28 <lv_disp_get_inv_buf_size>:
 * Get the number of areas in the buffer
 * @return number of invalid areas
 */
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)
{
    return disp->inv_p;
  415d28:	f8b0 0182 	ldrh.w	r0, [r0, #386]	; 0x182
}
  415d2c:	f3c0 0009 	ubfx	r0, r0, #0, #10
  415d30:	4770      	bx	lr

00415d32 <_lv_disp_pop_from_inv_buf>:
 * @param num number of areas to delete
 */
void _lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)
{

    if(disp->inv_p < num)
  415d32:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  415d36:	f3c3 0309 	ubfx	r3, r3, #0, #10
  415d3a:	428b      	cmp	r3, r1
  415d3c:	db07      	blt.n	415d4e <_lv_disp_pop_from_inv_buf+0x1c>
        disp->inv_p = 0;
    else
        disp->inv_p -= num;
  415d3e:	1a5b      	subs	r3, r3, r1
  415d40:	f8b0 2182 	ldrh.w	r2, [r0, #386]	; 0x182
  415d44:	f363 0209 	bfi	r2, r3, #0, #10
  415d48:	f8a0 2182 	strh.w	r2, [r0, #386]	; 0x182
  415d4c:	4770      	bx	lr
        disp->inv_p = 0;
  415d4e:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  415d52:	f36f 0309 	bfc	r3, #0, #10
  415d56:	f8a0 3182 	strh.w	r3, [r0, #386]	; 0x182
  415d5a:	4770      	bx	lr

00415d5c <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
  415d5c:	6843      	ldr	r3, [r0, #4]
  415d5e:	681a      	ldr	r2, [r3, #0]
  415d60:	b12a      	cbz	r2, 415d6e <lv_disp_is_double_buf+0x12>
  415d62:	685b      	ldr	r3, [r3, #4]
  415d64:	b10b      	cbz	r3, 415d6a <lv_disp_is_double_buf+0xe>
        return true;
  415d66:	2001      	movs	r0, #1
    else
        return false;
}
  415d68:	4770      	bx	lr
        return false;
  415d6a:	2000      	movs	r0, #0
  415d6c:	4770      	bx	lr
  415d6e:	2000      	movs	r0, #0
  415d70:	4770      	bx	lr
	...

00415d74 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
  415d74:	b538      	push	{r3, r4, r5, lr}
  415d76:	4605      	mov	r5, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
  415d78:	f9b0 4000 	ldrsh.w	r4, [r0]
  415d7c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  415d80:	fb03 f404 	mul.w	r4, r3, r4

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
  415d84:	4b06      	ldr	r3, [pc, #24]	; (415da0 <lv_disp_is_true_double_buf+0x2c>)
  415d86:	4798      	blx	r3
  415d88:	b130      	cbz	r0, 415d98 <lv_disp_is_true_double_buf+0x24>
  415d8a:	4603      	mov	r3, r0
  415d8c:	686a      	ldr	r2, [r5, #4]
  415d8e:	68d2      	ldr	r2, [r2, #12]
  415d90:	4294      	cmp	r4, r2
  415d92:	d002      	beq.n	415d9a <lv_disp_is_true_double_buf+0x26>
        return true;
    }
    else {
        return false;
  415d94:	2300      	movs	r3, #0
  415d96:	e000      	b.n	415d9a <lv_disp_is_true_double_buf+0x26>
  415d98:	2300      	movs	r3, #0
    }
}
  415d9a:	4618      	mov	r0, r3
  415d9c:	bd38      	pop	{r3, r4, r5, pc}
  415d9e:	bf00      	nop
  415da0:	00415d5d 	.word	0x00415d5d

00415da4 <lv_disp_drv_register>:
{
  415da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  415da6:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
  415da8:	483b      	ldr	r0, [pc, #236]	; (415e98 <lv_disp_drv_register+0xf4>)
  415daa:	4b3c      	ldr	r3, [pc, #240]	; (415e9c <lv_disp_drv_register+0xf8>)
  415dac:	4798      	blx	r3
    if(!disp) {
  415dae:	4604      	mov	r4, r0
  415db0:	2800      	cmp	r0, #0
  415db2:	d05c      	beq.n	415e6e <lv_disp_drv_register+0xca>
    _lv_memset_00(disp, sizeof(lv_disp_t));
  415db4:	f44f 71c4 	mov.w	r1, #392	; 0x188
  415db8:	4b39      	ldr	r3, [pc, #228]	; (415ea0 <lv_disp_drv_register+0xfc>)
  415dba:	4798      	blx	r3
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
  415dbc:	2234      	movs	r2, #52	; 0x34
  415dbe:	4629      	mov	r1, r5
  415dc0:	4620      	mov	r0, r4
  415dc2:	4b38      	ldr	r3, [pc, #224]	; (415ea4 <lv_disp_drv_register+0x100>)
  415dc4:	4798      	blx	r3
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
  415dc6:	214c      	movs	r1, #76	; 0x4c
  415dc8:	f104 0038 	add.w	r0, r4, #56	; 0x38
  415dcc:	4b36      	ldr	r3, [pc, #216]	; (415ea8 <lv_disp_drv_register+0x104>)
  415dce:	4798      	blx	r3
    disp->last_activity_time = 0;
  415dd0:	2300      	movs	r3, #0
  415dd2:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
    if(disp_def == NULL) disp_def = disp;
  415dd6:	4b35      	ldr	r3, [pc, #212]	; (415eac <lv_disp_drv_register+0x108>)
  415dd8:	681b      	ldr	r3, [r3, #0]
  415dda:	2b00      	cmp	r3, #0
  415ddc:	d051      	beq.n	415e82 <lv_disp_drv_register+0xde>
    lv_disp_t * disp_def_tmp = disp_def;
  415dde:	4b33      	ldr	r3, [pc, #204]	; (415eac <lv_disp_drv_register+0x108>)
  415de0:	681f      	ldr	r7, [r3, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
  415de2:	601c      	str	r4, [r3, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
  415de4:	4623      	mov	r3, r4
  415de6:	2203      	movs	r2, #3
  415de8:	211e      	movs	r1, #30
  415dea:	4831      	ldr	r0, [pc, #196]	; (415eb0 <lv_disp_drv_register+0x10c>)
  415dec:	4d31      	ldr	r5, [pc, #196]	; (415eb4 <lv_disp_drv_register+0x110>)
  415dee:	47a8      	blx	r5
  415df0:	6360      	str	r0, [r4, #52]	; 0x34
    LV_ASSERT_MEM(disp->refr_task);
  415df2:	4b31      	ldr	r3, [pc, #196]	; (415eb8 <lv_disp_drv_register+0x114>)
  415df4:	4798      	blx	r3
  415df6:	2800      	cmp	r0, #0
  415df8:	d046      	beq.n	415e88 <lv_disp_drv_register+0xe4>
    if(disp->refr_task == NULL) return NULL;
  415dfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
  415dfc:	2b00      	cmp	r3, #0
  415dfe:	d049      	beq.n	415e94 <lv_disp_drv_register+0xf0>
    disp->inv_p = 0;
  415e00:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
  415e04:	f36f 0309 	bfc	r3, #0, #10
  415e08:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
    disp->last_activity_time = 0;
  415e0c:	2500      	movs	r5, #0
  415e0e:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
    disp->bg_color = LV_COLOR_WHITE;
  415e12:	4b2a      	ldr	r3, [pc, #168]	; (415ebc <lv_disp_drv_register+0x118>)
  415e14:	881b      	ldrh	r3, [r3, #0]
  415e16:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    disp->bg_img = NULL;
  415e1a:	65e5      	str	r5, [r4, #92]	; 0x5c
    disp->bg_opa = LV_OPA_COVER;
  415e1c:	23ff      	movs	r3, #255	; 0xff
  415e1e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    disp->prev_scr  = NULL;
  415e22:	64a5      	str	r5, [r4, #72]	; 0x48
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
  415e24:	4629      	mov	r1, r5
  415e26:	4628      	mov	r0, r5
  415e28:	4e25      	ldr	r6, [pc, #148]	; (415ec0 <lv_disp_drv_register+0x11c>)
  415e2a:	47b0      	blx	r6
  415e2c:	6460      	str	r0, [r4, #68]	; 0x44
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
  415e2e:	4629      	mov	r1, r5
  415e30:	4628      	mov	r0, r5
  415e32:	47b0      	blx	r6
  415e34:	6520      	str	r0, [r4, #80]	; 0x50
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
  415e36:	4629      	mov	r1, r5
  415e38:	4628      	mov	r0, r5
  415e3a:	47b0      	blx	r6
  415e3c:	6560      	str	r0, [r4, #84]	; 0x54
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
  415e3e:	4629      	mov	r1, r5
  415e40:	6d20      	ldr	r0, [r4, #80]	; 0x50
  415e42:	4e20      	ldr	r6, [pc, #128]	; (415ec4 <lv_disp_drv_register+0x120>)
  415e44:	47b0      	blx	r6
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
  415e46:	4629      	mov	r1, r5
  415e48:	6d60      	ldr	r0, [r4, #84]	; 0x54
  415e4a:	47b0      	blx	r6
    lv_obj_set_click(disp->top_layer, false);
  415e4c:	4629      	mov	r1, r5
  415e4e:	6d20      	ldr	r0, [r4, #80]	; 0x50
  415e50:	4e1d      	ldr	r6, [pc, #116]	; (415ec8 <lv_disp_drv_register+0x124>)
  415e52:	47b0      	blx	r6
    lv_obj_set_click(disp->sys_layer, false);
  415e54:	4629      	mov	r1, r5
  415e56:	6d60      	ldr	r0, [r4, #84]	; 0x54
  415e58:	47b0      	blx	r6
    lv_obj_invalidate(disp->act_scr);
  415e5a:	6c60      	ldr	r0, [r4, #68]	; 0x44
  415e5c:	4b1b      	ldr	r3, [pc, #108]	; (415ecc <lv_disp_drv_register+0x128>)
  415e5e:	4798      	blx	r3
    disp_def = disp_def_tmp; /*Revert the default display*/
  415e60:	4b12      	ldr	r3, [pc, #72]	; (415eac <lv_disp_drv_register+0x108>)
  415e62:	601f      	str	r7, [r3, #0]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
  415e64:	6b60      	ldr	r0, [r4, #52]	; 0x34
  415e66:	4b1a      	ldr	r3, [pc, #104]	; (415ed0 <lv_disp_drv_register+0x12c>)
  415e68:	4798      	blx	r3
}
  415e6a:	4620      	mov	r0, r4
  415e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_ASSERT_MEM(disp);
  415e6e:	4b12      	ldr	r3, [pc, #72]	; (415eb8 <lv_disp_drv_register+0x114>)
  415e70:	4798      	blx	r3
  415e72:	2800      	cmp	r0, #0
  415e74:	d1f9      	bne.n	415e6a <lv_disp_drv_register+0xc6>
  415e76:	4622      	mov	r2, r4
  415e78:	2300      	movs	r3, #0
  415e7a:	4816      	ldr	r0, [pc, #88]	; (415ed4 <lv_disp_drv_register+0x130>)
  415e7c:	4916      	ldr	r1, [pc, #88]	; (415ed8 <lv_disp_drv_register+0x134>)
  415e7e:	4788      	blx	r1
  415e80:	e7fe      	b.n	415e80 <lv_disp_drv_register+0xdc>
    if(disp_def == NULL) disp_def = disp;
  415e82:	4b0a      	ldr	r3, [pc, #40]	; (415eac <lv_disp_drv_register+0x108>)
  415e84:	601c      	str	r4, [r3, #0]
  415e86:	e7aa      	b.n	415dde <lv_disp_drv_register+0x3a>
    LV_ASSERT_MEM(disp->refr_task);
  415e88:	6b62      	ldr	r2, [r4, #52]	; 0x34
  415e8a:	2300      	movs	r3, #0
  415e8c:	4811      	ldr	r0, [pc, #68]	; (415ed4 <lv_disp_drv_register+0x130>)
  415e8e:	4912      	ldr	r1, [pc, #72]	; (415ed8 <lv_disp_drv_register+0x134>)
  415e90:	4788      	blx	r1
  415e92:	e7fe      	b.n	415e92 <lv_disp_drv_register+0xee>
    if(disp->refr_task == NULL) return NULL;
  415e94:	2400      	movs	r4, #0
  415e96:	e7e8      	b.n	415e6a <lv_disp_drv_register+0xc6>
  415e98:	2043a264 	.word	0x2043a264
  415e9c:	00417021 	.word	0x00417021
  415ea0:	00417a21 	.word	0x00417a21
  415ea4:	004176fd 	.word	0x004176fd
  415ea8:	0041700f 	.word	0x0041700f
  415eac:	2040c7a8 	.word	0x2040c7a8
  415eb0:	00409b89 	.word	0x00409b89
  415eb4:	00418459 	.word	0x00418459
  415eb8:	00416da9 	.word	0x00416da9
  415ebc:	00431b2c 	.word	0x00431b2c
  415ec0:	004067bd 	.word	0x004067bd
  415ec4:	00407909 	.word	0x00407909
  415ec8:	004056c5 	.word	0x004056c5
  415ecc:	00405f01 	.word	0x00405f01
  415ed0:	00418821 	.word	0x00418821
  415ed4:	0042e54c 	.word	0x0042e54c
  415ed8:	00416db5 	.word	0x00416db5

00415edc <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
  415edc:	b510      	push	{r4, lr}
  415ede:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_indev_drv_t));
  415ee0:	211c      	movs	r1, #28
  415ee2:	4b08      	ldr	r3, [pc, #32]	; (415f04 <lv_indev_drv_init+0x28>)
  415ee4:	4798      	blx	r3

    driver->type                 = LV_INDEV_TYPE_NONE;
  415ee6:	2300      	movs	r3, #0
  415ee8:	7023      	strb	r3, [r4, #0]
    driver->drag_limit           = LV_INDEV_DEF_DRAG_LIMIT;
  415eea:	230a      	movs	r3, #10
  415eec:	7523      	strb	r3, [r4, #20]
    driver->drag_throw           = LV_INDEV_DEF_DRAG_THROW;
  415eee:	7563      	strb	r3, [r4, #21]
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
  415ef0:	f44f 73c8 	mov.w	r3, #400	; 0x190
  415ef4:	8323      	strh	r3, [r4, #24]
    driver->long_press_rep_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
  415ef6:	2364      	movs	r3, #100	; 0x64
  415ef8:	8363      	strh	r3, [r4, #26]
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
  415efa:	2332      	movs	r3, #50	; 0x32
  415efc:	75e3      	strb	r3, [r4, #23]
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
  415efe:	2303      	movs	r3, #3
  415f00:	75a3      	strb	r3, [r4, #22]
  415f02:	bd10      	pop	{r4, pc}
  415f04:	00417a21 	.word	0x00417a21

00415f08 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
  415f08:	b538      	push	{r3, r4, r5, lr}
  415f0a:	4605      	mov	r5, r0

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
  415f0c:	68c3      	ldr	r3, [r0, #12]
  415f0e:	b313      	cbz	r3, 415f56 <lv_indev_drv_register+0x4e>

    if(driver->disp == NULL) {
  415f10:	68eb      	ldr	r3, [r5, #12]
  415f12:	2b00      	cmp	r3, #0
  415f14:	d02d      	beq.n	415f72 <lv_indev_drv_register+0x6a>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
  415f16:	4818      	ldr	r0, [pc, #96]	; (415f78 <lv_indev_drv_register+0x70>)
  415f18:	4b18      	ldr	r3, [pc, #96]	; (415f7c <lv_indev_drv_register+0x74>)
  415f1a:	4798      	blx	r3
    if(!indev) {
  415f1c:	4604      	mov	r4, r0
  415f1e:	b1f0      	cbz	r0, 415f5e <lv_indev_drv_register+0x56>
        LV_ASSERT_MEM(indev);
        return NULL;
    }

    _lv_memset_00(indev, sizeof(lv_indev_t));
  415f20:	2160      	movs	r1, #96	; 0x60
  415f22:	4b17      	ldr	r3, [pc, #92]	; (415f80 <lv_indev_drv_register+0x78>)
  415f24:	4798      	blx	r3
    _lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
  415f26:	221c      	movs	r2, #28
  415f28:	4629      	mov	r1, r5
  415f2a:	4620      	mov	r0, r4
  415f2c:	4b15      	ldr	r3, [pc, #84]	; (415f84 <lv_indev_drv_register+0x7c>)
  415f2e:	4798      	blx	r3

    indev->proc.reset_query = 1;
  415f30:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  415f34:	f043 0302 	orr.w	r3, r3, #2
  415f38:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    indev->cursor           = NULL;
  415f3c:	2300      	movs	r3, #0
  415f3e:	6563      	str	r3, [r4, #84]	; 0x54
    indev->group            = NULL;
  415f40:	65a3      	str	r3, [r4, #88]	; 0x58
    indev->btn_points       = NULL;
  415f42:	65e3      	str	r3, [r4, #92]	; 0x5c

    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
  415f44:	4623      	mov	r3, r4
  415f46:	2204      	movs	r2, #4
  415f48:	211e      	movs	r1, #30
  415f4a:	480f      	ldr	r0, [pc, #60]	; (415f88 <lv_indev_drv_register+0x80>)
  415f4c:	4d0f      	ldr	r5, [pc, #60]	; (415f8c <lv_indev_drv_register+0x84>)
  415f4e:	47a8      	blx	r5
  415f50:	6120      	str	r0, [r4, #16]

    return indev;
}
  415f52:	4620      	mov	r0, r4
  415f54:	bd38      	pop	{r3, r4, r5, pc}
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
  415f56:	4b0e      	ldr	r3, [pc, #56]	; (415f90 <lv_indev_drv_register+0x88>)
  415f58:	4798      	blx	r3
  415f5a:	60e8      	str	r0, [r5, #12]
  415f5c:	e7d8      	b.n	415f10 <lv_indev_drv_register+0x8>
        LV_ASSERT_MEM(indev);
  415f5e:	4b0d      	ldr	r3, [pc, #52]	; (415f94 <lv_indev_drv_register+0x8c>)
  415f60:	4798      	blx	r3
  415f62:	2800      	cmp	r0, #0
  415f64:	d1f5      	bne.n	415f52 <lv_indev_drv_register+0x4a>
  415f66:	4622      	mov	r2, r4
  415f68:	2300      	movs	r3, #0
  415f6a:	480b      	ldr	r0, [pc, #44]	; (415f98 <lv_indev_drv_register+0x90>)
  415f6c:	490b      	ldr	r1, [pc, #44]	; (415f9c <lv_indev_drv_register+0x94>)
  415f6e:	4788      	blx	r1
  415f70:	e7fe      	b.n	415f70 <lv_indev_drv_register+0x68>
        return NULL;
  415f72:	2400      	movs	r4, #0
  415f74:	e7ed      	b.n	415f52 <lv_indev_drv_register+0x4a>
  415f76:	bf00      	nop
  415f78:	2043a258 	.word	0x2043a258
  415f7c:	00417021 	.word	0x00417021
  415f80:	00417a21 	.word	0x00417a21
  415f84:	004176fd 	.word	0x004176fd
  415f88:	00405261 	.word	0x00405261
  415f8c:	00418459 	.word	0x00418459
  415f90:	00415c15 	.word	0x00415c15
  415f94:	00416da9 	.word	0x00416da9
  415f98:	0042e54c 	.word	0x0042e54c
  415f9c:	00416db5 	.word	0x00416db5

00415fa0 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
  415fa0:	b508      	push	{r3, lr}
    if(indev == NULL)
  415fa2:	b120      	cbz	r0, 415fae <lv_indev_get_next+0xe>
  415fa4:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
  415fa6:	4804      	ldr	r0, [pc, #16]	; (415fb8 <lv_indev_get_next+0x18>)
  415fa8:	4b04      	ldr	r3, [pc, #16]	; (415fbc <lv_indev_get_next+0x1c>)
  415faa:	4798      	blx	r3
}
  415fac:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
  415fae:	4802      	ldr	r0, [pc, #8]	; (415fb8 <lv_indev_get_next+0x18>)
  415fb0:	4b03      	ldr	r3, [pc, #12]	; (415fc0 <lv_indev_get_next+0x20>)
  415fb2:	4798      	blx	r3
  415fb4:	bd08      	pop	{r3, pc}
  415fb6:	bf00      	nop
  415fb8:	2043a258 	.word	0x2043a258
  415fbc:	004170cd 	.word	0x004170cd
  415fc0:	004170b9 	.word	0x004170b9

00415fc4 <_lv_indev_read>:
 * @param indev pointer to an input device
 * @param data input device will write its data here
 * @return false: no more data; true: there more data to read (buffered)
 */
bool _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
  415fc4:	b538      	push	{r3, r4, r5, lr}
  415fc6:	4604      	mov	r4, r0
  415fc8:	460d      	mov	r5, r1
    bool cont = false;

    _lv_memset_00(data, sizeof(lv_indev_data_t));
  415fca:	2110      	movs	r1, #16
  415fcc:	4628      	mov	r0, r5
  415fce:	4b10      	ldr	r3, [pc, #64]	; (416010 <_lv_indev_read+0x4c>)
  415fd0:	4798      	blx	r3

    /* For touchpad sometimes users don't the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
  415fd2:	7823      	ldrb	r3, [r4, #0]
  415fd4:	2b01      	cmp	r3, #1
  415fd6:	d009      	beq.n	415fec <_lv_indev_read+0x28>
        data->point.x = indev->proc.types.pointer.act_point.x;
        data->point.y = indev->proc.types.pointer.act_point.y;
    }
    /*Similarly set at least the last key in case of the user doesn't set it on release*/
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
  415fd8:	2b02      	cmp	r3, #2
  415fda:	d00e      	beq.n	415ffa <_lv_indev_read+0x36>
        data->key = indev->proc.types.keypad.last_key;
    }
    /*For compatibility assume that used button was enter (encoder push) */
    else if(indev->driver.type == LV_INDEV_TYPE_ENCODER) {
  415fdc:	2b04      	cmp	r3, #4
  415fde:	d00f      	beq.n	416000 <_lv_indev_read+0x3c>
        data->key = LV_KEY_ENTER;
        data->enc_diff = 0;
    }

    if(indev->driver.read_cb) {
  415fe0:	6863      	ldr	r3, [r4, #4]
  415fe2:	b193      	cbz	r3, 41600a <_lv_indev_read+0x46>
        LV_LOG_TRACE("indev read started");
        cont = indev->driver.read_cb(&indev->driver, data);
  415fe4:	4629      	mov	r1, r5
  415fe6:	4620      	mov	r0, r4
  415fe8:	4798      	blx	r3
  415fea:	bd38      	pop	{r3, r4, r5, pc}
        data->point.x = indev->proc.types.pointer.act_point.x;
  415fec:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  415ff0:	802b      	strh	r3, [r5, #0]
        data->point.y = indev->proc.types.pointer.act_point.y;
  415ff2:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  415ff6:	806b      	strh	r3, [r5, #2]
  415ff8:	e7f2      	b.n	415fe0 <_lv_indev_read+0x1c>
        data->key = indev->proc.types.keypad.last_key;
  415ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
  415ffc:	606b      	str	r3, [r5, #4]
  415ffe:	e7ef      	b.n	415fe0 <_lv_indev_read+0x1c>
        data->key = LV_KEY_ENTER;
  416000:	230a      	movs	r3, #10
  416002:	606b      	str	r3, [r5, #4]
        data->enc_diff = 0;
  416004:	2300      	movs	r3, #0
  416006:	81ab      	strh	r3, [r5, #12]
  416008:	e7ea      	b.n	415fe0 <_lv_indev_read+0x1c>
    bool cont = false;
  41600a:	2000      	movs	r0, #0
    else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
}
  41600c:	bd38      	pop	{r3, r4, r5, pc}
  41600e:	bf00      	nop
  416010:	00417a21 	.word	0x00417a21

00416014 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
  416014:	2200      	movs	r2, #0
  416016:	4b03      	ldr	r3, [pc, #12]	; (416024 <lv_tick_inc+0x10>)
  416018:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
  41601a:	4a03      	ldr	r2, [pc, #12]	; (416028 <lv_tick_inc+0x14>)
  41601c:	6813      	ldr	r3, [r2, #0]
  41601e:	4418      	add	r0, r3
  416020:	6010      	str	r0, [r2, #0]
  416022:	4770      	bx	lr
  416024:	2040c7b0 	.word	0x2040c7b0
  416028:	2040c7ac 	.word	0x2040c7ac

0041602c <lv_tick_get>:
     * This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     * If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     * until `tick_irq_flag` remains `1`. */
    uint32_t result;
    do {
        tick_irq_flag = 1;
  41602c:	4b04      	ldr	r3, [pc, #16]	; (416040 <lv_tick_get+0x14>)
  41602e:	2201      	movs	r2, #1
  416030:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
  416032:	4a04      	ldr	r2, [pc, #16]	; (416044 <lv_tick_get+0x18>)
  416034:	6810      	ldr	r0, [r2, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle */
  416036:	781b      	ldrb	r3, [r3, #0]
  416038:	2b00      	cmp	r3, #0
  41603a:	d0f7      	beq.n	41602c <lv_tick_get>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
  41603c:	4770      	bx	lr
  41603e:	bf00      	nop
  416040:	2040c7b0 	.word	0x2040c7b0
  416044:	2040c7ac 	.word	0x2040c7ac

00416048 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
  416048:	b510      	push	{r4, lr}
  41604a:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
  41604c:	4b03      	ldr	r3, [pc, #12]	; (41605c <lv_tick_elaps+0x14>)
  41604e:	4798      	blx	r3

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
  416050:	42a0      	cmp	r0, r4
  416052:	d201      	bcs.n	416058 <lv_tick_elaps+0x10>
        prev_tick = act_time - prev_tick;
    }
    else {
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
  416054:	1b00      	subs	r0, r0, r4
    }

    return prev_tick;
}
  416056:	bd10      	pop	{r4, pc}
        prev_tick = act_time - prev_tick;
  416058:	1b00      	subs	r0, r0, r4
  41605a:	bd10      	pop	{r4, pc}
  41605c:	0041602d 	.word	0x0041602d

00416060 <lv_anim_path_linear>:
{
    LV_UNUSED(path);

    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
  416060:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  416062:	6a88      	ldr	r0, [r1, #40]	; 0x28
  416064:	4282      	cmp	r2, r0
  416066:	d00b      	beq.n	416080 <lv_anim_path_linear+0x20>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    }
    else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
  416068:	0280      	lsls	r0, r0, #10
  41606a:	fb90 f0f2 	sdiv	r0, r0, r2
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
  41606e:	6a0b      	ldr	r3, [r1, #32]
  416070:	698a      	ldr	r2, [r1, #24]
  416072:	1a9b      	subs	r3, r3, r2
  416074:	fb00 f003 	mul.w	r0, r0, r3
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
  416078:	eb02 20a0 	add.w	r0, r2, r0, asr #10

    return (lv_anim_value_t)new_value;
}
  41607c:	b200      	sxth	r0, r0
  41607e:	4770      	bx	lr
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
  416080:	f44f 6080 	mov.w	r0, #1024	; 0x400
  416084:	e7f3      	b.n	41606e <lv_anim_path_linear+0xe>
	...

00416088 <anim_mark_list_change>:
    }

    return anim_list_changed;
}
static void anim_mark_list_change(void)
{
  416088:	b508      	push	{r3, lr}
    anim_list_changed = true;
  41608a:	2201      	movs	r2, #1
  41608c:	4b08      	ldr	r3, [pc, #32]	; (4160b0 <anim_mark_list_change+0x28>)
  41608e:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
  416090:	4808      	ldr	r0, [pc, #32]	; (4160b4 <anim_mark_list_change+0x2c>)
  416092:	4b09      	ldr	r3, [pc, #36]	; (4160b8 <anim_mark_list_change+0x30>)
  416094:	4798      	blx	r3
  416096:	b128      	cbz	r0, 4160a4 <anim_mark_list_change+0x1c>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
  416098:	2104      	movs	r1, #4
  41609a:	4b08      	ldr	r3, [pc, #32]	; (4160bc <anim_mark_list_change+0x34>)
  41609c:	6818      	ldr	r0, [r3, #0]
  41609e:	4b08      	ldr	r3, [pc, #32]	; (4160c0 <anim_mark_list_change+0x38>)
  4160a0:	4798      	blx	r3
  4160a2:	bd08      	pop	{r3, pc}
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
  4160a4:	2100      	movs	r1, #0
  4160a6:	4b05      	ldr	r3, [pc, #20]	; (4160bc <anim_mark_list_change+0x34>)
  4160a8:	6818      	ldr	r0, [r3, #0]
  4160aa:	4b05      	ldr	r3, [pc, #20]	; (4160c0 <anim_mark_list_change+0x38>)
  4160ac:	4798      	blx	r3
  4160ae:	bd08      	pop	{r3, pc}
  4160b0:	2040c7b8 	.word	0x2040c7b8
  4160b4:	2043a328 	.word	0x2043a328
  4160b8:	004170b9 	.word	0x004170b9
  4160bc:	2040c7b4 	.word	0x2040c7b4
  4160c0:	004187ad 	.word	0x004187ad

004160c4 <anim_ready_handler>:
{
  4160c4:	b510      	push	{r4, lr}
  4160c6:	b092      	sub	sp, #72	; 0x48
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
  4160c8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  4160cc:	f013 0301 	ands.w	r3, r3, #1
  4160d0:	d107      	bne.n	4160e2 <anim_ready_handler+0x1e>
  4160d2:	8f02      	ldrh	r2, [r0, #56]	; 0x38
  4160d4:	b12a      	cbz	r2, 4160e2 <anim_ready_handler+0x1e>
  4160d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4160da:	428a      	cmp	r2, r1
  4160dc:	d001      	beq.n	4160e2 <anim_ready_handler+0x1e>
        a->repeat_cnt--;
  4160de:	3a01      	subs	r2, #1
  4160e0:	8702      	strh	r2, [r0, #56]	; 0x38
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
  4160e2:	8f02      	ldrh	r2, [r0, #56]	; 0x38
  4160e4:	b9b2      	cbnz	r2, 416114 <anim_ready_handler+0x50>
  4160e6:	6b02      	ldr	r2, [r0, #48]	; 0x30
  4160e8:	b102      	cbz	r2, 4160ec <anim_ready_handler+0x28>
  4160ea:	b19b      	cbz	r3, 416114 <anim_ready_handler+0x50>
  4160ec:	4604      	mov	r4, r0
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
  4160ee:	2244      	movs	r2, #68	; 0x44
  4160f0:	4601      	mov	r1, r0
  4160f2:	a801      	add	r0, sp, #4
  4160f4:	4b16      	ldr	r3, [pc, #88]	; (416150 <anim_ready_handler+0x8c>)
  4160f6:	4798      	blx	r3
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
  4160f8:	4621      	mov	r1, r4
  4160fa:	4816      	ldr	r0, [pc, #88]	; (416154 <anim_ready_handler+0x90>)
  4160fc:	4b16      	ldr	r3, [pc, #88]	; (416158 <anim_ready_handler+0x94>)
  4160fe:	4798      	blx	r3
        lv_mem_free(a);
  416100:	4620      	mov	r0, r4
  416102:	4b16      	ldr	r3, [pc, #88]	; (41615c <anim_ready_handler+0x98>)
  416104:	4798      	blx	r3
        anim_mark_list_change();
  416106:	4b16      	ldr	r3, [pc, #88]	; (416160 <anim_ready_handler+0x9c>)
  416108:	4798      	blx	r3
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
  41610a:	9b04      	ldr	r3, [sp, #16]
  41610c:	b1e3      	cbz	r3, 416148 <anim_ready_handler+0x84>
  41610e:	a801      	add	r0, sp, #4
  416110:	4798      	blx	r3
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
  416112:	e019      	b.n	416148 <anim_ready_handler+0x84>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
  416114:	6b42      	ldr	r2, [r0, #52]	; 0x34
  416116:	4252      	negs	r2, r2
  416118:	6282      	str	r2, [r0, #40]	; 0x28
        if(a->playback_time != 0) {
  41611a:	6b02      	ldr	r2, [r0, #48]	; 0x30
  41611c:	b1a2      	cbz	r2, 416148 <anim_ready_handler+0x84>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
  41611e:	b913      	cbnz	r3, 416126 <anim_ready_handler+0x62>
  416120:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  416122:	4249      	negs	r1, r1
  416124:	6281      	str	r1, [r0, #40]	; 0x28
            a->playback_now = a->playback_now == 0 ? 1 : 0;
  416126:	f083 0301 	eor.w	r3, r3, #1
  41612a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
  41612e:	f363 0100 	bfi	r1, r3, #0, #1
  416132:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
            tmp      = a->start;
  416136:	6983      	ldr	r3, [r0, #24]
            a->start = a->end;
  416138:	6a04      	ldr	r4, [r0, #32]
  41613a:	6184      	str	r4, [r0, #24]
            a->end   = tmp;
  41613c:	6203      	str	r3, [r0, #32]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
  41613e:	f011 0f01 	tst.w	r1, #1
  416142:	d100      	bne.n	416146 <anim_ready_handler+0x82>
  416144:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  416146:	6242      	str	r2, [r0, #36]	; 0x24
}
  416148:	4b06      	ldr	r3, [pc, #24]	; (416164 <anim_ready_handler+0xa0>)
  41614a:	7818      	ldrb	r0, [r3, #0]
  41614c:	b012      	add	sp, #72	; 0x48
  41614e:	bd10      	pop	{r4, pc}
  416150:	004176fd 	.word	0x004176fd
  416154:	2043a328 	.word	0x2043a328
  416158:	00417175 	.word	0x00417175
  41615c:	004175b1 	.word	0x004175b1
  416160:	00416089 	.word	0x00416089
  416164:	2040c7b8 	.word	0x2040c7b8

00416168 <anim_task>:
{
  416168:	b538      	push	{r3, r4, r5, lr}
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  41616a:	4836      	ldr	r0, [pc, #216]	; (416244 <anim_task+0xdc>)
  41616c:	4b36      	ldr	r3, [pc, #216]	; (416248 <anim_task+0xe0>)
  41616e:	4798      	blx	r3
  416170:	e009      	b.n	416186 <anim_task+0x1e>
        a->has_run = 0;
  416172:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  416176:	f36f 0341 	bfc	r3, #1, #1
  41617a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  41617e:	4601      	mov	r1, r0
  416180:	4830      	ldr	r0, [pc, #192]	; (416244 <anim_task+0xdc>)
  416182:	4b32      	ldr	r3, [pc, #200]	; (41624c <anim_task+0xe4>)
  416184:	4798      	blx	r3
  416186:	2800      	cmp	r0, #0
  416188:	d1f3      	bne.n	416172 <anim_task+0xa>
    uint32_t elaps = lv_tick_elaps(last_task_run);
  41618a:	4b31      	ldr	r3, [pc, #196]	; (416250 <anim_task+0xe8>)
  41618c:	6818      	ldr	r0, [r3, #0]
  41618e:	4b31      	ldr	r3, [pc, #196]	; (416254 <anim_task+0xec>)
  416190:	4798      	blx	r3
  416192:	4605      	mov	r5, r0
    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  416194:	482b      	ldr	r0, [pc, #172]	; (416244 <anim_task+0xdc>)
  416196:	4b2c      	ldr	r3, [pc, #176]	; (416248 <anim_task+0xe0>)
  416198:	4798      	blx	r3
  41619a:	4604      	mov	r4, r0
    while(a != NULL) {
  41619c:	e022      	b.n	4161e4 <anim_task+0x7c>
            if(a->act_time <= 0 && new_act_time >= 0) {
  41619e:	2a00      	cmp	r2, #0
  4161a0:	db31      	blt.n	416206 <anim_task+0x9e>
                if(a->start_cb) a->start_cb(a);
  4161a2:	68a3      	ldr	r3, [r4, #8]
  4161a4:	2b00      	cmp	r3, #0
  4161a6:	d02e      	beq.n	416206 <anim_task+0x9e>
  4161a8:	4620      	mov	r0, r4
  4161aa:	4798      	blx	r3
  4161ac:	e02b      	b.n	416206 <anim_task+0x9e>
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
  4161ae:	6923      	ldr	r3, [r4, #16]
  4161b0:	2b00      	cmp	r3, #0
  4161b2:	d032      	beq.n	41621a <anim_task+0xb2>
  4161b4:	4621      	mov	r1, r4
  4161b6:	f104 0010 	add.w	r0, r4, #16
  4161ba:	4798      	blx	r3
                if(new_value != a->current) {
  4161bc:	69e3      	ldr	r3, [r4, #28]
  4161be:	4298      	cmp	r0, r3
  4161c0:	d005      	beq.n	4161ce <anim_task+0x66>
                    a->current = new_value;
  4161c2:	61e0      	str	r0, [r4, #28]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
  4161c4:	6863      	ldr	r3, [r4, #4]
  4161c6:	b113      	cbz	r3, 4161ce <anim_task+0x66>
  4161c8:	b201      	sxth	r1, r0
  4161ca:	6820      	ldr	r0, [r4, #0]
  4161cc:	4798      	blx	r3
                if(a->act_time >= a->time) {
  4161ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  4161d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4161d2:	429a      	cmp	r2, r3
  4161d4:	da27      	bge.n	416226 <anim_task+0xbe>
        if(anim_list_changed)
  4161d6:	4b20      	ldr	r3, [pc, #128]	; (416258 <anim_task+0xf0>)
  4161d8:	781b      	ldrb	r3, [r3, #0]
  4161da:	b343      	cbz	r3, 41622e <anim_task+0xc6>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  4161dc:	4819      	ldr	r0, [pc, #100]	; (416244 <anim_task+0xdc>)
  4161de:	4b1a      	ldr	r3, [pc, #104]	; (416248 <anim_task+0xe0>)
  4161e0:	4798      	blx	r3
  4161e2:	4604      	mov	r4, r0
    while(a != NULL) {
  4161e4:	b34c      	cbz	r4, 41623a <anim_task+0xd2>
        anim_list_changed = false;
  4161e6:	2200      	movs	r2, #0
  4161e8:	4b1b      	ldr	r3, [pc, #108]	; (416258 <anim_task+0xf0>)
  4161ea:	701a      	strb	r2, [r3, #0]
        if(!a->has_run) {
  4161ec:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  4161f0:	f013 0f02 	tst.w	r3, #2
  4161f4:	d1ef      	bne.n	4161d6 <anim_task+0x6e>
            a->has_run = 1; /*The list readying might be reset so need to know which anim has run already*/
  4161f6:	f043 0302 	orr.w	r3, r3, #2
  4161fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            int32_t new_act_time = a->act_time + elaps;
  4161fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  416200:	18ea      	adds	r2, r5, r3
            if(a->act_time <= 0 && new_act_time >= 0) {
  416202:	2b00      	cmp	r3, #0
  416204:	ddcb      	ble.n	41619e <anim_task+0x36>
            a->act_time += elaps;
  416206:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  416208:	442b      	add	r3, r5
  41620a:	62a3      	str	r3, [r4, #40]	; 0x28
            if(a->act_time >= 0) {
  41620c:	2b00      	cmp	r3, #0
  41620e:	dbe2      	blt.n	4161d6 <anim_task+0x6e>
                if(a->act_time > a->time) a->act_time = a->time;
  416210:	6a62      	ldr	r2, [r4, #36]	; 0x24
  416212:	4293      	cmp	r3, r2
  416214:	ddcb      	ble.n	4161ae <anim_task+0x46>
  416216:	62a2      	str	r2, [r4, #40]	; 0x28
  416218:	e7c9      	b.n	4161ae <anim_task+0x46>
                else new_value = lv_anim_path_linear(&a->path, a);
  41621a:	4621      	mov	r1, r4
  41621c:	f104 0010 	add.w	r0, r4, #16
  416220:	4b0e      	ldr	r3, [pc, #56]	; (41625c <anim_task+0xf4>)
  416222:	4798      	blx	r3
  416224:	e7ca      	b.n	4161bc <anim_task+0x54>
                    anim_ready_handler(a);
  416226:	4620      	mov	r0, r4
  416228:	4b0d      	ldr	r3, [pc, #52]	; (416260 <anim_task+0xf8>)
  41622a:	4798      	blx	r3
  41622c:	e7d3      	b.n	4161d6 <anim_task+0x6e>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  41622e:	4621      	mov	r1, r4
  416230:	4804      	ldr	r0, [pc, #16]	; (416244 <anim_task+0xdc>)
  416232:	4b06      	ldr	r3, [pc, #24]	; (41624c <anim_task+0xe4>)
  416234:	4798      	blx	r3
  416236:	4604      	mov	r4, r0
  416238:	e7d4      	b.n	4161e4 <anim_task+0x7c>
    last_task_run = lv_tick_get();
  41623a:	4b0a      	ldr	r3, [pc, #40]	; (416264 <anim_task+0xfc>)
  41623c:	4798      	blx	r3
  41623e:	4b04      	ldr	r3, [pc, #16]	; (416250 <anim_task+0xe8>)
  416240:	6018      	str	r0, [r3, #0]
  416242:	bd38      	pop	{r3, r4, r5, pc}
  416244:	2043a328 	.word	0x2043a328
  416248:	004170b9 	.word	0x004170b9
  41624c:	004170cd 	.word	0x004170cd
  416250:	2040c7bc 	.word	0x2040c7bc
  416254:	00416049 	.word	0x00416049
  416258:	2040c7b8 	.word	0x2040c7b8
  41625c:	00416061 	.word	0x00416061
  416260:	004160c5 	.word	0x004160c5
  416264:	0041602d 	.word	0x0041602d

00416268 <_lv_anim_core_init>:
{
  416268:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
  41626a:	2144      	movs	r1, #68	; 0x44
  41626c:	480a      	ldr	r0, [pc, #40]	; (416298 <_lv_anim_core_init+0x30>)
  41626e:	4b0b      	ldr	r3, [pc, #44]	; (41629c <_lv_anim_core_init+0x34>)
  416270:	4798      	blx	r3
    last_task_run = lv_tick_get();
  416272:	4b0b      	ldr	r3, [pc, #44]	; (4162a0 <_lv_anim_core_init+0x38>)
  416274:	4798      	blx	r3
  416276:	4b0b      	ldr	r3, [pc, #44]	; (4162a4 <_lv_anim_core_init+0x3c>)
  416278:	6018      	str	r0, [r3, #0]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
  41627a:	2300      	movs	r3, #0
  41627c:	2204      	movs	r2, #4
  41627e:	211e      	movs	r1, #30
  416280:	4809      	ldr	r0, [pc, #36]	; (4162a8 <_lv_anim_core_init+0x40>)
  416282:	4c0a      	ldr	r4, [pc, #40]	; (4162ac <_lv_anim_core_init+0x44>)
  416284:	47a0      	blx	r4
  416286:	4b0a      	ldr	r3, [pc, #40]	; (4162b0 <_lv_anim_core_init+0x48>)
  416288:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation task*/
  41628a:	4b0a      	ldr	r3, [pc, #40]	; (4162b4 <_lv_anim_core_init+0x4c>)
  41628c:	4798      	blx	r3
    anim_list_changed = false; /*The list has not actually changed*/
  41628e:	2200      	movs	r2, #0
  416290:	4b09      	ldr	r3, [pc, #36]	; (4162b8 <_lv_anim_core_init+0x50>)
  416292:	701a      	strb	r2, [r3, #0]
  416294:	bd10      	pop	{r4, pc}
  416296:	bf00      	nop
  416298:	2043a328 	.word	0x2043a328
  41629c:	0041700f 	.word	0x0041700f
  4162a0:	0041602d 	.word	0x0041602d
  4162a4:	2040c7bc 	.word	0x2040c7bc
  4162a8:	00416169 	.word	0x00416169
  4162ac:	00418459 	.word	0x00418459
  4162b0:	2040c7b4 	.word	0x2040c7b4
  4162b4:	00416089 	.word	0x00416089
  4162b8:	2040c7b8 	.word	0x2040c7b8

004162bc <lv_anim_init>:
{
  4162bc:	b510      	push	{r4, lr}
  4162be:	4604      	mov	r4, r0
    _lv_memset_00(a, sizeof(lv_anim_t));
  4162c0:	2144      	movs	r1, #68	; 0x44
  4162c2:	4b0f      	ldr	r3, [pc, #60]	; (416300 <lv_anim_init+0x44>)
  4162c4:	4798      	blx	r3
    a->time    = 500;
  4162c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  4162ca:	6263      	str	r3, [r4, #36]	; 0x24
    a->start   = 0;
  4162cc:	2300      	movs	r3, #0
  4162ce:	61a3      	str	r3, [r4, #24]
    a->end     = 100;
  4162d0:	2364      	movs	r3, #100	; 0x64
  4162d2:	6223      	str	r3, [r4, #32]
    _lv_memcpy_small(&a->path, &lv_anim_path_def, sizeof(lv_anim_path_cb_t));
  4162d4:	f104 0110 	add.w	r1, r4, #16
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;
  4162d8:	4a0a      	ldr	r2, [pc, #40]	; (416304 <lv_anim_init+0x48>)
  4162da:	2304      	movs	r3, #4
  4162dc:	e004      	b.n	4162e8 <lv_anim_init+0x2c>

    while(len) {
        *d8 = *s8;
  4162de:	f812 0b01 	ldrb.w	r0, [r2], #1
  4162e2:	f801 0b01 	strb.w	r0, [r1], #1
        d8++;
        s8++;
        len--;
  4162e6:	3b01      	subs	r3, #1
    while(len) {
  4162e8:	2b00      	cmp	r3, #0
  4162ea:	d1f8      	bne.n	4162de <lv_anim_init+0x22>
    a->repeat_cnt = 1;
  4162ec:	2301      	movs	r3, #1
  4162ee:	8723      	strh	r3, [r4, #56]	; 0x38
    a->early_apply = 1;
  4162f0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  4162f4:	f043 0301 	orr.w	r3, r3, #1
  4162f8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  4162fc:	bd10      	pop	{r4, pc}
  4162fe:	bf00      	nop
  416300:	00417a21 	.word	0x00417a21
  416304:	00431b30 	.word	0x00431b30

00416308 <lv_anim_del>:
{
  416308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41630c:	4606      	mov	r6, r0
  41630e:	460f      	mov	r7, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  416310:	4812      	ldr	r0, [pc, #72]	; (41635c <lv_anim_del+0x54>)
  416312:	4b13      	ldr	r3, [pc, #76]	; (416360 <lv_anim_del+0x58>)
  416314:	4798      	blx	r3
  416316:	4604      	mov	r4, r0
    bool del = false;
  416318:	f04f 0800 	mov.w	r8, #0
    while(a != NULL) {
  41631c:	e00b      	b.n	416336 <lv_anim_del+0x2e>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
  41631e:	4621      	mov	r1, r4
  416320:	480e      	ldr	r0, [pc, #56]	; (41635c <lv_anim_del+0x54>)
  416322:	4b10      	ldr	r3, [pc, #64]	; (416364 <lv_anim_del+0x5c>)
  416324:	4798      	blx	r3
            lv_mem_free(a);
  416326:	4620      	mov	r0, r4
  416328:	4b0f      	ldr	r3, [pc, #60]	; (416368 <lv_anim_del+0x60>)
  41632a:	4798      	blx	r3
            anim_mark_list_change(); /*Read by `anim_task`. It need to know if a delete occurred in
  41632c:	4b0f      	ldr	r3, [pc, #60]	; (41636c <lv_anim_del+0x64>)
  41632e:	4798      	blx	r3
            del = true;
  416330:	f04f 0801 	mov.w	r8, #1
  416334:	462c      	mov	r4, r5
    while(a != NULL) {
  416336:	b16c      	cbz	r4, 416354 <lv_anim_del+0x4c>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  416338:	4621      	mov	r1, r4
  41633a:	4808      	ldr	r0, [pc, #32]	; (41635c <lv_anim_del+0x54>)
  41633c:	4b0c      	ldr	r3, [pc, #48]	; (416370 <lv_anim_del+0x68>)
  41633e:	4798      	blx	r3
  416340:	4605      	mov	r5, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
  416342:	6823      	ldr	r3, [r4, #0]
  416344:	42b3      	cmp	r3, r6
  416346:	d1f5      	bne.n	416334 <lv_anim_del+0x2c>
  416348:	6863      	ldr	r3, [r4, #4]
  41634a:	42bb      	cmp	r3, r7
  41634c:	d0e7      	beq.n	41631e <lv_anim_del+0x16>
  41634e:	2f00      	cmp	r7, #0
  416350:	d1f0      	bne.n	416334 <lv_anim_del+0x2c>
  416352:	e7e4      	b.n	41631e <lv_anim_del+0x16>
}
  416354:	4640      	mov	r0, r8
  416356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41635a:	bf00      	nop
  41635c:	2043a328 	.word	0x2043a328
  416360:	004170b9 	.word	0x004170b9
  416364:	00417175 	.word	0x00417175
  416368:	004175b1 	.word	0x004175b1
  41636c:	00416089 	.word	0x00416089
  416370:	004170cd 	.word	0x004170cd

00416374 <lv_anim_start>:
{
  416374:	b538      	push	{r3, r4, r5, lr}
  416376:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
  416378:	6841      	ldr	r1, [r0, #4]
  41637a:	b111      	cbz	r1, 416382 <lv_anim_start+0xe>
  41637c:	6800      	ldr	r0, [r0, #0]
  41637e:	4b18      	ldr	r3, [pc, #96]	; (4163e0 <lv_anim_start+0x6c>)
  416380:	4798      	blx	r3
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
  416382:	4818      	ldr	r0, [pc, #96]	; (4163e4 <lv_anim_start+0x70>)
  416384:	4b18      	ldr	r3, [pc, #96]	; (4163e8 <lv_anim_start+0x74>)
  416386:	4798      	blx	r3
  416388:	b9e8      	cbnz	r0, 4163c6 <lv_anim_start+0x52>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
  41638a:	4816      	ldr	r0, [pc, #88]	; (4163e4 <lv_anim_start+0x70>)
  41638c:	4b17      	ldr	r3, [pc, #92]	; (4163ec <lv_anim_start+0x78>)
  41638e:	4798      	blx	r3
  416390:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_anim);
  416392:	4b17      	ldr	r3, [pc, #92]	; (4163f0 <lv_anim_start+0x7c>)
  416394:	4798      	blx	r3
  416396:	b1e0      	cbz	r0, 4163d2 <lv_anim_start+0x5e>
    if(new_anim == NULL) return;
  416398:	b1a4      	cbz	r4, 4163c4 <lv_anim_start+0x50>
    a->time_orig = a->time;
  41639a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  41639c:	63eb      	str	r3, [r5, #60]	; 0x3c
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
  41639e:	2244      	movs	r2, #68	; 0x44
  4163a0:	4629      	mov	r1, r5
  4163a2:	4620      	mov	r0, r4
  4163a4:	4b13      	ldr	r3, [pc, #76]	; (4163f4 <lv_anim_start+0x80>)
  4163a6:	4798      	blx	r3
    if(new_anim->early_apply) {
  4163a8:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  4163ac:	f013 0f01 	tst.w	r3, #1
  4163b0:	d006      	beq.n	4163c0 <lv_anim_start+0x4c>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
  4163b2:	6863      	ldr	r3, [r4, #4]
  4163b4:	b123      	cbz	r3, 4163c0 <lv_anim_start+0x4c>
  4163b6:	6820      	ldr	r0, [r4, #0]
  4163b8:	b110      	cbz	r0, 4163c0 <lv_anim_start+0x4c>
  4163ba:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
  4163be:	4798      	blx	r3
    anim_mark_list_change();
  4163c0:	4b0d      	ldr	r3, [pc, #52]	; (4163f8 <lv_anim_start+0x84>)
  4163c2:	4798      	blx	r3
  4163c4:	bd38      	pop	{r3, r4, r5, pc}
        last_task_run = lv_tick_get() - 1;
  4163c6:	4b0d      	ldr	r3, [pc, #52]	; (4163fc <lv_anim_start+0x88>)
  4163c8:	4798      	blx	r3
  4163ca:	3801      	subs	r0, #1
  4163cc:	4b0c      	ldr	r3, [pc, #48]	; (416400 <lv_anim_start+0x8c>)
  4163ce:	6018      	str	r0, [r3, #0]
  4163d0:	e7db      	b.n	41638a <lv_anim_start+0x16>
    LV_ASSERT_MEM(new_anim);
  4163d2:	4622      	mov	r2, r4
  4163d4:	2300      	movs	r3, #0
  4163d6:	480b      	ldr	r0, [pc, #44]	; (416404 <lv_anim_start+0x90>)
  4163d8:	490b      	ldr	r1, [pc, #44]	; (416408 <lv_anim_start+0x94>)
  4163da:	4788      	blx	r1
  4163dc:	e7fe      	b.n	4163dc <lv_anim_start+0x68>
  4163de:	bf00      	nop
  4163e0:	00416309 	.word	0x00416309
  4163e4:	2043a328 	.word	0x2043a328
  4163e8:	00417361 	.word	0x00417361
  4163ec:	00417021 	.word	0x00417021
  4163f0:	00416da9 	.word	0x00416da9
  4163f4:	004176fd 	.word	0x004176fd
  4163f8:	00416089 	.word	0x00416089
  4163fc:	0041602d 	.word	0x0041602d
  416400:	2040c7bc 	.word	0x2040c7bc
  416404:	0042e54c 	.word	0x0042e54c
  416408:	00416db5 	.word	0x00416db5

0041640c <lv_anim_get>:
{
  41640c:	b538      	push	{r3, r4, r5, lr}
  41640e:	4604      	mov	r4, r0
  416410:	460d      	mov	r5, r1
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  416412:	4808      	ldr	r0, [pc, #32]	; (416434 <lv_anim_get+0x28>)
  416414:	4b08      	ldr	r3, [pc, #32]	; (416438 <lv_anim_get+0x2c>)
  416416:	4798      	blx	r3
  416418:	e003      	b.n	416422 <lv_anim_get+0x16>
  41641a:	4601      	mov	r1, r0
  41641c:	4805      	ldr	r0, [pc, #20]	; (416434 <lv_anim_get+0x28>)
  41641e:	4b07      	ldr	r3, [pc, #28]	; (41643c <lv_anim_get+0x30>)
  416420:	4798      	blx	r3
  416422:	b128      	cbz	r0, 416430 <lv_anim_get+0x24>
        if(a->var == var && a->exec_cb == exec_cb) {
  416424:	6803      	ldr	r3, [r0, #0]
  416426:	42a3      	cmp	r3, r4
  416428:	d1f7      	bne.n	41641a <lv_anim_get+0xe>
  41642a:	6843      	ldr	r3, [r0, #4]
  41642c:	42ab      	cmp	r3, r5
  41642e:	d1f4      	bne.n	41641a <lv_anim_get+0xe>
}
  416430:	bd38      	pop	{r3, r4, r5, pc}
  416432:	bf00      	nop
  416434:	2043a328 	.word	0x2043a328
  416438:	004170b9 	.word	0x004170b9
  41643c:	004170cd 	.word	0x004170cd

00416440 <lv_anim_speed_to_time>:
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
  416440:	1a89      	subs	r1, r1, r2
  416442:	2900      	cmp	r1, #0
  416444:	bfb8      	it	lt
  416446:	4249      	neglt	r1, r1
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
  416448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  41644c:	fb02 f201 	mul.w	r2, r2, r1
  416450:	fb92 f0f0 	sdiv	r0, r2, r0
    if(time > UINT16_MAX) time = UINT16_MAX;
  416454:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  416458:	d301      	bcc.n	41645e <lv_anim_speed_to_time+0x1e>
  41645a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    if(time == 0) {
  41645e:	b900      	cbnz	r0, 416462 <lv_anim_speed_to_time+0x22>
        time++;
  416460:	3001      	adds	r0, #1
}
  416462:	b280      	uxth	r0, r0
  416464:	4770      	bx	lr

00416466 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
  416466:	b410      	push	{r4}
    lv_coord_t r = (area->x2 - area->x1) / 2;
  416468:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  41646c:	f9b0 2000 	ldrsh.w	r2, [r0]
  416470:	1a9b      	subs	r3, r3, r2
  416472:	d417      	bmi.n	4164a4 <lv_point_within_circle+0x3e>
  416474:	105b      	asrs	r3, r3, #1

    /* Circle center */
    lv_coord_t cx = area->x1 + r;
  416476:	b29c      	uxth	r4, r3
  416478:	fa14 f282 	uxtah	r2, r4, r2
  41647c:	b292      	uxth	r2, r2
    lv_coord_t cy = area->y1 + r;
  41647e:	8840      	ldrh	r0, [r0, #2]
  416480:	4404      	add	r4, r0
  416482:	b2a4      	uxth	r4, r4

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
  416484:	8808      	ldrh	r0, [r1, #0]
  416486:	1a82      	subs	r2, r0, r2
    lv_coord_t py = p->y - cy;
  416488:	8849      	ldrh	r1, [r1, #2]
  41648a:	1b09      	subs	r1, r1, r4

    uint32_t r_sqrd = r * r;
  41648c:	fb13 f303 	smulbb	r3, r3, r3
    uint32_t dist = (px * px) + (py * py);
  416490:	fb11 f101 	smulbb	r1, r1, r1
  416494:	fb12 1202 	smlabb	r2, r2, r2, r1

    if(dist <= r_sqrd)
  416498:	4293      	cmp	r3, r2
  41649a:	d205      	bcs.n	4164a8 <lv_point_within_circle+0x42>
        return true;
    else
        return false;
  41649c:	2000      	movs	r0, #0
}
  41649e:	f85d 4b04 	ldr.w	r4, [sp], #4
  4164a2:	4770      	bx	lr
    lv_coord_t r = (area->x2 - area->x1) / 2;
  4164a4:	3301      	adds	r3, #1
  4164a6:	e7e5      	b.n	416474 <lv_point_within_circle+0xe>
        return true;
  4164a8:	2001      	movs	r0, #1
  4164aa:	e7f8      	b.n	41649e <lv_point_within_circle+0x38>

004164ac <lv_area_set>:
    area_p->x1 = x1;
  4164ac:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
  4164ae:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
  4164b0:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
  4164b2:	f9bd 3000 	ldrsh.w	r3, [sp]
  4164b6:	80c3      	strh	r3, [r0, #6]
  4164b8:	4770      	bx	lr

004164ba <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
  4164ba:	8843      	ldrh	r3, [r0, #2]
  4164bc:	4419      	add	r1, r3
  4164be:	b289      	uxth	r1, r1
  4164c0:	3901      	subs	r1, #1
  4164c2:	80c1      	strh	r1, [r0, #6]
  4164c4:	4770      	bx	lr

004164c6 <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
  4164c6:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  4164ca:	f9b0 3000 	ldrsh.w	r3, [r0]
  4164ce:	1ad2      	subs	r2, r2, r3
  4164d0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  4164d4:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
  4164d8:	1a18      	subs	r0, r3, r0
  4164da:	3001      	adds	r0, #1
}
  4164dc:	fb02 0000 	mla	r0, r2, r0, r0
  4164e0:	4770      	bx	lr

004164e2 <_lv_area_intersect>:
{
  4164e2:	b470      	push	{r4, r5, r6}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
  4164e4:	f9b2 4000 	ldrsh.w	r4, [r2]
  4164e8:	f9b1 3000 	ldrsh.w	r3, [r1]
  4164ec:	429c      	cmp	r4, r3
  4164ee:	bfb8      	it	lt
  4164f0:	461c      	movlt	r4, r3
  4164f2:	8004      	strh	r4, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
  4164f4:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
  4164f8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  4164fc:	429d      	cmp	r5, r3
  4164fe:	bfb8      	it	lt
  416500:	461d      	movlt	r5, r3
  416502:	8045      	strh	r5, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
  416504:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  416508:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
  41650c:	42b3      	cmp	r3, r6
  41650e:	bfa8      	it	ge
  416510:	4633      	movge	r3, r6
  416512:	8083      	strh	r3, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
  416514:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
  416518:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
  41651c:	428a      	cmp	r2, r1
  41651e:	bfa8      	it	ge
  416520:	460a      	movge	r2, r1
  416522:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
  416524:	429c      	cmp	r4, r3
  416526:	dc05      	bgt.n	416534 <_lv_area_intersect+0x52>
  416528:	4295      	cmp	r5, r2
  41652a:	dd01      	ble.n	416530 <_lv_area_intersect+0x4e>
        union_ok = false;
  41652c:	2000      	movs	r0, #0
  41652e:	e002      	b.n	416536 <_lv_area_intersect+0x54>
    bool union_ok = true;
  416530:	2001      	movs	r0, #1
  416532:	e000      	b.n	416536 <_lv_area_intersect+0x54>
        union_ok = false;
  416534:	2000      	movs	r0, #0
}
  416536:	bc70      	pop	{r4, r5, r6}
  416538:	4770      	bx	lr

0041653a <_lv_area_join>:
{
  41653a:	b410      	push	{r4}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
  41653c:	f9b2 3000 	ldrsh.w	r3, [r2]
  416540:	f9b1 4000 	ldrsh.w	r4, [r1]
  416544:	42a3      	cmp	r3, r4
  416546:	bfa8      	it	ge
  416548:	4623      	movge	r3, r4
  41654a:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
  41654c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
  416550:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  416554:	42a3      	cmp	r3, r4
  416556:	bfa8      	it	ge
  416558:	4623      	movge	r3, r4
  41655a:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
  41655c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  416560:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
  416564:	42a3      	cmp	r3, r4
  416566:	bfb8      	it	lt
  416568:	4623      	movlt	r3, r4
  41656a:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
  41656c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
  416570:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
  416574:	4293      	cmp	r3, r2
  416576:	bfb8      	it	lt
  416578:	4613      	movlt	r3, r2
  41657a:	80c3      	strh	r3, [r0, #6]
}
  41657c:	f85d 4b04 	ldr.w	r4, [sp], #4
  416580:	4770      	bx	lr
	...

00416584 <_lv_area_is_point_on>:
{
  416584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  416588:	b082      	sub	sp, #8
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
  41658a:	f9b1 3000 	ldrsh.w	r3, [r1]
  41658e:	f9b0 6000 	ldrsh.w	r6, [r0]
  416592:	42b3      	cmp	r3, r6
  416594:	db0f      	blt.n	4165b6 <_lv_area_is_point_on+0x32>
  416596:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
  41659a:	42a3      	cmp	r3, r4
  41659c:	dc52      	bgt.n	416644 <_lv_area_is_point_on+0xc0>
  41659e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  4165a2:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
  4165a6:	42a3      	cmp	r3, r4
  4165a8:	db4e      	blt.n	416648 <_lv_area_is_point_on+0xc4>
  4165aa:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  4165ae:	42a3      	cmp	r3, r4
  4165b0:	dd4c      	ble.n	41664c <_lv_area_is_point_on+0xc8>
    bool is_on_rect = false;
  4165b2:	2500      	movs	r5, #0
  4165b4:	e000      	b.n	4165b8 <_lv_area_is_point_on+0x34>
  4165b6:	2500      	movs	r5, #0
    if(!is_on_rect)
  4165b8:	2d00      	cmp	r5, #0
  4165ba:	d03f      	beq.n	41663c <_lv_area_is_point_on+0xb8>
    if(radius <= 0) {
  4165bc:	2a00      	cmp	r2, #0
  4165be:	dd3d      	ble.n	41663c <_lv_area_is_point_on+0xb8>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4165c0:	8884      	ldrh	r4, [r0, #4]
  4165c2:	b2b3      	uxth	r3, r6
  4165c4:	1ae4      	subs	r4, r4, r3
  4165c6:	b2a4      	uxth	r4, r4
  4165c8:	3401      	adds	r4, #1
  4165ca:	b224      	sxth	r4, r4
    lv_coord_t w = lv_area_get_width(a_p) / 2;
  4165cc:	2c00      	cmp	r4, #0
  4165ce:	db3f      	blt.n	416650 <_lv_area_is_point_on+0xcc>
  4165d0:	1064      	asrs	r4, r4, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4165d2:	88c3      	ldrh	r3, [r0, #6]
  4165d4:	8847      	ldrh	r7, [r0, #2]
  4165d6:	1bdb      	subs	r3, r3, r7
  4165d8:	b29b      	uxth	r3, r3
  4165da:	3301      	adds	r3, #1
  4165dc:	b21b      	sxth	r3, r3
    lv_coord_t h = lv_area_get_height(a_p) / 2;
  4165de:	2b00      	cmp	r3, #0
  4165e0:	db38      	blt.n	416654 <_lv_area_is_point_on+0xd0>
  4165e2:	105b      	asrs	r3, r3, #1
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
  4165e4:	429c      	cmp	r4, r3
  4165e6:	bfa8      	it	ge
  4165e8:	461c      	movge	r4, r3
  4165ea:	b224      	sxth	r4, r4
    if(radius > max_radius)
  4165ec:	42a2      	cmp	r2, r4
  4165ee:	dc00      	bgt.n	4165f2 <_lv_area_is_point_on+0x6e>
  4165f0:	4614      	mov	r4, r2
  4165f2:	4688      	mov	r8, r1
  4165f4:	4607      	mov	r7, r0
    corner_area.x1 = a_p->x1;
  4165f6:	f8ad 6000 	strh.w	r6, [sp]
    corner_area.x2 = a_p->x1 + radius;
  4165fa:	8803      	ldrh	r3, [r0, #0]
  4165fc:	b2a4      	uxth	r4, r4
  4165fe:	4423      	add	r3, r4
  416600:	f8ad 3004 	strh.w	r3, [sp, #4]
    corner_area.y1 = a_p->y1;
  416604:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  416608:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
  41660c:	8843      	ldrh	r3, [r0, #2]
  41660e:	4423      	add	r3, r4
  416610:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  416614:	2200      	movs	r2, #0
  416616:	4668      	mov	r0, sp
  416618:	f7ff ffb4 	bl	416584 <_lv_area_is_point_on>
  41661c:	b1e0      	cbz	r0, 416658 <_lv_area_is_point_on+0xd4>
        corner_area.x2 += radius;
  41661e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  416622:	4423      	add	r3, r4
  416624:	f8ad 3004 	strh.w	r3, [sp, #4]
        corner_area.y2 += radius;
  416628:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  41662c:	441c      	add	r4, r3
  41662e:	f8ad 4006 	strh.w	r4, [sp, #6]
        return lv_point_within_circle(&corner_area, p_p);
  416632:	4641      	mov	r1, r8
  416634:	4668      	mov	r0, sp
  416636:	4b36      	ldr	r3, [pc, #216]	; (416710 <_lv_area_is_point_on+0x18c>)
  416638:	4798      	blx	r3
  41663a:	4605      	mov	r5, r0
}
  41663c:	4628      	mov	r0, r5
  41663e:	b002      	add	sp, #8
  416640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool is_on_rect = false;
  416644:	2500      	movs	r5, #0
  416646:	e7b7      	b.n	4165b8 <_lv_area_is_point_on+0x34>
  416648:	2500      	movs	r5, #0
  41664a:	e7b5      	b.n	4165b8 <_lv_area_is_point_on+0x34>
        is_on_rect = true;
  41664c:	2501      	movs	r5, #1
  41664e:	e7b3      	b.n	4165b8 <_lv_area_is_point_on+0x34>
    lv_coord_t w = lv_area_get_width(a_p) / 2;
  416650:	3401      	adds	r4, #1
  416652:	e7bd      	b.n	4165d0 <_lv_area_is_point_on+0x4c>
    lv_coord_t h = lv_area_get_height(a_p) / 2;
  416654:	3301      	adds	r3, #1
  416656:	e7c4      	b.n	4165e2 <_lv_area_is_point_on+0x5e>
    corner_area.y1 = a_p->y2 - radius;
  416658:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
  41665c:	b293      	uxth	r3, r2
  41665e:	1b1b      	subs	r3, r3, r4
  416660:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y2;
  416664:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  416668:	2200      	movs	r2, #0
  41666a:	4641      	mov	r1, r8
  41666c:	4668      	mov	r0, sp
  41666e:	f7ff ff89 	bl	416584 <_lv_area_is_point_on>
  416672:	b178      	cbz	r0, 416694 <_lv_area_is_point_on+0x110>
        corner_area.x2 += radius;
  416674:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  416678:	4423      	add	r3, r4
  41667a:	f8ad 3004 	strh.w	r3, [sp, #4]
        corner_area.y1 -= radius;
  41667e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  416682:	1b1c      	subs	r4, r3, r4
  416684:	f8ad 4002 	strh.w	r4, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
  416688:	4641      	mov	r1, r8
  41668a:	4668      	mov	r0, sp
  41668c:	4b20      	ldr	r3, [pc, #128]	; (416710 <_lv_area_is_point_on+0x18c>)
  41668e:	4798      	blx	r3
  416690:	4605      	mov	r5, r0
  416692:	e7d3      	b.n	41663c <_lv_area_is_point_on+0xb8>
    corner_area.x1 = a_p->x2 - radius;
  416694:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
  416698:	b293      	uxth	r3, r2
  41669a:	1b1b      	subs	r3, r3, r4
  41669c:	f8ad 3000 	strh.w	r3, [sp]
    corner_area.x2 = a_p->x2;
  4166a0:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  4166a4:	2200      	movs	r2, #0
  4166a6:	4641      	mov	r1, r8
  4166a8:	4668      	mov	r0, sp
  4166aa:	f7ff ff6b 	bl	416584 <_lv_area_is_point_on>
  4166ae:	b178      	cbz	r0, 4166d0 <_lv_area_is_point_on+0x14c>
        corner_area.x1 -= radius;
  4166b0:	f8bd 3000 	ldrh.w	r3, [sp]
  4166b4:	1b1b      	subs	r3, r3, r4
  4166b6:	f8ad 3000 	strh.w	r3, [sp]
        corner_area.y1 -= radius;
  4166ba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  4166be:	1b1c      	subs	r4, r3, r4
  4166c0:	f8ad 4002 	strh.w	r4, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
  4166c4:	4641      	mov	r1, r8
  4166c6:	4668      	mov	r0, sp
  4166c8:	4b11      	ldr	r3, [pc, #68]	; (416710 <_lv_area_is_point_on+0x18c>)
  4166ca:	4798      	blx	r3
  4166cc:	4605      	mov	r5, r0
  4166ce:	e7b5      	b.n	41663c <_lv_area_is_point_on+0xb8>
    corner_area.y1 = a_p->y1;
  4166d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  4166d4:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
  4166d8:	887b      	ldrh	r3, [r7, #2]
  4166da:	4423      	add	r3, r4
  4166dc:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  4166e0:	2200      	movs	r2, #0
  4166e2:	4641      	mov	r1, r8
  4166e4:	4668      	mov	r0, sp
  4166e6:	f7ff ff4d 	bl	416584 <_lv_area_is_point_on>
  4166ea:	2800      	cmp	r0, #0
  4166ec:	d0a6      	beq.n	41663c <_lv_area_is_point_on+0xb8>
        corner_area.x1 -= radius;
  4166ee:	f8bd 3000 	ldrh.w	r3, [sp]
  4166f2:	1b1b      	subs	r3, r3, r4
  4166f4:	f8ad 3000 	strh.w	r3, [sp]
        corner_area.y2 += radius;
  4166f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4166fc:	441c      	add	r4, r3
  4166fe:	f8ad 4006 	strh.w	r4, [sp, #6]
        return lv_point_within_circle(&corner_area, p_p);
  416702:	4641      	mov	r1, r8
  416704:	4668      	mov	r0, sp
  416706:	4b02      	ldr	r3, [pc, #8]	; (416710 <_lv_area_is_point_on+0x18c>)
  416708:	4798      	blx	r3
  41670a:	4605      	mov	r5, r0
  41670c:	e796      	b.n	41663c <_lv_area_is_point_on+0xb8>
  41670e:	bf00      	nop
  416710:	00416467 	.word	0x00416467

00416714 <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
  416714:	f9b0 2000 	ldrsh.w	r2, [r0]
  416718:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
  41671c:	429a      	cmp	r2, r3
  41671e:	dc13      	bgt.n	416748 <_lv_area_is_on+0x34>
  416720:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  416724:	f9b1 3000 	ldrsh.w	r3, [r1]
  416728:	429a      	cmp	r2, r3
  41672a:	db0f      	blt.n	41674c <_lv_area_is_on+0x38>
  41672c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  416730:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
  416734:	429a      	cmp	r2, r3
  416736:	dc0b      	bgt.n	416750 <_lv_area_is_on+0x3c>
  416738:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
  41673c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  416740:	429a      	cmp	r2, r3
  416742:	da07      	bge.n	416754 <_lv_area_is_on+0x40>
        return false;
  416744:	2000      	movs	r0, #0
  416746:	4770      	bx	lr
  416748:	2000      	movs	r0, #0
  41674a:	4770      	bx	lr
  41674c:	2000      	movs	r0, #0
  41674e:	4770      	bx	lr
  416750:	2000      	movs	r0, #0
  416752:	4770      	bx	lr
        return true;
  416754:	2001      	movs	r0, #1
}
  416756:	4770      	bx	lr

00416758 <_lv_area_is_in>:
{
  416758:	b5f0      	push	{r4, r5, r6, r7, lr}
  41675a:	b083      	sub	sp, #12
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
  41675c:	f9b0 5000 	ldrsh.w	r5, [r0]
  416760:	f9b1 3000 	ldrsh.w	r3, [r1]
  416764:	429d      	cmp	r5, r3
  416766:	db13      	blt.n	416790 <_lv_area_is_in+0x38>
  416768:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
  41676c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  416770:	429c      	cmp	r4, r3
  416772:	db13      	blt.n	41679c <_lv_area_is_in+0x44>
  416774:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
  416778:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
  41677c:	429c      	cmp	r4, r3
  41677e:	dc0f      	bgt.n	4167a0 <_lv_area_is_in+0x48>
       ain_p->y2 <= aholder_p->y2) {
  416780:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  416784:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
  416788:	429c      	cmp	r4, r3
  41678a:	dd0b      	ble.n	4167a4 <_lv_area_is_in+0x4c>
    bool is_in = false;
  41678c:	2300      	movs	r3, #0
  41678e:	e000      	b.n	416792 <_lv_area_is_in+0x3a>
  416790:	2300      	movs	r3, #0
    if(!is_in) return false;
  416792:	b103      	cbz	r3, 416796 <_lv_area_is_in+0x3e>
    if(radius == 0) return true;
  416794:	b942      	cbnz	r2, 4167a8 <_lv_area_is_in+0x50>
}
  416796:	4618      	mov	r0, r3
  416798:	b003      	add	sp, #12
  41679a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bool is_in = false;
  41679c:	2300      	movs	r3, #0
  41679e:	e7f8      	b.n	416792 <_lv_area_is_in+0x3a>
  4167a0:	2300      	movs	r3, #0
  4167a2:	e7f6      	b.n	416792 <_lv_area_is_in+0x3a>
        is_in = true;
  4167a4:	2301      	movs	r3, #1
  4167a6:	e7f4      	b.n	416792 <_lv_area_is_in+0x3a>
  4167a8:	4617      	mov	r7, r2
  4167aa:	460c      	mov	r4, r1
  4167ac:	4606      	mov	r6, r0
    p.x = ain_p->x1;
  4167ae:	f8ad 5004 	strh.w	r5, [sp, #4]
    p.y = ain_p->y1;
  4167b2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  4167b6:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  4167ba:	a901      	add	r1, sp, #4
  4167bc:	4620      	mov	r0, r4
  4167be:	4b17      	ldr	r3, [pc, #92]	; (41681c <_lv_area_is_in+0xc4>)
  4167c0:	4798      	blx	r3
  4167c2:	4603      	mov	r3, r0
  4167c4:	2800      	cmp	r0, #0
  4167c6:	d0e6      	beq.n	416796 <_lv_area_is_in+0x3e>
    p.x = ain_p->x2;
  4167c8:	f9b6 5004 	ldrsh.w	r5, [r6, #4]
  4167cc:	f8ad 5004 	strh.w	r5, [sp, #4]
    p.y = ain_p->y1;
  4167d0:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
  4167d4:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  4167d8:	463a      	mov	r2, r7
  4167da:	a901      	add	r1, sp, #4
  4167dc:	4620      	mov	r0, r4
  4167de:	4b0f      	ldr	r3, [pc, #60]	; (41681c <_lv_area_is_in+0xc4>)
  4167e0:	4798      	blx	r3
  4167e2:	4603      	mov	r3, r0
  4167e4:	2800      	cmp	r0, #0
  4167e6:	d0d6      	beq.n	416796 <_lv_area_is_in+0x3e>
    p.x = ain_p->x1;
  4167e8:	f9b6 3000 	ldrsh.w	r3, [r6]
  4167ec:	f8ad 3004 	strh.w	r3, [sp, #4]
    p.y = ain_p->y2;
  4167f0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
  4167f4:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  4167f8:	463a      	mov	r2, r7
  4167fa:	a901      	add	r1, sp, #4
  4167fc:	4620      	mov	r0, r4
  4167fe:	4b07      	ldr	r3, [pc, #28]	; (41681c <_lv_area_is_in+0xc4>)
  416800:	4798      	blx	r3
  416802:	4603      	mov	r3, r0
  416804:	2800      	cmp	r0, #0
  416806:	d0c6      	beq.n	416796 <_lv_area_is_in+0x3e>
    p.x = ain_p->x2;
  416808:	a902      	add	r1, sp, #8
  41680a:	f821 5d04 	strh.w	r5, [r1, #-4]!
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  41680e:	463a      	mov	r2, r7
  416810:	4620      	mov	r0, r4
  416812:	4b02      	ldr	r3, [pc, #8]	; (41681c <_lv_area_is_in+0xc4>)
  416814:	4798      	blx	r3
  416816:	4603      	mov	r3, r0
  416818:	e7bd      	b.n	416796 <_lv_area_is_in+0x3e>
  41681a:	bf00      	nop
  41681c:	00416585 	.word	0x00416585

00416820 <_lv_area_align>:
{
  416820:	b430      	push	{r4, r5}
    switch(align) {
  416822:	2a14      	cmp	r2, #20
  416824:	d842      	bhi.n	4168ac <_lv_area_align+0x8c>
  416826:	e8df f012 	tbh	[pc, r2, lsl #1]
  41682a:	0015      	.short	0x0015
  41682c:	00570053 	.word	0x00570053
  416830:	00850074 	.word	0x00850074
  416834:	00bf0096 	.word	0x00bf0096
  416838:	00f900dc 	.word	0x00f900dc
  41683c:	012b0122 	.word	0x012b0122
  416840:	0161014c 	.word	0x0161014c
  416844:	018b016a 	.word	0x018b016a
  416848:	01a901a0 	.word	0x01a901a0
  41684c:	01df01ca 	.word	0x01df01ca
  416850:	020901e8 	.word	0x020901e8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  416854:	8884      	ldrh	r4, [r0, #4]
  416856:	8802      	ldrh	r2, [r0, #0]
  416858:	1aa4      	subs	r4, r4, r2
  41685a:	b2a4      	uxth	r4, r4
  41685c:	3401      	adds	r4, #1
  41685e:	b224      	sxth	r4, r4
  416860:	888a      	ldrh	r2, [r1, #4]
  416862:	880d      	ldrh	r5, [r1, #0]
  416864:	1b52      	subs	r2, r2, r5
  416866:	b292      	uxth	r2, r2
  416868:	3201      	adds	r2, #1
  41686a:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  41686c:	4625      	mov	r5, r4
  41686e:	2c00      	cmp	r4, #0
  416870:	db26      	blt.n	4168c0 <_lv_area_align+0xa0>
  416872:	106d      	asrs	r5, r5, #1
  416874:	4614      	mov	r4, r2
  416876:	2a00      	cmp	r2, #0
  416878:	db24      	blt.n	4168c4 <_lv_area_align+0xa4>
  41687a:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  41687e:	801d      	strh	r5, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  416880:	88c4      	ldrh	r4, [r0, #6]
  416882:	8842      	ldrh	r2, [r0, #2]
  416884:	1aa4      	subs	r4, r4, r2
  416886:	b2a4      	uxth	r4, r4
  416888:	3401      	adds	r4, #1
  41688a:	b224      	sxth	r4, r4
  41688c:	88ca      	ldrh	r2, [r1, #6]
  41688e:	8849      	ldrh	r1, [r1, #2]
  416890:	1a52      	subs	r2, r2, r1
  416892:	b292      	uxth	r2, r2
  416894:	3201      	adds	r2, #1
  416896:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  416898:	4621      	mov	r1, r4
  41689a:	2c00      	cmp	r4, #0
  41689c:	db14      	blt.n	4168c8 <_lv_area_align+0xa8>
  41689e:	1049      	asrs	r1, r1, #1
  4168a0:	4614      	mov	r4, r2
  4168a2:	2a00      	cmp	r2, #0
  4168a4:	db12      	blt.n	4168cc <_lv_area_align+0xac>
  4168a6:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  4168aa:	8059      	strh	r1, [r3, #2]
    res->x += base->x1;
  4168ac:	8802      	ldrh	r2, [r0, #0]
  4168ae:	8819      	ldrh	r1, [r3, #0]
  4168b0:	440a      	add	r2, r1
  4168b2:	801a      	strh	r2, [r3, #0]
    res->y += base->y1;
  4168b4:	8842      	ldrh	r2, [r0, #2]
  4168b6:	8859      	ldrh	r1, [r3, #2]
  4168b8:	440a      	add	r2, r1
  4168ba:	805a      	strh	r2, [r3, #2]
}
  4168bc:	bc30      	pop	{r4, r5}
  4168be:	4770      	bx	lr
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  4168c0:	1c65      	adds	r5, r4, #1
  4168c2:	e7d6      	b.n	416872 <_lv_area_align+0x52>
  4168c4:	1c54      	adds	r4, r2, #1
  4168c6:	e7d8      	b.n	41687a <_lv_area_align+0x5a>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  4168c8:	1c61      	adds	r1, r4, #1
  4168ca:	e7e8      	b.n	41689e <_lv_area_align+0x7e>
  4168cc:	1c54      	adds	r4, r2, #1
  4168ce:	e7ea      	b.n	4168a6 <_lv_area_align+0x86>
            res->x = 0;
  4168d0:	2200      	movs	r2, #0
  4168d2:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  4168d4:	805a      	strh	r2, [r3, #2]
            break;
  4168d6:	e7e9      	b.n	4168ac <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4168d8:	8884      	ldrh	r4, [r0, #4]
  4168da:	8802      	ldrh	r2, [r0, #0]
  4168dc:	1aa4      	subs	r4, r4, r2
  4168de:	b2a4      	uxth	r4, r4
  4168e0:	3401      	adds	r4, #1
  4168e2:	b224      	sxth	r4, r4
  4168e4:	888a      	ldrh	r2, [r1, #4]
  4168e6:	8809      	ldrh	r1, [r1, #0]
  4168e8:	1a52      	subs	r2, r2, r1
  4168ea:	b292      	uxth	r2, r2
  4168ec:	3201      	adds	r2, #1
  4168ee:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  4168f0:	4621      	mov	r1, r4
  4168f2:	2c00      	cmp	r4, #0
  4168f4:	db09      	blt.n	41690a <_lv_area_align+0xea>
  4168f6:	1049      	asrs	r1, r1, #1
  4168f8:	4614      	mov	r4, r2
  4168fa:	2a00      	cmp	r2, #0
  4168fc:	db07      	blt.n	41690e <_lv_area_align+0xee>
  4168fe:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  416902:	8019      	strh	r1, [r3, #0]
            res->y = 0;
  416904:	2200      	movs	r2, #0
  416906:	805a      	strh	r2, [r3, #2]
            break;
  416908:	e7d0      	b.n	4168ac <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  41690a:	1c61      	adds	r1, r4, #1
  41690c:	e7f3      	b.n	4168f6 <_lv_area_align+0xd6>
  41690e:	1c54      	adds	r4, r2, #1
  416910:	e7f5      	b.n	4168fe <_lv_area_align+0xde>
  416912:	8882      	ldrh	r2, [r0, #4]
  416914:	8804      	ldrh	r4, [r0, #0]
  416916:	1b12      	subs	r2, r2, r4
  416918:	b292      	uxth	r2, r2
  41691a:	3201      	adds	r2, #1
  41691c:	b292      	uxth	r2, r2
  41691e:	888c      	ldrh	r4, [r1, #4]
  416920:	8809      	ldrh	r1, [r1, #0]
  416922:	1a61      	subs	r1, r4, r1
  416924:	b289      	uxth	r1, r1
  416926:	3101      	adds	r1, #1
  416928:	b289      	uxth	r1, r1
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  41692a:	1a52      	subs	r2, r2, r1
  41692c:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  41692e:	2200      	movs	r2, #0
  416930:	805a      	strh	r2, [r3, #2]
            break;
  416932:	e7bb      	b.n	4168ac <_lv_area_align+0x8c>
            res->x = 0;
  416934:	2200      	movs	r2, #0
  416936:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  416938:	88c2      	ldrh	r2, [r0, #6]
  41693a:	8844      	ldrh	r4, [r0, #2]
  41693c:	1b12      	subs	r2, r2, r4
  41693e:	b292      	uxth	r2, r2
  416940:	3201      	adds	r2, #1
  416942:	b292      	uxth	r2, r2
  416944:	88cc      	ldrh	r4, [r1, #6]
  416946:	8849      	ldrh	r1, [r1, #2]
  416948:	1a61      	subs	r1, r4, r1
  41694a:	b289      	uxth	r1, r1
  41694c:	3101      	adds	r1, #1
  41694e:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  416950:	1a52      	subs	r2, r2, r1
  416952:	805a      	strh	r2, [r3, #2]
            break;
  416954:	e7aa      	b.n	4168ac <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  416956:	8884      	ldrh	r4, [r0, #4]
  416958:	8802      	ldrh	r2, [r0, #0]
  41695a:	1aa4      	subs	r4, r4, r2
  41695c:	b2a4      	uxth	r4, r4
  41695e:	3401      	adds	r4, #1
  416960:	b224      	sxth	r4, r4
  416962:	888a      	ldrh	r2, [r1, #4]
  416964:	880d      	ldrh	r5, [r1, #0]
  416966:	1b52      	subs	r2, r2, r5
  416968:	b292      	uxth	r2, r2
  41696a:	3201      	adds	r2, #1
  41696c:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  41696e:	4625      	mov	r5, r4
  416970:	2c00      	cmp	r4, #0
  416972:	db15      	blt.n	4169a0 <_lv_area_align+0x180>
  416974:	106d      	asrs	r5, r5, #1
  416976:	4614      	mov	r4, r2
  416978:	2a00      	cmp	r2, #0
  41697a:	db13      	blt.n	4169a4 <_lv_area_align+0x184>
  41697c:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  416980:	801d      	strh	r5, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  416982:	88c2      	ldrh	r2, [r0, #6]
  416984:	8844      	ldrh	r4, [r0, #2]
  416986:	1b12      	subs	r2, r2, r4
  416988:	b292      	uxth	r2, r2
  41698a:	3201      	adds	r2, #1
  41698c:	b292      	uxth	r2, r2
  41698e:	88cc      	ldrh	r4, [r1, #6]
  416990:	8849      	ldrh	r1, [r1, #2]
  416992:	1a61      	subs	r1, r4, r1
  416994:	b289      	uxth	r1, r1
  416996:	3101      	adds	r1, #1
  416998:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  41699a:	1a52      	subs	r2, r2, r1
  41699c:	805a      	strh	r2, [r3, #2]
            break;
  41699e:	e785      	b.n	4168ac <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  4169a0:	1c65      	adds	r5, r4, #1
  4169a2:	e7e7      	b.n	416974 <_lv_area_align+0x154>
  4169a4:	1c54      	adds	r4, r2, #1
  4169a6:	e7e9      	b.n	41697c <_lv_area_align+0x15c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4169a8:	8882      	ldrh	r2, [r0, #4]
  4169aa:	8804      	ldrh	r4, [r0, #0]
  4169ac:	1b12      	subs	r2, r2, r4
  4169ae:	b292      	uxth	r2, r2
  4169b0:	3201      	adds	r2, #1
  4169b2:	b292      	uxth	r2, r2
  4169b4:	888c      	ldrh	r4, [r1, #4]
  4169b6:	880d      	ldrh	r5, [r1, #0]
  4169b8:	1b64      	subs	r4, r4, r5
  4169ba:	b2a4      	uxth	r4, r4
  4169bc:	3401      	adds	r4, #1
  4169be:	b2a4      	uxth	r4, r4
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  4169c0:	1b12      	subs	r2, r2, r4
  4169c2:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4169c4:	88c2      	ldrh	r2, [r0, #6]
  4169c6:	8844      	ldrh	r4, [r0, #2]
  4169c8:	1b12      	subs	r2, r2, r4
  4169ca:	b292      	uxth	r2, r2
  4169cc:	3201      	adds	r2, #1
  4169ce:	b292      	uxth	r2, r2
  4169d0:	88cc      	ldrh	r4, [r1, #6]
  4169d2:	8849      	ldrh	r1, [r1, #2]
  4169d4:	1a61      	subs	r1, r4, r1
  4169d6:	b289      	uxth	r1, r1
  4169d8:	3101      	adds	r1, #1
  4169da:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  4169dc:	1a52      	subs	r2, r2, r1
  4169de:	805a      	strh	r2, [r3, #2]
            break;
  4169e0:	e764      	b.n	4168ac <_lv_area_align+0x8c>
            res->x = 0;
  4169e2:	2200      	movs	r2, #0
  4169e4:	801a      	strh	r2, [r3, #0]
  4169e6:	88c4      	ldrh	r4, [r0, #6]
  4169e8:	8842      	ldrh	r2, [r0, #2]
  4169ea:	1aa4      	subs	r4, r4, r2
  4169ec:	b2a4      	uxth	r4, r4
  4169ee:	3401      	adds	r4, #1
  4169f0:	b224      	sxth	r4, r4
  4169f2:	88ca      	ldrh	r2, [r1, #6]
  4169f4:	8849      	ldrh	r1, [r1, #2]
  4169f6:	1a52      	subs	r2, r2, r1
  4169f8:	b292      	uxth	r2, r2
  4169fa:	3201      	adds	r2, #1
  4169fc:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  4169fe:	4621      	mov	r1, r4
  416a00:	2c00      	cmp	r4, #0
  416a02:	db07      	blt.n	416a14 <_lv_area_align+0x1f4>
  416a04:	1049      	asrs	r1, r1, #1
  416a06:	4614      	mov	r4, r2
  416a08:	2a00      	cmp	r2, #0
  416a0a:	db05      	blt.n	416a18 <_lv_area_align+0x1f8>
  416a0c:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  416a10:	8059      	strh	r1, [r3, #2]
            break;
  416a12:	e74b      	b.n	4168ac <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  416a14:	1c61      	adds	r1, r4, #1
  416a16:	e7f5      	b.n	416a04 <_lv_area_align+0x1e4>
  416a18:	1c54      	adds	r4, r2, #1
  416a1a:	e7f7      	b.n	416a0c <_lv_area_align+0x1ec>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  416a1c:	8882      	ldrh	r2, [r0, #4]
  416a1e:	8804      	ldrh	r4, [r0, #0]
  416a20:	1b12      	subs	r2, r2, r4
  416a22:	b292      	uxth	r2, r2
  416a24:	3201      	adds	r2, #1
  416a26:	b292      	uxth	r2, r2
  416a28:	888c      	ldrh	r4, [r1, #4]
  416a2a:	880d      	ldrh	r5, [r1, #0]
  416a2c:	1b64      	subs	r4, r4, r5
  416a2e:	b2a4      	uxth	r4, r4
  416a30:	3401      	adds	r4, #1
  416a32:	b2a4      	uxth	r4, r4
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  416a34:	1b12      	subs	r2, r2, r4
  416a36:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  416a38:	88c4      	ldrh	r4, [r0, #6]
  416a3a:	8842      	ldrh	r2, [r0, #2]
  416a3c:	1aa4      	subs	r4, r4, r2
  416a3e:	b2a4      	uxth	r4, r4
  416a40:	3401      	adds	r4, #1
  416a42:	b224      	sxth	r4, r4
  416a44:	88ca      	ldrh	r2, [r1, #6]
  416a46:	8849      	ldrh	r1, [r1, #2]
  416a48:	1a52      	subs	r2, r2, r1
  416a4a:	b292      	uxth	r2, r2
  416a4c:	3201      	adds	r2, #1
  416a4e:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  416a50:	4621      	mov	r1, r4
  416a52:	2c00      	cmp	r4, #0
  416a54:	db07      	blt.n	416a66 <_lv_area_align+0x246>
  416a56:	1049      	asrs	r1, r1, #1
  416a58:	4614      	mov	r4, r2
  416a5a:	2a00      	cmp	r2, #0
  416a5c:	db05      	blt.n	416a6a <_lv_area_align+0x24a>
  416a5e:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  416a62:	8059      	strh	r1, [r3, #2]
            break;
  416a64:	e722      	b.n	4168ac <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  416a66:	1c61      	adds	r1, r4, #1
  416a68:	e7f5      	b.n	416a56 <_lv_area_align+0x236>
  416a6a:	1c54      	adds	r4, r2, #1
  416a6c:	e7f7      	b.n	416a5e <_lv_area_align+0x23e>
            res->x = 0;
  416a6e:	2200      	movs	r2, #0
  416a70:	801a      	strh	r2, [r3, #0]
  416a72:	88ca      	ldrh	r2, [r1, #6]
  416a74:	8849      	ldrh	r1, [r1, #2]
  416a76:	1a52      	subs	r2, r2, r1
  416a78:	b292      	uxth	r2, r2
            res->y = -lv_area_get_height(to_align);
  416a7a:	43d2      	mvns	r2, r2
  416a7c:	805a      	strh	r2, [r3, #2]
            break;
  416a7e:	e715      	b.n	4168ac <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  416a80:	8884      	ldrh	r4, [r0, #4]
  416a82:	8802      	ldrh	r2, [r0, #0]
  416a84:	1aa4      	subs	r4, r4, r2
  416a86:	b2a4      	uxth	r4, r4
  416a88:	3401      	adds	r4, #1
  416a8a:	b224      	sxth	r4, r4
  416a8c:	888a      	ldrh	r2, [r1, #4]
  416a8e:	880d      	ldrh	r5, [r1, #0]
  416a90:	1b52      	subs	r2, r2, r5
  416a92:	b292      	uxth	r2, r2
  416a94:	3201      	adds	r2, #1
  416a96:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  416a98:	4625      	mov	r5, r4
  416a9a:	2c00      	cmp	r4, #0
  416a9c:	db0d      	blt.n	416aba <_lv_area_align+0x29a>
  416a9e:	106d      	asrs	r5, r5, #1
  416aa0:	4614      	mov	r4, r2
  416aa2:	2a00      	cmp	r2, #0
  416aa4:	db0b      	blt.n	416abe <_lv_area_align+0x29e>
  416aa6:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  416aaa:	801d      	strh	r5, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  416aac:	88ca      	ldrh	r2, [r1, #6]
  416aae:	8849      	ldrh	r1, [r1, #2]
  416ab0:	1a52      	subs	r2, r2, r1
  416ab2:	b292      	uxth	r2, r2
            res->y = -lv_area_get_height(to_align);
  416ab4:	43d2      	mvns	r2, r2
  416ab6:	805a      	strh	r2, [r3, #2]
            break;
  416ab8:	e6f8      	b.n	4168ac <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  416aba:	1c65      	adds	r5, r4, #1
  416abc:	e7ef      	b.n	416a9e <_lv_area_align+0x27e>
  416abe:	1c54      	adds	r4, r2, #1
  416ac0:	e7f1      	b.n	416aa6 <_lv_area_align+0x286>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  416ac2:	8882      	ldrh	r2, [r0, #4]
  416ac4:	8804      	ldrh	r4, [r0, #0]
  416ac6:	1b12      	subs	r2, r2, r4
  416ac8:	b292      	uxth	r2, r2
  416aca:	3201      	adds	r2, #1
  416acc:	b292      	uxth	r2, r2
  416ace:	888c      	ldrh	r4, [r1, #4]
  416ad0:	880d      	ldrh	r5, [r1, #0]
  416ad2:	1b64      	subs	r4, r4, r5
  416ad4:	b2a4      	uxth	r4, r4
  416ad6:	3401      	adds	r4, #1
  416ad8:	b2a4      	uxth	r4, r4
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  416ada:	1b12      	subs	r2, r2, r4
  416adc:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  416ade:	88ca      	ldrh	r2, [r1, #6]
  416ae0:	8849      	ldrh	r1, [r1, #2]
  416ae2:	1a52      	subs	r2, r2, r1
  416ae4:	b292      	uxth	r2, r2
            res->y = -lv_area_get_height(to_align);
  416ae6:	43d2      	mvns	r2, r2
  416ae8:	805a      	strh	r2, [r3, #2]
            break;
  416aea:	e6df      	b.n	4168ac <_lv_area_align+0x8c>
            res->x = 0;
  416aec:	2200      	movs	r2, #0
  416aee:	801a      	strh	r2, [r3, #0]
  416af0:	88c2      	ldrh	r2, [r0, #6]
  416af2:	8841      	ldrh	r1, [r0, #2]
  416af4:	1a52      	subs	r2, r2, r1
  416af6:	b292      	uxth	r2, r2
  416af8:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base);
  416afa:	805a      	strh	r2, [r3, #2]
            break;
  416afc:	e6d6      	b.n	4168ac <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  416afe:	8884      	ldrh	r4, [r0, #4]
  416b00:	8802      	ldrh	r2, [r0, #0]
  416b02:	1aa4      	subs	r4, r4, r2
  416b04:	b2a4      	uxth	r4, r4
  416b06:	3401      	adds	r4, #1
  416b08:	b224      	sxth	r4, r4
  416b0a:	888a      	ldrh	r2, [r1, #4]
  416b0c:	8809      	ldrh	r1, [r1, #0]
  416b0e:	1a52      	subs	r2, r2, r1
  416b10:	b292      	uxth	r2, r2
  416b12:	3201      	adds	r2, #1
  416b14:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  416b16:	4621      	mov	r1, r4
  416b18:	2c00      	cmp	r4, #0
  416b1a:	db0d      	blt.n	416b38 <_lv_area_align+0x318>
  416b1c:	1049      	asrs	r1, r1, #1
  416b1e:	4614      	mov	r4, r2
  416b20:	2a00      	cmp	r2, #0
  416b22:	db0b      	blt.n	416b3c <_lv_area_align+0x31c>
  416b24:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  416b28:	8019      	strh	r1, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  416b2a:	88c2      	ldrh	r2, [r0, #6]
  416b2c:	8841      	ldrh	r1, [r0, #2]
  416b2e:	1a52      	subs	r2, r2, r1
  416b30:	b292      	uxth	r2, r2
  416b32:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base);
  416b34:	805a      	strh	r2, [r3, #2]
            break;
  416b36:	e6b9      	b.n	4168ac <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  416b38:	1c61      	adds	r1, r4, #1
  416b3a:	e7ef      	b.n	416b1c <_lv_area_align+0x2fc>
  416b3c:	1c54      	adds	r4, r2, #1
  416b3e:	e7f1      	b.n	416b24 <_lv_area_align+0x304>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  416b40:	8882      	ldrh	r2, [r0, #4]
  416b42:	8804      	ldrh	r4, [r0, #0]
  416b44:	1b12      	subs	r2, r2, r4
  416b46:	b292      	uxth	r2, r2
  416b48:	3201      	adds	r2, #1
  416b4a:	b292      	uxth	r2, r2
  416b4c:	888c      	ldrh	r4, [r1, #4]
  416b4e:	8809      	ldrh	r1, [r1, #0]
  416b50:	1a61      	subs	r1, r4, r1
  416b52:	b289      	uxth	r1, r1
  416b54:	3101      	adds	r1, #1
  416b56:	b289      	uxth	r1, r1
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  416b58:	1a52      	subs	r2, r2, r1
  416b5a:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  416b5c:	88c2      	ldrh	r2, [r0, #6]
  416b5e:	8841      	ldrh	r1, [r0, #2]
  416b60:	1a52      	subs	r2, r2, r1
  416b62:	b292      	uxth	r2, r2
  416b64:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base);
  416b66:	805a      	strh	r2, [r3, #2]
            break;
  416b68:	e6a0      	b.n	4168ac <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  416b6a:	888a      	ldrh	r2, [r1, #4]
  416b6c:	8809      	ldrh	r1, [r1, #0]
  416b6e:	1a52      	subs	r2, r2, r1
  416b70:	b292      	uxth	r2, r2
            res->x = -lv_area_get_width(to_align);
  416b72:	43d2      	mvns	r2, r2
  416b74:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  416b76:	2200      	movs	r2, #0
  416b78:	805a      	strh	r2, [r3, #2]
            break;
  416b7a:	e697      	b.n	4168ac <_lv_area_align+0x8c>
  416b7c:	888a      	ldrh	r2, [r1, #4]
  416b7e:	880c      	ldrh	r4, [r1, #0]
  416b80:	1b12      	subs	r2, r2, r4
  416b82:	b292      	uxth	r2, r2
            res->x = -lv_area_get_width(to_align);
  416b84:	43d2      	mvns	r2, r2
  416b86:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  416b88:	88c4      	ldrh	r4, [r0, #6]
  416b8a:	8842      	ldrh	r2, [r0, #2]
  416b8c:	1aa4      	subs	r4, r4, r2
  416b8e:	b2a4      	uxth	r4, r4
  416b90:	3401      	adds	r4, #1
  416b92:	b224      	sxth	r4, r4
  416b94:	88ca      	ldrh	r2, [r1, #6]
  416b96:	8849      	ldrh	r1, [r1, #2]
  416b98:	1a52      	subs	r2, r2, r1
  416b9a:	b292      	uxth	r2, r2
  416b9c:	3201      	adds	r2, #1
  416b9e:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  416ba0:	4621      	mov	r1, r4
  416ba2:	2c00      	cmp	r4, #0
  416ba4:	db07      	blt.n	416bb6 <_lv_area_align+0x396>
  416ba6:	1049      	asrs	r1, r1, #1
  416ba8:	4614      	mov	r4, r2
  416baa:	2a00      	cmp	r2, #0
  416bac:	db05      	blt.n	416bba <_lv_area_align+0x39a>
  416bae:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  416bb2:	8059      	strh	r1, [r3, #2]
            break;
  416bb4:	e67a      	b.n	4168ac <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  416bb6:	1c61      	adds	r1, r4, #1
  416bb8:	e7f5      	b.n	416ba6 <_lv_area_align+0x386>
  416bba:	1c54      	adds	r4, r2, #1
  416bbc:	e7f7      	b.n	416bae <_lv_area_align+0x38e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  416bbe:	888a      	ldrh	r2, [r1, #4]
  416bc0:	880c      	ldrh	r4, [r1, #0]
  416bc2:	1b12      	subs	r2, r2, r4
  416bc4:	b292      	uxth	r2, r2
            res->x = -lv_area_get_width(to_align);
  416bc6:	43d2      	mvns	r2, r2
  416bc8:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  416bca:	88c2      	ldrh	r2, [r0, #6]
  416bcc:	8844      	ldrh	r4, [r0, #2]
  416bce:	1b12      	subs	r2, r2, r4
  416bd0:	b292      	uxth	r2, r2
  416bd2:	3201      	adds	r2, #1
  416bd4:	b292      	uxth	r2, r2
  416bd6:	88cc      	ldrh	r4, [r1, #6]
  416bd8:	8849      	ldrh	r1, [r1, #2]
  416bda:	1a61      	subs	r1, r4, r1
  416bdc:	b289      	uxth	r1, r1
  416bde:	3101      	adds	r1, #1
  416be0:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  416be2:	1a52      	subs	r2, r2, r1
  416be4:	805a      	strh	r2, [r3, #2]
            break;
  416be6:	e661      	b.n	4168ac <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  416be8:	8882      	ldrh	r2, [r0, #4]
  416bea:	8801      	ldrh	r1, [r0, #0]
  416bec:	1a52      	subs	r2, r2, r1
  416bee:	b292      	uxth	r2, r2
  416bf0:	3201      	adds	r2, #1
            res->x = lv_area_get_width(base);
  416bf2:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  416bf4:	2200      	movs	r2, #0
  416bf6:	805a      	strh	r2, [r3, #2]
            break;
  416bf8:	e658      	b.n	4168ac <_lv_area_align+0x8c>
  416bfa:	8882      	ldrh	r2, [r0, #4]
  416bfc:	8804      	ldrh	r4, [r0, #0]
  416bfe:	1b12      	subs	r2, r2, r4
  416c00:	b292      	uxth	r2, r2
  416c02:	3201      	adds	r2, #1
            res->x = lv_area_get_width(base);
  416c04:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  416c06:	88c4      	ldrh	r4, [r0, #6]
  416c08:	8842      	ldrh	r2, [r0, #2]
  416c0a:	1aa4      	subs	r4, r4, r2
  416c0c:	b2a4      	uxth	r4, r4
  416c0e:	3401      	adds	r4, #1
  416c10:	b224      	sxth	r4, r4
  416c12:	88ca      	ldrh	r2, [r1, #6]
  416c14:	8849      	ldrh	r1, [r1, #2]
  416c16:	1a52      	subs	r2, r2, r1
  416c18:	b292      	uxth	r2, r2
  416c1a:	3201      	adds	r2, #1
  416c1c:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  416c1e:	4621      	mov	r1, r4
  416c20:	2c00      	cmp	r4, #0
  416c22:	db07      	blt.n	416c34 <_lv_area_align+0x414>
  416c24:	1049      	asrs	r1, r1, #1
  416c26:	4614      	mov	r4, r2
  416c28:	2a00      	cmp	r2, #0
  416c2a:	db05      	blt.n	416c38 <_lv_area_align+0x418>
  416c2c:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  416c30:	8059      	strh	r1, [r3, #2]
            break;
  416c32:	e63b      	b.n	4168ac <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  416c34:	1c61      	adds	r1, r4, #1
  416c36:	e7f5      	b.n	416c24 <_lv_area_align+0x404>
  416c38:	1c54      	adds	r4, r2, #1
  416c3a:	e7f7      	b.n	416c2c <_lv_area_align+0x40c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  416c3c:	8882      	ldrh	r2, [r0, #4]
  416c3e:	8804      	ldrh	r4, [r0, #0]
  416c40:	1b12      	subs	r2, r2, r4
  416c42:	b292      	uxth	r2, r2
  416c44:	3201      	adds	r2, #1
            res->x = lv_area_get_width(base);
  416c46:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  416c48:	88c2      	ldrh	r2, [r0, #6]
  416c4a:	8844      	ldrh	r4, [r0, #2]
  416c4c:	1b12      	subs	r2, r2, r4
  416c4e:	b292      	uxth	r2, r2
  416c50:	3201      	adds	r2, #1
  416c52:	b292      	uxth	r2, r2
  416c54:	88cc      	ldrh	r4, [r1, #6]
  416c56:	8849      	ldrh	r1, [r1, #2]
  416c58:	1a61      	subs	r1, r4, r1
  416c5a:	b289      	uxth	r1, r1
  416c5c:	3101      	adds	r1, #1
  416c5e:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  416c60:	1a52      	subs	r2, r2, r1
  416c62:	805a      	strh	r2, [r3, #2]
            break;
  416c64:	e622      	b.n	4168ac <_lv_area_align+0x8c>

00416c66 <lv_color_fill>:

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
  416c66:	f010 0f03 	tst.w	r0, #3
  416c6a:	d002      	beq.n	416c72 <lv_color_fill+0xc>
        *buf = color;
  416c6c:	f820 1b02 	strh.w	r1, [r0], #2
        buf++;
        px_num--;
  416c70:	3a01      	subs	r2, #1
    }

    uint32_t c32 = color.full + (color.full << 16);
  416c72:	b28b      	uxth	r3, r1
  416c74:	eb03 4303 	add.w	r3, r3, r3, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
  416c78:	e009      	b.n	416c8e <lv_color_fill+0x28>
        *buf32 = c32;
  416c7a:	6003      	str	r3, [r0, #0]
        buf32++;
        *buf32 = c32;
  416c7c:	6043      	str	r3, [r0, #4]
        buf32++;
        *buf32 = c32;
  416c7e:	6083      	str	r3, [r0, #8]
        buf32++;
        *buf32 = c32;
  416c80:	60c3      	str	r3, [r0, #12]
        buf32++;

        *buf32 = c32;
  416c82:	6103      	str	r3, [r0, #16]
        buf32++;
        *buf32 = c32;
  416c84:	6143      	str	r3, [r0, #20]
        buf32++;
        *buf32 = c32;
  416c86:	6183      	str	r3, [r0, #24]
        buf32++;
        *buf32 = c32;
  416c88:	61c3      	str	r3, [r0, #28]
        buf32++;
  416c8a:	3020      	adds	r0, #32

        px_num -= 16;
  416c8c:	3a10      	subs	r2, #16
    while(px_num > 16) {
  416c8e:	2a10      	cmp	r2, #16
  416c90:	d8f3      	bhi.n	416c7a <lv_color_fill+0x14>
  416c92:	e002      	b.n	416c9a <lv_color_fill+0x34>
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
        *buf = color;
  416c94:	f820 1b02 	strh.w	r1, [r0], #2
        buf++;
        px_num --;
  416c98:	3a01      	subs	r2, #1
    while(px_num) {
  416c9a:	2a00      	cmp	r2, #0
  416c9c:	d1fa      	bne.n	416c94 <lv_color_fill+0x2e>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
  416c9e:	4770      	bx	lr

00416ca0 <lv_color_lighten>:

lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl)
{
  416ca0:	b4f0      	push	{r4, r5, r6, r7}
  416ca2:	4602      	mov	r2, r0
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
  416ca4:	4b23      	ldr	r3, [pc, #140]	; (416d34 <lv_color_lighten+0x94>)
  416ca6:	881c      	ldrh	r4, [r3, #0]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  416ca8:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  416cac:	f3c2 00c4 	ubfx	r0, r2, #3, #5
  416cb0:	f1c1 05ff 	rsb	r5, r1, #255	; 0xff
  416cb4:	fb05 f000 	mul.w	r0, r5, r0
  416cb8:	fb01 0303 	mla	r3, r1, r3, r0
  416cbc:	3380      	adds	r3, #128	; 0x80
  416cbe:	eb03 2003 	add.w	r0, r3, r3, lsl #8
  416cc2:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
  416cc6:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  416cca:	f04f 0000 	mov.w	r0, #0
  416cce:	f363 00c7 	bfi	r0, r3, #3, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  416cd2:	f004 0607 	and.w	r6, r4, #7
  416cd6:	f3c4 3342 	ubfx	r3, r4, #13, #3
  416cda:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  416cde:	f002 0707 	and.w	r7, r2, #7
  416ce2:	f3c2 3642 	ubfx	r6, r2, #13, #3
  416ce6:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
  416cea:	fb06 f605 	mul.w	r6, r6, r5
  416cee:	fb03 6301 	mla	r3, r3, r1, r6
  416cf2:	3380      	adds	r3, #128	; 0x80
  416cf4:	eb03 2603 	add.w	r6, r3, r3, lsl #8
  416cf8:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
  416cfc:	f3c3 6682 	ubfx	r6, r3, #26, #3
  416d00:	f366 0002 	bfi	r0, r6, #0, #3
  416d04:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  416d08:	f363 304f 	bfi	r0, r3, #13, #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  416d0c:	f3c4 2404 	ubfx	r4, r4, #8, #5
  416d10:	f3c2 2204 	ubfx	r2, r2, #8, #5
  416d14:	fb02 f505 	mul.w	r5, r2, r5
  416d18:	fb04 5101 	mla	r1, r4, r1, r5
  416d1c:	3180      	adds	r1, #128	; 0x80
  416d1e:	eb01 2301 	add.w	r3, r1, r1, lsl #8
  416d22:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
  416d26:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  416d2a:	f361 200c 	bfi	r0, r1, #8, #5
}
  416d2e:	bcf0      	pop	{r4, r5, r6, r7}
  416d30:	4770      	bx	lr
  416d32:	bf00      	nop
  416d34:	00431b38 	.word	0x00431b38

00416d38 <lv_color_darken>:

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
  416d38:	b410      	push	{r4}
  416d3a:	4603      	mov	r3, r0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  416d3c:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  416d40:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
  416d44:	fb01 f202 	mul.w	r2, r1, r2
  416d48:	3280      	adds	r2, #128	; 0x80
  416d4a:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  416d4e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  416d52:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  416d56:	f04f 0000 	mov.w	r0, #0
  416d5a:	f362 00c7 	bfi	r0, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  416d5e:	f003 0407 	and.w	r4, r3, #7
  416d62:	f3c3 3242 	ubfx	r2, r3, #13, #3
  416d66:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
  416d6a:	fb02 f201 	mul.w	r2, r2, r1
  416d6e:	3280      	adds	r2, #128	; 0x80
  416d70:	eb02 2402 	add.w	r4, r2, r2, lsl #8
  416d74:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
  416d78:	f3c2 6482 	ubfx	r4, r2, #26, #3
  416d7c:	f364 0002 	bfi	r0, r4, #0, #3
  416d80:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  416d84:	f362 304f 	bfi	r0, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  416d88:	f3c3 2304 	ubfx	r3, r3, #8, #5
  416d8c:	fb03 f301 	mul.w	r3, r3, r1
  416d90:	3380      	adds	r3, #128	; 0x80
  416d92:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  416d96:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  416d9a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  416d9e:	f363 200c 	bfi	r0, r3, #8, #5
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
}
  416da2:	f85d 4b04 	ldr.w	r4, [sp], #4
  416da6:	4770      	bx	lr

00416da8 <lv_debug_check_null>:
 *   GLOBAL FUNCTIONS
 **********************/

bool lv_debug_check_null(const void * p)
{
    if(p) return true;
  416da8:	b108      	cbz	r0, 416dae <lv_debug_check_null+0x6>
  416daa:	2001      	movs	r0, #1
  416dac:	4770      	bx	lr

    return false;
  416dae:	2000      	movs	r0, #0
}
  416db0:	4770      	bx	lr
	...

00416db4 <lv_debug_log_error>:
    LV_LOG_WARN("lv_debug_check_str: string is longer than LV_DEBUG_STR_MAX_LENGTH");
    return false;
}

void lv_debug_log_error(const char * msg, uint64_t value)
{
  416db4:	b570      	push	{r4, r5, r6, lr}
  416db6:	b0c0      	sub	sp, #256	; 0x100
  416db8:	4606      	mov	r6, r0
  416dba:	4614      	mov	r4, r2
    static const char hex[] = "0123456789ABCDEF";

    size_t msg_len = strlen(msg);
  416dbc:	4b15      	ldr	r3, [pc, #84]	; (416e14 <lv_debug_log_error+0x60>)
  416dbe:	4798      	blx	r3
    uint32_t value_len = sizeof(unsigned long int);

    if(msg_len < 230) {
  416dc0:	28e5      	cmp	r0, #229	; 0xe5
  416dc2:	d901      	bls.n	416dc8 <lv_debug_log_error+0x14>
        LV_LOG_ERROR(buf);
    }
    else {
        LV_LOG_ERROR(msg);
    }
}
  416dc4:	b040      	add	sp, #256	; 0x100
  416dc6:	bd70      	pop	{r4, r5, r6, pc}
  416dc8:	4605      	mov	r5, r0
        _lv_memcpy(bufp, msg, msg_len);
  416dca:	4602      	mov	r2, r0
  416dcc:	4631      	mov	r1, r6
  416dce:	4668      	mov	r0, sp
  416dd0:	4b11      	ldr	r3, [pc, #68]	; (416e18 <lv_debug_log_error+0x64>)
  416dd2:	4798      	blx	r3
        bufp += msg_len;
  416dd4:	eb0d 0105 	add.w	r1, sp, r5
        *bufp = ' ';
  416dd8:	2320      	movs	r3, #32
  416dda:	f80d 3005 	strb.w	r3, [sp, r5]
        *bufp = '(';
  416dde:	2328      	movs	r3, #40	; 0x28
  416de0:	704b      	strb	r3, [r1, #1]
        *bufp = '0';
  416de2:	2330      	movs	r3, #48	; 0x30
  416de4:	708b      	strb	r3, [r1, #2]
        *bufp = 'x';
  416de6:	2378      	movs	r3, #120	; 0x78
  416de8:	70cb      	strb	r3, [r1, #3]
        bufp ++;
  416dea:	3104      	adds	r1, #4
        for(i = value_len * 2 - 1; i >= 0; i--) {
  416dec:	2307      	movs	r3, #7
  416dee:	e00a      	b.n	416e06 <lv_debug_log_error+0x52>
            uint8_t x = (unsigned long int)((unsigned long int)value >> (i * 4)) & 0xF;
  416df0:	009a      	lsls	r2, r3, #2
  416df2:	fa24 f202 	lsr.w	r2, r4, r2
  416df6:	f002 020f 	and.w	r2, r2, #15
            *bufp = hex[x];
  416dfa:	4808      	ldr	r0, [pc, #32]	; (416e1c <lv_debug_log_error+0x68>)
  416dfc:	5c82      	ldrb	r2, [r0, r2]
  416dfe:	f801 2b01 	strb.w	r2, [r1], #1
        for(i = value_len * 2 - 1; i >= 0; i--) {
  416e02:	3b01      	subs	r3, #1
  416e04:	b25b      	sxtb	r3, r3
  416e06:	2b00      	cmp	r3, #0
  416e08:	daf2      	bge.n	416df0 <lv_debug_log_error+0x3c>
        *bufp = ')';
  416e0a:	2329      	movs	r3, #41	; 0x29
  416e0c:	700b      	strb	r3, [r1, #0]
        *bufp = '\0';
  416e0e:	2300      	movs	r3, #0
  416e10:	704b      	strb	r3, [r1, #1]
}
  416e12:	e7d7      	b.n	416dc4 <lv_debug_log_error+0x10>
  416e14:	00428dc1 	.word	0x00428dc1
  416e18:	004176fd 	.word	0x004176fd
  416e1c:	00431b3c 	.word	0x00431b3c

00416e20 <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
  416e20:	3001      	adds	r0, #1

    while(*path != '\0') {
  416e22:	e000      	b.n	416e26 <lv_fs_get_real_path+0x6>
        if(*path == ':' || *path == '\\' || *path == '/') {
            path++;
  416e24:	3001      	adds	r0, #1
    while(*path != '\0') {
  416e26:	7803      	ldrb	r3, [r0, #0]
  416e28:	b12b      	cbz	r3, 416e36 <lv_fs_get_real_path+0x16>
        if(*path == ':' || *path == '\\' || *path == '/') {
  416e2a:	2b5c      	cmp	r3, #92	; 0x5c
  416e2c:	bf18      	it	ne
  416e2e:	2b3a      	cmpne	r3, #58	; 0x3a
  416e30:	d0f8      	beq.n	416e24 <lv_fs_get_real_path+0x4>
  416e32:	2b2f      	cmp	r3, #47	; 0x2f
  416e34:	d0f6      	beq.n	416e24 <lv_fs_get_real_path+0x4>
            break;
        }
    }

    return path;
}
  416e36:	4770      	bx	lr

00416e38 <_lv_fs_init>:
{
  416e38:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
  416e3a:	2144      	movs	r1, #68	; 0x44
  416e3c:	4801      	ldr	r0, [pc, #4]	; (416e44 <_lv_fs_init+0xc>)
  416e3e:	4b02      	ldr	r3, [pc, #8]	; (416e48 <_lv_fs_init+0x10>)
  416e40:	4798      	blx	r3
  416e42:	bd08      	pop	{r3, pc}
  416e44:	2043a2fc 	.word	0x2043a2fc
  416e48:	0041700f 	.word	0x0041700f

00416e4c <lv_fs_close>:
{
  416e4c:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
  416e4e:	6843      	ldr	r3, [r0, #4]
  416e50:	b173      	cbz	r3, 416e70 <lv_fs_close+0x24>
    if(file_p->drv->close_cb == NULL) {
  416e52:	691a      	ldr	r2, [r3, #16]
  416e54:	b172      	cbz	r2, 416e74 <lv_fs_close+0x28>
  416e56:	4604      	mov	r4, r0
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
  416e58:	6801      	ldr	r1, [r0, #0]
  416e5a:	4618      	mov	r0, r3
  416e5c:	4790      	blx	r2
  416e5e:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
  416e60:	6820      	ldr	r0, [r4, #0]
  416e62:	4b05      	ldr	r3, [pc, #20]	; (416e78 <lv_fs_close+0x2c>)
  416e64:	4798      	blx	r3
    file_p->file_d = NULL;
  416e66:	2300      	movs	r3, #0
  416e68:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
  416e6a:	6063      	str	r3, [r4, #4]
}
  416e6c:	4628      	mov	r0, r5
  416e6e:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
  416e70:	250b      	movs	r5, #11
  416e72:	e7fb      	b.n	416e6c <lv_fs_close+0x20>
        return LV_FS_RES_NOT_IMP;
  416e74:	2509      	movs	r5, #9
  416e76:	e7f9      	b.n	416e6c <lv_fs_close+0x20>
  416e78:	004175b1 	.word	0x004175b1

00416e7c <lv_fs_read>:
{
  416e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  416e7e:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
  416e80:	461e      	mov	r6, r3
  416e82:	b10b      	cbz	r3, 416e88 <lv_fs_read+0xc>
  416e84:	2300      	movs	r3, #0
  416e86:	6033      	str	r3, [r6, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
  416e88:	6845      	ldr	r5, [r0, #4]
  416e8a:	b18d      	cbz	r5, 416eb0 <lv_fs_read+0x34>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
  416e8c:	69af      	ldr	r7, [r5, #24]
  416e8e:	b18f      	cbz	r7, 416eb4 <lv_fs_read+0x38>
  416e90:	4613      	mov	r3, r2
  416e92:	460a      	mov	r2, r1
  416e94:	4604      	mov	r4, r0
    uint32_t br_tmp = 0;
  416e96:	a804      	add	r0, sp, #16
  416e98:	2100      	movs	r1, #0
  416e9a:	f840 1d04 	str.w	r1, [r0, #-4]!
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
  416e9e:	6821      	ldr	r1, [r4, #0]
  416ea0:	9000      	str	r0, [sp, #0]
  416ea2:	4628      	mov	r0, r5
  416ea4:	47b8      	blx	r7
    if(br != NULL) *br = br_tmp;
  416ea6:	b10e      	cbz	r6, 416eac <lv_fs_read+0x30>
  416ea8:	9b03      	ldr	r3, [sp, #12]
  416eaa:	6033      	str	r3, [r6, #0]
}
  416eac:	b005      	add	sp, #20
  416eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
  416eb0:	200b      	movs	r0, #11
  416eb2:	e7fb      	b.n	416eac <lv_fs_read+0x30>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
  416eb4:	2009      	movs	r0, #9
  416eb6:	e7f9      	b.n	416eac <lv_fs_read+0x30>

00416eb8 <lv_fs_seek>:
{
  416eb8:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
  416eba:	6844      	ldr	r4, [r0, #4]
  416ebc:	b134      	cbz	r4, 416ecc <lv_fs_seek+0x14>
    if(file_p->drv->seek_cb == NULL) {
  416ebe:	6a25      	ldr	r5, [r4, #32]
  416ec0:	b135      	cbz	r5, 416ed0 <lv_fs_seek+0x18>
  416ec2:	460a      	mov	r2, r1
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
  416ec4:	6801      	ldr	r1, [r0, #0]
  416ec6:	4620      	mov	r0, r4
  416ec8:	47a8      	blx	r5
    return res;
  416eca:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
  416ecc:	200b      	movs	r0, #11
  416ece:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_NOT_IMP;
  416ed0:	2009      	movs	r0, #9
}
  416ed2:	bd38      	pop	{r3, r4, r5, pc}

00416ed4 <lv_fs_get_drv>:
{
  416ed4:	b510      	push	{r4, lr}
  416ed6:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
  416ed8:	4806      	ldr	r0, [pc, #24]	; (416ef4 <lv_fs_get_drv+0x20>)
  416eda:	4b07      	ldr	r3, [pc, #28]	; (416ef8 <lv_fs_get_drv+0x24>)
  416edc:	4798      	blx	r3
  416ede:	b138      	cbz	r0, 416ef0 <lv_fs_get_drv+0x1c>
        if(drv->letter == letter) {
  416ee0:	7803      	ldrb	r3, [r0, #0]
  416ee2:	42a3      	cmp	r3, r4
  416ee4:	d004      	beq.n	416ef0 <lv_fs_get_drv+0x1c>
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
  416ee6:	4601      	mov	r1, r0
  416ee8:	4802      	ldr	r0, [pc, #8]	; (416ef4 <lv_fs_get_drv+0x20>)
  416eea:	4b04      	ldr	r3, [pc, #16]	; (416efc <lv_fs_get_drv+0x28>)
  416eec:	4798      	blx	r3
  416eee:	e7f6      	b.n	416ede <lv_fs_get_drv+0xa>
}
  416ef0:	bd10      	pop	{r4, pc}
  416ef2:	bf00      	nop
  416ef4:	2043a2fc 	.word	0x2043a2fc
  416ef8:	004170b9 	.word	0x004170b9
  416efc:	004170cd 	.word	0x004170cd

00416f00 <lv_fs_open>:
{
  416f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    file_p->drv    = NULL;
  416f04:	2400      	movs	r4, #0
  416f06:	6044      	str	r4, [r0, #4]
    file_p->file_d = NULL;
  416f08:	6004      	str	r4, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
  416f0a:	2900      	cmp	r1, #0
  416f0c:	d044      	beq.n	416f98 <lv_fs_open+0x98>
  416f0e:	460d      	mov	r5, r1
  416f10:	4690      	mov	r8, r2
  416f12:	4604      	mov	r4, r0
    file_p->drv = lv_fs_get_drv(letter);
  416f14:	7808      	ldrb	r0, [r1, #0]
  416f16:	4b23      	ldr	r3, [pc, #140]	; (416fa4 <lv_fs_open+0xa4>)
  416f18:	4798      	blx	r3
  416f1a:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
  416f1c:	2800      	cmp	r0, #0
  416f1e:	d03f      	beq.n	416fa0 <lv_fs_open+0xa0>
    if(file_p->drv->ready_cb != NULL) {
  416f20:	6883      	ldr	r3, [r0, #8]
  416f22:	b10b      	cbz	r3, 416f28 <lv_fs_open+0x28>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
  416f24:	4798      	blx	r3
  416f26:	b1a0      	cbz	r0, 416f52 <lv_fs_open+0x52>
    if(file_p->drv->open_cb == NULL) {
  416f28:	6867      	ldr	r7, [r4, #4]
  416f2a:	68fe      	ldr	r6, [r7, #12]
  416f2c:	b1ae      	cbz	r6, 416f5a <lv_fs_open+0x5a>
    const char * real_path = lv_fs_get_real_path(path);
  416f2e:	4628      	mov	r0, r5
  416f30:	4b1d      	ldr	r3, [pc, #116]	; (416fa8 <lv_fs_open+0xa8>)
  416f32:	4798      	blx	r3
  416f34:	4605      	mov	r5, r0
    if(file_p->drv->file_size == 0) {  /*Is file_d zero size?*/
  416f36:	8878      	ldrh	r0, [r7, #2]
  416f38:	b198      	cbz	r0, 416f62 <lv_fs_open+0x62>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
  416f3a:	4b1c      	ldr	r3, [pc, #112]	; (416fac <lv_fs_open+0xac>)
  416f3c:	4798      	blx	r3
  416f3e:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(file_p->file_d);
  416f40:	4b1b      	ldr	r3, [pc, #108]	; (416fb0 <lv_fs_open+0xb0>)
  416f42:	4798      	blx	r3
  416f44:	b1a0      	cbz	r0, 416f70 <lv_fs_open+0x70>
    if(file_p->file_d == NULL) {
  416f46:	6821      	ldr	r1, [r4, #0]
  416f48:	b9c1      	cbnz	r1, 416f7c <lv_fs_open+0x7c>
        file_p->drv = NULL;
  416f4a:	2300      	movs	r3, #0
  416f4c:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
  416f4e:	250a      	movs	r5, #10
  416f50:	e023      	b.n	416f9a <lv_fs_open+0x9a>
            file_p->drv = NULL;
  416f52:	2300      	movs	r3, #0
  416f54:	6063      	str	r3, [r4, #4]
            return LV_FS_RES_HW_ERR;
  416f56:	2501      	movs	r5, #1
  416f58:	e01f      	b.n	416f9a <lv_fs_open+0x9a>
        file_p->drv = NULL;
  416f5a:	2300      	movs	r3, #0
  416f5c:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_NOT_IMP;
  416f5e:	2509      	movs	r5, #9
  416f60:	e01b      	b.n	416f9a <lv_fs_open+0x9a>
        return file_p->drv->open_cb(file_p->drv, &file_p->file_d, real_path, mode);
  416f62:	4643      	mov	r3, r8
  416f64:	462a      	mov	r2, r5
  416f66:	4621      	mov	r1, r4
  416f68:	4638      	mov	r0, r7
  416f6a:	47b0      	blx	r6
  416f6c:	4605      	mov	r5, r0
  416f6e:	e014      	b.n	416f9a <lv_fs_open+0x9a>
    LV_ASSERT_MEM(file_p->file_d);
  416f70:	6822      	ldr	r2, [r4, #0]
  416f72:	2300      	movs	r3, #0
  416f74:	480f      	ldr	r0, [pc, #60]	; (416fb4 <lv_fs_open+0xb4>)
  416f76:	4910      	ldr	r1, [pc, #64]	; (416fb8 <lv_fs_open+0xb8>)
  416f78:	4788      	blx	r1
  416f7a:	e7fe      	b.n	416f7a <lv_fs_open+0x7a>
    lv_fs_res_t res = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
  416f7c:	6860      	ldr	r0, [r4, #4]
  416f7e:	68c7      	ldr	r7, [r0, #12]
  416f80:	4643      	mov	r3, r8
  416f82:	462a      	mov	r2, r5
  416f84:	47b8      	blx	r7
    if(res != LV_FS_RES_OK) {
  416f86:	4605      	mov	r5, r0
  416f88:	b138      	cbz	r0, 416f9a <lv_fs_open+0x9a>
        lv_mem_free(file_p->file_d);
  416f8a:	6820      	ldr	r0, [r4, #0]
  416f8c:	4b0b      	ldr	r3, [pc, #44]	; (416fbc <lv_fs_open+0xbc>)
  416f8e:	4798      	blx	r3
        file_p->file_d = NULL;
  416f90:	2300      	movs	r3, #0
  416f92:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
  416f94:	6063      	str	r3, [r4, #4]
  416f96:	e000      	b.n	416f9a <lv_fs_open+0x9a>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
  416f98:	250b      	movs	r5, #11
}
  416f9a:	4628      	mov	r0, r5
  416f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LV_FS_RES_NOT_EX;
  416fa0:	2503      	movs	r5, #3
  416fa2:	e7fa      	b.n	416f9a <lv_fs_open+0x9a>
  416fa4:	00416ed5 	.word	0x00416ed5
  416fa8:	00416e21 	.word	0x00416e21
  416fac:	004174ed 	.word	0x004174ed
  416fb0:	00416da9 	.word	0x00416da9
  416fb4:	0042e54c 	.word	0x0042e54c
  416fb8:	00416db5 	.word	0x00416db5
  416fbc:	004175b1 	.word	0x004175b1

00416fc0 <lv_fs_get_ext>:
{
  416fc0:	b510      	push	{r4, lr}
  416fc2:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
  416fc4:	4b09      	ldr	r3, [pc, #36]	; (416fec <lv_fs_get_ext+0x2c>)
  416fc6:	4798      	blx	r3
  416fc8:	b158      	cbz	r0, 416fe2 <lv_fs_get_ext+0x22>
        if(fn[i] == '.') {
  416fca:	5c23      	ldrb	r3, [r4, r0]
  416fcc:	2b2e      	cmp	r3, #46	; 0x2e
  416fce:	d005      	beq.n	416fdc <lv_fs_get_ext+0x1c>
        else if(fn[i] == '/' || fn[i] == '\\') {
  416fd0:	2b5c      	cmp	r3, #92	; 0x5c
  416fd2:	bf18      	it	ne
  416fd4:	2b2f      	cmpne	r3, #47	; 0x2f
  416fd6:	d006      	beq.n	416fe6 <lv_fs_get_ext+0x26>
    for(i = strlen(fn); i > 0; i--) {
  416fd8:	3801      	subs	r0, #1
  416fda:	e7f5      	b.n	416fc8 <lv_fs_get_ext+0x8>
            return &fn[i + 1];
  416fdc:	3001      	adds	r0, #1
  416fde:	4420      	add	r0, r4
  416fe0:	bd10      	pop	{r4, pc}
    return ""; /*Empty string if no '.' in the file name. */
  416fe2:	4803      	ldr	r0, [pc, #12]	; (416ff0 <lv_fs_get_ext+0x30>)
  416fe4:	bd10      	pop	{r4, pc}
            return ""; /*No extension if a '\' or '/' found*/
  416fe6:	4802      	ldr	r0, [pc, #8]	; (416ff0 <lv_fs_get_ext+0x30>)
}
  416fe8:	bd10      	pop	{r4, pc}
  416fea:	bf00      	nop
  416fec:	00428dc1 	.word	0x00428dc1
  416ff0:	00431d30 	.word	0x00431d30

00416ff4 <node_set_prev>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
  416ff4:	460b      	mov	r3, r1
  416ff6:	b109      	cbz	r1, 416ffc <node_set_prev+0x8>

    uint8_t * act8 = (uint8_t *) act;

    act8 += LL_PREV_P_OFFSET(ll_p);
  416ff8:	6801      	ldr	r1, [r0, #0]

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
  416ffa:	505a      	str	r2, [r3, r1]
  416ffc:	4770      	bx	lr

00416ffe <node_set_next>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
  416ffe:	b129      	cbz	r1, 41700c <node_set_next+0xe>
{
  417000:	b410      	push	{r4}
    uint8_t * act8 = (uint8_t *) act;

    act8 += LL_NEXT_P_OFFSET(ll_p);
  417002:	6803      	ldr	r3, [r0, #0]
  417004:	3304      	adds	r3, #4
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
  417006:	50ca      	str	r2, [r1, r3]
}
  417008:	f85d 4b04 	ldr.w	r4, [sp], #4
  41700c:	4770      	bx	lr

0041700e <_lv_ll_init>:
    ll_p->head = NULL;
  41700e:	2300      	movs	r3, #0
  417010:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
  417012:	6083      	str	r3, [r0, #8]
    node_size = (node_size + 3) & (~0x3);
  417014:	3103      	adds	r1, #3
  417016:	f021 0103 	bic.w	r1, r1, #3
    ll_p->n_size = node_size;
  41701a:	6001      	str	r1, [r0, #0]
  41701c:	4770      	bx	lr
	...

00417020 <_lv_ll_ins_head>:
{
  417020:	b538      	push	{r3, r4, r5, lr}
  417022:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  417024:	6800      	ldr	r0, [r0, #0]
  417026:	3008      	adds	r0, #8
  417028:	4b0d      	ldr	r3, [pc, #52]	; (417060 <_lv_ll_ins_head+0x40>)
  41702a:	4798      	blx	r3
    if(n_new != NULL) {
  41702c:	4605      	mov	r5, r0
  41702e:	b190      	cbz	r0, 417056 <_lv_ll_ins_head+0x36>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
  417030:	2200      	movs	r2, #0
  417032:	4601      	mov	r1, r0
  417034:	4620      	mov	r0, r4
  417036:	4b0b      	ldr	r3, [pc, #44]	; (417064 <_lv_ll_ins_head+0x44>)
  417038:	4798      	blx	r3
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
  41703a:	6862      	ldr	r2, [r4, #4]
  41703c:	4629      	mov	r1, r5
  41703e:	4620      	mov	r0, r4
  417040:	4b09      	ldr	r3, [pc, #36]	; (417068 <_lv_ll_ins_head+0x48>)
  417042:	4798      	blx	r3
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
  417044:	6861      	ldr	r1, [r4, #4]
  417046:	b119      	cbz	r1, 417050 <_lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
  417048:	462a      	mov	r2, r5
  41704a:	4620      	mov	r0, r4
  41704c:	4b05      	ldr	r3, [pc, #20]	; (417064 <_lv_ll_ins_head+0x44>)
  41704e:	4798      	blx	r3
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
  417050:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
  417052:	68a3      	ldr	r3, [r4, #8]
  417054:	b10b      	cbz	r3, 41705a <_lv_ll_ins_head+0x3a>
}
  417056:	4628      	mov	r0, r5
  417058:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->tail = n_new;
  41705a:	60a5      	str	r5, [r4, #8]
  41705c:	e7fb      	b.n	417056 <_lv_ll_ins_head+0x36>
  41705e:	bf00      	nop
  417060:	004174ed 	.word	0x004174ed
  417064:	00416ff5 	.word	0x00416ff5
  417068:	00416fff 	.word	0x00416fff

0041706c <_lv_ll_ins_tail>:
{
  41706c:	b538      	push	{r3, r4, r5, lr}
  41706e:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  417070:	6800      	ldr	r0, [r0, #0]
  417072:	3008      	adds	r0, #8
  417074:	4b0d      	ldr	r3, [pc, #52]	; (4170ac <_lv_ll_ins_tail+0x40>)
  417076:	4798      	blx	r3
    if(n_new != NULL) {
  417078:	4605      	mov	r5, r0
  41707a:	b190      	cbz	r0, 4170a2 <_lv_ll_ins_tail+0x36>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
  41707c:	2200      	movs	r2, #0
  41707e:	4601      	mov	r1, r0
  417080:	4620      	mov	r0, r4
  417082:	4b0b      	ldr	r3, [pc, #44]	; (4170b0 <_lv_ll_ins_tail+0x44>)
  417084:	4798      	blx	r3
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
  417086:	68a2      	ldr	r2, [r4, #8]
  417088:	4629      	mov	r1, r5
  41708a:	4620      	mov	r0, r4
  41708c:	4b09      	ldr	r3, [pc, #36]	; (4170b4 <_lv_ll_ins_tail+0x48>)
  41708e:	4798      	blx	r3
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
  417090:	68a1      	ldr	r1, [r4, #8]
  417092:	b119      	cbz	r1, 41709c <_lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
  417094:	462a      	mov	r2, r5
  417096:	4620      	mov	r0, r4
  417098:	4b05      	ldr	r3, [pc, #20]	; (4170b0 <_lv_ll_ins_tail+0x44>)
  41709a:	4798      	blx	r3
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
  41709c:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
  41709e:	6863      	ldr	r3, [r4, #4]
  4170a0:	b10b      	cbz	r3, 4170a6 <_lv_ll_ins_tail+0x3a>
}
  4170a2:	4628      	mov	r0, r5
  4170a4:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->head = n_new;
  4170a6:	6065      	str	r5, [r4, #4]
  4170a8:	e7fb      	b.n	4170a2 <_lv_ll_ins_tail+0x36>
  4170aa:	bf00      	nop
  4170ac:	004174ed 	.word	0x004174ed
  4170b0:	00416fff 	.word	0x00416fff
  4170b4:	00416ff5 	.word	0x00416ff5

004170b8 <_lv_ll_get_head>:
    if(ll_p != NULL) {
  4170b8:	b108      	cbz	r0, 4170be <_lv_ll_get_head+0x6>
        head = ll_p->head;
  4170ba:	6840      	ldr	r0, [r0, #4]
  4170bc:	4770      	bx	lr
    void * head = NULL;
  4170be:	2000      	movs	r0, #0
}
  4170c0:	4770      	bx	lr

004170c2 <_lv_ll_get_tail>:
    if(ll_p != NULL) {
  4170c2:	b108      	cbz	r0, 4170c8 <_lv_ll_get_tail+0x6>
        tail = ll_p->tail;
  4170c4:	6880      	ldr	r0, [r0, #8]
  4170c6:	4770      	bx	lr
    void * tail = NULL;
  4170c8:	2000      	movs	r0, #0
}
  4170ca:	4770      	bx	lr

004170cc <_lv_ll_get_next>:
    if(ll_p == NULL) return NULL;
  4170cc:	b118      	cbz	r0, 4170d6 <_lv_ll_get_next+0xa>
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
  4170ce:	6803      	ldr	r3, [r0, #0]
  4170d0:	3304      	adds	r3, #4
    return *((lv_ll_node_t **)n_act_d);
  4170d2:	58c8      	ldr	r0, [r1, r3]
  4170d4:	4770      	bx	lr
    if(ll_p == NULL) return NULL;
  4170d6:	2000      	movs	r0, #0
}
  4170d8:	4770      	bx	lr

004170da <_lv_ll_get_prev>:
    if(ll_p == NULL) return NULL;
  4170da:	b110      	cbz	r0, 4170e2 <_lv_ll_get_prev+0x8>
    n_act_d += LL_PREV_P_OFFSET(ll_p);
  4170dc:	6803      	ldr	r3, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
  4170de:	58c8      	ldr	r0, [r1, r3]
  4170e0:	4770      	bx	lr
    if(ll_p == NULL) return NULL;
  4170e2:	2000      	movs	r0, #0
}
  4170e4:	4770      	bx	lr
	...

004170e8 <_lv_ll_ins_prev>:
    if(NULL == ll_p || NULL == n_act) return NULL;
  4170e8:	2900      	cmp	r1, #0
  4170ea:	bf18      	it	ne
  4170ec:	2800      	cmpne	r0, #0
  4170ee:	d02f      	beq.n	417150 <_lv_ll_ins_prev+0x68>
{
  4170f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4170f4:	4604      	mov	r4, r0
  4170f6:	4688      	mov	r8, r1
    if(_lv_ll_get_head(ll_p) == n_act) {
  4170f8:	4b18      	ldr	r3, [pc, #96]	; (41715c <_lv_ll_ins_prev+0x74>)
  4170fa:	4798      	blx	r3
  4170fc:	4580      	cmp	r8, r0
  4170fe:	d01f      	beq.n	417140 <_lv_ll_ins_prev+0x58>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  417100:	6820      	ldr	r0, [r4, #0]
  417102:	3008      	adds	r0, #8
  417104:	4b16      	ldr	r3, [pc, #88]	; (417160 <_lv_ll_ins_prev+0x78>)
  417106:	4798      	blx	r3
        if(n_new == NULL) return NULL;
  417108:	4605      	mov	r5, r0
  41710a:	b318      	cbz	r0, 417154 <_lv_ll_ins_prev+0x6c>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
  41710c:	4641      	mov	r1, r8
  41710e:	4620      	mov	r0, r4
  417110:	4b14      	ldr	r3, [pc, #80]	; (417164 <_lv_ll_ins_prev+0x7c>)
  417112:	4798      	blx	r3
  417114:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
  417116:	462a      	mov	r2, r5
  417118:	4601      	mov	r1, r0
  41711a:	4620      	mov	r0, r4
  41711c:	4e12      	ldr	r6, [pc, #72]	; (417168 <_lv_ll_ins_prev+0x80>)
  41711e:	47b0      	blx	r6
        node_set_prev(ll_p, n_new, n_prev);
  417120:	463a      	mov	r2, r7
  417122:	4629      	mov	r1, r5
  417124:	4620      	mov	r0, r4
  417126:	4f11      	ldr	r7, [pc, #68]	; (41716c <_lv_ll_ins_prev+0x84>)
  417128:	47b8      	blx	r7
        node_set_prev(ll_p, n_act, n_new);
  41712a:	462a      	mov	r2, r5
  41712c:	4641      	mov	r1, r8
  41712e:	4620      	mov	r0, r4
  417130:	47b8      	blx	r7
        node_set_next(ll_p, n_new, n_act);
  417132:	4642      	mov	r2, r8
  417134:	4629      	mov	r1, r5
  417136:	4620      	mov	r0, r4
  417138:	47b0      	blx	r6
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  41713a:	4628      	mov	r0, r5
  41713c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        n_new = _lv_ll_ins_head(ll_p);
  417140:	4620      	mov	r0, r4
  417142:	4b0b      	ldr	r3, [pc, #44]	; (417170 <_lv_ll_ins_prev+0x88>)
  417144:	4798      	blx	r3
        if(n_new == NULL) return NULL;
  417146:	b108      	cbz	r0, 41714c <_lv_ll_ins_prev+0x64>
  417148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41714c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
  417150:	2000      	movs	r0, #0
  417152:	4770      	bx	lr
        if(n_new == NULL) return NULL;
  417154:	2000      	movs	r0, #0
}
  417156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41715a:	bf00      	nop
  41715c:	004170b9 	.word	0x004170b9
  417160:	004174ed 	.word	0x004174ed
  417164:	004170db 	.word	0x004170db
  417168:	00416fff 	.word	0x00416fff
  41716c:	00416ff5 	.word	0x00416ff5
  417170:	00417021 	.word	0x00417021

00417174 <_lv_ll_remove>:
{
  417174:	b570      	push	{r4, r5, r6, lr}
  417176:	4604      	mov	r4, r0
  417178:	460d      	mov	r5, r1
    if(_lv_ll_get_head(ll_p) == node_p) {
  41717a:	4b1e      	ldr	r3, [pc, #120]	; (4171f4 <_lv_ll_remove+0x80>)
  41717c:	4798      	blx	r3
  41717e:	4285      	cmp	r5, r0
  417180:	d019      	beq.n	4171b6 <_lv_ll_remove+0x42>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
  417182:	4620      	mov	r0, r4
  417184:	4b1c      	ldr	r3, [pc, #112]	; (4171f8 <_lv_ll_remove+0x84>)
  417186:	4798      	blx	r3
  417188:	4285      	cmp	r5, r0
  41718a:	d023      	beq.n	4171d4 <_lv_ll_remove+0x60>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
  41718c:	4629      	mov	r1, r5
  41718e:	4620      	mov	r0, r4
  417190:	4b1a      	ldr	r3, [pc, #104]	; (4171fc <_lv_ll_remove+0x88>)
  417192:	4798      	blx	r3
  417194:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
  417196:	4629      	mov	r1, r5
  417198:	4620      	mov	r0, r4
  41719a:	4b19      	ldr	r3, [pc, #100]	; (417200 <_lv_ll_remove+0x8c>)
  41719c:	4798      	blx	r3
  41719e:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
  4171a0:	4602      	mov	r2, r0
  4171a2:	4631      	mov	r1, r6
  4171a4:	4620      	mov	r0, r4
  4171a6:	4b17      	ldr	r3, [pc, #92]	; (417204 <_lv_ll_remove+0x90>)
  4171a8:	4798      	blx	r3
        node_set_prev(ll_p, n_next, n_prev);
  4171aa:	4632      	mov	r2, r6
  4171ac:	4629      	mov	r1, r5
  4171ae:	4620      	mov	r0, r4
  4171b0:	4b15      	ldr	r3, [pc, #84]	; (417208 <_lv_ll_remove+0x94>)
  4171b2:	4798      	blx	r3
  4171b4:	bd70      	pop	{r4, r5, r6, pc}
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
  4171b6:	4629      	mov	r1, r5
  4171b8:	4620      	mov	r0, r4
  4171ba:	4b11      	ldr	r3, [pc, #68]	; (417200 <_lv_ll_remove+0x8c>)
  4171bc:	4798      	blx	r3
  4171be:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
  4171c0:	b128      	cbz	r0, 4171ce <_lv_ll_remove+0x5a>
            node_set_prev(ll_p, ll_p->head, NULL);
  4171c2:	2200      	movs	r2, #0
  4171c4:	4601      	mov	r1, r0
  4171c6:	4620      	mov	r0, r4
  4171c8:	4b0f      	ldr	r3, [pc, #60]	; (417208 <_lv_ll_remove+0x94>)
  4171ca:	4798      	blx	r3
  4171cc:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->tail = NULL;
  4171ce:	2300      	movs	r3, #0
  4171d0:	60a3      	str	r3, [r4, #8]
  4171d2:	bd70      	pop	{r4, r5, r6, pc}
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
  4171d4:	4629      	mov	r1, r5
  4171d6:	4620      	mov	r0, r4
  4171d8:	4b08      	ldr	r3, [pc, #32]	; (4171fc <_lv_ll_remove+0x88>)
  4171da:	4798      	blx	r3
  4171dc:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
  4171de:	b128      	cbz	r0, 4171ec <_lv_ll_remove+0x78>
            node_set_next(ll_p, ll_p->tail, NULL);
  4171e0:	2200      	movs	r2, #0
  4171e2:	4601      	mov	r1, r0
  4171e4:	4620      	mov	r0, r4
  4171e6:	4b07      	ldr	r3, [pc, #28]	; (417204 <_lv_ll_remove+0x90>)
  4171e8:	4798      	blx	r3
  4171ea:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->head = NULL;
  4171ec:	2300      	movs	r3, #0
  4171ee:	6063      	str	r3, [r4, #4]
  4171f0:	bd70      	pop	{r4, r5, r6, pc}
  4171f2:	bf00      	nop
  4171f4:	004170b9 	.word	0x004170b9
  4171f8:	004170c3 	.word	0x004170c3
  4171fc:	004170db 	.word	0x004170db
  417200:	004170cd 	.word	0x004170cd
  417204:	00416fff 	.word	0x00416fff
  417208:	00416ff5 	.word	0x00416ff5

0041720c <_lv_ll_clear>:
{
  41720c:	b570      	push	{r4, r5, r6, lr}
  41720e:	4605      	mov	r5, r0
    i      = _lv_ll_get_head(ll_p);
  417210:	4b09      	ldr	r3, [pc, #36]	; (417238 <_lv_ll_clear+0x2c>)
  417212:	4798      	blx	r3
  417214:	4604      	mov	r4, r0
    while(i != NULL) {
  417216:	e00c      	b.n	417232 <_lv_ll_clear+0x26>
        i_next = _lv_ll_get_next(ll_p, i);
  417218:	4621      	mov	r1, r4
  41721a:	4628      	mov	r0, r5
  41721c:	4b07      	ldr	r3, [pc, #28]	; (41723c <_lv_ll_clear+0x30>)
  41721e:	4798      	blx	r3
  417220:	4606      	mov	r6, r0
        _lv_ll_remove(ll_p, i);
  417222:	4621      	mov	r1, r4
  417224:	4628      	mov	r0, r5
  417226:	4b06      	ldr	r3, [pc, #24]	; (417240 <_lv_ll_clear+0x34>)
  417228:	4798      	blx	r3
        lv_mem_free(i);
  41722a:	4620      	mov	r0, r4
  41722c:	4b05      	ldr	r3, [pc, #20]	; (417244 <_lv_ll_clear+0x38>)
  41722e:	4798      	blx	r3
        i = i_next;
  417230:	4634      	mov	r4, r6
    while(i != NULL) {
  417232:	2c00      	cmp	r4, #0
  417234:	d1f0      	bne.n	417218 <_lv_ll_clear+0xc>
}
  417236:	bd70      	pop	{r4, r5, r6, pc}
  417238:	004170b9 	.word	0x004170b9
  41723c:	004170cd 	.word	0x004170cd
  417240:	00417175 	.word	0x00417175
  417244:	004175b1 	.word	0x004175b1

00417248 <_lv_ll_chg_list>:
{
  417248:	b570      	push	{r4, r5, r6, lr}
  41724a:	460c      	mov	r4, r1
  41724c:	4615      	mov	r5, r2
  41724e:	461e      	mov	r6, r3
    _lv_ll_remove(ll_ori_p, node);
  417250:	4611      	mov	r1, r2
  417252:	4b17      	ldr	r3, [pc, #92]	; (4172b0 <_lv_ll_chg_list+0x68>)
  417254:	4798      	blx	r3
    if(head) {
  417256:	b1ae      	cbz	r6, 417284 <_lv_ll_chg_list+0x3c>
        node_set_prev(ll_new_p, node, NULL);
  417258:	2200      	movs	r2, #0
  41725a:	4629      	mov	r1, r5
  41725c:	4620      	mov	r0, r4
  41725e:	4b15      	ldr	r3, [pc, #84]	; (4172b4 <_lv_ll_chg_list+0x6c>)
  417260:	4798      	blx	r3
        node_set_next(ll_new_p, node, ll_new_p->head);
  417262:	6862      	ldr	r2, [r4, #4]
  417264:	4629      	mov	r1, r5
  417266:	4620      	mov	r0, r4
  417268:	4b13      	ldr	r3, [pc, #76]	; (4172b8 <_lv_ll_chg_list+0x70>)
  41726a:	4798      	blx	r3
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
  41726c:	6861      	ldr	r1, [r4, #4]
  41726e:	b119      	cbz	r1, 417278 <_lv_ll_chg_list+0x30>
            node_set_prev(ll_new_p, ll_new_p->head, node);
  417270:	462a      	mov	r2, r5
  417272:	4620      	mov	r0, r4
  417274:	4b0f      	ldr	r3, [pc, #60]	; (4172b4 <_lv_ll_chg_list+0x6c>)
  417276:	4798      	blx	r3
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
  417278:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
  41727a:	68a3      	ldr	r3, [r4, #8]
  41727c:	b103      	cbz	r3, 417280 <_lv_ll_chg_list+0x38>
  41727e:	bd70      	pop	{r4, r5, r6, pc}
            ll_new_p->tail = node;
  417280:	60a5      	str	r5, [r4, #8]
  417282:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
  417284:	68a2      	ldr	r2, [r4, #8]
  417286:	4629      	mov	r1, r5
  417288:	4620      	mov	r0, r4
  41728a:	4b0a      	ldr	r3, [pc, #40]	; (4172b4 <_lv_ll_chg_list+0x6c>)
  41728c:	4798      	blx	r3
        node_set_next(ll_new_p, node, NULL);
  41728e:	2200      	movs	r2, #0
  417290:	4629      	mov	r1, r5
  417292:	4620      	mov	r0, r4
  417294:	4b08      	ldr	r3, [pc, #32]	; (4172b8 <_lv_ll_chg_list+0x70>)
  417296:	4798      	blx	r3
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
  417298:	68a1      	ldr	r1, [r4, #8]
  41729a:	b119      	cbz	r1, 4172a4 <_lv_ll_chg_list+0x5c>
            node_set_next(ll_new_p, ll_new_p->tail, node);
  41729c:	462a      	mov	r2, r5
  41729e:	4620      	mov	r0, r4
  4172a0:	4b05      	ldr	r3, [pc, #20]	; (4172b8 <_lv_ll_chg_list+0x70>)
  4172a2:	4798      	blx	r3
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
  4172a4:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
  4172a6:	6863      	ldr	r3, [r4, #4]
  4172a8:	2b00      	cmp	r3, #0
  4172aa:	d1e8      	bne.n	41727e <_lv_ll_chg_list+0x36>
            ll_new_p->head = node;
  4172ac:	6065      	str	r5, [r4, #4]
}
  4172ae:	e7e6      	b.n	41727e <_lv_ll_chg_list+0x36>
  4172b0:	00417175 	.word	0x00417175
  4172b4:	00416ff5 	.word	0x00416ff5
  4172b8:	00416fff 	.word	0x00416fff

004172bc <_lv_ll_get_len>:
{
  4172bc:	b538      	push	{r3, r4, r5, lr}
  4172be:	4605      	mov	r5, r0
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
  4172c0:	4b06      	ldr	r3, [pc, #24]	; (4172dc <_lv_ll_get_len+0x20>)
  4172c2:	4798      	blx	r3
    uint32_t len = 0;
  4172c4:	2400      	movs	r4, #0
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
  4172c6:	e004      	b.n	4172d2 <_lv_ll_get_len+0x16>
        len++;
  4172c8:	3401      	adds	r4, #1
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
  4172ca:	4601      	mov	r1, r0
  4172cc:	4628      	mov	r0, r5
  4172ce:	4b04      	ldr	r3, [pc, #16]	; (4172e0 <_lv_ll_get_len+0x24>)
  4172d0:	4798      	blx	r3
  4172d2:	2800      	cmp	r0, #0
  4172d4:	d1f8      	bne.n	4172c8 <_lv_ll_get_len+0xc>
}
  4172d6:	4620      	mov	r0, r4
  4172d8:	bd38      	pop	{r3, r4, r5, pc}
  4172da:	bf00      	nop
  4172dc:	004170b9 	.word	0x004170b9
  4172e0:	004170cd 	.word	0x004170cd

004172e4 <_lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
  4172e4:	4291      	cmp	r1, r2
  4172e6:	d02f      	beq.n	417348 <_lv_ll_move_before+0x64>
{
  4172e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4172ec:	4617      	mov	r7, r2
  4172ee:	460c      	mov	r4, r1
  4172f0:	4605      	mov	r5, r0
    if(n_after != NULL)
  4172f2:	b30a      	cbz	r2, 417338 <_lv_ll_move_before+0x54>
        n_before = _lv_ll_get_prev(ll_p, n_after);
  4172f4:	4611      	mov	r1, r2
  4172f6:	4b15      	ldr	r3, [pc, #84]	; (41734c <_lv_ll_move_before+0x68>)
  4172f8:	4798      	blx	r3
  4172fa:	4606      	mov	r6, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
  4172fc:	42a6      	cmp	r6, r4
  4172fe:	d019      	beq.n	417334 <_lv_ll_move_before+0x50>
    _lv_ll_remove(ll_p, n_act);
  417300:	4621      	mov	r1, r4
  417302:	4628      	mov	r0, r5
  417304:	4b12      	ldr	r3, [pc, #72]	; (417350 <_lv_ll_move_before+0x6c>)
  417306:	4798      	blx	r3
    node_set_next(ll_p, n_before, n_act);
  417308:	4622      	mov	r2, r4
  41730a:	4631      	mov	r1, r6
  41730c:	4628      	mov	r0, r5
  41730e:	f8df 8048 	ldr.w	r8, [pc, #72]	; 417358 <_lv_ll_move_before+0x74>
  417312:	47c0      	blx	r8
    node_set_prev(ll_p, n_act, n_before);
  417314:	4632      	mov	r2, r6
  417316:	4621      	mov	r1, r4
  417318:	4628      	mov	r0, r5
  41731a:	f8df 9040 	ldr.w	r9, [pc, #64]	; 41735c <_lv_ll_move_before+0x78>
  41731e:	47c8      	blx	r9
    node_set_prev(ll_p, n_after, n_act);
  417320:	4622      	mov	r2, r4
  417322:	4639      	mov	r1, r7
  417324:	4628      	mov	r0, r5
  417326:	47c8      	blx	r9
    node_set_next(ll_p, n_act, n_after);
  417328:	463a      	mov	r2, r7
  41732a:	4621      	mov	r1, r4
  41732c:	4628      	mov	r0, r5
  41732e:	47c0      	blx	r8
    if(n_after == NULL) ll_p->tail = n_act;
  417330:	b137      	cbz	r7, 417340 <_lv_ll_move_before+0x5c>
    if(n_before == NULL) ll_p->head = n_act;
  417332:	b13e      	cbz	r6, 417344 <_lv_ll_move_before+0x60>
  417334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        n_before = _lv_ll_get_tail(ll_p); /*if `n_after` is NULL `n_act` should be the new tail*/
  417338:	4b06      	ldr	r3, [pc, #24]	; (417354 <_lv_ll_move_before+0x70>)
  41733a:	4798      	blx	r3
  41733c:	4606      	mov	r6, r0
  41733e:	e7dd      	b.n	4172fc <_lv_ll_move_before+0x18>
    if(n_after == NULL) ll_p->tail = n_act;
  417340:	60ac      	str	r4, [r5, #8]
  417342:	e7f6      	b.n	417332 <_lv_ll_move_before+0x4e>
    if(n_before == NULL) ll_p->head = n_act;
  417344:	606c      	str	r4, [r5, #4]
  417346:	e7f5      	b.n	417334 <_lv_ll_move_before+0x50>
  417348:	4770      	bx	lr
  41734a:	bf00      	nop
  41734c:	004170db 	.word	0x004170db
  417350:	00417175 	.word	0x00417175
  417354:	004170c3 	.word	0x004170c3
  417358:	00416fff 	.word	0x00416fff
  41735c:	00416ff5 	.word	0x00416ff5

00417360 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
  417360:	b138      	cbz	r0, 417372 <_lv_ll_is_empty+0x12>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
  417362:	6842      	ldr	r2, [r0, #4]
  417364:	b10a      	cbz	r2, 41736a <_lv_ll_is_empty+0xa>
    return false;
  417366:	2000      	movs	r0, #0
  417368:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
  41736a:	6883      	ldr	r3, [r0, #8]
  41736c:	b11b      	cbz	r3, 417376 <_lv_ll_is_empty+0x16>
    return false;
  41736e:	2000      	movs	r0, #0
  417370:	4770      	bx	lr
    if(ll_p == NULL) return true;
  417372:	2001      	movs	r0, #1
  417374:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
  417376:	2001      	movs	r0, #1
}
  417378:	4770      	bx	lr
	...

0041737c <_lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t _lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
  41737c:	4b1c      	ldr	r3, [pc, #112]	; (4173f0 <_lv_trigo_sin+0x74>)
  41737e:	fb83 2300 	smull	r2, r3, r3, r0
  417382:	181a      	adds	r2, r3, r0
  417384:	17c3      	asrs	r3, r0, #31
  417386:	ebc3 2322 	rsb	r3, r3, r2, asr #8
  41738a:	f44f 72b4 	mov.w	r2, #360	; 0x168
  41738e:	fb02 0013 	mls	r0, r2, r3, r0
  417392:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
  417394:	2800      	cmp	r0, #0
  417396:	db15      	blt.n	4173c4 <_lv_trigo_sin+0x48>

    if(angle < 90) {
  417398:	2859      	cmp	r0, #89	; 0x59
  41739a:	dd16      	ble.n	4173ca <_lv_trigo_sin+0x4e>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
  41739c:	b280      	uxth	r0, r0
  41739e:	f1a0 035a 	sub.w	r3, r0, #90	; 0x5a
  4173a2:	b29b      	uxth	r3, r3
  4173a4:	2b59      	cmp	r3, #89	; 0x59
  4173a6:	d914      	bls.n	4173d2 <_lv_trigo_sin+0x56>
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
    }
    else if(angle >= 180 && angle < 270) {
  4173a8:	f1a0 03b4 	sub.w	r3, r0, #180	; 0xb4
  4173ac:	b29b      	uxth	r3, r3
  4173ae:	2b59      	cmp	r3, #89	; 0x59
  4173b0:	d916      	bls.n	4173e0 <_lv_trigo_sin+0x64>
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
  4173b2:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
  4173b6:	b200      	sxth	r0, r0
        ret   = -sin0_90_table[angle];
  4173b8:	4b0e      	ldr	r3, [pc, #56]	; (4173f4 <_lv_trigo_sin+0x78>)
  4173ba:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  4173be:	4240      	negs	r0, r0
  4173c0:	b200      	sxth	r0, r0
    }

    return ret;
}
  4173c2:	4770      	bx	lr
    if(angle < 0) angle = 360 + angle;
  4173c4:	4410      	add	r0, r2
  4173c6:	b200      	sxth	r0, r0
  4173c8:	e7e6      	b.n	417398 <_lv_trigo_sin+0x1c>
        ret = sin0_90_table[angle];
  4173ca:	4b0a      	ldr	r3, [pc, #40]	; (4173f4 <_lv_trigo_sin+0x78>)
  4173cc:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
  4173d0:	4770      	bx	lr
        angle = 180 - angle;
  4173d2:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
  4173d6:	b200      	sxth	r0, r0
        ret   = sin0_90_table[angle];
  4173d8:	4b06      	ldr	r3, [pc, #24]	; (4173f4 <_lv_trigo_sin+0x78>)
  4173da:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
  4173de:	4770      	bx	lr
        angle = angle - 180;
  4173e0:	b21b      	sxth	r3, r3
        ret   = -sin0_90_table[angle];
  4173e2:	4a04      	ldr	r2, [pc, #16]	; (4173f4 <_lv_trigo_sin+0x78>)
  4173e4:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
  4173e8:	4240      	negs	r0, r0
  4173ea:	b200      	sxth	r0, r0
  4173ec:	4770      	bx	lr
  4173ee:	bf00      	nop
  4173f0:	b60b60b7 	.word	0xb60b60b7
  4173f4:	00431b50 	.word	0x00431b50

004173f8 <_lv_sqrt>:
 * If root < 16: mask = 0x80
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
  4173f8:	b430      	push	{r4, r5}
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
  4173fa:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
  4173fc:	2400      	movs	r4, #0
  4173fe:	e001      	b.n	417404 <_lv_sqrt+0xc>
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
        if(trial * trial <= x) root = trial;
        mask = mask >> 1;
    } while(mask);
  417400:	0852      	lsrs	r2, r2, #1
  417402:	d006      	beq.n	417412 <_lv_sqrt+0x1a>
        trial = root + mask;
  417404:	1913      	adds	r3, r2, r4
        if(trial * trial <= x) root = trial;
  417406:	fb03 f503 	mul.w	r5, r3, r3
  41740a:	42a8      	cmp	r0, r5
  41740c:	d3f8      	bcc.n	417400 <_lv_sqrt+0x8>
  41740e:	461c      	mov	r4, r3
  417410:	e7f6      	b.n	417400 <_lv_sqrt+0x8>

    q->i = root >> 4;
  417412:	0923      	lsrs	r3, r4, #4
  417414:	800b      	strh	r3, [r1, #0]
    q->f = (root & 0xf) << 4;
  417416:	0124      	lsls	r4, r4, #4
  417418:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
  41741c:	804c      	strh	r4, [r1, #2]
}
  41741e:	bc30      	pop	{r4, r5}
  417420:	4770      	bx	lr
	...

00417424 <ent_get_next>:
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
  417424:	4603      	mov	r3, r0
  417426:	b158      	cbz	r0, 417440 <ent_get_next+0x1c>
        next_e = (lv_mem_ent_t *)work_mem;
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
  417428:	3004      	adds	r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
  41742a:	681b      	ldr	r3, [r3, #0]
  41742c:	eb00 0053 	add.w	r0, r0, r3, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
  417430:	1d02      	adds	r2, r0, #4
  417432:	4b06      	ldr	r3, [pc, #24]	; (41744c <ent_get_next+0x28>)
  417434:	681b      	ldr	r3, [r3, #0]
  417436:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
  41743a:	429a      	cmp	r2, r3
  41743c:	d203      	bcs.n	417446 <ent_get_next+0x22>
    }

    return next_e;
}
  41743e:	4770      	bx	lr
        next_e = (lv_mem_ent_t *)work_mem;
  417440:	4b02      	ldr	r3, [pc, #8]	; (41744c <ent_get_next+0x28>)
  417442:	6818      	ldr	r0, [r3, #0]
  417444:	4770      	bx	lr
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
  417446:	2000      	movs	r0, #0
    return next_e;
  417448:	e7f9      	b.n	41743e <ent_get_next+0x1a>
  41744a:	bf00      	nop
  41744c:	2040c7e8 	.word	0x2040c7e8

00417450 <ent_trunc>:
 * @param size new size in bytes
 */
static void ent_trunc(lv_mem_ent_t * e, size_t size)
{
    /*Round the size up to ALIGN_MASK*/
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
  417450:	3103      	adds	r1, #3
  417452:	f021 0103 	bic.w	r1, r1, #3

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
  417456:	6803      	ldr	r3, [r0, #0]
  417458:	f3c3 035e 	ubfx	r3, r3, #1, #31
  41745c:	1d0a      	adds	r2, r1, #4
  41745e:	4293      	cmp	r3, r2
  417460:	d016      	beq.n	417490 <ent_trunc+0x40>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
  417462:	4299      	cmp	r1, r3
  417464:	d013      	beq.n	41748e <ent_trunc+0x3e>
{
  417466:	b410      	push	{r4}
        uint8_t * e_data             = &e->first_data;
  417468:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
  41746a:	5c53      	ldrb	r3, [r2, r1]
  41746c:	f36f 0300 	bfc	r3, #0, #1
  417470:	5453      	strb	r3, [r2, r1]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
  417472:	6803      	ldr	r3, [r0, #0]
  417474:	ebc1 0353 	rsb	r3, r1, r3, lsr #1
  417478:	3b04      	subs	r3, #4
  41747a:	5854      	ldr	r4, [r2, r1]
  41747c:	f363 045f 	bfi	r4, r3, #1, #31
  417480:	5054      	str	r4, [r2, r1]

        /* Set the new size for the original entry */
        e->header.s.d_size = (uint32_t)size;
  417482:	6803      	ldr	r3, [r0, #0]
  417484:	f361 035f 	bfi	r3, r1, #1, #31
  417488:	6003      	str	r3, [r0, #0]
    }
}
  41748a:	f85d 4b04 	ldr.w	r4, [sp], #4
  41748e:	4770      	bx	lr
        size = e->header.s.d_size;
  417490:	4619      	mov	r1, r3
  417492:	e7e6      	b.n	417462 <ent_trunc+0x12>

00417494 <ent_alloc>:
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
  417494:	7803      	ldrb	r3, [r0, #0]
  417496:	f013 0f01 	tst.w	r3, #1
  41749a:	d10f      	bne.n	4174bc <ent_alloc+0x28>
  41749c:	6803      	ldr	r3, [r0, #0]
  41749e:	f3c3 035e 	ubfx	r3, r3, #1, #31
  4174a2:	428b      	cmp	r3, r1
  4174a4:	d30c      	bcc.n	4174c0 <ent_alloc+0x2c>
{
  4174a6:	b510      	push	{r4, lr}
  4174a8:	4604      	mov	r4, r0
        ent_trunc(e, size);
  4174aa:	4b06      	ldr	r3, [pc, #24]	; (4174c4 <ent_alloc+0x30>)
  4174ac:	4798      	blx	r3
        e->header.s.used = 1;
  4174ae:	7823      	ldrb	r3, [r4, #0]
  4174b0:	f043 0301 	orr.w	r3, r3, #1
  4174b4:	4620      	mov	r0, r4
  4174b6:	f800 3b04 	strb.w	r3, [r0], #4
  4174ba:	bd10      	pop	{r4, pc}
    void * alloc = NULL;
  4174bc:	2000      	movs	r0, #0
  4174be:	4770      	bx	lr
  4174c0:	2000      	movs	r0, #0
    return alloc;
  4174c2:	4770      	bx	lr
  4174c4:	00417451 	.word	0x00417451

004174c8 <_lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
  4174c8:	4b06      	ldr	r3, [pc, #24]	; (4174e4 <_lv_mem_init+0x1c>)
  4174ca:	4a07      	ldr	r2, [pc, #28]	; (4174e8 <_lv_mem_init+0x20>)
  4174cc:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
  4174ce:	781a      	ldrb	r2, [r3, #0]
  4174d0:	f36f 0200 	bfc	r2, #0, #1
  4174d4:	701a      	strb	r2, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
  4174d6:	681a      	ldr	r2, [r3, #0]
  4174d8:	f647 71fc 	movw	r1, #32764	; 0x7ffc
  4174dc:	f361 025f 	bfi	r2, r1, #1, #31
  4174e0:	601a      	str	r2, [r3, #0]
  4174e2:	4770      	bx	lr
  4174e4:	2040c7ec 	.word	0x2040c7ec
  4174e8:	2040c7e8 	.word	0x2040c7e8

004174ec <lv_mem_alloc>:
{
  4174ec:	b570      	push	{r4, r5, r6, lr}
    if(size == 0) {
  4174ee:	b330      	cbz	r0, 41753e <lv_mem_alloc+0x52>
  4174f0:	4606      	mov	r6, r0
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
  4174f2:	3603      	adds	r6, #3
  4174f4:	f026 0603 	bic.w	r6, r6, #3
    lv_mem_ent_t * e = NULL;
  4174f8:	2400      	movs	r4, #0
    void * alloc = NULL;
  4174fa:	4625      	mov	r5, r4
  4174fc:	e006      	b.n	41750c <lv_mem_alloc+0x20>
    } while(e != NULL && alloc == NULL);
  4174fe:	1c23      	adds	r3, r4, #0
  417500:	bf18      	it	ne
  417502:	2301      	movne	r3, #1
  417504:	2d00      	cmp	r5, #0
  417506:	bf18      	it	ne
  417508:	2300      	movne	r3, #0
  41750a:	b153      	cbz	r3, 417522 <lv_mem_alloc+0x36>
        e = ent_get_next(e);
  41750c:	4620      	mov	r0, r4
  41750e:	4b0d      	ldr	r3, [pc, #52]	; (417544 <lv_mem_alloc+0x58>)
  417510:	4798      	blx	r3
        if(e != NULL) {
  417512:	4604      	mov	r4, r0
  417514:	2800      	cmp	r0, #0
  417516:	d0f2      	beq.n	4174fe <lv_mem_alloc+0x12>
            alloc = ent_alloc(e, size);
  417518:	4631      	mov	r1, r6
  41751a:	4b0b      	ldr	r3, [pc, #44]	; (417548 <lv_mem_alloc+0x5c>)
  41751c:	4798      	blx	r3
  41751e:	4605      	mov	r5, r0
  417520:	e7ed      	b.n	4174fe <lv_mem_alloc+0x12>
    if(alloc == NULL) {
  417522:	b16d      	cbz	r5, 417540 <lv_mem_alloc+0x54>
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
  417524:	4b09      	ldr	r3, [pc, #36]	; (41754c <lv_mem_alloc+0x60>)
  417526:	681b      	ldr	r3, [r3, #0]
  417528:	429d      	cmp	r5, r3
  41752a:	d909      	bls.n	417540 <lv_mem_alloc+0x54>
            if((((uintptr_t) alloc - (uintptr_t) work_mem) + size) > mem_max_size) {
  41752c:	1aeb      	subs	r3, r5, r3
  41752e:	441e      	add	r6, r3
  417530:	4b07      	ldr	r3, [pc, #28]	; (417550 <lv_mem_alloc+0x64>)
  417532:	681b      	ldr	r3, [r3, #0]
  417534:	429e      	cmp	r6, r3
  417536:	d903      	bls.n	417540 <lv_mem_alloc+0x54>
                mem_max_size = ((uintptr_t) alloc - (uintptr_t) work_mem) + size;
  417538:	4b05      	ldr	r3, [pc, #20]	; (417550 <lv_mem_alloc+0x64>)
  41753a:	601e      	str	r6, [r3, #0]
  41753c:	e000      	b.n	417540 <lv_mem_alloc+0x54>
        return &zero_mem;
  41753e:	4d05      	ldr	r5, [pc, #20]	; (417554 <lv_mem_alloc+0x68>)
}
  417540:	4628      	mov	r0, r5
  417542:	bd70      	pop	{r4, r5, r6, pc}
  417544:	00417425 	.word	0x00417425
  417548:	00417495 	.word	0x00417495
  41754c:	2040c7e8 	.word	0x2040c7e8
  417550:	2040c7e4 	.word	0x2040c7e4
  417554:	204147ec 	.word	0x204147ec

00417558 <lv_mem_defrag>:
{
  417558:	b510      	push	{r4, lr}
    e_free = ent_get_next(NULL);
  41755a:	2000      	movs	r0, #0
  41755c:	4b13      	ldr	r3, [pc, #76]	; (4175ac <lv_mem_defrag+0x54>)
  41755e:	4798      	blx	r3
  417560:	4604      	mov	r4, r0
  417562:	e017      	b.n	417594 <lv_mem_defrag+0x3c>
        if(e_free == NULL) return;
  417564:	b304      	cbz	r4, 4175a8 <lv_mem_defrag+0x50>
        e_next = ent_get_next(e_free);
  417566:	4620      	mov	r0, r4
  417568:	4b10      	ldr	r3, [pc, #64]	; (4175ac <lv_mem_defrag+0x54>)
  41756a:	4798      	blx	r3
        while(e_next != NULL) {
  41756c:	b180      	cbz	r0, 417590 <lv_mem_defrag+0x38>
            if(e_next->header.s.used == 0) {
  41756e:	7803      	ldrb	r3, [r0, #0]
  417570:	f013 0f01 	tst.w	r3, #1
  417574:	d10c      	bne.n	417590 <lv_mem_defrag+0x38>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
  417576:	6801      	ldr	r1, [r0, #0]
  417578:	6823      	ldr	r3, [r4, #0]
  41757a:	f3c3 025e 	ubfx	r2, r3, #1, #31
  41757e:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  417582:	3204      	adds	r2, #4
  417584:	f362 035f 	bfi	r3, r2, #1, #31
  417588:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
  41758a:	4b08      	ldr	r3, [pc, #32]	; (4175ac <lv_mem_defrag+0x54>)
  41758c:	4798      	blx	r3
  41758e:	e7ed      	b.n	41756c <lv_mem_defrag+0x14>
        if(e_next == NULL) return;
  417590:	b150      	cbz	r0, 4175a8 <lv_mem_defrag+0x50>
{
  417592:	4604      	mov	r4, r0
        while(e_free != NULL) {
  417594:	2c00      	cmp	r4, #0
  417596:	d0e5      	beq.n	417564 <lv_mem_defrag+0xc>
            if(e_free->header.s.used != 0) {
  417598:	7823      	ldrb	r3, [r4, #0]
  41759a:	f013 0f01 	tst.w	r3, #1
  41759e:	d0e1      	beq.n	417564 <lv_mem_defrag+0xc>
                e_free = ent_get_next(e_free);
  4175a0:	4620      	mov	r0, r4
  4175a2:	4b02      	ldr	r3, [pc, #8]	; (4175ac <lv_mem_defrag+0x54>)
  4175a4:	4798      	blx	r3
  4175a6:	e7f4      	b.n	417592 <lv_mem_defrag+0x3a>
  4175a8:	bd10      	pop	{r4, pc}
  4175aa:	bf00      	nop
  4175ac:	00417425 	.word	0x00417425

004175b0 <lv_mem_free>:
    if(data == &zero_mem) return;
  4175b0:	4b18      	ldr	r3, [pc, #96]	; (417614 <lv_mem_free+0x64>)
  4175b2:	4298      	cmp	r0, r3
  4175b4:	d02d      	beq.n	417612 <lv_mem_free+0x62>
    if(data == NULL) return;
  4175b6:	b360      	cbz	r0, 417612 <lv_mem_free+0x62>
{
  4175b8:	b510      	push	{r4, lr}
  4175ba:	4604      	mov	r4, r0
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
  4175bc:	3804      	subs	r0, #4
    e->header.s.used = 0;
  4175be:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  4175c2:	f36f 0300 	bfc	r3, #0, #1
  4175c6:	f804 3c04 	strb.w	r3, [r4, #-4]
    full_defrag_cnt++;
  4175ca:	4a13      	ldr	r2, [pc, #76]	; (417618 <lv_mem_free+0x68>)
  4175cc:	8813      	ldrh	r3, [r2, #0]
  4175ce:	3301      	adds	r3, #1
  4175d0:	b29b      	uxth	r3, r3
  4175d2:	8013      	strh	r3, [r2, #0]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
  4175d4:	2b0f      	cmp	r3, #15
  4175d6:	d816      	bhi.n	417606 <lv_mem_free+0x56>
        e_next = ent_get_next(e);
  4175d8:	4b10      	ldr	r3, [pc, #64]	; (41761c <lv_mem_free+0x6c>)
  4175da:	4798      	blx	r3
        while(e_next != NULL) {
  4175dc:	b190      	cbz	r0, 417604 <lv_mem_free+0x54>
            if(e_next->header.s.used == 0) {
  4175de:	7803      	ldrb	r3, [r0, #0]
  4175e0:	f013 0f01 	tst.w	r3, #1
  4175e4:	d114      	bne.n	417610 <lv_mem_free+0x60>
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
  4175e6:	6801      	ldr	r1, [r0, #0]
  4175e8:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4175ec:	f3c3 025e 	ubfx	r2, r3, #1, #31
  4175f0:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  4175f4:	3204      	adds	r2, #4
  4175f6:	f362 035f 	bfi	r3, r2, #1, #31
  4175fa:	f844 3c04 	str.w	r3, [r4, #-4]
            e_next = ent_get_next(e_next);
  4175fe:	4b07      	ldr	r3, [pc, #28]	; (41761c <lv_mem_free+0x6c>)
  417600:	4798      	blx	r3
  417602:	e7eb      	b.n	4175dc <lv_mem_free+0x2c>
  417604:	bd10      	pop	{r4, pc}
        full_defrag_cnt = 0;
  417606:	2200      	movs	r2, #0
  417608:	4b03      	ldr	r3, [pc, #12]	; (417618 <lv_mem_free+0x68>)
  41760a:	801a      	strh	r2, [r3, #0]
        lv_mem_defrag();
  41760c:	4b04      	ldr	r3, [pc, #16]	; (417620 <lv_mem_free+0x70>)
  41760e:	4798      	blx	r3
  417610:	bd10      	pop	{r4, pc}
  417612:	4770      	bx	lr
  417614:	204147ec 	.word	0x204147ec
  417618:	2040c7c0 	.word	0x2040c7c0
  41761c:	00417425 	.word	0x00417425
  417620:	00417559 	.word	0x00417559

00417624 <_lv_mem_get_size>:
    if(data == NULL) return 0;
  417624:	b138      	cbz	r0, 417636 <_lv_mem_get_size+0x12>
    if(data == &zero_mem) return 0;
  417626:	4a06      	ldr	r2, [pc, #24]	; (417640 <_lv_mem_get_size+0x1c>)
  417628:	4290      	cmp	r0, r2
  41762a:	d006      	beq.n	41763a <_lv_mem_get_size+0x16>
    return e->header.s.d_size;
  41762c:	f850 0c04 	ldr.w	r0, [r0, #-4]
  417630:	f3c0 005e 	ubfx	r0, r0, #1, #31
  417634:	4770      	bx	lr
    if(data == NULL) return 0;
  417636:	2000      	movs	r0, #0
  417638:	4770      	bx	lr
    if(data == &zero_mem) return 0;
  41763a:	2000      	movs	r0, #0
}
  41763c:	4770      	bx	lr
  41763e:	bf00      	nop
  417640:	204147ec 	.word	0x204147ec

00417644 <_lv_mem_buf_release>:
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  417644:	2300      	movs	r3, #0
  417646:	2b01      	cmp	r3, #1
  417648:	d810      	bhi.n	41766c <_lv_mem_buf_release+0x28>
        if(mem_buf_small[i].p == p) {
  41764a:	4619      	mov	r1, r3
  41764c:	4a12      	ldr	r2, [pc, #72]	; (417698 <_lv_mem_buf_release+0x54>)
  41764e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  417652:	4282      	cmp	r2, r0
  417654:	d002      	beq.n	41765c <_lv_mem_buf_release+0x18>
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  417656:	3301      	adds	r3, #1
  417658:	b2db      	uxtb	r3, r3
  41765a:	e7f4      	b.n	417646 <_lv_mem_buf_release+0x2>
            mem_buf_small[i].used = 0;
  41765c:	4b0e      	ldr	r3, [pc, #56]	; (417698 <_lv_mem_buf_release+0x54>)
  41765e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  417662:	798b      	ldrb	r3, [r1, #6]
  417664:	f36f 0300 	bfc	r3, #0, #1
  417668:	718b      	strb	r3, [r1, #6]
            return;
  41766a:	4770      	bx	lr
  41766c:	2300      	movs	r3, #0
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  41766e:	2b0f      	cmp	r3, #15
  417670:	d810      	bhi.n	417694 <_lv_mem_buf_release+0x50>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
  417672:	4619      	mov	r1, r3
  417674:	4a09      	ldr	r2, [pc, #36]	; (41769c <_lv_mem_buf_release+0x58>)
  417676:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  41767a:	4290      	cmp	r0, r2
  41767c:	d002      	beq.n	417684 <_lv_mem_buf_release+0x40>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  41767e:	3301      	adds	r3, #1
  417680:	b2db      	uxtb	r3, r3
  417682:	e7f4      	b.n	41766e <_lv_mem_buf_release+0x2a>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
  417684:	4b05      	ldr	r3, [pc, #20]	; (41769c <_lv_mem_buf_release+0x58>)
  417686:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  41768a:	798b      	ldrb	r3, [r1, #6]
  41768c:	f36f 0300 	bfc	r3, #0, #1
  417690:	718b      	strb	r3, [r1, #6]
            return;
  417692:	4770      	bx	lr
  417694:	4770      	bx	lr
  417696:	bf00      	nop
  417698:	204000a0 	.word	0x204000a0
  41769c:	2043a27c 	.word	0x2043a27c

004176a0 <_lv_mem_buf_free_all>:
{
  4176a0:	b510      	push	{r4, lr}
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  4176a2:	2300      	movs	r3, #0
  4176a4:	e008      	b.n	4176b8 <_lv_mem_buf_free_all+0x18>
        mem_buf_small[i].used = 0;
  4176a6:	4a12      	ldr	r2, [pc, #72]	; (4176f0 <_lv_mem_buf_free_all+0x50>)
  4176a8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4176ac:	7991      	ldrb	r1, [r2, #6]
  4176ae:	f36f 0100 	bfc	r1, #0, #1
  4176b2:	7191      	strb	r1, [r2, #6]
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  4176b4:	3301      	adds	r3, #1
  4176b6:	b2db      	uxtb	r3, r3
  4176b8:	2b01      	cmp	r3, #1
  4176ba:	d9f4      	bls.n	4176a6 <_lv_mem_buf_free_all+0x6>
  4176bc:	2400      	movs	r4, #0
  4176be:	e001      	b.n	4176c4 <_lv_mem_buf_free_all+0x24>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  4176c0:	3401      	adds	r4, #1
  4176c2:	b2e4      	uxtb	r4, r4
  4176c4:	2c0f      	cmp	r4, #15
  4176c6:	d812      	bhi.n	4176ee <_lv_mem_buf_free_all+0x4e>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
  4176c8:	4b0a      	ldr	r3, [pc, #40]	; (4176f4 <_lv_mem_buf_free_all+0x54>)
  4176ca:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
  4176ce:	2800      	cmp	r0, #0
  4176d0:	d0f6      	beq.n	4176c0 <_lv_mem_buf_free_all+0x20>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
  4176d2:	4b09      	ldr	r3, [pc, #36]	; (4176f8 <_lv_mem_buf_free_all+0x58>)
  4176d4:	4798      	blx	r3
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
  4176d6:	4b07      	ldr	r3, [pc, #28]	; (4176f4 <_lv_mem_buf_free_all+0x54>)
  4176d8:	2200      	movs	r2, #0
  4176da:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
  4176de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  4176e2:	7999      	ldrb	r1, [r3, #6]
  4176e4:	f362 0100 	bfi	r1, r2, #0, #1
  4176e8:	7199      	strb	r1, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
  4176ea:	809a      	strh	r2, [r3, #4]
  4176ec:	e7e8      	b.n	4176c0 <_lv_mem_buf_free_all+0x20>
}
  4176ee:	bd10      	pop	{r4, pc}
  4176f0:	204000a0 	.word	0x204000a0
  4176f4:	2043a27c 	.word	0x2043a27c
  4176f8:	004175b1 	.word	0x004175b1

004176fc <_lv_memcpy>:
{
  4176fc:	b430      	push	{r4, r5}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
  4176fe:	f000 0403 	and.w	r4, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
  417702:	f001 0303 	and.w	r3, r1, #3
    if(s_align != d_align) {
  417706:	429c      	cmp	r4, r3
  417708:	d050      	beq.n	4177ac <_lv_memcpy+0xb0>
  41770a:	4603      	mov	r3, r0
  41770c:	e042      	b.n	417794 <_lv_memcpy+0x98>
            REPEAT8(COPY8);
  41770e:	780c      	ldrb	r4, [r1, #0]
  417710:	701c      	strb	r4, [r3, #0]
  417712:	784c      	ldrb	r4, [r1, #1]
  417714:	705c      	strb	r4, [r3, #1]
  417716:	788c      	ldrb	r4, [r1, #2]
  417718:	709c      	strb	r4, [r3, #2]
  41771a:	78cc      	ldrb	r4, [r1, #3]
  41771c:	70dc      	strb	r4, [r3, #3]
  41771e:	790c      	ldrb	r4, [r1, #4]
  417720:	711c      	strb	r4, [r3, #4]
  417722:	794c      	ldrb	r4, [r1, #5]
  417724:	715c      	strb	r4, [r3, #5]
  417726:	798c      	ldrb	r4, [r1, #6]
  417728:	719c      	strb	r4, [r3, #6]
  41772a:	79cc      	ldrb	r4, [r1, #7]
  41772c:	71dc      	strb	r4, [r3, #7]
            REPEAT8(COPY8);
  41772e:	7a0c      	ldrb	r4, [r1, #8]
  417730:	721c      	strb	r4, [r3, #8]
  417732:	7a4c      	ldrb	r4, [r1, #9]
  417734:	725c      	strb	r4, [r3, #9]
  417736:	7a8c      	ldrb	r4, [r1, #10]
  417738:	729c      	strb	r4, [r3, #10]
  41773a:	7acc      	ldrb	r4, [r1, #11]
  41773c:	72dc      	strb	r4, [r3, #11]
  41773e:	7b0c      	ldrb	r4, [r1, #12]
  417740:	731c      	strb	r4, [r3, #12]
  417742:	7b4c      	ldrb	r4, [r1, #13]
  417744:	735c      	strb	r4, [r3, #13]
  417746:	7b8c      	ldrb	r4, [r1, #14]
  417748:	739c      	strb	r4, [r3, #14]
  41774a:	7bcc      	ldrb	r4, [r1, #15]
  41774c:	73dc      	strb	r4, [r3, #15]
            REPEAT8(COPY8);
  41774e:	7c0c      	ldrb	r4, [r1, #16]
  417750:	741c      	strb	r4, [r3, #16]
  417752:	7c4c      	ldrb	r4, [r1, #17]
  417754:	745c      	strb	r4, [r3, #17]
  417756:	7c8c      	ldrb	r4, [r1, #18]
  417758:	749c      	strb	r4, [r3, #18]
  41775a:	7ccc      	ldrb	r4, [r1, #19]
  41775c:	74dc      	strb	r4, [r3, #19]
  41775e:	7d0c      	ldrb	r4, [r1, #20]
  417760:	751c      	strb	r4, [r3, #20]
  417762:	7d4c      	ldrb	r4, [r1, #21]
  417764:	755c      	strb	r4, [r3, #21]
  417766:	7d8c      	ldrb	r4, [r1, #22]
  417768:	759c      	strb	r4, [r3, #22]
  41776a:	7dcc      	ldrb	r4, [r1, #23]
  41776c:	75dc      	strb	r4, [r3, #23]
            REPEAT8(COPY8);
  41776e:	7e0c      	ldrb	r4, [r1, #24]
  417770:	761c      	strb	r4, [r3, #24]
  417772:	7e4c      	ldrb	r4, [r1, #25]
  417774:	765c      	strb	r4, [r3, #25]
  417776:	7e8c      	ldrb	r4, [r1, #26]
  417778:	769c      	strb	r4, [r3, #26]
  41777a:	7ecc      	ldrb	r4, [r1, #27]
  41777c:	76dc      	strb	r4, [r3, #27]
  41777e:	7f0c      	ldrb	r4, [r1, #28]
  417780:	771c      	strb	r4, [r3, #28]
  417782:	7f4c      	ldrb	r4, [r1, #29]
  417784:	775c      	strb	r4, [r3, #29]
  417786:	7f8c      	ldrb	r4, [r1, #30]
  417788:	779c      	strb	r4, [r3, #30]
  41778a:	7fcc      	ldrb	r4, [r1, #31]
  41778c:	77dc      	strb	r4, [r3, #31]
  41778e:	3320      	adds	r3, #32
  417790:	3120      	adds	r1, #32
            len -= 32;
  417792:	3a20      	subs	r2, #32
        while(len > 32) {
  417794:	2a20      	cmp	r2, #32
  417796:	d8ba      	bhi.n	41770e <_lv_memcpy+0x12>
  417798:	e004      	b.n	4177a4 <_lv_memcpy+0xa8>
            COPY8
  41779a:	f811 4b01 	ldrb.w	r4, [r1], #1
  41779e:	f803 4b01 	strb.w	r4, [r3], #1
            len--;
  4177a2:	3a01      	subs	r2, #1
        while(len) {
  4177a4:	2a00      	cmp	r2, #0
  4177a6:	d1f8      	bne.n	41779a <_lv_memcpy+0x9e>
}
  4177a8:	bc30      	pop	{r4, r5}
  4177aa:	4770      	bx	lr
    if(d_align) {
  4177ac:	b174      	cbz	r4, 4177cc <_lv_memcpy+0xd0>
        d_align = ALIGN_MASK + 1 - d_align;
  4177ae:	f1c4 0404 	rsb	r4, r4, #4
    uint8_t * d8 = dst;
  4177b2:	4603      	mov	r3, r0
        while(d_align && len) {
  4177b4:	e005      	b.n	4177c2 <_lv_memcpy+0xc6>
            COPY8;
  4177b6:	f811 5b01 	ldrb.w	r5, [r1], #1
  4177ba:	f803 5b01 	strb.w	r5, [r3], #1
            d_align--;
  4177be:	3c01      	subs	r4, #1
            len--;
  4177c0:	3a01      	subs	r2, #1
        while(d_align && len) {
  4177c2:	2c00      	cmp	r4, #0
  4177c4:	bf18      	it	ne
  4177c6:	2a00      	cmpne	r2, #0
  4177c8:	d1f5      	bne.n	4177b6 <_lv_memcpy+0xba>
  4177ca:	e014      	b.n	4177f6 <_lv_memcpy+0xfa>
    uint8_t * d8 = dst;
  4177cc:	4603      	mov	r3, r0
  4177ce:	e012      	b.n	4177f6 <_lv_memcpy+0xfa>
        REPEAT8(COPY32)
  4177d0:	680c      	ldr	r4, [r1, #0]
  4177d2:	601c      	str	r4, [r3, #0]
  4177d4:	684c      	ldr	r4, [r1, #4]
  4177d6:	605c      	str	r4, [r3, #4]
  4177d8:	688c      	ldr	r4, [r1, #8]
  4177da:	609c      	str	r4, [r3, #8]
  4177dc:	68cc      	ldr	r4, [r1, #12]
  4177de:	60dc      	str	r4, [r3, #12]
  4177e0:	690c      	ldr	r4, [r1, #16]
  4177e2:	611c      	str	r4, [r3, #16]
  4177e4:	694c      	ldr	r4, [r1, #20]
  4177e6:	615c      	str	r4, [r3, #20]
  4177e8:	698c      	ldr	r4, [r1, #24]
  4177ea:	619c      	str	r4, [r3, #24]
  4177ec:	69cc      	ldr	r4, [r1, #28]
  4177ee:	61dc      	str	r4, [r3, #28]
  4177f0:	3320      	adds	r3, #32
  4177f2:	3120      	adds	r1, #32
        len -= 32;
  4177f4:	3a20      	subs	r2, #32
    while(len > 32) {
  4177f6:	2a20      	cmp	r2, #32
  4177f8:	d8ea      	bhi.n	4177d0 <_lv_memcpy+0xd4>
  4177fa:	e004      	b.n	417806 <_lv_memcpy+0x10a>
        COPY32;
  4177fc:	f851 4b04 	ldr.w	r4, [r1], #4
  417800:	f843 4b04 	str.w	r4, [r3], #4
        len -= 4;
  417804:	3a04      	subs	r2, #4
    while(len > 4) {
  417806:	2a04      	cmp	r2, #4
  417808:	d8f8      	bhi.n	4177fc <_lv_memcpy+0x100>
  41780a:	e004      	b.n	417816 <_lv_memcpy+0x11a>
        COPY8
  41780c:	f811 4b01 	ldrb.w	r4, [r1], #1
  417810:	f803 4b01 	strb.w	r4, [r3], #1
        len--;
  417814:	3a01      	subs	r2, #1
    while(len) {
  417816:	2a00      	cmp	r2, #0
  417818:	d1f8      	bne.n	41780c <_lv_memcpy+0x110>
  41781a:	e7c5      	b.n	4177a8 <_lv_memcpy+0xac>

0041781c <lv_mem_realloc>:
{
  41781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    new_size = (new_size + ALIGN_MASK) & (~ALIGN_MASK);
  41781e:	3103      	adds	r1, #3
  417820:	f021 0403 	bic.w	r4, r1, #3
    if(data_p != NULL) {
  417824:	4605      	mov	r5, r0
  417826:	b128      	cbz	r0, 417834 <lv_mem_realloc+0x18>
        if(e->header.s.used == 0) {
  417828:	f810 3c04 	ldrb.w	r3, [r0, #-4]
  41782c:	f013 0f01 	tst.w	r3, #1
  417830:	d100      	bne.n	417834 <lv_mem_realloc+0x18>
            data_p = NULL;
  417832:	2500      	movs	r5, #0
    uint32_t old_size = _lv_mem_get_size(data_p);
  417834:	4628      	mov	r0, r5
  417836:	4b12      	ldr	r3, [pc, #72]	; (417880 <lv_mem_realloc+0x64>)
  417838:	4798      	blx	r3
  41783a:	4606      	mov	r6, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
  41783c:	4284      	cmp	r4, r0
  41783e:	d01d      	beq.n	41787c <lv_mem_realloc+0x60>
    if(new_size < old_size) {
  417840:	d30e      	bcc.n	417860 <lv_mem_realloc+0x44>
    new_p = lv_mem_alloc(new_size);
  417842:	4620      	mov	r0, r4
  417844:	4b0f      	ldr	r3, [pc, #60]	; (417884 <lv_mem_realloc+0x68>)
  417846:	4798      	blx	r3
    if(new_p == NULL) {
  417848:	4607      	mov	r7, r0
  41784a:	b138      	cbz	r0, 41785c <lv_mem_realloc+0x40>
    if(data_p != NULL) {
  41784c:	b135      	cbz	r5, 41785c <lv_mem_realloc+0x40>
        if(old_size != 0 && new_size != 0) {
  41784e:	2e00      	cmp	r6, #0
  417850:	bf18      	it	ne
  417852:	2c00      	cmpne	r4, #0
  417854:	d10a      	bne.n	41786c <lv_mem_realloc+0x50>
        lv_mem_free(data_p);
  417856:	4628      	mov	r0, r5
  417858:	4b0b      	ldr	r3, [pc, #44]	; (417888 <lv_mem_realloc+0x6c>)
  41785a:	4798      	blx	r3
}
  41785c:	4638      	mov	r0, r7
  41785e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ent_trunc(e, new_size);
  417860:	4621      	mov	r1, r4
  417862:	1f28      	subs	r0, r5, #4
  417864:	4b09      	ldr	r3, [pc, #36]	; (41788c <lv_mem_realloc+0x70>)
  417866:	4798      	blx	r3
        return &e->first_data;
  417868:	462f      	mov	r7, r5
  41786a:	e7f7      	b.n	41785c <lv_mem_realloc+0x40>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
  41786c:	4622      	mov	r2, r4
  41786e:	42b4      	cmp	r4, r6
  417870:	bf28      	it	cs
  417872:	4632      	movcs	r2, r6
  417874:	4629      	mov	r1, r5
  417876:	4b06      	ldr	r3, [pc, #24]	; (417890 <lv_mem_realloc+0x74>)
  417878:	4798      	blx	r3
  41787a:	e7ec      	b.n	417856 <lv_mem_realloc+0x3a>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
  41787c:	462f      	mov	r7, r5
  41787e:	e7ed      	b.n	41785c <lv_mem_realloc+0x40>
  417880:	00417625 	.word	0x00417625
  417884:	004174ed 	.word	0x004174ed
  417888:	004175b1 	.word	0x004175b1
  41788c:	00417451 	.word	0x00417451
  417890:	004176fd 	.word	0x004176fd

00417894 <_lv_mem_buf_get>:
{
  417894:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) return NULL;
  417896:	2800      	cmp	r0, #0
  417898:	f000 8085 	beq.w	4179a6 <_lv_mem_buf_get+0x112>
  41789c:	4604      	mov	r4, r0
    if(size <= MEM_BUF_SMALL_SIZE) {
  41789e:	2810      	cmp	r0, #16
  4178a0:	d91d      	bls.n	4178de <_lv_mem_buf_get+0x4a>
  4178a2:	f04f 31ff 	mov.w	r1, #4294967295
  4178a6:	2300      	movs	r3, #0
  4178a8:	e028      	b.n	4178fc <_lv_mem_buf_get+0x68>
            if(mem_buf_small[i].used == 0) {
  4178aa:	4619      	mov	r1, r3
  4178ac:	4a3f      	ldr	r2, [pc, #252]	; (4179ac <_lv_mem_buf_get+0x118>)
  4178ae:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4178b2:	7992      	ldrb	r2, [r2, #6]
  4178b4:	f012 0f01 	tst.w	r2, #1
  4178b8:	d007      	beq.n	4178ca <_lv_mem_buf_get+0x36>
        for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  4178ba:	3301      	adds	r3, #1
  4178bc:	b2db      	uxtb	r3, r3
  4178be:	2b01      	cmp	r3, #1
  4178c0:	d9f3      	bls.n	4178aa <_lv_mem_buf_get+0x16>
  4178c2:	f04f 31ff 	mov.w	r1, #4294967295
  4178c6:	2300      	movs	r3, #0
  4178c8:	e018      	b.n	4178fc <_lv_mem_buf_get+0x68>
                mem_buf_small[i].used = 1;
  4178ca:	4a38      	ldr	r2, [pc, #224]	; (4179ac <_lv_mem_buf_get+0x118>)
  4178cc:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  4178d0:	7983      	ldrb	r3, [r0, #6]
  4178d2:	f043 0301 	orr.w	r3, r3, #1
  4178d6:	7183      	strb	r3, [r0, #6]
                return mem_buf_small[i].p;
  4178d8:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
  4178dc:	e034      	b.n	417948 <_lv_mem_buf_get+0xb4>
  4178de:	2300      	movs	r3, #0
  4178e0:	e7ed      	b.n	4178be <_lv_mem_buf_get+0x2a>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
  4178e2:	4a33      	ldr	r2, [pc, #204]	; (4179b0 <_lv_mem_buf_get+0x11c>)
  4178e4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  4178e8:	798b      	ldrb	r3, [r1, #6]
  4178ea:	f043 0301 	orr.w	r3, r3, #1
  4178ee:	718b      	strb	r3, [r1, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
  4178f0:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
  4178f4:	e028      	b.n	417948 <_lv_mem_buf_get+0xb4>
                i_guess = i;
  4178f6:	b259      	sxtb	r1, r3
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  4178f8:	3301      	adds	r3, #1
  4178fa:	b2db      	uxtb	r3, r3
  4178fc:	2b0f      	cmp	r3, #15
  4178fe:	d818      	bhi.n	417932 <_lv_mem_buf_get+0x9e>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
  417900:	4618      	mov	r0, r3
  417902:	4a2b      	ldr	r2, [pc, #172]	; (4179b0 <_lv_mem_buf_get+0x11c>)
  417904:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  417908:	7992      	ldrb	r2, [r2, #6]
  41790a:	f012 0f01 	tst.w	r2, #1
  41790e:	d1f3      	bne.n	4178f8 <_lv_mem_buf_get+0x64>
  417910:	4a27      	ldr	r2, [pc, #156]	; (4179b0 <_lv_mem_buf_get+0x11c>)
  417912:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  417916:	8892      	ldrh	r2, [r2, #4]
  417918:	4294      	cmp	r4, r2
  41791a:	d8ed      	bhi.n	4178f8 <_lv_mem_buf_get+0x64>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
  41791c:	d0e1      	beq.n	4178e2 <_lv_mem_buf_get+0x4e>
            else if(i_guess < 0) {
  41791e:	2900      	cmp	r1, #0
  417920:	dbe9      	blt.n	4178f6 <_lv_mem_buf_get+0x62>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
  417922:	4823      	ldr	r0, [pc, #140]	; (4179b0 <_lv_mem_buf_get+0x11c>)
  417924:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  417928:	8880      	ldrh	r0, [r0, #4]
  41792a:	4282      	cmp	r2, r0
  41792c:	d2e4      	bcs.n	4178f8 <_lv_mem_buf_get+0x64>
                i_guess = i;
  41792e:	b259      	sxtb	r1, r3
  417930:	e7e2      	b.n	4178f8 <_lv_mem_buf_get+0x64>
    if(i_guess >= 0) {
  417932:	2900      	cmp	r1, #0
  417934:	db23      	blt.n	41797e <_lv_mem_buf_get+0xea>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
  417936:	4a1e      	ldr	r2, [pc, #120]	; (4179b0 <_lv_mem_buf_get+0x11c>)
  417938:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
  41793c:	7983      	ldrb	r3, [r0, #6]
  41793e:	f043 0301 	orr.w	r3, r3, #1
  417942:	7183      	strb	r3, [r0, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
  417944:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
}
  417948:	4618      	mov	r0, r3
  41794a:	bd38      	pop	{r3, r4, r5, pc}
            void * buf = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
  41794c:	4621      	mov	r1, r4
  41794e:	4b18      	ldr	r3, [pc, #96]	; (4179b0 <_lv_mem_buf_get+0x11c>)
  417950:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
  417954:	4b17      	ldr	r3, [pc, #92]	; (4179b4 <_lv_mem_buf_get+0x120>)
  417956:	4798      	blx	r3
            if(buf == NULL) {
  417958:	4603      	mov	r3, r0
  41795a:	b150      	cbz	r0, 417972 <_lv_mem_buf_get+0xde>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
  41795c:	4814      	ldr	r0, [pc, #80]	; (4179b0 <_lv_mem_buf_get+0x11c>)
  41795e:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
  417962:	7991      	ldrb	r1, [r2, #6]
  417964:	f041 0101 	orr.w	r1, r1, #1
  417968:	7191      	strb	r1, [r2, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
  41796a:	8094      	strh	r4, [r2, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p    = buf;
  41796c:	f840 3035 	str.w	r3, [r0, r5, lsl #3]
            return LV_GC_ROOT(_lv_mem_buf[i]).p;
  417970:	e7ea      	b.n	417948 <_lv_mem_buf_get+0xb4>
                LV_DEBUG_ASSERT(false, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)", 0x00);
  417972:	2200      	movs	r2, #0
  417974:	2300      	movs	r3, #0
  417976:	4810      	ldr	r0, [pc, #64]	; (4179b8 <_lv_mem_buf_get+0x124>)
  417978:	4910      	ldr	r1, [pc, #64]	; (4179bc <_lv_mem_buf_get+0x128>)
  41797a:	4788      	blx	r1
  41797c:	e7fe      	b.n	41797c <_lv_mem_buf_get+0xe8>
  41797e:	2300      	movs	r3, #0
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  417980:	2b0f      	cmp	r3, #15
  417982:	d80a      	bhi.n	41799a <_lv_mem_buf_get+0x106>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
  417984:	461d      	mov	r5, r3
  417986:	4a0a      	ldr	r2, [pc, #40]	; (4179b0 <_lv_mem_buf_get+0x11c>)
  417988:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  41798c:	7992      	ldrb	r2, [r2, #6]
  41798e:	f012 0f01 	tst.w	r2, #1
  417992:	d0db      	beq.n	41794c <_lv_mem_buf_get+0xb8>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  417994:	3301      	adds	r3, #1
  417996:	b2db      	uxtb	r3, r3
  417998:	e7f2      	b.n	417980 <_lv_mem_buf_get+0xec>
    LV_DEBUG_ASSERT(false, "No free buffer. Increase LV_MEM_BUF_MAX_NUM.", 0x00);
  41799a:	2200      	movs	r2, #0
  41799c:	2300      	movs	r3, #0
  41799e:	4808      	ldr	r0, [pc, #32]	; (4179c0 <_lv_mem_buf_get+0x12c>)
  4179a0:	4906      	ldr	r1, [pc, #24]	; (4179bc <_lv_mem_buf_get+0x128>)
  4179a2:	4788      	blx	r1
  4179a4:	e7fe      	b.n	4179a4 <_lv_mem_buf_get+0x110>
    if(size == 0) return NULL;
  4179a6:	2300      	movs	r3, #0
  4179a8:	e7ce      	b.n	417948 <_lv_mem_buf_get+0xb4>
  4179aa:	bf00      	nop
  4179ac:	204000a0 	.word	0x204000a0
  4179b0:	2043a27c 	.word	0x2043a27c
  4179b4:	0041781d 	.word	0x0041781d
  4179b8:	00431c08 	.word	0x00431c08
  4179bc:	00416db5 	.word	0x00416db5
  4179c0:	00431c5c 	.word	0x00431c5c

004179c4 <_lv_memset>:
    if(d_align) {
  4179c4:	f010 0303 	ands.w	r3, r0, #3
  4179c8:	d00a      	beq.n	4179e0 <_lv_memset+0x1c>
        d_align = ALIGN_MASK + 1 - d_align;
  4179ca:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  4179ce:	e003      	b.n	4179d8 <_lv_memset+0x14>
            SET8(v);
  4179d0:	f800 1b01 	strb.w	r1, [r0], #1
            len--;
  4179d4:	3a01      	subs	r2, #1
            d_align--;
  4179d6:	3b01      	subs	r3, #1
        while(d_align && len) {
  4179d8:	2b00      	cmp	r3, #0
  4179da:	bf18      	it	ne
  4179dc:	2a00      	cmpne	r2, #0
  4179de:	d1f7      	bne.n	4179d0 <_lv_memset+0xc>
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
  4179e0:	eb01 2301 	add.w	r3, r1, r1, lsl #8
  4179e4:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4179e8:	eb03 6301 	add.w	r3, r3, r1, lsl #24
    while(len > 32) {
  4179ec:	e009      	b.n	417a02 <_lv_memset+0x3e>
        REPEAT8(SET32(v32));
  4179ee:	6003      	str	r3, [r0, #0]
  4179f0:	6043      	str	r3, [r0, #4]
  4179f2:	6083      	str	r3, [r0, #8]
  4179f4:	60c3      	str	r3, [r0, #12]
  4179f6:	6103      	str	r3, [r0, #16]
  4179f8:	6143      	str	r3, [r0, #20]
  4179fa:	6183      	str	r3, [r0, #24]
  4179fc:	61c3      	str	r3, [r0, #28]
  4179fe:	3020      	adds	r0, #32
        len -= 32;
  417a00:	3a20      	subs	r2, #32
    while(len > 32) {
  417a02:	2a20      	cmp	r2, #32
  417a04:	d8f3      	bhi.n	4179ee <_lv_memset+0x2a>
  417a06:	e002      	b.n	417a0e <_lv_memset+0x4a>
        SET32(v32);
  417a08:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  417a0c:	3a04      	subs	r2, #4
    while(len > 4) {
  417a0e:	2a04      	cmp	r2, #4
  417a10:	d8fa      	bhi.n	417a08 <_lv_memset+0x44>
  417a12:	e002      	b.n	417a1a <_lv_memset+0x56>
        SET8(v);
  417a14:	f800 1b01 	strb.w	r1, [r0], #1
        len--;
  417a18:	3a01      	subs	r2, #1
    while(len) {
  417a1a:	2a00      	cmp	r2, #0
  417a1c:	d1fa      	bne.n	417a14 <_lv_memset+0x50>
}
  417a1e:	4770      	bx	lr

00417a20 <_lv_memset_00>:
    if(d_align) {
  417a20:	f010 0303 	ands.w	r3, r0, #3
  417a24:	d017      	beq.n	417a56 <_lv_memset_00+0x36>
        d_align = ALIGN_MASK + 1 - d_align;
  417a26:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  417a2a:	e004      	b.n	417a36 <_lv_memset_00+0x16>
            SET8(0);
  417a2c:	2200      	movs	r2, #0
  417a2e:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
  417a32:	3901      	subs	r1, #1
            d_align--;
  417a34:	3b01      	subs	r3, #1
        while(d_align && len) {
  417a36:	2b00      	cmp	r3, #0
  417a38:	bf18      	it	ne
  417a3a:	2900      	cmpne	r1, #0
  417a3c:	d1f6      	bne.n	417a2c <_lv_memset_00+0xc>
  417a3e:	e00a      	b.n	417a56 <_lv_memset_00+0x36>
        REPEAT8(SET32(0));
  417a40:	2300      	movs	r3, #0
  417a42:	6003      	str	r3, [r0, #0]
  417a44:	6043      	str	r3, [r0, #4]
  417a46:	6083      	str	r3, [r0, #8]
  417a48:	60c3      	str	r3, [r0, #12]
  417a4a:	6103      	str	r3, [r0, #16]
  417a4c:	6143      	str	r3, [r0, #20]
  417a4e:	6183      	str	r3, [r0, #24]
  417a50:	61c3      	str	r3, [r0, #28]
  417a52:	3020      	adds	r0, #32
        len -= 32;
  417a54:	3920      	subs	r1, #32
    while(len > 32) {
  417a56:	2920      	cmp	r1, #32
  417a58:	d8f2      	bhi.n	417a40 <_lv_memset_00+0x20>
  417a5a:	e003      	b.n	417a64 <_lv_memset_00+0x44>
        SET32(0);
  417a5c:	2300      	movs	r3, #0
  417a5e:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  417a62:	3904      	subs	r1, #4
    while(len > 4) {
  417a64:	2904      	cmp	r1, #4
  417a66:	d8f9      	bhi.n	417a5c <_lv_memset_00+0x3c>
  417a68:	e003      	b.n	417a72 <_lv_memset_00+0x52>
        SET8(0);
  417a6a:	2300      	movs	r3, #0
  417a6c:	f800 3b01 	strb.w	r3, [r0], #1
        len--;
  417a70:	3901      	subs	r1, #1
    while(len) {
  417a72:	2900      	cmp	r1, #0
  417a74:	d1f9      	bne.n	417a6a <_lv_memset_00+0x4a>
}
  417a76:	4770      	bx	lr

00417a78 <_lv_memset_ff>:
    if(d_align) {
  417a78:	f010 0303 	ands.w	r3, r0, #3
  417a7c:	d018      	beq.n	417ab0 <_lv_memset_ff+0x38>
        d_align = ALIGN_MASK + 1 - d_align;
  417a7e:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  417a82:	e004      	b.n	417a8e <_lv_memset_ff+0x16>
            SET8(0xFF);
  417a84:	22ff      	movs	r2, #255	; 0xff
  417a86:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
  417a8a:	3901      	subs	r1, #1
            d_align--;
  417a8c:	3b01      	subs	r3, #1
        while(d_align && len) {
  417a8e:	2b00      	cmp	r3, #0
  417a90:	bf18      	it	ne
  417a92:	2900      	cmpne	r1, #0
  417a94:	d1f6      	bne.n	417a84 <_lv_memset_ff+0xc>
  417a96:	e00b      	b.n	417ab0 <_lv_memset_ff+0x38>
        REPEAT8(SET32(0xFFFFFFFF));
  417a98:	f04f 33ff 	mov.w	r3, #4294967295
  417a9c:	6003      	str	r3, [r0, #0]
  417a9e:	6043      	str	r3, [r0, #4]
  417aa0:	6083      	str	r3, [r0, #8]
  417aa2:	60c3      	str	r3, [r0, #12]
  417aa4:	6103      	str	r3, [r0, #16]
  417aa6:	6143      	str	r3, [r0, #20]
  417aa8:	6183      	str	r3, [r0, #24]
  417aaa:	61c3      	str	r3, [r0, #28]
  417aac:	3020      	adds	r0, #32
        len -= 32;
  417aae:	3920      	subs	r1, #32
    while(len > 32) {
  417ab0:	2920      	cmp	r1, #32
  417ab2:	d8f1      	bhi.n	417a98 <_lv_memset_ff+0x20>
  417ab4:	e004      	b.n	417ac0 <_lv_memset_ff+0x48>
        SET32(0xFFFFFFFF);
  417ab6:	f04f 33ff 	mov.w	r3, #4294967295
  417aba:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  417abe:	3904      	subs	r1, #4
    while(len > 4) {
  417ac0:	2904      	cmp	r1, #4
  417ac2:	d8f8      	bhi.n	417ab6 <_lv_memset_ff+0x3e>
  417ac4:	e003      	b.n	417ace <_lv_memset_ff+0x56>
        SET8(0xFF);
  417ac6:	23ff      	movs	r3, #255	; 0xff
  417ac8:	f800 3b01 	strb.w	r3, [r0], #1
        len--;
  417acc:	3901      	subs	r1, #1
    while(len) {
  417ace:	2900      	cmp	r1, #0
  417ad0:	d1f9      	bne.n	417ac6 <_lv_memset_ff+0x4e>
}
  417ad2:	4770      	bx	lr

00417ad4 <_out_buffer>:
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)
{
    if(idx < maxlen) {
  417ad4:	429a      	cmp	r2, r3
  417ad6:	d200      	bcs.n	417ada <_out_buffer+0x6>
        ((char *)buffer)[idx] = character;
  417ad8:	5488      	strb	r0, [r1, r2]
  417ada:	4770      	bx	lr

00417adc <_out_null>:
    }
}

// internal null output
static inline void _out_null(char character, void * buffer, size_t idx, size_t maxlen)
{
  417adc:	4770      	bx	lr

00417ade <_atoi>:
}

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char ** str)
{
    unsigned int i = 0U;
  417ade:	2300      	movs	r3, #0
    while(_is_digit(**str)) {
  417ae0:	e007      	b.n	417af2 <_atoi+0x14>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
  417ae2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  417ae6:	005a      	lsls	r2, r3, #1
  417ae8:	1c4b      	adds	r3, r1, #1
  417aea:	6003      	str	r3, [r0, #0]
  417aec:	780b      	ldrb	r3, [r1, #0]
  417aee:	4413      	add	r3, r2
  417af0:	3b30      	subs	r3, #48	; 0x30
    while(_is_digit(**str)) {
  417af2:	6801      	ldr	r1, [r0, #0]
  417af4:	780a      	ldrb	r2, [r1, #0]
    return (ch >= '0') && (ch <= '9');
  417af6:	3a30      	subs	r2, #48	; 0x30
  417af8:	b2d2      	uxtb	r2, r2
    while(_is_digit(**str)) {
  417afa:	2a09      	cmp	r2, #9
  417afc:	d9f1      	bls.n	417ae2 <_atoi+0x4>
    }
    return i;
}
  417afe:	4618      	mov	r0, r3
  417b00:	4770      	bx	lr

00417b02 <_out_rev>:

// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char * buffer, size_t idx, size_t maxlen, const char * buf, size_t len,
                       unsigned int width, unsigned int flags)
{
  417b02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  417b06:	b083      	sub	sp, #12
  417b08:	4605      	mov	r5, r0
  417b0a:	9101      	str	r1, [sp, #4]
  417b0c:	4693      	mov	fp, r2
  417b0e:	461e      	mov	r6, r3
  417b10:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  417b14:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  417b16:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    const size_t start_idx = idx;

    // pad spaces up to given width
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
  417b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  417b1c:	f013 0f03 	tst.w	r3, #3
  417b20:	d114      	bne.n	417b4c <_out_rev+0x4a>
  417b22:	4627      	mov	r7, r4
  417b24:	e007      	b.n	417b36 <_out_rev+0x34>
        size_t i;
        for(i = len; i < width; i++) {
            out(' ', buffer, idx++, maxlen);
  417b26:	f102 0a01 	add.w	sl, r2, #1
  417b2a:	4633      	mov	r3, r6
  417b2c:	9901      	ldr	r1, [sp, #4]
  417b2e:	2020      	movs	r0, #32
  417b30:	47a8      	blx	r5
        for(i = len; i < width; i++) {
  417b32:	3701      	adds	r7, #1
            out(' ', buffer, idx++, maxlen);
  417b34:	4652      	mov	r2, sl
        for(i = len; i < width; i++) {
  417b36:	4547      	cmp	r7, r8
  417b38:	d3f5      	bcc.n	417b26 <_out_rev+0x24>
  417b3a:	e007      	b.n	417b4c <_out_rev+0x4a>
        }
    }

    // reverse string
    while(len) {
        out(buf[--len], buffer, idx++, maxlen);
  417b3c:	3c01      	subs	r4, #1
  417b3e:	1c57      	adds	r7, r2, #1
  417b40:	4633      	mov	r3, r6
  417b42:	9901      	ldr	r1, [sp, #4]
  417b44:	f819 0004 	ldrb.w	r0, [r9, r4]
  417b48:	47a8      	blx	r5
  417b4a:	463a      	mov	r2, r7
    while(len) {
  417b4c:	2c00      	cmp	r4, #0
  417b4e:	d1f5      	bne.n	417b3c <_out_rev+0x3a>
    }

    // append pad spaces up to given width
    if(flags & FLAGS_LEFT) {
  417b50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  417b52:	f013 0f02 	tst.w	r3, #2
  417b56:	d00b      	beq.n	417b70 <_out_rev+0x6e>
  417b58:	9f01      	ldr	r7, [sp, #4]
  417b5a:	e005      	b.n	417b68 <_out_rev+0x66>
        while(idx - start_idx < width) {
            out(' ', buffer, idx++, maxlen);
  417b5c:	1c54      	adds	r4, r2, #1
  417b5e:	4633      	mov	r3, r6
  417b60:	4639      	mov	r1, r7
  417b62:	2020      	movs	r0, #32
  417b64:	47a8      	blx	r5
  417b66:	4622      	mov	r2, r4
        while(idx - start_idx < width) {
  417b68:	eba2 030b 	sub.w	r3, r2, fp
  417b6c:	4598      	cmp	r8, r3
  417b6e:	d8f5      	bhi.n	417b5c <_out_rev+0x5a>
        }
    }

    return idx;
}
  417b70:	4610      	mov	r0, r2
  417b72:	b003      	add	sp, #12
  417b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00417b78 <_ntoa_format>:

// internal itoa format
static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
  417b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  417b7c:	b085      	sub	sp, #20
  417b7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  417b80:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  417b82:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
  417b86:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  417b8a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  417b8e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
  417b92:	9e12      	ldr	r6, [sp, #72]	; 0x48
    // pad leading zeros
    if(!(flags & FLAGS_LEFT)) {
  417b94:	f016 0f02 	tst.w	r6, #2
  417b98:	d124      	bne.n	417be4 <_ntoa_format+0x6c>
        if(width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
  417b9a:	f1be 0f00 	cmp.w	lr, #0
  417b9e:	d00e      	beq.n	417bbe <_ntoa_format+0x46>
  417ba0:	f016 0f01 	tst.w	r6, #1
  417ba4:	d00b      	beq.n	417bbe <_ntoa_format+0x46>
  417ba6:	f1b9 0f00 	cmp.w	r9, #0
  417baa:	d102      	bne.n	417bb2 <_ntoa_format+0x3a>
  417bac:	f016 0f0c 	tst.w	r6, #12
  417bb0:	d005      	beq.n	417bbe <_ntoa_format+0x46>
            width--;
  417bb2:	f10e 3eff 	add.w	lr, lr, #4294967295
  417bb6:	e002      	b.n	417bbe <_ntoa_format+0x46>
        }
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
  417bb8:	2730      	movs	r7, #48	; 0x30
  417bba:	552f      	strb	r7, [r5, r4]
  417bbc:	3401      	adds	r4, #1
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  417bbe:	2c1f      	cmp	r4, #31
  417bc0:	bf98      	it	ls
  417bc2:	4564      	cmpls	r4, ip
  417bc4:	d3f8      	bcc.n	417bb8 <_ntoa_format+0x40>
  417bc6:	e002      	b.n	417bce <_ntoa_format+0x56>
        }
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
  417bc8:	2730      	movs	r7, #48	; 0x30
  417bca:	552f      	strb	r7, [r5, r4]
  417bcc:	3401      	adds	r4, #1
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  417bce:	f016 0f01 	tst.w	r6, #1
  417bd2:	d007      	beq.n	417be4 <_ntoa_format+0x6c>
  417bd4:	2c1f      	cmp	r4, #31
  417bd6:	bf8c      	ite	hi
  417bd8:	2700      	movhi	r7, #0
  417bda:	2701      	movls	r7, #1
  417bdc:	4574      	cmp	r4, lr
  417bde:	d201      	bcs.n	417be4 <_ntoa_format+0x6c>
  417be0:	2f00      	cmp	r7, #0
  417be2:	d1f1      	bne.n	417bc8 <_ntoa_format+0x50>
        }
    }

    // handle hash
    if(flags & FLAGS_HASH) {
  417be4:	f016 0f10 	tst.w	r6, #16
  417be8:	d026      	beq.n	417c38 <_ntoa_format+0xc0>
        if(!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
  417bea:	f416 6f80 	tst.w	r6, #1024	; 0x400
  417bee:	d110      	bne.n	417c12 <_ntoa_format+0x9a>
  417bf0:	b17c      	cbz	r4, 417c12 <_ntoa_format+0x9a>
  417bf2:	4574      	cmp	r4, lr
  417bf4:	bf18      	it	ne
  417bf6:	4564      	cmpne	r4, ip
  417bf8:	d10b      	bne.n	417c12 <_ntoa_format+0x9a>
            len--;
            if(len && (base == 16U)) {
  417bfa:	f104 3cff 	add.w	ip, r4, #4294967295
  417bfe:	f114 37ff 	adds.w	r7, r4, #4294967295
  417c02:	bf18      	it	ne
  417c04:	2701      	movne	r7, #1
  417c06:	f1b8 0f10 	cmp.w	r8, #16
  417c0a:	bf18      	it	ne
  417c0c:	2700      	movne	r7, #0
  417c0e:	b317      	cbz	r7, 417c56 <_ntoa_format+0xde>
                len--;
  417c10:	3c02      	subs	r4, #2
            }
        }
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  417c12:	f1b8 0f10 	cmp.w	r8, #16
  417c16:	d020      	beq.n	417c5a <_ntoa_format+0xe2>
            buf[len++] = 'x';
        }
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  417c18:	f1b8 0f10 	cmp.w	r8, #16
  417c1c:	d026      	beq.n	417c6c <_ntoa_format+0xf4>
            buf[len++] = 'X';
        }
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  417c1e:	2c1f      	cmp	r4, #31
  417c20:	bf98      	it	ls
  417c22:	f1b8 0f02 	cmpls.w	r8, #2
  417c26:	d102      	bne.n	417c2e <_ntoa_format+0xb6>
            buf[len++] = 'b';
  417c28:	2762      	movs	r7, #98	; 0x62
  417c2a:	552f      	strb	r7, [r5, r4]
  417c2c:	3401      	adds	r4, #1
        }
        if(len < PRINTF_NTOA_BUFFER_SIZE) {
  417c2e:	2c1f      	cmp	r4, #31
  417c30:	d802      	bhi.n	417c38 <_ntoa_format+0xc0>
            buf[len++] = '0';
  417c32:	2730      	movs	r7, #48	; 0x30
  417c34:	552f      	strb	r7, [r5, r4]
  417c36:	3401      	adds	r4, #1
        }
    }

    if(len < PRINTF_NTOA_BUFFER_SIZE) {
  417c38:	2c1f      	cmp	r4, #31
  417c3a:	d823      	bhi.n	417c84 <_ntoa_format+0x10c>
        if(negative) {
  417c3c:	f1b9 0f00 	cmp.w	r9, #0
  417c40:	d11d      	bne.n	417c7e <_ntoa_format+0x106>
            buf[len++] = '-';
        }
        else if(flags & FLAGS_PLUS) {
  417c42:	f016 0f04 	tst.w	r6, #4
  417c46:	d127      	bne.n	417c98 <_ntoa_format+0x120>
            buf[len++] = '+';  // ignore the space if the '+' exists
        }
        else if(flags & FLAGS_SPACE) {
  417c48:	f016 0f08 	tst.w	r6, #8
  417c4c:	d01a      	beq.n	417c84 <_ntoa_format+0x10c>
            buf[len++] = ' ';
  417c4e:	2720      	movs	r7, #32
  417c50:	552f      	strb	r7, [r5, r4]
  417c52:	3401      	adds	r4, #1
  417c54:	e016      	b.n	417c84 <_ntoa_format+0x10c>
            len--;
  417c56:	4664      	mov	r4, ip
  417c58:	e7db      	b.n	417c12 <_ntoa_format+0x9a>
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  417c5a:	f016 0f20 	tst.w	r6, #32
  417c5e:	d1db      	bne.n	417c18 <_ntoa_format+0xa0>
  417c60:	2c1f      	cmp	r4, #31
  417c62:	d8d9      	bhi.n	417c18 <_ntoa_format+0xa0>
            buf[len++] = 'x';
  417c64:	2778      	movs	r7, #120	; 0x78
  417c66:	552f      	strb	r7, [r5, r4]
  417c68:	3401      	adds	r4, #1
  417c6a:	e7e0      	b.n	417c2e <_ntoa_format+0xb6>
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  417c6c:	f016 0f20 	tst.w	r6, #32
  417c70:	d0d5      	beq.n	417c1e <_ntoa_format+0xa6>
  417c72:	2c1f      	cmp	r4, #31
  417c74:	d8d3      	bhi.n	417c1e <_ntoa_format+0xa6>
            buf[len++] = 'X';
  417c76:	2758      	movs	r7, #88	; 0x58
  417c78:	552f      	strb	r7, [r5, r4]
  417c7a:	3401      	adds	r4, #1
  417c7c:	e7d7      	b.n	417c2e <_ntoa_format+0xb6>
            buf[len++] = '-';
  417c7e:	272d      	movs	r7, #45	; 0x2d
  417c80:	552f      	strb	r7, [r5, r4]
  417c82:	3401      	adds	r4, #1
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
  417c84:	9603      	str	r6, [sp, #12]
  417c86:	f8cd e008 	str.w	lr, [sp, #8]
  417c8a:	9401      	str	r4, [sp, #4]
  417c8c:	9500      	str	r5, [sp, #0]
  417c8e:	4c04      	ldr	r4, [pc, #16]	; (417ca0 <_ntoa_format+0x128>)
  417c90:	47a0      	blx	r4
}
  417c92:	b005      	add	sp, #20
  417c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            buf[len++] = '+';  // ignore the space if the '+' exists
  417c98:	272b      	movs	r7, #43	; 0x2b
  417c9a:	552f      	strb	r7, [r5, r4]
  417c9c:	3401      	adds	r4, #1
  417c9e:	e7f1      	b.n	417c84 <_ntoa_format+0x10c>
  417ca0:	00417b03 	.word	0x00417b03

00417ca4 <_ntoa_long>:

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  417ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  417ca8:	b090      	sub	sp, #64	; 0x40
  417caa:	9d16      	ldr	r5, [sp, #88]	; 0x58
  417cac:	9f18      	ldr	r7, [sp, #96]	; 0x60
  417cae:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
  417cb2:	b90d      	cbnz	r5, 417cb8 <_ntoa_long+0x14>
        flags &= ~FLAGS_HASH;
  417cb4:	f02e 0e10 	bic.w	lr, lr, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
  417cb8:	f41e 6680 	ands.w	r6, lr, #1024	; 0x400
  417cbc:	d01b      	beq.n	417cf6 <_ntoa_long+0x52>
  417cbe:	b34d      	cbz	r5, 417d14 <_ntoa_long+0x70>
  417cc0:	2600      	movs	r6, #0
  417cc2:	e018      	b.n	417cf6 <_ntoa_long+0x52>
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  417cc4:	f01e 0f20 	tst.w	lr, #32
  417cc8:	d021      	beq.n	417d0e <_ntoa_long+0x6a>
  417cca:	f04f 0841 	mov.w	r8, #65	; 0x41
  417cce:	4444      	add	r4, r8
  417cd0:	b2e4      	uxtb	r4, r4
  417cd2:	3c0a      	subs	r4, #10
  417cd4:	b2e4      	uxtb	r4, r4
  417cd6:	f10d 0840 	add.w	r8, sp, #64	; 0x40
  417cda:	4446      	add	r6, r8
  417cdc:	f806 4c20 	strb.w	r4, [r6, #-32]
            value /= base;
  417ce0:	fbb5 f5f7 	udiv	r5, r5, r7
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
  417ce4:	1c2c      	adds	r4, r5, #0
  417ce6:	bf18      	it	ne
  417ce8:	2401      	movne	r4, #1
  417cea:	f1bc 0f1f 	cmp.w	ip, #31
  417cee:	bf88      	it	hi
  417cf0:	2400      	movhi	r4, #0
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  417cf2:	4666      	mov	r6, ip
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
  417cf4:	b184      	cbz	r4, 417d18 <_ntoa_long+0x74>
            const char digit = (char)(value % base);
  417cf6:	fbb5 f4f7 	udiv	r4, r5, r7
  417cfa:	fb07 5414 	mls	r4, r7, r4, r5
  417cfe:	b2e4      	uxtb	r4, r4
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  417d00:	f106 0c01 	add.w	ip, r6, #1
  417d04:	2c09      	cmp	r4, #9
  417d06:	d8dd      	bhi.n	417cc4 <_ntoa_long+0x20>
  417d08:	3430      	adds	r4, #48	; 0x30
  417d0a:	b2e4      	uxtb	r4, r4
  417d0c:	e7e3      	b.n	417cd6 <_ntoa_long+0x32>
  417d0e:	f04f 0861 	mov.w	r8, #97	; 0x61
  417d12:	e7dc      	b.n	417cce <_ntoa_long+0x2a>
    size_t len = 0U;
  417d14:	f04f 0c00 	mov.w	ip, #0
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
  417d18:	f8cd e018 	str.w	lr, [sp, #24]
  417d1c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  417d1e:	9405      	str	r4, [sp, #20]
  417d20:	9c19      	ldr	r4, [sp, #100]	; 0x64
  417d22:	9404      	str	r4, [sp, #16]
  417d24:	9703      	str	r7, [sp, #12]
  417d26:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
  417d2a:	9402      	str	r4, [sp, #8]
  417d2c:	f8cd c004 	str.w	ip, [sp, #4]
  417d30:	ac08      	add	r4, sp, #32
  417d32:	9400      	str	r4, [sp, #0]
  417d34:	4c02      	ldr	r4, [pc, #8]	; (417d40 <_ntoa_long+0x9c>)
  417d36:	47a0      	blx	r4
}
  417d38:	b010      	add	sp, #64	; 0x40
  417d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  417d3e:	bf00      	nop
  417d40:	00417b79 	.word	0x00417b79

00417d44 <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  417d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  417d48:	b095      	sub	sp, #84	; 0x54
  417d4a:	9009      	str	r0, [sp, #36]	; 0x24
  417d4c:	910a      	str	r1, [sp, #40]	; 0x28
  417d4e:	920b      	str	r2, [sp, #44]	; 0x2c
  417d50:	469b      	mov	fp, r3
  417d52:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
  417d56:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
  417d5a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
  417d5e:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
  417d62:	ea54 0305 	orrs.w	r3, r4, r5
  417d66:	d101      	bne.n	417d6c <_ntoa_long_long+0x28>
        flags &= ~FLAGS_HASH;
  417d68:	f02a 0a10 	bic.w	sl, sl, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
  417d6c:	f41a 6680 	ands.w	r6, sl, #1024	; 0x400
  417d70:	d024      	beq.n	417dbc <_ntoa_long_long+0x78>
  417d72:	ea54 0305 	orrs.w	r3, r4, r5
  417d76:	d031      	beq.n	417ddc <_ntoa_long_long+0x98>
  417d78:	2600      	movs	r6, #0
  417d7a:	e01f      	b.n	417dbc <_ntoa_long_long+0x78>
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  417d7c:	f01a 0f20 	tst.w	sl, #32
  417d80:	d02a      	beq.n	417dd8 <_ntoa_long_long+0x94>
  417d82:	2241      	movs	r2, #65	; 0x41
  417d84:	441a      	add	r2, r3
  417d86:	b2d2      	uxtb	r2, r2
  417d88:	3a0a      	subs	r2, #10
  417d8a:	b2d2      	uxtb	r2, r2
  417d8c:	ab14      	add	r3, sp, #80	; 0x50
  417d8e:	441e      	add	r6, r3
  417d90:	f806 2c20 	strb.w	r2, [r6, #-32]
            value /= base;
  417d94:	4642      	mov	r2, r8
  417d96:	464b      	mov	r3, r9
  417d98:	4620      	mov	r0, r4
  417d9a:	4629      	mov	r1, r5
  417d9c:	4c1b      	ldr	r4, [pc, #108]	; (417e0c <_ntoa_long_long+0xc8>)
  417d9e:	47a0      	blx	r4
  417da0:	4604      	mov	r4, r0
  417da2:	460d      	mov	r5, r1
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
  417da4:	ea50 0301 	orrs.w	r3, r0, r1
  417da8:	bf14      	ite	ne
  417daa:	2301      	movne	r3, #1
  417dac:	2300      	moveq	r3, #0
  417dae:	2f1f      	cmp	r7, #31
  417db0:	bf8c      	ite	hi
  417db2:	2300      	movhi	r3, #0
  417db4:	f003 0301 	andls.w	r3, r3, #1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  417db8:	463e      	mov	r6, r7
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
  417dba:	b183      	cbz	r3, 417dde <_ntoa_long_long+0x9a>
            const char digit = (char)(value % base);
  417dbc:	4642      	mov	r2, r8
  417dbe:	464b      	mov	r3, r9
  417dc0:	4620      	mov	r0, r4
  417dc2:	4629      	mov	r1, r5
  417dc4:	4f11      	ldr	r7, [pc, #68]	; (417e0c <_ntoa_long_long+0xc8>)
  417dc6:	47b8      	blx	r7
  417dc8:	b2d3      	uxtb	r3, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  417dca:	1c77      	adds	r7, r6, #1
  417dcc:	2b09      	cmp	r3, #9
  417dce:	d8d5      	bhi.n	417d7c <_ntoa_long_long+0x38>
  417dd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
  417dd4:	b2d2      	uxtb	r2, r2
  417dd6:	e7d9      	b.n	417d8c <_ntoa_long_long+0x48>
  417dd8:	2261      	movs	r2, #97	; 0x61
  417dda:	e7d3      	b.n	417d84 <_ntoa_long_long+0x40>
    size_t len = 0U;
  417ddc:	2700      	movs	r7, #0
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
  417dde:	f8cd a018 	str.w	sl, [sp, #24]
  417de2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  417de4:	9305      	str	r3, [sp, #20]
  417de6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  417de8:	9304      	str	r3, [sp, #16]
  417dea:	f8cd 800c 	str.w	r8, [sp, #12]
  417dee:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
  417df2:	9302      	str	r3, [sp, #8]
  417df4:	9701      	str	r7, [sp, #4]
  417df6:	ab0c      	add	r3, sp, #48	; 0x30
  417df8:	9300      	str	r3, [sp, #0]
  417dfa:	465b      	mov	r3, fp
  417dfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  417dfe:	990a      	ldr	r1, [sp, #40]	; 0x28
  417e00:	9809      	ldr	r0, [sp, #36]	; 0x24
  417e02:	4c03      	ldr	r4, [pc, #12]	; (417e10 <_ntoa_long_long+0xcc>)
  417e04:	47a0      	blx	r4
}
  417e06:	b015      	add	sp, #84	; 0x54
  417e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  417e0c:	00427ca9 	.word	0x00427ca9
  417e10:	00417b79 	.word	0x00417b79

00417e14 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
{
  417e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  417e18:	b08f      	sub	sp, #60	; 0x3c
  417e1a:	4606      	mov	r6, r0
  417e1c:	920a      	str	r2, [sp, #40]	; 0x28
  417e1e:	930d      	str	r3, [sp, #52]	; 0x34
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if(!buffer) {
  417e20:	910b      	str	r1, [sp, #44]	; 0x2c
  417e22:	b189      	cbz	r1, 417e48 <_vsnprintf+0x34>
                    format++;
                    break;
                }

            case '%' :
                out('%', buffer, idx++, maxlen);
  417e24:	2500      	movs	r5, #0
    while(*format) {
  417e26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  417e28:	7818      	ldrb	r0, [r3, #0]
  417e2a:	2800      	cmp	r0, #0
  417e2c:	f000 82e5 	beq.w	4183fa <_vsnprintf+0x5e6>
        if(*format != '%') {
  417e30:	2825      	cmp	r0, #37	; 0x25
  417e32:	d00b      	beq.n	417e4c <_vsnprintf+0x38>
            out(*format, buffer, idx++, maxlen);
  417e34:	1c6c      	adds	r4, r5, #1
  417e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  417e38:	462a      	mov	r2, r5
  417e3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  417e3c:	47b0      	blx	r6
            format++;
  417e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  417e40:	3301      	adds	r3, #1
  417e42:	930d      	str	r3, [sp, #52]	; 0x34
            out(*format, buffer, idx++, maxlen);
  417e44:	4625      	mov	r5, r4
            continue;
  417e46:	e7ee      	b.n	417e26 <_vsnprintf+0x12>
        out = _out_null;
  417e48:	4e93      	ldr	r6, [pc, #588]	; (418098 <_vsnprintf+0x284>)
  417e4a:	e7eb      	b.n	417e24 <_vsnprintf+0x10>
            format++;
  417e4c:	3301      	adds	r3, #1
  417e4e:	930d      	str	r3, [sp, #52]	; 0x34
        flags = 0U;
  417e50:	f04f 0900 	mov.w	r9, #0
  417e54:	e006      	b.n	417e64 <_vsnprintf+0x50>
                    flags |= FLAGS_ZEROPAD;
  417e56:	f049 0901 	orr.w	r9, r9, #1
                    format++;
  417e5a:	3201      	adds	r2, #1
  417e5c:	920d      	str	r2, [sp, #52]	; 0x34
                    n = 1U;
  417e5e:	2401      	movs	r4, #1
        } while(n);
  417e60:	2c00      	cmp	r4, #0
  417e62:	d043      	beq.n	417eec <_vsnprintf+0xd8>
            switch(*format) {
  417e64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  417e66:	7813      	ldrb	r3, [r2, #0]
  417e68:	3b20      	subs	r3, #32
  417e6a:	2b10      	cmp	r3, #16
  417e6c:	d83c      	bhi.n	417ee8 <_vsnprintf+0xd4>
  417e6e:	a101      	add	r1, pc, #4	; (adr r1, 417e74 <_vsnprintf+0x60>)
  417e70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  417e74:	00417ed1 	.word	0x00417ed1
  417e78:	00417ee9 	.word	0x00417ee9
  417e7c:	00417ee9 	.word	0x00417ee9
  417e80:	00417edd 	.word	0x00417edd
  417e84:	00417ee9 	.word	0x00417ee9
  417e88:	00417ee9 	.word	0x00417ee9
  417e8c:	00417ee9 	.word	0x00417ee9
  417e90:	00417ee9 	.word	0x00417ee9
  417e94:	00417ee9 	.word	0x00417ee9
  417e98:	00417ee9 	.word	0x00417ee9
  417e9c:	00417ee9 	.word	0x00417ee9
  417ea0:	00417ec5 	.word	0x00417ec5
  417ea4:	00417ee9 	.word	0x00417ee9
  417ea8:	00417eb9 	.word	0x00417eb9
  417eac:	00417ee9 	.word	0x00417ee9
  417eb0:	00417ee9 	.word	0x00417ee9
  417eb4:	00417e57 	.word	0x00417e57
                    flags |= FLAGS_LEFT;
  417eb8:	f049 0902 	orr.w	r9, r9, #2
                    format++;
  417ebc:	3201      	adds	r2, #1
  417ebe:	920d      	str	r2, [sp, #52]	; 0x34
                    n = 1U;
  417ec0:	2401      	movs	r4, #1
                    break;
  417ec2:	e7cd      	b.n	417e60 <_vsnprintf+0x4c>
                    flags |= FLAGS_PLUS;
  417ec4:	f049 0904 	orr.w	r9, r9, #4
                    format++;
  417ec8:	3201      	adds	r2, #1
  417eca:	920d      	str	r2, [sp, #52]	; 0x34
                    n = 1U;
  417ecc:	2401      	movs	r4, #1
                    break;
  417ece:	e7c7      	b.n	417e60 <_vsnprintf+0x4c>
                    flags |= FLAGS_SPACE;
  417ed0:	f049 0908 	orr.w	r9, r9, #8
                    format++;
  417ed4:	3201      	adds	r2, #1
  417ed6:	920d      	str	r2, [sp, #52]	; 0x34
                    n = 1U;
  417ed8:	2401      	movs	r4, #1
                    break;
  417eda:	e7c1      	b.n	417e60 <_vsnprintf+0x4c>
                    flags |= FLAGS_HASH;
  417edc:	f049 0910 	orr.w	r9, r9, #16
                    format++;
  417ee0:	3201      	adds	r2, #1
  417ee2:	920d      	str	r2, [sp, #52]	; 0x34
                    n = 1U;
  417ee4:	2401      	movs	r4, #1
                    break;
  417ee6:	e7bb      	b.n	417e60 <_vsnprintf+0x4c>
                    n = 0U;
  417ee8:	2400      	movs	r4, #0
  417eea:	e7b9      	b.n	417e60 <_vsnprintf+0x4c>
        if(_is_digit(*format)) {
  417eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  417eee:	781a      	ldrb	r2, [r3, #0]
    return (ch >= '0') && (ch <= '9');
  417ef0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
  417ef4:	b2db      	uxtb	r3, r3
        if(_is_digit(*format)) {
  417ef6:	2b09      	cmp	r3, #9
  417ef8:	d917      	bls.n	417f2a <_vsnprintf+0x116>
        else if(*format == '*') {
  417efa:	2a2a      	cmp	r2, #42	; 0x2a
  417efc:	d01a      	beq.n	417f34 <_vsnprintf+0x120>
        width = 0U;
  417efe:	46a0      	mov	r8, r4
        if(*format == '.') {
  417f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  417f02:	781a      	ldrb	r2, [r3, #0]
  417f04:	2a2e      	cmp	r2, #46	; 0x2e
  417f06:	d025      	beq.n	417f54 <_vsnprintf+0x140>
        switch(*format) {
  417f08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  417f0a:	7813      	ldrb	r3, [r2, #0]
  417f0c:	3b68      	subs	r3, #104	; 0x68
  417f0e:	2b12      	cmp	r3, #18
  417f10:	d85b      	bhi.n	417fca <_vsnprintf+0x1b6>
  417f12:	e8df f003 	tbb	[pc, r3]
  417f16:	5a48      	.short	0x5a48
  417f18:	5a3a5ab7 	.word	0x5a3a5ab7
  417f1c:	5a5a5a5a 	.word	0x5a5a5a5a
  417f20:	5a565a5a 	.word	0x5a565a5a
  417f24:	5a5a5a5a 	.word	0x5a5a5a5a
  417f28:	bc          	.byte	0xbc
  417f29:	00          	.byte	0x00
            width = _atoi(&format);
  417f2a:	a80d      	add	r0, sp, #52	; 0x34
  417f2c:	4b5b      	ldr	r3, [pc, #364]	; (41809c <_vsnprintf+0x288>)
  417f2e:	4798      	blx	r3
  417f30:	4680      	mov	r8, r0
  417f32:	e7e5      	b.n	417f00 <_vsnprintf+0xec>
            const int w = va_arg(va, int);
  417f34:	9b18      	ldr	r3, [sp, #96]	; 0x60
  417f36:	1d1a      	adds	r2, r3, #4
  417f38:	9218      	str	r2, [sp, #96]	; 0x60
  417f3a:	681b      	ldr	r3, [r3, #0]
            if(w < 0) {
  417f3c:	2b00      	cmp	r3, #0
  417f3e:	db04      	blt.n	417f4a <_vsnprintf+0x136>
                width = (unsigned int)w;
  417f40:	4698      	mov	r8, r3
            format++;
  417f42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  417f44:	3301      	adds	r3, #1
  417f46:	930d      	str	r3, [sp, #52]	; 0x34
  417f48:	e7da      	b.n	417f00 <_vsnprintf+0xec>
                flags |= FLAGS_LEFT;    // reverse padding
  417f4a:	f049 0902 	orr.w	r9, r9, #2
                width = (unsigned int) - w;
  417f4e:	f1c3 0800 	rsb	r8, r3, #0
  417f52:	e7f6      	b.n	417f42 <_vsnprintf+0x12e>
            flags |= FLAGS_PRECISION;
  417f54:	f449 6980 	orr.w	r9, r9, #1024	; 0x400
            format++;
  417f58:	1c5a      	adds	r2, r3, #1
  417f5a:	920d      	str	r2, [sp, #52]	; 0x34
            if(_is_digit(*format)) {
  417f5c:	785a      	ldrb	r2, [r3, #1]
    return (ch >= '0') && (ch <= '9');
  417f5e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
  417f62:	b2db      	uxtb	r3, r3
            if(_is_digit(*format)) {
  417f64:	2b09      	cmp	r3, #9
  417f66:	d90b      	bls.n	417f80 <_vsnprintf+0x16c>
            else if(*format == '*') {
  417f68:	2a2a      	cmp	r2, #42	; 0x2a
  417f6a:	d1cd      	bne.n	417f08 <_vsnprintf+0xf4>
                const int prec = (int)va_arg(va, int);
  417f6c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  417f6e:	1d1a      	adds	r2, r3, #4
  417f70:	9218      	str	r2, [sp, #96]	; 0x60
  417f72:	681c      	ldr	r4, [r3, #0]
                precision = prec > 0 ? (unsigned int)prec : 0U;
  417f74:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
                format++;
  417f78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  417f7a:	3301      	adds	r3, #1
  417f7c:	930d      	str	r3, [sp, #52]	; 0x34
  417f7e:	e7c3      	b.n	417f08 <_vsnprintf+0xf4>
                precision = _atoi(&format);
  417f80:	a80d      	add	r0, sp, #52	; 0x34
  417f82:	4b46      	ldr	r3, [pc, #280]	; (41809c <_vsnprintf+0x288>)
  417f84:	4798      	blx	r3
  417f86:	4604      	mov	r4, r0
  417f88:	e7be      	b.n	417f08 <_vsnprintf+0xf4>
                flags |= FLAGS_LONG;
  417f8a:	f449 7180 	orr.w	r1, r9, #256	; 0x100
                format++;
  417f8e:	1c53      	adds	r3, r2, #1
  417f90:	930d      	str	r3, [sp, #52]	; 0x34
                if(*format == 'l') {
  417f92:	7852      	ldrb	r2, [r2, #1]
  417f94:	2a6c      	cmp	r2, #108	; 0x6c
  417f96:	d001      	beq.n	417f9c <_vsnprintf+0x188>
                flags |= FLAGS_LONG;
  417f98:	4689      	mov	r9, r1
  417f9a:	e016      	b.n	417fca <_vsnprintf+0x1b6>
                    flags |= FLAGS_LONG_LONG;
  417f9c:	f449 7940 	orr.w	r9, r9, #768	; 0x300
                    format++;
  417fa0:	3301      	adds	r3, #1
  417fa2:	930d      	str	r3, [sp, #52]	; 0x34
  417fa4:	e011      	b.n	417fca <_vsnprintf+0x1b6>
                flags |= FLAGS_SHORT;
  417fa6:	f049 0180 	orr.w	r1, r9, #128	; 0x80
                format++;
  417faa:	1c53      	adds	r3, r2, #1
  417fac:	930d      	str	r3, [sp, #52]	; 0x34
                if(*format == 'h') {
  417fae:	7852      	ldrb	r2, [r2, #1]
  417fb0:	2a68      	cmp	r2, #104	; 0x68
  417fb2:	d001      	beq.n	417fb8 <_vsnprintf+0x1a4>
                flags |= FLAGS_SHORT;
  417fb4:	4689      	mov	r9, r1
  417fb6:	e008      	b.n	417fca <_vsnprintf+0x1b6>
                    flags |= FLAGS_CHAR;
  417fb8:	f049 09c0 	orr.w	r9, r9, #192	; 0xc0
                    format++;
  417fbc:	3301      	adds	r3, #1
  417fbe:	930d      	str	r3, [sp, #52]	; 0x34
  417fc0:	e003      	b.n	417fca <_vsnprintf+0x1b6>
                flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
  417fc2:	f449 7980 	orr.w	r9, r9, #256	; 0x100
                format++;
  417fc6:	3201      	adds	r2, #1
  417fc8:	920d      	str	r2, [sp, #52]	; 0x34
        switch(*format) {
  417fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  417fcc:	7818      	ldrb	r0, [r3, #0]
  417fce:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
  417fd2:	2b53      	cmp	r3, #83	; 0x53
  417fd4:	f200 8207 	bhi.w	4183e6 <_vsnprintf+0x5d2>
  417fd8:	e8df f013 	tbh	[pc, r3, lsl #1]
  417fdc:	020501fa 	.word	0x020501fa
  417fe0:	02050205 	.word	0x02050205
  417fe4:	02050205 	.word	0x02050205
  417fe8:	02050205 	.word	0x02050205
  417fec:	02050205 	.word	0x02050205
  417ff0:	02050205 	.word	0x02050205
  417ff4:	02050205 	.word	0x02050205
  417ff8:	02050205 	.word	0x02050205
  417ffc:	02050205 	.word	0x02050205
  418000:	02050205 	.word	0x02050205
  418004:	02050205 	.word	0x02050205
  418008:	02050205 	.word	0x02050205
  41800c:	02050205 	.word	0x02050205
  418010:	02050205 	.word	0x02050205
  418014:	02050205 	.word	0x02050205
  418018:	02050205 	.word	0x02050205
  41801c:	02050205 	.word	0x02050205
  418020:	02050205 	.word	0x02050205
  418024:	02050205 	.word	0x02050205
  418028:	02050205 	.word	0x02050205
  41802c:	02050205 	.word	0x02050205
  418030:	02050205 	.word	0x02050205
  418034:	02050205 	.word	0x02050205
  418038:	02050205 	.word	0x02050205
  41803c:	02050205 	.word	0x02050205
  418040:	00620205 	.word	0x00620205
  418044:	02050205 	.word	0x02050205
  418048:	02050205 	.word	0x02050205
  41804c:	02050205 	.word	0x02050205
  418050:	02050205 	.word	0x02050205
  418054:	00620205 	.word	0x00620205
  418058:	00620155 	.word	0x00620155
  41805c:	02050205 	.word	0x02050205
  418060:	02050205 	.word	0x02050205
  418064:	02050062 	.word	0x02050062
  418068:	02050205 	.word	0x02050205
  41806c:	02050205 	.word	0x02050205
  418070:	01e00062 	.word	0x01e00062
  418074:	02050205 	.word	0x02050205
  418078:	02050187 	.word	0x02050187
  41807c:	02050062 	.word	0x02050062
  418080:	00620205 	.word	0x00620205
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
  418084:	f449 7900 	orr.w	r9, r9, #512	; 0x200
                format++;
  418088:	3201      	adds	r2, #1
  41808a:	920d      	str	r2, [sp, #52]	; 0x34
                break;
  41808c:	e79d      	b.n	417fca <_vsnprintf+0x1b6>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
  41808e:	f449 7980 	orr.w	r9, r9, #256	; 0x100
                format++;
  418092:	3201      	adds	r2, #1
  418094:	920d      	str	r2, [sp, #52]	; 0x34
                break;
  418096:	e798      	b.n	417fca <_vsnprintf+0x1b6>
  418098:	00417add 	.word	0x00417add
  41809c:	00417adf 	.word	0x00417adf
                    if(*format == 'x' || *format == 'X') {
  4180a0:	2858      	cmp	r0, #88	; 0x58
  4180a2:	bf18      	it	ne
  4180a4:	2878      	cmpne	r0, #120	; 0x78
  4180a6:	d007      	beq.n	4180b8 <_vsnprintf+0x2a4>
                    else if(*format == 'o') {
  4180a8:	286f      	cmp	r0, #111	; 0x6f
  4180aa:	d040      	beq.n	41812e <_vsnprintf+0x31a>
                    else if(*format == 'b') {
  4180ac:	2862      	cmp	r0, #98	; 0x62
  4180ae:	d040      	beq.n	418132 <_vsnprintf+0x31e>
                        flags &= ~FLAGS_HASH;   // no hash for dec format
  4180b0:	f029 0910 	bic.w	r9, r9, #16
                        base = 10U;
  4180b4:	210a      	movs	r1, #10
  4180b6:	e000      	b.n	4180ba <_vsnprintf+0x2a6>
                        base = 16U;
  4180b8:	2110      	movs	r1, #16
                    if(*format == 'X') {
  4180ba:	2858      	cmp	r0, #88	; 0x58
  4180bc:	d03b      	beq.n	418136 <_vsnprintf+0x322>
                    if((*format != 'i') && (*format != 'd')) {
  4180be:	2869      	cmp	r0, #105	; 0x69
  4180c0:	bf18      	it	ne
  4180c2:	2864      	cmpne	r0, #100	; 0x64
  4180c4:	d001      	beq.n	4180ca <_vsnprintf+0x2b6>
                        flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
  4180c6:	f029 090c 	bic.w	r9, r9, #12
                    if(flags & FLAGS_PRECISION) {
  4180ca:	f419 6f80 	tst.w	r9, #1024	; 0x400
  4180ce:	d001      	beq.n	4180d4 <_vsnprintf+0x2c0>
                        flags &= ~FLAGS_ZEROPAD;
  4180d0:	f029 0901 	bic.w	r9, r9, #1
                    if((*format == 'i') || (*format == 'd')) {
  4180d4:	2864      	cmp	r0, #100	; 0x64
  4180d6:	bf18      	it	ne
  4180d8:	2869      	cmpne	r0, #105	; 0x69
  4180da:	d178      	bne.n	4181ce <_vsnprintf+0x3ba>
                        if(flags & FLAGS_LONG_LONG) {
  4180dc:	f419 7f00 	tst.w	r9, #512	; 0x200
  4180e0:	d12c      	bne.n	41813c <_vsnprintf+0x328>
                        else if(flags & FLAGS_LONG) {
  4180e2:	f419 7f80 	tst.w	r9, #256	; 0x100
  4180e6:	d14f      	bne.n	418188 <_vsnprintf+0x374>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
  4180e8:	f019 0f40 	tst.w	r9, #64	; 0x40
  4180ec:	d165      	bne.n	4181ba <_vsnprintf+0x3a6>
                                                                                                                                       int) : va_arg(va, int);
  4180ee:	f019 0f80 	tst.w	r9, #128	; 0x80
  4180f2:	d067      	beq.n	4181c4 <_vsnprintf+0x3b0>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
  4180f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4180f6:	1d1a      	adds	r2, r3, #4
  4180f8:	9218      	str	r2, [sp, #96]	; 0x60
  4180fa:	f9b3 3000 	ldrsh.w	r3, [r3]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
  4180fe:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  418102:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
  418106:	0fdb      	lsrs	r3, r3, #31
  418108:	f8cd 9014 	str.w	r9, [sp, #20]
  41810c:	f8cd 8010 	str.w	r8, [sp, #16]
  418110:	9403      	str	r4, [sp, #12]
  418112:	9102      	str	r1, [sp, #8]
  418114:	9301      	str	r3, [sp, #4]
  418116:	9200      	str	r2, [sp, #0]
  418118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41811a:	462a      	mov	r2, r5
  41811c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41811e:	4630      	mov	r0, r6
  418120:	4c9c      	ldr	r4, [pc, #624]	; (418394 <_vsnprintf+0x580>)
  418122:	47a0      	blx	r4
  418124:	4605      	mov	r5, r0
                    format++;
  418126:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  418128:	3301      	adds	r3, #1
  41812a:	930d      	str	r3, [sp, #52]	; 0x34
                    break;
  41812c:	e67b      	b.n	417e26 <_vsnprintf+0x12>
                        base =  8U;
  41812e:	2108      	movs	r1, #8
  418130:	e7c3      	b.n	4180ba <_vsnprintf+0x2a6>
                        base =  2U;
  418132:	2102      	movs	r1, #2
  418134:	e7c1      	b.n	4180ba <_vsnprintf+0x2a6>
                        flags |= FLAGS_UPPERCASE;
  418136:	f049 0920 	orr.w	r9, r9, #32
  41813a:	e7c0      	b.n	4180be <_vsnprintf+0x2aa>
                            const long long value = va_arg(va, long long);
  41813c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  41813e:	3307      	adds	r3, #7
  418140:	f023 0007 	bic.w	r0, r3, #7
  418144:	f100 0308 	add.w	r3, r0, #8
  418148:	9318      	str	r3, [sp, #96]	; 0x60
  41814a:	6847      	ldr	r7, [r0, #4]
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
  41814c:	6802      	ldr	r2, [r0, #0]
  41814e:	463b      	mov	r3, r7
  418150:	2a00      	cmp	r2, #0
  418152:	f177 0000 	sbcs.w	r0, r7, #0
  418156:	db13      	blt.n	418180 <_vsnprintf+0x36c>
  418158:	0fff      	lsrs	r7, r7, #31
  41815a:	f8cd 9020 	str.w	r9, [sp, #32]
  41815e:	f8cd 801c 	str.w	r8, [sp, #28]
  418162:	9406      	str	r4, [sp, #24]
  418164:	9104      	str	r1, [sp, #16]
  418166:	2100      	movs	r1, #0
  418168:	9105      	str	r1, [sp, #20]
  41816a:	9702      	str	r7, [sp, #8]
  41816c:	e9cd 2300 	strd	r2, r3, [sp]
  418170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  418172:	462a      	mov	r2, r5
  418174:	990b      	ldr	r1, [sp, #44]	; 0x2c
  418176:	4630      	mov	r0, r6
  418178:	4c87      	ldr	r4, [pc, #540]	; (418398 <_vsnprintf+0x584>)
  41817a:	47a0      	blx	r4
  41817c:	4605      	mov	r5, r0
  41817e:	e7d2      	b.n	418126 <_vsnprintf+0x312>
  418180:	4252      	negs	r2, r2
  418182:	eb67 0347 	sbc.w	r3, r7, r7, lsl #1
  418186:	e7e7      	b.n	418158 <_vsnprintf+0x344>
                            const long value = va_arg(va, long);
  418188:	9b18      	ldr	r3, [sp, #96]	; 0x60
  41818a:	1d1a      	adds	r2, r3, #4
  41818c:	9218      	str	r2, [sp, #96]	; 0x60
  41818e:	681b      	ldr	r3, [r3, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision,
  418190:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  418194:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
  418198:	0fdb      	lsrs	r3, r3, #31
  41819a:	f8cd 9014 	str.w	r9, [sp, #20]
  41819e:	f8cd 8010 	str.w	r8, [sp, #16]
  4181a2:	9403      	str	r4, [sp, #12]
  4181a4:	9102      	str	r1, [sp, #8]
  4181a6:	9301      	str	r3, [sp, #4]
  4181a8:	9200      	str	r2, [sp, #0]
  4181aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4181ac:	462a      	mov	r2, r5
  4181ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4181b0:	4630      	mov	r0, r6
  4181b2:	4c78      	ldr	r4, [pc, #480]	; (418394 <_vsnprintf+0x580>)
  4181b4:	47a0      	blx	r4
  4181b6:	4605      	mov	r5, r0
  4181b8:	e7b5      	b.n	418126 <_vsnprintf+0x312>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
  4181ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4181bc:	1d1a      	adds	r2, r3, #4
  4181be:	9218      	str	r2, [sp, #96]	; 0x60
  4181c0:	781b      	ldrb	r3, [r3, #0]
  4181c2:	e79c      	b.n	4180fe <_vsnprintf+0x2ea>
                                                                                                                                       int) : va_arg(va, int);
  4181c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4181c6:	1d1a      	adds	r2, r3, #4
  4181c8:	9218      	str	r2, [sp, #96]	; 0x60
  4181ca:	681b      	ldr	r3, [r3, #0]
  4181cc:	e797      	b.n	4180fe <_vsnprintf+0x2ea>
                        if(flags & FLAGS_LONG_LONG) {
  4181ce:	f419 7f00 	tst.w	r9, #512	; 0x200
  4181d2:	d11d      	bne.n	418210 <_vsnprintf+0x3fc>
                        else if(flags & FLAGS_LONG) {
  4181d4:	f419 7f80 	tst.w	r9, #256	; 0x100
  4181d8:	d136      	bne.n	418248 <_vsnprintf+0x434>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
  4181da:	f019 0f40 	tst.w	r9, #64	; 0x40
  4181de:	d148      	bne.n	418272 <_vsnprintf+0x45e>
  4181e0:	f019 0f80 	tst.w	r9, #128	; 0x80
  4181e4:	d04a      	beq.n	41827c <_vsnprintf+0x468>
  4181e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4181e8:	1d1a      	adds	r2, r3, #4
  4181ea:	9218      	str	r2, [sp, #96]	; 0x60
  4181ec:	881b      	ldrh	r3, [r3, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
  4181ee:	f8cd 9014 	str.w	r9, [sp, #20]
  4181f2:	f8cd 8010 	str.w	r8, [sp, #16]
  4181f6:	9403      	str	r4, [sp, #12]
  4181f8:	9102      	str	r1, [sp, #8]
  4181fa:	2200      	movs	r2, #0
  4181fc:	9201      	str	r2, [sp, #4]
  4181fe:	9300      	str	r3, [sp, #0]
  418200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  418202:	462a      	mov	r2, r5
  418204:	990b      	ldr	r1, [sp, #44]	; 0x2c
  418206:	4630      	mov	r0, r6
  418208:	4c62      	ldr	r4, [pc, #392]	; (418394 <_vsnprintf+0x580>)
  41820a:	47a0      	blx	r4
  41820c:	4605      	mov	r5, r0
  41820e:	e78a      	b.n	418126 <_vsnprintf+0x312>
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
  418210:	9b18      	ldr	r3, [sp, #96]	; 0x60
  418212:	3307      	adds	r3, #7
  418214:	f023 0307 	bic.w	r3, r3, #7
  418218:	f103 0208 	add.w	r2, r3, #8
  41821c:	9218      	str	r2, [sp, #96]	; 0x60
  41821e:	e9d3 2300 	ldrd	r2, r3, [r3]
  418222:	2000      	movs	r0, #0
  418224:	f8cd 9020 	str.w	r9, [sp, #32]
  418228:	f8cd 801c 	str.w	r8, [sp, #28]
  41822c:	9406      	str	r4, [sp, #24]
  41822e:	9104      	str	r1, [sp, #16]
  418230:	9005      	str	r0, [sp, #20]
  418232:	9002      	str	r0, [sp, #8]
  418234:	e9cd 2300 	strd	r2, r3, [sp]
  418238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41823a:	462a      	mov	r2, r5
  41823c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41823e:	4630      	mov	r0, r6
  418240:	4c55      	ldr	r4, [pc, #340]	; (418398 <_vsnprintf+0x584>)
  418242:	47a0      	blx	r4
  418244:	4605      	mov	r5, r0
  418246:	e76e      	b.n	418126 <_vsnprintf+0x312>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
  418248:	9b18      	ldr	r3, [sp, #96]	; 0x60
  41824a:	1d1a      	adds	r2, r3, #4
  41824c:	9218      	str	r2, [sp, #96]	; 0x60
  41824e:	681b      	ldr	r3, [r3, #0]
  418250:	f8cd 9014 	str.w	r9, [sp, #20]
  418254:	f8cd 8010 	str.w	r8, [sp, #16]
  418258:	9403      	str	r4, [sp, #12]
  41825a:	9102      	str	r1, [sp, #8]
  41825c:	2200      	movs	r2, #0
  41825e:	9201      	str	r2, [sp, #4]
  418260:	9300      	str	r3, [sp, #0]
  418262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  418264:	462a      	mov	r2, r5
  418266:	990b      	ldr	r1, [sp, #44]	; 0x2c
  418268:	4630      	mov	r0, r6
  41826a:	4c4a      	ldr	r4, [pc, #296]	; (418394 <_vsnprintf+0x580>)
  41826c:	47a0      	blx	r4
  41826e:	4605      	mov	r5, r0
  418270:	e759      	b.n	418126 <_vsnprintf+0x312>
                            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va,
  418272:	9b18      	ldr	r3, [sp, #96]	; 0x60
  418274:	1d1a      	adds	r2, r3, #4
  418276:	9218      	str	r2, [sp, #96]	; 0x60
  418278:	781b      	ldrb	r3, [r3, #0]
  41827a:	e7b8      	b.n	4181ee <_vsnprintf+0x3da>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
  41827c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  41827e:	1d1a      	adds	r2, r3, #4
  418280:	9218      	str	r2, [sp, #96]	; 0x60
  418282:	681b      	ldr	r3, [r3, #0]
  418284:	e7b3      	b.n	4181ee <_vsnprintf+0x3da>
                    if(!(flags & FLAGS_LEFT)) {
  418286:	f019 0902 	ands.w	r9, r9, #2
  41828a:	d01d      	beq.n	4182c8 <_vsnprintf+0x4b4>
                    unsigned int l = 1U;
  41828c:	2401      	movs	r4, #1
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
  41828e:	9818      	ldr	r0, [sp, #96]	; 0x60
  418290:	1d03      	adds	r3, r0, #4
  418292:	9318      	str	r3, [sp, #96]	; 0x60
  418294:	1c6f      	adds	r7, r5, #1
  418296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  418298:	462a      	mov	r2, r5
  41829a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41829c:	7800      	ldrb	r0, [r0, #0]
  41829e:	47b0      	blx	r6
                    if(flags & FLAGS_LEFT) {
  4182a0:	f1b9 0f00 	cmp.w	r9, #0
  4182a4:	d11f      	bne.n	4182e6 <_vsnprintf+0x4d2>
                    format++;
  4182a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4182a8:	3301      	adds	r3, #1
  4182aa:	930d      	str	r3, [sp, #52]	; 0x34
                    break;
  4182ac:	463d      	mov	r5, r7
  4182ae:	e5ba      	b.n	417e26 <_vsnprintf+0x12>
                            out(' ', buffer, idx++, maxlen);
  4182b0:	1c55      	adds	r5, r2, #1
  4182b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4182b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4182b6:	2020      	movs	r0, #32
  4182b8:	47b0      	blx	r6
                        while(l++ < width) {
  4182ba:	4623      	mov	r3, r4
                            out(' ', buffer, idx++, maxlen);
  4182bc:	462a      	mov	r2, r5
                        while(l++ < width) {
  4182be:	1c5c      	adds	r4, r3, #1
  4182c0:	4598      	cmp	r8, r3
  4182c2:	d8f5      	bhi.n	4182b0 <_vsnprintf+0x49c>
  4182c4:	4615      	mov	r5, r2
  4182c6:	e7e2      	b.n	41828e <_vsnprintf+0x47a>
  4182c8:	2301      	movs	r3, #1
  4182ca:	462a      	mov	r2, r5
  4182cc:	e7f7      	b.n	4182be <_vsnprintf+0x4aa>
                            out(' ', buffer, idx++, maxlen);
  4182ce:	1c57      	adds	r7, r2, #1
  4182d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4182d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4182d4:	2020      	movs	r0, #32
  4182d6:	47b0      	blx	r6
                        while(l++ < width) {
  4182d8:	462c      	mov	r4, r5
                            out(' ', buffer, idx++, maxlen);
  4182da:	463a      	mov	r2, r7
                        while(l++ < width) {
  4182dc:	1c65      	adds	r5, r4, #1
  4182de:	45a0      	cmp	r8, r4
  4182e0:	d8f5      	bhi.n	4182ce <_vsnprintf+0x4ba>
  4182e2:	4617      	mov	r7, r2
  4182e4:	e7df      	b.n	4182a6 <_vsnprintf+0x492>
  4182e6:	463a      	mov	r2, r7
  4182e8:	e7f8      	b.n	4182dc <_vsnprintf+0x4c8>
                    const char * p = va_arg(va, char *);
  4182ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4182ec:	1d1a      	adds	r2, r3, #4
  4182ee:	9218      	str	r2, [sp, #96]	; 0x60
  4182f0:	681f      	ldr	r7, [r3, #0]
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
  4182f2:	b114      	cbz	r4, 4182fa <_vsnprintf+0x4e6>
  4182f4:	4622      	mov	r2, r4
  4182f6:	463b      	mov	r3, r7
  4182f8:	e004      	b.n	418304 <_vsnprintf+0x4f0>
  4182fa:	f04f 32ff 	mov.w	r2, #4294967295
  4182fe:	e7fa      	b.n	4182f6 <_vsnprintf+0x4e2>
    for(s = str; *s && maxsize--; ++s);
  418300:	3301      	adds	r3, #1
  418302:	460a      	mov	r2, r1
  418304:	7819      	ldrb	r1, [r3, #0]
  418306:	b111      	cbz	r1, 41830e <_vsnprintf+0x4fa>
  418308:	1e51      	subs	r1, r2, #1
  41830a:	2a00      	cmp	r2, #0
  41830c:	d1f8      	bne.n	418300 <_vsnprintf+0x4ec>
    return (unsigned int)(s - str);
  41830e:	1bdb      	subs	r3, r3, r7
                    if(flags & FLAGS_PRECISION) {
  418310:	f419 6b80 	ands.w	fp, r9, #1024	; 0x400
  418314:	d002      	beq.n	41831c <_vsnprintf+0x508>
                        l = (l < precision ? l : precision);
  418316:	42a3      	cmp	r3, r4
  418318:	bf28      	it	cs
  41831a:	4623      	movcs	r3, r4
                    if(!(flags & FLAGS_LEFT)) {
  41831c:	f019 0202 	ands.w	r2, r9, #2
  418320:	920c      	str	r2, [sp, #48]	; 0x30
  418322:	d011      	beq.n	418348 <_vsnprintf+0x534>
  418324:	4699      	mov	r9, r3
  418326:	462a      	mov	r2, r5
  418328:	465d      	mov	r5, fp
  41832a:	e017      	b.n	41835c <_vsnprintf+0x548>
                            out(' ', buffer, idx++, maxlen);
  41832c:	f102 0a01 	add.w	sl, r2, #1
  418330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  418332:	990b      	ldr	r1, [sp, #44]	; 0x2c
  418334:	2020      	movs	r0, #32
  418336:	47b0      	blx	r6
                        while(l++ < width) {
  418338:	464b      	mov	r3, r9
                            out(' ', buffer, idx++, maxlen);
  41833a:	4652      	mov	r2, sl
                        while(l++ < width) {
  41833c:	f103 0901 	add.w	r9, r3, #1
  418340:	4598      	cmp	r8, r3
  418342:	d8f3      	bhi.n	41832c <_vsnprintf+0x518>
  418344:	465d      	mov	r5, fp
  418346:	e009      	b.n	41835c <_vsnprintf+0x548>
  418348:	462a      	mov	r2, r5
  41834a:	e7f7      	b.n	41833c <_vsnprintf+0x528>
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  41834c:	461c      	mov	r4, r3
                        out(*(p++), buffer, idx++, maxlen);
  41834e:	3701      	adds	r7, #1
  418350:	f102 0a01 	add.w	sl, r2, #1
  418354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  418356:	990b      	ldr	r1, [sp, #44]	; 0x2c
  418358:	47b0      	blx	r6
  41835a:	4652      	mov	r2, sl
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  41835c:	7838      	ldrb	r0, [r7, #0]
  41835e:	b120      	cbz	r0, 41836a <_vsnprintf+0x556>
  418360:	2d00      	cmp	r5, #0
  418362:	d0f4      	beq.n	41834e <_vsnprintf+0x53a>
  418364:	1e63      	subs	r3, r4, #1
  418366:	2c00      	cmp	r4, #0
  418368:	d1f0      	bne.n	41834c <_vsnprintf+0x538>
  41836a:	4615      	mov	r5, r2
                    if(flags & FLAGS_LEFT) {
  41836c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  41836e:	b953      	cbnz	r3, 418386 <_vsnprintf+0x572>
                    format++;
  418370:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  418372:	3301      	adds	r3, #1
  418374:	930d      	str	r3, [sp, #52]	; 0x34
                    break;
  418376:	e556      	b.n	417e26 <_vsnprintf+0x12>
                            out(' ', buffer, idx++, maxlen);
  418378:	1c55      	adds	r5, r2, #1
  41837a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41837c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41837e:	2020      	movs	r0, #32
  418380:	47b0      	blx	r6
                        while(l++ < width) {
  418382:	46a1      	mov	r9, r4
                            out(' ', buffer, idx++, maxlen);
  418384:	462a      	mov	r2, r5
                        while(l++ < width) {
  418386:	f109 0401 	add.w	r4, r9, #1
  41838a:	45c8      	cmp	r8, r9
  41838c:	d8f4      	bhi.n	418378 <_vsnprintf+0x564>
  41838e:	4615      	mov	r5, r2
  418390:	e7ee      	b.n	418370 <_vsnprintf+0x55c>
  418392:	bf00      	nop
  418394:	00417ca5 	.word	0x00417ca5
  418398:	00417d45 	.word	0x00417d45
                    flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
  41839c:	f049 0321 	orr.w	r3, r9, #33	; 0x21
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false, 16U, precision, width,
  4183a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
  4183a2:	1d11      	adds	r1, r2, #4
  4183a4:	9118      	str	r1, [sp, #96]	; 0x60
  4183a6:	6812      	ldr	r2, [r2, #0]
  4183a8:	9305      	str	r3, [sp, #20]
  4183aa:	2308      	movs	r3, #8
  4183ac:	9304      	str	r3, [sp, #16]
  4183ae:	9403      	str	r4, [sp, #12]
  4183b0:	2310      	movs	r3, #16
  4183b2:	9302      	str	r3, [sp, #8]
  4183b4:	2300      	movs	r3, #0
  4183b6:	9301      	str	r3, [sp, #4]
  4183b8:	9200      	str	r2, [sp, #0]
  4183ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4183bc:	462a      	mov	r2, r5
  4183be:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4183c0:	4630      	mov	r0, r6
  4183c2:	4c15      	ldr	r4, [pc, #84]	; (418418 <_vsnprintf+0x604>)
  4183c4:	47a0      	blx	r4
  4183c6:	4605      	mov	r5, r0
                    format++;
  4183c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4183ca:	3301      	adds	r3, #1
  4183cc:	930d      	str	r3, [sp, #52]	; 0x34
                    break;
  4183ce:	e52a      	b.n	417e26 <_vsnprintf+0x12>
                out('%', buffer, idx++, maxlen);
  4183d0:	1c6c      	adds	r4, r5, #1
  4183d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4183d4:	462a      	mov	r2, r5
  4183d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4183d8:	2025      	movs	r0, #37	; 0x25
  4183da:	47b0      	blx	r6
                format++;
  4183dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4183de:	3301      	adds	r3, #1
  4183e0:	930d      	str	r3, [sp, #52]	; 0x34
                out('%', buffer, idx++, maxlen);
  4183e2:	4625      	mov	r5, r4
                break;
  4183e4:	e51f      	b.n	417e26 <_vsnprintf+0x12>

            default :
                out(*format, buffer, idx++, maxlen);
  4183e6:	1c6c      	adds	r4, r5, #1
  4183e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4183ea:	462a      	mov	r2, r5
  4183ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4183ee:	47b0      	blx	r6
                format++;
  4183f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4183f2:	3301      	adds	r3, #1
  4183f4:	930d      	str	r3, [sp, #52]	; 0x34
                out(*format, buffer, idx++, maxlen);
  4183f6:	4625      	mov	r5, r4
                break;
  4183f8:	e515      	b.n	417e26 <_vsnprintf+0x12>
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
  4183fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4183fc:	4295      	cmp	r5, r2
  4183fe:	d308      	bcc.n	418412 <_vsnprintf+0x5fe>
  418400:	3a01      	subs	r2, #1
  418402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  418404:	990b      	ldr	r1, [sp, #44]	; 0x2c
  418406:	2000      	movs	r0, #0
  418408:	47b0      	blx	r6

    // return written chars without terminating \0
    return (int)idx;
}
  41840a:	4628      	mov	r0, r5
  41840c:	b00f      	add	sp, #60	; 0x3c
  41840e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
  418412:	462a      	mov	r2, r5
  418414:	e7f5      	b.n	418402 <_vsnprintf+0x5ee>
  418416:	bf00      	nop
  418418:	00417ca5 	.word	0x00417ca5

0041841c <lv_vsnprintf>:
    va_end(va);
    return ret;
}

int lv_vsnprintf(char * buffer, size_t count, const char * format, va_list va)
{
  41841c:	b510      	push	{r4, lr}
  41841e:	b082      	sub	sp, #8
    return _vsnprintf(_out_buffer, buffer, count, format, va);
  418420:	9300      	str	r3, [sp, #0]
  418422:	4613      	mov	r3, r2
  418424:	460a      	mov	r2, r1
  418426:	4601      	mov	r1, r0
  418428:	4802      	ldr	r0, [pc, #8]	; (418434 <lv_vsnprintf+0x18>)
  41842a:	4c03      	ldr	r4, [pc, #12]	; (418438 <lv_vsnprintf+0x1c>)
  41842c:	47a0      	blx	r4
}
  41842e:	b002      	add	sp, #8
  418430:	bd10      	pop	{r4, pc}
  418432:	bf00      	nop
  418434:	00417ad5 	.word	0x00417ad5
  418438:	00417e15 	.word	0x00417e15

0041843c <lv_task_time_remaining>:
 * Find out how much time remains before a task must be run.
 * @param task pointer to lv_task
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
  41843c:	b510      	push	{r4, lr}
  41843e:	4604      	mov	r4, r0
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
  418440:	6840      	ldr	r0, [r0, #4]
  418442:	4b04      	ldr	r3, [pc, #16]	; (418454 <lv_task_time_remaining+0x18>)
  418444:	4798      	blx	r3
    if(elp >= task->period)
  418446:	6823      	ldr	r3, [r4, #0]
  418448:	4298      	cmp	r0, r3
  41844a:	d201      	bcs.n	418450 <lv_task_time_remaining+0x14>
        return 0;
    return task->period - elp;
  41844c:	1a18      	subs	r0, r3, r0
  41844e:	bd10      	pop	{r4, pc}
        return 0;
  418450:	2000      	movs	r0, #0
}
  418452:	bd10      	pop	{r4, pc}
  418454:	00416049 	.word	0x00416049

00418458 <lv_task_create>:
{
  418458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  41845c:	4607      	mov	r7, r0
  41845e:	4688      	mov	r8, r1
  418460:	4615      	mov	r5, r2
  418462:	461e      	mov	r6, r3
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  418464:	4831      	ldr	r0, [pc, #196]	; (41852c <lv_task_create+0xd4>)
  418466:	4b32      	ldr	r3, [pc, #200]	; (418530 <lv_task_create+0xd8>)
  418468:	4798      	blx	r3
    if(NULL == tmp) {
  41846a:	4604      	mov	r4, r0
  41846c:	b338      	cbz	r0, 4184be <lv_task_create+0x66>
            if(tmp->prio <= prio) {
  41846e:	7d23      	ldrb	r3, [r4, #20]
  418470:	f003 0307 	and.w	r3, r3, #7
  418474:	42ab      	cmp	r3, r5
  418476:	dd32      	ble.n	4184de <lv_task_create+0x86>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
  418478:	4621      	mov	r1, r4
  41847a:	482c      	ldr	r0, [pc, #176]	; (41852c <lv_task_create+0xd4>)
  41847c:	4b2d      	ldr	r3, [pc, #180]	; (418534 <lv_task_create+0xdc>)
  41847e:	4798      	blx	r3
        } while(tmp != NULL);
  418480:	4604      	mov	r4, r0
  418482:	2800      	cmp	r0, #0
  418484:	d1f3      	bne.n	41846e <lv_task_create+0x16>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
  418486:	4603      	mov	r3, r0
        if(tmp == NULL) {
  418488:	2b00      	cmp	r3, #0
  41848a:	d03c      	beq.n	418506 <lv_task_create+0xae>
    task_list_changed = true;
  41848c:	f04f 0901 	mov.w	r9, #1
  418490:	4b29      	ldr	r3, [pc, #164]	; (418538 <lv_task_create+0xe0>)
  418492:	f883 9000 	strb.w	r9, [r3]
    new_task->period  = period;
  418496:	f8c4 8000 	str.w	r8, [r4]
    new_task->task_cb = task_xcb;
  41849a:	60a7      	str	r7, [r4, #8]
    new_task->prio    = prio;
  41849c:	7d23      	ldrb	r3, [r4, #20]
  41849e:	f365 0302 	bfi	r3, r5, #0, #3
  4184a2:	7523      	strb	r3, [r4, #20]
    new_task->repeat_count = -1;
  4184a4:	f04f 33ff 	mov.w	r3, #4294967295
  4184a8:	6123      	str	r3, [r4, #16]
    new_task->last_run = lv_tick_get();
  4184aa:	4b24      	ldr	r3, [pc, #144]	; (41853c <lv_task_create+0xe4>)
  4184ac:	4798      	blx	r3
  4184ae:	6060      	str	r0, [r4, #4]
    new_task->user_data = user_data;
  4184b0:	60e6      	str	r6, [r4, #12]
    task_created = true;
  4184b2:	4b23      	ldr	r3, [pc, #140]	; (418540 <lv_task_create+0xe8>)
  4184b4:	f883 9000 	strb.w	r9, [r3]
}
  4184b8:	4620      	mov	r0, r4
  4184ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
  4184be:	481b      	ldr	r0, [pc, #108]	; (41852c <lv_task_create+0xd4>)
  4184c0:	4b20      	ldr	r3, [pc, #128]	; (418544 <lv_task_create+0xec>)
  4184c2:	4798      	blx	r3
  4184c4:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_task);
  4184c6:	4b20      	ldr	r3, [pc, #128]	; (418548 <lv_task_create+0xf0>)
  4184c8:	4798      	blx	r3
  4184ca:	b928      	cbnz	r0, 4184d8 <lv_task_create+0x80>
  4184cc:	4622      	mov	r2, r4
  4184ce:	2300      	movs	r3, #0
  4184d0:	481e      	ldr	r0, [pc, #120]	; (41854c <lv_task_create+0xf4>)
  4184d2:	491f      	ldr	r1, [pc, #124]	; (418550 <lv_task_create+0xf8>)
  4184d4:	4788      	blx	r1
  4184d6:	e7fe      	b.n	4184d6 <lv_task_create+0x7e>
        if(new_task == NULL) return NULL;
  4184d8:	2c00      	cmp	r4, #0
  4184da:	d1d7      	bne.n	41848c <lv_task_create+0x34>
  4184dc:	e7ec      	b.n	4184b8 <lv_task_create+0x60>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
  4184de:	4621      	mov	r1, r4
  4184e0:	4812      	ldr	r0, [pc, #72]	; (41852c <lv_task_create+0xd4>)
  4184e2:	4b1c      	ldr	r3, [pc, #112]	; (418554 <lv_task_create+0xfc>)
  4184e4:	4798      	blx	r3
  4184e6:	4681      	mov	r9, r0
                LV_ASSERT_MEM(new_task);
  4184e8:	4b17      	ldr	r3, [pc, #92]	; (418548 <lv_task_create+0xf0>)
  4184ea:	4798      	blx	r3
  4184ec:	b128      	cbz	r0, 4184fa <lv_task_create+0xa2>
                if(new_task == NULL) return NULL;
  4184ee:	f1b9 0f00 	cmp.w	r9, #0
  4184f2:	d018      	beq.n	418526 <lv_task_create+0xce>
  4184f4:	4623      	mov	r3, r4
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
  4184f6:	464c      	mov	r4, r9
  4184f8:	e7c6      	b.n	418488 <lv_task_create+0x30>
                LV_ASSERT_MEM(new_task);
  4184fa:	464a      	mov	r2, r9
  4184fc:	2300      	movs	r3, #0
  4184fe:	4813      	ldr	r0, [pc, #76]	; (41854c <lv_task_create+0xf4>)
  418500:	4913      	ldr	r1, [pc, #76]	; (418550 <lv_task_create+0xf8>)
  418502:	4788      	blx	r1
  418504:	e7fe      	b.n	418504 <lv_task_create+0xac>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
  418506:	4809      	ldr	r0, [pc, #36]	; (41852c <lv_task_create+0xd4>)
  418508:	4b13      	ldr	r3, [pc, #76]	; (418558 <lv_task_create+0x100>)
  41850a:	4798      	blx	r3
  41850c:	4604      	mov	r4, r0
            LV_ASSERT_MEM(new_task);
  41850e:	4b0e      	ldr	r3, [pc, #56]	; (418548 <lv_task_create+0xf0>)
  418510:	4798      	blx	r3
  418512:	b928      	cbnz	r0, 418520 <lv_task_create+0xc8>
  418514:	4622      	mov	r2, r4
  418516:	2300      	movs	r3, #0
  418518:	480c      	ldr	r0, [pc, #48]	; (41854c <lv_task_create+0xf4>)
  41851a:	490d      	ldr	r1, [pc, #52]	; (418550 <lv_task_create+0xf8>)
  41851c:	4788      	blx	r1
  41851e:	e7fe      	b.n	41851e <lv_task_create+0xc6>
            if(new_task == NULL) return NULL;
  418520:	2c00      	cmp	r4, #0
  418522:	d1b3      	bne.n	41848c <lv_task_create+0x34>
  418524:	e7c8      	b.n	4184b8 <lv_task_create+0x60>
                if(new_task == NULL) return NULL;
  418526:	464c      	mov	r4, r9
  418528:	e7c6      	b.n	4184b8 <lv_task_create+0x60>
  41852a:	bf00      	nop
  41852c:	2043a248 	.word	0x2043a248
  418530:	004170b9 	.word	0x004170b9
  418534:	004170cd 	.word	0x004170cd
  418538:	20414803 	.word	0x20414803
  41853c:	0041602d 	.word	0x0041602d
  418540:	20414801 	.word	0x20414801
  418544:	00417021 	.word	0x00417021
  418548:	00416da9 	.word	0x00416da9
  41854c:	0042e54c 	.word	0x0042e54c
  418550:	00416db5 	.word	0x00416db5
  418554:	004170e9 	.word	0x004170e9
  418558:	0041706d 	.word	0x0041706d

0041855c <lv_task_del>:
{
  41855c:	b510      	push	{r4, lr}
  41855e:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
  418560:	4601      	mov	r1, r0
  418562:	4809      	ldr	r0, [pc, #36]	; (418588 <lv_task_del+0x2c>)
  418564:	4b09      	ldr	r3, [pc, #36]	; (41858c <lv_task_del+0x30>)
  418566:	4798      	blx	r3
    task_list_changed = true;
  418568:	2201      	movs	r2, #1
  41856a:	4b09      	ldr	r3, [pc, #36]	; (418590 <lv_task_del+0x34>)
  41856c:	701a      	strb	r2, [r3, #0]
    lv_mem_free(task);
  41856e:	4620      	mov	r0, r4
  418570:	4b08      	ldr	r3, [pc, #32]	; (418594 <lv_task_del+0x38>)
  418572:	4798      	blx	r3
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
  418574:	4b08      	ldr	r3, [pc, #32]	; (418598 <lv_task_del+0x3c>)
  418576:	681b      	ldr	r3, [r3, #0]
  418578:	429c      	cmp	r4, r3
  41857a:	d000      	beq.n	41857e <lv_task_del+0x22>
  41857c:	bd10      	pop	{r4, pc}
  41857e:	2201      	movs	r2, #1
  418580:	4b06      	ldr	r3, [pc, #24]	; (41859c <lv_task_del+0x40>)
  418582:	701a      	strb	r2, [r3, #0]
}
  418584:	e7fa      	b.n	41857c <lv_task_del+0x20>
  418586:	bf00      	nop
  418588:	2043a248 	.word	0x2043a248
  41858c:	00417175 	.word	0x00417175
  418590:	20414803 	.word	0x20414803
  418594:	004175b1 	.word	0x004175b1
  418598:	2043a318 	.word	0x2043a318
  41859c:	20414802 	.word	0x20414802

004185a0 <lv_task_exec>:
{
  4185a0:	b510      	push	{r4, lr}
  4185a2:	4604      	mov	r4, r0
    if(lv_task_time_remaining(task) == 0) {
  4185a4:	4b0e      	ldr	r3, [pc, #56]	; (4185e0 <lv_task_exec+0x40>)
  4185a6:	4798      	blx	r3
  4185a8:	b108      	cbz	r0, 4185ae <lv_task_exec+0xe>
    bool exec = false;
  4185aa:	2000      	movs	r0, #0
  4185ac:	bd10      	pop	{r4, pc}
        task->last_run = lv_tick_get();
  4185ae:	4b0d      	ldr	r3, [pc, #52]	; (4185e4 <lv_task_exec+0x44>)
  4185b0:	4798      	blx	r3
  4185b2:	6060      	str	r0, [r4, #4]
        if(task->task_cb) task->task_cb(task);
  4185b4:	68a3      	ldr	r3, [r4, #8]
  4185b6:	b10b      	cbz	r3, 4185bc <lv_task_exec+0x1c>
  4185b8:	4620      	mov	r0, r4
  4185ba:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
  4185bc:	4b0a      	ldr	r3, [pc, #40]	; (4185e8 <lv_task_exec+0x48>)
  4185be:	7818      	ldrb	r0, [r3, #0]
  4185c0:	b938      	cbnz	r0, 4185d2 <lv_task_exec+0x32>
            if(task->repeat_count > 0) {
  4185c2:	6923      	ldr	r3, [r4, #16]
  4185c4:	2b00      	cmp	r3, #0
  4185c6:	dd01      	ble.n	4185cc <lv_task_exec+0x2c>
                task->repeat_count--;
  4185c8:	3b01      	subs	r3, #1
  4185ca:	6123      	str	r3, [r4, #16]
            if(task->repeat_count == 0) {
  4185cc:	6923      	ldr	r3, [r4, #16]
  4185ce:	b10b      	cbz	r3, 4185d4 <lv_task_exec+0x34>
        exec = true;
  4185d0:	2001      	movs	r0, #1
}
  4185d2:	bd10      	pop	{r4, pc}
                lv_task_del(task);
  4185d4:	4620      	mov	r0, r4
  4185d6:	4b05      	ldr	r3, [pc, #20]	; (4185ec <lv_task_exec+0x4c>)
  4185d8:	4798      	blx	r3
        exec = true;
  4185da:	2001      	movs	r0, #1
  4185dc:	bd10      	pop	{r4, pc}
  4185de:	bf00      	nop
  4185e0:	0041843d 	.word	0x0041843d
  4185e4:	0041602d 	.word	0x0041602d
  4185e8:	20414802 	.word	0x20414802
  4185ec:	0041855d 	.word	0x0041855d

004185f0 <lv_task_handler>:
{
  4185f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(already_running) return 1;
  4185f2:	4b5e      	ldr	r3, [pc, #376]	; (41876c <lv_task_handler+0x17c>)
  4185f4:	781b      	ldrb	r3, [r3, #0]
  4185f6:	2b00      	cmp	r3, #0
  4185f8:	f040 80b5 	bne.w	418766 <lv_task_handler+0x176>
    already_running = true;
  4185fc:	2201      	movs	r2, #1
  4185fe:	4b5b      	ldr	r3, [pc, #364]	; (41876c <lv_task_handler+0x17c>)
  418600:	701a      	strb	r2, [r3, #0]
    if(lv_task_run == false) {
  418602:	4b5b      	ldr	r3, [pc, #364]	; (418770 <lv_task_handler+0x180>)
  418604:	781d      	ldrb	r5, [r3, #0]
  418606:	b925      	cbnz	r5, 418612 <lv_task_handler+0x22>
        already_running = false; /*Release mutex*/
  418608:	2200      	movs	r2, #0
  41860a:	4b58      	ldr	r3, [pc, #352]	; (41876c <lv_task_handler+0x17c>)
  41860c:	701a      	strb	r2, [r3, #0]
        return 1;
  41860e:	2501      	movs	r5, #1
  418610:	e0aa      	b.n	418768 <lv_task_handler+0x178>
    uint32_t handler_start = lv_tick_get();
  418612:	4b58      	ldr	r3, [pc, #352]	; (418774 <lv_task_handler+0x184>)
  418614:	4798      	blx	r3
  418616:	4606      	mov	r6, r0
    lv_task_t * task_interrupter = NULL;
  418618:	2400      	movs	r4, #0
  41861a:	e04e      	b.n	4186ba <lv_task_handler+0xca>
                LV_GC_ROOT(_lv_task_act) = next;
  41861c:	4b56      	ldr	r3, [pc, #344]	; (418778 <lv_task_handler+0x188>)
  41861e:	601f      	str	r7, [r3, #0]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
  418620:	2400      	movs	r4, #0
                continue; /*Load the next task*/
  418622:	e00f      	b.n	418644 <lv_task_handler+0x54>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
  418624:	4b55      	ldr	r3, [pc, #340]	; (41877c <lv_task_handler+0x18c>)
  418626:	4798      	blx	r3
            if(task_created || task_deleted) {
  418628:	4b55      	ldr	r3, [pc, #340]	; (418780 <lv_task_handler+0x190>)
  41862a:	781b      	ldrb	r3, [r3, #0]
  41862c:	2b00      	cmp	r3, #0
  41862e:	d153      	bne.n	4186d8 <lv_task_handler+0xe8>
  418630:	4b54      	ldr	r3, [pc, #336]	; (418784 <lv_task_handler+0x194>)
  418632:	781b      	ldrb	r3, [r3, #0]
  418634:	2b00      	cmp	r3, #0
  418636:	d151      	bne.n	4186dc <lv_task_handler+0xec>
            if(task_list_changed) {
  418638:	4a53      	ldr	r2, [pc, #332]	; (418788 <lv_task_handler+0x198>)
  41863a:	7812      	ldrb	r2, [r2, #0]
  41863c:	2a00      	cmp	r2, #0
  41863e:	d14f      	bne.n	4186e0 <lv_task_handler+0xf0>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
  418640:	4b4d      	ldr	r3, [pc, #308]	; (418778 <lv_task_handler+0x188>)
  418642:	601f      	str	r7, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
  418644:	4b4c      	ldr	r3, [pc, #304]	; (418778 <lv_task_handler+0x188>)
  418646:	6819      	ldr	r1, [r3, #0]
  418648:	2900      	cmp	r1, #0
  41864a:	d034      	beq.n	4186b6 <lv_task_handler+0xc6>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
  41864c:	484f      	ldr	r0, [pc, #316]	; (41878c <lv_task_handler+0x19c>)
  41864e:	4b50      	ldr	r3, [pc, #320]	; (418790 <lv_task_handler+0x1a0>)
  418650:	4798      	blx	r3
  418652:	4607      	mov	r7, r0
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_OFF) {
  418654:	4b48      	ldr	r3, [pc, #288]	; (418778 <lv_task_handler+0x188>)
  418656:	6818      	ldr	r0, [r3, #0]
  418658:	7d03      	ldrb	r3, [r0, #20]
  41865a:	f013 0307 	ands.w	r3, r3, #7
  41865e:	d039      	beq.n	4186d4 <lv_task_handler+0xe4>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
  418660:	4284      	cmp	r4, r0
  418662:	d0db      	beq.n	41861c <lv_task_handler+0x2c>
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_HIGHEST) {
  418664:	2b05      	cmp	r3, #5
  418666:	d0dd      	beq.n	418624 <lv_task_handler+0x34>
            else if(task_interrupter) {
  418668:	b1b4      	cbz	r4, 418698 <lv_task_handler+0xa8>
                if(LV_GC_ROOT(_lv_task_act)->prio > task_interrupter->prio) {
  41866a:	7d02      	ldrb	r2, [r0, #20]
  41866c:	f002 0207 	and.w	r2, r2, #7
  418670:	7d23      	ldrb	r3, [r4, #20]
  418672:	f003 0307 	and.w	r3, r3, #7
  418676:	429a      	cmp	r2, r3
  418678:	ddd6      	ble.n	418628 <lv_task_handler+0x38>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
  41867a:	4b40      	ldr	r3, [pc, #256]	; (41877c <lv_task_handler+0x18c>)
  41867c:	4798      	blx	r3
  41867e:	2800      	cmp	r0, #0
  418680:	d0d2      	beq.n	418628 <lv_task_handler+0x38>
                        if(!task_created && !task_deleted) {
  418682:	4b3f      	ldr	r3, [pc, #252]	; (418780 <lv_task_handler+0x190>)
  418684:	781b      	ldrb	r3, [r3, #0]
  418686:	2b00      	cmp	r3, #0
  418688:	d1ce      	bne.n	418628 <lv_task_handler+0x38>
  41868a:	4b3e      	ldr	r3, [pc, #248]	; (418784 <lv_task_handler+0x194>)
  41868c:	781b      	ldrb	r3, [r3, #0]
  41868e:	2b00      	cmp	r3, #0
  418690:	d1ca      	bne.n	418628 <lv_task_handler+0x38>
                            task_interrupter = LV_GC_ROOT(_lv_task_act);
  418692:	4a39      	ldr	r2, [pc, #228]	; (418778 <lv_task_handler+0x188>)
  418694:	6814      	ldr	r4, [r2, #0]
                            break;
  418696:	e00f      	b.n	4186b8 <lv_task_handler+0xc8>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
  418698:	4b38      	ldr	r3, [pc, #224]	; (41877c <lv_task_handler+0x18c>)
  41869a:	4798      	blx	r3
  41869c:	2800      	cmp	r0, #0
  41869e:	d0c3      	beq.n	418628 <lv_task_handler+0x38>
                    if(!task_created && !task_deleted) {
  4186a0:	4b37      	ldr	r3, [pc, #220]	; (418780 <lv_task_handler+0x190>)
  4186a2:	781b      	ldrb	r3, [r3, #0]
  4186a4:	2b00      	cmp	r3, #0
  4186a6:	d1bf      	bne.n	418628 <lv_task_handler+0x38>
  4186a8:	4b36      	ldr	r3, [pc, #216]	; (418784 <lv_task_handler+0x194>)
  4186aa:	781b      	ldrb	r3, [r3, #0]
  4186ac:	2b00      	cmp	r3, #0
  4186ae:	d1bb      	bne.n	418628 <lv_task_handler+0x38>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
  4186b0:	4a31      	ldr	r2, [pc, #196]	; (418778 <lv_task_handler+0x188>)
  4186b2:	6814      	ldr	r4, [r2, #0]
                        break;
  4186b4:	e000      	b.n	4186b8 <lv_task_handler+0xc8>
        end_flag                 = true;
  4186b6:	462b      	mov	r3, r5
    } while(!end_flag);
  4186b8:	b9a3      	cbnz	r3, 4186e4 <lv_task_handler+0xf4>
        task_deleted             = false;
  4186ba:	2300      	movs	r3, #0
  4186bc:	4a31      	ldr	r2, [pc, #196]	; (418784 <lv_task_handler+0x194>)
  4186be:	7013      	strb	r3, [r2, #0]
        task_created             = false;
  4186c0:	4a2f      	ldr	r2, [pc, #188]	; (418780 <lv_task_handler+0x190>)
  4186c2:	7013      	strb	r3, [r2, #0]
        task_list_changed        = false;
  4186c4:	4a30      	ldr	r2, [pc, #192]	; (418788 <lv_task_handler+0x198>)
  4186c6:	7013      	strb	r3, [r2, #0]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  4186c8:	4830      	ldr	r0, [pc, #192]	; (41878c <lv_task_handler+0x19c>)
  4186ca:	4b32      	ldr	r3, [pc, #200]	; (418794 <lv_task_handler+0x1a4>)
  4186cc:	4798      	blx	r3
  4186ce:	4b2a      	ldr	r3, [pc, #168]	; (418778 <lv_task_handler+0x188>)
  4186d0:	6018      	str	r0, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
  4186d2:	e7b7      	b.n	418644 <lv_task_handler+0x54>
        end_flag                 = true;
  4186d4:	462b      	mov	r3, r5
  4186d6:	e7ef      	b.n	4186b8 <lv_task_handler+0xc8>
                task_interrupter = NULL;
  4186d8:	2400      	movs	r4, #0
  4186da:	e7ed      	b.n	4186b8 <lv_task_handler+0xc8>
  4186dc:	2400      	movs	r4, #0
  4186de:	e7eb      	b.n	4186b8 <lv_task_handler+0xc8>
                task_interrupter = NULL;
  4186e0:	2400      	movs	r4, #0
  4186e2:	e7e9      	b.n	4186b8 <lv_task_handler+0xc8>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  4186e4:	4829      	ldr	r0, [pc, #164]	; (41878c <lv_task_handler+0x19c>)
  4186e6:	4b2b      	ldr	r3, [pc, #172]	; (418794 <lv_task_handler+0x1a4>)
  4186e8:	4798      	blx	r3
  4186ea:	4604      	mov	r4, r0
    uint32_t time_till_next = LV_NO_TASK_READY;
  4186ec:	f04f 35ff 	mov.w	r5, #4294967295
    while(next && next->prio != LV_TASK_PRIO_OFF) {
  4186f0:	e004      	b.n	4186fc <lv_task_handler+0x10c>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
  4186f2:	4621      	mov	r1, r4
  4186f4:	4825      	ldr	r0, [pc, #148]	; (41878c <lv_task_handler+0x19c>)
  4186f6:	4b26      	ldr	r3, [pc, #152]	; (418790 <lv_task_handler+0x1a0>)
  4186f8:	4798      	blx	r3
  4186fa:	4604      	mov	r4, r0
    while(next && next->prio != LV_TASK_PRIO_OFF) {
  4186fc:	b154      	cbz	r4, 418714 <lv_task_handler+0x124>
  4186fe:	7d23      	ldrb	r3, [r4, #20]
  418700:	f013 0f07 	tst.w	r3, #7
  418704:	d006      	beq.n	418714 <lv_task_handler+0x124>
        uint32_t delay = lv_task_time_remaining(next);
  418706:	4620      	mov	r0, r4
  418708:	4b23      	ldr	r3, [pc, #140]	; (418798 <lv_task_handler+0x1a8>)
  41870a:	4798      	blx	r3
        if(delay < time_till_next)
  41870c:	4285      	cmp	r5, r0
  41870e:	d9f0      	bls.n	4186f2 <lv_task_handler+0x102>
            time_till_next = delay;
  418710:	4605      	mov	r5, r0
  418712:	e7ee      	b.n	4186f2 <lv_task_handler+0x102>
    busy_time += lv_tick_elaps(handler_start);
  418714:	4630      	mov	r0, r6
  418716:	4c21      	ldr	r4, [pc, #132]	; (41879c <lv_task_handler+0x1ac>)
  418718:	47a0      	blx	r4
  41871a:	4a21      	ldr	r2, [pc, #132]	; (4187a0 <lv_task_handler+0x1b0>)
  41871c:	6813      	ldr	r3, [r2, #0]
  41871e:	4403      	add	r3, r0
  418720:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
  418722:	4b20      	ldr	r3, [pc, #128]	; (4187a4 <lv_task_handler+0x1b4>)
  418724:	6818      	ldr	r0, [r3, #0]
  418726:	47a0      	blx	r4
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
  418728:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
  41872c:	d315      	bcc.n	41875a <lv_task_handler+0x16a>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
  41872e:	4b1c      	ldr	r3, [pc, #112]	; (4187a0 <lv_task_handler+0x1b0>)
  418730:	681a      	ldr	r2, [r3, #0]
  418732:	2364      	movs	r3, #100	; 0x64
  418734:	fb03 f302 	mul.w	r3, r3, r2
  418738:	fbb3 f3f0 	udiv	r3, r3, r0
  41873c:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
  41873e:	2b64      	cmp	r3, #100	; 0x64
  418740:	d80f      	bhi.n	418762 <lv_task_handler+0x172>
  418742:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  418746:	b2db      	uxtb	r3, r3
  418748:	4a17      	ldr	r2, [pc, #92]	; (4187a8 <lv_task_handler+0x1b8>)
  41874a:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
  41874c:	2200      	movs	r2, #0
  41874e:	4b14      	ldr	r3, [pc, #80]	; (4187a0 <lv_task_handler+0x1b0>)
  418750:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
  418752:	4b08      	ldr	r3, [pc, #32]	; (418774 <lv_task_handler+0x184>)
  418754:	4798      	blx	r3
  418756:	4b13      	ldr	r3, [pc, #76]	; (4187a4 <lv_task_handler+0x1b4>)
  418758:	6018      	str	r0, [r3, #0]
    already_running = false; /*Release the mutex*/
  41875a:	2200      	movs	r2, #0
  41875c:	4b03      	ldr	r3, [pc, #12]	; (41876c <lv_task_handler+0x17c>)
  41875e:	701a      	strb	r2, [r3, #0]
    return time_till_next;
  418760:	e002      	b.n	418768 <lv_task_handler+0x178>
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
  418762:	2300      	movs	r3, #0
  418764:	e7f0      	b.n	418748 <lv_task_handler+0x158>
    if(already_running) return 1;
  418766:	2501      	movs	r5, #1
}
  418768:	4628      	mov	r0, r5
  41876a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41876c:	204147f0 	.word	0x204147f0
  418770:	20414800 	.word	0x20414800
  418774:	0041602d 	.word	0x0041602d
  418778:	2043a318 	.word	0x2043a318
  41877c:	004185a1 	.word	0x004185a1
  418780:	20414801 	.word	0x20414801
  418784:	20414802 	.word	0x20414802
  418788:	20414803 	.word	0x20414803
  41878c:	2043a248 	.word	0x2043a248
  418790:	004170cd 	.word	0x004170cd
  418794:	004170b9 	.word	0x004170b9
  418798:	0041843d 	.word	0x0041843d
  41879c:	00416049 	.word	0x00416049
  4187a0:	204147f4 	.word	0x204147f4
  4187a4:	204147fc 	.word	0x204147fc
  4187a8:	204147f8 	.word	0x204147f8

004187ac <lv_task_set_prio>:
{
  4187ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(task->prio == prio) return;
  4187ae:	7d03      	ldrb	r3, [r0, #20]
  4187b0:	f003 0307 	and.w	r3, r3, #7
  4187b4:	428b      	cmp	r3, r1
  4187b6:	d021      	beq.n	4187fc <lv_task_set_prio+0x50>
  4187b8:	460d      	mov	r5, r1
  4187ba:	460f      	mov	r7, r1
  4187bc:	4606      	mov	r6, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
  4187be:	4813      	ldr	r0, [pc, #76]	; (41880c <lv_task_set_prio+0x60>)
  4187c0:	4b13      	ldr	r3, [pc, #76]	; (418810 <lv_task_set_prio+0x64>)
  4187c2:	4798      	blx	r3
  4187c4:	4604      	mov	r4, r0
  4187c6:	b18c      	cbz	r4, 4187ec <lv_task_set_prio+0x40>
        if(i->prio <= prio) {
  4187c8:	7d23      	ldrb	r3, [r4, #20]
  4187ca:	f003 0307 	and.w	r3, r3, #7
  4187ce:	429d      	cmp	r5, r3
  4187d0:	da05      	bge.n	4187de <lv_task_set_prio+0x32>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
  4187d2:	4621      	mov	r1, r4
  4187d4:	480d      	ldr	r0, [pc, #52]	; (41880c <lv_task_set_prio+0x60>)
  4187d6:	4b0f      	ldr	r3, [pc, #60]	; (418814 <lv_task_set_prio+0x68>)
  4187d8:	4798      	blx	r3
  4187da:	4604      	mov	r4, r0
  4187dc:	e7f3      	b.n	4187c6 <lv_task_set_prio+0x1a>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
  4187de:	42b4      	cmp	r4, r6
  4187e0:	d004      	beq.n	4187ec <lv_task_set_prio+0x40>
  4187e2:	4622      	mov	r2, r4
  4187e4:	4631      	mov	r1, r6
  4187e6:	4809      	ldr	r0, [pc, #36]	; (41880c <lv_task_set_prio+0x60>)
  4187e8:	4b0b      	ldr	r3, [pc, #44]	; (418818 <lv_task_set_prio+0x6c>)
  4187ea:	4798      	blx	r3
    if(i == NULL) {
  4187ec:	b13c      	cbz	r4, 4187fe <lv_task_set_prio+0x52>
    task_list_changed = true;
  4187ee:	2201      	movs	r2, #1
  4187f0:	4b0a      	ldr	r3, [pc, #40]	; (41881c <lv_task_set_prio+0x70>)
  4187f2:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
  4187f4:	7d33      	ldrb	r3, [r6, #20]
  4187f6:	f367 0302 	bfi	r3, r7, #0, #3
  4187fa:	7533      	strb	r3, [r6, #20]
  4187fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
  4187fe:	2200      	movs	r2, #0
  418800:	4631      	mov	r1, r6
  418802:	4802      	ldr	r0, [pc, #8]	; (41880c <lv_task_set_prio+0x60>)
  418804:	4b04      	ldr	r3, [pc, #16]	; (418818 <lv_task_set_prio+0x6c>)
  418806:	4798      	blx	r3
  418808:	e7f1      	b.n	4187ee <lv_task_set_prio+0x42>
  41880a:	bf00      	nop
  41880c:	2043a248 	.word	0x2043a248
  418810:	004170b9 	.word	0x004170b9
  418814:	004170cd 	.word	0x004170cd
  418818:	004172e5 	.word	0x004172e5
  41881c:	20414803 	.word	0x20414803

00418820 <lv_task_ready>:
{
  418820:	b510      	push	{r4, lr}
  418822:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
  418824:	4b03      	ldr	r3, [pc, #12]	; (418834 <lv_task_ready+0x14>)
  418826:	4798      	blx	r3
  418828:	6823      	ldr	r3, [r4, #0]
  41882a:	1ac0      	subs	r0, r0, r3
  41882c:	3801      	subs	r0, #1
  41882e:	6060      	str	r0, [r4, #4]
  418830:	bd10      	pop	{r4, pc}
  418832:	bf00      	nop
  418834:	0041602d 	.word	0x0041602d

00418838 <lv_task_enable>:
    lv_task_run = en;
  418838:	4b01      	ldr	r3, [pc, #4]	; (418840 <lv_task_enable+0x8>)
  41883a:	7018      	strb	r0, [r3, #0]
  41883c:	4770      	bx	lr
  41883e:	bf00      	nop
  418840:	20414800 	.word	0x20414800

00418844 <_lv_task_core_init>:
{
  418844:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
  418846:	2118      	movs	r1, #24
  418848:	4803      	ldr	r0, [pc, #12]	; (418858 <_lv_task_core_init+0x14>)
  41884a:	4b04      	ldr	r3, [pc, #16]	; (41885c <_lv_task_core_init+0x18>)
  41884c:	4798      	blx	r3
    lv_task_enable(true);
  41884e:	2001      	movs	r0, #1
  418850:	4b03      	ldr	r3, [pc, #12]	; (418860 <_lv_task_core_init+0x1c>)
  418852:	4798      	blx	r3
  418854:	bd08      	pop	{r3, pc}
  418856:	bf00      	nop
  418858:	2043a248 	.word	0x2043a248
  41885c:	0041700f 	.word	0x0041700f
  418860:	00418839 	.word	0x00418839

00418864 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
  418864:	7803      	ldrb	r3, [r0, #0]
  418866:	f013 0f80 	tst.w	r3, #128	; 0x80
  41886a:	d101      	bne.n	418870 <lv_txt_utf8_size+0xc>
        return 1;
  41886c:	2001      	movs	r0, #1
  41886e:	4770      	bx	lr
    else if((str[0] & 0xE0) == 0xC0)
  418870:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
  418874:	2ac0      	cmp	r2, #192	; 0xc0
  418876:	d00b      	beq.n	418890 <lv_txt_utf8_size+0x2c>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
  418878:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  41887c:	2ae0      	cmp	r2, #224	; 0xe0
  41887e:	d009      	beq.n	418894 <lv_txt_utf8_size+0x30>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
  418880:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
  418884:	2bf0      	cmp	r3, #240	; 0xf0
  418886:	d001      	beq.n	41888c <lv_txt_utf8_size+0x28>
        return 4;
    return 0; /*If the char was invalid tell it's 1 byte long*/
  418888:	2000      	movs	r0, #0
}
  41888a:	4770      	bx	lr
        return 4;
  41888c:	2004      	movs	r0, #4
  41888e:	4770      	bx	lr
        return 2;
  418890:	2002      	movs	r0, #2
  418892:	4770      	bx	lr
        return 3;
  418894:	2003      	movs	r0, #3
  418896:	4770      	bx	lr

00418898 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
  418898:	b430      	push	{r4, r5}
  41889a:	b082      	sub	sp, #8
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
  41889c:	2300      	movs	r3, #0
  41889e:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
  4188a0:	460c      	mov	r4, r1
  4188a2:	b151      	cbz	r1, 4188ba <lv_txt_utf8_next+0x22>

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
  4188a4:	6822      	ldr	r2, [r4, #0]
  4188a6:	5c83      	ldrb	r3, [r0, r2]
  4188a8:	f013 0f80 	tst.w	r3, #128	; 0x80
  4188ac:	d107      	bne.n	4188be <lv_txt_utf8_next+0x26>
        result = txt[*i];
  4188ae:	4618      	mov	r0, r3
        (*i)++;
  4188b0:	3201      	adds	r2, #1
  4188b2:	6022      	str	r2, [r4, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
  4188b4:	b002      	add	sp, #8
  4188b6:	bc30      	pop	{r4, r5}
  4188b8:	4770      	bx	lr
    if(i == NULL) i = &i_tmp;
  4188ba:	ac01      	add	r4, sp, #4
  4188bc:	e7f2      	b.n	4188a4 <lv_txt_utf8_next+0xc>
        if((txt[*i] & 0xE0) == 0xC0) {
  4188be:	f003 01e0 	and.w	r1, r3, #224	; 0xe0
  4188c2:	29c0      	cmp	r1, #192	; 0xc0
  4188c4:	d00b      	beq.n	4188de <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF0) == 0xE0) {
  4188c6:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
  4188ca:	29e0      	cmp	r1, #224	; 0xe0
  4188cc:	d019      	beq.n	418902 <lv_txt_utf8_next+0x6a>
        else if((txt[*i] & 0xF8) == 0xF0) {
  4188ce:	f003 01f8 	and.w	r1, r3, #248	; 0xf8
  4188d2:	29f0      	cmp	r1, #240	; 0xf0
  4188d4:	d033      	beq.n	41893e <lv_txt_utf8_next+0xa6>
            (*i)++; /*Not UTF-8 char. Go the next.*/
  4188d6:	3201      	adds	r2, #1
  4188d8:	6022      	str	r2, [r4, #0]
    uint32_t result = 0;
  4188da:	2000      	movs	r0, #0
  4188dc:	e7ea      	b.n	4188b4 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
  4188de:	019b      	lsls	r3, r3, #6
  4188e0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            (*i)++;
  4188e4:	3201      	adds	r2, #1
  4188e6:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  4188e8:	5c80      	ldrb	r0, [r0, r2]
  4188ea:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
  4188ee:	2980      	cmp	r1, #128	; 0x80
  4188f0:	d001      	beq.n	4188f6 <lv_txt_utf8_next+0x5e>
  4188f2:	2000      	movs	r0, #0
  4188f4:	e7de      	b.n	4188b4 <lv_txt_utf8_next+0x1c>
            result += (txt[*i] & 0x3F);
  4188f6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  4188fa:	4418      	add	r0, r3
            (*i)++;
  4188fc:	3201      	adds	r2, #1
  4188fe:	6022      	str	r2, [r4, #0]
  418900:	e7d8      	b.n	4188b4 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
  418902:	031b      	lsls	r3, r3, #12
  418904:	b29b      	uxth	r3, r3
            (*i)++;
  418906:	3201      	adds	r2, #1
  418908:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  41890a:	5c81      	ldrb	r1, [r0, r2]
  41890c:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  418910:	2d80      	cmp	r5, #128	; 0x80
  418912:	d001      	beq.n	418918 <lv_txt_utf8_next+0x80>
  418914:	2000      	movs	r0, #0
  418916:	e7cd      	b.n	4188b4 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
  418918:	0189      	lsls	r1, r1, #6
  41891a:	f401 617c 	and.w	r1, r1, #4032	; 0xfc0
  41891e:	440b      	add	r3, r1
            (*i)++;
  418920:	3201      	adds	r2, #1
  418922:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  418924:	5c81      	ldrb	r1, [r0, r2]
  418926:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
  41892a:	2880      	cmp	r0, #128	; 0x80
  41892c:	d001      	beq.n	418932 <lv_txt_utf8_next+0x9a>
  41892e:	2000      	movs	r0, #0
  418930:	e7c0      	b.n	4188b4 <lv_txt_utf8_next+0x1c>
            result += (txt[*i] & 0x3F);
  418932:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  418936:	1858      	adds	r0, r3, r1
            (*i)++;
  418938:	3201      	adds	r2, #1
  41893a:	6022      	str	r2, [r4, #0]
  41893c:	e7ba      	b.n	4188b4 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
  41893e:	049b      	lsls	r3, r3, #18
  418940:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            (*i)++;
  418944:	3201      	adds	r2, #1
  418946:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  418948:	5c81      	ldrb	r1, [r0, r2]
  41894a:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  41894e:	2d80      	cmp	r5, #128	; 0x80
  418950:	d001      	beq.n	418956 <lv_txt_utf8_next+0xbe>
  418952:	2000      	movs	r0, #0
  418954:	e7ae      	b.n	4188b4 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
  418956:	0309      	lsls	r1, r1, #12
  418958:	f401 317c 	and.w	r1, r1, #258048	; 0x3f000
  41895c:	430b      	orrs	r3, r1
            (*i)++;
  41895e:	3201      	adds	r2, #1
  418960:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  418962:	5c81      	ldrb	r1, [r0, r2]
  418964:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  418968:	2d80      	cmp	r5, #128	; 0x80
  41896a:	d001      	beq.n	418970 <lv_txt_utf8_next+0xd8>
  41896c:	2000      	movs	r0, #0
  41896e:	e7a1      	b.n	4188b4 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
  418970:	0189      	lsls	r1, r1, #6
  418972:	f401 617c 	and.w	r1, r1, #4032	; 0xfc0
  418976:	440b      	add	r3, r1
            (*i)++;
  418978:	3201      	adds	r2, #1
  41897a:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  41897c:	5c81      	ldrb	r1, [r0, r2]
  41897e:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
  418982:	2880      	cmp	r0, #128	; 0x80
  418984:	d001      	beq.n	41898a <lv_txt_utf8_next+0xf2>
  418986:	2000      	movs	r0, #0
  418988:	e794      	b.n	4188b4 <lv_txt_utf8_next+0x1c>
            result += txt[*i] & 0x3F;
  41898a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  41898e:	1858      	adds	r0, r3, r1
            (*i)++;
  418990:	3201      	adds	r2, #1
  418992:	6022      	str	r2, [r4, #0]
  418994:	e78e      	b.n	4188b4 <lv_txt_utf8_next+0x1c>
	...

00418998 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
  418998:	b570      	push	{r4, r5, r6, lr}
  41899a:	b082      	sub	sp, #8
  41899c:	4606      	mov	r6, r0
  41899e:	460d      	mov	r5, r1
    uint8_t c_size;
    uint8_t cnt = 0;

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
  4189a0:	680b      	ldr	r3, [r1, #0]
  4189a2:	3b01      	subs	r3, #1
  4189a4:	600b      	str	r3, [r1, #0]
    uint8_t cnt = 0;
  4189a6:	2400      	movs	r4, #0
  4189a8:	e002      	b.n	4189b0 <lv_txt_utf8_prev+0x18>
            if(*i != 0)
                (*i)--;
            else
                return 0;
        }
        cnt++;
  4189aa:	3401      	adds	r4, #1
  4189ac:	b2e4      	uxtb	r4, r4
    } while(c_size == 0);
  4189ae:	b973      	cbnz	r3, 4189ce <lv_txt_utf8_prev+0x36>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
  4189b0:	2c03      	cmp	r4, #3
  4189b2:	d815      	bhi.n	4189e0 <lv_txt_utf8_prev+0x48>
        c_size = _lv_txt_encoded_size(&txt[*i]);
  4189b4:	4b0c      	ldr	r3, [pc, #48]	; (4189e8 <lv_txt_utf8_prev+0x50>)
  4189b6:	681b      	ldr	r3, [r3, #0]
  4189b8:	6828      	ldr	r0, [r5, #0]
  4189ba:	4430      	add	r0, r6
  4189bc:	4798      	blx	r3
        if(c_size == 0) {
  4189be:	4603      	mov	r3, r0
  4189c0:	2800      	cmp	r0, #0
  4189c2:	d1f2      	bne.n	4189aa <lv_txt_utf8_prev+0x12>
            if(*i != 0)
  4189c4:	6828      	ldr	r0, [r5, #0]
  4189c6:	b160      	cbz	r0, 4189e2 <lv_txt_utf8_prev+0x4a>
                (*i)--;
  4189c8:	3801      	subs	r0, #1
  4189ca:	6028      	str	r0, [r5, #0]
  4189cc:	e7ed      	b.n	4189aa <lv_txt_utf8_prev+0x12>

    uint32_t i_tmp  = *i;
  4189ce:	682b      	ldr	r3, [r5, #0]
  4189d0:	a902      	add	r1, sp, #8
  4189d2:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
  4189d6:	4b05      	ldr	r3, [pc, #20]	; (4189ec <lv_txt_utf8_prev+0x54>)
  4189d8:	681b      	ldr	r3, [r3, #0]
  4189da:	4630      	mov	r0, r6
  4189dc:	4798      	blx	r3

    return letter;
  4189de:	e000      	b.n	4189e2 <lv_txt_utf8_prev+0x4a>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
  4189e0:	2000      	movs	r0, #0
}
  4189e2:	b002      	add	sp, #8
  4189e4:	bd70      	pop	{r4, r5, r6, pc}
  4189e6:	bf00      	nop
  4189e8:	204000c0 	.word	0x204000c0
  4189ec:	204000b8 	.word	0x204000b8

004189f0 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
  4189f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4189f2:	4607      	mov	r7, r0
  4189f4:	460e      	mov	r6, r1
    uint32_t i;
    uint32_t byte_cnt = 0;
  4189f6:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id; i++) {
  4189f8:	4625      	mov	r5, r4
  4189fa:	e001      	b.n	418a00 <lv_txt_utf8_get_byte_id+0x10>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
        byte_cnt += c_size > 0 ? c_size : 1;
  4189fc:	4404      	add	r4, r0
    for(i = 0; i < utf8_id; i++) {
  4189fe:	3501      	adds	r5, #1
  418a00:	42b5      	cmp	r5, r6
  418a02:	d207      	bcs.n	418a14 <lv_txt_utf8_get_byte_id+0x24>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
  418a04:	4b04      	ldr	r3, [pc, #16]	; (418a18 <lv_txt_utf8_get_byte_id+0x28>)
  418a06:	681b      	ldr	r3, [r3, #0]
  418a08:	1938      	adds	r0, r7, r4
  418a0a:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
  418a0c:	2800      	cmp	r0, #0
  418a0e:	d1f5      	bne.n	4189fc <lv_txt_utf8_get_byte_id+0xc>
  418a10:	2001      	movs	r0, #1
  418a12:	e7f3      	b.n	4189fc <lv_txt_utf8_get_byte_id+0xc>
    }

    return byte_cnt;
}
  418a14:	4620      	mov	r0, r4
  418a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  418a18:	204000c0 	.word	0x204000c0

00418a1c <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
  418a1c:	b570      	push	{r4, r5, r6, lr}
  418a1e:	b082      	sub	sp, #8
  418a20:	4606      	mov	r6, r0
  418a22:	460d      	mov	r5, r1
    uint32_t i        = 0;
  418a24:	2400      	movs	r4, #0
  418a26:	9401      	str	r4, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
  418a28:	e005      	b.n	418a36 <lv_txt_utf8_get_char_id+0x1a>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
  418a2a:	4b06      	ldr	r3, [pc, #24]	; (418a44 <lv_txt_utf8_get_char_id+0x28>)
  418a2c:	681b      	ldr	r3, [r3, #0]
  418a2e:	a901      	add	r1, sp, #4
  418a30:	4630      	mov	r0, r6
  418a32:	4798      	blx	r3
        char_cnt++;
  418a34:	3401      	adds	r4, #1
    while(i < byte_id) {
  418a36:	9b01      	ldr	r3, [sp, #4]
  418a38:	42ab      	cmp	r3, r5
  418a3a:	d3f6      	bcc.n	418a2a <lv_txt_utf8_get_char_id+0xe>
    }

    return char_cnt;
}
  418a3c:	4620      	mov	r0, r4
  418a3e:	b002      	add	sp, #8
  418a40:	bd70      	pop	{r4, r5, r6, pc}
  418a42:	bf00      	nop
  418a44:	204000b8 	.word	0x204000b8

00418a48 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
  418a48:	b530      	push	{r4, r5, lr}
  418a4a:	b083      	sub	sp, #12
  418a4c:	4605      	mov	r5, r0
    uint32_t len = 0;
    uint32_t i   = 0;
  418a4e:	2400      	movs	r4, #0
  418a50:	9401      	str	r4, [sp, #4]

    while(txt[i] != '\0') {
  418a52:	e005      	b.n	418a60 <lv_txt_utf8_get_length+0x18>
        _lv_txt_encoded_next(txt, &i);
  418a54:	4b06      	ldr	r3, [pc, #24]	; (418a70 <lv_txt_utf8_get_length+0x28>)
  418a56:	681b      	ldr	r3, [r3, #0]
  418a58:	a901      	add	r1, sp, #4
  418a5a:	4628      	mov	r0, r5
  418a5c:	4798      	blx	r3
        len++;
  418a5e:	3401      	adds	r4, #1
    while(txt[i] != '\0') {
  418a60:	9b01      	ldr	r3, [sp, #4]
  418a62:	5ceb      	ldrb	r3, [r5, r3]
  418a64:	2b00      	cmp	r3, #0
  418a66:	d1f5      	bne.n	418a54 <lv_txt_utf8_get_length+0xc>
    }

    return len;
}
  418a68:	4620      	mov	r0, r4
  418a6a:	b003      	add	sp, #12
  418a6c:	bd30      	pop	{r4, r5, pc}
  418a6e:	bf00      	nop
  418a70:	204000b8 	.word	0x204000b8

00418a74 <_lv_txt_is_cmd>:
{
  418a74:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
  418a76:	2923      	cmp	r1, #35	; 0x23
  418a78:	d004      	beq.n	418a84 <_lv_txt_is_cmd+0x10>
    bool ret = false;
  418a7a:	2000      	movs	r0, #0
    if(*state == LV_TXT_CMD_STATE_PAR) {
  418a7c:	7813      	ldrb	r3, [r2, #0]
  418a7e:	2b01      	cmp	r3, #1
  418a80:	d014      	beq.n	418aac <_lv_txt_is_cmd+0x38>
}
  418a82:	4770      	bx	lr
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
  418a84:	7803      	ldrb	r3, [r0, #0]
  418a86:	b91b      	cbnz	r3, 418a90 <_lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_PAR;
  418a88:	2301      	movs	r3, #1
  418a8a:	7003      	strb	r3, [r0, #0]
            ret    = true;
  418a8c:	4618      	mov	r0, r3
  418a8e:	e7f5      	b.n	418a7c <_lv_txt_is_cmd+0x8>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
  418a90:	2b01      	cmp	r3, #1
  418a92:	d003      	beq.n	418a9c <_lv_txt_is_cmd+0x28>
        else if(*state == LV_TXT_CMD_STATE_IN) {
  418a94:	2b02      	cmp	r3, #2
  418a96:	d005      	beq.n	418aa4 <_lv_txt_is_cmd+0x30>
    bool ret = false;
  418a98:	2000      	movs	r0, #0
  418a9a:	e7ef      	b.n	418a7c <_lv_txt_is_cmd+0x8>
            *state = LV_TXT_CMD_STATE_WAIT;
  418a9c:	2300      	movs	r3, #0
  418a9e:	7003      	strb	r3, [r0, #0]
    bool ret = false;
  418aa0:	4618      	mov	r0, r3
  418aa2:	e7eb      	b.n	418a7c <_lv_txt_is_cmd+0x8>
            *state = LV_TXT_CMD_STATE_WAIT;
  418aa4:	2300      	movs	r3, #0
  418aa6:	7003      	strb	r3, [r0, #0]
            ret    = true;
  418aa8:	2001      	movs	r0, #1
  418aaa:	e7e7      	b.n	418a7c <_lv_txt_is_cmd+0x8>
        if(c == ' ') {
  418aac:	2920      	cmp	r1, #32
  418aae:	d001      	beq.n	418ab4 <_lv_txt_is_cmd+0x40>
        ret = true;
  418ab0:	2001      	movs	r0, #1
  418ab2:	e7e6      	b.n	418a82 <_lv_txt_is_cmd+0xe>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
  418ab4:	2302      	movs	r3, #2
  418ab6:	7013      	strb	r3, [r2, #0]
        ret = true;
  418ab8:	2001      	movs	r0, #1
  418aba:	4770      	bx	lr

00418abc <lv_txt_get_next_word>:
{
  418abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  418ac0:	b089      	sub	sp, #36	; 0x24
  418ac2:	9103      	str	r1, [sp, #12]
  418ac4:	9202      	str	r2, [sp, #8]
  418ac6:	9304      	str	r3, [sp, #16]
  418ac8:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
  418acc:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  418ad0:	9305      	str	r3, [sp, #20]
    if(txt == NULL || txt[0] == '\0') return 0;
  418ad2:	2800      	cmp	r0, #0
  418ad4:	f000 808f 	beq.w	418bf6 <lv_txt_get_next_word+0x13a>
  418ad8:	4607      	mov	r7, r0
  418ada:	7803      	ldrb	r3, [r0, #0]
  418adc:	2b00      	cmp	r3, #0
  418ade:	f000 808d 	beq.w	418bfc <lv_txt_get_next_word+0x140>
    if(font == NULL) return 0;
  418ae2:	2900      	cmp	r1, #0
  418ae4:	f000 8090 	beq.w	418c08 <lv_txt_get_next_word+0x14c>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  418ae8:	f01b 0f02 	tst.w	fp, #2
  418aec:	d002      	beq.n	418af4 <lv_txt_get_next_word+0x38>
  418aee:	f647 4318 	movw	r3, #31768	; 0x7c18
  418af2:	9304      	str	r3, [sp, #16]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
  418af4:	2600      	movs	r6, #0
  418af6:	9607      	str	r6, [sp, #28]
  418af8:	9606      	str	r6, [sp, #24]
    letter = _lv_txt_encoded_next(txt, &i_next);
  418afa:	4b47      	ldr	r3, [pc, #284]	; (418c18 <lv_txt_get_next_word+0x15c>)
  418afc:	681b      	ldr	r3, [r3, #0]
  418afe:	a907      	add	r1, sp, #28
  418b00:	4638      	mov	r0, r7
  418b02:	4798      	blx	r3
  418b04:	4604      	mov	r4, r0
    i_next_next = i_next;
  418b06:	9b07      	ldr	r3, [sp, #28]
  418b08:	9306      	str	r3, [sp, #24]
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
  418b0a:	f04f 38ff 	mov.w	r8, #4294967295
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
  418b0e:	46b1      	mov	r9, r6
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
  418b10:	4635      	mov	r5, r6
    uint32_t letter_next = 0; /* Letter at i_next */
  418b12:	9601      	str	r6, [sp, #4]
    while(txt[i] != '\0') {
  418b14:	e039      	b.n	418b8a <lv_txt_get_next_word+0xce>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
  418b16:	9a01      	ldr	r2, [sp, #4]
  418b18:	4621      	mov	r1, r4
  418b1a:	9803      	ldr	r0, [sp, #12]
  418b1c:	4b3f      	ldr	r3, [pc, #252]	; (418c1c <lv_txt_get_next_word+0x160>)
  418b1e:	4798      	blx	r3
  418b20:	b203      	sxth	r3, r0
        cur_w += letter_w;
  418b22:	4428      	add	r0, r5
  418b24:	b280      	uxth	r0, r0
  418b26:	b205      	sxth	r5, r0
        if(letter_w > 0) {
  418b28:	2b00      	cmp	r3, #0
  418b2a:	dd02      	ble.n	418b32 <lv_txt_get_next_word+0x76>
            cur_w += letter_space;
  418b2c:	9b02      	ldr	r3, [sp, #8]
  418b2e:	18c5      	adds	r5, r0, r3
  418b30:	b22d      	sxth	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
  418b32:	f1b8 3fff 	cmp.w	r8, #4294967295
  418b36:	d00f      	beq.n	418b58 <lv_txt_get_next_word+0x9c>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
  418b38:	2c0d      	cmp	r4, #13
  418b3a:	bf18      	it	ne
  418b3c:	2c0a      	cmpne	r4, #10
  418b3e:	bf0c      	ite	eq
  418b40:	2101      	moveq	r1, #1
  418b42:	2100      	movne	r1, #0
  418b44:	d038      	beq.n	418bb8 <lv_txt_get_next_word+0xfc>
  418b46:	2300      	movs	r3, #0
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
  418b48:	4a35      	ldr	r2, [pc, #212]	; (418c20 <lv_txt_get_next_word+0x164>)
  418b4a:	5cd2      	ldrb	r2, [r2, r3]
  418b4c:	b162      	cbz	r2, 418b68 <lv_txt_get_next_word+0xac>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
  418b4e:	4294      	cmp	r4, r2
  418b50:	d009      	beq.n	418b66 <lv_txt_get_next_word+0xaa>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
  418b52:	3301      	adds	r3, #1
  418b54:	b2db      	uxtb	r3, r3
  418b56:	e7f7      	b.n	418b48 <lv_txt_get_next_word+0x8c>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
  418b58:	9b02      	ldr	r3, [sp, #8]
  418b5a:	1aeb      	subs	r3, r5, r3
  418b5c:	9a04      	ldr	r2, [sp, #16]
  418b5e:	4293      	cmp	r3, r2
  418b60:	ddea      	ble.n	418b38 <lv_txt_get_next_word+0x7c>
            break_index = i;
  418b62:	46b0      	mov	r8, r6
  418b64:	e7e8      	b.n	418b38 <lv_txt_get_next_word+0x7c>
            ret = true; /*If match then it is break char*/
  418b66:	2101      	movs	r1, #1
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
  418b68:	bb31      	cbnz	r1, 418bb8 <lv_txt_get_next_word+0xfc>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
  418b6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  418b6c:	3300      	adds	r3, #0
  418b6e:	bf18      	it	ne
  418b70:	2301      	movne	r3, #1
  418b72:	f1b8 3fff 	cmp.w	r8, #4294967295
  418b76:	bf18      	it	ne
  418b78:	2300      	movne	r3, #0
  418b7a:	b10b      	cbz	r3, 418b80 <lv_txt_get_next_word+0xc4>
  418b7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  418b7e:	601d      	str	r5, [r3, #0]
        i = i_next;
  418b80:	9e07      	ldr	r6, [sp, #28]
        i_next = i_next_next;
  418b82:	9b06      	ldr	r3, [sp, #24]
  418b84:	9307      	str	r3, [sp, #28]
            ret = true; /*If match then it is break char*/
  418b86:	46d1      	mov	r9, sl
  418b88:	9c01      	ldr	r4, [sp, #4]
    while(txt[i] != '\0') {
  418b8a:	5dbb      	ldrb	r3, [r7, r6]
  418b8c:	b1e3      	cbz	r3, 418bc8 <lv_txt_get_next_word+0x10c>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
  418b8e:	4b22      	ldr	r3, [pc, #136]	; (418c18 <lv_txt_get_next_word+0x15c>)
  418b90:	681b      	ldr	r3, [r3, #0]
  418b92:	a906      	add	r1, sp, #24
  418b94:	4638      	mov	r0, r7
  418b96:	4798      	blx	r3
  418b98:	9001      	str	r0, [sp, #4]
        word_len++;
  418b9a:	f109 0a01 	add.w	sl, r9, #1
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  418b9e:	f01b 0f01 	tst.w	fp, #1
  418ba2:	d0b8      	beq.n	418b16 <lv_txt_get_next_word+0x5a>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
  418ba4:	4621      	mov	r1, r4
  418ba6:	9814      	ldr	r0, [sp, #80]	; 0x50
  418ba8:	4b1e      	ldr	r3, [pc, #120]	; (418c24 <lv_txt_get_next_word+0x168>)
  418baa:	4798      	blx	r3
  418bac:	2800      	cmp	r0, #0
  418bae:	d0b2      	beq.n	418b16 <lv_txt_get_next_word+0x5a>
                i = i_next;
  418bb0:	9e07      	ldr	r6, [sp, #28]
                i_next = i_next_next;
  418bb2:	9b06      	ldr	r3, [sp, #24]
  418bb4:	9307      	str	r3, [sp, #28]
                continue;   /*Skip the letter is it is part of a command*/
  418bb6:	e7e6      	b.n	418b86 <lv_txt_get_next_word+0xca>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
  418bb8:	2e00      	cmp	r6, #0
  418bba:	bf08      	it	eq
  418bbc:	f1b8 3fff 	cmpeq.w	r8, #4294967295
  418bc0:	d102      	bne.n	418bc8 <lv_txt_get_next_word+0x10c>
  418bc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  418bc4:	b103      	cbz	r3, 418bc8 <lv_txt_get_next_word+0x10c>
  418bc6:	601d      	str	r5, [r3, #0]
    if(break_index == NO_BREAK_FOUND) {
  418bc8:	f1b8 3fff 	cmp.w	r8, #4294967295
  418bcc:	d008      	beq.n	418be0 <lv_txt_get_next_word+0x124>
    if(force) return break_index;
  418bce:	9b05      	ldr	r3, [sp, #20]
  418bd0:	b9b3      	cbnz	r3, 418c00 <lv_txt_get_next_word+0x144>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
  418bd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  418bd4:	b1eb      	cbz	r3, 418c12 <lv_txt_get_next_word+0x156>
  418bd6:	2300      	movs	r3, #0
  418bd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  418bda:	6013      	str	r3, [r2, #0]
    return 0;
  418bdc:	4698      	mov	r8, r3
  418bde:	e00f      	b.n	418c00 <lv_txt_get_next_word+0x144>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
  418be0:	f1b9 0f00 	cmp.w	r9, #0
  418be4:	d004      	beq.n	418bf0 <lv_txt_get_next_word+0x134>
  418be6:	9b01      	ldr	r3, [sp, #4]
  418be8:	2c0d      	cmp	r4, #13
  418bea:	bf08      	it	eq
  418bec:	2b0a      	cmpeq	r3, #10
  418bee:	d10e      	bne.n	418c0e <lv_txt_get_next_word+0x152>
  418bf0:	f8dd 801c 	ldr.w	r8, [sp, #28]
  418bf4:	e004      	b.n	418c00 <lv_txt_get_next_word+0x144>
    if(txt == NULL || txt[0] == '\0') return 0;
  418bf6:	f04f 0800 	mov.w	r8, #0
  418bfa:	e001      	b.n	418c00 <lv_txt_get_next_word+0x144>
  418bfc:	f04f 0800 	mov.w	r8, #0
}
  418c00:	4640      	mov	r0, r8
  418c02:	b009      	add	sp, #36	; 0x24
  418c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(font == NULL) return 0;
  418c08:	f04f 0800 	mov.w	r8, #0
  418c0c:	e7f8      	b.n	418c00 <lv_txt_get_next_word+0x144>
  418c0e:	46b0      	mov	r8, r6
  418c10:	e7f6      	b.n	418c00 <lv_txt_get_next_word+0x144>
    return 0;
  418c12:	f04f 0800 	mov.w	r8, #0
  418c16:	e7f3      	b.n	418c00 <lv_txt_get_next_word+0x144>
  418c18:	204000b8 	.word	0x204000b8
  418c1c:	00414a6d 	.word	0x00414a6d
  418c20:	00431c8c 	.word	0x00431c8c
  418c24:	00418a75 	.word	0x00418a75

00418c28 <_lv_txt_get_next_line>:
{
  418c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  418c2c:	b089      	sub	sp, #36	; 0x24
  418c2e:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
    if(txt == NULL) return 0;
  418c32:	2800      	cmp	r0, #0
  418c34:	d05f      	beq.n	418cf6 <_lv_txt_get_next_line+0xce>
  418c36:	4689      	mov	r9, r1
  418c38:	4690      	mov	r8, r2
  418c3a:	461d      	mov	r5, r3
  418c3c:	4604      	mov	r4, r0
    if(font == NULL) return 0;
  418c3e:	2900      	cmp	r1, #0
  418c40:	d05b      	beq.n	418cfa <_lv_txt_get_next_line+0xd2>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
  418c42:	f016 0f12 	tst.w	r6, #18
  418c46:	d145      	bne.n	418cd4 <_lv_txt_get_next_line+0xac>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  418c48:	f016 0f02 	tst.w	r6, #2
  418c4c:	d001      	beq.n	418c52 <_lv_txt_get_next_line+0x2a>
  418c4e:	f647 4518 	movw	r5, #31768	; 0x7c18
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  418c52:	2300      	movs	r3, #0
  418c54:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32_t i = 0;                                        /* Iterating index into txt */
  418c58:	9306      	str	r3, [sp, #24]
    while(txt[i] != '\0' && max_width > 0) {
  418c5a:	9b06      	ldr	r3, [sp, #24]
  418c5c:	18e0      	adds	r0, r4, r3
  418c5e:	5ce2      	ldrb	r2, [r4, r3]
  418c60:	b332      	cbz	r2, 418cb0 <_lv_txt_get_next_line+0x88>
  418c62:	2d00      	cmp	r5, #0
  418c64:	dd24      	ble.n	418cb0 <_lv_txt_get_next_line+0x88>
        uint32_t word_w = 0;
  418c66:	2200      	movs	r2, #0
  418c68:	9205      	str	r2, [sp, #20]
        uint32_t advance = lv_txt_get_next_word(&txt[i], font, letter_space, max_width, flag, &word_w, &cmd_state, i == 0);
  418c6a:	fab3 f383 	clz	r3, r3
  418c6e:	095b      	lsrs	r3, r3, #5
  418c70:	9303      	str	r3, [sp, #12]
  418c72:	f10d 031f 	add.w	r3, sp, #31
  418c76:	9302      	str	r3, [sp, #8]
  418c78:	ab05      	add	r3, sp, #20
  418c7a:	9301      	str	r3, [sp, #4]
  418c7c:	9600      	str	r6, [sp, #0]
  418c7e:	462b      	mov	r3, r5
  418c80:	4642      	mov	r2, r8
  418c82:	4649      	mov	r1, r9
  418c84:	4f1e      	ldr	r7, [pc, #120]	; (418d00 <_lv_txt_get_next_line+0xd8>)
  418c86:	47b8      	blx	r7
        max_width -= word_w;
  418c88:	9b05      	ldr	r3, [sp, #20]
  418c8a:	1aed      	subs	r5, r5, r3
  418c8c:	b22d      	sxth	r5, r5
        if(advance == 0) {
  418c8e:	4603      	mov	r3, r0
  418c90:	b310      	cbz	r0, 418cd8 <_lv_txt_get_next_line+0xb0>
        i += advance;
  418c92:	9806      	ldr	r0, [sp, #24]
  418c94:	4418      	add	r0, r3
  418c96:	9006      	str	r0, [sp, #24]
        if(txt[0] == '\n' || txt[0] == '\r') break;
  418c98:	7823      	ldrb	r3, [r4, #0]
  418c9a:	2b0d      	cmp	r3, #13
  418c9c:	bf18      	it	ne
  418c9e:	2b0a      	cmpne	r3, #10
  418ca0:	d006      	beq.n	418cb0 <_lv_txt_get_next_line+0x88>
        if(txt[i] == '\n' || txt[i] == '\r') {
  418ca2:	5c23      	ldrb	r3, [r4, r0]
  418ca4:	2b0d      	cmp	r3, #13
  418ca6:	bf18      	it	ne
  418ca8:	2b0a      	cmpne	r3, #10
  418caa:	d1d6      	bne.n	418c5a <_lv_txt_get_next_line+0x32>
            i++;  /* Include the following newline in the current line */
  418cac:	3001      	adds	r0, #1
  418cae:	9006      	str	r0, [sp, #24]
    if(i == 0) {
  418cb0:	9b06      	ldr	r3, [sp, #24]
  418cb2:	b1d3      	cbz	r3, 418cea <_lv_txt_get_next_line+0xc2>
    return i;
  418cb4:	9806      	ldr	r0, [sp, #24]
}
  418cb6:	b009      	add	sp, #36	; 0x24
  418cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
  418cbc:	3001      	adds	r0, #1
  418cbe:	5c23      	ldrb	r3, [r4, r0]
  418cc0:	2b0a      	cmp	r3, #10
  418cc2:	bf18      	it	ne
  418cc4:	2b0d      	cmpne	r3, #13
  418cc6:	d001      	beq.n	418ccc <_lv_txt_get_next_line+0xa4>
  418cc8:	2b00      	cmp	r3, #0
  418cca:	d1f7      	bne.n	418cbc <_lv_txt_get_next_line+0x94>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
  418ccc:	2b00      	cmp	r3, #0
  418cce:	d0f2      	beq.n	418cb6 <_lv_txt_get_next_line+0x8e>
  418cd0:	3001      	adds	r0, #1
  418cd2:	e7f0      	b.n	418cb6 <_lv_txt_get_next_line+0x8e>
  418cd4:	2000      	movs	r0, #0
  418cd6:	e7f2      	b.n	418cbe <_lv_txt_get_next_line+0x96>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
  418cd8:	9b06      	ldr	r3, [sp, #24]
  418cda:	2b00      	cmp	r3, #0
  418cdc:	d1e8      	bne.n	418cb0 <_lv_txt_get_next_line+0x88>
  418cde:	4b09      	ldr	r3, [pc, #36]	; (418d04 <_lv_txt_get_next_line+0xdc>)
  418ce0:	681b      	ldr	r3, [r3, #0]
  418ce2:	a906      	add	r1, sp, #24
  418ce4:	4620      	mov	r0, r4
  418ce6:	4798      	blx	r3
  418ce8:	e7e2      	b.n	418cb0 <_lv_txt_get_next_line+0x88>
        _lv_txt_encoded_next(txt, &i);
  418cea:	4b06      	ldr	r3, [pc, #24]	; (418d04 <_lv_txt_get_next_line+0xdc>)
  418cec:	681b      	ldr	r3, [r3, #0]
  418cee:	a906      	add	r1, sp, #24
  418cf0:	4620      	mov	r0, r4
  418cf2:	4798      	blx	r3
  418cf4:	e7de      	b.n	418cb4 <_lv_txt_get_next_line+0x8c>
    if(txt == NULL) return 0;
  418cf6:	2000      	movs	r0, #0
  418cf8:	e7dd      	b.n	418cb6 <_lv_txt_get_next_line+0x8e>
    if(font == NULL) return 0;
  418cfa:	2000      	movs	r0, #0
  418cfc:	e7db      	b.n	418cb6 <_lv_txt_get_next_line+0x8e>
  418cfe:	bf00      	nop
  418d00:	00418abd 	.word	0x00418abd
  418d04:	204000b8 	.word	0x204000b8

00418d08 <_lv_txt_get_width>:
{
  418d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  418d0c:	b085      	sub	sp, #20
  418d0e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    if(txt == NULL) return 0;
  418d12:	2800      	cmp	r0, #0
  418d14:	d041      	beq.n	418d9a <_lv_txt_get_width+0x92>
  418d16:	4604      	mov	r4, r0
    if(font == NULL) return 0;
  418d18:	2a00      	cmp	r2, #0
  418d1a:	d041      	beq.n	418da0 <_lv_txt_get_width+0x98>
    uint32_t i                   = 0;
  418d1c:	2000      	movs	r0, #0
  418d1e:	9003      	str	r0, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  418d20:	f88d 000b 	strb.w	r0, [sp, #11]
    if(length != 0) {
  418d24:	b129      	cbz	r1, 418d32 <_lv_txt_get_width+0x2a>
  418d26:	4698      	mov	r8, r3
  418d28:	9201      	str	r2, [sp, #4]
  418d2a:	460d      	mov	r5, r1
  418d2c:	f04f 0a00 	mov.w	sl, #0
  418d30:	e00e      	b.n	418d50 <_lv_txt_get_width+0x48>
    lv_coord_t width             = 0;
  418d32:	4682      	mov	sl, r0
  418d34:	e02d      	b.n	418d92 <_lv_txt_get_width+0x8a>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
  418d36:	464a      	mov	r2, r9
  418d38:	4659      	mov	r1, fp
  418d3a:	9801      	ldr	r0, [sp, #4]
  418d3c:	4b1a      	ldr	r3, [pc, #104]	; (418da8 <_lv_txt_get_width+0xa0>)
  418d3e:	4798      	blx	r3
  418d40:	b203      	sxth	r3, r0
            if(char_width > 0) {
  418d42:	2b00      	cmp	r3, #0
  418d44:	dd04      	ble.n	418d50 <_lv_txt_get_width+0x48>
                width += char_width;
  418d46:	4450      	add	r0, sl
                width += letter_space;
  418d48:	fa18 f080 	uxtah	r0, r8, r0
  418d4c:	fa0f fa80 	sxth.w	sl, r0
        while(i < length) {
  418d50:	9b03      	ldr	r3, [sp, #12]
  418d52:	429d      	cmp	r5, r3
  418d54:	d916      	bls.n	418d84 <_lv_txt_get_width+0x7c>
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
  418d56:	4e15      	ldr	r6, [pc, #84]	; (418dac <_lv_txt_get_width+0xa4>)
  418d58:	6833      	ldr	r3, [r6, #0]
  418d5a:	a903      	add	r1, sp, #12
  418d5c:	4620      	mov	r0, r4
  418d5e:	4798      	blx	r3
  418d60:	4683      	mov	fp, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
  418d62:	6833      	ldr	r3, [r6, #0]
  418d64:	2100      	movs	r1, #0
  418d66:	9803      	ldr	r0, [sp, #12]
  418d68:	4420      	add	r0, r4
  418d6a:	4798      	blx	r3
  418d6c:	4681      	mov	r9, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  418d6e:	f017 0f01 	tst.w	r7, #1
  418d72:	d0e0      	beq.n	418d36 <_lv_txt_get_width+0x2e>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
  418d74:	4659      	mov	r1, fp
  418d76:	f10d 000b 	add.w	r0, sp, #11
  418d7a:	4b0d      	ldr	r3, [pc, #52]	; (418db0 <_lv_txt_get_width+0xa8>)
  418d7c:	4798      	blx	r3
  418d7e:	2800      	cmp	r0, #0
  418d80:	d1e6      	bne.n	418d50 <_lv_txt_get_width+0x48>
  418d82:	e7d8      	b.n	418d36 <_lv_txt_get_width+0x2e>
        if(width > 0) {
  418d84:	f1ba 0f00 	cmp.w	sl, #0
  418d88:	dd03      	ble.n	418d92 <_lv_txt_get_width+0x8a>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
  418d8a:	ebaa 0008 	sub.w	r0, sl, r8
  418d8e:	fa0f fa80 	sxth.w	sl, r0
}
  418d92:	4650      	mov	r0, sl
  418d94:	b005      	add	sp, #20
  418d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(txt == NULL) return 0;
  418d9a:	f04f 0a00 	mov.w	sl, #0
  418d9e:	e7f8      	b.n	418d92 <_lv_txt_get_width+0x8a>
    if(font == NULL) return 0;
  418da0:	f04f 0a00 	mov.w	sl, #0
  418da4:	e7f5      	b.n	418d92 <_lv_txt_get_width+0x8a>
  418da6:	bf00      	nop
  418da8:	00414a6d 	.word	0x00414a6d
  418dac:	204000b8 	.word	0x204000b8
  418db0:	00418a75 	.word	0x00418a75

00418db4 <_lv_txt_get_size>:
{
  418db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  418db8:	b087      	sub	sp, #28
  418dba:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
  418dbe:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
  418dc2:	9404      	str	r4, [sp, #16]
  418dc4:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    size_res->x = 0;
  418dc8:	2400      	movs	r4, #0
  418dca:	8004      	strh	r4, [r0, #0]
    size_res->y = 0;
  418dcc:	8044      	strh	r4, [r0, #2]
    if(text == NULL) return;
  418dce:	2900      	cmp	r1, #0
  418dd0:	d04d      	beq.n	418e6e <_lv_txt_get_size+0xba>
  418dd2:	460f      	mov	r7, r1
    if(font == NULL) return;
  418dd4:	2a00      	cmp	r2, #0
  418dd6:	d04a      	beq.n	418e6e <_lv_txt_get_size+0xba>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  418dd8:	f018 0f02 	tst.w	r8, #2
  418ddc:	d002      	beq.n	418de4 <_lv_txt_get_size+0x30>
  418dde:	f647 4118 	movw	r1, #31768	; 0x7c18
  418de2:	9104      	str	r1, [sp, #16]
  418de4:	9303      	str	r3, [sp, #12]
  418de6:	9202      	str	r2, [sp, #8]
  418de8:	4604      	mov	r4, r0
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  418dea:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
  418dee:	9305      	str	r3, [sp, #20]
    uint16_t letter_height = lv_font_get_line_height(font);
  418df0:	fa1f fa83 	uxth.w	sl, r3
    uint32_t line_start     = 0;
  418df4:	2500      	movs	r5, #0
    while(text[line_start] != '\0') {
  418df6:	197e      	adds	r6, r7, r5
  418df8:	5d7b      	ldrb	r3, [r7, r5]
  418dfa:	b323      	cbz	r3, 418e46 <_lv_txt_get_size+0x92>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
  418dfc:	f8cd 8000 	str.w	r8, [sp]
  418e00:	9b04      	ldr	r3, [sp, #16]
  418e02:	9a03      	ldr	r2, [sp, #12]
  418e04:	9902      	ldr	r1, [sp, #8]
  418e06:	4630      	mov	r0, r6
  418e08:	f8df b074 	ldr.w	fp, [pc, #116]	; 418e80 <_lv_txt_get_size+0xcc>
  418e0c:	47d8      	blx	fp
  418e0e:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
  418e10:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  418e14:	eb03 020a 	add.w	r2, r3, sl
  418e18:	444a      	add	r2, r9
  418e1a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  418e1e:	d226      	bcs.n	418e6e <_lv_txt_get_size+0xba>
            size_res->y += letter_height;
  418e20:	4453      	add	r3, sl
            size_res->y += line_space;
  418e22:	fa19 f383 	uxtah	r3, r9, r3
  418e26:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
  418e28:	f8cd 8000 	str.w	r8, [sp]
  418e2c:	9b03      	ldr	r3, [sp, #12]
  418e2e:	9a02      	ldr	r2, [sp, #8]
  418e30:	4601      	mov	r1, r0
  418e32:	4630      	mov	r0, r6
  418e34:	4e11      	ldr	r6, [pc, #68]	; (418e7c <_lv_txt_get_size+0xc8>)
  418e36:	47b0      	blx	r6
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
  418e38:	f9b4 3000 	ldrsh.w	r3, [r4]
  418e3c:	4298      	cmp	r0, r3
  418e3e:	bfb8      	it	lt
  418e40:	4618      	movlt	r0, r3
  418e42:	8020      	strh	r0, [r4, #0]
  418e44:	e7d7      	b.n	418df6 <_lv_txt_get_size+0x42>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
  418e46:	b15d      	cbz	r5, 418e60 <_lv_txt_get_size+0xac>
  418e48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  418e4c:	2b0d      	cmp	r3, #13
  418e4e:	bf18      	it	ne
  418e50:	2b0a      	cmpne	r3, #10
  418e52:	d105      	bne.n	418e60 <_lv_txt_get_size+0xac>
        size_res->y += letter_height + line_space;
  418e54:	eb0a 0309 	add.w	r3, sl, r9
  418e58:	8862      	ldrh	r2, [r4, #2]
  418e5a:	fa12 f383 	uxtah	r3, r2, r3
  418e5e:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
  418e60:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  418e64:	b133      	cbz	r3, 418e74 <_lv_txt_get_size+0xc0>
        size_res->y -= line_space;
  418e66:	eba3 0909 	sub.w	r9, r3, r9
  418e6a:	f8a4 9002 	strh.w	r9, [r4, #2]
}
  418e6e:	b007      	add	sp, #28
  418e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_res->y = letter_height;
  418e74:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  418e78:	8063      	strh	r3, [r4, #2]
  418e7a:	e7f8      	b.n	418e6e <_lv_txt_get_size+0xba>
  418e7c:	00418d09 	.word	0x00418d09
  418e80:	00418c29 	.word	0x00418c29

00418e84 <_lv_txt_set_text_vfmt>:
{
  418e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  418e88:	b082      	sub	sp, #8
  418e8a:	4607      	mov	r7, r0
  418e8c:	460d      	mov	r5, r1
    va_copy(ap_copy, ap);
  418e8e:	9101      	str	r1, [sp, #4]
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
  418e90:	460b      	mov	r3, r1
  418e92:	4602      	mov	r2, r0
  418e94:	2100      	movs	r1, #0
  418e96:	4608      	mov	r0, r1
  418e98:	4c0f      	ldr	r4, [pc, #60]	; (418ed8 <_lv_txt_set_text_vfmt+0x54>)
  418e9a:	47a0      	blx	r4
  418e9c:	4680      	mov	r8, r0
    text = lv_mem_alloc(len + 1);
  418e9e:	1c46      	adds	r6, r0, #1
  418ea0:	4630      	mov	r0, r6
  418ea2:	4b0e      	ldr	r3, [pc, #56]	; (418edc <_lv_txt_set_text_vfmt+0x58>)
  418ea4:	4798      	blx	r3
  418ea6:	4604      	mov	r4, r0
    LV_ASSERT_MEM(text);
  418ea8:	4b0d      	ldr	r3, [pc, #52]	; (418ee0 <_lv_txt_set_text_vfmt+0x5c>)
  418eaa:	4798      	blx	r3
  418eac:	b168      	cbz	r0, 418eca <_lv_txt_set_text_vfmt+0x46>
    if(text == NULL) {
  418eae:	b144      	cbz	r4, 418ec2 <_lv_txt_set_text_vfmt+0x3e>
    text[len] = 0; /* Ensure NULL termination */
  418eb0:	2300      	movs	r3, #0
  418eb2:	f804 3008 	strb.w	r3, [r4, r8]
    lv_vsnprintf(text, len + 1, fmt, ap);
  418eb6:	462b      	mov	r3, r5
  418eb8:	463a      	mov	r2, r7
  418eba:	4631      	mov	r1, r6
  418ebc:	4620      	mov	r0, r4
  418ebe:	4d06      	ldr	r5, [pc, #24]	; (418ed8 <_lv_txt_set_text_vfmt+0x54>)
  418ec0:	47a8      	blx	r5
}
  418ec2:	4620      	mov	r0, r4
  418ec4:	b002      	add	sp, #8
  418ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MEM(text);
  418eca:	4622      	mov	r2, r4
  418ecc:	2300      	movs	r3, #0
  418ece:	4805      	ldr	r0, [pc, #20]	; (418ee4 <_lv_txt_set_text_vfmt+0x60>)
  418ed0:	4905      	ldr	r1, [pc, #20]	; (418ee8 <_lv_txt_set_text_vfmt+0x64>)
  418ed2:	4788      	blx	r1
  418ed4:	e7fe      	b.n	418ed4 <_lv_txt_set_text_vfmt+0x50>
  418ed6:	bf00      	nop
  418ed8:	0041841d 	.word	0x0041841d
  418edc:	004174ed 	.word	0x004174ed
  418ee0:	00416da9 	.word	0x00416da9
  418ee4:	0042e54c 	.word	0x0042e54c
  418ee8:	00416db5 	.word	0x00416db5

00418eec <_lv_utils_num_to_str>:
 * @param buf pointer to a `char` buffer. The result will be stored here (max 10 elements)
 * @return same as `buf` (just for convenience)
 */
char * _lv_utils_num_to_str(int32_t num, char * buf)
{
    if(num == 0) {
  418eec:	b130      	cbz	r0, 418efc <_lv_utils_num_to_str+0x10>
{
  418eee:	b470      	push	{r4, r5, r6}
  418ef0:	4604      	mov	r4, r0
        buf[1] = '\0';
        return buf;
    }
    int8_t digitCount = 0;
    int8_t i          = 0;
    if(num < 0) {
  418ef2:	2800      	cmp	r0, #0
  418ef4:	db08      	blt.n	418f08 <_lv_utils_num_to_str+0x1c>
    int8_t i          = 0;
  418ef6:	2000      	movs	r0, #0
    int8_t digitCount = 0;
  418ef8:	4602      	mov	r2, r0
  418efa:	e01e      	b.n	418f3a <_lv_utils_num_to_str+0x4e>
        buf[0] = '0';
  418efc:	2330      	movs	r3, #48	; 0x30
  418efe:	700b      	strb	r3, [r1, #0]
        buf[1] = '\0';
  418f00:	2300      	movs	r3, #0
  418f02:	704b      	strb	r3, [r1, #1]
        buf[digitCount] = temp;
        digitCount--;
        i++;
    }
    return buf;
}
  418f04:	4608      	mov	r0, r1
  418f06:	4770      	bx	lr
        buf[digitCount++] = '-';
  418f08:	232d      	movs	r3, #45	; 0x2d
  418f0a:	700b      	strb	r3, [r1, #0]
        num               = LV_MATH_ABS(num);
  418f0c:	2800      	cmp	r0, #0
  418f0e:	bfb8      	it	lt
  418f10:	4244      	neglt	r4, r0
        ++i;
  418f12:	2001      	movs	r0, #1
        buf[digitCount++] = '-';
  418f14:	4602      	mov	r2, r0
  418f16:	e010      	b.n	418f3a <_lv_utils_num_to_str+0x4e>
        char digit        = num % 10;
  418f18:	4d12      	ldr	r5, [pc, #72]	; (418f64 <_lv_utils_num_to_str+0x78>)
  418f1a:	fb85 3504 	smull	r3, r5, r5, r4
  418f1e:	17e3      	asrs	r3, r4, #31
  418f20:	ebc3 03a5 	rsb	r3, r3, r5, asr #2
  418f24:	461e      	mov	r6, r3
  418f26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  418f2a:	005d      	lsls	r5, r3, #1
  418f2c:	1b63      	subs	r3, r4, r5
  418f2e:	b2db      	uxtb	r3, r3
        buf[digitCount++] = digit + 48;
  418f30:	1c55      	adds	r5, r2, #1
  418f32:	3330      	adds	r3, #48	; 0x30
  418f34:	548b      	strb	r3, [r1, r2]
        num /= 10;
  418f36:	4634      	mov	r4, r6
        buf[digitCount++] = digit + 48;
  418f38:	b26a      	sxtb	r2, r5
    while(num) {
  418f3a:	2c00      	cmp	r4, #0
  418f3c:	d1ec      	bne.n	418f18 <_lv_utils_num_to_str+0x2c>
    buf[digitCount] = '\0';
  418f3e:	2300      	movs	r3, #0
  418f40:	548b      	strb	r3, [r1, r2]
    digitCount--;
  418f42:	1e53      	subs	r3, r2, #1
  418f44:	b25b      	sxtb	r3, r3
    while(digitCount > i) {
  418f46:	e007      	b.n	418f58 <_lv_utils_num_to_str+0x6c>
        char temp       = buf[i];
  418f48:	5c0a      	ldrb	r2, [r1, r0]
        buf[i]          = buf[digitCount];
  418f4a:	5ccc      	ldrb	r4, [r1, r3]
  418f4c:	540c      	strb	r4, [r1, r0]
        buf[digitCount] = temp;
  418f4e:	54ca      	strb	r2, [r1, r3]
        digitCount--;
  418f50:	3b01      	subs	r3, #1
  418f52:	b25b      	sxtb	r3, r3
        i++;
  418f54:	3001      	adds	r0, #1
  418f56:	b240      	sxtb	r0, r0
    while(digitCount > i) {
  418f58:	4283      	cmp	r3, r0
  418f5a:	dcf5      	bgt.n	418f48 <_lv_utils_num_to_str+0x5c>
}
  418f5c:	4608      	mov	r0, r1
  418f5e:	bc70      	pop	{r4, r5, r6}
  418f60:	4770      	bx	lr
  418f62:	bf00      	nop
  418f64:	66666667 	.word	0x66666667

00418f68 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
  418f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  418f6c:	4681      	mov	r9, r0
  418f6e:	468a      	mov	sl, r1
  418f70:	4615      	mov	r5, r2
  418f72:	461f      	mov	r7, r3
  418f74:	f8dd 8020 	ldr.w	r8, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
  418f78:	4608      	mov	r0, r1
  418f7a:	e003      	b.n	418f84 <_lv_utils_bsearch+0x1c>
        middle += (n / 2) * size;
        if((c = (*cmp)(key, middle)) > 0) {
            n    = (n / 2) - ((n & 1) == 0);
            base = (middle += size);
        }
        else if(c < 0) {
  418f7c:	2800      	cmp	r0, #0
  418f7e:	da16      	bge.n	418fae <_lv_utils_bsearch+0x46>
            n /= 2;
            middle = base;
  418f80:	4650      	mov	r0, sl
            n /= 2;
  418f82:	4635      	mov	r5, r6
    for(middle = base; n != 0;) {
  418f84:	b185      	cbz	r5, 418fa8 <_lv_utils_bsearch+0x40>
        middle += (n / 2) * size;
  418f86:	086e      	lsrs	r6, r5, #1
  418f88:	fb07 0406 	mla	r4, r7, r6, r0
        if((c = (*cmp)(key, middle)) > 0) {
  418f8c:	4621      	mov	r1, r4
  418f8e:	4648      	mov	r0, r9
  418f90:	47c0      	blx	r8
  418f92:	2800      	cmp	r0, #0
  418f94:	ddf2      	ble.n	418f7c <_lv_utils_bsearch+0x14>
            n    = (n / 2) - ((n & 1) == 0);
  418f96:	f015 0f01 	tst.w	r5, #1
  418f9a:	bf0c      	ite	eq
  418f9c:	2501      	moveq	r5, #1
  418f9e:	2500      	movne	r5, #0
  418fa0:	1b75      	subs	r5, r6, r5
            base = (middle += size);
  418fa2:	19e0      	adds	r0, r4, r7
  418fa4:	4682      	mov	sl, r0
  418fa6:	e7ed      	b.n	418f84 <_lv_utils_bsearch+0x1c>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
  418fa8:	2000      	movs	r0, #0
  418faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return (char *)middle;
  418fae:	4620      	mov	r0, r4
}
  418fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00418fb4 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
  418fb4:	b570      	push	{r4, r5, r6, lr}
  418fb6:	4604      	mov	r4, r0
  418fb8:	460d      	mov	r5, r1
  418fba:	4616      	mov	r6, r2
    if(th->base) {
  418fbc:	6880      	ldr	r0, [r0, #8]
  418fbe:	b108      	cbz	r0, 418fc4 <apply_theme+0x10>
        apply_theme(th->base, obj, name);
  418fc0:	f7ff fff8 	bl	418fb4 <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
  418fc4:	6863      	ldr	r3, [r4, #4]
  418fc6:	b11b      	cbz	r3, 418fd0 <apply_theme+0x1c>
        th->apply_xcb(obj, name);
  418fc8:	4631      	mov	r1, r6
  418fca:	4628      	mov	r0, r5
  418fcc:	4798      	blx	r3
  418fce:	bd70      	pop	{r4, r5, r6, pc}
    }
    else if(th->apply_cb) {
  418fd0:	6823      	ldr	r3, [r4, #0]
  418fd2:	b123      	cbz	r3, 418fde <apply_theme+0x2a>
        th->apply_cb(act_theme, obj, name);
  418fd4:	4632      	mov	r2, r6
  418fd6:	4629      	mov	r1, r5
  418fd8:	4801      	ldr	r0, [pc, #4]	; (418fe0 <apply_theme+0x2c>)
  418fda:	6800      	ldr	r0, [r0, #0]
  418fdc:	4798      	blx	r3
  418fde:	bd70      	pop	{r4, r5, r6, pc}
  418fe0:	20414804 	.word	0x20414804

00418fe4 <clear_styles>:
    }
}

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
  418fe4:	b538      	push	{r3, r4, r5, lr}
  418fe6:	4604      	mov	r4, r0
    switch(name) {
  418fe8:	3901      	subs	r1, #1
  418fea:	2927      	cmp	r1, #39	; 0x27
  418fec:	f200 8150 	bhi.w	419290 <clear_styles+0x2ac>
  418ff0:	e8df f011 	tbh	[pc, r1, lsl #1]
  418ff4:	002c0028 	.word	0x002c0028
  418ff8:	0046006b 	.word	0x0046006b
  418ffc:	00380034 	.word	0x00380034
  419000:	0057012d 	.word	0x0057012d
  419004:	00ea0083 	.word	0x00ea0083
  419008:	013a0030 	.word	0x013a0030
  41900c:	014500dd 	.word	0x014500dd
  419010:	005f005b 	.word	0x005f005b
  419014:	0063003f 	.word	0x0063003f
  419018:	00670095 	.word	0x00670095
  41901c:	00d900cf 	.word	0x00d900cf
  419020:	008a0141 	.word	0x008a0141
  419024:	00cb008e 	.word	0x00cb008e
  419028:	00c40099 	.word	0x00c40099
  41902c:	01220079 	.word	0x01220079
  419030:	00720129 	.word	0x00720129
  419034:	00f4004d 	.word	0x00f4004d
  419038:	00b300a3 	.word	0x00b300a3
  41903c:	00ba0115 	.word	0x00ba0115
  419040:	01110104 	.word	0x01110104
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  419044:	2100      	movs	r1, #0
  419046:	4b93      	ldr	r3, [pc, #588]	; (419294 <clear_styles+0x2b0>)
  419048:	4798      	blx	r3
            break;
  41904a:	bd38      	pop	{r3, r4, r5, pc}
        case LV_THEME_OBJ:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  41904c:	2100      	movs	r1, #0
  41904e:	4b91      	ldr	r3, [pc, #580]	; (419294 <clear_styles+0x2b0>)
  419050:	4798      	blx	r3
            break;
  419052:	bd38      	pop	{r3, r4, r5, pc}
#if LV_USE_CONT
        case LV_THEME_CONT:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  419054:	2100      	movs	r1, #0
  419056:	4b8f      	ldr	r3, [pc, #572]	; (419294 <clear_styles+0x2b0>)
  419058:	4798      	blx	r3
            break;
  41905a:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BTN
        case LV_THEME_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  41905c:	2100      	movs	r1, #0
  41905e:	4b8d      	ldr	r3, [pc, #564]	; (419294 <clear_styles+0x2b0>)
  419060:	4798      	blx	r3
            break;
  419062:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BTNMATRIX
        case LV_THEME_BTNMATRIX:
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
  419064:	2100      	movs	r1, #0
  419066:	4d8b      	ldr	r5, [pc, #556]	; (419294 <clear_styles+0x2b0>)
  419068:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BTN);
  41906a:	2101      	movs	r1, #1
  41906c:	4620      	mov	r0, r4
  41906e:	47a8      	blx	r5
            break;
  419070:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_KEYBOARD
        case LV_THEME_KEYBOARD:
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BG);
  419072:	2100      	movs	r1, #0
  419074:	4d87      	ldr	r5, [pc, #540]	; (419294 <clear_styles+0x2b0>)
  419076:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BTN);
  419078:	2101      	movs	r1, #1
  41907a:	4620      	mov	r0, r4
  41907c:	47a8      	blx	r5
            break;
  41907e:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BAR
        case LV_THEME_BAR:
            lv_obj_clean_style_list(obj, LV_BAR_PART_BG);
  419080:	2100      	movs	r1, #0
  419082:	4d84      	ldr	r5, [pc, #528]	; (419294 <clear_styles+0x2b0>)
  419084:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BAR_PART_INDIC);
  419086:	2101      	movs	r1, #1
  419088:	4620      	mov	r0, r4
  41908a:	47a8      	blx	r5
            break;
  41908c:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SWITCH
        case LV_THEME_SWITCH:
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
  41908e:	2100      	movs	r1, #0
  419090:	4d80      	ldr	r5, [pc, #512]	; (419294 <clear_styles+0x2b0>)
  419092:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_INDIC);
  419094:	2101      	movs	r1, #1
  419096:	4620      	mov	r0, r4
  419098:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_KNOB);
  41909a:	2102      	movs	r1, #2
  41909c:	4620      	mov	r0, r4
  41909e:	47a8      	blx	r5
            break;
  4190a0:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CANVAS
        case LV_THEME_CANVAS:
            lv_obj_clean_style_list(obj, LV_CANVAS_PART_MAIN);
  4190a2:	2100      	movs	r1, #0
  4190a4:	4b7b      	ldr	r3, [pc, #492]	; (419294 <clear_styles+0x2b0>)
  4190a6:	4798      	blx	r3
            break;
  4190a8:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_IMG
        case LV_THEME_IMAGE:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
  4190aa:	2100      	movs	r1, #0
  4190ac:	4b79      	ldr	r3, [pc, #484]	; (419294 <clear_styles+0x2b0>)
  4190ae:	4798      	blx	r3
            break;
  4190b0:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_IMGBTN
        case LV_THEME_IMGBTN:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
  4190b2:	2100      	movs	r1, #0
  4190b4:	4b77      	ldr	r3, [pc, #476]	; (419294 <clear_styles+0x2b0>)
  4190b6:	4798      	blx	r3
            break;
  4190b8:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LABEL
        case LV_THEME_LABEL:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
  4190ba:	2100      	movs	r1, #0
  4190bc:	4b75      	ldr	r3, [pc, #468]	; (419294 <clear_styles+0x2b0>)
  4190be:	4798      	blx	r3
            break;
  4190c0:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LINE
        case LV_THEME_LINE:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
  4190c2:	2100      	movs	r1, #0
  4190c4:	4b73      	ldr	r3, [pc, #460]	; (419294 <clear_styles+0x2b0>)
  4190c6:	4798      	blx	r3
            break;
  4190c8:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_ARC
        case LV_THEME_ARC:
            lv_obj_clean_style_list(obj, LV_ARC_PART_BG);
  4190ca:	2100      	movs	r1, #0
  4190cc:	4d71      	ldr	r5, [pc, #452]	; (419294 <clear_styles+0x2b0>)
  4190ce:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ARC_PART_INDIC);
  4190d0:	2101      	movs	r1, #1
  4190d2:	4620      	mov	r0, r4
  4190d4:	47a8      	blx	r5
            break;
  4190d6:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SPINNER
        case LV_THEME_SPINNER:
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_BG);
  4190d8:	2100      	movs	r1, #0
  4190da:	4d6e      	ldr	r5, [pc, #440]	; (419294 <clear_styles+0x2b0>)
  4190dc:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_INDIC);
  4190de:	2101      	movs	r1, #1
  4190e0:	4620      	mov	r0, r4
  4190e2:	47a8      	blx	r5
            break;
  4190e4:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SLIDER
        case LV_THEME_SLIDER:
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_BG);
  4190e6:	2100      	movs	r1, #0
  4190e8:	4d6a      	ldr	r5, [pc, #424]	; (419294 <clear_styles+0x2b0>)
  4190ea:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_INDIC);
  4190ec:	2101      	movs	r1, #1
  4190ee:	4620      	mov	r0, r4
  4190f0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_KNOB);
  4190f2:	2102      	movs	r1, #2
  4190f4:	4620      	mov	r0, r4
  4190f6:	47a8      	blx	r5
            break;
  4190f8:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CHECKBOX
        case LV_THEME_CHECKBOX:
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
  4190fa:	2100      	movs	r1, #0
  4190fc:	4d65      	ldr	r5, [pc, #404]	; (419294 <clear_styles+0x2b0>)
  4190fe:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BULLET);
  419100:	2140      	movs	r1, #64	; 0x40
  419102:	4620      	mov	r0, r4
  419104:	47a8      	blx	r5
            break;
  419106:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_MSGBOX
        case LV_THEME_MSGBOX:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BG);
  419108:	2100      	movs	r1, #0
  41910a:	4b62      	ldr	r3, [pc, #392]	; (419294 <clear_styles+0x2b0>)
  41910c:	4798      	blx	r3
            break;
  41910e:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_MSGBOX_BTNS:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN_BG);
  419110:	2140      	movs	r1, #64	; 0x40
  419112:	4d60      	ldr	r5, [pc, #384]	; (419294 <clear_styles+0x2b0>)
  419114:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN);
  419116:	2141      	movs	r1, #65	; 0x41
  419118:	4620      	mov	r0, r4
  41911a:	47a8      	blx	r5
            break;
  41911c:	bd38      	pop	{r3, r4, r5, pc}

#endif
#if LV_USE_LED
        case LV_THEME_LED:
            lv_obj_clean_style_list(obj, LV_LED_PART_MAIN);
  41911e:	2100      	movs	r1, #0
  419120:	4b5c      	ldr	r3, [pc, #368]	; (419294 <clear_styles+0x2b0>)
  419122:	4798      	blx	r3
            break;
  419124:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_PAGE
        case LV_THEME_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
  419126:	2100      	movs	r1, #0
  419128:	4d5a      	ldr	r5, [pc, #360]	; (419294 <clear_styles+0x2b0>)
  41912a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  41912c:	2140      	movs	r1, #64	; 0x40
  41912e:	4620      	mov	r0, r4
  419130:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLBAR);
  419132:	2101      	movs	r1, #1
  419134:	4620      	mov	r0, r4
  419136:	47a8      	blx	r5
            break;
  419138:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_TABVIEW
        case LV_THEME_TABVIEW:
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG);
  41913a:	2100      	movs	r1, #0
  41913c:	4d55      	ldr	r5, [pc, #340]	; (419294 <clear_styles+0x2b0>)
  41913e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG_SCROLLABLE);
  419140:	2140      	movs	r1, #64	; 0x40
  419142:	4620      	mov	r0, r4
  419144:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BG);
  419146:	2141      	movs	r1, #65	; 0x41
  419148:	4620      	mov	r0, r4
  41914a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_INDIC);
  41914c:	2143      	movs	r1, #67	; 0x43
  41914e:	4620      	mov	r0, r4
  419150:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
  419152:	2142      	movs	r1, #66	; 0x42
  419154:	4620      	mov	r0, r4
  419156:	47a8      	blx	r5
            break;
  419158:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_TABVIEW_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
  41915a:	2100      	movs	r1, #0
  41915c:	4d4d      	ldr	r5, [pc, #308]	; (419294 <clear_styles+0x2b0>)
  41915e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  419160:	2140      	movs	r1, #64	; 0x40
  419162:	4620      	mov	r0, r4
  419164:	47a8      	blx	r5
            break;
  419166:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_TILEVIEW
        case LV_THEME_TILEVIEW:
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_BG);
  419168:	2100      	movs	r1, #0
  41916a:	4d4a      	ldr	r5, [pc, #296]	; (419294 <clear_styles+0x2b0>)
  41916c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
  41916e:	2101      	movs	r1, #1
  419170:	4620      	mov	r0, r4
  419172:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
  419174:	2102      	movs	r1, #2
  419176:	4620      	mov	r0, r4
  419178:	47a8      	blx	r5
            break;
  41917a:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_ROLLER
        case LV_THEME_ROLLER:
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_BG);
  41917c:	2100      	movs	r1, #0
  41917e:	4d45      	ldr	r5, [pc, #276]	; (419294 <clear_styles+0x2b0>)
  419180:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_SELECTED);
  419182:	2103      	movs	r1, #3
  419184:	4620      	mov	r0, r4
  419186:	47a8      	blx	r5
            break;
  419188:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_OBJMASK
        case LV_THEME_OBJMASK:
            lv_obj_clean_style_list(obj, LV_OBJMASK_PART_MAIN);
  41918a:	2100      	movs	r1, #0
  41918c:	4b41      	ldr	r3, [pc, #260]	; (419294 <clear_styles+0x2b0>)
  41918e:	4798      	blx	r3
            break;
  419190:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LIST
        case LV_THEME_LIST:
            lv_obj_clean_style_list(obj, LV_LIST_PART_BG);
  419192:	2100      	movs	r1, #0
  419194:	4d3f      	ldr	r5, [pc, #252]	; (419294 <clear_styles+0x2b0>)
  419196:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLABLE);
  419198:	2140      	movs	r1, #64	; 0x40
  41919a:	4620      	mov	r0, r4
  41919c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLBAR);
  41919e:	2101      	movs	r1, #1
  4191a0:	4620      	mov	r0, r4
  4191a2:	47a8      	blx	r5
            break;
  4191a4:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_LIST_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  4191a6:	2100      	movs	r1, #0
  4191a8:	4b3a      	ldr	r3, [pc, #232]	; (419294 <clear_styles+0x2b0>)
  4191aa:	4798      	blx	r3
            break;
  4191ac:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_DROPDOWN
        case LV_THEME_DROPDOWN:
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_MAIN);
  4191ae:	2100      	movs	r1, #0
  4191b0:	4d38      	ldr	r5, [pc, #224]	; (419294 <clear_styles+0x2b0>)
  4191b2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_LIST);
  4191b4:	2140      	movs	r1, #64	; 0x40
  4191b6:	4620      	mov	r0, r4
  4191b8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
  4191ba:	2141      	movs	r1, #65	; 0x41
  4191bc:	4620      	mov	r0, r4
  4191be:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SELECTED);
  4191c0:	2142      	movs	r1, #66	; 0x42
  4191c2:	4620      	mov	r0, r4
  4191c4:	47a8      	blx	r5
            break;
  4191c6:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CHART
        case LV_THEME_CHART:
            lv_obj_clean_style_list(obj, LV_CHART_PART_BG);
  4191c8:	2100      	movs	r1, #0
  4191ca:	4d32      	ldr	r5, [pc, #200]	; (419294 <clear_styles+0x2b0>)
  4191cc:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES_BG);
  4191ce:	2101      	movs	r1, #1
  4191d0:	4620      	mov	r0, r4
  4191d2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES);
  4191d4:	2102      	movs	r1, #2
  4191d6:	4620      	mov	r0, r4
  4191d8:	47a8      	blx	r5
            break;
  4191da:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_TABLE
        case LV_THEME_TABLE:
            lv_obj_clean_style_list(obj, LV_TABLE_PART_BG);
  4191dc:	2100      	movs	r1, #0
  4191de:	4d2d      	ldr	r5, [pc, #180]	; (419294 <clear_styles+0x2b0>)
  4191e0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL1);
  4191e2:	2101      	movs	r1, #1
  4191e4:	4620      	mov	r0, r4
  4191e6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL2);
  4191e8:	2102      	movs	r1, #2
  4191ea:	4620      	mov	r0, r4
  4191ec:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL3);
  4191ee:	2103      	movs	r1, #3
  4191f0:	4620      	mov	r0, r4
  4191f2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL4);
  4191f4:	2104      	movs	r1, #4
  4191f6:	4620      	mov	r0, r4
  4191f8:	47a8      	blx	r5
            break;
  4191fa:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_WIN
        case LV_THEME_WIN:
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
  4191fc:	2100      	movs	r1, #0
  4191fe:	4d25      	ldr	r5, [pc, #148]	; (419294 <clear_styles+0x2b0>)
  419200:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
  419202:	2142      	movs	r1, #66	; 0x42
  419204:	4620      	mov	r0, r4
  419206:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
  419208:	2141      	movs	r1, #65	; 0x41
  41920a:	4620      	mov	r0, r4
  41920c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
  41920e:	2140      	movs	r1, #64	; 0x40
  419210:	4620      	mov	r0, r4
  419212:	47a8      	blx	r5
            break;
  419214:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_WIN_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  419216:	2100      	movs	r1, #0
  419218:	4b1e      	ldr	r3, [pc, #120]	; (419294 <clear_styles+0x2b0>)
  41921a:	4798      	blx	r3
            break;
  41921c:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_TEXTAREA
        case LV_THEME_TEXTAREA:
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
  41921e:	2100      	movs	r1, #0
  419220:	4d1c      	ldr	r5, [pc, #112]	; (419294 <clear_styles+0x2b0>)
  419222:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
  419224:	2104      	movs	r1, #4
  419226:	4620      	mov	r0, r4
  419228:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
  41922a:	2103      	movs	r1, #3
  41922c:	4620      	mov	r0, r4
  41922e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
  419230:	2101      	movs	r1, #1
  419232:	4620      	mov	r0, r4
  419234:	47a8      	blx	r5
            break;
  419236:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SPINBOX
        case LV_THEME_SPINBOX:
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_BG);
  419238:	2100      	movs	r1, #0
  41923a:	4d16      	ldr	r5, [pc, #88]	; (419294 <clear_styles+0x2b0>)
  41923c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_CURSOR);
  41923e:	2103      	movs	r1, #3
  419240:	4620      	mov	r0, r4
  419242:	47a8      	blx	r5
            break;
  419244:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_SPINBOX_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  419246:	2100      	movs	r1, #0
  419248:	4b12      	ldr	r3, [pc, #72]	; (419294 <clear_styles+0x2b0>)
  41924a:	4798      	blx	r3
            break;
  41924c:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CALENDAR
        case LV_THEME_CALENDAR:
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
  41924e:	2100      	movs	r1, #0
  419250:	4d10      	ldr	r5, [pc, #64]	; (419294 <clear_styles+0x2b0>)
  419252:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
  419254:	2103      	movs	r1, #3
  419256:	4620      	mov	r0, r4
  419258:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_HEADER);
  41925a:	2101      	movs	r1, #1
  41925c:	4620      	mov	r0, r4
  41925e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
  419260:	2102      	movs	r1, #2
  419262:	4620      	mov	r0, r4
  419264:	47a8      	blx	r5
            break;
  419266:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_CPICKER
        case LV_THEME_CPICKER:
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_MAIN);
  419268:	2100      	movs	r1, #0
  41926a:	4d0a      	ldr	r5, [pc, #40]	; (419294 <clear_styles+0x2b0>)
  41926c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_KNOB);
  41926e:	2101      	movs	r1, #1
  419270:	4620      	mov	r0, r4
  419272:	47a8      	blx	r5
            break;
  419274:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LINEMETER
        case LV_THEME_LINEMETER:
            lv_obj_clean_style_list(obj, LV_LINEMETER_PART_MAIN);
  419276:	2100      	movs	r1, #0
  419278:	4b06      	ldr	r3, [pc, #24]	; (419294 <clear_styles+0x2b0>)
  41927a:	4798      	blx	r3
            break;
  41927c:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_GAUGE
        case LV_THEME_GAUGE:
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAIN);
  41927e:	2100      	movs	r1, #0
  419280:	4d04      	ldr	r5, [pc, #16]	; (419294 <clear_styles+0x2b0>)
  419282:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAJOR);
  419284:	2101      	movs	r1, #1
  419286:	4620      	mov	r0, r4
  419288:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_NEEDLE);
  41928a:	2102      	movs	r1, #2
  41928c:	4620      	mov	r0, r4
  41928e:	47a8      	blx	r5
  419290:	bd38      	pop	{r3, r4, r5, pc}
  419292:	bf00      	nop
  419294:	00405c7d 	.word	0x00405c7d

00419298 <lv_theme_set_act>:
    act_theme = th;
  419298:	4b01      	ldr	r3, [pc, #4]	; (4192a0 <lv_theme_set_act+0x8>)
  41929a:	6018      	str	r0, [r3, #0]
  41929c:	4770      	bx	lr
  41929e:	bf00      	nop
  4192a0:	20414804 	.word	0x20414804

004192a4 <lv_theme_apply>:
{
  4192a4:	b538      	push	{r3, r4, r5, lr}
  4192a6:	4604      	mov	r4, r0
  4192a8:	460d      	mov	r5, r1
    clear_styles(obj, name);
  4192aa:	4b04      	ldr	r3, [pc, #16]	; (4192bc <lv_theme_apply+0x18>)
  4192ac:	4798      	blx	r3
    apply_theme(act_theme, obj, name);
  4192ae:	462a      	mov	r2, r5
  4192b0:	4621      	mov	r1, r4
  4192b2:	4b03      	ldr	r3, [pc, #12]	; (4192c0 <lv_theme_apply+0x1c>)
  4192b4:	6818      	ldr	r0, [r3, #0]
  4192b6:	4b03      	ldr	r3, [pc, #12]	; (4192c4 <lv_theme_apply+0x20>)
  4192b8:	4798      	blx	r3
  4192ba:	bd38      	pop	{r3, r4, r5, pc}
  4192bc:	00418fe5 	.word	0x00418fe5
  4192c0:	20414804 	.word	0x20414804
  4192c4:	00418fb5 	.word	0x00418fb5

004192c8 <lv_theme_get_font_normal>:
    return act_theme->font_normal;
  4192c8:	4b01      	ldr	r3, [pc, #4]	; (4192d0 <lv_theme_get_font_normal+0x8>)
  4192ca:	681b      	ldr	r3, [r3, #0]
}
  4192cc:	6958      	ldr	r0, [r3, #20]
  4192ce:	4770      	bx	lr
  4192d0:	20414804 	.word	0x20414804

004192d4 <theme_apply>:

    return &theme;
}

static void theme_apply(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
  4192d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4192d8:	460c      	mov	r4, r1
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
  4192da:	3a01      	subs	r2, #1
  4192dc:	2a27      	cmp	r2, #39	; 0x27
  4192de:	d831      	bhi.n	419344 <theme_apply+0x70>
  4192e0:	e8df f012 	tbh	[pc, r2, lsl #1]
  4192e4:	00370028 	.word	0x00370028
  4192e8:	008800ae 	.word	0x008800ae
  4192ec:	0055004b 	.word	0x0055004b
  4192f0:	003002af 	.word	0x003002af
  4192f4:	01fd00fd 	.word	0x01fd00fd
  4192f8:	02cb0041 	.word	0x02cb0041
  4192fc:	02ea01d3 	.word	0x02ea01d3
  419300:	00300030 	.word	0x00300030
  419304:	0030006f 	.word	0x0030006f
  419308:	00300131 	.word	0x00300131
  41930c:	01c901b4 	.word	0x01c901b4
  419310:	011202db 	.word	0x011202db
  419314:	01af0121 	.word	0x01af0121
  419318:	019a013b 	.word	0x019a013b
  41931c:	028500e2 	.word	0x028500e2
  419320:	00d202a0 	.word	0x00d202a0
  419324:	02270098 	.word	0x02270098
  419328:	017b0160 	.word	0x017b0160
  41932c:	01850264 	.word	0x01850264
  419330:	025a023f 	.word	0x025a023f
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
  419334:	2100      	movs	r1, #0
  419336:	4620      	mov	r0, r4
  419338:	4b96      	ldr	r3, [pc, #600]	; (419594 <theme_apply+0x2c0>)
  41933a:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->scr);
  41933c:	4b96      	ldr	r3, [pc, #600]	; (419598 <theme_apply+0x2c4>)
  41933e:	6819      	ldr	r1, [r3, #0]
  419340:	4b96      	ldr	r3, [pc, #600]	; (41959c <theme_apply+0x2c8>)
  419342:	4798      	blx	r3
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  419344:	22ff      	movs	r2, #255	; 0xff
  419346:	4611      	mov	r1, r2
  419348:	4620      	mov	r0, r4
  41934a:	4b95      	ldr	r3, [pc, #596]	; (4195a0 <theme_apply+0x2cc>)
  41934c:	4798      	blx	r3
  41934e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
  419352:	2100      	movs	r1, #0
  419354:	4620      	mov	r0, r4
  419356:	4b8f      	ldr	r3, [pc, #572]	; (419594 <theme_apply+0x2c0>)
  419358:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
  41935a:	4b8f      	ldr	r3, [pc, #572]	; (419598 <theme_apply+0x2c4>)
  41935c:	6819      	ldr	r1, [r3, #0]
  41935e:	3104      	adds	r1, #4
  419360:	4b8e      	ldr	r3, [pc, #568]	; (41959c <theme_apply+0x2c8>)
  419362:	4798      	blx	r3
            break;
  419364:	e7ee      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CONT_PART_MAIN);
  419366:	2100      	movs	r1, #0
  419368:	4620      	mov	r0, r4
  41936a:	4b8a      	ldr	r3, [pc, #552]	; (419594 <theme_apply+0x2c0>)
  41936c:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
  41936e:	4b8a      	ldr	r3, [pc, #552]	; (419598 <theme_apply+0x2c4>)
  419370:	6819      	ldr	r1, [r3, #0]
  419372:	3104      	adds	r1, #4
  419374:	4b89      	ldr	r3, [pc, #548]	; (41959c <theme_apply+0x2c8>)
  419376:	4798      	blx	r3
            break;
  419378:	e7e4      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  41937a:	2100      	movs	r1, #0
  41937c:	4620      	mov	r0, r4
  41937e:	4b85      	ldr	r3, [pc, #532]	; (419594 <theme_apply+0x2c0>)
  419380:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->btn);
  419382:	4b85      	ldr	r3, [pc, #532]	; (419598 <theme_apply+0x2c4>)
  419384:	6819      	ldr	r1, [r3, #0]
  419386:	3110      	adds	r1, #16
  419388:	4b84      	ldr	r3, [pc, #528]	; (41959c <theme_apply+0x2c8>)
  41938a:	4798      	blx	r3
            break;
  41938c:	e7da      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
  41938e:	2100      	movs	r1, #0
  419390:	4620      	mov	r0, r4
  419392:	4f80      	ldr	r7, [pc, #512]	; (419594 <theme_apply+0x2c0>)
  419394:	47b8      	blx	r7
  419396:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  419398:	4e7f      	ldr	r6, [pc, #508]	; (419598 <theme_apply+0x2c4>)
  41939a:	6831      	ldr	r1, [r6, #0]
  41939c:	3104      	adds	r1, #4
  41939e:	4d7f      	ldr	r5, [pc, #508]	; (41959c <theme_apply+0x2c8>)
  4193a0:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  4193a2:	6831      	ldr	r1, [r6, #0]
  4193a4:	3118      	adds	r1, #24
  4193a6:	4640      	mov	r0, r8
  4193a8:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
  4193aa:	2101      	movs	r1, #1
  4193ac:	4620      	mov	r0, r4
  4193ae:	47b8      	blx	r7
  4193b0:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  4193b2:	6831      	ldr	r1, [r6, #0]
  4193b4:	3104      	adds	r1, #4
  4193b6:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  4193b8:	6831      	ldr	r1, [r6, #0]
  4193ba:	3108      	adds	r1, #8
  4193bc:	4638      	mov	r0, r7
  4193be:	47a8      	blx	r5
            break;
  4193c0:	e7c0      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
  4193c2:	2100      	movs	r1, #0
  4193c4:	4620      	mov	r0, r4
  4193c6:	4f73      	ldr	r7, [pc, #460]	; (419594 <theme_apply+0x2c0>)
  4193c8:	47b8      	blx	r7
  4193ca:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->scr);
  4193cc:	4e72      	ldr	r6, [pc, #456]	; (419598 <theme_apply+0x2c4>)
  4193ce:	6831      	ldr	r1, [r6, #0]
  4193d0:	4d72      	ldr	r5, [pc, #456]	; (41959c <theme_apply+0x2c8>)
  4193d2:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->kb_bg);
  4193d4:	6831      	ldr	r1, [r6, #0]
  4193d6:	316c      	adds	r1, #108	; 0x6c
  4193d8:	4640      	mov	r0, r8
  4193da:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BTN);
  4193dc:	2101      	movs	r1, #1
  4193de:	4620      	mov	r0, r4
  4193e0:	47b8      	blx	r7
  4193e2:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  4193e4:	6831      	ldr	r1, [r6, #0]
  4193e6:	3104      	adds	r1, #4
  4193e8:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  4193ea:	6831      	ldr	r1, [r6, #0]
  4193ec:	3108      	adds	r1, #8
  4193ee:	4638      	mov	r0, r7
  4193f0:	47a8      	blx	r5
            break;
  4193f2:	e7a7      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
  4193f4:	2100      	movs	r1, #0
  4193f6:	4620      	mov	r0, r4
  4193f8:	4f66      	ldr	r7, [pc, #408]	; (419594 <theme_apply+0x2c0>)
  4193fa:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
  4193fc:	4e66      	ldr	r6, [pc, #408]	; (419598 <theme_apply+0x2c4>)
  4193fe:	6831      	ldr	r1, [r6, #0]
  419400:	3128      	adds	r1, #40	; 0x28
  419402:	4d66      	ldr	r5, [pc, #408]	; (41959c <theme_apply+0x2c8>)
  419404:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
  419406:	2101      	movs	r1, #1
  419408:	4620      	mov	r0, r4
  41940a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  41940c:	6831      	ldr	r1, [r6, #0]
  41940e:	312c      	adds	r1, #44	; 0x2c
  419410:	47a8      	blx	r5
            break;
  419412:	e797      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
  419414:	2100      	movs	r1, #0
  419416:	4620      	mov	r0, r4
  419418:	4f5e      	ldr	r7, [pc, #376]	; (419594 <theme_apply+0x2c0>)
  41941a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
  41941c:	4e5e      	ldr	r6, [pc, #376]	; (419598 <theme_apply+0x2c4>)
  41941e:	6831      	ldr	r1, [r6, #0]
  419420:	3128      	adds	r1, #40	; 0x28
  419422:	4d5e      	ldr	r5, [pc, #376]	; (41959c <theme_apply+0x2c8>)
  419424:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
  419426:	2101      	movs	r1, #1
  419428:	4620      	mov	r0, r4
  41942a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  41942c:	6831      	ldr	r1, [r6, #0]
  41942e:	312c      	adds	r1, #44	; 0x2c
  419430:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
  419432:	2102      	movs	r1, #2
  419434:	4620      	mov	r0, r4
  419436:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sw_knob);
  419438:	6831      	ldr	r1, [r6, #0]
  41943a:	31a0      	adds	r1, #160	; 0xa0
  41943c:	47a8      	blx	r5
            break;
  41943e:	e781      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
  419440:	2100      	movs	r1, #0
  419442:	4620      	mov	r0, r4
  419444:	4f53      	ldr	r7, [pc, #332]	; (419594 <theme_apply+0x2c0>)
  419446:	47b8      	blx	r7
  419448:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  41944a:	4e53      	ldr	r6, [pc, #332]	; (419598 <theme_apply+0x2c4>)
  41944c:	6831      	ldr	r1, [r6, #0]
  41944e:	3104      	adds	r1, #4
  419450:	4d52      	ldr	r5, [pc, #328]	; (41959c <theme_apply+0x2c8>)
  419452:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_bg);
  419454:	6831      	ldr	r1, [r6, #0]
  419456:	3120      	adds	r1, #32
  419458:	4640      	mov	r0, r8
  41945a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
  41945c:	2101      	movs	r1, #1
  41945e:	4620      	mov	r0, r4
  419460:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
  419462:	6831      	ldr	r1, [r6, #0]
  419464:	311c      	adds	r1, #28
  419466:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ARC_PART_KNOB);
  419468:	2102      	movs	r1, #2
  41946a:	4620      	mov	r0, r4
  41946c:	47b8      	blx	r7
  41946e:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  419470:	6831      	ldr	r1, [r6, #0]
  419472:	3104      	adds	r1, #4
  419474:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  419476:	6831      	ldr	r1, [r6, #0]
  419478:	3108      	adds	r1, #8
  41947a:	4638      	mov	r0, r7
  41947c:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_knob);
  41947e:	6831      	ldr	r1, [r6, #0]
  419480:	3124      	adds	r1, #36	; 0x24
  419482:	4638      	mov	r0, r7
  419484:	47a8      	blx	r5
            break;
  419486:	e75d      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_BG);
  419488:	2100      	movs	r1, #0
  41948a:	4620      	mov	r0, r4
  41948c:	4f41      	ldr	r7, [pc, #260]	; (419594 <theme_apply+0x2c0>)
  41948e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_bg);
  419490:	4e41      	ldr	r6, [pc, #260]	; (419598 <theme_apply+0x2c4>)
  419492:	6831      	ldr	r1, [r6, #0]
  419494:	3120      	adds	r1, #32
  419496:	4d41      	ldr	r5, [pc, #260]	; (41959c <theme_apply+0x2c8>)
  419498:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_INDIC);
  41949a:	2101      	movs	r1, #1
  41949c:	4620      	mov	r0, r4
  41949e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
  4194a0:	6831      	ldr	r1, [r6, #0]
  4194a2:	311c      	adds	r1, #28
  4194a4:	47a8      	blx	r5
            break;
  4194a6:	e74d      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
  4194a8:	2100      	movs	r1, #0
  4194aa:	4620      	mov	r0, r4
  4194ac:	4f39      	ldr	r7, [pc, #228]	; (419594 <theme_apply+0x2c0>)
  4194ae:	47b8      	blx	r7
  4194b0:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bar_bg);
  4194b2:	4e39      	ldr	r6, [pc, #228]	; (419598 <theme_apply+0x2c4>)
  4194b4:	6831      	ldr	r1, [r6, #0]
  4194b6:	3128      	adds	r1, #40	; 0x28
  4194b8:	4d38      	ldr	r5, [pc, #224]	; (41959c <theme_apply+0x2c8>)
  4194ba:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->slider_bg);
  4194bc:	6831      	ldr	r1, [r6, #0]
  4194be:	3198      	adds	r1, #152	; 0x98
  4194c0:	4640      	mov	r0, r8
  4194c2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
  4194c4:	2101      	movs	r1, #1
  4194c6:	4620      	mov	r0, r4
  4194c8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  4194ca:	6831      	ldr	r1, [r6, #0]
  4194cc:	312c      	adds	r1, #44	; 0x2c
  4194ce:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
  4194d0:	2102      	movs	r1, #2
  4194d2:	4620      	mov	r0, r4
  4194d4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->slider_knob);
  4194d6:	6831      	ldr	r1, [r6, #0]
  4194d8:	3194      	adds	r1, #148	; 0x94
  4194da:	47a8      	blx	r5
            break;
  4194dc:	e732      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
  4194de:	2100      	movs	r1, #0
  4194e0:	4620      	mov	r0, r4
  4194e2:	4f2c      	ldr	r7, [pc, #176]	; (419594 <theme_apply+0x2c0>)
  4194e4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cb_bg);
  4194e6:	4e2c      	ldr	r6, [pc, #176]	; (419598 <theme_apply+0x2c4>)
  4194e8:	6831      	ldr	r1, [r6, #0]
  4194ea:	3150      	adds	r1, #80	; 0x50
  4194ec:	4d2b      	ldr	r5, [pc, #172]	; (41959c <theme_apply+0x2c8>)
  4194ee:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
  4194f0:	2140      	movs	r1, #64	; 0x40
  4194f2:	4620      	mov	r0, r4
  4194f4:	47b8      	blx	r7
  4194f6:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->btn);
  4194f8:	6831      	ldr	r1, [r6, #0]
  4194fa:	3110      	adds	r1, #16
  4194fc:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->cb_bullet);
  4194fe:	6831      	ldr	r1, [r6, #0]
  419500:	3154      	adds	r1, #84	; 0x54
  419502:	4638      	mov	r0, r7
  419504:	47a8      	blx	r5
            break;
  419506:	e71d      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
  419508:	2100      	movs	r1, #0
  41950a:	4620      	mov	r0, r4
  41950c:	4b21      	ldr	r3, [pc, #132]	; (419594 <theme_apply+0x2c0>)
  41950e:	4798      	blx	r3
  419510:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  419512:	4e21      	ldr	r6, [pc, #132]	; (419598 <theme_apply+0x2c4>)
  419514:	6831      	ldr	r1, [r6, #0]
  419516:	3104      	adds	r1, #4
  419518:	4d20      	ldr	r5, [pc, #128]	; (41959c <theme_apply+0x2c8>)
  41951a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->mbox_bg);
  41951c:	6831      	ldr	r1, [r6, #0]
  41951e:	3180      	adds	r1, #128	; 0x80
  419520:	4638      	mov	r0, r7
  419522:	47a8      	blx	r5
            break;
  419524:	e70e      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN_BG);
  419526:	2140      	movs	r1, #64	; 0x40
  419528:	4620      	mov	r0, r4
  41952a:	4f1a      	ldr	r7, [pc, #104]	; (419594 <theme_apply+0x2c0>)
  41952c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_small);
  41952e:	4e1a      	ldr	r6, [pc, #104]	; (419598 <theme_apply+0x2c4>)
  419530:	6831      	ldr	r1, [r6, #0]
  419532:	3118      	adds	r1, #24
  419534:	4d19      	ldr	r5, [pc, #100]	; (41959c <theme_apply+0x2c8>)
  419536:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN);
  419538:	2141      	movs	r1, #65	; 0x41
  41953a:	4620      	mov	r0, r4
  41953c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->btn);
  41953e:	6831      	ldr	r1, [r6, #0]
  419540:	3110      	adds	r1, #16
  419542:	47a8      	blx	r5
            break;
  419544:	e6fe      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LED_PART_MAIN);
  419546:	2100      	movs	r1, #0
  419548:	4620      	mov	r0, r4
  41954a:	4b12      	ldr	r3, [pc, #72]	; (419594 <theme_apply+0x2c0>)
  41954c:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->led);
  41954e:	4b12      	ldr	r3, [pc, #72]	; (419598 <theme_apply+0x2c4>)
  419550:	6819      	ldr	r1, [r3, #0]
  419552:	3170      	adds	r1, #112	; 0x70
  419554:	4b11      	ldr	r3, [pc, #68]	; (41959c <theme_apply+0x2c8>)
  419556:	4798      	blx	r3
            break;
  419558:	e6f4      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
  41955a:	2100      	movs	r1, #0
  41955c:	4620      	mov	r0, r4
  41955e:	4f0d      	ldr	r7, [pc, #52]	; (419594 <theme_apply+0x2c0>)
  419560:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
  419562:	4e0d      	ldr	r6, [pc, #52]	; (419598 <theme_apply+0x2c4>)
  419564:	6831      	ldr	r1, [r6, #0]
  419566:	3104      	adds	r1, #4
  419568:	4d0c      	ldr	r5, [pc, #48]	; (41959c <theme_apply+0x2c8>)
  41956a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  41956c:	2140      	movs	r1, #64	; 0x40
  41956e:	4620      	mov	r0, r4
  419570:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_inner);
  419572:	6831      	ldr	r1, [r6, #0]
  419574:	3114      	adds	r1, #20
  419576:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLBAR);
  419578:	2101      	movs	r1, #1
  41957a:	4620      	mov	r0, r4
  41957c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  41957e:	6831      	ldr	r1, [r6, #0]
  419580:	3184      	adds	r1, #132	; 0x84
  419582:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
  419584:	2102      	movs	r1, #2
  419586:	4620      	mov	r0, r4
  419588:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
  41958a:	6831      	ldr	r1, [r6, #0]
  41958c:	3188      	adds	r1, #136	; 0x88
  41958e:	47a8      	blx	r5
            break;
  419590:	e6d8      	b.n	419344 <theme_apply+0x70>
  419592:	bf00      	nop
  419594:	00405bb5 	.word	0x00405bb5
  419598:	2041480c 	.word	0x2041480c
  41959c:	00409e1d 	.word	0x00409e1d
  4195a0:	00407809 	.word	0x00407809
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_BG);
  4195a4:	2100      	movs	r1, #0
  4195a6:	4620      	mov	r0, r4
  4195a8:	4f9b      	ldr	r7, [pc, #620]	; (419818 <theme_apply+0x544>)
  4195aa:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  4195ac:	4e9b      	ldr	r6, [pc, #620]	; (41981c <theme_apply+0x548>)
  4195ae:	6831      	ldr	r1, [r6, #0]
  4195b0:	4d9b      	ldr	r5, [pc, #620]	; (419820 <theme_apply+0x54c>)
  4195b2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BG);
  4195b4:	2141      	movs	r1, #65	; 0x41
  4195b6:	4620      	mov	r0, r4
  4195b8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
  4195ba:	6831      	ldr	r1, [r6, #0]
  4195bc:	31ac      	adds	r1, #172	; 0xac
  4195be:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_INDIC);
  4195c0:	2143      	movs	r1, #67	; 0x43
  4195c2:	4620      	mov	r0, r4
  4195c4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_indic);
  4195c6:	6831      	ldr	r1, [r6, #0]
  4195c8:	31b0      	adds	r1, #176	; 0xb0
  4195ca:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
  4195cc:	2142      	movs	r1, #66	; 0x42
  4195ce:	4620      	mov	r0, r4
  4195d0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns);
  4195d2:	6831      	ldr	r1, [r6, #0]
  4195d4:	31a8      	adds	r1, #168	; 0xa8
  4195d6:	47a8      	blx	r5
            break;
  4195d8:	e6b4      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  4195da:	2140      	movs	r1, #64	; 0x40
  4195dc:	4620      	mov	r0, r4
  4195de:	4b8e      	ldr	r3, [pc, #568]	; (419818 <theme_apply+0x544>)
  4195e0:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
  4195e2:	4b8e      	ldr	r3, [pc, #568]	; (41981c <theme_apply+0x548>)
  4195e4:	6819      	ldr	r1, [r3, #0]
  4195e6:	31b4      	adds	r1, #180	; 0xb4
  4195e8:	4b8d      	ldr	r3, [pc, #564]	; (419820 <theme_apply+0x54c>)
  4195ea:	4798      	blx	r3
            break;
  4195ec:	e6aa      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_BG);
  4195ee:	2100      	movs	r1, #0
  4195f0:	4620      	mov	r0, r4
  4195f2:	4f89      	ldr	r7, [pc, #548]	; (419818 <theme_apply+0x544>)
  4195f4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  4195f6:	4e89      	ldr	r6, [pc, #548]	; (41981c <theme_apply+0x548>)
  4195f8:	6831      	ldr	r1, [r6, #0]
  4195fa:	4d89      	ldr	r5, [pc, #548]	; (419820 <theme_apply+0x54c>)
  4195fc:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
  4195fe:	2101      	movs	r1, #1
  419600:	4620      	mov	r0, r4
  419602:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  419604:	6831      	ldr	r1, [r6, #0]
  419606:	3184      	adds	r1, #132	; 0x84
  419608:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
  41960a:	2102      	movs	r1, #2
  41960c:	4620      	mov	r0, r4
  41960e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
  419610:	6831      	ldr	r1, [r6, #0]
  419612:	3188      	adds	r1, #136	; 0x88
  419614:	47a8      	blx	r5
            break;
  419616:	e695      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
  419618:	2100      	movs	r1, #0
  41961a:	4620      	mov	r0, r4
  41961c:	4f7e      	ldr	r7, [pc, #504]	; (419818 <theme_apply+0x544>)
  41961e:	47b8      	blx	r7
  419620:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  419622:	4e7e      	ldr	r6, [pc, #504]	; (41981c <theme_apply+0x548>)
  419624:	6831      	ldr	r1, [r6, #0]
  419626:	3104      	adds	r1, #4
  419628:	4d7d      	ldr	r5, [pc, #500]	; (419820 <theme_apply+0x54c>)
  41962a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->roller_bg);
  41962c:	6831      	ldr	r1, [r6, #0]
  41962e:	318c      	adds	r1, #140	; 0x8c
  419630:	4640      	mov	r0, r8
  419632:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_SELECTED);
  419634:	2103      	movs	r1, #3
  419636:	4620      	mov	r0, r4
  419638:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->roller_sel);
  41963a:	6831      	ldr	r1, [r6, #0]
  41963c:	3190      	adds	r1, #144	; 0x90
  41963e:	47a8      	blx	r5
            break;
  419640:	e680      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
  419642:	2100      	movs	r1, #0
  419644:	4620      	mov	r0, r4
  419646:	4b74      	ldr	r3, [pc, #464]	; (419818 <theme_apply+0x544>)
  419648:	4798      	blx	r3
            break;
  41964a:	e67b      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
  41964c:	2100      	movs	r1, #0
  41964e:	4620      	mov	r0, r4
  419650:	4f71      	ldr	r7, [pc, #452]	; (419818 <theme_apply+0x544>)
  419652:	47b8      	blx	r7
  419654:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  419656:	4e71      	ldr	r6, [pc, #452]	; (41981c <theme_apply+0x548>)
  419658:	6831      	ldr	r1, [r6, #0]
  41965a:	3104      	adds	r1, #4
  41965c:	4d70      	ldr	r5, [pc, #448]	; (419820 <theme_apply+0x54c>)
  41965e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->list_bg);
  419660:	6831      	ldr	r1, [r6, #0]
  419662:	3178      	adds	r1, #120	; 0x78
  419664:	4640      	mov	r0, r8
  419666:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_LIST_PART_SCROLLBAR);
  419668:	2101      	movs	r1, #1
  41966a:	4620      	mov	r0, r4
  41966c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  41966e:	6831      	ldr	r1, [r6, #0]
  419670:	3184      	adds	r1, #132	; 0x84
  419672:	47a8      	blx	r5
            break;
  419674:	e666      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  419676:	2100      	movs	r1, #0
  419678:	4620      	mov	r0, r4
  41967a:	4b67      	ldr	r3, [pc, #412]	; (419818 <theme_apply+0x544>)
  41967c:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->list_btn);
  41967e:	4b67      	ldr	r3, [pc, #412]	; (41981c <theme_apply+0x548>)
  419680:	6819      	ldr	r1, [r3, #0]
  419682:	317c      	adds	r1, #124	; 0x7c
  419684:	4b66      	ldr	r3, [pc, #408]	; (419820 <theme_apply+0x54c>)
  419686:	4798      	blx	r3
            break;
  419688:	e65c      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
  41968a:	2100      	movs	r1, #0
  41968c:	4620      	mov	r0, r4
  41968e:	4f62      	ldr	r7, [pc, #392]	; (419818 <theme_apply+0x544>)
  419690:	47b8      	blx	r7
  419692:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  419694:	4e61      	ldr	r6, [pc, #388]	; (41981c <theme_apply+0x548>)
  419696:	6831      	ldr	r1, [r6, #0]
  419698:	3104      	adds	r1, #4
  41969a:	4d61      	ldr	r5, [pc, #388]	; (419820 <theme_apply+0x54c>)
  41969c:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  41969e:	6831      	ldr	r1, [r6, #0]
  4196a0:	3108      	adds	r1, #8
  4196a2:	4640      	mov	r0, r8
  4196a4:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  4196a6:	6831      	ldr	r1, [r6, #0]
  4196a8:	3118      	adds	r1, #24
  4196aa:	4640      	mov	r0, r8
  4196ac:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
  4196ae:	2140      	movs	r1, #64	; 0x40
  4196b0:	4620      	mov	r0, r4
  4196b2:	47b8      	blx	r7
  4196b4:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4196b6:	6831      	ldr	r1, [r6, #0]
  4196b8:	3104      	adds	r1, #4
  4196ba:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->ddlist_page);
  4196bc:	6831      	ldr	r1, [r6, #0]
  4196be:	3158      	adds	r1, #88	; 0x58
  4196c0:	4640      	mov	r0, r8
  4196c2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
  4196c4:	2141      	movs	r1, #65	; 0x41
  4196c6:	4620      	mov	r0, r4
  4196c8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  4196ca:	6831      	ldr	r1, [r6, #0]
  4196cc:	3184      	adds	r1, #132	; 0x84
  4196ce:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SELECTED);
  4196d0:	2142      	movs	r1, #66	; 0x42
  4196d2:	4620      	mov	r0, r4
  4196d4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ddlist_sel);
  4196d6:	6831      	ldr	r1, [r6, #0]
  4196d8:	315c      	adds	r1, #92	; 0x5c
  4196da:	47a8      	blx	r5
            break;
  4196dc:	e632      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
  4196de:	2100      	movs	r1, #0
  4196e0:	4620      	mov	r0, r4
  4196e2:	4f4d      	ldr	r7, [pc, #308]	; (419818 <theme_apply+0x544>)
  4196e4:	47b8      	blx	r7
  4196e6:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4196e8:	4e4c      	ldr	r6, [pc, #304]	; (41981c <theme_apply+0x548>)
  4196ea:	6831      	ldr	r1, [r6, #0]
  4196ec:	3104      	adds	r1, #4
  4196ee:	4d4c      	ldr	r5, [pc, #304]	; (419820 <theme_apply+0x54c>)
  4196f0:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_bg);
  4196f2:	6831      	ldr	r1, [r6, #0]
  4196f4:	3144      	adds	r1, #68	; 0x44
  4196f6:	4640      	mov	r0, r8
  4196f8:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  4196fa:	6831      	ldr	r1, [r6, #0]
  4196fc:	3118      	adds	r1, #24
  4196fe:	4640      	mov	r0, r8
  419700:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
  419702:	2101      	movs	r1, #1
  419704:	4620      	mov	r0, r4
  419706:	47b8      	blx	r7
  419708:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->pad_small);
  41970a:	6831      	ldr	r1, [r6, #0]
  41970c:	3118      	adds	r1, #24
  41970e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_series_bg);
  419710:	6831      	ldr	r1, [r6, #0]
  419712:	3148      	adds	r1, #72	; 0x48
  419714:	4640      	mov	r0, r8
  419716:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_CURSOR);
  419718:	2103      	movs	r1, #3
  41971a:	4620      	mov	r0, r4
  41971c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series_bg);
  41971e:	6831      	ldr	r1, [r6, #0]
  419720:	3148      	adds	r1, #72	; 0x48
  419722:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
  419724:	2102      	movs	r1, #2
  419726:	4620      	mov	r0, r4
  419728:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series);
  41972a:	6831      	ldr	r1, [r6, #0]
  41972c:	314c      	adds	r1, #76	; 0x4c
  41972e:	47a8      	blx	r5
            break;
  419730:	e608      	b.n	419344 <theme_apply+0x70>
                list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
  419732:	2100      	movs	r1, #0
  419734:	4620      	mov	r0, r4
  419736:	4b38      	ldr	r3, [pc, #224]	; (419818 <theme_apply+0x544>)
  419738:	4798      	blx	r3
                _lv_style_list_add_style(list, &styles->bg);
  41973a:	4b38      	ldr	r3, [pc, #224]	; (41981c <theme_apply+0x548>)
  41973c:	6819      	ldr	r1, [r3, #0]
  41973e:	3104      	adds	r1, #4
  419740:	4b37      	ldr	r3, [pc, #220]	; (419820 <theme_apply+0x54c>)
  419742:	4798      	blx	r3
                int idx = 1; /* start value should be 1, not zero, since cell styles
  419744:	2501      	movs	r5, #1
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
  419746:	e009      	b.n	41975c <theme_apply+0x488>
                    list = lv_obj_get_style_list(obj, idx);
  419748:	b2e9      	uxtb	r1, r5
  41974a:	4620      	mov	r0, r4
  41974c:	4b32      	ldr	r3, [pc, #200]	; (419818 <theme_apply+0x544>)
  41974e:	4798      	blx	r3
                    _lv_style_list_add_style(list, &styles->table_cell);
  419750:	4b32      	ldr	r3, [pc, #200]	; (41981c <theme_apply+0x548>)
  419752:	6819      	ldr	r1, [r3, #0]
  419754:	31a4      	adds	r1, #164	; 0xa4
  419756:	4b32      	ldr	r3, [pc, #200]	; (419820 <theme_apply+0x54c>)
  419758:	4798      	blx	r3
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
  41975a:	3501      	adds	r5, #1
  41975c:	2d04      	cmp	r5, #4
  41975e:	ddf3      	ble.n	419748 <theme_apply+0x474>
  419760:	e5f0      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_WIN_PART_BG);
  419762:	2100      	movs	r1, #0
  419764:	4620      	mov	r0, r4
  419766:	4f2c      	ldr	r7, [pc, #176]	; (419818 <theme_apply+0x544>)
  419768:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  41976a:	4e2c      	ldr	r6, [pc, #176]	; (41981c <theme_apply+0x548>)
  41976c:	6831      	ldr	r1, [r6, #0]
  41976e:	4d2c      	ldr	r5, [pc, #176]	; (419820 <theme_apply+0x54c>)
  419770:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_SCROLLBAR);
  419772:	2142      	movs	r1, #66	; 0x42
  419774:	4620      	mov	r0, r4
  419776:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  419778:	6831      	ldr	r1, [r6, #0]
  41977a:	3184      	adds	r1, #132	; 0x84
  41977c:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
  41977e:	2141      	movs	r1, #65	; 0x41
  419780:	4620      	mov	r0, r4
  419782:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
  419784:	6831      	ldr	r1, [r6, #0]
  419786:	31b4      	adds	r1, #180	; 0xb4
  419788:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
  41978a:	2140      	movs	r1, #64	; 0x40
  41978c:	4620      	mov	r0, r4
  41978e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
  419790:	6831      	ldr	r1, [r6, #0]
  419792:	31ac      	adds	r1, #172	; 0xac
  419794:	47a8      	blx	r5
            break;
  419796:	e5d5      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  419798:	2100      	movs	r1, #0
  41979a:	4620      	mov	r0, r4
  41979c:	4b1e      	ldr	r3, [pc, #120]	; (419818 <theme_apply+0x544>)
  41979e:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_btns);
  4197a0:	4b1e      	ldr	r3, [pc, #120]	; (41981c <theme_apply+0x548>)
  4197a2:	6819      	ldr	r1, [r3, #0]
  4197a4:	31a8      	adds	r1, #168	; 0xa8
  4197a6:	4b1e      	ldr	r3, [pc, #120]	; (419820 <theme_apply+0x54c>)
  4197a8:	4798      	blx	r3
            break;
  4197aa:	e5cb      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
  4197ac:	2100      	movs	r1, #0
  4197ae:	4620      	mov	r0, r4
  4197b0:	4f19      	ldr	r7, [pc, #100]	; (419818 <theme_apply+0x544>)
  4197b2:	47b8      	blx	r7
  4197b4:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4197b6:	4e19      	ldr	r6, [pc, #100]	; (41981c <theme_apply+0x548>)
  4197b8:	6831      	ldr	r1, [r6, #0]
  4197ba:	3104      	adds	r1, #4
  4197bc:	4d18      	ldr	r5, [pc, #96]	; (419820 <theme_apply+0x54c>)
  4197be:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  4197c0:	6831      	ldr	r1, [r6, #0]
  4197c2:	3118      	adds	r1, #24
  4197c4:	4640      	mov	r0, r8
  4197c6:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
  4197c8:	2104      	movs	r1, #4
  4197ca:	4620      	mov	r0, r4
  4197cc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_placeholder);
  4197ce:	6831      	ldr	r1, [r6, #0]
  4197d0:	31bc      	adds	r1, #188	; 0xbc
  4197d2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_CURSOR);
  4197d4:	2103      	movs	r1, #3
  4197d6:	4620      	mov	r0, r4
  4197d8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_cursor);
  4197da:	6831      	ldr	r1, [r6, #0]
  4197dc:	31b8      	adds	r1, #184	; 0xb8
  4197de:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
  4197e0:	2101      	movs	r1, #1
  4197e2:	4620      	mov	r0, r4
  4197e4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  4197e6:	6831      	ldr	r1, [r6, #0]
  4197e8:	3184      	adds	r1, #132	; 0x84
  4197ea:	47a8      	blx	r5
            break;
  4197ec:	e5aa      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
  4197ee:	2100      	movs	r1, #0
  4197f0:	4620      	mov	r0, r4
  4197f2:	4f09      	ldr	r7, [pc, #36]	; (419818 <theme_apply+0x544>)
  4197f4:	47b8      	blx	r7
  4197f6:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4197f8:	4e08      	ldr	r6, [pc, #32]	; (41981c <theme_apply+0x548>)
  4197fa:	6831      	ldr	r1, [r6, #0]
  4197fc:	3104      	adds	r1, #4
  4197fe:	4d08      	ldr	r5, [pc, #32]	; (419820 <theme_apply+0x54c>)
  419800:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  419802:	6831      	ldr	r1, [r6, #0]
  419804:	3118      	adds	r1, #24
  419806:	4640      	mov	r0, r8
  419808:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_CURSOR);
  41980a:	2103      	movs	r1, #3
  41980c:	4620      	mov	r0, r4
  41980e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->spinbox_cursor);
  419810:	6831      	ldr	r1, [r6, #0]
  419812:	319c      	adds	r1, #156	; 0x9c
  419814:	47a8      	blx	r5
            break;
  419816:	e595      	b.n	419344 <theme_apply+0x70>
  419818:	00405bb5 	.word	0x00405bb5
  41981c:	2041480c 	.word	0x2041480c
  419820:	00409e1d 	.word	0x00409e1d
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  419824:	2100      	movs	r1, #0
  419826:	4620      	mov	r0, r4
  419828:	4b31      	ldr	r3, [pc, #196]	; (4198f0 <theme_apply+0x61c>)
  41982a:	4798      	blx	r3
  41982c:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  41982e:	4e31      	ldr	r6, [pc, #196]	; (4198f4 <theme_apply+0x620>)
  419830:	6831      	ldr	r1, [r6, #0]
  419832:	3104      	adds	r1, #4
  419834:	4d30      	ldr	r5, [pc, #192]	; (4198f8 <theme_apply+0x624>)
  419836:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  419838:	6831      	ldr	r1, [r6, #0]
  41983a:	3108      	adds	r1, #8
  41983c:	4638      	mov	r0, r7
  41983e:	47a8      	blx	r5
            break;
  419840:	e580      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_BG);
  419842:	2100      	movs	r1, #0
  419844:	4620      	mov	r0, r4
  419846:	4f2a      	ldr	r7, [pc, #168]	; (4198f0 <theme_apply+0x61c>)
  419848:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
  41984a:	4e2a      	ldr	r6, [pc, #168]	; (4198f4 <theme_apply+0x620>)
  41984c:	6831      	ldr	r1, [r6, #0]
  41984e:	3104      	adds	r1, #4
  419850:	4d29      	ldr	r5, [pc, #164]	; (4198f8 <theme_apply+0x624>)
  419852:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DATE);
  419854:	2103      	movs	r1, #3
  419856:	4620      	mov	r0, r4
  419858:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_date_nums);
  41985a:	6831      	ldr	r1, [r6, #0]
  41985c:	3130      	adds	r1, #48	; 0x30
  41985e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_HEADER);
  419860:	2101      	movs	r1, #1
  419862:	4620      	mov	r0, r4
  419864:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_header);
  419866:	6831      	ldr	r1, [r6, #0]
  419868:	3134      	adds	r1, #52	; 0x34
  41986a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
  41986c:	2102      	movs	r1, #2
  41986e:	4620      	mov	r0, r4
  419870:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_daynames);
  419872:	6831      	ldr	r1, [r6, #0]
  419874:	3138      	adds	r1, #56	; 0x38
  419876:	47a8      	blx	r5
            break;
  419878:	e564      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
  41987a:	2100      	movs	r1, #0
  41987c:	4620      	mov	r0, r4
  41987e:	4f1c      	ldr	r7, [pc, #112]	; (4198f0 <theme_apply+0x61c>)
  419880:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_bg);
  419882:	4e1c      	ldr	r6, [pc, #112]	; (4198f4 <theme_apply+0x620>)
  419884:	6831      	ldr	r1, [r6, #0]
  419886:	313c      	adds	r1, #60	; 0x3c
  419888:	4d1b      	ldr	r5, [pc, #108]	; (4198f8 <theme_apply+0x624>)
  41988a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
  41988c:	2101      	movs	r1, #1
  41988e:	4620      	mov	r0, r4
  419890:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_indic);
  419892:	6831      	ldr	r1, [r6, #0]
  419894:	3140      	adds	r1, #64	; 0x40
  419896:	47a8      	blx	r5
            break;
  419898:	e554      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
  41989a:	2100      	movs	r1, #0
  41989c:	4620      	mov	r0, r4
  41989e:	4b14      	ldr	r3, [pc, #80]	; (4198f0 <theme_apply+0x61c>)
  4198a0:	4798      	blx	r3
  4198a2:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  4198a4:	4e13      	ldr	r6, [pc, #76]	; (4198f4 <theme_apply+0x620>)
  4198a6:	6831      	ldr	r1, [r6, #0]
  4198a8:	3104      	adds	r1, #4
  4198aa:	4d13      	ldr	r5, [pc, #76]	; (4198f8 <theme_apply+0x624>)
  4198ac:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->lmeter);
  4198ae:	6831      	ldr	r1, [r6, #0]
  4198b0:	3174      	adds	r1, #116	; 0x74
  4198b2:	4638      	mov	r0, r7
  4198b4:	47a8      	blx	r5
            break;
  4198b6:	e545      	b.n	419344 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
  4198b8:	2100      	movs	r1, #0
  4198ba:	4620      	mov	r0, r4
  4198bc:	4f0c      	ldr	r7, [pc, #48]	; (4198f0 <theme_apply+0x61c>)
  4198be:	47b8      	blx	r7
  4198c0:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4198c2:	4e0c      	ldr	r6, [pc, #48]	; (4198f4 <theme_apply+0x620>)
  4198c4:	6831      	ldr	r1, [r6, #0]
  4198c6:	3104      	adds	r1, #4
  4198c8:	4d0b      	ldr	r5, [pc, #44]	; (4198f8 <theme_apply+0x624>)
  4198ca:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->gauge_main);
  4198cc:	6831      	ldr	r1, [r6, #0]
  4198ce:	3160      	adds	r1, #96	; 0x60
  4198d0:	4640      	mov	r0, r8
  4198d2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAJOR);
  4198d4:	2101      	movs	r1, #1
  4198d6:	4620      	mov	r0, r4
  4198d8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_strong);
  4198da:	6831      	ldr	r1, [r6, #0]
  4198dc:	3164      	adds	r1, #100	; 0x64
  4198de:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_NEEDLE);
  4198e0:	2102      	movs	r1, #2
  4198e2:	4620      	mov	r0, r4
  4198e4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_needle);
  4198e6:	6831      	ldr	r1, [r6, #0]
  4198e8:	3168      	adds	r1, #104	; 0x68
  4198ea:	47a8      	blx	r5
            break;
  4198ec:	e52a      	b.n	419344 <theme_apply+0x70>
  4198ee:	bf00      	nop
  4198f0:	00405bb5 	.word	0x00405bb5
  4198f4:	2041480c 	.word	0x2041480c
  4198f8:	00409e1d 	.word	0x00409e1d

004198fc <style_init_reset>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
  4198fc:	b508      	push	{r3, lr}
    if(inited) lv_style_reset(style);
  4198fe:	4b04      	ldr	r3, [pc, #16]	; (419910 <style_init_reset+0x14>)
  419900:	781b      	ldrb	r3, [r3, #0]
  419902:	b913      	cbnz	r3, 41990a <style_init_reset+0xe>
    else lv_style_init(style);
  419904:	4b03      	ldr	r3, [pc, #12]	; (419914 <style_init_reset+0x18>)
  419906:	4798      	blx	r3
  419908:	bd08      	pop	{r3, pc}
    if(inited) lv_style_reset(style);
  41990a:	4b03      	ldr	r3, [pc, #12]	; (419918 <style_init_reset+0x1c>)
  41990c:	4798      	blx	r3
  41990e:	bd08      	pop	{r3, pc}
  419910:	20414808 	.word	0x20414808
  419914:	00409d39 	.word	0x00409d39
  419918:	00409f5d 	.word	0x00409f5d

0041991c <bar_init>:
{
  41991c:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->bar_bg);
  41991e:	4c6f      	ldr	r4, [pc, #444]	; (419adc <bar_init+0x1c0>)
  419920:	6820      	ldr	r0, [r4, #0]
  419922:	3028      	adds	r0, #40	; 0x28
  419924:	4b6e      	ldr	r3, [pc, #440]	; (419ae0 <bar_init+0x1c4>)
  419926:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  419928:	6820      	ldr	r0, [r4, #0]
#define _LV_OBJ_STYLE_SET_GET_DECLARE(prop_name, func_name, value_type, style_type, scalar)                             \
    _OBJ_GET_STYLE_##scalar(prop_name, func_name, value_type, style_type)                                               \
    _OBJ_SET_STYLE_LOCAL_##scalar(prop_name, func_name, value_type, style_type)                                         \
    _OBJ_SET_STYLE_##scalar(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41992a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41992e:	2101      	movs	r1, #1
  419930:	3028      	adds	r0, #40	; 0x28
  419932:	4b6c      	ldr	r3, [pc, #432]	; (419ae4 <bar_init+0x1c8>)
  419934:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  419936:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419938:	22ff      	movs	r2, #255	; 0xff
  41993a:	212c      	movs	r1, #44	; 0x2c
  41993c:	3028      	adds	r0, #40	; 0x28
  41993e:	4b6a      	ldr	r3, [pc, #424]	; (419ae8 <bar_init+0x1cc>)
  419940:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
  419942:	6820      	ldr	r0, [r4, #0]
  419944:	3028      	adds	r0, #40	; 0x28
  419946:	4b69      	ldr	r3, [pc, #420]	; (419aec <bar_init+0x1d0>)
  419948:	6a1b      	ldr	r3, [r3, #32]
  41994a:	f013 0f02 	tst.w	r3, #2
  41994e:	f000 808e 	beq.w	419a6e <bar_init+0x152>
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  419952:	f04f 0200 	mov.w	r2, #0
  419956:	2306      	movs	r3, #6
  419958:	f363 0202 	bfi	r2, r3, #0, #3
  41995c:	231a      	movs	r3, #26
  41995e:	f363 02c7 	bfi	r2, r3, #3, #5
  419962:	231b      	movs	r3, #27
  419964:	f363 220c 	bfi	r2, r3, #8, #5
  419968:	2305      	movs	r3, #5
  41996a:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41996e:	2129      	movs	r1, #41	; 0x29
  419970:	4b5f      	ldr	r3, [pc, #380]	; (419af0 <bar_init+0x1d4>)
  419972:	4798      	blx	r3
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  419974:	4b59      	ldr	r3, [pc, #356]	; (419adc <bar_init+0x1c0>)
  419976:	6818      	ldr	r0, [r3, #0]
  419978:	3028      	adds	r0, #40	; 0x28
  41997a:	4b5c      	ldr	r3, [pc, #368]	; (419aec <bar_init+0x1d0>)
  41997c:	6a1b      	ldr	r3, [r3, #32]
  41997e:	f013 0f02 	tst.w	r3, #2
  419982:	f000 8082 	beq.w	419a8a <bar_init+0x16e>
  419986:	f04f 0200 	mov.w	r2, #0
  41998a:	2302      	movs	r3, #2
  41998c:	f363 0202 	bfi	r2, r3, #0, #3
  419990:	2306      	movs	r3, #6
  419992:	f363 02c7 	bfi	r2, r3, #3, #5
  419996:	2309      	movs	r3, #9
  419998:	f363 220c 	bfi	r2, r3, #8, #5
  41999c:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  4199a0:	2179      	movs	r1, #121	; 0x79
  4199a2:	4d53      	ldr	r5, [pc, #332]	; (419af0 <bar_init+0x1d4>)
  4199a4:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
  4199a6:	4c4d      	ldr	r4, [pc, #308]	; (419adc <bar_init+0x1c0>)
  4199a8:	6820      	ldr	r0, [r4, #0]
  4199aa:	4e50      	ldr	r6, [pc, #320]	; (419aec <bar_init+0x1d0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  4199ac:	89b2      	ldrh	r2, [r6, #12]
  4199ae:	2149      	movs	r1, #73	; 0x49
  4199b0:	3028      	adds	r0, #40	; 0x28
  4199b2:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
  4199b4:	6820      	ldr	r0, [r4, #0]
  4199b6:	89f2      	ldrh	r2, [r6, #14]
  4199b8:	f240 4149 	movw	r1, #1097	; 0x449
  4199bc:	3028      	adds	r0, #40	; 0x28
  4199be:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  4199c0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  4199c2:	2200      	movs	r2, #0
  4199c4:	214c      	movs	r1, #76	; 0x4c
  4199c6:	3028      	adds	r0, #40	; 0x28
  4199c8:	4d47      	ldr	r5, [pc, #284]	; (419ae8 <bar_init+0x1cc>)
  4199ca:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
  4199cc:	6820      	ldr	r0, [r4, #0]
  4199ce:	227f      	movs	r2, #127	; 0x7f
  4199d0:	f44f 7113 	mov.w	r1, #588	; 0x24c
  4199d4:	3028      	adds	r0, #40	; 0x28
  4199d6:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  4199d8:	6824      	ldr	r4, [r4, #0]
  4199da:	3428      	adds	r4, #40	; 0x28
  4199dc:	6a33      	ldr	r3, [r6, #32]
  4199de:	f013 0f20 	tst.w	r3, #32
  4199e2:	d055      	beq.n	419a90 <bar_init+0x174>
  4199e4:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  4199e6:	2140      	movs	r1, #64	; 0x40
  4199e8:	4620      	mov	r0, r4
  4199ea:	4d3e      	ldr	r5, [pc, #248]	; (419ae4 <bar_init+0x1c8>)
  4199ec:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  4199ee:	4c3b      	ldr	r4, [pc, #236]	; (419adc <bar_init+0x1c0>)
  4199f0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  4199f2:	2200      	movs	r2, #0
  4199f4:	21b0      	movs	r1, #176	; 0xb0
  4199f6:	3028      	adds	r0, #40	; 0x28
  4199f8:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  4199fa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  4199fc:	224c      	movs	r2, #76	; 0x4c
  4199fe:	21b7      	movs	r1, #183	; 0xb7
  419a00:	3028      	adds	r0, #40	; 0x28
  419a02:	47a8      	blx	r5
    style_init_reset(&styles->bar_indic);
  419a04:	6820      	ldr	r0, [r4, #0]
  419a06:	302c      	adds	r0, #44	; 0x2c
  419a08:	4b35      	ldr	r3, [pc, #212]	; (419ae0 <bar_init+0x1c4>)
  419a0a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  419a0c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419a0e:	22ff      	movs	r2, #255	; 0xff
  419a10:	212c      	movs	r1, #44	; 0x2c
  419a12:	4408      	add	r0, r1
  419a14:	4b34      	ldr	r3, [pc, #208]	; (419ae8 <bar_init+0x1cc>)
  419a16:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  419a18:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419a1a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  419a1e:	2101      	movs	r1, #1
  419a20:	302c      	adds	r0, #44	; 0x2c
  419a22:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
  419a24:	6820      	ldr	r0, [r4, #0]
  419a26:	4d31      	ldr	r5, [pc, #196]	; (419aec <bar_init+0x1d0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419a28:	89aa      	ldrh	r2, [r5, #12]
  419a2a:	2129      	movs	r1, #41	; 0x29
  419a2c:	302c      	adds	r0, #44	; 0x2c
  419a2e:	4e30      	ldr	r6, [pc, #192]	; (419af0 <bar_init+0x1d4>)
  419a30:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
  419a32:	6820      	ldr	r0, [r4, #0]
  419a34:	f04f 0200 	mov.w	r2, #0
  419a38:	2304      	movs	r3, #4
  419a3a:	f363 0202 	bfi	r2, r3, #0, #3
  419a3e:	2311      	movs	r3, #17
  419a40:	f363 02c7 	bfi	r2, r3, #3, #5
  419a44:	f363 220c 	bfi	r2, r3, #8, #5
  419a48:	2302      	movs	r3, #2
  419a4a:	f363 324f 	bfi	r2, r3, #13, #3
  419a4e:	f242 0129 	movw	r1, #8233	; 0x2029
  419a52:	302c      	adds	r0, #44	; 0x2c
  419a54:	47b0      	blx	r6
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
  419a56:	6820      	ldr	r0, [r4, #0]
  419a58:	302c      	adds	r0, #44	; 0x2c
  419a5a:	6a2b      	ldr	r3, [r5, #32]
  419a5c:	f013 0f02 	tst.w	r3, #2
  419a60:	d12d      	bne.n	419abe <bar_init+0x1a2>
  419a62:	4b24      	ldr	r3, [pc, #144]	; (419af4 <bar_init+0x1d8>)
  419a64:	881a      	ldrh	r2, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  419a66:	2179      	movs	r1, #121	; 0x79
  419a68:	4b21      	ldr	r3, [pc, #132]	; (419af0 <bar_init+0x1d4>)
  419a6a:	4798      	blx	r3
  419a6c:	bd70      	pop	{r4, r5, r6, pc}
  419a6e:	2302      	movs	r3, #2
  419a70:	f04f 0200 	mov.w	r2, #0
  419a74:	f363 0202 	bfi	r2, r3, #0, #3
  419a78:	2108      	movs	r1, #8
  419a7a:	f361 02c7 	bfi	r2, r1, #3, #5
  419a7e:	2109      	movs	r1, #9
  419a80:	f361 220c 	bfi	r2, r1, #8, #5
  419a84:	f363 324f 	bfi	r2, r3, #13, #3
  419a88:	e771      	b.n	41996e <bar_init+0x52>
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  419a8a:	4b1a      	ldr	r3, [pc, #104]	; (419af4 <bar_init+0x1d8>)
  419a8c:	881a      	ldrh	r2, [r3, #0]
  419a8e:	e787      	b.n	4199a0 <bar_init+0x84>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  419a90:	2000      	movs	r0, #0
  419a92:	4b19      	ldr	r3, [pc, #100]	; (419af8 <bar_init+0x1dc>)
  419a94:	4798      	blx	r3
  419a96:	3028      	adds	r0, #40	; 0x28
  419a98:	0040      	lsls	r0, r0, #1
  419a9a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419a9e:	da01      	bge.n	419aa4 <bar_init+0x188>
  419aa0:	2201      	movs	r2, #1
  419aa2:	e7a0      	b.n	4199e6 <bar_init+0xca>
  419aa4:	2000      	movs	r0, #0
  419aa6:	4b14      	ldr	r3, [pc, #80]	; (419af8 <bar_init+0x1dc>)
  419aa8:	4798      	blx	r3
  419aaa:	3028      	adds	r0, #40	; 0x28
  419aac:	0040      	lsls	r0, r0, #1
  419aae:	4b13      	ldr	r3, [pc, #76]	; (419afc <bar_init+0x1e0>)
  419ab0:	fb83 2300 	smull	r2, r3, r3, r0
  419ab4:	17c2      	asrs	r2, r0, #31
  419ab6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419aba:	b212      	sxth	r2, r2
  419abc:	e793      	b.n	4199e6 <bar_init+0xca>
  419abe:	f04f 0200 	mov.w	r2, #0
  419ac2:	2302      	movs	r3, #2
  419ac4:	f363 0202 	bfi	r2, r3, #0, #3
  419ac8:	2308      	movs	r3, #8
  419aca:	f363 02c7 	bfi	r2, r3, #3, #5
  419ace:	2309      	movs	r3, #9
  419ad0:	f363 220c 	bfi	r2, r3, #8, #5
  419ad4:	f36f 324f 	bfc	r2, #13, #3
  419ad8:	e7c5      	b.n	419a66 <bar_init+0x14a>
  419ada:	bf00      	nop
  419adc:	2041480c 	.word	0x2041480c
  419ae0:	004198fd 	.word	0x004198fd
  419ae4:	0040a121 	.word	0x0040a121
  419ae8:	0040a441 	.word	0x0040a441
  419aec:	20414810 	.word	0x20414810
  419af0:	0040a2b1 	.word	0x0040a2b1
  419af4:	00431c94 	.word	0x00431c94
  419af8:	00415c7d 	.word	0x00415c7d
  419afc:	66666667 	.word	0x66666667

00419b00 <slider_init>:
{
  419b00:	b510      	push	{r4, lr}
    style_init_reset(&styles->slider_knob);
  419b02:	4ca3      	ldr	r4, [pc, #652]	; (419d90 <slider_init+0x290>)
  419b04:	6820      	ldr	r0, [r4, #0]
  419b06:	3094      	adds	r0, #148	; 0x94
  419b08:	4ba2      	ldr	r3, [pc, #648]	; (419d94 <slider_init+0x294>)
  419b0a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
  419b0c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419b0e:	22ff      	movs	r2, #255	; 0xff
  419b10:	212c      	movs	r1, #44	; 0x2c
  419b12:	3094      	adds	r0, #148	; 0x94
  419b14:	4ba0      	ldr	r3, [pc, #640]	; (419d98 <slider_init+0x298>)
  419b16:	4798      	blx	r3
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
  419b18:	6820      	ldr	r0, [r4, #0]
  419b1a:	3094      	adds	r0, #148	; 0x94
  419b1c:	4b9f      	ldr	r3, [pc, #636]	; (419d9c <slider_init+0x29c>)
  419b1e:	6a1b      	ldr	r3, [r3, #32]
  419b20:	f013 0f02 	tst.w	r3, #2
  419b24:	f000 80ba 	beq.w	419c9c <slider_init+0x19c>
  419b28:	4b9c      	ldr	r3, [pc, #624]	; (419d9c <slider_init+0x29c>)
  419b2a:	899a      	ldrh	r2, [r3, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419b2c:	2129      	movs	r1, #41	; 0x29
  419b2e:	4b9c      	ldr	r3, [pc, #624]	; (419da0 <slider_init+0x2a0>)
  419b30:	4798      	blx	r3
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  419b32:	4b97      	ldr	r3, [pc, #604]	; (419d90 <slider_init+0x290>)
  419b34:	6818      	ldr	r0, [r3, #0]
  419b36:	3094      	adds	r0, #148	; 0x94
  419b38:	4b98      	ldr	r3, [pc, #608]	; (419d9c <slider_init+0x29c>)
  419b3a:	6a1b      	ldr	r3, [r3, #32]
  419b3c:	f013 0f02 	tst.w	r3, #2
  419b40:	f000 80af 	beq.w	419ca2 <slider_init+0x1a2>
  419b44:	f04f 0200 	mov.w	r2, #0
  419b48:	2302      	movs	r3, #2
  419b4a:	f363 0202 	bfi	r2, r3, #0, #3
  419b4e:	2306      	movs	r3, #6
  419b50:	f363 02c7 	bfi	r2, r3, #3, #5
  419b54:	2309      	movs	r3, #9
  419b56:	f363 220c 	bfi	r2, r3, #8, #5
  419b5a:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  419b5e:	2179      	movs	r1, #121	; 0x79
  419b60:	4b8f      	ldr	r3, [pc, #572]	; (419da0 <slider_init+0x2a0>)
  419b62:	4798      	blx	r3
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  419b64:	4c8a      	ldr	r4, [pc, #552]	; (419d90 <slider_init+0x290>)
  419b66:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419b68:	f647 72ff 	movw	r2, #32767	; 0x7fff
  419b6c:	2101      	movs	r1, #1
  419b6e:	3094      	adds	r0, #148	; 0x94
  419b70:	4b8c      	ldr	r3, [pc, #560]	; (419da4 <slider_init+0x2a4>)
  419b72:	4798      	blx	r3
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  419b74:	6824      	ldr	r4, [r4, #0]
  419b76:	3494      	adds	r4, #148	; 0x94
  419b78:	2000      	movs	r0, #0
  419b7a:	4b8b      	ldr	r3, [pc, #556]	; (419da8 <slider_init+0x2a8>)
  419b7c:	4798      	blx	r3
  419b7e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  419b82:	3050      	adds	r0, #80	; 0x50
  419b84:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419b88:	f280 808e 	bge.w	419ca8 <slider_init+0x1a8>
  419b8c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419b8e:	2112      	movs	r1, #18
  419b90:	4620      	mov	r0, r4
  419b92:	4b84      	ldr	r3, [pc, #528]	; (419da4 <slider_init+0x2a4>)
  419b94:	4798      	blx	r3
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  419b96:	4b7e      	ldr	r3, [pc, #504]	; (419d90 <slider_init+0x290>)
  419b98:	681c      	ldr	r4, [r3, #0]
  419b9a:	3494      	adds	r4, #148	; 0x94
  419b9c:	2000      	movs	r0, #0
  419b9e:	4b82      	ldr	r3, [pc, #520]	; (419da8 <slider_init+0x2a8>)
  419ba0:	4798      	blx	r3
  419ba2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  419ba6:	3050      	adds	r0, #80	; 0x50
  419ba8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419bac:	f280 808a 	bge.w	419cc4 <slider_init+0x1c4>
  419bb0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419bb2:	2113      	movs	r1, #19
  419bb4:	4620      	mov	r0, r4
  419bb6:	4b7b      	ldr	r3, [pc, #492]	; (419da4 <slider_init+0x2a4>)
  419bb8:	4798      	blx	r3
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  419bba:	4b75      	ldr	r3, [pc, #468]	; (419d90 <slider_init+0x290>)
  419bbc:	681c      	ldr	r4, [r3, #0]
  419bbe:	3494      	adds	r4, #148	; 0x94
  419bc0:	2000      	movs	r0, #0
  419bc2:	4b79      	ldr	r3, [pc, #484]	; (419da8 <slider_init+0x2a8>)
  419bc4:	4798      	blx	r3
  419bc6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  419bca:	3050      	adds	r0, #80	; 0x50
  419bcc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419bd0:	f280 8086 	bge.w	419ce0 <slider_init+0x1e0>
  419bd4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  419bd6:	2110      	movs	r1, #16
  419bd8:	4620      	mov	r0, r4
  419bda:	4b72      	ldr	r3, [pc, #456]	; (419da4 <slider_init+0x2a4>)
  419bdc:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  419bde:	4b6c      	ldr	r3, [pc, #432]	; (419d90 <slider_init+0x290>)
  419be0:	681c      	ldr	r4, [r3, #0]
  419be2:	3494      	adds	r4, #148	; 0x94
  419be4:	2000      	movs	r0, #0
  419be6:	4b70      	ldr	r3, [pc, #448]	; (419da8 <slider_init+0x2a8>)
  419be8:	4798      	blx	r3
  419bea:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  419bee:	3050      	adds	r0, #80	; 0x50
  419bf0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419bf4:	f280 8082 	bge.w	419cfc <slider_init+0x1fc>
  419bf8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419bfa:	2111      	movs	r1, #17
  419bfc:	4620      	mov	r0, r4
  419bfe:	4b69      	ldr	r3, [pc, #420]	; (419da4 <slider_init+0x2a4>)
  419c00:	4798      	blx	r3
    style_init_reset(&styles->slider_bg);
  419c02:	4c63      	ldr	r4, [pc, #396]	; (419d90 <slider_init+0x290>)
  419c04:	6820      	ldr	r0, [r4, #0]
  419c06:	3098      	adds	r0, #152	; 0x98
  419c08:	4b62      	ldr	r3, [pc, #392]	; (419d94 <slider_init+0x294>)
  419c0a:	4798      	blx	r3
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  419c0c:	6824      	ldr	r4, [r4, #0]
  419c0e:	3498      	adds	r4, #152	; 0x98
  419c10:	2000      	movs	r0, #0
  419c12:	4b65      	ldr	r3, [pc, #404]	; (419da8 <slider_init+0x2a8>)
  419c14:	4798      	blx	r3
  419c16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419c1a:	0040      	lsls	r0, r0, #1
  419c1c:	3050      	adds	r0, #80	; 0x50
  419c1e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419c22:	da79      	bge.n	419d18 <slider_init+0x218>
  419c24:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  419c26:	2117      	movs	r1, #23
  419c28:	4620      	mov	r0, r4
  419c2a:	4b5e      	ldr	r3, [pc, #376]	; (419da4 <slider_init+0x2a4>)
  419c2c:	4798      	blx	r3
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  419c2e:	4b58      	ldr	r3, [pc, #352]	; (419d90 <slider_init+0x290>)
  419c30:	681c      	ldr	r4, [r3, #0]
  419c32:	3498      	adds	r4, #152	; 0x98
  419c34:	2000      	movs	r0, #0
  419c36:	4b5c      	ldr	r3, [pc, #368]	; (419da8 <slider_init+0x2a8>)
  419c38:	4798      	blx	r3
  419c3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419c3e:	0040      	lsls	r0, r0, #1
  419c40:	3050      	adds	r0, #80	; 0x50
  419c42:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419c46:	da76      	bge.n	419d36 <slider_init+0x236>
  419c48:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  419c4a:	2118      	movs	r1, #24
  419c4c:	4620      	mov	r0, r4
  419c4e:	4b55      	ldr	r3, [pc, #340]	; (419da4 <slider_init+0x2a4>)
  419c50:	4798      	blx	r3
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  419c52:	4b4f      	ldr	r3, [pc, #316]	; (419d90 <slider_init+0x290>)
  419c54:	681c      	ldr	r4, [r3, #0]
  419c56:	3498      	adds	r4, #152	; 0x98
  419c58:	2000      	movs	r0, #0
  419c5a:	4b53      	ldr	r3, [pc, #332]	; (419da8 <slider_init+0x2a8>)
  419c5c:	4798      	blx	r3
  419c5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419c62:	0040      	lsls	r0, r0, #1
  419c64:	3050      	adds	r0, #80	; 0x50
  419c66:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419c6a:	da73      	bge.n	419d54 <slider_init+0x254>
  419c6c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  419c6e:	2115      	movs	r1, #21
  419c70:	4620      	mov	r0, r4
  419c72:	4b4c      	ldr	r3, [pc, #304]	; (419da4 <slider_init+0x2a4>)
  419c74:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  419c76:	4b46      	ldr	r3, [pc, #280]	; (419d90 <slider_init+0x290>)
  419c78:	681c      	ldr	r4, [r3, #0]
  419c7a:	3498      	adds	r4, #152	; 0x98
  419c7c:	2000      	movs	r0, #0
  419c7e:	4b4a      	ldr	r3, [pc, #296]	; (419da8 <slider_init+0x2a8>)
  419c80:	4798      	blx	r3
  419c82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419c86:	0040      	lsls	r0, r0, #1
  419c88:	3050      	adds	r0, #80	; 0x50
  419c8a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419c8e:	da70      	bge.n	419d72 <slider_init+0x272>
  419c90:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  419c92:	2116      	movs	r1, #22
  419c94:	4620      	mov	r0, r4
  419c96:	4b43      	ldr	r3, [pc, #268]	; (419da4 <slider_init+0x2a4>)
  419c98:	4798      	blx	r3
  419c9a:	bd10      	pop	{r4, pc}
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
  419c9c:	4b43      	ldr	r3, [pc, #268]	; (419dac <slider_init+0x2ac>)
  419c9e:	881a      	ldrh	r2, [r3, #0]
  419ca0:	e744      	b.n	419b2c <slider_init+0x2c>
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  419ca2:	4b42      	ldr	r3, [pc, #264]	; (419dac <slider_init+0x2ac>)
  419ca4:	881a      	ldrh	r2, [r3, #0]
  419ca6:	e75a      	b.n	419b5e <slider_init+0x5e>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  419ca8:	2000      	movs	r0, #0
  419caa:	4b3f      	ldr	r3, [pc, #252]	; (419da8 <slider_init+0x2a8>)
  419cac:	4798      	blx	r3
  419cae:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  419cb2:	3050      	adds	r0, #80	; 0x50
  419cb4:	4b3e      	ldr	r3, [pc, #248]	; (419db0 <slider_init+0x2b0>)
  419cb6:	fb83 2300 	smull	r2, r3, r3, r0
  419cba:	17c2      	asrs	r2, r0, #31
  419cbc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419cc0:	b212      	sxth	r2, r2
  419cc2:	e764      	b.n	419b8e <slider_init+0x8e>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  419cc4:	2000      	movs	r0, #0
  419cc6:	4b38      	ldr	r3, [pc, #224]	; (419da8 <slider_init+0x2a8>)
  419cc8:	4798      	blx	r3
  419cca:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  419cce:	3050      	adds	r0, #80	; 0x50
  419cd0:	4b37      	ldr	r3, [pc, #220]	; (419db0 <slider_init+0x2b0>)
  419cd2:	fb83 2300 	smull	r2, r3, r3, r0
  419cd6:	17c2      	asrs	r2, r0, #31
  419cd8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419cdc:	b212      	sxth	r2, r2
  419cde:	e768      	b.n	419bb2 <slider_init+0xb2>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  419ce0:	2000      	movs	r0, #0
  419ce2:	4b31      	ldr	r3, [pc, #196]	; (419da8 <slider_init+0x2a8>)
  419ce4:	4798      	blx	r3
  419ce6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  419cea:	3050      	adds	r0, #80	; 0x50
  419cec:	4b30      	ldr	r3, [pc, #192]	; (419db0 <slider_init+0x2b0>)
  419cee:	fb83 2300 	smull	r2, r3, r3, r0
  419cf2:	17c2      	asrs	r2, r0, #31
  419cf4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419cf8:	b212      	sxth	r2, r2
  419cfa:	e76c      	b.n	419bd6 <slider_init+0xd6>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  419cfc:	2000      	movs	r0, #0
  419cfe:	4b2a      	ldr	r3, [pc, #168]	; (419da8 <slider_init+0x2a8>)
  419d00:	4798      	blx	r3
  419d02:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  419d06:	3050      	adds	r0, #80	; 0x50
  419d08:	4b29      	ldr	r3, [pc, #164]	; (419db0 <slider_init+0x2b0>)
  419d0a:	fb83 2300 	smull	r2, r3, r3, r0
  419d0e:	17c2      	asrs	r2, r0, #31
  419d10:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419d14:	b212      	sxth	r2, r2
  419d16:	e770      	b.n	419bfa <slider_init+0xfa>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  419d18:	2000      	movs	r0, #0
  419d1a:	4b23      	ldr	r3, [pc, #140]	; (419da8 <slider_init+0x2a8>)
  419d1c:	4798      	blx	r3
  419d1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419d22:	0040      	lsls	r0, r0, #1
  419d24:	3050      	adds	r0, #80	; 0x50
  419d26:	4b22      	ldr	r3, [pc, #136]	; (419db0 <slider_init+0x2b0>)
  419d28:	fb83 2300 	smull	r2, r3, r3, r0
  419d2c:	17c2      	asrs	r2, r0, #31
  419d2e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419d32:	b212      	sxth	r2, r2
  419d34:	e777      	b.n	419c26 <slider_init+0x126>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  419d36:	2000      	movs	r0, #0
  419d38:	4b1b      	ldr	r3, [pc, #108]	; (419da8 <slider_init+0x2a8>)
  419d3a:	4798      	blx	r3
  419d3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419d40:	0040      	lsls	r0, r0, #1
  419d42:	3050      	adds	r0, #80	; 0x50
  419d44:	4b1a      	ldr	r3, [pc, #104]	; (419db0 <slider_init+0x2b0>)
  419d46:	fb83 2300 	smull	r2, r3, r3, r0
  419d4a:	17c2      	asrs	r2, r0, #31
  419d4c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419d50:	b212      	sxth	r2, r2
  419d52:	e77a      	b.n	419c4a <slider_init+0x14a>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  419d54:	2000      	movs	r0, #0
  419d56:	4b14      	ldr	r3, [pc, #80]	; (419da8 <slider_init+0x2a8>)
  419d58:	4798      	blx	r3
  419d5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419d5e:	0040      	lsls	r0, r0, #1
  419d60:	3050      	adds	r0, #80	; 0x50
  419d62:	4b13      	ldr	r3, [pc, #76]	; (419db0 <slider_init+0x2b0>)
  419d64:	fb83 2300 	smull	r2, r3, r3, r0
  419d68:	17c2      	asrs	r2, r0, #31
  419d6a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419d6e:	b212      	sxth	r2, r2
  419d70:	e77d      	b.n	419c6e <slider_init+0x16e>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  419d72:	2000      	movs	r0, #0
  419d74:	4b0c      	ldr	r3, [pc, #48]	; (419da8 <slider_init+0x2a8>)
  419d76:	4798      	blx	r3
  419d78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419d7c:	0040      	lsls	r0, r0, #1
  419d7e:	3050      	adds	r0, #80	; 0x50
  419d80:	4b0b      	ldr	r3, [pc, #44]	; (419db0 <slider_init+0x2b0>)
  419d82:	fb83 2300 	smull	r2, r3, r3, r0
  419d86:	17c2      	asrs	r2, r0, #31
  419d88:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419d8c:	b212      	sxth	r2, r2
  419d8e:	e780      	b.n	419c92 <slider_init+0x192>
  419d90:	2041480c 	.word	0x2041480c
  419d94:	004198fd 	.word	0x004198fd
  419d98:	0040a441 	.word	0x0040a441
  419d9c:	20414810 	.word	0x20414810
  419da0:	0040a2b1 	.word	0x0040a2b1
  419da4:	0040a121 	.word	0x0040a121
  419da8:	00415c7d 	.word	0x00415c7d
  419dac:	00431c94 	.word	0x00431c94
  419db0:	66666667 	.word	0x66666667

00419db4 <switch_init>:
{
  419db4:	b510      	push	{r4, lr}
    style_init_reset(&styles->sw_knob);
  419db6:	4c48      	ldr	r4, [pc, #288]	; (419ed8 <switch_init+0x124>)
  419db8:	6820      	ldr	r0, [r4, #0]
  419dba:	30a0      	adds	r0, #160	; 0xa0
  419dbc:	4b47      	ldr	r3, [pc, #284]	; (419edc <switch_init+0x128>)
  419dbe:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sw_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
  419dc0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419dc2:	22ff      	movs	r2, #255	; 0xff
  419dc4:	212c      	movs	r1, #44	; 0x2c
  419dc6:	30a0      	adds	r0, #160	; 0xa0
  419dc8:	4b45      	ldr	r3, [pc, #276]	; (419ee0 <switch_init+0x12c>)
  419dca:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sw_knob, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  419dcc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419dce:	4b45      	ldr	r3, [pc, #276]	; (419ee4 <switch_init+0x130>)
  419dd0:	881a      	ldrh	r2, [r3, #0]
  419dd2:	2129      	movs	r1, #41	; 0x29
  419dd4:	30a0      	adds	r0, #160	; 0xa0
  419dd6:	4b44      	ldr	r3, [pc, #272]	; (419ee8 <switch_init+0x134>)
  419dd8:	4798      	blx	r3
    lv_style_set_radius(&styles->sw_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  419dda:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419ddc:	f647 72ff 	movw	r2, #32767	; 0x7fff
  419de0:	2101      	movs	r1, #1
  419de2:	30a0      	adds	r0, #160	; 0xa0
  419de4:	4b41      	ldr	r3, [pc, #260]	; (419eec <switch_init+0x138>)
  419de6:	4798      	blx	r3
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
  419de8:	6824      	ldr	r4, [r4, #0]
  419dea:	34a0      	adds	r4, #160	; 0xa0
  419dec:	2000      	movs	r0, #0
  419dee:	4b40      	ldr	r3, [pc, #256]	; (419ef0 <switch_init+0x13c>)
  419df0:	4798      	blx	r3
  419df2:	3014      	adds	r0, #20
  419df4:	0080      	lsls	r0, r0, #2
  419df6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419dfa:	da39      	bge.n	419e70 <switch_init+0xbc>
  419dfc:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  419e00:	2110      	movs	r1, #16
  419e02:	4620      	mov	r0, r4
  419e04:	4b39      	ldr	r3, [pc, #228]	; (419eec <switch_init+0x138>)
  419e06:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
  419e08:	4b33      	ldr	r3, [pc, #204]	; (419ed8 <switch_init+0x124>)
  419e0a:	681c      	ldr	r4, [r3, #0]
  419e0c:	34a0      	adds	r4, #160	; 0xa0
  419e0e:	2000      	movs	r0, #0
  419e10:	4b37      	ldr	r3, [pc, #220]	; (419ef0 <switch_init+0x13c>)
  419e12:	4798      	blx	r3
  419e14:	3014      	adds	r0, #20
  419e16:	0080      	lsls	r0, r0, #2
  419e18:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419e1c:	da35      	bge.n	419e8a <switch_init+0xd6>
  419e1e:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419e22:	2111      	movs	r1, #17
  419e24:	4620      	mov	r0, r4
  419e26:	4b31      	ldr	r3, [pc, #196]	; (419eec <switch_init+0x138>)
  419e28:	4798      	blx	r3
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
  419e2a:	4b2b      	ldr	r3, [pc, #172]	; (419ed8 <switch_init+0x124>)
  419e2c:	681c      	ldr	r4, [r3, #0]
  419e2e:	34a0      	adds	r4, #160	; 0xa0
  419e30:	2000      	movs	r0, #0
  419e32:	4b2f      	ldr	r3, [pc, #188]	; (419ef0 <switch_init+0x13c>)
  419e34:	4798      	blx	r3
  419e36:	3014      	adds	r0, #20
  419e38:	0080      	lsls	r0, r0, #2
  419e3a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419e3e:	da31      	bge.n	419ea4 <switch_init+0xf0>
  419e40:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419e44:	2112      	movs	r1, #18
  419e46:	4620      	mov	r0, r4
  419e48:	4b28      	ldr	r3, [pc, #160]	; (419eec <switch_init+0x138>)
  419e4a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
  419e4c:	4b22      	ldr	r3, [pc, #136]	; (419ed8 <switch_init+0x124>)
  419e4e:	681c      	ldr	r4, [r3, #0]
  419e50:	34a0      	adds	r4, #160	; 0xa0
  419e52:	2000      	movs	r0, #0
  419e54:	4b26      	ldr	r3, [pc, #152]	; (419ef0 <switch_init+0x13c>)
  419e56:	4798      	blx	r3
  419e58:	3014      	adds	r0, #20
  419e5a:	0080      	lsls	r0, r0, #2
  419e5c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419e60:	da2d      	bge.n	419ebe <switch_init+0x10a>
  419e62:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419e66:	2113      	movs	r1, #19
  419e68:	4620      	mov	r0, r4
  419e6a:	4b20      	ldr	r3, [pc, #128]	; (419eec <switch_init+0x138>)
  419e6c:	4798      	blx	r3
  419e6e:	bd10      	pop	{r4, pc}
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
  419e70:	2000      	movs	r0, #0
  419e72:	4b1f      	ldr	r3, [pc, #124]	; (419ef0 <switch_init+0x13c>)
  419e74:	4798      	blx	r3
  419e76:	3014      	adds	r0, #20
  419e78:	0080      	lsls	r0, r0, #2
  419e7a:	4b1e      	ldr	r3, [pc, #120]	; (419ef4 <switch_init+0x140>)
  419e7c:	fb83 2300 	smull	r2, r3, r3, r0
  419e80:	17c2      	asrs	r2, r0, #31
  419e82:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  419e86:	b212      	sxth	r2, r2
  419e88:	e7ba      	b.n	419e00 <switch_init+0x4c>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
  419e8a:	2000      	movs	r0, #0
  419e8c:	4b18      	ldr	r3, [pc, #96]	; (419ef0 <switch_init+0x13c>)
  419e8e:	4798      	blx	r3
  419e90:	3014      	adds	r0, #20
  419e92:	0080      	lsls	r0, r0, #2
  419e94:	4b17      	ldr	r3, [pc, #92]	; (419ef4 <switch_init+0x140>)
  419e96:	fb83 2300 	smull	r2, r3, r3, r0
  419e9a:	17c2      	asrs	r2, r0, #31
  419e9c:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  419ea0:	b212      	sxth	r2, r2
  419ea2:	e7be      	b.n	419e22 <switch_init+0x6e>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
  419ea4:	2000      	movs	r0, #0
  419ea6:	4b12      	ldr	r3, [pc, #72]	; (419ef0 <switch_init+0x13c>)
  419ea8:	4798      	blx	r3
  419eaa:	3014      	adds	r0, #20
  419eac:	0080      	lsls	r0, r0, #2
  419eae:	4b11      	ldr	r3, [pc, #68]	; (419ef4 <switch_init+0x140>)
  419eb0:	fb83 2300 	smull	r2, r3, r3, r0
  419eb4:	17c2      	asrs	r2, r0, #31
  419eb6:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  419eba:	b212      	sxth	r2, r2
  419ebc:	e7c2      	b.n	419e44 <switch_init+0x90>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
  419ebe:	2000      	movs	r0, #0
  419ec0:	4b0b      	ldr	r3, [pc, #44]	; (419ef0 <switch_init+0x13c>)
  419ec2:	4798      	blx	r3
  419ec4:	3014      	adds	r0, #20
  419ec6:	0080      	lsls	r0, r0, #2
  419ec8:	4b0a      	ldr	r3, [pc, #40]	; (419ef4 <switch_init+0x140>)
  419eca:	fb83 2300 	smull	r2, r3, r3, r0
  419ece:	17c2      	asrs	r2, r0, #31
  419ed0:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  419ed4:	b212      	sxth	r2, r2
  419ed6:	e7c6      	b.n	419e66 <switch_init+0xb2>
  419ed8:	2041480c 	.word	0x2041480c
  419edc:	004198fd 	.word	0x004198fd
  419ee0:	0040a441 	.word	0x0040a441
  419ee4:	00431c94 	.word	0x00431c94
  419ee8:	0040a2b1 	.word	0x0040a2b1
  419eec:	0040a121 	.word	0x0040a121
  419ef0:	00415c7d 	.word	0x00415c7d
  419ef4:	66666667 	.word	0x66666667

00419ef8 <linemeter_init>:
{
  419ef8:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->lmeter);
  419efa:	4c8a      	ldr	r4, [pc, #552]	; (41a124 <linemeter_init+0x22c>)
  419efc:	6820      	ldr	r0, [r4, #0]
  419efe:	3074      	adds	r0, #116	; 0x74
  419f00:	4b89      	ldr	r3, [pc, #548]	; (41a128 <linemeter_init+0x230>)
  419f02:	4798      	blx	r3
    lv_style_set_radius(&styles->lmeter, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  419f04:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419f06:	f647 72ff 	movw	r2, #32767	; 0x7fff
  419f0a:	2101      	movs	r1, #1
  419f0c:	3074      	adds	r0, #116	; 0x74
  419f0e:	4b87      	ldr	r3, [pc, #540]	; (41a12c <linemeter_init+0x234>)
  419f10:	4798      	blx	r3
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  419f12:	6824      	ldr	r4, [r4, #0]
  419f14:	3474      	adds	r4, #116	; 0x74
  419f16:	2000      	movs	r0, #0
  419f18:	4b85      	ldr	r3, [pc, #532]	; (41a130 <linemeter_init+0x238>)
  419f1a:	4798      	blx	r3
  419f1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419f20:	0080      	lsls	r0, r0, #2
  419f22:	3050      	adds	r0, #80	; 0x50
  419f24:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419f28:	f280 8093 	bge.w	41a052 <linemeter_init+0x15a>
  419f2c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419f2e:	2112      	movs	r1, #18
  419f30:	4620      	mov	r0, r4
  419f32:	4b7e      	ldr	r3, [pc, #504]	; (41a12c <linemeter_init+0x234>)
  419f34:	4798      	blx	r3
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  419f36:	4b7b      	ldr	r3, [pc, #492]	; (41a124 <linemeter_init+0x22c>)
  419f38:	681c      	ldr	r4, [r3, #0]
  419f3a:	3474      	adds	r4, #116	; 0x74
  419f3c:	2000      	movs	r0, #0
  419f3e:	4b7c      	ldr	r3, [pc, #496]	; (41a130 <linemeter_init+0x238>)
  419f40:	4798      	blx	r3
  419f42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419f46:	0080      	lsls	r0, r0, #2
  419f48:	3050      	adds	r0, #80	; 0x50
  419f4a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419f4e:	f280 808f 	bge.w	41a070 <linemeter_init+0x178>
  419f52:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419f54:	2113      	movs	r1, #19
  419f56:	4620      	mov	r0, r4
  419f58:	4b74      	ldr	r3, [pc, #464]	; (41a12c <linemeter_init+0x234>)
  419f5a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  419f5c:	4b71      	ldr	r3, [pc, #452]	; (41a124 <linemeter_init+0x22c>)
  419f5e:	681c      	ldr	r4, [r3, #0]
  419f60:	3474      	adds	r4, #116	; 0x74
  419f62:	2000      	movs	r0, #0
  419f64:	4b72      	ldr	r3, [pc, #456]	; (41a130 <linemeter_init+0x238>)
  419f66:	4798      	blx	r3
  419f68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419f6c:	0080      	lsls	r0, r0, #2
  419f6e:	3050      	adds	r0, #80	; 0x50
  419f70:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419f74:	f280 808b 	bge.w	41a08e <linemeter_init+0x196>
  419f78:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  419f7a:	2110      	movs	r1, #16
  419f7c:	4620      	mov	r0, r4
  419f7e:	4b6b      	ldr	r3, [pc, #428]	; (41a12c <linemeter_init+0x234>)
  419f80:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
  419f82:	4b68      	ldr	r3, [pc, #416]	; (41a124 <linemeter_init+0x22c>)
  419f84:	681c      	ldr	r4, [r3, #0]
  419f86:	3474      	adds	r4, #116	; 0x74
  419f88:	2000      	movs	r0, #0
  419f8a:	4b69      	ldr	r3, [pc, #420]	; (41a130 <linemeter_init+0x238>)
  419f8c:	4798      	blx	r3
  419f8e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419f92:	0040      	lsls	r0, r0, #1
  419f94:	3050      	adds	r0, #80	; 0x50
  419f96:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419f9a:	f280 8087 	bge.w	41a0ac <linemeter_init+0x1b4>
  419f9e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  419fa0:	2114      	movs	r1, #20
  419fa2:	4620      	mov	r0, r4
  419fa4:	4b61      	ldr	r3, [pc, #388]	; (41a12c <linemeter_init+0x234>)
  419fa6:	4798      	blx	r3
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
  419fa8:	4b5e      	ldr	r3, [pc, #376]	; (41a124 <linemeter_init+0x22c>)
  419faa:	681c      	ldr	r4, [r3, #0]
  419fac:	3474      	adds	r4, #116	; 0x74
  419fae:	2000      	movs	r0, #0
  419fb0:	4b5f      	ldr	r3, [pc, #380]	; (41a130 <linemeter_init+0x238>)
  419fb2:	4798      	blx	r3
  419fb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419fb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419fbc:	3050      	adds	r0, #80	; 0x50
  419fbe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419fc2:	f280 8082 	bge.w	41a0ca <linemeter_init+0x1d2>
  419fc6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  419fc8:	21c0      	movs	r1, #192	; 0xc0
  419fca:	4620      	mov	r0, r4
  419fcc:	4b57      	ldr	r3, [pc, #348]	; (41a12c <linemeter_init+0x234>)
  419fce:	4798      	blx	r3
    lv_style_set_line_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
  419fd0:	4c54      	ldr	r4, [pc, #336]	; (41a124 <linemeter_init+0x22c>)
  419fd2:	6820      	ldr	r0, [r4, #0]
  419fd4:	4e57      	ldr	r6, [pc, #348]	; (41a134 <linemeter_init+0x23c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  419fd6:	89b2      	ldrh	r2, [r6, #12]
  419fd8:	2199      	movs	r1, #153	; 0x99
  419fda:	3074      	adds	r0, #116	; 0x74
  419fdc:	4d56      	ldr	r5, [pc, #344]	; (41a138 <linemeter_init+0x240>)
  419fde:	47a8      	blx	r5
    lv_style_set_scale_grad_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
  419fe0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  419fe2:	89b2      	ldrh	r2, [r6, #12]
  419fe4:	21c9      	movs	r1, #201	; 0xc9
  419fe6:	3074      	adds	r0, #116	; 0x74
  419fe8:	47a8      	blx	r5
    lv_style_set_scale_end_color(&styles->lmeter, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  419fea:	6820      	ldr	r0, [r4, #0]
  419fec:	f04f 0200 	mov.w	r2, #0
  419ff0:	2304      	movs	r3, #4
  419ff2:	f363 0202 	bfi	r2, r3, #0, #3
  419ff6:	2311      	movs	r3, #17
  419ff8:	f363 02c7 	bfi	r2, r3, #3, #5
  419ffc:	f363 220c 	bfi	r2, r3, #8, #5
  41a000:	2302      	movs	r3, #2
  41a002:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  41a006:	21ca      	movs	r1, #202	; 0xca
  41a008:	3074      	adds	r0, #116	; 0x74
  41a00a:	47a8      	blx	r5
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
  41a00c:	6824      	ldr	r4, [r4, #0]
  41a00e:	3474      	adds	r4, #116	; 0x74
  41a010:	2000      	movs	r0, #0
  41a012:	4b47      	ldr	r3, [pc, #284]	; (41a130 <linemeter_init+0x238>)
  41a014:	4798      	blx	r3
  41a016:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a01a:	0040      	lsls	r0, r0, #1
  41a01c:	3050      	adds	r0, #80	; 0x50
  41a01e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a022:	da62      	bge.n	41a0ea <linemeter_init+0x1f2>
  41a024:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41a026:	2190      	movs	r1, #144	; 0x90
  41a028:	4620      	mov	r0, r4
  41a02a:	4b40      	ldr	r3, [pc, #256]	; (41a12c <linemeter_init+0x234>)
  41a02c:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
  41a02e:	4b3d      	ldr	r3, [pc, #244]	; (41a124 <linemeter_init+0x22c>)
  41a030:	681c      	ldr	r4, [r3, #0]
  41a032:	3474      	adds	r4, #116	; 0x74
  41a034:	2000      	movs	r0, #0
  41a036:	4b3e      	ldr	r3, [pc, #248]	; (41a130 <linemeter_init+0x238>)
  41a038:	4798      	blx	r3
  41a03a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41a03e:	3050      	adds	r0, #80	; 0x50
  41a040:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a044:	da60      	bge.n	41a108 <linemeter_init+0x210>
  41a046:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  41a048:	21c3      	movs	r1, #195	; 0xc3
  41a04a:	4620      	mov	r0, r4
  41a04c:	4b37      	ldr	r3, [pc, #220]	; (41a12c <linemeter_init+0x234>)
  41a04e:	4798      	blx	r3
  41a050:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  41a052:	2000      	movs	r0, #0
  41a054:	4b36      	ldr	r3, [pc, #216]	; (41a130 <linemeter_init+0x238>)
  41a056:	4798      	blx	r3
  41a058:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a05c:	0080      	lsls	r0, r0, #2
  41a05e:	3050      	adds	r0, #80	; 0x50
  41a060:	4b36      	ldr	r3, [pc, #216]	; (41a13c <linemeter_init+0x244>)
  41a062:	fb83 2300 	smull	r2, r3, r3, r0
  41a066:	17c2      	asrs	r2, r0, #31
  41a068:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a06c:	b212      	sxth	r2, r2
  41a06e:	e75e      	b.n	419f2e <linemeter_init+0x36>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  41a070:	2000      	movs	r0, #0
  41a072:	4b2f      	ldr	r3, [pc, #188]	; (41a130 <linemeter_init+0x238>)
  41a074:	4798      	blx	r3
  41a076:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a07a:	0080      	lsls	r0, r0, #2
  41a07c:	3050      	adds	r0, #80	; 0x50
  41a07e:	4b2f      	ldr	r3, [pc, #188]	; (41a13c <linemeter_init+0x244>)
  41a080:	fb83 2300 	smull	r2, r3, r3, r0
  41a084:	17c2      	asrs	r2, r0, #31
  41a086:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a08a:	b212      	sxth	r2, r2
  41a08c:	e762      	b.n	419f54 <linemeter_init+0x5c>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  41a08e:	2000      	movs	r0, #0
  41a090:	4b27      	ldr	r3, [pc, #156]	; (41a130 <linemeter_init+0x238>)
  41a092:	4798      	blx	r3
  41a094:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a098:	0080      	lsls	r0, r0, #2
  41a09a:	3050      	adds	r0, #80	; 0x50
  41a09c:	4b27      	ldr	r3, [pc, #156]	; (41a13c <linemeter_init+0x244>)
  41a09e:	fb83 2300 	smull	r2, r3, r3, r0
  41a0a2:	17c2      	asrs	r2, r0, #31
  41a0a4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a0a8:	b212      	sxth	r2, r2
  41a0aa:	e766      	b.n	419f7a <linemeter_init+0x82>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
  41a0ac:	2000      	movs	r0, #0
  41a0ae:	4b20      	ldr	r3, [pc, #128]	; (41a130 <linemeter_init+0x238>)
  41a0b0:	4798      	blx	r3
  41a0b2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a0b6:	0040      	lsls	r0, r0, #1
  41a0b8:	3050      	adds	r0, #80	; 0x50
  41a0ba:	4b20      	ldr	r3, [pc, #128]	; (41a13c <linemeter_init+0x244>)
  41a0bc:	fb83 2300 	smull	r2, r3, r3, r0
  41a0c0:	17c2      	asrs	r2, r0, #31
  41a0c2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a0c6:	b212      	sxth	r2, r2
  41a0c8:	e76a      	b.n	419fa0 <linemeter_init+0xa8>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
  41a0ca:	2000      	movs	r0, #0
  41a0cc:	4b18      	ldr	r3, [pc, #96]	; (41a130 <linemeter_init+0x238>)
  41a0ce:	4798      	blx	r3
  41a0d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a0d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a0d8:	3050      	adds	r0, #80	; 0x50
  41a0da:	4b18      	ldr	r3, [pc, #96]	; (41a13c <linemeter_init+0x244>)
  41a0dc:	fb83 2300 	smull	r2, r3, r3, r0
  41a0e0:	17c2      	asrs	r2, r0, #31
  41a0e2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a0e6:	b212      	sxth	r2, r2
  41a0e8:	e76e      	b.n	419fc8 <linemeter_init+0xd0>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
  41a0ea:	2000      	movs	r0, #0
  41a0ec:	4b10      	ldr	r3, [pc, #64]	; (41a130 <linemeter_init+0x238>)
  41a0ee:	4798      	blx	r3
  41a0f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a0f4:	0040      	lsls	r0, r0, #1
  41a0f6:	3050      	adds	r0, #80	; 0x50
  41a0f8:	4b10      	ldr	r3, [pc, #64]	; (41a13c <linemeter_init+0x244>)
  41a0fa:	fb83 2300 	smull	r2, r3, r3, r0
  41a0fe:	17c2      	asrs	r2, r0, #31
  41a100:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a104:	b212      	sxth	r2, r2
  41a106:	e78e      	b.n	41a026 <linemeter_init+0x12e>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
  41a108:	2000      	movs	r0, #0
  41a10a:	4b09      	ldr	r3, [pc, #36]	; (41a130 <linemeter_init+0x238>)
  41a10c:	4798      	blx	r3
  41a10e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41a112:	3050      	adds	r0, #80	; 0x50
  41a114:	4b09      	ldr	r3, [pc, #36]	; (41a13c <linemeter_init+0x244>)
  41a116:	fb83 2300 	smull	r2, r3, r3, r0
  41a11a:	17c2      	asrs	r2, r0, #31
  41a11c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a120:	b212      	sxth	r2, r2
  41a122:	e791      	b.n	41a048 <linemeter_init+0x150>
  41a124:	2041480c 	.word	0x2041480c
  41a128:	004198fd 	.word	0x004198fd
  41a12c:	0040a121 	.word	0x0040a121
  41a130:	00415c7d 	.word	0x00415c7d
  41a134:	20414810 	.word	0x20414810
  41a138:	0040a2b1 	.word	0x0040a2b1
  41a13c:	66666667 	.word	0x66666667

0041a140 <gauge_init>:
{
  41a140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    style_init_reset(&styles->gauge_main);
  41a144:	4cc0      	ldr	r4, [pc, #768]	; (41a448 <gauge_init+0x308>)
  41a146:	6820      	ldr	r0, [r4, #0]
  41a148:	3060      	adds	r0, #96	; 0x60
  41a14a:	4bc0      	ldr	r3, [pc, #768]	; (41a44c <gauge_init+0x30c>)
  41a14c:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  41a14e:	6820      	ldr	r0, [r4, #0]
  41a150:	f04f 0804 	mov.w	r8, #4
  41a154:	f04f 0200 	mov.w	r2, #0
  41a158:	f368 0202 	bfi	r2, r8, #0, #3
  41a15c:	2511      	movs	r5, #17
  41a15e:	f365 02c7 	bfi	r2, r5, #3, #5
  41a162:	f365 220c 	bfi	r2, r5, #8, #5
  41a166:	2702      	movs	r7, #2
  41a168:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41a16c:	2199      	movs	r1, #153	; 0x99
  41a16e:	3060      	adds	r0, #96	; 0x60
  41a170:	4eb7      	ldr	r6, [pc, #732]	; (41a450 <gauge_init+0x310>)
  41a172:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  41a174:	6820      	ldr	r0, [r4, #0]
  41a176:	f04f 0200 	mov.w	r2, #0
  41a17a:	f368 0202 	bfi	r2, r8, #0, #3
  41a17e:	f365 02c7 	bfi	r2, r5, #3, #5
  41a182:	f365 220c 	bfi	r2, r5, #8, #5
  41a186:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  41a18a:	21c9      	movs	r1, #201	; 0xc9
  41a18c:	3060      	adds	r0, #96	; 0x60
  41a18e:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_main, LV_STATE_DEFAULT, theme.color_primary);
  41a190:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  41a192:	4bb0      	ldr	r3, [pc, #704]	; (41a454 <gauge_init+0x314>)
  41a194:	899a      	ldrh	r2, [r3, #12]
  41a196:	21ca      	movs	r1, #202	; 0xca
  41a198:	3060      	adds	r0, #96	; 0x60
  41a19a:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
  41a19c:	6824      	ldr	r4, [r4, #0]
  41a19e:	3460      	adds	r4, #96	; 0x60
  41a1a0:	2000      	movs	r0, #0
  41a1a2:	4bad      	ldr	r3, [pc, #692]	; (41a458 <gauge_init+0x318>)
  41a1a4:	4798      	blx	r3
  41a1a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a1aa:	3050      	adds	r0, #80	; 0x50
  41a1ac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a1b0:	f280 8177 	bge.w	41a4a2 <gauge_init+0x362>
  41a1b4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41a1b6:	2190      	movs	r1, #144	; 0x90
  41a1b8:	4620      	mov	r0, r4
  41a1ba:	4ba8      	ldr	r3, [pc, #672]	; (41a45c <gauge_init+0x31c>)
  41a1bc:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
  41a1be:	4ba2      	ldr	r3, [pc, #648]	; (41a448 <gauge_init+0x308>)
  41a1c0:	681c      	ldr	r4, [r3, #0]
  41a1c2:	3460      	adds	r4, #96	; 0x60
  41a1c4:	2000      	movs	r0, #0
  41a1c6:	4ba4      	ldr	r3, [pc, #656]	; (41a458 <gauge_init+0x318>)
  41a1c8:	4798      	blx	r3
  41a1ca:	3014      	adds	r0, #20
  41a1cc:	0080      	lsls	r0, r0, #2
  41a1ce:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a1d2:	f280 8174 	bge.w	41a4be <gauge_init+0x37e>
  41a1d6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  41a1d8:	21c3      	movs	r1, #195	; 0xc3
  41a1da:	4620      	mov	r0, r4
  41a1dc:	4b9f      	ldr	r3, [pc, #636]	; (41a45c <gauge_init+0x31c>)
  41a1de:	4798      	blx	r3
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
  41a1e0:	4b99      	ldr	r3, [pc, #612]	; (41a448 <gauge_init+0x308>)
  41a1e2:	681c      	ldr	r4, [r3, #0]
  41a1e4:	3460      	adds	r4, #96	; 0x60
  41a1e6:	2000      	movs	r0, #0
  41a1e8:	4b9b      	ldr	r3, [pc, #620]	; (41a458 <gauge_init+0x318>)
  41a1ea:	4798      	blx	r3
  41a1ec:	300a      	adds	r0, #10
  41a1ee:	00c0      	lsls	r0, r0, #3
  41a1f0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a1f4:	f280 8170 	bge.w	41a4d8 <gauge_init+0x398>
  41a1f8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
  41a1fa:	21c2      	movs	r1, #194	; 0xc2
  41a1fc:	4620      	mov	r0, r4
  41a1fe:	4b97      	ldr	r3, [pc, #604]	; (41a45c <gauge_init+0x31c>)
  41a200:	4798      	blx	r3
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41a202:	4b91      	ldr	r3, [pc, #580]	; (41a448 <gauge_init+0x308>)
  41a204:	681c      	ldr	r4, [r3, #0]
  41a206:	3460      	adds	r4, #96	; 0x60
  41a208:	2000      	movs	r0, #0
  41a20a:	4b93      	ldr	r3, [pc, #588]	; (41a458 <gauge_init+0x318>)
  41a20c:	4798      	blx	r3
  41a20e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a212:	0080      	lsls	r0, r0, #2
  41a214:	3050      	adds	r0, #80	; 0x50
  41a216:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a21a:	f280 816a 	bge.w	41a4f2 <gauge_init+0x3b2>
  41a21e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a220:	2112      	movs	r1, #18
  41a222:	4620      	mov	r0, r4
  41a224:	4b8d      	ldr	r3, [pc, #564]	; (41a45c <gauge_init+0x31c>)
  41a226:	4798      	blx	r3
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41a228:	4b87      	ldr	r3, [pc, #540]	; (41a448 <gauge_init+0x308>)
  41a22a:	681c      	ldr	r4, [r3, #0]
  41a22c:	3460      	adds	r4, #96	; 0x60
  41a22e:	2000      	movs	r0, #0
  41a230:	4b89      	ldr	r3, [pc, #548]	; (41a458 <gauge_init+0x318>)
  41a232:	4798      	blx	r3
  41a234:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a238:	0080      	lsls	r0, r0, #2
  41a23a:	3050      	adds	r0, #80	; 0x50
  41a23c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a240:	f280 8166 	bge.w	41a510 <gauge_init+0x3d0>
  41a244:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a246:	2113      	movs	r1, #19
  41a248:	4620      	mov	r0, r4
  41a24a:	4b84      	ldr	r3, [pc, #528]	; (41a45c <gauge_init+0x31c>)
  41a24c:	4798      	blx	r3
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41a24e:	4b7e      	ldr	r3, [pc, #504]	; (41a448 <gauge_init+0x308>)
  41a250:	681c      	ldr	r4, [r3, #0]
  41a252:	3460      	adds	r4, #96	; 0x60
  41a254:	2000      	movs	r0, #0
  41a256:	4b80      	ldr	r3, [pc, #512]	; (41a458 <gauge_init+0x318>)
  41a258:	4798      	blx	r3
  41a25a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a25e:	0080      	lsls	r0, r0, #2
  41a260:	3050      	adds	r0, #80	; 0x50
  41a262:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a266:	f280 8162 	bge.w	41a52e <gauge_init+0x3ee>
  41a26a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a26c:	2110      	movs	r1, #16
  41a26e:	4620      	mov	r0, r4
  41a270:	4b7a      	ldr	r3, [pc, #488]	; (41a45c <gauge_init+0x31c>)
  41a272:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41a274:	4b74      	ldr	r3, [pc, #464]	; (41a448 <gauge_init+0x308>)
  41a276:	681c      	ldr	r4, [r3, #0]
  41a278:	3460      	adds	r4, #96	; 0x60
  41a27a:	2000      	movs	r0, #0
  41a27c:	4b76      	ldr	r3, [pc, #472]	; (41a458 <gauge_init+0x318>)
  41a27e:	4798      	blx	r3
  41a280:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a284:	0080      	lsls	r0, r0, #2
  41a286:	3050      	adds	r0, #80	; 0x50
  41a288:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a28c:	f280 815e 	bge.w	41a54c <gauge_init+0x40c>
  41a290:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41a292:	2114      	movs	r1, #20
  41a294:	4620      	mov	r0, r4
  41a296:	4b71      	ldr	r3, [pc, #452]	; (41a45c <gauge_init+0x31c>)
  41a298:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
  41a29a:	4b6b      	ldr	r3, [pc, #428]	; (41a448 <gauge_init+0x308>)
  41a29c:	681c      	ldr	r4, [r3, #0]
  41a29e:	3460      	adds	r4, #96	; 0x60
  41a2a0:	2000      	movs	r0, #0
  41a2a2:	4b6d      	ldr	r3, [pc, #436]	; (41a458 <gauge_init+0x318>)
  41a2a4:	4798      	blx	r3
  41a2a6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a2aa:	3050      	adds	r0, #80	; 0x50
  41a2ac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a2b0:	f280 815b 	bge.w	41a56a <gauge_init+0x42a>
  41a2b4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  41a2b6:	21c0      	movs	r1, #192	; 0xc0
  41a2b8:	4620      	mov	r0, r4
  41a2ba:	4d68      	ldr	r5, [pc, #416]	; (41a45c <gauge_init+0x31c>)
  41a2bc:	47a8      	blx	r5
    lv_style_set_radius(&styles->gauge_main, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41a2be:	4c62      	ldr	r4, [pc, #392]	; (41a448 <gauge_init+0x308>)
  41a2c0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a2c2:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41a2c6:	2101      	movs	r1, #1
  41a2c8:	3060      	adds	r0, #96	; 0x60
  41a2ca:	47a8      	blx	r5
    style_init_reset(&styles->gauge_strong);
  41a2cc:	6820      	ldr	r0, [r4, #0]
  41a2ce:	3064      	adds	r0, #100	; 0x64
  41a2d0:	4b5e      	ldr	r3, [pc, #376]	; (41a44c <gauge_init+0x30c>)
  41a2d2:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  41a2d4:	6820      	ldr	r0, [r4, #0]
  41a2d6:	f04f 0804 	mov.w	r8, #4
  41a2da:	f04f 0200 	mov.w	r2, #0
  41a2de:	f368 0202 	bfi	r2, r8, #0, #3
  41a2e2:	2511      	movs	r5, #17
  41a2e4:	f365 02c7 	bfi	r2, r5, #3, #5
  41a2e8:	f365 220c 	bfi	r2, r5, #8, #5
  41a2ec:	2702      	movs	r7, #2
  41a2ee:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41a2f2:	2199      	movs	r1, #153	; 0x99
  41a2f4:	3064      	adds	r0, #100	; 0x64
  41a2f6:	4e56      	ldr	r6, [pc, #344]	; (41a450 <gauge_init+0x310>)
  41a2f8:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  41a2fa:	6820      	ldr	r0, [r4, #0]
  41a2fc:	f04f 0200 	mov.w	r2, #0
  41a300:	f368 0202 	bfi	r2, r8, #0, #3
  41a304:	f365 02c7 	bfi	r2, r5, #3, #5
  41a308:	f365 220c 	bfi	r2, r5, #8, #5
  41a30c:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  41a310:	21c9      	movs	r1, #201	; 0xc9
  41a312:	3064      	adds	r0, #100	; 0x64
  41a314:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_strong, LV_STATE_DEFAULT, theme.color_primary);
  41a316:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  41a318:	4b4e      	ldr	r3, [pc, #312]	; (41a454 <gauge_init+0x314>)
  41a31a:	899a      	ldrh	r2, [r3, #12]
  41a31c:	21ca      	movs	r1, #202	; 0xca
  41a31e:	3064      	adds	r0, #100	; 0x64
  41a320:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  41a322:	6824      	ldr	r4, [r4, #0]
  41a324:	3464      	adds	r4, #100	; 0x64
  41a326:	2000      	movs	r0, #0
  41a328:	4b4b      	ldr	r3, [pc, #300]	; (41a458 <gauge_init+0x318>)
  41a32a:	4798      	blx	r3
  41a32c:	300a      	adds	r0, #10
  41a32e:	00c0      	lsls	r0, r0, #3
  41a330:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a334:	f280 8127 	bge.w	41a586 <gauge_init+0x446>
  41a338:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41a33a:	2190      	movs	r1, #144	; 0x90
  41a33c:	4620      	mov	r0, r4
  41a33e:	4b47      	ldr	r3, [pc, #284]	; (41a45c <gauge_init+0x31c>)
  41a340:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  41a342:	4b41      	ldr	r3, [pc, #260]	; (41a448 <gauge_init+0x308>)
  41a344:	681c      	ldr	r4, [r3, #0]
  41a346:	3464      	adds	r4, #100	; 0x64
  41a348:	2000      	movs	r0, #0
  41a34a:	4b43      	ldr	r3, [pc, #268]	; (41a458 <gauge_init+0x318>)
  41a34c:	4798      	blx	r3
  41a34e:	300a      	adds	r0, #10
  41a350:	00c0      	lsls	r0, r0, #3
  41a352:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a356:	f280 8123 	bge.w	41a5a0 <gauge_init+0x460>
  41a35a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  41a35c:	21c3      	movs	r1, #195	; 0xc3
  41a35e:	4620      	mov	r0, r4
  41a360:	4b3e      	ldr	r3, [pc, #248]	; (41a45c <gauge_init+0x31c>)
  41a362:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
  41a364:	4b38      	ldr	r3, [pc, #224]	; (41a448 <gauge_init+0x308>)
  41a366:	681c      	ldr	r4, [r3, #0]
  41a368:	3464      	adds	r4, #100	; 0x64
  41a36a:	2000      	movs	r0, #0
  41a36c:	4b3a      	ldr	r3, [pc, #232]	; (41a458 <gauge_init+0x318>)
  41a36e:	4798      	blx	r3
  41a370:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a374:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a378:	3050      	adds	r0, #80	; 0x50
  41a37a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a37e:	f280 811c 	bge.w	41a5ba <gauge_init+0x47a>
  41a382:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  41a384:	21c0      	movs	r1, #192	; 0xc0
  41a386:	4620      	mov	r0, r4
  41a388:	4b34      	ldr	r3, [pc, #208]	; (41a45c <gauge_init+0x31c>)
  41a38a:	4798      	blx	r3
    style_init_reset(&styles->gauge_needle);
  41a38c:	4c2e      	ldr	r4, [pc, #184]	; (41a448 <gauge_init+0x308>)
  41a38e:	6820      	ldr	r0, [r4, #0]
  41a390:	3068      	adds	r0, #104	; 0x68
  41a392:	4b2e      	ldr	r3, [pc, #184]	; (41a44c <gauge_init+0x30c>)
  41a394:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  41a396:	6820      	ldr	r0, [r4, #0]
  41a398:	3068      	adds	r0, #104	; 0x68
  41a39a:	4b2e      	ldr	r3, [pc, #184]	; (41a454 <gauge_init+0x314>)
  41a39c:	6a1b      	ldr	r3, [r3, #32]
  41a39e:	f013 0f02 	tst.w	r3, #2
  41a3a2:	f000 811a 	beq.w	41a5da <gauge_init+0x49a>
  41a3a6:	2302      	movs	r3, #2
  41a3a8:	f04f 0200 	mov.w	r2, #0
  41a3ac:	f363 0202 	bfi	r2, r3, #0, #3
  41a3b0:	2108      	movs	r1, #8
  41a3b2:	f361 02c7 	bfi	r2, r1, #3, #5
  41a3b6:	210b      	movs	r1, #11
  41a3b8:	f361 220c 	bfi	r2, r1, #8, #5
  41a3bc:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41a3c0:	2199      	movs	r1, #153	; 0x99
  41a3c2:	4b23      	ldr	r3, [pc, #140]	; (41a450 <gauge_init+0x310>)
  41a3c4:	4798      	blx	r3
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
  41a3c6:	4b20      	ldr	r3, [pc, #128]	; (41a448 <gauge_init+0x308>)
  41a3c8:	681c      	ldr	r4, [r3, #0]
  41a3ca:	3468      	adds	r4, #104	; 0x68
  41a3cc:	2000      	movs	r0, #0
  41a3ce:	4b22      	ldr	r3, [pc, #136]	; (41a458 <gauge_init+0x318>)
  41a3d0:	4798      	blx	r3
  41a3d2:	300a      	adds	r0, #10
  41a3d4:	00c0      	lsls	r0, r0, #3
  41a3d6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a3da:	f280 8101 	bge.w	41a5e0 <gauge_init+0x4a0>
  41a3de:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41a3e0:	2190      	movs	r1, #144	; 0x90
  41a3e2:	4620      	mov	r0, r4
  41a3e4:	4b1d      	ldr	r3, [pc, #116]	; (41a45c <gauge_init+0x31c>)
  41a3e6:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->gauge_needle, LV_STATE_DEFAULT, LV_OPA_COVER);
  41a3e8:	4c17      	ldr	r4, [pc, #92]	; (41a448 <gauge_init+0x308>)
  41a3ea:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a3ec:	22ff      	movs	r2, #255	; 0xff
  41a3ee:	212c      	movs	r1, #44	; 0x2c
  41a3f0:	3068      	adds	r0, #104	; 0x68
  41a3f2:	4b1b      	ldr	r3, [pc, #108]	; (41a460 <gauge_init+0x320>)
  41a3f4:	4798      	blx	r3
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  41a3f6:	6820      	ldr	r0, [r4, #0]
  41a3f8:	3068      	adds	r0, #104	; 0x68
  41a3fa:	4b16      	ldr	r3, [pc, #88]	; (41a454 <gauge_init+0x314>)
  41a3fc:	6a1b      	ldr	r3, [r3, #32]
  41a3fe:	f013 0f02 	tst.w	r3, #2
  41a402:	f000 80fa 	beq.w	41a5fa <gauge_init+0x4ba>
  41a406:	2302      	movs	r3, #2
  41a408:	f04f 0200 	mov.w	r2, #0
  41a40c:	f363 0202 	bfi	r2, r3, #0, #3
  41a410:	2108      	movs	r1, #8
  41a412:	f361 02c7 	bfi	r2, r1, #3, #5
  41a416:	210b      	movs	r1, #11
  41a418:	f361 220c 	bfi	r2, r1, #8, #5
  41a41c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a420:	2129      	movs	r1, #41	; 0x29
  41a422:	4b0b      	ldr	r3, [pc, #44]	; (41a450 <gauge_init+0x310>)
  41a424:	4798      	blx	r3
    lv_style_set_radius(&styles->gauge_needle, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41a426:	4c08      	ldr	r4, [pc, #32]	; (41a448 <gauge_init+0x308>)
  41a428:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a42a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41a42e:	2101      	movs	r1, #1
  41a430:	3068      	adds	r0, #104	; 0x68
  41a432:	4b0a      	ldr	r3, [pc, #40]	; (41a45c <gauge_init+0x31c>)
  41a434:	4798      	blx	r3
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
  41a436:	6824      	ldr	r4, [r4, #0]
  41a438:	3468      	adds	r4, #104	; 0x68
  41a43a:	2000      	movs	r0, #0
  41a43c:	4b06      	ldr	r3, [pc, #24]	; (41a458 <gauge_init+0x318>)
  41a43e:	4798      	blx	r3
  41a440:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a444:	0040      	lsls	r0, r0, #1
  41a446:	e00d      	b.n	41a464 <gauge_init+0x324>
  41a448:	2041480c 	.word	0x2041480c
  41a44c:	004198fd 	.word	0x004198fd
  41a450:	0040a2b1 	.word	0x0040a2b1
  41a454:	20414810 	.word	0x20414810
  41a458:	00415c7d 	.word	0x00415c7d
  41a45c:	0040a121 	.word	0x0040a121
  41a460:	0040a441 	.word	0x0040a441
  41a464:	3050      	adds	r0, #80	; 0x50
  41a466:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a46a:	f280 80c9 	bge.w	41a600 <gauge_init+0x4c0>
  41a46e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41a470:	2103      	movs	r1, #3
  41a472:	4620      	mov	r0, r4
  41a474:	4b71      	ldr	r3, [pc, #452]	; (41a63c <gauge_init+0x4fc>)
  41a476:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
  41a478:	4b71      	ldr	r3, [pc, #452]	; (41a640 <gauge_init+0x500>)
  41a47a:	681c      	ldr	r4, [r3, #0]
  41a47c:	3468      	adds	r4, #104	; 0x68
  41a47e:	2000      	movs	r0, #0
  41a480:	4b70      	ldr	r3, [pc, #448]	; (41a644 <gauge_init+0x504>)
  41a482:	4798      	blx	r3
  41a484:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a488:	0040      	lsls	r0, r0, #1
  41a48a:	3050      	adds	r0, #80	; 0x50
  41a48c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a490:	f280 80c5 	bge.w	41a61e <gauge_init+0x4de>
  41a494:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41a496:	2114      	movs	r1, #20
  41a498:	4620      	mov	r0, r4
  41a49a:	4b68      	ldr	r3, [pc, #416]	; (41a63c <gauge_init+0x4fc>)
  41a49c:	4798      	blx	r3
  41a49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
  41a4a2:	2000      	movs	r0, #0
  41a4a4:	4b67      	ldr	r3, [pc, #412]	; (41a644 <gauge_init+0x504>)
  41a4a6:	4798      	blx	r3
  41a4a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a4ac:	3050      	adds	r0, #80	; 0x50
  41a4ae:	4b66      	ldr	r3, [pc, #408]	; (41a648 <gauge_init+0x508>)
  41a4b0:	fb83 2300 	smull	r2, r3, r3, r0
  41a4b4:	17c2      	asrs	r2, r0, #31
  41a4b6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a4ba:	b212      	sxth	r2, r2
  41a4bc:	e67b      	b.n	41a1b6 <gauge_init+0x76>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
  41a4be:	2000      	movs	r0, #0
  41a4c0:	4b60      	ldr	r3, [pc, #384]	; (41a644 <gauge_init+0x504>)
  41a4c2:	4798      	blx	r3
  41a4c4:	3014      	adds	r0, #20
  41a4c6:	0080      	lsls	r0, r0, #2
  41a4c8:	4b5f      	ldr	r3, [pc, #380]	; (41a648 <gauge_init+0x508>)
  41a4ca:	fb83 2300 	smull	r2, r3, r3, r0
  41a4ce:	17c2      	asrs	r2, r0, #31
  41a4d0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a4d4:	b212      	sxth	r2, r2
  41a4d6:	e67f      	b.n	41a1d8 <gauge_init+0x98>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
  41a4d8:	2000      	movs	r0, #0
  41a4da:	4b5a      	ldr	r3, [pc, #360]	; (41a644 <gauge_init+0x504>)
  41a4dc:	4798      	blx	r3
  41a4de:	300a      	adds	r0, #10
  41a4e0:	00c0      	lsls	r0, r0, #3
  41a4e2:	4b59      	ldr	r3, [pc, #356]	; (41a648 <gauge_init+0x508>)
  41a4e4:	fb83 2300 	smull	r2, r3, r3, r0
  41a4e8:	17c2      	asrs	r2, r0, #31
  41a4ea:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a4ee:	b212      	sxth	r2, r2
  41a4f0:	e683      	b.n	41a1fa <gauge_init+0xba>
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41a4f2:	2000      	movs	r0, #0
  41a4f4:	4b53      	ldr	r3, [pc, #332]	; (41a644 <gauge_init+0x504>)
  41a4f6:	4798      	blx	r3
  41a4f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a4fc:	0080      	lsls	r0, r0, #2
  41a4fe:	3050      	adds	r0, #80	; 0x50
  41a500:	4b51      	ldr	r3, [pc, #324]	; (41a648 <gauge_init+0x508>)
  41a502:	fb83 2300 	smull	r2, r3, r3, r0
  41a506:	17c2      	asrs	r2, r0, #31
  41a508:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a50c:	b212      	sxth	r2, r2
  41a50e:	e687      	b.n	41a220 <gauge_init+0xe0>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41a510:	2000      	movs	r0, #0
  41a512:	4b4c      	ldr	r3, [pc, #304]	; (41a644 <gauge_init+0x504>)
  41a514:	4798      	blx	r3
  41a516:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a51a:	0080      	lsls	r0, r0, #2
  41a51c:	3050      	adds	r0, #80	; 0x50
  41a51e:	4b4a      	ldr	r3, [pc, #296]	; (41a648 <gauge_init+0x508>)
  41a520:	fb83 2300 	smull	r2, r3, r3, r0
  41a524:	17c2      	asrs	r2, r0, #31
  41a526:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a52a:	b212      	sxth	r2, r2
  41a52c:	e68b      	b.n	41a246 <gauge_init+0x106>
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41a52e:	2000      	movs	r0, #0
  41a530:	4b44      	ldr	r3, [pc, #272]	; (41a644 <gauge_init+0x504>)
  41a532:	4798      	blx	r3
  41a534:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a538:	0080      	lsls	r0, r0, #2
  41a53a:	3050      	adds	r0, #80	; 0x50
  41a53c:	4b42      	ldr	r3, [pc, #264]	; (41a648 <gauge_init+0x508>)
  41a53e:	fb83 2300 	smull	r2, r3, r3, r0
  41a542:	17c2      	asrs	r2, r0, #31
  41a544:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a548:	b212      	sxth	r2, r2
  41a54a:	e68f      	b.n	41a26c <gauge_init+0x12c>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41a54c:	2000      	movs	r0, #0
  41a54e:	4b3d      	ldr	r3, [pc, #244]	; (41a644 <gauge_init+0x504>)
  41a550:	4798      	blx	r3
  41a552:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a556:	0080      	lsls	r0, r0, #2
  41a558:	3050      	adds	r0, #80	; 0x50
  41a55a:	4b3b      	ldr	r3, [pc, #236]	; (41a648 <gauge_init+0x508>)
  41a55c:	fb83 2300 	smull	r2, r3, r3, r0
  41a560:	17c2      	asrs	r2, r0, #31
  41a562:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a566:	b212      	sxth	r2, r2
  41a568:	e693      	b.n	41a292 <gauge_init+0x152>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
  41a56a:	2000      	movs	r0, #0
  41a56c:	4b35      	ldr	r3, [pc, #212]	; (41a644 <gauge_init+0x504>)
  41a56e:	4798      	blx	r3
  41a570:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a574:	3050      	adds	r0, #80	; 0x50
  41a576:	4b34      	ldr	r3, [pc, #208]	; (41a648 <gauge_init+0x508>)
  41a578:	fb83 2300 	smull	r2, r3, r3, r0
  41a57c:	17c2      	asrs	r2, r0, #31
  41a57e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a582:	b212      	sxth	r2, r2
  41a584:	e697      	b.n	41a2b6 <gauge_init+0x176>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  41a586:	2000      	movs	r0, #0
  41a588:	4b2e      	ldr	r3, [pc, #184]	; (41a644 <gauge_init+0x504>)
  41a58a:	4798      	blx	r3
  41a58c:	300a      	adds	r0, #10
  41a58e:	00c0      	lsls	r0, r0, #3
  41a590:	4b2d      	ldr	r3, [pc, #180]	; (41a648 <gauge_init+0x508>)
  41a592:	fb83 2300 	smull	r2, r3, r3, r0
  41a596:	17c2      	asrs	r2, r0, #31
  41a598:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a59c:	b212      	sxth	r2, r2
  41a59e:	e6cc      	b.n	41a33a <gauge_init+0x1fa>
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  41a5a0:	2000      	movs	r0, #0
  41a5a2:	4b28      	ldr	r3, [pc, #160]	; (41a644 <gauge_init+0x504>)
  41a5a4:	4798      	blx	r3
  41a5a6:	300a      	adds	r0, #10
  41a5a8:	00c0      	lsls	r0, r0, #3
  41a5aa:	4b27      	ldr	r3, [pc, #156]	; (41a648 <gauge_init+0x508>)
  41a5ac:	fb83 2300 	smull	r2, r3, r3, r0
  41a5b0:	17c2      	asrs	r2, r0, #31
  41a5b2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a5b6:	b212      	sxth	r2, r2
  41a5b8:	e6d0      	b.n	41a35c <gauge_init+0x21c>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
  41a5ba:	2000      	movs	r0, #0
  41a5bc:	4b21      	ldr	r3, [pc, #132]	; (41a644 <gauge_init+0x504>)
  41a5be:	4798      	blx	r3
  41a5c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a5c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a5c8:	3050      	adds	r0, #80	; 0x50
  41a5ca:	4b1f      	ldr	r3, [pc, #124]	; (41a648 <gauge_init+0x508>)
  41a5cc:	fb83 2300 	smull	r2, r3, r3, r0
  41a5d0:	17c2      	asrs	r2, r0, #31
  41a5d2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a5d6:	b212      	sxth	r2, r2
  41a5d8:	e6d4      	b.n	41a384 <gauge_init+0x244>
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  41a5da:	4b1c      	ldr	r3, [pc, #112]	; (41a64c <gauge_init+0x50c>)
  41a5dc:	881a      	ldrh	r2, [r3, #0]
  41a5de:	e6ef      	b.n	41a3c0 <gauge_init+0x280>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
  41a5e0:	2000      	movs	r0, #0
  41a5e2:	4b18      	ldr	r3, [pc, #96]	; (41a644 <gauge_init+0x504>)
  41a5e4:	4798      	blx	r3
  41a5e6:	300a      	adds	r0, #10
  41a5e8:	00c0      	lsls	r0, r0, #3
  41a5ea:	4b17      	ldr	r3, [pc, #92]	; (41a648 <gauge_init+0x508>)
  41a5ec:	fb83 2300 	smull	r2, r3, r3, r0
  41a5f0:	17c2      	asrs	r2, r0, #31
  41a5f2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a5f6:	b212      	sxth	r2, r2
  41a5f8:	e6f2      	b.n	41a3e0 <gauge_init+0x2a0>
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  41a5fa:	4b14      	ldr	r3, [pc, #80]	; (41a64c <gauge_init+0x50c>)
  41a5fc:	881a      	ldrh	r2, [r3, #0]
  41a5fe:	e70f      	b.n	41a420 <gauge_init+0x2e0>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
  41a600:	2000      	movs	r0, #0
  41a602:	4b10      	ldr	r3, [pc, #64]	; (41a644 <gauge_init+0x504>)
  41a604:	4798      	blx	r3
  41a606:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a60a:	0040      	lsls	r0, r0, #1
  41a60c:	3050      	adds	r0, #80	; 0x50
  41a60e:	4b0e      	ldr	r3, [pc, #56]	; (41a648 <gauge_init+0x508>)
  41a610:	fb83 2300 	smull	r2, r3, r3, r0
  41a614:	17c2      	asrs	r2, r0, #31
  41a616:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a61a:	b212      	sxth	r2, r2
  41a61c:	e728      	b.n	41a470 <gauge_init+0x330>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
  41a61e:	2000      	movs	r0, #0
  41a620:	4b08      	ldr	r3, [pc, #32]	; (41a644 <gauge_init+0x504>)
  41a622:	4798      	blx	r3
  41a624:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a628:	0040      	lsls	r0, r0, #1
  41a62a:	3050      	adds	r0, #80	; 0x50
  41a62c:	4b06      	ldr	r3, [pc, #24]	; (41a648 <gauge_init+0x508>)
  41a62e:	fb83 2300 	smull	r2, r3, r3, r0
  41a632:	17c2      	asrs	r2, r0, #31
  41a634:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a638:	b212      	sxth	r2, r2
  41a63a:	e72c      	b.n	41a496 <gauge_init+0x356>
  41a63c:	0040a121 	.word	0x0040a121
  41a640:	2041480c 	.word	0x2041480c
  41a644:	00415c7d 	.word	0x00415c7d
  41a648:	66666667 	.word	0x66666667
  41a64c:	00431c94 	.word	0x00431c94

0041a650 <arc_init>:
{
  41a650:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->arc_indic);
  41a652:	4c53      	ldr	r4, [pc, #332]	; (41a7a0 <arc_init+0x150>)
  41a654:	6820      	ldr	r0, [r4, #0]
  41a656:	301c      	adds	r0, #28
  41a658:	4b52      	ldr	r3, [pc, #328]	; (41a7a4 <arc_init+0x154>)
  41a65a:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
  41a65c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41a65e:	4b52      	ldr	r3, [pc, #328]	; (41a7a8 <arc_init+0x158>)
  41a660:	899a      	ldrh	r2, [r3, #12]
  41a662:	2199      	movs	r1, #153	; 0x99
  41a664:	301c      	adds	r0, #28
  41a666:	4b51      	ldr	r3, [pc, #324]	; (41a7ac <arc_init+0x15c>)
  41a668:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
  41a66a:	6824      	ldr	r4, [r4, #0]
  41a66c:	341c      	adds	r4, #28
  41a66e:	2000      	movs	r0, #0
  41a670:	4b4f      	ldr	r3, [pc, #316]	; (41a7b0 <arc_init+0x160>)
  41a672:	4798      	blx	r3
  41a674:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a678:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a67c:	3050      	adds	r0, #80	; 0x50
  41a67e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a682:	da5e      	bge.n	41a742 <arc_init+0xf2>
  41a684:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41a686:	2190      	movs	r1, #144	; 0x90
  41a688:	4620      	mov	r0, r4
  41a68a:	4d4a      	ldr	r5, [pc, #296]	; (41a7b4 <arc_init+0x164>)
  41a68c:	47a8      	blx	r5
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
  41a68e:	4c44      	ldr	r4, [pc, #272]	; (41a7a0 <arc_init+0x150>)
  41a690:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  41a692:	2201      	movs	r2, #1
  41a694:	2194      	movs	r1, #148	; 0x94
  41a696:	301c      	adds	r0, #28
  41a698:	47a8      	blx	r5
    style_init_reset(&styles->arc_bg);
  41a69a:	6820      	ldr	r0, [r4, #0]
  41a69c:	3020      	adds	r0, #32
  41a69e:	4b41      	ldr	r3, [pc, #260]	; (41a7a4 <arc_init+0x154>)
  41a6a0:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
  41a6a2:	6820      	ldr	r0, [r4, #0]
  41a6a4:	3020      	adds	r0, #32
  41a6a6:	4b40      	ldr	r3, [pc, #256]	; (41a7a8 <arc_init+0x158>)
  41a6a8:	6a1b      	ldr	r3, [r3, #32]
  41a6aa:	f013 0f02 	tst.w	r3, #2
  41a6ae:	d058      	beq.n	41a762 <arc_init+0x112>
  41a6b0:	f04f 0200 	mov.w	r2, #0
  41a6b4:	2306      	movs	r3, #6
  41a6b6:	f363 0202 	bfi	r2, r3, #0, #3
  41a6ba:	231a      	movs	r3, #26
  41a6bc:	f363 02c7 	bfi	r2, r3, #3, #5
  41a6c0:	231b      	movs	r3, #27
  41a6c2:	f363 220c 	bfi	r2, r3, #8, #5
  41a6c6:	2305      	movs	r3, #5
  41a6c8:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41a6cc:	2199      	movs	r1, #153	; 0x99
  41a6ce:	4b37      	ldr	r3, [pc, #220]	; (41a7ac <arc_init+0x15c>)
  41a6d0:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
  41a6d2:	4b33      	ldr	r3, [pc, #204]	; (41a7a0 <arc_init+0x150>)
  41a6d4:	681c      	ldr	r4, [r3, #0]
  41a6d6:	3420      	adds	r4, #32
  41a6d8:	2000      	movs	r0, #0
  41a6da:	4b35      	ldr	r3, [pc, #212]	; (41a7b0 <arc_init+0x160>)
  41a6dc:	4798      	blx	r3
  41a6de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a6e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a6e6:	3050      	adds	r0, #80	; 0x50
  41a6e8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a6ec:	da47      	bge.n	41a77e <arc_init+0x12e>
  41a6ee:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41a6f0:	2190      	movs	r1, #144	; 0x90
  41a6f2:	4620      	mov	r0, r4
  41a6f4:	4c2f      	ldr	r4, [pc, #188]	; (41a7b4 <arc_init+0x164>)
  41a6f6:	47a0      	blx	r4
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
  41a6f8:	4d29      	ldr	r5, [pc, #164]	; (41a7a0 <arc_init+0x150>)
  41a6fa:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  41a6fc:	2201      	movs	r2, #1
  41a6fe:	2194      	movs	r1, #148	; 0x94
  41a700:	3020      	adds	r0, #32
  41a702:	47a0      	blx	r4
    style_init_reset(&styles->arc_knob);
  41a704:	6828      	ldr	r0, [r5, #0]
  41a706:	3024      	adds	r0, #36	; 0x24
  41a708:	4b26      	ldr	r3, [pc, #152]	; (41a7a4 <arc_init+0x154>)
  41a70a:	4798      	blx	r3
    lv_style_set_radius(&styles->arc_knob, LV_STATE_DEFAULT,   LV_RADIUS_CIRCLE);
  41a70c:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a70e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41a712:	2101      	movs	r1, #1
  41a714:	3024      	adds	r0, #36	; 0x24
  41a716:	47a0      	blx	r4
    lv_style_set_pad_top(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
  41a718:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a71a:	2200      	movs	r2, #0
  41a71c:	2110      	movs	r1, #16
  41a71e:	3024      	adds	r0, #36	; 0x24
  41a720:	47a0      	blx	r4
    lv_style_set_pad_bottom(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
  41a722:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a724:	2200      	movs	r2, #0
  41a726:	2111      	movs	r1, #17
  41a728:	3024      	adds	r0, #36	; 0x24
  41a72a:	47a0      	blx	r4
    lv_style_set_pad_left(&styles->arc_knob, LV_STATE_DEFAULT,    LV_DPX(0));
  41a72c:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a72e:	2200      	movs	r2, #0
  41a730:	2112      	movs	r1, #18
  41a732:	3024      	adds	r0, #36	; 0x24
  41a734:	47a0      	blx	r4
    lv_style_set_pad_right(&styles->arc_knob, LV_STATE_DEFAULT,   LV_DPX(0));
  41a736:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a738:	2200      	movs	r2, #0
  41a73a:	2113      	movs	r1, #19
  41a73c:	3024      	adds	r0, #36	; 0x24
  41a73e:	47a0      	blx	r4
  41a740:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
  41a742:	2000      	movs	r0, #0
  41a744:	4b1a      	ldr	r3, [pc, #104]	; (41a7b0 <arc_init+0x160>)
  41a746:	4798      	blx	r3
  41a748:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a74c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a750:	3050      	adds	r0, #80	; 0x50
  41a752:	4b19      	ldr	r3, [pc, #100]	; (41a7b8 <arc_init+0x168>)
  41a754:	fb83 2300 	smull	r2, r3, r3, r0
  41a758:	17c2      	asrs	r2, r0, #31
  41a75a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a75e:	b212      	sxth	r2, r2
  41a760:	e791      	b.n	41a686 <arc_init+0x36>
  41a762:	2302      	movs	r3, #2
  41a764:	f04f 0200 	mov.w	r2, #0
  41a768:	f363 0202 	bfi	r2, r3, #0, #3
  41a76c:	2108      	movs	r1, #8
  41a76e:	f361 02c7 	bfi	r2, r1, #3, #5
  41a772:	2109      	movs	r1, #9
  41a774:	f361 220c 	bfi	r2, r1, #8, #5
  41a778:	f363 324f 	bfi	r2, r3, #13, #3
  41a77c:	e7a6      	b.n	41a6cc <arc_init+0x7c>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
  41a77e:	2000      	movs	r0, #0
  41a780:	4b0b      	ldr	r3, [pc, #44]	; (41a7b0 <arc_init+0x160>)
  41a782:	4798      	blx	r3
  41a784:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a788:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a78c:	3050      	adds	r0, #80	; 0x50
  41a78e:	4b0a      	ldr	r3, [pc, #40]	; (41a7b8 <arc_init+0x168>)
  41a790:	fb83 2300 	smull	r2, r3, r3, r0
  41a794:	17c2      	asrs	r2, r0, #31
  41a796:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a79a:	b212      	sxth	r2, r2
  41a79c:	e7a8      	b.n	41a6f0 <arc_init+0xa0>
  41a79e:	bf00      	nop
  41a7a0:	2041480c 	.word	0x2041480c
  41a7a4:	004198fd 	.word	0x004198fd
  41a7a8:	20414810 	.word	0x20414810
  41a7ac:	0040a2b1 	.word	0x0040a2b1
  41a7b0:	00415c7d 	.word	0x00415c7d
  41a7b4:	0040a121 	.word	0x0040a121
  41a7b8:	66666667 	.word	0x66666667

0041a7bc <chart_init>:
{
  41a7bc:	b510      	push	{r4, lr}
    style_init_reset(&styles->chart_bg);
  41a7be:	4c9a      	ldr	r4, [pc, #616]	; (41aa28 <chart_init+0x26c>)
  41a7c0:	6820      	ldr	r0, [r4, #0]
  41a7c2:	3044      	adds	r0, #68	; 0x44
  41a7c4:	4b99      	ldr	r3, [pc, #612]	; (41aa2c <chart_init+0x270>)
  41a7c6:	4798      	blx	r3
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
  41a7c8:	6820      	ldr	r0, [r4, #0]
  41a7ca:	3044      	adds	r0, #68	; 0x44
  41a7cc:	4b98      	ldr	r3, [pc, #608]	; (41aa30 <chart_init+0x274>)
  41a7ce:	6a1b      	ldr	r3, [r3, #32]
  41a7d0:	f013 0f02 	tst.w	r3, #2
  41a7d4:	f000 80ab 	beq.w	41a92e <chart_init+0x172>
  41a7d8:	f04f 0200 	mov.w	r2, #0
  41a7dc:	2305      	movs	r3, #5
  41a7de:	f363 0202 	bfi	r2, r3, #0, #3
  41a7e2:	2315      	movs	r3, #21
  41a7e4:	f363 02c7 	bfi	r2, r3, #3, #5
  41a7e8:	f363 220c 	bfi	r2, r3, #8, #5
  41a7ec:	2302      	movs	r3, #2
  41a7ee:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41a7f2:	f248 0189 	movw	r1, #32905	; 0x8089
  41a7f6:	4b8f      	ldr	r3, [pc, #572]	; (41aa34 <chart_init+0x278>)
  41a7f8:	4798      	blx	r3
    style_init_reset(&styles->chart_series_bg);
  41a7fa:	4c8b      	ldr	r4, [pc, #556]	; (41aa28 <chart_init+0x26c>)
  41a7fc:	6820      	ldr	r0, [r4, #0]
  41a7fe:	3048      	adds	r0, #72	; 0x48
  41a800:	4b8a      	ldr	r3, [pc, #552]	; (41aa2c <chart_init+0x270>)
  41a802:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
  41a804:	6824      	ldr	r4, [r4, #0]
  41a806:	3448      	adds	r4, #72	; 0x48
  41a808:	2000      	movs	r0, #0
  41a80a:	4b8b      	ldr	r3, [pc, #556]	; (41aa38 <chart_init+0x27c>)
  41a80c:	4798      	blx	r3
  41a80e:	3050      	adds	r0, #80	; 0x50
  41a810:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a814:	f280 809a 	bge.w	41a94c <chart_init+0x190>
  41a818:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41a81a:	2190      	movs	r1, #144	; 0x90
  41a81c:	4620      	mov	r0, r4
  41a81e:	4b87      	ldr	r3, [pc, #540]	; (41aa3c <chart_init+0x280>)
  41a820:	4798      	blx	r3
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41a822:	4b81      	ldr	r3, [pc, #516]	; (41aa28 <chart_init+0x26c>)
  41a824:	681c      	ldr	r4, [r3, #0]
  41a826:	3448      	adds	r4, #72	; 0x48
  41a828:	2000      	movs	r0, #0
  41a82a:	4b83      	ldr	r3, [pc, #524]	; (41aa38 <chart_init+0x27c>)
  41a82c:	4798      	blx	r3
  41a82e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a832:	0040      	lsls	r0, r0, #1
  41a834:	3050      	adds	r0, #80	; 0x50
  41a836:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a83a:	f280 8093 	bge.w	41a964 <chart_init+0x1a8>
  41a83e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
  41a840:	2192      	movs	r1, #146	; 0x92
  41a842:	4620      	mov	r0, r4
  41a844:	4b7d      	ldr	r3, [pc, #500]	; (41aa3c <chart_init+0x280>)
  41a846:	4798      	blx	r3
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41a848:	4b77      	ldr	r3, [pc, #476]	; (41aa28 <chart_init+0x26c>)
  41a84a:	681c      	ldr	r4, [r3, #0]
  41a84c:	3448      	adds	r4, #72	; 0x48
  41a84e:	2000      	movs	r0, #0
  41a850:	4b79      	ldr	r3, [pc, #484]	; (41aa38 <chart_init+0x27c>)
  41a852:	4798      	blx	r3
  41a854:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a858:	0040      	lsls	r0, r0, #1
  41a85a:	3050      	adds	r0, #80	; 0x50
  41a85c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a860:	f280 808f 	bge.w	41a982 <chart_init+0x1c6>
  41a864:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
  41a866:	2193      	movs	r1, #147	; 0x93
  41a868:	4620      	mov	r0, r4
  41a86a:	4b74      	ldr	r3, [pc, #464]	; (41aa3c <chart_init+0x280>)
  41a86c:	4798      	blx	r3
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41a86e:	4b6e      	ldr	r3, [pc, #440]	; (41aa28 <chart_init+0x26c>)
  41a870:	6818      	ldr	r0, [r3, #0]
  41a872:	3048      	adds	r0, #72	; 0x48
  41a874:	4b6e      	ldr	r3, [pc, #440]	; (41aa30 <chart_init+0x274>)
  41a876:	6a1b      	ldr	r3, [r3, #32]
  41a878:	f013 0f02 	tst.w	r3, #2
  41a87c:	f000 8090 	beq.w	41a9a0 <chart_init+0x1e4>
  41a880:	f04f 0200 	mov.w	r2, #0
  41a884:	2306      	movs	r3, #6
  41a886:	f363 0202 	bfi	r2, r3, #0, #3
  41a88a:	231a      	movs	r3, #26
  41a88c:	f363 02c7 	bfi	r2, r3, #3, #5
  41a890:	231c      	movs	r3, #28
  41a892:	f363 220c 	bfi	r2, r3, #8, #5
  41a896:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41a89a:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41a89e:	2199      	movs	r1, #153	; 0x99
  41a8a0:	4b64      	ldr	r3, [pc, #400]	; (41aa34 <chart_init+0x278>)
  41a8a2:	4798      	blx	r3
    style_init_reset(&styles->chart_series);
  41a8a4:	4c60      	ldr	r4, [pc, #384]	; (41aa28 <chart_init+0x26c>)
  41a8a6:	6820      	ldr	r0, [r4, #0]
  41a8a8:	304c      	adds	r0, #76	; 0x4c
  41a8aa:	4b60      	ldr	r3, [pc, #384]	; (41aa2c <chart_init+0x270>)
  41a8ac:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
  41a8ae:	6824      	ldr	r4, [r4, #0]
  41a8b0:	344c      	adds	r4, #76	; 0x4c
  41a8b2:	2000      	movs	r0, #0
  41a8b4:	4b60      	ldr	r3, [pc, #384]	; (41aa38 <chart_init+0x27c>)
  41a8b6:	4798      	blx	r3
  41a8b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a8bc:	3050      	adds	r0, #80	; 0x50
  41a8be:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a8c2:	da7c      	bge.n	41a9be <chart_init+0x202>
  41a8c4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41a8c6:	2190      	movs	r1, #144	; 0x90
  41a8c8:	4620      	mov	r0, r4
  41a8ca:	4b5c      	ldr	r3, [pc, #368]	; (41aa3c <chart_init+0x280>)
  41a8cc:	4798      	blx	r3
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
  41a8ce:	4b56      	ldr	r3, [pc, #344]	; (41aa28 <chart_init+0x26c>)
  41a8d0:	681c      	ldr	r4, [r3, #0]
  41a8d2:	344c      	adds	r4, #76	; 0x4c
  41a8d4:	2000      	movs	r0, #0
  41a8d6:	4b58      	ldr	r3, [pc, #352]	; (41aa38 <chart_init+0x27c>)
  41a8d8:	4798      	blx	r3
  41a8da:	3014      	adds	r0, #20
  41a8dc:	0080      	lsls	r0, r0, #2
  41a8de:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a8e2:	da7a      	bge.n	41a9da <chart_init+0x21e>
  41a8e4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41a8e6:	2103      	movs	r1, #3
  41a8e8:	4620      	mov	r0, r4
  41a8ea:	4b54      	ldr	r3, [pc, #336]	; (41aa3c <chart_init+0x280>)
  41a8ec:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
  41a8ee:	4b4e      	ldr	r3, [pc, #312]	; (41aa28 <chart_init+0x26c>)
  41a8f0:	681c      	ldr	r4, [r3, #0]
  41a8f2:	344c      	adds	r4, #76	; 0x4c
  41a8f4:	2000      	movs	r0, #0
  41a8f6:	4b50      	ldr	r3, [pc, #320]	; (41aa38 <chart_init+0x27c>)
  41a8f8:	4798      	blx	r3
  41a8fa:	3028      	adds	r0, #40	; 0x28
  41a8fc:	0040      	lsls	r0, r0, #1
  41a8fe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a902:	da77      	bge.n	41a9f4 <chart_init+0x238>
  41a904:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41a906:	2114      	movs	r1, #20
  41a908:	4620      	mov	r0, r4
  41a90a:	4b4c      	ldr	r3, [pc, #304]	; (41aa3c <chart_init+0x280>)
  41a90c:	4798      	blx	r3
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
  41a90e:	4b46      	ldr	r3, [pc, #280]	; (41aa28 <chart_init+0x26c>)
  41a910:	681c      	ldr	r4, [r3, #0]
  41a912:	344c      	adds	r4, #76	; 0x4c
  41a914:	2000      	movs	r0, #0
  41a916:	4b48      	ldr	r3, [pc, #288]	; (41aa38 <chart_init+0x27c>)
  41a918:	4798      	blx	r3
  41a91a:	3050      	adds	r0, #80	; 0x50
  41a91c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a920:	da75      	bge.n	41aa0e <chart_init+0x252>
  41a922:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a924:	2101      	movs	r1, #1
  41a926:	4620      	mov	r0, r4
  41a928:	4b44      	ldr	r3, [pc, #272]	; (41aa3c <chart_init+0x280>)
  41a92a:	4798      	blx	r3
  41a92c:	bd10      	pop	{r4, pc}
  41a92e:	f04f 0200 	mov.w	r2, #0
  41a932:	2305      	movs	r3, #5
  41a934:	f363 0202 	bfi	r2, r3, #0, #3
  41a938:	2314      	movs	r3, #20
  41a93a:	f363 02c7 	bfi	r2, r3, #3, #5
  41a93e:	2317      	movs	r3, #23
  41a940:	f363 220c 	bfi	r2, r3, #8, #5
  41a944:	2303      	movs	r3, #3
  41a946:	f363 324f 	bfi	r2, r3, #13, #3
  41a94a:	e752      	b.n	41a7f2 <chart_init+0x36>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
  41a94c:	2000      	movs	r0, #0
  41a94e:	4b3a      	ldr	r3, [pc, #232]	; (41aa38 <chart_init+0x27c>)
  41a950:	4798      	blx	r3
  41a952:	3050      	adds	r0, #80	; 0x50
  41a954:	4b3a      	ldr	r3, [pc, #232]	; (41aa40 <chart_init+0x284>)
  41a956:	fb83 2300 	smull	r2, r3, r3, r0
  41a95a:	17c2      	asrs	r2, r0, #31
  41a95c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a960:	b212      	sxth	r2, r2
  41a962:	e75a      	b.n	41a81a <chart_init+0x5e>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41a964:	2000      	movs	r0, #0
  41a966:	4b34      	ldr	r3, [pc, #208]	; (41aa38 <chart_init+0x27c>)
  41a968:	4798      	blx	r3
  41a96a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a96e:	0040      	lsls	r0, r0, #1
  41a970:	3050      	adds	r0, #80	; 0x50
  41a972:	4b33      	ldr	r3, [pc, #204]	; (41aa40 <chart_init+0x284>)
  41a974:	fb83 2300 	smull	r2, r3, r3, r0
  41a978:	17c2      	asrs	r2, r0, #31
  41a97a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a97e:	b212      	sxth	r2, r2
  41a980:	e75e      	b.n	41a840 <chart_init+0x84>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41a982:	2000      	movs	r0, #0
  41a984:	4b2c      	ldr	r3, [pc, #176]	; (41aa38 <chart_init+0x27c>)
  41a986:	4798      	blx	r3
  41a988:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a98c:	0040      	lsls	r0, r0, #1
  41a98e:	3050      	adds	r0, #80	; 0x50
  41a990:	4b2b      	ldr	r3, [pc, #172]	; (41aa40 <chart_init+0x284>)
  41a992:	fb83 2300 	smull	r2, r3, r3, r0
  41a996:	17c2      	asrs	r2, r0, #31
  41a998:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a99c:	b212      	sxth	r2, r2
  41a99e:	e762      	b.n	41a866 <chart_init+0xaa>
  41a9a0:	f04f 0200 	mov.w	r2, #0
  41a9a4:	2304      	movs	r3, #4
  41a9a6:	f363 0202 	bfi	r2, r3, #0, #3
  41a9aa:	2310      	movs	r3, #16
  41a9ac:	f363 02c7 	bfi	r2, r3, #3, #5
  41a9b0:	2312      	movs	r3, #18
  41a9b2:	f363 220c 	bfi	r2, r3, #8, #5
  41a9b6:	2302      	movs	r3, #2
  41a9b8:	f363 324f 	bfi	r2, r3, #13, #3
  41a9bc:	e76f      	b.n	41a89e <chart_init+0xe2>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
  41a9be:	2000      	movs	r0, #0
  41a9c0:	4b1d      	ldr	r3, [pc, #116]	; (41aa38 <chart_init+0x27c>)
  41a9c2:	4798      	blx	r3
  41a9c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a9c8:	3050      	adds	r0, #80	; 0x50
  41a9ca:	4b1d      	ldr	r3, [pc, #116]	; (41aa40 <chart_init+0x284>)
  41a9cc:	fb83 2300 	smull	r2, r3, r3, r0
  41a9d0:	17c2      	asrs	r2, r0, #31
  41a9d2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a9d6:	b212      	sxth	r2, r2
  41a9d8:	e775      	b.n	41a8c6 <chart_init+0x10a>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
  41a9da:	2000      	movs	r0, #0
  41a9dc:	4b16      	ldr	r3, [pc, #88]	; (41aa38 <chart_init+0x27c>)
  41a9de:	4798      	blx	r3
  41a9e0:	3014      	adds	r0, #20
  41a9e2:	0080      	lsls	r0, r0, #2
  41a9e4:	4b16      	ldr	r3, [pc, #88]	; (41aa40 <chart_init+0x284>)
  41a9e6:	fb83 2300 	smull	r2, r3, r3, r0
  41a9ea:	17c2      	asrs	r2, r0, #31
  41a9ec:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a9f0:	b212      	sxth	r2, r2
  41a9f2:	e778      	b.n	41a8e6 <chart_init+0x12a>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
  41a9f4:	2000      	movs	r0, #0
  41a9f6:	4b10      	ldr	r3, [pc, #64]	; (41aa38 <chart_init+0x27c>)
  41a9f8:	4798      	blx	r3
  41a9fa:	3028      	adds	r0, #40	; 0x28
  41a9fc:	0040      	lsls	r0, r0, #1
  41a9fe:	4b10      	ldr	r3, [pc, #64]	; (41aa40 <chart_init+0x284>)
  41aa00:	fb83 2300 	smull	r2, r3, r3, r0
  41aa04:	17c2      	asrs	r2, r0, #31
  41aa06:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aa0a:	b212      	sxth	r2, r2
  41aa0c:	e77b      	b.n	41a906 <chart_init+0x14a>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
  41aa0e:	2000      	movs	r0, #0
  41aa10:	4b09      	ldr	r3, [pc, #36]	; (41aa38 <chart_init+0x27c>)
  41aa12:	4798      	blx	r3
  41aa14:	3050      	adds	r0, #80	; 0x50
  41aa16:	4b0a      	ldr	r3, [pc, #40]	; (41aa40 <chart_init+0x284>)
  41aa18:	fb83 2300 	smull	r2, r3, r3, r0
  41aa1c:	17c2      	asrs	r2, r0, #31
  41aa1e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aa22:	b212      	sxth	r2, r2
  41aa24:	e77e      	b.n	41a924 <chart_init+0x168>
  41aa26:	bf00      	nop
  41aa28:	2041480c 	.word	0x2041480c
  41aa2c:	004198fd 	.word	0x004198fd
  41aa30:	20414810 	.word	0x20414810
  41aa34:	0040a2b1 	.word	0x0040a2b1
  41aa38:	00415c7d 	.word	0x00415c7d
  41aa3c:	0040a121 	.word	0x0040a121
  41aa40:	66666667 	.word	0x66666667

0041aa44 <calendar_init>:
{
  41aa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->calendar_header);
  41aa46:	4cbd      	ldr	r4, [pc, #756]	; (41ad3c <calendar_init+0x2f8>)
  41aa48:	6820      	ldr	r0, [r4, #0]
  41aa4a:	3034      	adds	r0, #52	; 0x34
  41aa4c:	4bbc      	ldr	r3, [pc, #752]	; (41ad40 <calendar_init+0x2fc>)
  41aa4e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, 0);
  41aa50:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41aa52:	2200      	movs	r2, #0
  41aa54:	2110      	movs	r1, #16
  41aa56:	3034      	adds	r0, #52	; 0x34
  41aa58:	4bba      	ldr	r3, [pc, #744]	; (41ad44 <calendar_init+0x300>)
  41aa5a:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41aa5c:	6824      	ldr	r4, [r4, #0]
  41aa5e:	3434      	adds	r4, #52	; 0x34
  41aa60:	2000      	movs	r0, #0
  41aa62:	4bb9      	ldr	r3, [pc, #740]	; (41ad48 <calendar_init+0x304>)
  41aa64:	4798      	blx	r3
  41aa66:	2801      	cmp	r0, #1
  41aa68:	f240 81e5 	bls.w	41ae36 <calendar_init+0x3f2>
  41aa6c:	2000      	movs	r0, #0
  41aa6e:	4bb7      	ldr	r3, [pc, #732]	; (41ad4c <calendar_init+0x308>)
  41aa70:	4798      	blx	r3
  41aa72:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41aa76:	0040      	lsls	r0, r0, #1
  41aa78:	3050      	adds	r0, #80	; 0x50
  41aa7a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aa7e:	f280 81f3 	bge.w	41ae68 <calendar_init+0x424>
  41aa82:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41aa84:	2112      	movs	r1, #18
  41aa86:	4620      	mov	r0, r4
  41aa88:	4bae      	ldr	r3, [pc, #696]	; (41ad44 <calendar_init+0x300>)
  41aa8a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41aa8c:	4bab      	ldr	r3, [pc, #684]	; (41ad3c <calendar_init+0x2f8>)
  41aa8e:	681c      	ldr	r4, [r3, #0]
  41aa90:	3434      	adds	r4, #52	; 0x34
  41aa92:	2000      	movs	r0, #0
  41aa94:	4bac      	ldr	r3, [pc, #688]	; (41ad48 <calendar_init+0x304>)
  41aa96:	4798      	blx	r3
  41aa98:	2801      	cmp	r0, #1
  41aa9a:	f240 81f4 	bls.w	41ae86 <calendar_init+0x442>
  41aa9e:	2000      	movs	r0, #0
  41aaa0:	4baa      	ldr	r3, [pc, #680]	; (41ad4c <calendar_init+0x308>)
  41aaa2:	4798      	blx	r3
  41aaa4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41aaa8:	0040      	lsls	r0, r0, #1
  41aaaa:	3050      	adds	r0, #80	; 0x50
  41aaac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aab0:	f280 8202 	bge.w	41aeb8 <calendar_init+0x474>
  41aab4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41aab6:	2113      	movs	r1, #19
  41aab8:	4620      	mov	r0, r4
  41aaba:	4da2      	ldr	r5, [pc, #648]	; (41ad44 <calendar_init+0x300>)
  41aabc:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, 0);
  41aabe:	4c9f      	ldr	r4, [pc, #636]	; (41ad3c <calendar_init+0x2f8>)
  41aac0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41aac2:	2200      	movs	r2, #0
  41aac4:	2111      	movs	r1, #17
  41aac6:	3034      	adds	r0, #52	; 0x34
  41aac8:	47a8      	blx	r5
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41aaca:	6824      	ldr	r4, [r4, #0]
  41aacc:	3434      	adds	r4, #52	; 0x34
  41aace:	2000      	movs	r0, #0
  41aad0:	4b9d      	ldr	r3, [pc, #628]	; (41ad48 <calendar_init+0x304>)
  41aad2:	4798      	blx	r3
  41aad4:	2801      	cmp	r0, #1
  41aad6:	f240 81fe 	bls.w	41aed6 <calendar_init+0x492>
  41aada:	2000      	movs	r0, #0
  41aadc:	4b9b      	ldr	r3, [pc, #620]	; (41ad4c <calendar_init+0x308>)
  41aade:	4798      	blx	r3
  41aae0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41aae4:	0040      	lsls	r0, r0, #1
  41aae6:	3050      	adds	r0, #80	; 0x50
  41aae8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aaec:	f280 820c 	bge.w	41af08 <calendar_init+0x4c4>
  41aaf0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  41aaf2:	2115      	movs	r1, #21
  41aaf4:	4620      	mov	r0, r4
  41aaf6:	4b93      	ldr	r3, [pc, #588]	; (41ad44 <calendar_init+0x300>)
  41aaf8:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41aafa:	4b90      	ldr	r3, [pc, #576]	; (41ad3c <calendar_init+0x2f8>)
  41aafc:	681c      	ldr	r4, [r3, #0]
  41aafe:	3434      	adds	r4, #52	; 0x34
  41ab00:	2000      	movs	r0, #0
  41ab02:	4b91      	ldr	r3, [pc, #580]	; (41ad48 <calendar_init+0x304>)
  41ab04:	4798      	blx	r3
  41ab06:	2801      	cmp	r0, #1
  41ab08:	f240 820d 	bls.w	41af26 <calendar_init+0x4e2>
  41ab0c:	2000      	movs	r0, #0
  41ab0e:	4b8f      	ldr	r3, [pc, #572]	; (41ad4c <calendar_init+0x308>)
  41ab10:	4798      	blx	r3
  41ab12:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ab16:	0040      	lsls	r0, r0, #1
  41ab18:	3050      	adds	r0, #80	; 0x50
  41ab1a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ab1e:	f280 821b 	bge.w	41af58 <calendar_init+0x514>
  41ab22:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  41ab24:	2116      	movs	r1, #22
  41ab26:	4620      	mov	r0, r4
  41ab28:	4b86      	ldr	r3, [pc, #536]	; (41ad44 <calendar_init+0x300>)
  41ab2a:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
  41ab2c:	4b83      	ldr	r3, [pc, #524]	; (41ad3c <calendar_init+0x2f8>)
  41ab2e:	6818      	ldr	r0, [r3, #0]
  41ab30:	3034      	adds	r0, #52	; 0x34
  41ab32:	4b87      	ldr	r3, [pc, #540]	; (41ad50 <calendar_init+0x30c>)
  41ab34:	6a1b      	ldr	r3, [r3, #32]
  41ab36:	f013 0f02 	tst.w	r3, #2
  41ab3a:	f000 821c 	beq.w	41af76 <calendar_init+0x532>
  41ab3e:	f04f 0200 	mov.w	r2, #0
  41ab42:	2304      	movs	r3, #4
  41ab44:	f363 0202 	bfi	r2, r3, #0, #3
  41ab48:	2311      	movs	r3, #17
  41ab4a:	f363 02c7 	bfi	r2, r3, #3, #5
  41ab4e:	f363 220c 	bfi	r2, r3, #8, #5
  41ab52:	2302      	movs	r3, #2
  41ab54:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41ab58:	f249 0189 	movw	r1, #37001	; 0x9089
  41ab5c:	4b7d      	ldr	r3, [pc, #500]	; (41ad54 <calendar_init+0x310>)
  41ab5e:	4798      	blx	r3
    style_init_reset(&styles->calendar_daynames);
  41ab60:	4c76      	ldr	r4, [pc, #472]	; (41ad3c <calendar_init+0x2f8>)
  41ab62:	6820      	ldr	r0, [r4, #0]
  41ab64:	3038      	adds	r0, #56	; 0x38
  41ab66:	4b76      	ldr	r3, [pc, #472]	; (41ad40 <calendar_init+0x2fc>)
  41ab68:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
  41ab6a:	6820      	ldr	r0, [r4, #0]
  41ab6c:	3038      	adds	r0, #56	; 0x38
                            IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
  41ab6e:	4b78      	ldr	r3, [pc, #480]	; (41ad50 <calendar_init+0x30c>)
  41ab70:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
  41ab72:	f013 0f02 	tst.w	r3, #2
  41ab76:	f000 8201 	beq.w	41af7c <calendar_init+0x538>
  41ab7a:	f04f 0200 	mov.w	r2, #0
  41ab7e:	2302      	movs	r3, #2
  41ab80:	f363 0202 	bfi	r2, r3, #0, #3
  41ab84:	2306      	movs	r3, #6
  41ab86:	f363 02c7 	bfi	r2, r3, #3, #5
  41ab8a:	2309      	movs	r3, #9
  41ab8c:	f363 220c 	bfi	r2, r3, #8, #5
  41ab90:	f36f 324f 	bfc	r2, #13, #3
  41ab94:	f248 0189 	movw	r1, #32905	; 0x8089
  41ab98:	4b6e      	ldr	r3, [pc, #440]	; (41ad54 <calendar_init+0x310>)
  41ab9a:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  41ab9c:	4b67      	ldr	r3, [pc, #412]	; (41ad3c <calendar_init+0x2f8>)
  41ab9e:	681c      	ldr	r4, [r3, #0]
  41aba0:	3438      	adds	r4, #56	; 0x38
  41aba2:	2000      	movs	r0, #0
  41aba4:	4b68      	ldr	r3, [pc, #416]	; (41ad48 <calendar_init+0x304>)
  41aba6:	4798      	blx	r3
  41aba8:	2801      	cmp	r0, #1
  41abaa:	f240 81f2 	bls.w	41af92 <calendar_init+0x54e>
  41abae:	2000      	movs	r0, #0
  41abb0:	4b66      	ldr	r3, [pc, #408]	; (41ad4c <calendar_init+0x308>)
  41abb2:	4798      	blx	r3
  41abb4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41abb8:	0040      	lsls	r0, r0, #1
  41abba:	3050      	adds	r0, #80	; 0x50
  41abbc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41abc0:	f280 8200 	bge.w	41afc4 <calendar_init+0x580>
  41abc4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41abc6:	2112      	movs	r1, #18
  41abc8:	4620      	mov	r0, r4
  41abca:	4b5e      	ldr	r3, [pc, #376]	; (41ad44 <calendar_init+0x300>)
  41abcc:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  41abce:	4b5b      	ldr	r3, [pc, #364]	; (41ad3c <calendar_init+0x2f8>)
  41abd0:	681c      	ldr	r4, [r3, #0]
  41abd2:	3438      	adds	r4, #56	; 0x38
  41abd4:	2000      	movs	r0, #0
  41abd6:	4b5c      	ldr	r3, [pc, #368]	; (41ad48 <calendar_init+0x304>)
  41abd8:	4798      	blx	r3
  41abda:	2801      	cmp	r0, #1
  41abdc:	f240 8201 	bls.w	41afe2 <calendar_init+0x59e>
  41abe0:	2000      	movs	r0, #0
  41abe2:	4b5a      	ldr	r3, [pc, #360]	; (41ad4c <calendar_init+0x308>)
  41abe4:	4798      	blx	r3
  41abe6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41abea:	0040      	lsls	r0, r0, #1
  41abec:	3050      	adds	r0, #80	; 0x50
  41abee:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41abf2:	f280 820f 	bge.w	41b014 <calendar_init+0x5d0>
  41abf6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41abf8:	2113      	movs	r1, #19
  41abfa:	4620      	mov	r0, r4
  41abfc:	4b51      	ldr	r3, [pc, #324]	; (41ad44 <calendar_init+0x300>)
  41abfe:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  41ac00:	4b4e      	ldr	r3, [pc, #312]	; (41ad3c <calendar_init+0x2f8>)
  41ac02:	681c      	ldr	r4, [r3, #0]
  41ac04:	3438      	adds	r4, #56	; 0x38
  41ac06:	2000      	movs	r0, #0
  41ac08:	4b4f      	ldr	r3, [pc, #316]	; (41ad48 <calendar_init+0x304>)
  41ac0a:	4798      	blx	r3
  41ac0c:	2801      	cmp	r0, #1
  41ac0e:	f240 8210 	bls.w	41b032 <calendar_init+0x5ee>
  41ac12:	2000      	movs	r0, #0
  41ac14:	4b4d      	ldr	r3, [pc, #308]	; (41ad4c <calendar_init+0x308>)
  41ac16:	4798      	blx	r3
  41ac18:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ac1c:	0040      	lsls	r0, r0, #1
  41ac1e:	3050      	adds	r0, #80	; 0x50
  41ac20:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ac24:	f280 822a 	bge.w	41b07c <calendar_init+0x638>
  41ac28:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41ac2a:	2111      	movs	r1, #17
  41ac2c:	4620      	mov	r0, r4
  41ac2e:	4b45      	ldr	r3, [pc, #276]	; (41ad44 <calendar_init+0x300>)
  41ac30:	4798      	blx	r3
    style_init_reset(&styles->calendar_date_nums);
  41ac32:	4c42      	ldr	r4, [pc, #264]	; (41ad3c <calendar_init+0x2f8>)
  41ac34:	6820      	ldr	r0, [r4, #0]
  41ac36:	3030      	adds	r0, #48	; 0x30
  41ac38:	4b41      	ldr	r3, [pc, #260]	; (41ad40 <calendar_init+0x2fc>)
  41ac3a:	4798      	blx	r3
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
  41ac3c:	6824      	ldr	r4, [r4, #0]
  41ac3e:	3430      	adds	r4, #48	; 0x30
  41ac40:	2000      	movs	r0, #0
  41ac42:	4b42      	ldr	r3, [pc, #264]	; (41ad4c <calendar_init+0x308>)
  41ac44:	4798      	blx	r3
  41ac46:	3014      	adds	r0, #20
  41ac48:	0080      	lsls	r0, r0, #2
  41ac4a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ac4e:	f280 8224 	bge.w	41b09a <calendar_init+0x656>
  41ac52:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41ac54:	2101      	movs	r1, #1
  41ac56:	4620      	mov	r0, r4
  41ac58:	4b3a      	ldr	r3, [pc, #232]	; (41ad44 <calendar_init+0x300>)
  41ac5a:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  41ac5c:	4b37      	ldr	r3, [pc, #220]	; (41ad3c <calendar_init+0x2f8>)
  41ac5e:	6818      	ldr	r0, [r3, #0]
  41ac60:	3030      	adds	r0, #48	; 0x30
                            IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  41ac62:	4b3b      	ldr	r3, [pc, #236]	; (41ad50 <calendar_init+0x30c>)
  41ac64:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  41ac66:	f013 0f02 	tst.w	r3, #2
  41ac6a:	f000 8223 	beq.w	41b0b4 <calendar_init+0x670>
  41ac6e:	f04f 0200 	mov.w	r2, #0
  41ac72:	2302      	movs	r3, #2
  41ac74:	f363 0202 	bfi	r2, r3, #0, #3
  41ac78:	2306      	movs	r3, #6
  41ac7a:	f363 02c7 	bfi	r2, r3, #3, #5
  41ac7e:	2309      	movs	r3, #9
  41ac80:	f363 220c 	bfi	r2, r3, #8, #5
  41ac84:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41ac88:	f248 1189 	movw	r1, #33161	; 0x8189
  41ac8c:	4d31      	ldr	r5, [pc, #196]	; (41ad54 <calendar_init+0x310>)
  41ac8e:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_DISABLED, LV_COLOR_GRAY);
  41ac90:	4c2a      	ldr	r4, [pc, #168]	; (41ad3c <calendar_init+0x2f8>)
  41ac92:	6820      	ldr	r0, [r4, #0]
  41ac94:	4b30      	ldr	r3, [pc, #192]	; (41ad58 <calendar_init+0x314>)
  41ac96:	889a      	ldrh	r2, [r3, #4]
  41ac98:	f24a 0189 	movw	r1, #41097	; 0xa089
  41ac9c:	3030      	adds	r0, #48	; 0x30
  41ac9e:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
  41aca0:	6820      	ldr	r0, [r4, #0]
  41aca2:	3030      	adds	r0, #48	; 0x30
  41aca4:	4b2a      	ldr	r3, [pc, #168]	; (41ad50 <calendar_init+0x30c>)
  41aca6:	6a1b      	ldr	r3, [r3, #32]
  41aca8:	f013 0f02 	tst.w	r3, #2
  41acac:	f000 8205 	beq.w	41b0ba <calendar_init+0x676>
  41acb0:	2233      	movs	r2, #51	; 0x33
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41acb2:	f44f 7196 	mov.w	r1, #300	; 0x12c
  41acb6:	4d29      	ldr	r5, [pc, #164]	; (41ad5c <calendar_init+0x318>)
  41acb8:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_PRESSED, LV_OPA_20);
  41acba:	4c20      	ldr	r4, [pc, #128]	; (41ad3c <calendar_init+0x2f8>)
  41acbc:	6820      	ldr	r0, [r4, #0]
  41acbe:	2233      	movs	r2, #51	; 0x33
  41acc0:	f241 012c 	movw	r1, #4140	; 0x102c
  41acc4:	3030      	adds	r0, #48	; 0x30
  41acc6:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_OPA_COVER);
  41acc8:	6820      	ldr	r0, [r4, #0]
  41acca:	22ff      	movs	r2, #255	; 0xff
  41accc:	f44f 710b 	mov.w	r1, #556	; 0x22c
  41acd0:	3030      	adds	r0, #48	; 0x30
  41acd2:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_COLOR_WHITE);
  41acd4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41acd6:	4b20      	ldr	r3, [pc, #128]	; (41ad58 <calendar_init+0x314>)
  41acd8:	881a      	ldrh	r2, [r3, #0]
  41acda:	f248 2189 	movw	r1, #33417	; 0x8289
  41acde:	3030      	adds	r0, #48	; 0x30
  41ace0:	4e1c      	ldr	r6, [pc, #112]	; (41ad54 <calendar_init+0x310>)
  41ace2:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, theme.color_primary);
  41ace4:	6820      	ldr	r0, [r4, #0]
  41ace6:	4d1a      	ldr	r5, [pc, #104]	; (41ad50 <calendar_init+0x30c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41ace8:	89aa      	ldrh	r2, [r5, #12]
  41acea:	f240 2129 	movw	r1, #553	; 0x229
  41acee:	3030      	adds	r0, #48	; 0x30
  41acf0:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  41acf2:	6820      	ldr	r0, [r4, #0]
  41acf4:	3030      	adds	r0, #48	; 0x30
                          IS_LIGHT ? lv_color_hex(0x666666) : LV_COLOR_WHITE);
  41acf6:	6a2b      	ldr	r3, [r5, #32]
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  41acf8:	f013 0f02 	tst.w	r3, #2
  41acfc:	f000 81df 	beq.w	41b0be <calendar_init+0x67a>
  41ad00:	f04f 0200 	mov.w	r2, #0
  41ad04:	2303      	movs	r3, #3
  41ad06:	f363 0202 	bfi	r2, r3, #0, #3
  41ad0a:	230c      	movs	r3, #12
  41ad0c:	f363 02c7 	bfi	r2, r3, #3, #5
  41ad10:	f363 220c 	bfi	r2, r3, #8, #5
  41ad14:	2301      	movs	r3, #1
  41ad16:	f363 324f 	bfi	r2, r3, #13, #3
  41ad1a:	2129      	movs	r1, #41	; 0x29
  41ad1c:	4d0d      	ldr	r5, [pc, #52]	; (41ad54 <calendar_init+0x310>)
  41ad1e:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
  41ad20:	4c06      	ldr	r4, [pc, #24]	; (41ad3c <calendar_init+0x2f8>)
  41ad22:	6820      	ldr	r0, [r4, #0]
  41ad24:	4e0a      	ldr	r6, [pc, #40]	; (41ad50 <calendar_init+0x30c>)
  41ad26:	89b2      	ldrh	r2, [r6, #12]
  41ad28:	f240 1129 	movw	r1, #297	; 0x129
  41ad2c:	3030      	adds	r0, #48	; 0x30
  41ad2e:	47a8      	blx	r5
    lv_style_set_border_width(&styles->calendar_date_nums, LV_STATE_CHECKED, 2);
  41ad30:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41ad32:	2202      	movs	r2, #2
  41ad34:	f44f 7198 	mov.w	r1, #304	; 0x130
  41ad38:	3030      	adds	r0, #48	; 0x30
  41ad3a:	e011      	b.n	41ad60 <calendar_init+0x31c>
  41ad3c:	2041480c 	.word	0x2041480c
  41ad40:	004198fd 	.word	0x004198fd
  41ad44:	0040a121 	.word	0x0040a121
  41ad48:	00415c9d 	.word	0x00415c9d
  41ad4c:	00415c7d 	.word	0x00415c7d
  41ad50:	20414810 	.word	0x20414810
  41ad54:	0040a2b1 	.word	0x0040a2b1
  41ad58:	00431c94 	.word	0x00431c94
  41ad5c:	0040a441 	.word	0x0040a441
  41ad60:	4fb9      	ldr	r7, [pc, #740]	; (41b048 <calendar_init+0x604>)
  41ad62:	47b8      	blx	r7
    lv_style_set_border_side(&styles->calendar_date_nums, LV_STATE_CHECKED, LV_BORDER_SIDE_LEFT);
  41ad64:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41ad66:	2204      	movs	r2, #4
  41ad68:	f240 1131 	movw	r1, #305	; 0x131
  41ad6c:	3030      	adds	r0, #48	; 0x30
  41ad6e:	47b8      	blx	r7
    lv_style_set_border_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
  41ad70:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41ad72:	89b2      	ldrh	r2, [r6, #12]
  41ad74:	f240 1139 	movw	r1, #313	; 0x139
  41ad78:	3030      	adds	r0, #48	; 0x30
  41ad7a:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
  41ad7c:	6824      	ldr	r4, [r4, #0]
  41ad7e:	3430      	adds	r4, #48	; 0x30
  41ad80:	2000      	movs	r0, #0
  41ad82:	4bb2      	ldr	r3, [pc, #712]	; (41b04c <calendar_init+0x608>)
  41ad84:	4798      	blx	r3
  41ad86:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41ad8a:	3050      	adds	r0, #80	; 0x50
  41ad8c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ad90:	f280 8198 	bge.w	41b0c4 <calendar_init+0x680>
  41ad94:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41ad96:	2114      	movs	r1, #20
  41ad98:	4620      	mov	r0, r4
  41ad9a:	4bab      	ldr	r3, [pc, #684]	; (41b048 <calendar_init+0x604>)
  41ad9c:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  41ad9e:	4bac      	ldr	r3, [pc, #688]	; (41b050 <calendar_init+0x60c>)
  41ada0:	681c      	ldr	r4, [r3, #0]
  41ada2:	3430      	adds	r4, #48	; 0x30
  41ada4:	2000      	movs	r0, #0
  41ada6:	4bab      	ldr	r3, [pc, #684]	; (41b054 <calendar_init+0x610>)
  41ada8:	4798      	blx	r3
  41adaa:	2801      	cmp	r0, #1
  41adac:	f240 8198 	bls.w	41b0e0 <calendar_init+0x69c>
  41adb0:	2000      	movs	r0, #0
  41adb2:	4ba6      	ldr	r3, [pc, #664]	; (41b04c <calendar_init+0x608>)
  41adb4:	4798      	blx	r3
  41adb6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41adba:	0040      	lsls	r0, r0, #1
  41adbc:	3050      	adds	r0, #80	; 0x50
  41adbe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41adc2:	f280 81a6 	bge.w	41b112 <calendar_init+0x6ce>
  41adc6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41adc8:	2112      	movs	r1, #18
  41adca:	4620      	mov	r0, r4
  41adcc:	4b9e      	ldr	r3, [pc, #632]	; (41b048 <calendar_init+0x604>)
  41adce:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  41add0:	4b9f      	ldr	r3, [pc, #636]	; (41b050 <calendar_init+0x60c>)
  41add2:	681c      	ldr	r4, [r3, #0]
  41add4:	3430      	adds	r4, #48	; 0x30
  41add6:	2000      	movs	r0, #0
  41add8:	4b9e      	ldr	r3, [pc, #632]	; (41b054 <calendar_init+0x610>)
  41adda:	4798      	blx	r3
  41addc:	2801      	cmp	r0, #1
  41adde:	f240 81a7 	bls.w	41b130 <calendar_init+0x6ec>
  41ade2:	2000      	movs	r0, #0
  41ade4:	4b99      	ldr	r3, [pc, #612]	; (41b04c <calendar_init+0x608>)
  41ade6:	4798      	blx	r3
  41ade8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41adec:	0040      	lsls	r0, r0, #1
  41adee:	3050      	adds	r0, #80	; 0x50
  41adf0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41adf4:	f280 81b5 	bge.w	41b162 <calendar_init+0x71e>
  41adf8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41adfa:	2113      	movs	r1, #19
  41adfc:	4620      	mov	r0, r4
  41adfe:	4b92      	ldr	r3, [pc, #584]	; (41b048 <calendar_init+0x604>)
  41ae00:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  41ae02:	4b93      	ldr	r3, [pc, #588]	; (41b050 <calendar_init+0x60c>)
  41ae04:	681c      	ldr	r4, [r3, #0]
  41ae06:	3430      	adds	r4, #48	; 0x30
  41ae08:	2000      	movs	r0, #0
  41ae0a:	4b92      	ldr	r3, [pc, #584]	; (41b054 <calendar_init+0x610>)
  41ae0c:	4798      	blx	r3
  41ae0e:	2801      	cmp	r0, #1
  41ae10:	f240 81b6 	bls.w	41b180 <calendar_init+0x73c>
  41ae14:	2000      	movs	r0, #0
  41ae16:	4b8d      	ldr	r3, [pc, #564]	; (41b04c <calendar_init+0x608>)
  41ae18:	4798      	blx	r3
  41ae1a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ae1e:	0040      	lsls	r0, r0, #1
  41ae20:	3050      	adds	r0, #80	; 0x50
  41ae22:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ae26:	f280 81c4 	bge.w	41b1b2 <calendar_init+0x76e>
  41ae2a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41ae2c:	2111      	movs	r1, #17
  41ae2e:	4620      	mov	r0, r4
  41ae30:	4b85      	ldr	r3, [pc, #532]	; (41b048 <calendar_init+0x604>)
  41ae32:	4798      	blx	r3
  41ae34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41ae36:	2000      	movs	r0, #0
  41ae38:	4b84      	ldr	r3, [pc, #528]	; (41b04c <calendar_init+0x608>)
  41ae3a:	4798      	blx	r3
  41ae3c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ae40:	3050      	adds	r0, #80	; 0x50
  41ae42:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ae46:	da01      	bge.n	41ae4c <calendar_init+0x408>
  41ae48:	2201      	movs	r2, #1
  41ae4a:	e61b      	b.n	41aa84 <calendar_init+0x40>
  41ae4c:	2000      	movs	r0, #0
  41ae4e:	4b7f      	ldr	r3, [pc, #508]	; (41b04c <calendar_init+0x608>)
  41ae50:	4798      	blx	r3
  41ae52:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ae56:	3050      	adds	r0, #80	; 0x50
  41ae58:	4b7f      	ldr	r3, [pc, #508]	; (41b058 <calendar_init+0x614>)
  41ae5a:	fb83 2300 	smull	r2, r3, r3, r0
  41ae5e:	17c2      	asrs	r2, r0, #31
  41ae60:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ae64:	b212      	sxth	r2, r2
  41ae66:	e60d      	b.n	41aa84 <calendar_init+0x40>
  41ae68:	2000      	movs	r0, #0
  41ae6a:	4b78      	ldr	r3, [pc, #480]	; (41b04c <calendar_init+0x608>)
  41ae6c:	4798      	blx	r3
  41ae6e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ae72:	0040      	lsls	r0, r0, #1
  41ae74:	3050      	adds	r0, #80	; 0x50
  41ae76:	4b78      	ldr	r3, [pc, #480]	; (41b058 <calendar_init+0x614>)
  41ae78:	fb83 2300 	smull	r2, r3, r3, r0
  41ae7c:	17c2      	asrs	r2, r0, #31
  41ae7e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ae82:	b212      	sxth	r2, r2
  41ae84:	e5fe      	b.n	41aa84 <calendar_init+0x40>
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41ae86:	2000      	movs	r0, #0
  41ae88:	4b70      	ldr	r3, [pc, #448]	; (41b04c <calendar_init+0x608>)
  41ae8a:	4798      	blx	r3
  41ae8c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ae90:	3050      	adds	r0, #80	; 0x50
  41ae92:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ae96:	da01      	bge.n	41ae9c <calendar_init+0x458>
  41ae98:	2201      	movs	r2, #1
  41ae9a:	e60c      	b.n	41aab6 <calendar_init+0x72>
  41ae9c:	2000      	movs	r0, #0
  41ae9e:	4b6b      	ldr	r3, [pc, #428]	; (41b04c <calendar_init+0x608>)
  41aea0:	4798      	blx	r3
  41aea2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41aea6:	3050      	adds	r0, #80	; 0x50
  41aea8:	4b6b      	ldr	r3, [pc, #428]	; (41b058 <calendar_init+0x614>)
  41aeaa:	fb83 2300 	smull	r2, r3, r3, r0
  41aeae:	17c2      	asrs	r2, r0, #31
  41aeb0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aeb4:	b212      	sxth	r2, r2
  41aeb6:	e5fe      	b.n	41aab6 <calendar_init+0x72>
  41aeb8:	2000      	movs	r0, #0
  41aeba:	4b64      	ldr	r3, [pc, #400]	; (41b04c <calendar_init+0x608>)
  41aebc:	4798      	blx	r3
  41aebe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41aec2:	0040      	lsls	r0, r0, #1
  41aec4:	3050      	adds	r0, #80	; 0x50
  41aec6:	4b64      	ldr	r3, [pc, #400]	; (41b058 <calendar_init+0x614>)
  41aec8:	fb83 2300 	smull	r2, r3, r3, r0
  41aecc:	17c2      	asrs	r2, r0, #31
  41aece:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aed2:	b212      	sxth	r2, r2
  41aed4:	e5ef      	b.n	41aab6 <calendar_init+0x72>
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41aed6:	2000      	movs	r0, #0
  41aed8:	4b5c      	ldr	r3, [pc, #368]	; (41b04c <calendar_init+0x608>)
  41aeda:	4798      	blx	r3
  41aedc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41aee0:	3050      	adds	r0, #80	; 0x50
  41aee2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aee6:	da01      	bge.n	41aeec <calendar_init+0x4a8>
  41aee8:	2201      	movs	r2, #1
  41aeea:	e602      	b.n	41aaf2 <calendar_init+0xae>
  41aeec:	2000      	movs	r0, #0
  41aeee:	4b57      	ldr	r3, [pc, #348]	; (41b04c <calendar_init+0x608>)
  41aef0:	4798      	blx	r3
  41aef2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41aef6:	3050      	adds	r0, #80	; 0x50
  41aef8:	4b57      	ldr	r3, [pc, #348]	; (41b058 <calendar_init+0x614>)
  41aefa:	fb83 2300 	smull	r2, r3, r3, r0
  41aefe:	17c2      	asrs	r2, r0, #31
  41af00:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41af04:	b212      	sxth	r2, r2
  41af06:	e5f4      	b.n	41aaf2 <calendar_init+0xae>
  41af08:	2000      	movs	r0, #0
  41af0a:	4b50      	ldr	r3, [pc, #320]	; (41b04c <calendar_init+0x608>)
  41af0c:	4798      	blx	r3
  41af0e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41af12:	0040      	lsls	r0, r0, #1
  41af14:	3050      	adds	r0, #80	; 0x50
  41af16:	4b50      	ldr	r3, [pc, #320]	; (41b058 <calendar_init+0x614>)
  41af18:	fb83 2300 	smull	r2, r3, r3, r0
  41af1c:	17c2      	asrs	r2, r0, #31
  41af1e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41af22:	b212      	sxth	r2, r2
  41af24:	e5e5      	b.n	41aaf2 <calendar_init+0xae>
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41af26:	2000      	movs	r0, #0
  41af28:	4b48      	ldr	r3, [pc, #288]	; (41b04c <calendar_init+0x608>)
  41af2a:	4798      	blx	r3
  41af2c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41af30:	3050      	adds	r0, #80	; 0x50
  41af32:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41af36:	da01      	bge.n	41af3c <calendar_init+0x4f8>
  41af38:	2201      	movs	r2, #1
  41af3a:	e5f3      	b.n	41ab24 <calendar_init+0xe0>
  41af3c:	2000      	movs	r0, #0
  41af3e:	4b43      	ldr	r3, [pc, #268]	; (41b04c <calendar_init+0x608>)
  41af40:	4798      	blx	r3
  41af42:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41af46:	3050      	adds	r0, #80	; 0x50
  41af48:	4b43      	ldr	r3, [pc, #268]	; (41b058 <calendar_init+0x614>)
  41af4a:	fb83 2300 	smull	r2, r3, r3, r0
  41af4e:	17c2      	asrs	r2, r0, #31
  41af50:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41af54:	b212      	sxth	r2, r2
  41af56:	e5e5      	b.n	41ab24 <calendar_init+0xe0>
  41af58:	2000      	movs	r0, #0
  41af5a:	4b3c      	ldr	r3, [pc, #240]	; (41b04c <calendar_init+0x608>)
  41af5c:	4798      	blx	r3
  41af5e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41af62:	0040      	lsls	r0, r0, #1
  41af64:	3050      	adds	r0, #80	; 0x50
  41af66:	4b3c      	ldr	r3, [pc, #240]	; (41b058 <calendar_init+0x614>)
  41af68:	fb83 2300 	smull	r2, r3, r3, r0
  41af6c:	17c2      	asrs	r2, r0, #31
  41af6e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41af72:	b212      	sxth	r2, r2
  41af74:	e5d6      	b.n	41ab24 <calendar_init+0xe0>
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
  41af76:	4b39      	ldr	r3, [pc, #228]	; (41b05c <calendar_init+0x618>)
  41af78:	881a      	ldrh	r2, [r3, #0]
  41af7a:	e5ed      	b.n	41ab58 <calendar_init+0x114>
  41af7c:	f04f 0207 	mov.w	r2, #7
  41af80:	231d      	movs	r3, #29
  41af82:	f363 02c7 	bfi	r2, r3, #3, #5
  41af86:	f363 220c 	bfi	r2, r3, #8, #5
  41af8a:	2303      	movs	r3, #3
  41af8c:	f363 324f 	bfi	r2, r3, #13, #3
  41af90:	e600      	b.n	41ab94 <calendar_init+0x150>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  41af92:	2000      	movs	r0, #0
  41af94:	4b2d      	ldr	r3, [pc, #180]	; (41b04c <calendar_init+0x608>)
  41af96:	4798      	blx	r3
  41af98:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41af9c:	3050      	adds	r0, #80	; 0x50
  41af9e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41afa2:	da01      	bge.n	41afa8 <calendar_init+0x564>
  41afa4:	2201      	movs	r2, #1
  41afa6:	e60e      	b.n	41abc6 <calendar_init+0x182>
  41afa8:	2000      	movs	r0, #0
  41afaa:	4b28      	ldr	r3, [pc, #160]	; (41b04c <calendar_init+0x608>)
  41afac:	4798      	blx	r3
  41afae:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41afb2:	3050      	adds	r0, #80	; 0x50
  41afb4:	4b28      	ldr	r3, [pc, #160]	; (41b058 <calendar_init+0x614>)
  41afb6:	fb83 2300 	smull	r2, r3, r3, r0
  41afba:	17c2      	asrs	r2, r0, #31
  41afbc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41afc0:	b212      	sxth	r2, r2
  41afc2:	e600      	b.n	41abc6 <calendar_init+0x182>
  41afc4:	2000      	movs	r0, #0
  41afc6:	4b21      	ldr	r3, [pc, #132]	; (41b04c <calendar_init+0x608>)
  41afc8:	4798      	blx	r3
  41afca:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41afce:	0040      	lsls	r0, r0, #1
  41afd0:	3050      	adds	r0, #80	; 0x50
  41afd2:	4b21      	ldr	r3, [pc, #132]	; (41b058 <calendar_init+0x614>)
  41afd4:	fb83 2300 	smull	r2, r3, r3, r0
  41afd8:	17c2      	asrs	r2, r0, #31
  41afda:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41afde:	b212      	sxth	r2, r2
  41afe0:	e5f1      	b.n	41abc6 <calendar_init+0x182>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  41afe2:	2000      	movs	r0, #0
  41afe4:	4b19      	ldr	r3, [pc, #100]	; (41b04c <calendar_init+0x608>)
  41afe6:	4798      	blx	r3
  41afe8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41afec:	3050      	adds	r0, #80	; 0x50
  41afee:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aff2:	da01      	bge.n	41aff8 <calendar_init+0x5b4>
  41aff4:	2201      	movs	r2, #1
  41aff6:	e5ff      	b.n	41abf8 <calendar_init+0x1b4>
  41aff8:	2000      	movs	r0, #0
  41affa:	4b14      	ldr	r3, [pc, #80]	; (41b04c <calendar_init+0x608>)
  41affc:	4798      	blx	r3
  41affe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b002:	3050      	adds	r0, #80	; 0x50
  41b004:	4b14      	ldr	r3, [pc, #80]	; (41b058 <calendar_init+0x614>)
  41b006:	fb83 2300 	smull	r2, r3, r3, r0
  41b00a:	17c2      	asrs	r2, r0, #31
  41b00c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b010:	b212      	sxth	r2, r2
  41b012:	e5f1      	b.n	41abf8 <calendar_init+0x1b4>
  41b014:	2000      	movs	r0, #0
  41b016:	4b0d      	ldr	r3, [pc, #52]	; (41b04c <calendar_init+0x608>)
  41b018:	4798      	blx	r3
  41b01a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b01e:	0040      	lsls	r0, r0, #1
  41b020:	3050      	adds	r0, #80	; 0x50
  41b022:	4b0d      	ldr	r3, [pc, #52]	; (41b058 <calendar_init+0x614>)
  41b024:	fb83 2300 	smull	r2, r3, r3, r0
  41b028:	17c2      	asrs	r2, r0, #31
  41b02a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b02e:	b212      	sxth	r2, r2
  41b030:	e5e2      	b.n	41abf8 <calendar_init+0x1b4>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  41b032:	2000      	movs	r0, #0
  41b034:	4b05      	ldr	r3, [pc, #20]	; (41b04c <calendar_init+0x608>)
  41b036:	4798      	blx	r3
  41b038:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b03c:	3050      	adds	r0, #80	; 0x50
  41b03e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b042:	da0d      	bge.n	41b060 <calendar_init+0x61c>
  41b044:	2201      	movs	r2, #1
  41b046:	e5f0      	b.n	41ac2a <calendar_init+0x1e6>
  41b048:	0040a121 	.word	0x0040a121
  41b04c:	00415c7d 	.word	0x00415c7d
  41b050:	2041480c 	.word	0x2041480c
  41b054:	00415c9d 	.word	0x00415c9d
  41b058:	66666667 	.word	0x66666667
  41b05c:	00431c94 	.word	0x00431c94
  41b060:	2000      	movs	r0, #0
  41b062:	4b5b      	ldr	r3, [pc, #364]	; (41b1d0 <calendar_init+0x78c>)
  41b064:	4798      	blx	r3
  41b066:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b06a:	3050      	adds	r0, #80	; 0x50
  41b06c:	4b59      	ldr	r3, [pc, #356]	; (41b1d4 <calendar_init+0x790>)
  41b06e:	fb83 2300 	smull	r2, r3, r3, r0
  41b072:	17c2      	asrs	r2, r0, #31
  41b074:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b078:	b212      	sxth	r2, r2
  41b07a:	e5d6      	b.n	41ac2a <calendar_init+0x1e6>
  41b07c:	2000      	movs	r0, #0
  41b07e:	4b54      	ldr	r3, [pc, #336]	; (41b1d0 <calendar_init+0x78c>)
  41b080:	4798      	blx	r3
  41b082:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b086:	0040      	lsls	r0, r0, #1
  41b088:	3050      	adds	r0, #80	; 0x50
  41b08a:	4b52      	ldr	r3, [pc, #328]	; (41b1d4 <calendar_init+0x790>)
  41b08c:	fb83 2300 	smull	r2, r3, r3, r0
  41b090:	17c2      	asrs	r2, r0, #31
  41b092:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b096:	b212      	sxth	r2, r2
  41b098:	e5c7      	b.n	41ac2a <calendar_init+0x1e6>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
  41b09a:	2000      	movs	r0, #0
  41b09c:	4b4c      	ldr	r3, [pc, #304]	; (41b1d0 <calendar_init+0x78c>)
  41b09e:	4798      	blx	r3
  41b0a0:	3014      	adds	r0, #20
  41b0a2:	0080      	lsls	r0, r0, #2
  41b0a4:	4b4b      	ldr	r3, [pc, #300]	; (41b1d4 <calendar_init+0x790>)
  41b0a6:	fb83 2300 	smull	r2, r3, r3, r0
  41b0aa:	17c2      	asrs	r2, r0, #31
  41b0ac:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b0b0:	b212      	sxth	r2, r2
  41b0b2:	e5cf      	b.n	41ac54 <calendar_init+0x210>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  41b0b4:	4b48      	ldr	r3, [pc, #288]	; (41b1d8 <calendar_init+0x794>)
  41b0b6:	881a      	ldrh	r2, [r3, #0]
  41b0b8:	e5e6      	b.n	41ac88 <calendar_init+0x244>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
  41b0ba:	2266      	movs	r2, #102	; 0x66
  41b0bc:	e5f9      	b.n	41acb2 <calendar_init+0x26e>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  41b0be:	4b46      	ldr	r3, [pc, #280]	; (41b1d8 <calendar_init+0x794>)
  41b0c0:	881a      	ldrh	r2, [r3, #0]
  41b0c2:	e62a      	b.n	41ad1a <calendar_init+0x2d6>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
  41b0c4:	2000      	movs	r0, #0
  41b0c6:	4b42      	ldr	r3, [pc, #264]	; (41b1d0 <calendar_init+0x78c>)
  41b0c8:	4798      	blx	r3
  41b0ca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41b0ce:	3050      	adds	r0, #80	; 0x50
  41b0d0:	4b40      	ldr	r3, [pc, #256]	; (41b1d4 <calendar_init+0x790>)
  41b0d2:	fb83 2300 	smull	r2, r3, r3, r0
  41b0d6:	17c2      	asrs	r2, r0, #31
  41b0d8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b0dc:	b212      	sxth	r2, r2
  41b0de:	e65a      	b.n	41ad96 <calendar_init+0x352>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  41b0e0:	2000      	movs	r0, #0
  41b0e2:	4b3b      	ldr	r3, [pc, #236]	; (41b1d0 <calendar_init+0x78c>)
  41b0e4:	4798      	blx	r3
  41b0e6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b0ea:	3050      	adds	r0, #80	; 0x50
  41b0ec:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b0f0:	da01      	bge.n	41b0f6 <calendar_init+0x6b2>
  41b0f2:	2201      	movs	r2, #1
  41b0f4:	e668      	b.n	41adc8 <calendar_init+0x384>
  41b0f6:	2000      	movs	r0, #0
  41b0f8:	4b35      	ldr	r3, [pc, #212]	; (41b1d0 <calendar_init+0x78c>)
  41b0fa:	4798      	blx	r3
  41b0fc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b100:	3050      	adds	r0, #80	; 0x50
  41b102:	4b34      	ldr	r3, [pc, #208]	; (41b1d4 <calendar_init+0x790>)
  41b104:	fb83 2300 	smull	r2, r3, r3, r0
  41b108:	17c2      	asrs	r2, r0, #31
  41b10a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b10e:	b212      	sxth	r2, r2
  41b110:	e65a      	b.n	41adc8 <calendar_init+0x384>
  41b112:	2000      	movs	r0, #0
  41b114:	4b2e      	ldr	r3, [pc, #184]	; (41b1d0 <calendar_init+0x78c>)
  41b116:	4798      	blx	r3
  41b118:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b11c:	0040      	lsls	r0, r0, #1
  41b11e:	3050      	adds	r0, #80	; 0x50
  41b120:	4b2c      	ldr	r3, [pc, #176]	; (41b1d4 <calendar_init+0x790>)
  41b122:	fb83 2300 	smull	r2, r3, r3, r0
  41b126:	17c2      	asrs	r2, r0, #31
  41b128:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b12c:	b212      	sxth	r2, r2
  41b12e:	e64b      	b.n	41adc8 <calendar_init+0x384>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  41b130:	2000      	movs	r0, #0
  41b132:	4b27      	ldr	r3, [pc, #156]	; (41b1d0 <calendar_init+0x78c>)
  41b134:	4798      	blx	r3
  41b136:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b13a:	3050      	adds	r0, #80	; 0x50
  41b13c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b140:	da01      	bge.n	41b146 <calendar_init+0x702>
  41b142:	2201      	movs	r2, #1
  41b144:	e659      	b.n	41adfa <calendar_init+0x3b6>
  41b146:	2000      	movs	r0, #0
  41b148:	4b21      	ldr	r3, [pc, #132]	; (41b1d0 <calendar_init+0x78c>)
  41b14a:	4798      	blx	r3
  41b14c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b150:	3050      	adds	r0, #80	; 0x50
  41b152:	4b20      	ldr	r3, [pc, #128]	; (41b1d4 <calendar_init+0x790>)
  41b154:	fb83 2300 	smull	r2, r3, r3, r0
  41b158:	17c2      	asrs	r2, r0, #31
  41b15a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b15e:	b212      	sxth	r2, r2
  41b160:	e64b      	b.n	41adfa <calendar_init+0x3b6>
  41b162:	2000      	movs	r0, #0
  41b164:	4b1a      	ldr	r3, [pc, #104]	; (41b1d0 <calendar_init+0x78c>)
  41b166:	4798      	blx	r3
  41b168:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b16c:	0040      	lsls	r0, r0, #1
  41b16e:	3050      	adds	r0, #80	; 0x50
  41b170:	4b18      	ldr	r3, [pc, #96]	; (41b1d4 <calendar_init+0x790>)
  41b172:	fb83 2300 	smull	r2, r3, r3, r0
  41b176:	17c2      	asrs	r2, r0, #31
  41b178:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b17c:	b212      	sxth	r2, r2
  41b17e:	e63c      	b.n	41adfa <calendar_init+0x3b6>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  41b180:	2000      	movs	r0, #0
  41b182:	4b13      	ldr	r3, [pc, #76]	; (41b1d0 <calendar_init+0x78c>)
  41b184:	4798      	blx	r3
  41b186:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b18a:	3050      	adds	r0, #80	; 0x50
  41b18c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b190:	da01      	bge.n	41b196 <calendar_init+0x752>
  41b192:	2201      	movs	r2, #1
  41b194:	e64a      	b.n	41ae2c <calendar_init+0x3e8>
  41b196:	2000      	movs	r0, #0
  41b198:	4b0d      	ldr	r3, [pc, #52]	; (41b1d0 <calendar_init+0x78c>)
  41b19a:	4798      	blx	r3
  41b19c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b1a0:	3050      	adds	r0, #80	; 0x50
  41b1a2:	4b0c      	ldr	r3, [pc, #48]	; (41b1d4 <calendar_init+0x790>)
  41b1a4:	fb83 2300 	smull	r2, r3, r3, r0
  41b1a8:	17c2      	asrs	r2, r0, #31
  41b1aa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b1ae:	b212      	sxth	r2, r2
  41b1b0:	e63c      	b.n	41ae2c <calendar_init+0x3e8>
  41b1b2:	2000      	movs	r0, #0
  41b1b4:	4b06      	ldr	r3, [pc, #24]	; (41b1d0 <calendar_init+0x78c>)
  41b1b6:	4798      	blx	r3
  41b1b8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b1bc:	0040      	lsls	r0, r0, #1
  41b1be:	3050      	adds	r0, #80	; 0x50
  41b1c0:	4b04      	ldr	r3, [pc, #16]	; (41b1d4 <calendar_init+0x790>)
  41b1c2:	fb83 2300 	smull	r2, r3, r3, r0
  41b1c6:	17c2      	asrs	r2, r0, #31
  41b1c8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b1cc:	b212      	sxth	r2, r2
  41b1ce:	e62d      	b.n	41ae2c <calendar_init+0x3e8>
  41b1d0:	00415c7d 	.word	0x00415c7d
  41b1d4:	66666667 	.word	0x66666667
  41b1d8:	00431c94 	.word	0x00431c94

0041b1dc <cpicker_init>:
{
  41b1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->cpicker_bg);
  41b1de:	4c9a      	ldr	r4, [pc, #616]	; (41b448 <cpicker_init+0x26c>)
  41b1e0:	6820      	ldr	r0, [r4, #0]
  41b1e2:	303c      	adds	r0, #60	; 0x3c
  41b1e4:	4b99      	ldr	r3, [pc, #612]	; (41b44c <cpicker_init+0x270>)
  41b1e6:	4798      	blx	r3
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
  41b1e8:	6824      	ldr	r4, [r4, #0]
  41b1ea:	343c      	adds	r4, #60	; 0x3c
  41b1ec:	2000      	movs	r0, #0
  41b1ee:	4b98      	ldr	r3, [pc, #608]	; (41b450 <cpicker_init+0x274>)
  41b1f0:	4798      	blx	r3
  41b1f2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b1f6:	0040      	lsls	r0, r0, #1
  41b1f8:	3050      	adds	r0, #80	; 0x50
  41b1fa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b1fe:	f280 80b6 	bge.w	41b36e <cpicker_init+0x192>
  41b202:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  41b204:	21c0      	movs	r1, #192	; 0xc0
  41b206:	4620      	mov	r0, r4
  41b208:	4b92      	ldr	r3, [pc, #584]	; (41b454 <cpicker_init+0x278>)
  41b20a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b20c:	4c8e      	ldr	r4, [pc, #568]	; (41b448 <cpicker_init+0x26c>)
  41b20e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b210:	22ff      	movs	r2, #255	; 0xff
  41b212:	212c      	movs	r1, #44	; 0x2c
  41b214:	303c      	adds	r0, #60	; 0x3c
  41b216:	4b90      	ldr	r3, [pc, #576]	; (41b458 <cpicker_init+0x27c>)
  41b218:	4798      	blx	r3
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
  41b21a:	6820      	ldr	r0, [r4, #0]
  41b21c:	303c      	adds	r0, #60	; 0x3c
  41b21e:	4b8f      	ldr	r3, [pc, #572]	; (41b45c <cpicker_init+0x280>)
  41b220:	6a1b      	ldr	r3, [r3, #32]
  41b222:	f013 0f02 	tst.w	r3, #2
  41b226:	f000 80b1 	beq.w	41b38c <cpicker_init+0x1b0>
  41b22a:	f04f 0207 	mov.w	r2, #7
  41b22e:	231d      	movs	r3, #29
  41b230:	f363 02c7 	bfi	r2, r3, #3, #5
  41b234:	231e      	movs	r3, #30
  41b236:	f363 220c 	bfi	r2, r3, #8, #5
  41b23a:	2303      	movs	r3, #3
  41b23c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b240:	2129      	movs	r1, #41	; 0x29
  41b242:	4b87      	ldr	r3, [pc, #540]	; (41b460 <cpicker_init+0x284>)
  41b244:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
  41b246:	4b80      	ldr	r3, [pc, #512]	; (41b448 <cpicker_init+0x26c>)
  41b248:	681c      	ldr	r4, [r3, #0]
  41b24a:	343c      	adds	r4, #60	; 0x3c
  41b24c:	2000      	movs	r0, #0
  41b24e:	4b80      	ldr	r3, [pc, #512]	; (41b450 <cpicker_init+0x274>)
  41b250:	4798      	blx	r3
  41b252:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b256:	0080      	lsls	r0, r0, #2
  41b258:	3050      	adds	r0, #80	; 0x50
  41b25a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b25e:	f280 80a3 	bge.w	41b3a8 <cpicker_init+0x1cc>
  41b262:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41b264:	2114      	movs	r1, #20
  41b266:	4620      	mov	r0, r4
  41b268:	4e7a      	ldr	r6, [pc, #488]	; (41b454 <cpicker_init+0x278>)
  41b26a:	47b0      	blx	r6
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41b26c:	4c76      	ldr	r4, [pc, #472]	; (41b448 <cpicker_init+0x26c>)
  41b26e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41b270:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41b274:	2101      	movs	r1, #1
  41b276:	303c      	adds	r0, #60	; 0x3c
  41b278:	47b0      	blx	r6
    style_init_reset(&styles->cpicker_indic);
  41b27a:	6820      	ldr	r0, [r4, #0]
  41b27c:	3040      	adds	r0, #64	; 0x40
  41b27e:	4b73      	ldr	r3, [pc, #460]	; (41b44c <cpicker_init+0x270>)
  41b280:	4798      	blx	r3
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41b282:	6820      	ldr	r0, [r4, #0]
  41b284:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41b288:	2101      	movs	r1, #1
  41b28a:	3040      	adds	r0, #64	; 0x40
  41b28c:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  41b28e:	6820      	ldr	r0, [r4, #0]
  41b290:	4f74      	ldr	r7, [pc, #464]	; (41b464 <cpicker_init+0x288>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b292:	883a      	ldrh	r2, [r7, #0]
  41b294:	2129      	movs	r1, #41	; 0x29
  41b296:	3040      	adds	r0, #64	; 0x40
  41b298:	4d71      	ldr	r5, [pc, #452]	; (41b460 <cpicker_init+0x284>)
  41b29a:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b29c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b29e:	22ff      	movs	r2, #255	; 0xff
  41b2a0:	212c      	movs	r1, #44	; 0x2c
  41b2a2:	3040      	adds	r0, #64	; 0x40
  41b2a4:	4b6c      	ldr	r3, [pc, #432]	; (41b458 <cpicker_init+0x27c>)
  41b2a6:	4798      	blx	r3
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
  41b2a8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41b2aa:	2202      	movs	r2, #2
  41b2ac:	2130      	movs	r1, #48	; 0x30
  41b2ae:	3040      	adds	r0, #64	; 0x40
  41b2b0:	47b0      	blx	r6
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
  41b2b2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41b2b4:	88ba      	ldrh	r2, [r7, #4]
  41b2b6:	2139      	movs	r1, #57	; 0x39
  41b2b8:	3040      	adds	r0, #64	; 0x40
  41b2ba:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
  41b2bc:	6820      	ldr	r0, [r4, #0]
  41b2be:	4e67      	ldr	r6, [pc, #412]	; (41b45c <cpicker_init+0x280>)
  41b2c0:	89b2      	ldrh	r2, [r6, #12]
  41b2c2:	f240 2139 	movw	r1, #569	; 0x239
  41b2c6:	3040      	adds	r0, #64	; 0x40
  41b2c8:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
  41b2ca:	6820      	ldr	r0, [r4, #0]
  41b2cc:	89f2      	ldrh	r2, [r6, #14]
  41b2ce:	f240 4139 	movw	r1, #1081	; 0x439
  41b2d2:	3040      	adds	r0, #64	; 0x40
  41b2d4:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41b2d6:	6824      	ldr	r4, [r4, #0]
  41b2d8:	3440      	adds	r4, #64	; 0x40
  41b2da:	2000      	movs	r0, #0
  41b2dc:	4b5c      	ldr	r3, [pc, #368]	; (41b450 <cpicker_init+0x274>)
  41b2de:	4798      	blx	r3
  41b2e0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  41b2e4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  41b2e8:	3050      	adds	r0, #80	; 0x50
  41b2ea:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b2ee:	da6a      	bge.n	41b3c6 <cpicker_init+0x1ea>
  41b2f0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41b2f2:	2112      	movs	r1, #18
  41b2f4:	4620      	mov	r0, r4
  41b2f6:	4b57      	ldr	r3, [pc, #348]	; (41b454 <cpicker_init+0x278>)
  41b2f8:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41b2fa:	4b53      	ldr	r3, [pc, #332]	; (41b448 <cpicker_init+0x26c>)
  41b2fc:	681c      	ldr	r4, [r3, #0]
  41b2fe:	3440      	adds	r4, #64	; 0x40
  41b300:	2000      	movs	r0, #0
  41b302:	4b53      	ldr	r3, [pc, #332]	; (41b450 <cpicker_init+0x274>)
  41b304:	4798      	blx	r3
  41b306:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  41b30a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  41b30e:	3050      	adds	r0, #80	; 0x50
  41b310:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b314:	da67      	bge.n	41b3e6 <cpicker_init+0x20a>
  41b316:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41b318:	2113      	movs	r1, #19
  41b31a:	4620      	mov	r0, r4
  41b31c:	4b4d      	ldr	r3, [pc, #308]	; (41b454 <cpicker_init+0x278>)
  41b31e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41b320:	4b49      	ldr	r3, [pc, #292]	; (41b448 <cpicker_init+0x26c>)
  41b322:	681c      	ldr	r4, [r3, #0]
  41b324:	3440      	adds	r4, #64	; 0x40
  41b326:	2000      	movs	r0, #0
  41b328:	4b49      	ldr	r3, [pc, #292]	; (41b450 <cpicker_init+0x274>)
  41b32a:	4798      	blx	r3
  41b32c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  41b330:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  41b334:	3050      	adds	r0, #80	; 0x50
  41b336:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b33a:	da64      	bge.n	41b406 <cpicker_init+0x22a>
  41b33c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41b33e:	2110      	movs	r1, #16
  41b340:	4620      	mov	r0, r4
  41b342:	4b44      	ldr	r3, [pc, #272]	; (41b454 <cpicker_init+0x278>)
  41b344:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41b346:	4b40      	ldr	r3, [pc, #256]	; (41b448 <cpicker_init+0x26c>)
  41b348:	681c      	ldr	r4, [r3, #0]
  41b34a:	3440      	adds	r4, #64	; 0x40
  41b34c:	2000      	movs	r0, #0
  41b34e:	4b40      	ldr	r3, [pc, #256]	; (41b450 <cpicker_init+0x274>)
  41b350:	4798      	blx	r3
  41b352:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  41b356:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  41b35a:	3050      	adds	r0, #80	; 0x50
  41b35c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b360:	da61      	bge.n	41b426 <cpicker_init+0x24a>
  41b362:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41b364:	2111      	movs	r1, #17
  41b366:	4620      	mov	r0, r4
  41b368:	4b3a      	ldr	r3, [pc, #232]	; (41b454 <cpicker_init+0x278>)
  41b36a:	4798      	blx	r3
  41b36c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
  41b36e:	2000      	movs	r0, #0
  41b370:	4b37      	ldr	r3, [pc, #220]	; (41b450 <cpicker_init+0x274>)
  41b372:	4798      	blx	r3
  41b374:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b378:	0040      	lsls	r0, r0, #1
  41b37a:	3050      	adds	r0, #80	; 0x50
  41b37c:	4b3a      	ldr	r3, [pc, #232]	; (41b468 <cpicker_init+0x28c>)
  41b37e:	fb83 2300 	smull	r2, r3, r3, r0
  41b382:	17c2      	asrs	r2, r0, #31
  41b384:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b388:	b212      	sxth	r2, r2
  41b38a:	e73b      	b.n	41b204 <cpicker_init+0x28>
  41b38c:	2302      	movs	r3, #2
  41b38e:	f04f 0200 	mov.w	r2, #0
  41b392:	f363 0202 	bfi	r2, r3, #0, #3
  41b396:	2108      	movs	r1, #8
  41b398:	f361 02c7 	bfi	r2, r1, #3, #5
  41b39c:	210b      	movs	r1, #11
  41b39e:	f361 220c 	bfi	r2, r1, #8, #5
  41b3a2:	f363 324f 	bfi	r2, r3, #13, #3
  41b3a6:	e74b      	b.n	41b240 <cpicker_init+0x64>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
  41b3a8:	2000      	movs	r0, #0
  41b3aa:	4b29      	ldr	r3, [pc, #164]	; (41b450 <cpicker_init+0x274>)
  41b3ac:	4798      	blx	r3
  41b3ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b3b2:	0080      	lsls	r0, r0, #2
  41b3b4:	3050      	adds	r0, #80	; 0x50
  41b3b6:	4b2c      	ldr	r3, [pc, #176]	; (41b468 <cpicker_init+0x28c>)
  41b3b8:	fb83 2300 	smull	r2, r3, r3, r0
  41b3bc:	17c2      	asrs	r2, r0, #31
  41b3be:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b3c2:	b212      	sxth	r2, r2
  41b3c4:	e74e      	b.n	41b264 <cpicker_init+0x88>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41b3c6:	2000      	movs	r0, #0
  41b3c8:	4b21      	ldr	r3, [pc, #132]	; (41b450 <cpicker_init+0x274>)
  41b3ca:	4798      	blx	r3
  41b3cc:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41b3d0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41b3d4:	3050      	adds	r0, #80	; 0x50
  41b3d6:	4b24      	ldr	r3, [pc, #144]	; (41b468 <cpicker_init+0x28c>)
  41b3d8:	fb83 2300 	smull	r2, r3, r3, r0
  41b3dc:	17c2      	asrs	r2, r0, #31
  41b3de:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b3e2:	b212      	sxth	r2, r2
  41b3e4:	e785      	b.n	41b2f2 <cpicker_init+0x116>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41b3e6:	2000      	movs	r0, #0
  41b3e8:	4b19      	ldr	r3, [pc, #100]	; (41b450 <cpicker_init+0x274>)
  41b3ea:	4798      	blx	r3
  41b3ec:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41b3f0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41b3f4:	3050      	adds	r0, #80	; 0x50
  41b3f6:	4b1c      	ldr	r3, [pc, #112]	; (41b468 <cpicker_init+0x28c>)
  41b3f8:	fb83 2300 	smull	r2, r3, r3, r0
  41b3fc:	17c2      	asrs	r2, r0, #31
  41b3fe:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b402:	b212      	sxth	r2, r2
  41b404:	e788      	b.n	41b318 <cpicker_init+0x13c>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41b406:	2000      	movs	r0, #0
  41b408:	4b11      	ldr	r3, [pc, #68]	; (41b450 <cpicker_init+0x274>)
  41b40a:	4798      	blx	r3
  41b40c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41b410:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41b414:	3050      	adds	r0, #80	; 0x50
  41b416:	4b14      	ldr	r3, [pc, #80]	; (41b468 <cpicker_init+0x28c>)
  41b418:	fb83 2300 	smull	r2, r3, r3, r0
  41b41c:	17c2      	asrs	r2, r0, #31
  41b41e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b422:	b212      	sxth	r2, r2
  41b424:	e78b      	b.n	41b33e <cpicker_init+0x162>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41b426:	2000      	movs	r0, #0
  41b428:	4b09      	ldr	r3, [pc, #36]	; (41b450 <cpicker_init+0x274>)
  41b42a:	4798      	blx	r3
  41b42c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41b430:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41b434:	3050      	adds	r0, #80	; 0x50
  41b436:	4b0c      	ldr	r3, [pc, #48]	; (41b468 <cpicker_init+0x28c>)
  41b438:	fb83 2300 	smull	r2, r3, r3, r0
  41b43c:	17c2      	asrs	r2, r0, #31
  41b43e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b442:	b212      	sxth	r2, r2
  41b444:	e78e      	b.n	41b364 <cpicker_init+0x188>
  41b446:	bf00      	nop
  41b448:	2041480c 	.word	0x2041480c
  41b44c:	004198fd 	.word	0x004198fd
  41b450:	00415c7d 	.word	0x00415c7d
  41b454:	0040a121 	.word	0x0040a121
  41b458:	0040a441 	.word	0x0040a441
  41b45c:	20414810 	.word	0x20414810
  41b460:	0040a2b1 	.word	0x0040a2b1
  41b464:	00431c94 	.word	0x00431c94
  41b468:	66666667 	.word	0x66666667

0041b46c <checkbox_init>:
{
  41b46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->cb_bg);
  41b46e:	4cb5      	ldr	r4, [pc, #724]	; (41b744 <checkbox_init+0x2d8>)
  41b470:	6820      	ldr	r0, [r4, #0]
  41b472:	3050      	adds	r0, #80	; 0x50
  41b474:	4bb4      	ldr	r3, [pc, #720]	; (41b748 <checkbox_init+0x2dc>)
  41b476:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41b478:	6824      	ldr	r4, [r4, #0]
  41b47a:	3450      	adds	r4, #80	; 0x50
  41b47c:	2000      	movs	r0, #0
  41b47e:	4bb3      	ldr	r3, [pc, #716]	; (41b74c <checkbox_init+0x2e0>)
  41b480:	4798      	blx	r3
  41b482:	3014      	adds	r0, #20
  41b484:	0080      	lsls	r0, r0, #2
  41b486:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b48a:	f280 80e1 	bge.w	41b650 <checkbox_init+0x1e4>
  41b48e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41b490:	2101      	movs	r1, #1
  41b492:	4620      	mov	r0, r4
  41b494:	4bae      	ldr	r3, [pc, #696]	; (41b750 <checkbox_init+0x2e4>)
  41b496:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41b498:	4baa      	ldr	r3, [pc, #680]	; (41b744 <checkbox_init+0x2d8>)
  41b49a:	681c      	ldr	r4, [r3, #0]
  41b49c:	3450      	adds	r4, #80	; 0x50
  41b49e:	2000      	movs	r0, #0
  41b4a0:	4baa      	ldr	r3, [pc, #680]	; (41b74c <checkbox_init+0x2e0>)
  41b4a2:	4798      	blx	r3
  41b4a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b4a8:	0043      	lsls	r3, r0, #1
  41b4aa:	3350      	adds	r3, #80	; 0x50
  41b4ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  41b4b0:	f280 80db 	bge.w	41b66a <checkbox_init+0x1fe>
  41b4b4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41b4b6:	2114      	movs	r1, #20
  41b4b8:	4620      	mov	r0, r4
  41b4ba:	4ba5      	ldr	r3, [pc, #660]	; (41b750 <checkbox_init+0x2e4>)
  41b4bc:	4798      	blx	r3
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
  41b4be:	4ca1      	ldr	r4, [pc, #644]	; (41b744 <checkbox_init+0x2d8>)
  41b4c0:	6820      	ldr	r0, [r4, #0]
  41b4c2:	4ea4      	ldr	r6, [pc, #656]	; (41b754 <checkbox_init+0x2e8>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  41b4c4:	89b2      	ldrh	r2, [r6, #12]
  41b4c6:	2149      	movs	r1, #73	; 0x49
  41b4c8:	3050      	adds	r0, #80	; 0x50
  41b4ca:	4ba3      	ldr	r3, [pc, #652]	; (41b758 <checkbox_init+0x2ec>)
  41b4cc:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  41b4ce:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  41b4d0:	2200      	movs	r2, #0
  41b4d2:	214c      	movs	r1, #76	; 0x4c
  41b4d4:	3050      	adds	r0, #80	; 0x50
  41b4d6:	4da1      	ldr	r5, [pc, #644]	; (41b75c <checkbox_init+0x2f0>)
  41b4d8:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
  41b4da:	6820      	ldr	r0, [r4, #0]
  41b4dc:	227f      	movs	r2, #127	; 0x7f
  41b4de:	f44f 7113 	mov.w	r1, #588	; 0x24c
  41b4e2:	3050      	adds	r0, #80	; 0x50
  41b4e4:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41b4e6:	6824      	ldr	r4, [r4, #0]
  41b4e8:	3450      	adds	r4, #80	; 0x50
  41b4ea:	6a33      	ldr	r3, [r6, #32]
  41b4ec:	f013 0f20 	tst.w	r3, #32
  41b4f0:	f000 80ca 	beq.w	41b688 <checkbox_init+0x21c>
  41b4f4:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41b4f6:	2140      	movs	r1, #64	; 0x40
  41b4f8:	4620      	mov	r0, r4
  41b4fa:	4b95      	ldr	r3, [pc, #596]	; (41b750 <checkbox_init+0x2e4>)
  41b4fc:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41b4fe:	4b91      	ldr	r3, [pc, #580]	; (41b744 <checkbox_init+0x2d8>)
  41b500:	681c      	ldr	r4, [r3, #0]
  41b502:	3450      	adds	r4, #80	; 0x50
  41b504:	2000      	movs	r0, #0
  41b506:	4b91      	ldr	r3, [pc, #580]	; (41b74c <checkbox_init+0x2e0>)
  41b508:	4798      	blx	r3
  41b50a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b50e:	0043      	lsls	r3, r0, #1
  41b510:	3350      	adds	r3, #80	; 0x50
  41b512:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  41b516:	f280 80ce 	bge.w	41b6b6 <checkbox_init+0x24a>
  41b51a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  41b51c:	2141      	movs	r1, #65	; 0x41
  41b51e:	4620      	mov	r0, r4
  41b520:	4d8b      	ldr	r5, [pc, #556]	; (41b750 <checkbox_init+0x2e4>)
  41b522:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  41b524:	4c87      	ldr	r4, [pc, #540]	; (41b744 <checkbox_init+0x2d8>)
  41b526:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41b528:	2200      	movs	r2, #0
  41b52a:	21b0      	movs	r1, #176	; 0xb0
  41b52c:	3050      	adds	r0, #80	; 0x50
  41b52e:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  41b530:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41b532:	224c      	movs	r2, #76	; 0x4c
  41b534:	21b7      	movs	r1, #183	; 0xb7
  41b536:	3050      	adds	r0, #80	; 0x50
  41b538:	47a8      	blx	r5
    style_init_reset(&styles->cb_bullet);
  41b53a:	6820      	ldr	r0, [r4, #0]
  41b53c:	3054      	adds	r0, #84	; 0x54
  41b53e:	4b82      	ldr	r3, [pc, #520]	; (41b748 <checkbox_init+0x2dc>)
  41b540:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
  41b542:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  41b544:	2200      	movs	r2, #0
  41b546:	f44f 7113 	mov.w	r1, #588	; 0x24c
  41b54a:	3054      	adds	r0, #84	; 0x54
  41b54c:	4b83      	ldr	r3, [pc, #524]	; (41b75c <checkbox_init+0x2f0>)
  41b54e:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
  41b550:	6824      	ldr	r4, [r4, #0]
  41b552:	3454      	adds	r4, #84	; 0x54
  41b554:	2000      	movs	r0, #0
  41b556:	4b7d      	ldr	r3, [pc, #500]	; (41b74c <checkbox_init+0x2e0>)
  41b558:	4798      	blx	r3
  41b55a:	3014      	adds	r0, #20
  41b55c:	0080      	lsls	r0, r0, #2
  41b55e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b562:	f280 80b7 	bge.w	41b6d4 <checkbox_init+0x268>
  41b566:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41b568:	2101      	movs	r1, #1
  41b56a:	4620      	mov	r0, r4
  41b56c:	4e78      	ldr	r6, [pc, #480]	; (41b750 <checkbox_init+0x2e4>)
  41b56e:	47b0      	blx	r6
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
  41b570:	4c74      	ldr	r4, [pc, #464]	; (41b744 <checkbox_init+0x2d8>)
  41b572:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  41b574:	4a7a      	ldr	r2, [pc, #488]	; (41b760 <checkbox_init+0x2f4>)
  41b576:	f44f 71b7 	mov.w	r1, #366	; 0x16e
  41b57a:	3054      	adds	r0, #84	; 0x54
  41b57c:	4d79      	ldr	r5, [pc, #484]	; (41b764 <checkbox_init+0x2f8>)
  41b57e:	47a8      	blx	r5
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
  41b580:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  41b582:	4b79      	ldr	r3, [pc, #484]	; (41b768 <checkbox_init+0x2fc>)
  41b584:	881a      	ldrh	r2, [r3, #0]
  41b586:	f240 1169 	movw	r1, #361	; 0x169
  41b58a:	3054      	adds	r0, #84	; 0x54
  41b58c:	4b72      	ldr	r3, [pc, #456]	; (41b758 <checkbox_init+0x2ec>)
  41b58e:	4798      	blx	r3
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  41b590:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
  41b592:	2200      	movs	r2, #0
  41b594:	216c      	movs	r1, #108	; 0x6c
  41b596:	3054      	adds	r0, #84	; 0x54
  41b598:	4f70      	ldr	r7, [pc, #448]	; (41b75c <checkbox_init+0x2f0>)
  41b59a:	47b8      	blx	r7
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_CHECKED, LV_OPA_COVER);
  41b59c:	6820      	ldr	r0, [r4, #0]
  41b59e:	22ff      	movs	r2, #255	; 0xff
  41b5a0:	f44f 71b6 	mov.w	r1, #364	; 0x16c
  41b5a4:	3054      	adds	r0, #84	; 0x54
  41b5a6:	47b8      	blx	r7
    lv_style_set_transition_prop_3(&styles->cb_bullet, LV_STATE_DEFAULT, LV_STYLE_PATTERN_OPA);
  41b5a8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
  41b5aa:	226c      	movs	r2, #108	; 0x6c
  41b5ac:	21b4      	movs	r1, #180	; 0xb4
  41b5ae:	3054      	adds	r0, #84	; 0x54
  41b5b0:	47b0      	blx	r6
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
  41b5b2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  41b5b4:	4b67      	ldr	r3, [pc, #412]	; (41b754 <checkbox_init+0x2e8>)
  41b5b6:	691a      	ldr	r2, [r3, #16]
  41b5b8:	f248 118e 	movw	r1, #33166	; 0x818e
  41b5bc:	3054      	adds	r0, #84	; 0x54
  41b5be:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41b5c0:	6824      	ldr	r4, [r4, #0]
  41b5c2:	3454      	adds	r4, #84	; 0x54
  41b5c4:	2000      	movs	r0, #0
  41b5c6:	4b61      	ldr	r3, [pc, #388]	; (41b74c <checkbox_init+0x2e0>)
  41b5c8:	4798      	blx	r3
  41b5ca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41b5ce:	3050      	adds	r0, #80	; 0x50
  41b5d0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b5d4:	f280 808b 	bge.w	41b6ee <checkbox_init+0x282>
  41b5d8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41b5da:	2112      	movs	r1, #18
  41b5dc:	4620      	mov	r0, r4
  41b5de:	4b5c      	ldr	r3, [pc, #368]	; (41b750 <checkbox_init+0x2e4>)
  41b5e0:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41b5e2:	4b58      	ldr	r3, [pc, #352]	; (41b744 <checkbox_init+0x2d8>)
  41b5e4:	681c      	ldr	r4, [r3, #0]
  41b5e6:	3454      	adds	r4, #84	; 0x54
  41b5e8:	2000      	movs	r0, #0
  41b5ea:	4b58      	ldr	r3, [pc, #352]	; (41b74c <checkbox_init+0x2e0>)
  41b5ec:	4798      	blx	r3
  41b5ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41b5f2:	3050      	adds	r0, #80	; 0x50
  41b5f4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b5f8:	f280 8087 	bge.w	41b70a <checkbox_init+0x29e>
  41b5fc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41b5fe:	2113      	movs	r1, #19
  41b600:	4620      	mov	r0, r4
  41b602:	4b53      	ldr	r3, [pc, #332]	; (41b750 <checkbox_init+0x2e4>)
  41b604:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41b606:	4b4f      	ldr	r3, [pc, #316]	; (41b744 <checkbox_init+0x2d8>)
  41b608:	681c      	ldr	r4, [r3, #0]
  41b60a:	3454      	adds	r4, #84	; 0x54
  41b60c:	2000      	movs	r0, #0
  41b60e:	4b4f      	ldr	r3, [pc, #316]	; (41b74c <checkbox_init+0x2e0>)
  41b610:	4798      	blx	r3
  41b612:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41b616:	3050      	adds	r0, #80	; 0x50
  41b618:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b61c:	f280 8083 	bge.w	41b726 <checkbox_init+0x2ba>
  41b620:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41b622:	2110      	movs	r1, #16
  41b624:	4620      	mov	r0, r4
  41b626:	4b4a      	ldr	r3, [pc, #296]	; (41b750 <checkbox_init+0x2e4>)
  41b628:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41b62a:	4b46      	ldr	r3, [pc, #280]	; (41b744 <checkbox_init+0x2d8>)
  41b62c:	681c      	ldr	r4, [r3, #0]
  41b62e:	3454      	adds	r4, #84	; 0x54
  41b630:	2000      	movs	r0, #0
  41b632:	4b46      	ldr	r3, [pc, #280]	; (41b74c <checkbox_init+0x2e0>)
  41b634:	4798      	blx	r3
  41b636:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41b63a:	3050      	adds	r0, #80	; 0x50
  41b63c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b640:	f280 8096 	bge.w	41b770 <checkbox_init+0x304>
  41b644:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41b646:	2111      	movs	r1, #17
  41b648:	4620      	mov	r0, r4
  41b64a:	4b41      	ldr	r3, [pc, #260]	; (41b750 <checkbox_init+0x2e4>)
  41b64c:	4798      	blx	r3
  41b64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41b650:	2000      	movs	r0, #0
  41b652:	4b3e      	ldr	r3, [pc, #248]	; (41b74c <checkbox_init+0x2e0>)
  41b654:	4798      	blx	r3
  41b656:	3014      	adds	r0, #20
  41b658:	0080      	lsls	r0, r0, #2
  41b65a:	4b44      	ldr	r3, [pc, #272]	; (41b76c <checkbox_init+0x300>)
  41b65c:	fb83 2300 	smull	r2, r3, r3, r0
  41b660:	17c2      	asrs	r2, r0, #31
  41b662:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b666:	b212      	sxth	r2, r2
  41b668:	e712      	b.n	41b490 <checkbox_init+0x24>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41b66a:	2000      	movs	r0, #0
  41b66c:	4b37      	ldr	r3, [pc, #220]	; (41b74c <checkbox_init+0x2e0>)
  41b66e:	4798      	blx	r3
  41b670:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b674:	0043      	lsls	r3, r0, #1
  41b676:	3350      	adds	r3, #80	; 0x50
  41b678:	493c      	ldr	r1, [pc, #240]	; (41b76c <checkbox_init+0x300>)
  41b67a:	fb81 2103 	smull	r2, r1, r1, r3
  41b67e:	17da      	asrs	r2, r3, #31
  41b680:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
  41b684:	b212      	sxth	r2, r2
  41b686:	e716      	b.n	41b4b6 <checkbox_init+0x4a>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41b688:	2000      	movs	r0, #0
  41b68a:	4b30      	ldr	r3, [pc, #192]	; (41b74c <checkbox_init+0x2e0>)
  41b68c:	4798      	blx	r3
  41b68e:	3028      	adds	r0, #40	; 0x28
  41b690:	0040      	lsls	r0, r0, #1
  41b692:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b696:	da01      	bge.n	41b69c <checkbox_init+0x230>
  41b698:	2201      	movs	r2, #1
  41b69a:	e72c      	b.n	41b4f6 <checkbox_init+0x8a>
  41b69c:	2000      	movs	r0, #0
  41b69e:	4b2b      	ldr	r3, [pc, #172]	; (41b74c <checkbox_init+0x2e0>)
  41b6a0:	4798      	blx	r3
  41b6a2:	3028      	adds	r0, #40	; 0x28
  41b6a4:	0040      	lsls	r0, r0, #1
  41b6a6:	4b31      	ldr	r3, [pc, #196]	; (41b76c <checkbox_init+0x300>)
  41b6a8:	fb83 2300 	smull	r2, r3, r3, r0
  41b6ac:	17c2      	asrs	r2, r0, #31
  41b6ae:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b6b2:	b212      	sxth	r2, r2
  41b6b4:	e71f      	b.n	41b4f6 <checkbox_init+0x8a>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41b6b6:	2000      	movs	r0, #0
  41b6b8:	4b24      	ldr	r3, [pc, #144]	; (41b74c <checkbox_init+0x2e0>)
  41b6ba:	4798      	blx	r3
  41b6bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b6c0:	0043      	lsls	r3, r0, #1
  41b6c2:	3350      	adds	r3, #80	; 0x50
  41b6c4:	4929      	ldr	r1, [pc, #164]	; (41b76c <checkbox_init+0x300>)
  41b6c6:	fb81 2103 	smull	r2, r1, r1, r3
  41b6ca:	17da      	asrs	r2, r3, #31
  41b6cc:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
  41b6d0:	b212      	sxth	r2, r2
  41b6d2:	e723      	b.n	41b51c <checkbox_init+0xb0>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
  41b6d4:	2000      	movs	r0, #0
  41b6d6:	4b1d      	ldr	r3, [pc, #116]	; (41b74c <checkbox_init+0x2e0>)
  41b6d8:	4798      	blx	r3
  41b6da:	3014      	adds	r0, #20
  41b6dc:	0080      	lsls	r0, r0, #2
  41b6de:	4b23      	ldr	r3, [pc, #140]	; (41b76c <checkbox_init+0x300>)
  41b6e0:	fb83 2300 	smull	r2, r3, r3, r0
  41b6e4:	17c2      	asrs	r2, r0, #31
  41b6e6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b6ea:	b212      	sxth	r2, r2
  41b6ec:	e73c      	b.n	41b568 <checkbox_init+0xfc>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41b6ee:	2000      	movs	r0, #0
  41b6f0:	4b16      	ldr	r3, [pc, #88]	; (41b74c <checkbox_init+0x2e0>)
  41b6f2:	4798      	blx	r3
  41b6f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41b6f8:	3050      	adds	r0, #80	; 0x50
  41b6fa:	4b1c      	ldr	r3, [pc, #112]	; (41b76c <checkbox_init+0x300>)
  41b6fc:	fb83 2300 	smull	r2, r3, r3, r0
  41b700:	17c2      	asrs	r2, r0, #31
  41b702:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b706:	b212      	sxth	r2, r2
  41b708:	e767      	b.n	41b5da <checkbox_init+0x16e>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41b70a:	2000      	movs	r0, #0
  41b70c:	4b0f      	ldr	r3, [pc, #60]	; (41b74c <checkbox_init+0x2e0>)
  41b70e:	4798      	blx	r3
  41b710:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41b714:	3050      	adds	r0, #80	; 0x50
  41b716:	4b15      	ldr	r3, [pc, #84]	; (41b76c <checkbox_init+0x300>)
  41b718:	fb83 2300 	smull	r2, r3, r3, r0
  41b71c:	17c2      	asrs	r2, r0, #31
  41b71e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b722:	b212      	sxth	r2, r2
  41b724:	e76b      	b.n	41b5fe <checkbox_init+0x192>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41b726:	2000      	movs	r0, #0
  41b728:	4b08      	ldr	r3, [pc, #32]	; (41b74c <checkbox_init+0x2e0>)
  41b72a:	4798      	blx	r3
  41b72c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41b730:	3050      	adds	r0, #80	; 0x50
  41b732:	4b0e      	ldr	r3, [pc, #56]	; (41b76c <checkbox_init+0x300>)
  41b734:	fb83 2300 	smull	r2, r3, r3, r0
  41b738:	17c2      	asrs	r2, r0, #31
  41b73a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b73e:	b212      	sxth	r2, r2
  41b740:	e76f      	b.n	41b622 <checkbox_init+0x1b6>
  41b742:	bf00      	nop
  41b744:	2041480c 	.word	0x2041480c
  41b748:	004198fd 	.word	0x004198fd
  41b74c:	00415c7d 	.word	0x00415c7d
  41b750:	0040a121 	.word	0x0040a121
  41b754:	20414810 	.word	0x20414810
  41b758:	0040a2b1 	.word	0x0040a2b1
  41b75c:	0040a441 	.word	0x0040a441
  41b760:	00431ca0 	.word	0x00431ca0
  41b764:	0040a5d1 	.word	0x0040a5d1
  41b768:	00431c94 	.word	0x00431c94
  41b76c:	66666667 	.word	0x66666667
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41b770:	2000      	movs	r0, #0
  41b772:	4b06      	ldr	r3, [pc, #24]	; (41b78c <checkbox_init+0x320>)
  41b774:	4798      	blx	r3
  41b776:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41b77a:	3050      	adds	r0, #80	; 0x50
  41b77c:	4b04      	ldr	r3, [pc, #16]	; (41b790 <checkbox_init+0x324>)
  41b77e:	fb83 2300 	smull	r2, r3, r3, r0
  41b782:	17c2      	asrs	r2, r0, #31
  41b784:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b788:	b212      	sxth	r2, r2
  41b78a:	e75c      	b.n	41b646 <checkbox_init+0x1da>
  41b78c:	00415c7d 	.word	0x00415c7d
  41b790:	66666667 	.word	0x66666667

0041b794 <keyboard_init>:
{
  41b794:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->kb_bg);
  41b796:	4c76      	ldr	r4, [pc, #472]	; (41b970 <keyboard_init+0x1dc>)
  41b798:	6820      	ldr	r0, [r4, #0]
  41b79a:	306c      	adds	r0, #108	; 0x6c
  41b79c:	4b75      	ldr	r3, [pc, #468]	; (41b974 <keyboard_init+0x1e0>)
  41b79e:	4798      	blx	r3
    lv_style_set_radius(&styles->kb_bg, LV_STATE_DEFAULT, 0);
  41b7a0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41b7a2:	2200      	movs	r2, #0
  41b7a4:	2101      	movs	r1, #1
  41b7a6:	306c      	adds	r0, #108	; 0x6c
  41b7a8:	4b73      	ldr	r3, [pc, #460]	; (41b978 <keyboard_init+0x1e4>)
  41b7aa:	4798      	blx	r3
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41b7ac:	6824      	ldr	r4, [r4, #0]
  41b7ae:	346c      	adds	r4, #108	; 0x6c
  41b7b0:	2000      	movs	r0, #0
  41b7b2:	4b72      	ldr	r3, [pc, #456]	; (41b97c <keyboard_init+0x1e8>)
  41b7b4:	4798      	blx	r3
  41b7b6:	3014      	adds	r0, #20
  41b7b8:	0080      	lsls	r0, r0, #2
  41b7ba:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b7be:	f280 8081 	bge.w	41b8c4 <keyboard_init+0x130>
  41b7c2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41b7c4:	2130      	movs	r1, #48	; 0x30
  41b7c6:	4620      	mov	r0, r4
  41b7c8:	4d6b      	ldr	r5, [pc, #428]	; (41b978 <keyboard_init+0x1e4>)
  41b7ca:	47a8      	blx	r5
    lv_style_set_border_side(&styles->kb_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP);
  41b7cc:	4c68      	ldr	r4, [pc, #416]	; (41b970 <keyboard_init+0x1dc>)
  41b7ce:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41b7d0:	2202      	movs	r2, #2
  41b7d2:	2131      	movs	r1, #49	; 0x31
  41b7d4:	306c      	adds	r0, #108	; 0x6c
  41b7d6:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
  41b7d8:	6820      	ldr	r0, [r4, #0]
  41b7da:	306c      	adds	r0, #108	; 0x6c
  41b7dc:	4b68      	ldr	r3, [pc, #416]	; (41b980 <keyboard_init+0x1ec>)
  41b7de:	6a1b      	ldr	r3, [r3, #32]
  41b7e0:	f013 0f02 	tst.w	r3, #2
  41b7e4:	d07b      	beq.n	41b8de <keyboard_init+0x14a>
  41b7e6:	f04f 0200 	mov.w	r2, #0
  41b7ea:	2301      	movs	r3, #1
  41b7ec:	f363 0202 	bfi	r2, r3, #0, #3
  41b7f0:	2307      	movs	r3, #7
  41b7f2:	f363 02c7 	bfi	r2, r3, #3, #5
  41b7f6:	2308      	movs	r3, #8
  41b7f8:	f363 220c 	bfi	r2, r3, #8, #5
  41b7fc:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b800:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41b804:	2139      	movs	r1, #57	; 0x39
  41b806:	4d5f      	ldr	r5, [pc, #380]	; (41b984 <keyboard_init+0x1f0>)
  41b808:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_EDITED, theme.color_secondary);
  41b80a:	4c59      	ldr	r4, [pc, #356]	; (41b970 <keyboard_init+0x1dc>)
  41b80c:	6820      	ldr	r0, [r4, #0]
  41b80e:	4b5c      	ldr	r3, [pc, #368]	; (41b980 <keyboard_init+0x1ec>)
  41b810:	89da      	ldrh	r2, [r3, #14]
  41b812:	f240 4139 	movw	r1, #1081	; 0x439
  41b816:	306c      	adds	r0, #108	; 0x6c
  41b818:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41b81a:	6824      	ldr	r4, [r4, #0]
  41b81c:	346c      	adds	r4, #108	; 0x6c
  41b81e:	2000      	movs	r0, #0
  41b820:	4b56      	ldr	r3, [pc, #344]	; (41b97c <keyboard_init+0x1e8>)
  41b822:	4798      	blx	r3
  41b824:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b828:	3050      	adds	r0, #80	; 0x50
  41b82a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b82e:	da59      	bge.n	41b8e4 <keyboard_init+0x150>
  41b830:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41b832:	2112      	movs	r1, #18
  41b834:	4620      	mov	r0, r4
  41b836:	4b50      	ldr	r3, [pc, #320]	; (41b978 <keyboard_init+0x1e4>)
  41b838:	4798      	blx	r3
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41b83a:	4b4d      	ldr	r3, [pc, #308]	; (41b970 <keyboard_init+0x1dc>)
  41b83c:	681c      	ldr	r4, [r3, #0]
  41b83e:	346c      	adds	r4, #108	; 0x6c
  41b840:	2000      	movs	r0, #0
  41b842:	4b4e      	ldr	r3, [pc, #312]	; (41b97c <keyboard_init+0x1e8>)
  41b844:	4798      	blx	r3
  41b846:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b84a:	3050      	adds	r0, #80	; 0x50
  41b84c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b850:	da56      	bge.n	41b900 <keyboard_init+0x16c>
  41b852:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41b854:	2113      	movs	r1, #19
  41b856:	4620      	mov	r0, r4
  41b858:	4b47      	ldr	r3, [pc, #284]	; (41b978 <keyboard_init+0x1e4>)
  41b85a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41b85c:	4b44      	ldr	r3, [pc, #272]	; (41b970 <keyboard_init+0x1dc>)
  41b85e:	681c      	ldr	r4, [r3, #0]
  41b860:	346c      	adds	r4, #108	; 0x6c
  41b862:	2000      	movs	r0, #0
  41b864:	4b45      	ldr	r3, [pc, #276]	; (41b97c <keyboard_init+0x1e8>)
  41b866:	4798      	blx	r3
  41b868:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b86c:	3050      	adds	r0, #80	; 0x50
  41b86e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b872:	da53      	bge.n	41b91c <keyboard_init+0x188>
  41b874:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41b876:	2110      	movs	r1, #16
  41b878:	4620      	mov	r0, r4
  41b87a:	4b3f      	ldr	r3, [pc, #252]	; (41b978 <keyboard_init+0x1e4>)
  41b87c:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41b87e:	4b3c      	ldr	r3, [pc, #240]	; (41b970 <keyboard_init+0x1dc>)
  41b880:	681c      	ldr	r4, [r3, #0]
  41b882:	346c      	adds	r4, #108	; 0x6c
  41b884:	2000      	movs	r0, #0
  41b886:	4b3d      	ldr	r3, [pc, #244]	; (41b97c <keyboard_init+0x1e8>)
  41b888:	4798      	blx	r3
  41b88a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b88e:	3050      	adds	r0, #80	; 0x50
  41b890:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b894:	da50      	bge.n	41b938 <keyboard_init+0x1a4>
  41b896:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41b898:	2111      	movs	r1, #17
  41b89a:	4620      	mov	r0, r4
  41b89c:	4b36      	ldr	r3, [pc, #216]	; (41b978 <keyboard_init+0x1e4>)
  41b89e:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
  41b8a0:	4b33      	ldr	r3, [pc, #204]	; (41b970 <keyboard_init+0x1dc>)
  41b8a2:	681c      	ldr	r4, [r3, #0]
  41b8a4:	346c      	adds	r4, #108	; 0x6c
  41b8a6:	2000      	movs	r0, #0
  41b8a8:	4b34      	ldr	r3, [pc, #208]	; (41b97c <keyboard_init+0x1e8>)
  41b8aa:	4798      	blx	r3
  41b8ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41b8b0:	3050      	adds	r0, #80	; 0x50
  41b8b2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b8b6:	da4d      	bge.n	41b954 <keyboard_init+0x1c0>
  41b8b8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41b8ba:	2114      	movs	r1, #20
  41b8bc:	4620      	mov	r0, r4
  41b8be:	4b2e      	ldr	r3, [pc, #184]	; (41b978 <keyboard_init+0x1e4>)
  41b8c0:	4798      	blx	r3
  41b8c2:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41b8c4:	2000      	movs	r0, #0
  41b8c6:	4b2d      	ldr	r3, [pc, #180]	; (41b97c <keyboard_init+0x1e8>)
  41b8c8:	4798      	blx	r3
  41b8ca:	3014      	adds	r0, #20
  41b8cc:	0080      	lsls	r0, r0, #2
  41b8ce:	4b2e      	ldr	r3, [pc, #184]	; (41b988 <keyboard_init+0x1f4>)
  41b8d0:	fb83 2300 	smull	r2, r3, r3, r0
  41b8d4:	17c2      	asrs	r2, r0, #31
  41b8d6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b8da:	b212      	sxth	r2, r2
  41b8dc:	e772      	b.n	41b7c4 <keyboard_init+0x30>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
  41b8de:	f04f 0200 	mov.w	r2, #0
  41b8e2:	e78f      	b.n	41b804 <keyboard_init+0x70>
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41b8e4:	2000      	movs	r0, #0
  41b8e6:	4b25      	ldr	r3, [pc, #148]	; (41b97c <keyboard_init+0x1e8>)
  41b8e8:	4798      	blx	r3
  41b8ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b8ee:	3050      	adds	r0, #80	; 0x50
  41b8f0:	4b25      	ldr	r3, [pc, #148]	; (41b988 <keyboard_init+0x1f4>)
  41b8f2:	fb83 2300 	smull	r2, r3, r3, r0
  41b8f6:	17c2      	asrs	r2, r0, #31
  41b8f8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b8fc:	b212      	sxth	r2, r2
  41b8fe:	e798      	b.n	41b832 <keyboard_init+0x9e>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41b900:	2000      	movs	r0, #0
  41b902:	4b1e      	ldr	r3, [pc, #120]	; (41b97c <keyboard_init+0x1e8>)
  41b904:	4798      	blx	r3
  41b906:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b90a:	3050      	adds	r0, #80	; 0x50
  41b90c:	4b1e      	ldr	r3, [pc, #120]	; (41b988 <keyboard_init+0x1f4>)
  41b90e:	fb83 2300 	smull	r2, r3, r3, r0
  41b912:	17c2      	asrs	r2, r0, #31
  41b914:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b918:	b212      	sxth	r2, r2
  41b91a:	e79b      	b.n	41b854 <keyboard_init+0xc0>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41b91c:	2000      	movs	r0, #0
  41b91e:	4b17      	ldr	r3, [pc, #92]	; (41b97c <keyboard_init+0x1e8>)
  41b920:	4798      	blx	r3
  41b922:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b926:	3050      	adds	r0, #80	; 0x50
  41b928:	4b17      	ldr	r3, [pc, #92]	; (41b988 <keyboard_init+0x1f4>)
  41b92a:	fb83 2300 	smull	r2, r3, r3, r0
  41b92e:	17c2      	asrs	r2, r0, #31
  41b930:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b934:	b212      	sxth	r2, r2
  41b936:	e79e      	b.n	41b876 <keyboard_init+0xe2>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41b938:	2000      	movs	r0, #0
  41b93a:	4b10      	ldr	r3, [pc, #64]	; (41b97c <keyboard_init+0x1e8>)
  41b93c:	4798      	blx	r3
  41b93e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b942:	3050      	adds	r0, #80	; 0x50
  41b944:	4b10      	ldr	r3, [pc, #64]	; (41b988 <keyboard_init+0x1f4>)
  41b946:	fb83 2300 	smull	r2, r3, r3, r0
  41b94a:	17c2      	asrs	r2, r0, #31
  41b94c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b950:	b212      	sxth	r2, r2
  41b952:	e7a1      	b.n	41b898 <keyboard_init+0x104>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
  41b954:	2000      	movs	r0, #0
  41b956:	4b09      	ldr	r3, [pc, #36]	; (41b97c <keyboard_init+0x1e8>)
  41b958:	4798      	blx	r3
  41b95a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41b95e:	3050      	adds	r0, #80	; 0x50
  41b960:	4b09      	ldr	r3, [pc, #36]	; (41b988 <keyboard_init+0x1f4>)
  41b962:	fb83 2300 	smull	r2, r3, r3, r0
  41b966:	17c2      	asrs	r2, r0, #31
  41b968:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b96c:	b212      	sxth	r2, r2
  41b96e:	e7a4      	b.n	41b8ba <keyboard_init+0x126>
  41b970:	2041480c 	.word	0x2041480c
  41b974:	004198fd 	.word	0x004198fd
  41b978:	0040a121 	.word	0x0040a121
  41b97c:	00415c7d 	.word	0x00415c7d
  41b980:	20414810 	.word	0x20414810
  41b984:	0040a2b1 	.word	0x0040a2b1
  41b988:	66666667 	.word	0x66666667

0041b98c <msgbox_init>:
{
  41b98c:	b510      	push	{r4, lr}
    style_init_reset(&styles->mbox_bg);
  41b98e:	4c20      	ldr	r4, [pc, #128]	; (41ba10 <msgbox_init+0x84>)
  41b990:	6820      	ldr	r0, [r4, #0]
  41b992:	3080      	adds	r0, #128	; 0x80
  41b994:	4b1f      	ldr	r3, [pc, #124]	; (41ba14 <msgbox_init+0x88>)
  41b996:	4798      	blx	r3
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
  41b998:	6824      	ldr	r4, [r4, #0]
  41b99a:	3480      	adds	r4, #128	; 0x80
  41b99c:	2000      	movs	r0, #0
  41b99e:	4b1e      	ldr	r3, [pc, #120]	; (41ba18 <msgbox_init+0x8c>)
  41b9a0:	4798      	blx	r3
  41b9a2:	2332      	movs	r3, #50	; 0x32
  41b9a4:	fb03 f000 	mul.w	r0, r3, r0
  41b9a8:	3050      	adds	r0, #80	; 0x50
  41b9aa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b9ae:	da1d      	bge.n	41b9ec <msgbox_init+0x60>
  41b9b0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  41b9b2:	2150      	movs	r1, #80	; 0x50
  41b9b4:	4620      	mov	r0, r4
  41b9b6:	4b19      	ldr	r3, [pc, #100]	; (41ba1c <msgbox_init+0x90>)
  41b9b8:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
  41b9ba:	4b15      	ldr	r3, [pc, #84]	; (41ba10 <msgbox_init+0x84>)
  41b9bc:	6818      	ldr	r0, [r3, #0]
  41b9be:	3080      	adds	r0, #128	; 0x80
  41b9c0:	4b17      	ldr	r3, [pc, #92]	; (41ba20 <msgbox_init+0x94>)
  41b9c2:	6a1b      	ldr	r3, [r3, #32]
  41b9c4:	f013 0f02 	tst.w	r3, #2
  41b9c8:	d11f      	bne.n	41ba0a <msgbox_init+0x7e>
  41b9ca:	f04f 0200 	mov.w	r2, #0
  41b9ce:	2304      	movs	r3, #4
  41b9d0:	f363 0202 	bfi	r2, r3, #0, #3
  41b9d4:	2313      	movs	r3, #19
  41b9d6:	f363 02c7 	bfi	r2, r3, #3, #5
  41b9da:	f363 220c 	bfi	r2, r3, #8, #5
  41b9de:	2306      	movs	r3, #6
  41b9e0:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  41b9e4:	2159      	movs	r1, #89	; 0x59
  41b9e6:	4b0f      	ldr	r3, [pc, #60]	; (41ba24 <msgbox_init+0x98>)
  41b9e8:	4798      	blx	r3
  41b9ea:	bd10      	pop	{r4, pc}
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
  41b9ec:	2000      	movs	r0, #0
  41b9ee:	4b0a      	ldr	r3, [pc, #40]	; (41ba18 <msgbox_init+0x8c>)
  41b9f0:	4798      	blx	r3
  41b9f2:	2232      	movs	r2, #50	; 0x32
  41b9f4:	fb02 f000 	mul.w	r0, r2, r0
  41b9f8:	3050      	adds	r0, #80	; 0x50
  41b9fa:	4b0b      	ldr	r3, [pc, #44]	; (41ba28 <msgbox_init+0x9c>)
  41b9fc:	fb83 2300 	smull	r2, r3, r3, r0
  41ba00:	17c2      	asrs	r2, r0, #31
  41ba02:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ba06:	b212      	sxth	r2, r2
  41ba08:	e7d3      	b.n	41b9b2 <msgbox_init+0x26>
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
  41ba0a:	4b08      	ldr	r3, [pc, #32]	; (41ba2c <msgbox_init+0xa0>)
  41ba0c:	891a      	ldrh	r2, [r3, #8]
  41ba0e:	e7e9      	b.n	41b9e4 <msgbox_init+0x58>
  41ba10:	2041480c 	.word	0x2041480c
  41ba14:	004198fd 	.word	0x004198fd
  41ba18:	00415c7d 	.word	0x00415c7d
  41ba1c:	0040a121 	.word	0x0040a121
  41ba20:	20414810 	.word	0x20414810
  41ba24:	0040a2b1 	.word	0x0040a2b1
  41ba28:	66666667 	.word	0x66666667
  41ba2c:	00431c94 	.word	0x00431c94

0041ba30 <page_init>:
{
  41ba30:	b510      	push	{r4, lr}
    style_init_reset(&styles->sb);
  41ba32:	4c5a      	ldr	r4, [pc, #360]	; (41bb9c <page_init+0x16c>)
  41ba34:	6820      	ldr	r0, [r4, #0]
  41ba36:	3084      	adds	r0, #132	; 0x84
  41ba38:	4b59      	ldr	r3, [pc, #356]	; (41bba0 <page_init+0x170>)
  41ba3a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sb, LV_STATE_DEFAULT, LV_OPA_COVER);
  41ba3c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41ba3e:	22ff      	movs	r2, #255	; 0xff
  41ba40:	212c      	movs	r1, #44	; 0x2c
  41ba42:	3084      	adds	r0, #132	; 0x84
  41ba44:	4b57      	ldr	r3, [pc, #348]	; (41bba4 <page_init+0x174>)
  41ba46:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
  41ba48:	6820      	ldr	r0, [r4, #0]
  41ba4a:	3084      	adds	r0, #132	; 0x84
  41ba4c:	4b56      	ldr	r3, [pc, #344]	; (41bba8 <page_init+0x178>)
  41ba4e:	6a1b      	ldr	r3, [r3, #32]
  41ba50:	f013 0f02 	tst.w	r3, #2
  41ba54:	d068      	beq.n	41bb28 <page_init+0xf8>
  41ba56:	f04f 0200 	mov.w	r2, #0
  41ba5a:	2306      	movs	r3, #6
  41ba5c:	f363 0202 	bfi	r2, r3, #0, #3
  41ba60:	2319      	movs	r3, #25
  41ba62:	f363 02c7 	bfi	r2, r3, #3, #5
  41ba66:	231a      	movs	r3, #26
  41ba68:	f363 220c 	bfi	r2, r3, #8, #5
  41ba6c:	2303      	movs	r3, #3
  41ba6e:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41ba72:	2129      	movs	r1, #41	; 0x29
  41ba74:	4b4d      	ldr	r3, [pc, #308]	; (41bbac <page_init+0x17c>)
  41ba76:	4798      	blx	r3
    lv_style_set_radius(&styles->sb, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41ba78:	4c48      	ldr	r4, [pc, #288]	; (41bb9c <page_init+0x16c>)
  41ba7a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41ba7c:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41ba80:	2101      	movs	r1, #1
  41ba82:	3084      	adds	r0, #132	; 0x84
  41ba84:	4b4a      	ldr	r3, [pc, #296]	; (41bbb0 <page_init+0x180>)
  41ba86:	4798      	blx	r3
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
  41ba88:	6824      	ldr	r4, [r4, #0]
  41ba8a:	3484      	adds	r4, #132	; 0x84
  41ba8c:	2000      	movs	r0, #0
  41ba8e:	4b49      	ldr	r3, [pc, #292]	; (41bbb4 <page_init+0x184>)
  41ba90:	4798      	blx	r3
  41ba92:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41ba96:	3050      	adds	r0, #80	; 0x50
  41ba98:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ba9c:	da54      	bge.n	41bb48 <page_init+0x118>
  41ba9e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41baa0:	2103      	movs	r1, #3
  41baa2:	4620      	mov	r0, r4
  41baa4:	4b42      	ldr	r3, [pc, #264]	; (41bbb0 <page_init+0x180>)
  41baa6:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41baa8:	4b3c      	ldr	r3, [pc, #240]	; (41bb9c <page_init+0x16c>)
  41baaa:	681c      	ldr	r4, [r3, #0]
  41baac:	3484      	adds	r4, #132	; 0x84
  41baae:	2000      	movs	r0, #0
  41bab0:	4b40      	ldr	r3, [pc, #256]	; (41bbb4 <page_init+0x184>)
  41bab2:	4798      	blx	r3
  41bab4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41bab8:	3050      	adds	r0, #80	; 0x50
  41baba:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41babe:	da51      	bge.n	41bb64 <page_init+0x134>
  41bac0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41bac2:	2113      	movs	r1, #19
  41bac4:	4620      	mov	r0, r4
  41bac6:	4b3a      	ldr	r3, [pc, #232]	; (41bbb0 <page_init+0x180>)
  41bac8:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41baca:	4b34      	ldr	r3, [pc, #208]	; (41bb9c <page_init+0x16c>)
  41bacc:	681c      	ldr	r4, [r3, #0]
  41bace:	3484      	adds	r4, #132	; 0x84
  41bad0:	2000      	movs	r0, #0
  41bad2:	4b38      	ldr	r3, [pc, #224]	; (41bbb4 <page_init+0x184>)
  41bad4:	4798      	blx	r3
  41bad6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41bada:	3050      	adds	r0, #80	; 0x50
  41badc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bae0:	da4e      	bge.n	41bb80 <page_init+0x150>
  41bae2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41bae4:	2111      	movs	r1, #17
  41bae6:	4620      	mov	r0, r4
  41bae8:	4b31      	ldr	r3, [pc, #196]	; (41bbb0 <page_init+0x180>)
  41baea:	4798      	blx	r3
    style_init_reset(&styles->edge_flash);
  41baec:	4c2b      	ldr	r4, [pc, #172]	; (41bb9c <page_init+0x16c>)
  41baee:	6820      	ldr	r0, [r4, #0]
  41baf0:	3088      	adds	r0, #136	; 0x88
  41baf2:	4b2b      	ldr	r3, [pc, #172]	; (41bba0 <page_init+0x170>)
  41baf4:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->edge_flash, LV_STATE_DEFAULT, LV_OPA_COVER);
  41baf6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41baf8:	22ff      	movs	r2, #255	; 0xff
  41bafa:	212c      	movs	r1, #44	; 0x2c
  41bafc:	3088      	adds	r0, #136	; 0x88
  41bafe:	4b29      	ldr	r3, [pc, #164]	; (41bba4 <page_init+0x174>)
  41bb00:	4798      	blx	r3
    lv_style_set_bg_color(&styles->edge_flash, LV_STATE_DEFAULT,  lv_color_hex3(0x888));
  41bb02:	6820      	ldr	r0, [r4, #0]
  41bb04:	f04f 0200 	mov.w	r2, #0
  41bb08:	2304      	movs	r3, #4
  41bb0a:	f363 0202 	bfi	r2, r3, #0, #3
  41bb0e:	2311      	movs	r3, #17
  41bb10:	f363 02c7 	bfi	r2, r3, #3, #5
  41bb14:	f363 220c 	bfi	r2, r3, #8, #5
  41bb18:	2302      	movs	r3, #2
  41bb1a:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41bb1e:	2129      	movs	r1, #41	; 0x29
  41bb20:	3088      	adds	r0, #136	; 0x88
  41bb22:	4b22      	ldr	r3, [pc, #136]	; (41bbac <page_init+0x17c>)
  41bb24:	4798      	blx	r3
  41bb26:	bd10      	pop	{r4, pc}
  41bb28:	f04f 0200 	mov.w	r2, #0
  41bb2c:	2303      	movs	r3, #3
  41bb2e:	f363 0202 	bfi	r2, r3, #0, #3
  41bb32:	230e      	movs	r3, #14
  41bb34:	f363 02c7 	bfi	r2, r3, #3, #5
  41bb38:	2310      	movs	r3, #16
  41bb3a:	f363 220c 	bfi	r2, r3, #8, #5
  41bb3e:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41bb42:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41bb46:	e794      	b.n	41ba72 <page_init+0x42>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
  41bb48:	2000      	movs	r0, #0
  41bb4a:	4b1a      	ldr	r3, [pc, #104]	; (41bbb4 <page_init+0x184>)
  41bb4c:	4798      	blx	r3
  41bb4e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41bb52:	3050      	adds	r0, #80	; 0x50
  41bb54:	4b18      	ldr	r3, [pc, #96]	; (41bbb8 <page_init+0x188>)
  41bb56:	fb83 2300 	smull	r2, r3, r3, r0
  41bb5a:	17c2      	asrs	r2, r0, #31
  41bb5c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bb60:	b212      	sxth	r2, r2
  41bb62:	e79d      	b.n	41baa0 <page_init+0x70>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41bb64:	2000      	movs	r0, #0
  41bb66:	4b13      	ldr	r3, [pc, #76]	; (41bbb4 <page_init+0x184>)
  41bb68:	4798      	blx	r3
  41bb6a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41bb6e:	3050      	adds	r0, #80	; 0x50
  41bb70:	4b11      	ldr	r3, [pc, #68]	; (41bbb8 <page_init+0x188>)
  41bb72:	fb83 2300 	smull	r2, r3, r3, r0
  41bb76:	17c2      	asrs	r2, r0, #31
  41bb78:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bb7c:	b212      	sxth	r2, r2
  41bb7e:	e7a0      	b.n	41bac2 <page_init+0x92>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41bb80:	2000      	movs	r0, #0
  41bb82:	4b0c      	ldr	r3, [pc, #48]	; (41bbb4 <page_init+0x184>)
  41bb84:	4798      	blx	r3
  41bb86:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41bb8a:	3050      	adds	r0, #80	; 0x50
  41bb8c:	4b0a      	ldr	r3, [pc, #40]	; (41bbb8 <page_init+0x188>)
  41bb8e:	fb83 2300 	smull	r2, r3, r3, r0
  41bb92:	17c2      	asrs	r2, r0, #31
  41bb94:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bb98:	b212      	sxth	r2, r2
  41bb9a:	e7a3      	b.n	41bae4 <page_init+0xb4>
  41bb9c:	2041480c 	.word	0x2041480c
  41bba0:	004198fd 	.word	0x004198fd
  41bba4:	0040a441 	.word	0x0040a441
  41bba8:	20414810 	.word	0x20414810
  41bbac:	0040a2b1 	.word	0x0040a2b1
  41bbb0:	0040a121 	.word	0x0040a121
  41bbb4:	00415c7d 	.word	0x00415c7d
  41bbb8:	66666667 	.word	0x66666667

0041bbbc <textarea_init>:
{
  41bbbc:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->ta_cursor);
  41bbbe:	4c4a      	ldr	r4, [pc, #296]	; (41bce8 <textarea_init+0x12c>)
  41bbc0:	6820      	ldr	r0, [r4, #0]
  41bbc2:	30b8      	adds	r0, #184	; 0xb8
  41bbc4:	4b49      	ldr	r3, [pc, #292]	; (41bcec <textarea_init+0x130>)
  41bbc6:	4798      	blx	r3
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41bbc8:	6820      	ldr	r0, [r4, #0]
  41bbca:	30b8      	adds	r0, #184	; 0xb8
  41bbcc:	4b48      	ldr	r3, [pc, #288]	; (41bcf0 <textarea_init+0x134>)
  41bbce:	6a1b      	ldr	r3, [r3, #32]
  41bbd0:	f013 0f02 	tst.w	r3, #2
  41bbd4:	d052      	beq.n	41bc7c <textarea_init+0xc0>
  41bbd6:	f04f 0200 	mov.w	r2, #0
  41bbda:	2302      	movs	r3, #2
  41bbdc:	f363 0202 	bfi	r2, r3, #0, #3
  41bbe0:	2306      	movs	r3, #6
  41bbe2:	f363 02c7 	bfi	r2, r3, #3, #5
  41bbe6:	2309      	movs	r3, #9
  41bbe8:	f363 220c 	bfi	r2, r3, #8, #5
  41bbec:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41bbf0:	2139      	movs	r1, #57	; 0x39
  41bbf2:	4b40      	ldr	r3, [pc, #256]	; (41bcf4 <textarea_init+0x138>)
  41bbf4:	4798      	blx	r3
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
  41bbf6:	4b3c      	ldr	r3, [pc, #240]	; (41bce8 <textarea_init+0x12c>)
  41bbf8:	681c      	ldr	r4, [r3, #0]
  41bbfa:	34b8      	adds	r4, #184	; 0xb8
  41bbfc:	2000      	movs	r0, #0
  41bbfe:	4b3e      	ldr	r3, [pc, #248]	; (41bcf8 <textarea_init+0x13c>)
  41bc00:	4798      	blx	r3
  41bc02:	3028      	adds	r0, #40	; 0x28
  41bc04:	0040      	lsls	r0, r0, #1
  41bc06:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bc0a:	da46      	bge.n	41bc9a <textarea_init+0xde>
  41bc0c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41bc0e:	2130      	movs	r1, #48	; 0x30
  41bc10:	4620      	mov	r0, r4
  41bc12:	4b3a      	ldr	r3, [pc, #232]	; (41bcfc <textarea_init+0x140>)
  41bc14:	4798      	blx	r3
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
  41bc16:	4b34      	ldr	r3, [pc, #208]	; (41bce8 <textarea_init+0x12c>)
  41bc18:	681c      	ldr	r4, [r3, #0]
  41bc1a:	34b8      	adds	r4, #184	; 0xb8
  41bc1c:	2000      	movs	r0, #0
  41bc1e:	4b36      	ldr	r3, [pc, #216]	; (41bcf8 <textarea_init+0x13c>)
  41bc20:	4798      	blx	r3
  41bc22:	3050      	adds	r0, #80	; 0x50
  41bc24:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bc28:	da44      	bge.n	41bcb4 <textarea_init+0xf8>
  41bc2a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41bc2c:	2112      	movs	r1, #18
  41bc2e:	4620      	mov	r0, r4
  41bc30:	4d32      	ldr	r5, [pc, #200]	; (41bcfc <textarea_init+0x140>)
  41bc32:	47a8      	blx	r5
    lv_style_set_border_side(&styles->ta_cursor, LV_STATE_DEFAULT, LV_BORDER_SIDE_LEFT);
  41bc34:	4c2c      	ldr	r4, [pc, #176]	; (41bce8 <textarea_init+0x12c>)
  41bc36:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41bc38:	2204      	movs	r2, #4
  41bc3a:	2131      	movs	r1, #49	; 0x31
  41bc3c:	30b8      	adds	r0, #184	; 0xb8
  41bc3e:	47a8      	blx	r5
    style_init_reset(&styles->ta_placeholder);
  41bc40:	6820      	ldr	r0, [r4, #0]
  41bc42:	30bc      	adds	r0, #188	; 0xbc
  41bc44:	4b29      	ldr	r3, [pc, #164]	; (41bcec <textarea_init+0x130>)
  41bc46:	4798      	blx	r3
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
  41bc48:	6820      	ldr	r0, [r4, #0]
  41bc4a:	30bc      	adds	r0, #188	; 0xbc
                            IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
  41bc4c:	4b28      	ldr	r3, [pc, #160]	; (41bcf0 <textarea_init+0x134>)
  41bc4e:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
  41bc50:	f013 0f02 	tst.w	r3, #2
  41bc54:	d13a      	bne.n	41bccc <textarea_init+0x110>
  41bc56:	f04f 0200 	mov.w	r2, #0
  41bc5a:	2305      	movs	r3, #5
  41bc5c:	f363 0202 	bfi	r2, r3, #0, #3
  41bc60:	2314      	movs	r3, #20
  41bc62:	f363 02c7 	bfi	r2, r3, #3, #5
  41bc66:	2317      	movs	r3, #23
  41bc68:	f363 220c 	bfi	r2, r3, #8, #5
  41bc6c:	2303      	movs	r3, #3
  41bc6e:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41bc72:	f248 0189 	movw	r1, #32905	; 0x8089
  41bc76:	4b1f      	ldr	r3, [pc, #124]	; (41bcf4 <textarea_init+0x138>)
  41bc78:	4798      	blx	r3
  41bc7a:	bd38      	pop	{r3, r4, r5, pc}
  41bc7c:	f04f 0200 	mov.w	r2, #0
  41bc80:	2305      	movs	r3, #5
  41bc82:	f363 0202 	bfi	r2, r3, #0, #3
  41bc86:	2314      	movs	r3, #20
  41bc88:	f363 02c7 	bfi	r2, r3, #3, #5
  41bc8c:	2315      	movs	r3, #21
  41bc8e:	f363 220c 	bfi	r2, r3, #8, #5
  41bc92:	2302      	movs	r3, #2
  41bc94:	f363 324f 	bfi	r2, r3, #13, #3
  41bc98:	e7aa      	b.n	41bbf0 <textarea_init+0x34>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
  41bc9a:	2000      	movs	r0, #0
  41bc9c:	4b16      	ldr	r3, [pc, #88]	; (41bcf8 <textarea_init+0x13c>)
  41bc9e:	4798      	blx	r3
  41bca0:	3028      	adds	r0, #40	; 0x28
  41bca2:	0040      	lsls	r0, r0, #1
  41bca4:	4b16      	ldr	r3, [pc, #88]	; (41bd00 <textarea_init+0x144>)
  41bca6:	fb83 2300 	smull	r2, r3, r3, r0
  41bcaa:	17c2      	asrs	r2, r0, #31
  41bcac:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bcb0:	b212      	sxth	r2, r2
  41bcb2:	e7ac      	b.n	41bc0e <textarea_init+0x52>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
  41bcb4:	2000      	movs	r0, #0
  41bcb6:	4b10      	ldr	r3, [pc, #64]	; (41bcf8 <textarea_init+0x13c>)
  41bcb8:	4798      	blx	r3
  41bcba:	3050      	adds	r0, #80	; 0x50
  41bcbc:	4b10      	ldr	r3, [pc, #64]	; (41bd00 <textarea_init+0x144>)
  41bcbe:	fb83 2300 	smull	r2, r3, r3, r0
  41bcc2:	17c2      	asrs	r2, r0, #31
  41bcc4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bcc8:	b212      	sxth	r2, r2
  41bcca:	e7af      	b.n	41bc2c <textarea_init+0x70>
  41bccc:	f04f 0200 	mov.w	r2, #0
  41bcd0:	2305      	movs	r3, #5
  41bcd2:	f363 0202 	bfi	r2, r3, #0, #3
  41bcd6:	2315      	movs	r3, #21
  41bcd8:	f363 02c7 	bfi	r2, r3, #3, #5
  41bcdc:	f363 220c 	bfi	r2, r3, #8, #5
  41bce0:	2302      	movs	r3, #2
  41bce2:	f363 324f 	bfi	r2, r3, #13, #3
  41bce6:	e7c4      	b.n	41bc72 <textarea_init+0xb6>
  41bce8:	2041480c 	.word	0x2041480c
  41bcec:	004198fd 	.word	0x004198fd
  41bcf0:	20414810 	.word	0x20414810
  41bcf4:	0040a2b1 	.word	0x0040a2b1
  41bcf8:	00415c7d 	.word	0x00415c7d
  41bcfc:	0040a121 	.word	0x0040a121
  41bd00:	66666667 	.word	0x66666667

0041bd04 <spinbox_init>:
{
  41bd04:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->spinbox_cursor);
  41bd06:	4c2d      	ldr	r4, [pc, #180]	; (41bdbc <spinbox_init+0xb8>)
  41bd08:	6820      	ldr	r0, [r4, #0]
  41bd0a:	309c      	adds	r0, #156	; 0x9c
  41bd0c:	4b2c      	ldr	r3, [pc, #176]	; (41bdc0 <spinbox_init+0xbc>)
  41bd0e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_OPA_COVER);
  41bd10:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41bd12:	22ff      	movs	r2, #255	; 0xff
  41bd14:	212c      	movs	r1, #44	; 0x2c
  41bd16:	309c      	adds	r0, #156	; 0x9c
  41bd18:	4b2a      	ldr	r3, [pc, #168]	; (41bdc4 <spinbox_init+0xc0>)
  41bd1a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, theme.color_primary);
  41bd1c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41bd1e:	4b2a      	ldr	r3, [pc, #168]	; (41bdc8 <spinbox_init+0xc4>)
  41bd20:	899a      	ldrh	r2, [r3, #12]
  41bd22:	2129      	movs	r1, #41	; 0x29
  41bd24:	309c      	adds	r0, #156	; 0x9c
  41bd26:	4d29      	ldr	r5, [pc, #164]	; (41bdcc <spinbox_init+0xc8>)
  41bd28:	47a8      	blx	r5
    lv_style_set_text_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  41bd2a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41bd2c:	4b28      	ldr	r3, [pc, #160]	; (41bdd0 <spinbox_init+0xcc>)
  41bd2e:	881a      	ldrh	r2, [r3, #0]
  41bd30:	f248 0189 	movw	r1, #32905	; 0x8089
  41bd34:	309c      	adds	r0, #156	; 0x9c
  41bd36:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41bd38:	6824      	ldr	r4, [r4, #0]
  41bd3a:	349c      	adds	r4, #156	; 0x9c
  41bd3c:	2000      	movs	r0, #0
  41bd3e:	4b25      	ldr	r3, [pc, #148]	; (41bdd4 <spinbox_init+0xd0>)
  41bd40:	4798      	blx	r3
  41bd42:	2364      	movs	r3, #100	; 0x64
  41bd44:	fb03 f000 	mul.w	r0, r3, r0
  41bd48:	3050      	adds	r0, #80	; 0x50
  41bd4a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bd4e:	da17      	bge.n	41bd80 <spinbox_init+0x7c>
  41bd50:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41bd52:	2110      	movs	r1, #16
  41bd54:	4620      	mov	r0, r4
  41bd56:	4b20      	ldr	r3, [pc, #128]	; (41bdd8 <spinbox_init+0xd4>)
  41bd58:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41bd5a:	4b18      	ldr	r3, [pc, #96]	; (41bdbc <spinbox_init+0xb8>)
  41bd5c:	681c      	ldr	r4, [r3, #0]
  41bd5e:	349c      	adds	r4, #156	; 0x9c
  41bd60:	2000      	movs	r0, #0
  41bd62:	4b1c      	ldr	r3, [pc, #112]	; (41bdd4 <spinbox_init+0xd0>)
  41bd64:	4798      	blx	r3
  41bd66:	2364      	movs	r3, #100	; 0x64
  41bd68:	fb03 f000 	mul.w	r0, r3, r0
  41bd6c:	3050      	adds	r0, #80	; 0x50
  41bd6e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bd72:	da14      	bge.n	41bd9e <spinbox_init+0x9a>
  41bd74:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41bd76:	2111      	movs	r1, #17
  41bd78:	4620      	mov	r0, r4
  41bd7a:	4b17      	ldr	r3, [pc, #92]	; (41bdd8 <spinbox_init+0xd4>)
  41bd7c:	4798      	blx	r3
  41bd7e:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41bd80:	2000      	movs	r0, #0
  41bd82:	4b14      	ldr	r3, [pc, #80]	; (41bdd4 <spinbox_init+0xd0>)
  41bd84:	4798      	blx	r3
  41bd86:	2264      	movs	r2, #100	; 0x64
  41bd88:	fb02 f000 	mul.w	r0, r2, r0
  41bd8c:	3050      	adds	r0, #80	; 0x50
  41bd8e:	4b13      	ldr	r3, [pc, #76]	; (41bddc <spinbox_init+0xd8>)
  41bd90:	fb83 2300 	smull	r2, r3, r3, r0
  41bd94:	17c2      	asrs	r2, r0, #31
  41bd96:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bd9a:	b212      	sxth	r2, r2
  41bd9c:	e7d9      	b.n	41bd52 <spinbox_init+0x4e>
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41bd9e:	2000      	movs	r0, #0
  41bda0:	4b0c      	ldr	r3, [pc, #48]	; (41bdd4 <spinbox_init+0xd0>)
  41bda2:	4798      	blx	r3
  41bda4:	2264      	movs	r2, #100	; 0x64
  41bda6:	fb02 f000 	mul.w	r0, r2, r0
  41bdaa:	3050      	adds	r0, #80	; 0x50
  41bdac:	4b0b      	ldr	r3, [pc, #44]	; (41bddc <spinbox_init+0xd8>)
  41bdae:	fb83 2300 	smull	r2, r3, r3, r0
  41bdb2:	17c2      	asrs	r2, r0, #31
  41bdb4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bdb8:	b212      	sxth	r2, r2
  41bdba:	e7dc      	b.n	41bd76 <spinbox_init+0x72>
  41bdbc:	2041480c 	.word	0x2041480c
  41bdc0:	004198fd 	.word	0x004198fd
  41bdc4:	0040a441 	.word	0x0040a441
  41bdc8:	20414810 	.word	0x20414810
  41bdcc:	0040a2b1 	.word	0x0040a2b1
  41bdd0:	00431c94 	.word	0x00431c94
  41bdd4:	00415c7d 	.word	0x00415c7d
  41bdd8:	0040a121 	.word	0x0040a121
  41bddc:	66666667 	.word	0x66666667

0041bde0 <list_init>:
{
  41bde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->list_bg);
  41bde2:	4cbf      	ldr	r4, [pc, #764]	; (41c0e0 <list_init+0x300>)
  41bde4:	6820      	ldr	r0, [r4, #0]
  41bde6:	3078      	adds	r0, #120	; 0x78
  41bde8:	4ebe      	ldr	r6, [pc, #760]	; (41c0e4 <list_init+0x304>)
  41bdea:	47b0      	blx	r6
    lv_style_set_clip_corner(&styles->list_bg, LV_STATE_DEFAULT, true);
  41bdec:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41bdee:	2201      	movs	r2, #1
  41bdf0:	2102      	movs	r1, #2
  41bdf2:	3078      	adds	r0, #120	; 0x78
  41bdf4:	4dbc      	ldr	r5, [pc, #752]	; (41c0e8 <list_init+0x308>)
  41bdf6:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41bdf8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41bdfa:	2200      	movs	r2, #0
  41bdfc:	2112      	movs	r1, #18
  41bdfe:	3078      	adds	r0, #120	; 0x78
  41be00:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41be02:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41be04:	2200      	movs	r2, #0
  41be06:	2113      	movs	r1, #19
  41be08:	3078      	adds	r0, #120	; 0x78
  41be0a:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41be0c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41be0e:	2200      	movs	r2, #0
  41be10:	2110      	movs	r1, #16
  41be12:	3078      	adds	r0, #120	; 0x78
  41be14:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41be16:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41be18:	2200      	movs	r2, #0
  41be1a:	2111      	movs	r1, #17
  41be1c:	3078      	adds	r0, #120	; 0x78
  41be1e:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41be20:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41be22:	2200      	movs	r2, #0
  41be24:	2114      	movs	r1, #20
  41be26:	3078      	adds	r0, #120	; 0x78
  41be28:	47a8      	blx	r5
    style_init_reset(&styles->list_btn);
  41be2a:	6820      	ldr	r0, [r4, #0]
  41be2c:	307c      	adds	r0, #124	; 0x7c
  41be2e:	47b0      	blx	r6
    lv_style_set_bg_opa(&styles->list_btn, LV_STATE_DEFAULT, LV_OPA_COVER);
  41be30:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41be32:	22ff      	movs	r2, #255	; 0xff
  41be34:	212c      	movs	r1, #44	; 0x2c
  41be36:	307c      	adds	r0, #124	; 0x7c
  41be38:	4bac      	ldr	r3, [pc, #688]	; (41c0ec <list_init+0x30c>)
  41be3a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
  41be3c:	6820      	ldr	r0, [r4, #0]
  41be3e:	307c      	adds	r0, #124	; 0x7c
  41be40:	4bab      	ldr	r3, [pc, #684]	; (41c0f0 <list_init+0x310>)
  41be42:	6a1b      	ldr	r3, [r3, #32]
  41be44:	f013 0f02 	tst.w	r3, #2
  41be48:	f000 8223 	beq.w	41c292 <list_init+0x4b2>
  41be4c:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41be50:	2129      	movs	r1, #41	; 0x29
  41be52:	4ba8      	ldr	r3, [pc, #672]	; (41c0f4 <list_init+0x314>)
  41be54:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
  41be56:	4ba2      	ldr	r3, [pc, #648]	; (41c0e0 <list_init+0x300>)
  41be58:	6818      	ldr	r0, [r3, #0]
  41be5a:	307c      	adds	r0, #124	; 0x7c
  41be5c:	4ba4      	ldr	r3, [pc, #656]	; (41c0f0 <list_init+0x310>)
  41be5e:	6a1b      	ldr	r3, [r3, #32]
  41be60:	f013 0f02 	tst.w	r3, #2
  41be64:	f000 8223 	beq.w	41c2ae <list_init+0x4ce>
  41be68:	f04f 0207 	mov.w	r2, #7
  41be6c:	231d      	movs	r3, #29
  41be6e:	f363 02c7 	bfi	r2, r3, #3, #5
  41be72:	f363 220c 	bfi	r2, r3, #8, #5
  41be76:	2303      	movs	r3, #3
  41be78:	f363 324f 	bfi	r2, r3, #13, #3
  41be7c:	f241 0129 	movw	r1, #4137	; 0x1029
  41be80:	4b9c      	ldr	r3, [pc, #624]	; (41c0f4 <list_init+0x314>)
  41be82:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
  41be84:	4b96      	ldr	r3, [pc, #600]	; (41c0e0 <list_init+0x300>)
  41be86:	6818      	ldr	r0, [r3, #0]
  41be88:	307c      	adds	r0, #124	; 0x7c
  41be8a:	4b99      	ldr	r3, [pc, #612]	; (41c0f0 <list_init+0x310>)
  41be8c:	6a1b      	ldr	r3, [r3, #32]
  41be8e:	f013 0f02 	tst.w	r3, #2
  41be92:	f000 821b 	beq.w	41c2cc <list_init+0x4ec>
  41be96:	f04f 32ff 	mov.w	r2, #4294967295
  41be9a:	f242 0129 	movw	r1, #8233	; 0x2029
  41be9e:	4d95      	ldr	r5, [pc, #596]	; (41c0f4 <list_init+0x314>)
  41bea0:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_CHK);
  41bea2:	4c8f      	ldr	r4, [pc, #572]	; (41c0e0 <list_init+0x300>)
  41bea4:	6820      	ldr	r0, [r4, #0]
  41bea6:	4f92      	ldr	r7, [pc, #584]	; (41c0f0 <list_init+0x310>)
  41bea8:	89ba      	ldrh	r2, [r7, #12]
  41beaa:	f240 1129 	movw	r1, #297	; 0x129
  41beae:	307c      	adds	r0, #124	; 0x7c
  41beb0:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BG_PR_CHK);
  41beb2:	6826      	ldr	r6, [r4, #0]
  41beb4:	367c      	adds	r6, #124	; 0x7c
  41beb6:	2133      	movs	r1, #51	; 0x33
  41beb8:	89b8      	ldrh	r0, [r7, #12]
  41beba:	4b8f      	ldr	r3, [pc, #572]	; (41c0f8 <list_init+0x318>)
  41bebc:	4798      	blx	r3
  41bebe:	4602      	mov	r2, r0
  41bec0:	f241 1129 	movw	r1, #4393	; 0x1129
  41bec4:	4630      	mov	r0, r6
  41bec6:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41bec8:	6820      	ldr	r0, [r4, #0]
  41beca:	307c      	adds	r0, #124	; 0x7c
  41becc:	6a3b      	ldr	r3, [r7, #32]
  41bece:	f013 0f02 	tst.w	r3, #2
  41bed2:	f000 8209 	beq.w	41c2e8 <list_init+0x508>
  41bed6:	f04f 0200 	mov.w	r2, #0
  41beda:	2301      	movs	r3, #1
  41bedc:	f363 0202 	bfi	r2, r3, #0, #3
  41bee0:	2307      	movs	r3, #7
  41bee2:	f363 02c7 	bfi	r2, r3, #3, #5
  41bee6:	2308      	movs	r3, #8
  41bee8:	f363 220c 	bfi	r2, r3, #8, #5
  41beec:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41bef0:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41bef4:	f248 0189 	movw	r1, #32905	; 0x8089
  41bef8:	4b7e      	ldr	r3, [pc, #504]	; (41c0f4 <list_init+0x314>)
  41befa:	4798      	blx	r3
    lv_style_set_text_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41befc:	4b78      	ldr	r3, [pc, #480]	; (41c0e0 <list_init+0x300>)
  41befe:	6818      	ldr	r0, [r3, #0]
  41bf00:	307c      	adds	r0, #124	; 0x7c
  41bf02:	4b7b      	ldr	r3, [pc, #492]	; (41c0f0 <list_init+0x310>)
  41bf04:	6a1b      	ldr	r3, [r3, #32]
  41bf06:	f013 0f02 	tst.w	r3, #2
  41bf0a:	f000 81f0 	beq.w	41c2ee <list_init+0x50e>
  41bf0e:	f04f 32ff 	mov.w	r2, #4294967295
  41bf12:	f248 1189 	movw	r1, #33161	; 0x8189
  41bf16:	4b77      	ldr	r3, [pc, #476]	; (41c0f4 <list_init+0x314>)
  41bf18:	4798      	blx	r3
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41bf1a:	4b71      	ldr	r3, [pc, #452]	; (41c0e0 <list_init+0x300>)
  41bf1c:	6818      	ldr	r0, [r3, #0]
  41bf1e:	307c      	adds	r0, #124	; 0x7c
  41bf20:	4b73      	ldr	r3, [pc, #460]	; (41c0f0 <list_init+0x310>)
  41bf22:	6a1b      	ldr	r3, [r3, #32]
  41bf24:	f013 0f02 	tst.w	r3, #2
  41bf28:	f000 81e4 	beq.w	41c2f4 <list_init+0x514>
  41bf2c:	f04f 0200 	mov.w	r2, #0
  41bf30:	2305      	movs	r3, #5
  41bf32:	f363 0202 	bfi	r2, r3, #0, #3
  41bf36:	2315      	movs	r3, #21
  41bf38:	f363 02c7 	bfi	r2, r3, #3, #5
  41bf3c:	f363 220c 	bfi	r2, r3, #8, #5
  41bf40:	2302      	movs	r3, #2
  41bf42:	f363 324f 	bfi	r2, r3, #13, #3
  41bf46:	f24a 0189 	movw	r1, #41097	; 0xa089
  41bf4a:	4b6a      	ldr	r3, [pc, #424]	; (41c0f4 <list_init+0x314>)
  41bf4c:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41bf4e:	4b64      	ldr	r3, [pc, #400]	; (41c0e0 <list_init+0x300>)
  41bf50:	6818      	ldr	r0, [r3, #0]
  41bf52:	307c      	adds	r0, #124	; 0x7c
  41bf54:	4b66      	ldr	r3, [pc, #408]	; (41c0f0 <list_init+0x310>)
  41bf56:	6a1b      	ldr	r3, [r3, #32]
  41bf58:	f013 0f02 	tst.w	r3, #2
  41bf5c:	f000 81d8 	beq.w	41c310 <list_init+0x530>
  41bf60:	f04f 0200 	mov.w	r2, #0
  41bf64:	2301      	movs	r3, #1
  41bf66:	f363 0202 	bfi	r2, r3, #0, #3
  41bf6a:	2307      	movs	r3, #7
  41bf6c:	f363 02c7 	bfi	r2, r3, #3, #5
  41bf70:	2308      	movs	r3, #8
  41bf72:	f363 220c 	bfi	r2, r3, #8, #5
  41bf76:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41bf7a:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41bf7e:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41bf82:	4b5c      	ldr	r3, [pc, #368]	; (41c0f4 <list_init+0x314>)
  41bf84:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41bf86:	4b56      	ldr	r3, [pc, #344]	; (41c0e0 <list_init+0x300>)
  41bf88:	6818      	ldr	r0, [r3, #0]
  41bf8a:	307c      	adds	r0, #124	; 0x7c
  41bf8c:	4b58      	ldr	r3, [pc, #352]	; (41c0f0 <list_init+0x310>)
  41bf8e:	6a1b      	ldr	r3, [r3, #32]
  41bf90:	f013 0f02 	tst.w	r3, #2
  41bf94:	f000 81bf 	beq.w	41c316 <list_init+0x536>
  41bf98:	f04f 32ff 	mov.w	r2, #4294967295
  41bf9c:	f248 11a9 	movw	r1, #33193	; 0x81a9
  41bfa0:	4b54      	ldr	r3, [pc, #336]	; (41c0f4 <list_init+0x314>)
  41bfa2:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41bfa4:	4b4e      	ldr	r3, [pc, #312]	; (41c0e0 <list_init+0x300>)
  41bfa6:	6818      	ldr	r0, [r3, #0]
  41bfa8:	307c      	adds	r0, #124	; 0x7c
  41bfaa:	4b51      	ldr	r3, [pc, #324]	; (41c0f0 <list_init+0x310>)
  41bfac:	6a1b      	ldr	r3, [r3, #32]
  41bfae:	f013 0f02 	tst.w	r3, #2
  41bfb2:	f000 81b3 	beq.w	41c31c <list_init+0x53c>
  41bfb6:	f04f 0200 	mov.w	r2, #0
  41bfba:	2305      	movs	r3, #5
  41bfbc:	f363 0202 	bfi	r2, r3, #0, #3
  41bfc0:	2315      	movs	r3, #21
  41bfc2:	f363 02c7 	bfi	r2, r3, #3, #5
  41bfc6:	f363 220c 	bfi	r2, r3, #8, #5
  41bfca:	2302      	movs	r3, #2
  41bfcc:	f363 324f 	bfi	r2, r3, #13, #3
  41bfd0:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41bfd4:	4b47      	ldr	r3, [pc, #284]	; (41c0f4 <list_init+0x314>)
  41bfd6:	4798      	blx	r3
    lv_style_set_border_side(&styles->list_btn, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
  41bfd8:	4c41      	ldr	r4, [pc, #260]	; (41c0e0 <list_init+0x300>)
  41bfda:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41bfdc:	2201      	movs	r2, #1
  41bfde:	2131      	movs	r1, #49	; 0x31
  41bfe0:	307c      	adds	r0, #124	; 0x7c
  41bfe2:	4b41      	ldr	r3, [pc, #260]	; (41c0e8 <list_init+0x308>)
  41bfe4:	4798      	blx	r3
    lv_style_set_border_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41bfe6:	6820      	ldr	r0, [r4, #0]
  41bfe8:	307c      	adds	r0, #124	; 0x7c
  41bfea:	4b41      	ldr	r3, [pc, #260]	; (41c0f0 <list_init+0x310>)
  41bfec:	6a1b      	ldr	r3, [r3, #32]
  41bfee:	f013 0f02 	tst.w	r3, #2
  41bff2:	f000 81a1 	beq.w	41c338 <list_init+0x558>
  41bff6:	f04f 0200 	mov.w	r2, #0
  41bffa:	2306      	movs	r3, #6
  41bffc:	f363 0202 	bfi	r2, r3, #0, #3
  41c000:	231a      	movs	r3, #26
  41c002:	f363 02c7 	bfi	r2, r3, #3, #5
  41c006:	231c      	movs	r3, #28
  41c008:	f363 220c 	bfi	r2, r3, #8, #5
  41c00c:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c010:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41c014:	2139      	movs	r1, #57	; 0x39
  41c016:	4d37      	ldr	r5, [pc, #220]	; (41c0f4 <list_init+0x314>)
  41c018:	47a8      	blx	r5
    lv_style_set_border_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_primary);
  41c01a:	4c31      	ldr	r4, [pc, #196]	; (41c0e0 <list_init+0x300>)
  41c01c:	6820      	ldr	r0, [r4, #0]
  41c01e:	4e34      	ldr	r6, [pc, #208]	; (41c0f0 <list_init+0x310>)
  41c020:	89b2      	ldrh	r2, [r6, #12]
  41c022:	f240 2139 	movw	r1, #569	; 0x239
  41c026:	307c      	adds	r0, #124	; 0x7c
  41c028:	47a8      	blx	r5
    lv_style_set_border_width(&styles->list_btn, LV_STATE_DEFAULT, 1);
  41c02a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41c02c:	2201      	movs	r2, #1
  41c02e:	2130      	movs	r1, #48	; 0x30
  41c030:	307c      	adds	r0, #124	; 0x7c
  41c032:	4b2d      	ldr	r3, [pc, #180]	; (41c0e8 <list_init+0x308>)
  41c034:	4798      	blx	r3
    lv_style_set_outline_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_secondary);
  41c036:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  41c038:	89f2      	ldrh	r2, [r6, #14]
  41c03a:	f240 2149 	movw	r1, #585	; 0x249
  41c03e:	307c      	adds	r0, #124	; 0x7c
  41c040:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
  41c042:	6824      	ldr	r4, [r4, #0]
  41c044:	347c      	adds	r4, #124	; 0x7c
  41c046:	6a33      	ldr	r3, [r6, #32]
  41c048:	f013 0f20 	tst.w	r3, #32
  41c04c:	f000 8183 	beq.w	41c356 <list_init+0x576>
  41c050:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41c052:	f44f 7110 	mov.w	r1, #576	; 0x240
  41c056:	4620      	mov	r0, r4
  41c058:	4b23      	ldr	r3, [pc, #140]	; (41c0e8 <list_init+0x308>)
  41c05a:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
  41c05c:	4b20      	ldr	r3, [pc, #128]	; (41c0e0 <list_init+0x300>)
  41c05e:	681c      	ldr	r4, [r3, #0]
  41c060:	347c      	adds	r4, #124	; 0x7c
  41c062:	2000      	movs	r0, #0
  41c064:	4b25      	ldr	r3, [pc, #148]	; (41c0fc <list_init+0x31c>)
  41c066:	4798      	blx	r3
  41c068:	3028      	adds	r0, #40	; 0x28
  41c06a:	0040      	lsls	r0, r0, #1
  41c06c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c070:	f280 8188 	bge.w	41c384 <list_init+0x5a4>
  41c074:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  41c078:	f240 2141 	movw	r1, #577	; 0x241
  41c07c:	4620      	mov	r0, r4
  41c07e:	4b1a      	ldr	r3, [pc, #104]	; (41c0e8 <list_init+0x308>)
  41c080:	4798      	blx	r3
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41c082:	4b17      	ldr	r3, [pc, #92]	; (41c0e0 <list_init+0x300>)
  41c084:	681c      	ldr	r4, [r3, #0]
  41c086:	347c      	adds	r4, #124	; 0x7c
  41c088:	2000      	movs	r0, #0
  41c08a:	4b1d      	ldr	r3, [pc, #116]	; (41c100 <list_init+0x320>)
  41c08c:	4798      	blx	r3
  41c08e:	2801      	cmp	r0, #1
  41c090:	f240 8185 	bls.w	41c39e <list_init+0x5be>
  41c094:	2000      	movs	r0, #0
  41c096:	4b19      	ldr	r3, [pc, #100]	; (41c0fc <list_init+0x31c>)
  41c098:	4798      	blx	r3
  41c09a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c09e:	0040      	lsls	r0, r0, #1
  41c0a0:	3050      	adds	r0, #80	; 0x50
  41c0a2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c0a6:	f280 8193 	bge.w	41c3d0 <list_init+0x5f0>
  41c0aa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41c0ac:	2112      	movs	r1, #18
  41c0ae:	4620      	mov	r0, r4
  41c0b0:	4b0d      	ldr	r3, [pc, #52]	; (41c0e8 <list_init+0x308>)
  41c0b2:	4798      	blx	r3
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41c0b4:	4b0a      	ldr	r3, [pc, #40]	; (41c0e0 <list_init+0x300>)
  41c0b6:	681c      	ldr	r4, [r3, #0]
  41c0b8:	347c      	adds	r4, #124	; 0x7c
  41c0ba:	2000      	movs	r0, #0
  41c0bc:	4b10      	ldr	r3, [pc, #64]	; (41c100 <list_init+0x320>)
  41c0be:	4798      	blx	r3
  41c0c0:	2801      	cmp	r0, #1
  41c0c2:	f240 8194 	bls.w	41c3ee <list_init+0x60e>
  41c0c6:	2000      	movs	r0, #0
  41c0c8:	4b0c      	ldr	r3, [pc, #48]	; (41c0fc <list_init+0x31c>)
  41c0ca:	4798      	blx	r3
  41c0cc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c0d0:	0040      	lsls	r0, r0, #1
  41c0d2:	3050      	adds	r0, #80	; 0x50
  41c0d4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c0d8:	f280 81ac 	bge.w	41c434 <list_init+0x654>
  41c0dc:	e012      	b.n	41c104 <list_init+0x324>
  41c0de:	bf00      	nop
  41c0e0:	2041480c 	.word	0x2041480c
  41c0e4:	004198fd 	.word	0x004198fd
  41c0e8:	0040a121 	.word	0x0040a121
  41c0ec:	0040a441 	.word	0x0040a441
  41c0f0:	20414810 	.word	0x20414810
  41c0f4:	0040a2b1 	.word	0x0040a2b1
  41c0f8:	00416d39 	.word	0x00416d39
  41c0fc:	00415c7d 	.word	0x00415c7d
  41c100:	00415c9d 	.word	0x00415c9d
  41c104:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41c106:	2113      	movs	r1, #19
  41c108:	4620      	mov	r0, r4
  41c10a:	4bc5      	ldr	r3, [pc, #788]	; (41c420 <list_init+0x640>)
  41c10c:	4798      	blx	r3
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41c10e:	4bc5      	ldr	r3, [pc, #788]	; (41c424 <list_init+0x644>)
  41c110:	681c      	ldr	r4, [r3, #0]
  41c112:	347c      	adds	r4, #124	; 0x7c
  41c114:	2000      	movs	r0, #0
  41c116:	4bc4      	ldr	r3, [pc, #784]	; (41c428 <list_init+0x648>)
  41c118:	4798      	blx	r3
  41c11a:	2801      	cmp	r0, #1
  41c11c:	f240 8199 	bls.w	41c452 <list_init+0x672>
  41c120:	2000      	movs	r0, #0
  41c122:	4bc2      	ldr	r3, [pc, #776]	; (41c42c <list_init+0x64c>)
  41c124:	4798      	blx	r3
  41c126:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c12a:	0040      	lsls	r0, r0, #1
  41c12c:	3050      	adds	r0, #80	; 0x50
  41c12e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c132:	f280 81a7 	bge.w	41c484 <list_init+0x6a4>
  41c136:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41c138:	2110      	movs	r1, #16
  41c13a:	4620      	mov	r0, r4
  41c13c:	4bb8      	ldr	r3, [pc, #736]	; (41c420 <list_init+0x640>)
  41c13e:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41c140:	4bb8      	ldr	r3, [pc, #736]	; (41c424 <list_init+0x644>)
  41c142:	681c      	ldr	r4, [r3, #0]
  41c144:	347c      	adds	r4, #124	; 0x7c
  41c146:	2000      	movs	r0, #0
  41c148:	4bb7      	ldr	r3, [pc, #732]	; (41c428 <list_init+0x648>)
  41c14a:	4798      	blx	r3
  41c14c:	2801      	cmp	r0, #1
  41c14e:	f240 81a8 	bls.w	41c4a2 <list_init+0x6c2>
  41c152:	2000      	movs	r0, #0
  41c154:	4bb5      	ldr	r3, [pc, #724]	; (41c42c <list_init+0x64c>)
  41c156:	4798      	blx	r3
  41c158:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c15c:	0040      	lsls	r0, r0, #1
  41c15e:	3050      	adds	r0, #80	; 0x50
  41c160:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c164:	f280 81b6 	bge.w	41c4d4 <list_init+0x6f4>
  41c168:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41c16a:	2111      	movs	r1, #17
  41c16c:	4620      	mov	r0, r4
  41c16e:	4bac      	ldr	r3, [pc, #688]	; (41c420 <list_init+0x640>)
  41c170:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41c172:	4bac      	ldr	r3, [pc, #688]	; (41c424 <list_init+0x644>)
  41c174:	681c      	ldr	r4, [r3, #0]
  41c176:	347c      	adds	r4, #124	; 0x7c
  41c178:	2000      	movs	r0, #0
  41c17a:	4bab      	ldr	r3, [pc, #684]	; (41c428 <list_init+0x648>)
  41c17c:	4798      	blx	r3
  41c17e:	2801      	cmp	r0, #1
  41c180:	f240 81b7 	bls.w	41c4f2 <list_init+0x712>
  41c184:	2000      	movs	r0, #0
  41c186:	4ba9      	ldr	r3, [pc, #676]	; (41c42c <list_init+0x64c>)
  41c188:	4798      	blx	r3
  41c18a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c18e:	0040      	lsls	r0, r0, #1
  41c190:	3050      	adds	r0, #80	; 0x50
  41c192:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c196:	f280 81c5 	bge.w	41c524 <list_init+0x744>
  41c19a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41c19c:	2114      	movs	r1, #20
  41c19e:	4620      	mov	r0, r4
  41c1a0:	4b9f      	ldr	r3, [pc, #636]	; (41c420 <list_init+0x640>)
  41c1a2:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
  41c1a4:	4b9f      	ldr	r3, [pc, #636]	; (41c424 <list_init+0x644>)
  41c1a6:	681c      	ldr	r4, [r3, #0]
  41c1a8:	347c      	adds	r4, #124	; 0x7c
  41c1aa:	2000      	movs	r0, #0
  41c1ac:	4b9e      	ldr	r3, [pc, #632]	; (41c428 <list_init+0x648>)
  41c1ae:	4798      	blx	r3
  41c1b0:	2801      	cmp	r0, #1
  41c1b2:	f240 81c6 	bls.w	41c542 <list_init+0x762>
  41c1b6:	2000      	movs	r0, #0
  41c1b8:	4b9c      	ldr	r3, [pc, #624]	; (41c42c <list_init+0x64c>)
  41c1ba:	4798      	blx	r3
  41c1bc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c1c0:	0040      	lsls	r0, r0, #1
  41c1c2:	3050      	adds	r0, #80	; 0x50
  41c1c4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c1c8:	f280 81d5 	bge.w	41c576 <list_init+0x796>
  41c1cc:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  41c1d0:	2104      	movs	r1, #4
  41c1d2:	4620      	mov	r0, r4
  41c1d4:	4b92      	ldr	r3, [pc, #584]	; (41c420 <list_init+0x640>)
  41c1d6:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
  41c1d8:	4b92      	ldr	r3, [pc, #584]	; (41c424 <list_init+0x644>)
  41c1da:	681c      	ldr	r4, [r3, #0]
  41c1dc:	347c      	adds	r4, #124	; 0x7c
  41c1de:	2000      	movs	r0, #0
  41c1e0:	4b92      	ldr	r3, [pc, #584]	; (41c42c <list_init+0x64c>)
  41c1e2:	4798      	blx	r3
  41c1e4:	3028      	adds	r0, #40	; 0x28
  41c1e6:	0040      	lsls	r0, r0, #1
  41c1e8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c1ec:	f280 81d2 	bge.w	41c594 <list_init+0x7b4>
  41c1f0:	f04f 32ff 	mov.w	r2, #4294967295
  41c1f4:	f241 0104 	movw	r1, #4100	; 0x1004
  41c1f8:	4620      	mov	r0, r4
  41c1fa:	4b89      	ldr	r3, [pc, #548]	; (41c420 <list_init+0x640>)
  41c1fc:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
  41c1fe:	4b89      	ldr	r3, [pc, #548]	; (41c424 <list_init+0x644>)
  41c200:	681c      	ldr	r4, [r3, #0]
  41c202:	347c      	adds	r4, #124	; 0x7c
  41c204:	2000      	movs	r0, #0
  41c206:	4b89      	ldr	r3, [pc, #548]	; (41c42c <list_init+0x64c>)
  41c208:	4798      	blx	r3
  41c20a:	3028      	adds	r0, #40	; 0x28
  41c20c:	0040      	lsls	r0, r0, #1
  41c20e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c212:	f280 81cc 	bge.w	41c5ae <list_init+0x7ce>
  41c216:	f04f 32ff 	mov.w	r2, #4294967295
  41c21a:	f44f 7182 	mov.w	r1, #260	; 0x104
  41c21e:	4620      	mov	r0, r4
  41c220:	4b7f      	ldr	r3, [pc, #508]	; (41c420 <list_init+0x640>)
  41c222:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
  41c224:	4b7f      	ldr	r3, [pc, #508]	; (41c424 <list_init+0x644>)
  41c226:	681c      	ldr	r4, [r3, #0]
  41c228:	347c      	adds	r4, #124	; 0x7c
  41c22a:	2000      	movs	r0, #0
  41c22c:	4b7f      	ldr	r3, [pc, #508]	; (41c42c <list_init+0x64c>)
  41c22e:	4798      	blx	r3
  41c230:	3028      	adds	r0, #40	; 0x28
  41c232:	0040      	lsls	r0, r0, #1
  41c234:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c238:	f280 81c6 	bge.w	41c5c8 <list_init+0x7e8>
  41c23c:	f04f 32ff 	mov.w	r2, #4294967295
  41c240:	f242 0104 	movw	r1, #8196	; 0x2004
  41c244:	4620      	mov	r0, r4
  41c246:	4b76      	ldr	r3, [pc, #472]	; (41c420 <list_init+0x640>)
  41c248:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
  41c24a:	4b76      	ldr	r3, [pc, #472]	; (41c424 <list_init+0x644>)
  41c24c:	681c      	ldr	r4, [r3, #0]
  41c24e:	347c      	adds	r4, #124	; 0x7c
  41c250:	2000      	movs	r0, #0
  41c252:	4b76      	ldr	r3, [pc, #472]	; (41c42c <list_init+0x64c>)
  41c254:	4798      	blx	r3
  41c256:	3028      	adds	r0, #40	; 0x28
  41c258:	0040      	lsls	r0, r0, #1
  41c25a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c25e:	f280 81c0 	bge.w	41c5e2 <list_init+0x802>
  41c262:	f04f 32ff 	mov.w	r2, #4294967295
  41c266:	f44f 7101 	mov.w	r1, #516	; 0x204
  41c26a:	4620      	mov	r0, r4
  41c26c:	4c6c      	ldr	r4, [pc, #432]	; (41c420 <list_init+0x640>)
  41c26e:	47a0      	blx	r4
    lv_style_set_transition_time(&styles->list_btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41c270:	4d6c      	ldr	r5, [pc, #432]	; (41c424 <list_init+0x644>)
  41c272:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41c274:	2200      	movs	r2, #0
  41c276:	21b0      	movs	r1, #176	; 0xb0
  41c278:	307c      	adds	r0, #124	; 0x7c
  41c27a:	47a0      	blx	r4
    lv_style_set_transition_prop_6(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41c27c:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41c27e:	2229      	movs	r2, #41	; 0x29
  41c280:	21b7      	movs	r1, #183	; 0xb7
  41c282:	307c      	adds	r0, #124	; 0x7c
  41c284:	47a0      	blx	r4
    lv_style_set_transition_prop_5(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_TRANSFORM_WIDTH);
  41c286:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41c288:	2204      	movs	r2, #4
  41c28a:	21b6      	movs	r1, #182	; 0xb6
  41c28c:	307c      	adds	r0, #124	; 0x7c
  41c28e:	47a0      	blx	r4
  41c290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41c292:	f04f 0200 	mov.w	r2, #0
  41c296:	2303      	movs	r3, #3
  41c298:	f363 0202 	bfi	r2, r3, #0, #3
  41c29c:	230b      	movs	r3, #11
  41c29e:	f363 02c7 	bfi	r2, r3, #3, #5
  41c2a2:	230e      	movs	r3, #14
  41c2a4:	f363 220c 	bfi	r2, r3, #8, #5
  41c2a8:	f36f 324f 	bfc	r2, #13, #3
  41c2ac:	e5d0      	b.n	41be50 <list_init+0x70>
  41c2ae:	f04f 0200 	mov.w	r2, #0
  41c2b2:	2302      	movs	r3, #2
  41c2b4:	f363 0202 	bfi	r2, r3, #0, #3
  41c2b8:	2309      	movs	r3, #9
  41c2ba:	f363 02c7 	bfi	r2, r3, #3, #5
  41c2be:	230a      	movs	r3, #10
  41c2c0:	f363 220c 	bfi	r2, r3, #8, #5
  41c2c4:	2303      	movs	r3, #3
  41c2c6:	f363 324f 	bfi	r2, r3, #13, #3
  41c2ca:	e5d7      	b.n	41be7c <list_init+0x9c>
  41c2cc:	f04f 0200 	mov.w	r2, #0
  41c2d0:	2303      	movs	r3, #3
  41c2d2:	f363 0202 	bfi	r2, r3, #0, #3
  41c2d6:	230b      	movs	r3, #11
  41c2d8:	f363 02c7 	bfi	r2, r3, #3, #5
  41c2dc:	230e      	movs	r3, #14
  41c2de:	f363 220c 	bfi	r2, r3, #8, #5
  41c2e2:	f36f 324f 	bfc	r2, #13, #3
  41c2e6:	e5d8      	b.n	41be9a <list_init+0xba>
  41c2e8:	f04f 32ff 	mov.w	r2, #4294967295
  41c2ec:	e602      	b.n	41bef4 <list_init+0x114>
  41c2ee:	f04f 32ff 	mov.w	r2, #4294967295
  41c2f2:	e60e      	b.n	41bf12 <list_init+0x132>
  41c2f4:	f04f 0200 	mov.w	r2, #0
  41c2f8:	2304      	movs	r3, #4
  41c2fa:	f363 0202 	bfi	r2, r3, #0, #3
  41c2fe:	2313      	movs	r3, #19
  41c300:	f363 02c7 	bfi	r2, r3, #3, #5
  41c304:	f363 220c 	bfi	r2, r3, #8, #5
  41c308:	2306      	movs	r3, #6
  41c30a:	f363 324f 	bfi	r2, r3, #13, #3
  41c30e:	e61a      	b.n	41bf46 <list_init+0x166>
  41c310:	f04f 32ff 	mov.w	r2, #4294967295
  41c314:	e633      	b.n	41bf7e <list_init+0x19e>
  41c316:	f04f 32ff 	mov.w	r2, #4294967295
  41c31a:	e63f      	b.n	41bf9c <list_init+0x1bc>
  41c31c:	f04f 0200 	mov.w	r2, #0
  41c320:	2304      	movs	r3, #4
  41c322:	f363 0202 	bfi	r2, r3, #0, #3
  41c326:	2313      	movs	r3, #19
  41c328:	f363 02c7 	bfi	r2, r3, #3, #5
  41c32c:	f363 220c 	bfi	r2, r3, #8, #5
  41c330:	2306      	movs	r3, #6
  41c332:	f363 324f 	bfi	r2, r3, #13, #3
  41c336:	e64b      	b.n	41bfd0 <list_init+0x1f0>
  41c338:	f04f 0200 	mov.w	r2, #0
  41c33c:	2304      	movs	r3, #4
  41c33e:	f363 0202 	bfi	r2, r3, #0, #3
  41c342:	2310      	movs	r3, #16
  41c344:	f363 02c7 	bfi	r2, r3, #3, #5
  41c348:	2312      	movs	r3, #18
  41c34a:	f363 220c 	bfi	r2, r3, #8, #5
  41c34e:	2302      	movs	r3, #2
  41c350:	f363 324f 	bfi	r2, r3, #13, #3
  41c354:	e65e      	b.n	41c014 <list_init+0x234>
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
  41c356:	2000      	movs	r0, #0
  41c358:	4b34      	ldr	r3, [pc, #208]	; (41c42c <list_init+0x64c>)
  41c35a:	4798      	blx	r3
  41c35c:	3028      	adds	r0, #40	; 0x28
  41c35e:	0040      	lsls	r0, r0, #1
  41c360:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c364:	da01      	bge.n	41c36a <list_init+0x58a>
  41c366:	2201      	movs	r2, #1
  41c368:	e673      	b.n	41c052 <list_init+0x272>
  41c36a:	2000      	movs	r0, #0
  41c36c:	4b2f      	ldr	r3, [pc, #188]	; (41c42c <list_init+0x64c>)
  41c36e:	4798      	blx	r3
  41c370:	3028      	adds	r0, #40	; 0x28
  41c372:	0040      	lsls	r0, r0, #1
  41c374:	4b2e      	ldr	r3, [pc, #184]	; (41c430 <list_init+0x650>)
  41c376:	fb83 2300 	smull	r2, r3, r3, r0
  41c37a:	17c2      	asrs	r2, r0, #31
  41c37c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c380:	b212      	sxth	r2, r2
  41c382:	e666      	b.n	41c052 <list_init+0x272>
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
  41c384:	2000      	movs	r0, #0
  41c386:	4b29      	ldr	r3, [pc, #164]	; (41c42c <list_init+0x64c>)
  41c388:	4798      	blx	r3
  41c38a:	3028      	adds	r0, #40	; 0x28
  41c38c:	0040      	lsls	r0, r0, #1
  41c38e:	4b28      	ldr	r3, [pc, #160]	; (41c430 <list_init+0x650>)
  41c390:	fb83 2300 	smull	r2, r3, r3, r0
  41c394:	17c2      	asrs	r2, r0, #31
  41c396:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41c39a:	b212      	sxth	r2, r2
  41c39c:	e66c      	b.n	41c078 <list_init+0x298>
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41c39e:	2000      	movs	r0, #0
  41c3a0:	4b22      	ldr	r3, [pc, #136]	; (41c42c <list_init+0x64c>)
  41c3a2:	4798      	blx	r3
  41c3a4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c3a8:	3050      	adds	r0, #80	; 0x50
  41c3aa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c3ae:	da01      	bge.n	41c3b4 <list_init+0x5d4>
  41c3b0:	2201      	movs	r2, #1
  41c3b2:	e67b      	b.n	41c0ac <list_init+0x2cc>
  41c3b4:	2000      	movs	r0, #0
  41c3b6:	4b1d      	ldr	r3, [pc, #116]	; (41c42c <list_init+0x64c>)
  41c3b8:	4798      	blx	r3
  41c3ba:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c3be:	3050      	adds	r0, #80	; 0x50
  41c3c0:	4b1b      	ldr	r3, [pc, #108]	; (41c430 <list_init+0x650>)
  41c3c2:	fb83 2300 	smull	r2, r3, r3, r0
  41c3c6:	17c2      	asrs	r2, r0, #31
  41c3c8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c3cc:	b212      	sxth	r2, r2
  41c3ce:	e66d      	b.n	41c0ac <list_init+0x2cc>
  41c3d0:	2000      	movs	r0, #0
  41c3d2:	4b16      	ldr	r3, [pc, #88]	; (41c42c <list_init+0x64c>)
  41c3d4:	4798      	blx	r3
  41c3d6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c3da:	0040      	lsls	r0, r0, #1
  41c3dc:	3050      	adds	r0, #80	; 0x50
  41c3de:	4b14      	ldr	r3, [pc, #80]	; (41c430 <list_init+0x650>)
  41c3e0:	fb83 2300 	smull	r2, r3, r3, r0
  41c3e4:	17c2      	asrs	r2, r0, #31
  41c3e6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c3ea:	b212      	sxth	r2, r2
  41c3ec:	e65e      	b.n	41c0ac <list_init+0x2cc>
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41c3ee:	2000      	movs	r0, #0
  41c3f0:	4b0e      	ldr	r3, [pc, #56]	; (41c42c <list_init+0x64c>)
  41c3f2:	4798      	blx	r3
  41c3f4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c3f8:	3050      	adds	r0, #80	; 0x50
  41c3fa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c3fe:	da01      	bge.n	41c404 <list_init+0x624>
  41c400:	2201      	movs	r2, #1
  41c402:	e680      	b.n	41c106 <list_init+0x326>
  41c404:	2000      	movs	r0, #0
  41c406:	4b09      	ldr	r3, [pc, #36]	; (41c42c <list_init+0x64c>)
  41c408:	4798      	blx	r3
  41c40a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c40e:	3050      	adds	r0, #80	; 0x50
  41c410:	4b07      	ldr	r3, [pc, #28]	; (41c430 <list_init+0x650>)
  41c412:	fb83 2300 	smull	r2, r3, r3, r0
  41c416:	17c2      	asrs	r2, r0, #31
  41c418:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c41c:	b212      	sxth	r2, r2
  41c41e:	e672      	b.n	41c106 <list_init+0x326>
  41c420:	0040a121 	.word	0x0040a121
  41c424:	2041480c 	.word	0x2041480c
  41c428:	00415c9d 	.word	0x00415c9d
  41c42c:	00415c7d 	.word	0x00415c7d
  41c430:	66666667 	.word	0x66666667
  41c434:	2000      	movs	r0, #0
  41c436:	4b71      	ldr	r3, [pc, #452]	; (41c5fc <list_init+0x81c>)
  41c438:	4798      	blx	r3
  41c43a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c43e:	0040      	lsls	r0, r0, #1
  41c440:	3050      	adds	r0, #80	; 0x50
  41c442:	4b6f      	ldr	r3, [pc, #444]	; (41c600 <list_init+0x820>)
  41c444:	fb83 2300 	smull	r2, r3, r3, r0
  41c448:	17c2      	asrs	r2, r0, #31
  41c44a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c44e:	b212      	sxth	r2, r2
  41c450:	e659      	b.n	41c106 <list_init+0x326>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41c452:	2000      	movs	r0, #0
  41c454:	4b69      	ldr	r3, [pc, #420]	; (41c5fc <list_init+0x81c>)
  41c456:	4798      	blx	r3
  41c458:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c45c:	3050      	adds	r0, #80	; 0x50
  41c45e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c462:	da01      	bge.n	41c468 <list_init+0x688>
  41c464:	2201      	movs	r2, #1
  41c466:	e667      	b.n	41c138 <list_init+0x358>
  41c468:	2000      	movs	r0, #0
  41c46a:	4b64      	ldr	r3, [pc, #400]	; (41c5fc <list_init+0x81c>)
  41c46c:	4798      	blx	r3
  41c46e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c472:	3050      	adds	r0, #80	; 0x50
  41c474:	4b62      	ldr	r3, [pc, #392]	; (41c600 <list_init+0x820>)
  41c476:	fb83 2300 	smull	r2, r3, r3, r0
  41c47a:	17c2      	asrs	r2, r0, #31
  41c47c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c480:	b212      	sxth	r2, r2
  41c482:	e659      	b.n	41c138 <list_init+0x358>
  41c484:	2000      	movs	r0, #0
  41c486:	4b5d      	ldr	r3, [pc, #372]	; (41c5fc <list_init+0x81c>)
  41c488:	4798      	blx	r3
  41c48a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c48e:	0040      	lsls	r0, r0, #1
  41c490:	3050      	adds	r0, #80	; 0x50
  41c492:	4b5b      	ldr	r3, [pc, #364]	; (41c600 <list_init+0x820>)
  41c494:	fb83 2300 	smull	r2, r3, r3, r0
  41c498:	17c2      	asrs	r2, r0, #31
  41c49a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c49e:	b212      	sxth	r2, r2
  41c4a0:	e64a      	b.n	41c138 <list_init+0x358>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41c4a2:	2000      	movs	r0, #0
  41c4a4:	4b55      	ldr	r3, [pc, #340]	; (41c5fc <list_init+0x81c>)
  41c4a6:	4798      	blx	r3
  41c4a8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c4ac:	3050      	adds	r0, #80	; 0x50
  41c4ae:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c4b2:	da01      	bge.n	41c4b8 <list_init+0x6d8>
  41c4b4:	2201      	movs	r2, #1
  41c4b6:	e658      	b.n	41c16a <list_init+0x38a>
  41c4b8:	2000      	movs	r0, #0
  41c4ba:	4b50      	ldr	r3, [pc, #320]	; (41c5fc <list_init+0x81c>)
  41c4bc:	4798      	blx	r3
  41c4be:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c4c2:	3050      	adds	r0, #80	; 0x50
  41c4c4:	4b4e      	ldr	r3, [pc, #312]	; (41c600 <list_init+0x820>)
  41c4c6:	fb83 2300 	smull	r2, r3, r3, r0
  41c4ca:	17c2      	asrs	r2, r0, #31
  41c4cc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c4d0:	b212      	sxth	r2, r2
  41c4d2:	e64a      	b.n	41c16a <list_init+0x38a>
  41c4d4:	2000      	movs	r0, #0
  41c4d6:	4b49      	ldr	r3, [pc, #292]	; (41c5fc <list_init+0x81c>)
  41c4d8:	4798      	blx	r3
  41c4da:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c4de:	0040      	lsls	r0, r0, #1
  41c4e0:	3050      	adds	r0, #80	; 0x50
  41c4e2:	4b47      	ldr	r3, [pc, #284]	; (41c600 <list_init+0x820>)
  41c4e4:	fb83 2300 	smull	r2, r3, r3, r0
  41c4e8:	17c2      	asrs	r2, r0, #31
  41c4ea:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c4ee:	b212      	sxth	r2, r2
  41c4f0:	e63b      	b.n	41c16a <list_init+0x38a>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41c4f2:	2000      	movs	r0, #0
  41c4f4:	4b41      	ldr	r3, [pc, #260]	; (41c5fc <list_init+0x81c>)
  41c4f6:	4798      	blx	r3
  41c4f8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c4fc:	3050      	adds	r0, #80	; 0x50
  41c4fe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c502:	da01      	bge.n	41c508 <list_init+0x728>
  41c504:	2201      	movs	r2, #1
  41c506:	e649      	b.n	41c19c <list_init+0x3bc>
  41c508:	2000      	movs	r0, #0
  41c50a:	4b3c      	ldr	r3, [pc, #240]	; (41c5fc <list_init+0x81c>)
  41c50c:	4798      	blx	r3
  41c50e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c512:	3050      	adds	r0, #80	; 0x50
  41c514:	4b3a      	ldr	r3, [pc, #232]	; (41c600 <list_init+0x820>)
  41c516:	fb83 2300 	smull	r2, r3, r3, r0
  41c51a:	17c2      	asrs	r2, r0, #31
  41c51c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c520:	b212      	sxth	r2, r2
  41c522:	e63b      	b.n	41c19c <list_init+0x3bc>
  41c524:	2000      	movs	r0, #0
  41c526:	4b35      	ldr	r3, [pc, #212]	; (41c5fc <list_init+0x81c>)
  41c528:	4798      	blx	r3
  41c52a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c52e:	0040      	lsls	r0, r0, #1
  41c530:	3050      	adds	r0, #80	; 0x50
  41c532:	4b33      	ldr	r3, [pc, #204]	; (41c600 <list_init+0x820>)
  41c534:	fb83 2300 	smull	r2, r3, r3, r0
  41c538:	17c2      	asrs	r2, r0, #31
  41c53a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c53e:	b212      	sxth	r2, r2
  41c540:	e62c      	b.n	41c19c <list_init+0x3bc>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
  41c542:	2000      	movs	r0, #0
  41c544:	4b2d      	ldr	r3, [pc, #180]	; (41c5fc <list_init+0x81c>)
  41c546:	4798      	blx	r3
  41c548:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c54c:	3050      	adds	r0, #80	; 0x50
  41c54e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c552:	da02      	bge.n	41c55a <list_init+0x77a>
  41c554:	f04f 32ff 	mov.w	r2, #4294967295
  41c558:	e63a      	b.n	41c1d0 <list_init+0x3f0>
  41c55a:	2000      	movs	r0, #0
  41c55c:	4b27      	ldr	r3, [pc, #156]	; (41c5fc <list_init+0x81c>)
  41c55e:	4798      	blx	r3
  41c560:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c564:	3050      	adds	r0, #80	; 0x50
  41c566:	4b26      	ldr	r3, [pc, #152]	; (41c600 <list_init+0x820>)
  41c568:	fb83 2300 	smull	r2, r3, r3, r0
  41c56c:	17c2      	asrs	r2, r0, #31
  41c56e:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41c572:	b212      	sxth	r2, r2
  41c574:	e62c      	b.n	41c1d0 <list_init+0x3f0>
  41c576:	2000      	movs	r0, #0
  41c578:	4b20      	ldr	r3, [pc, #128]	; (41c5fc <list_init+0x81c>)
  41c57a:	4798      	blx	r3
  41c57c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c580:	0040      	lsls	r0, r0, #1
  41c582:	3050      	adds	r0, #80	; 0x50
  41c584:	4b1e      	ldr	r3, [pc, #120]	; (41c600 <list_init+0x820>)
  41c586:	fb83 2300 	smull	r2, r3, r3, r0
  41c58a:	17c2      	asrs	r2, r0, #31
  41c58c:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41c590:	b212      	sxth	r2, r2
  41c592:	e61d      	b.n	41c1d0 <list_init+0x3f0>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
  41c594:	2000      	movs	r0, #0
  41c596:	4b19      	ldr	r3, [pc, #100]	; (41c5fc <list_init+0x81c>)
  41c598:	4798      	blx	r3
  41c59a:	3028      	adds	r0, #40	; 0x28
  41c59c:	0040      	lsls	r0, r0, #1
  41c59e:	4b18      	ldr	r3, [pc, #96]	; (41c600 <list_init+0x820>)
  41c5a0:	fb83 2300 	smull	r2, r3, r3, r0
  41c5a4:	17c2      	asrs	r2, r0, #31
  41c5a6:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41c5aa:	b212      	sxth	r2, r2
  41c5ac:	e622      	b.n	41c1f4 <list_init+0x414>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
  41c5ae:	2000      	movs	r0, #0
  41c5b0:	4b12      	ldr	r3, [pc, #72]	; (41c5fc <list_init+0x81c>)
  41c5b2:	4798      	blx	r3
  41c5b4:	3028      	adds	r0, #40	; 0x28
  41c5b6:	0040      	lsls	r0, r0, #1
  41c5b8:	4b11      	ldr	r3, [pc, #68]	; (41c600 <list_init+0x820>)
  41c5ba:	fb83 2300 	smull	r2, r3, r3, r0
  41c5be:	17c2      	asrs	r2, r0, #31
  41c5c0:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41c5c4:	b212      	sxth	r2, r2
  41c5c6:	e628      	b.n	41c21a <list_init+0x43a>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
  41c5c8:	2000      	movs	r0, #0
  41c5ca:	4b0c      	ldr	r3, [pc, #48]	; (41c5fc <list_init+0x81c>)
  41c5cc:	4798      	blx	r3
  41c5ce:	3028      	adds	r0, #40	; 0x28
  41c5d0:	0040      	lsls	r0, r0, #1
  41c5d2:	4b0b      	ldr	r3, [pc, #44]	; (41c600 <list_init+0x820>)
  41c5d4:	fb83 2300 	smull	r2, r3, r3, r0
  41c5d8:	17c2      	asrs	r2, r0, #31
  41c5da:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41c5de:	b212      	sxth	r2, r2
  41c5e0:	e62e      	b.n	41c240 <list_init+0x460>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
  41c5e2:	2000      	movs	r0, #0
  41c5e4:	4b05      	ldr	r3, [pc, #20]	; (41c5fc <list_init+0x81c>)
  41c5e6:	4798      	blx	r3
  41c5e8:	3028      	adds	r0, #40	; 0x28
  41c5ea:	0040      	lsls	r0, r0, #1
  41c5ec:	4b04      	ldr	r3, [pc, #16]	; (41c600 <list_init+0x820>)
  41c5ee:	fb83 2300 	smull	r2, r3, r3, r0
  41c5f2:	17c2      	asrs	r2, r0, #31
  41c5f4:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41c5f8:	b212      	sxth	r2, r2
  41c5fa:	e634      	b.n	41c266 <list_init+0x486>
  41c5fc:	00415c7d 	.word	0x00415c7d
  41c600:	66666667 	.word	0x66666667

0041c604 <ddlist_init>:
{
  41c604:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->ddlist_page);
  41c606:	4c48      	ldr	r4, [pc, #288]	; (41c728 <ddlist_init+0x124>)
  41c608:	6820      	ldr	r0, [r4, #0]
  41c60a:	3058      	adds	r0, #88	; 0x58
  41c60c:	4b47      	ldr	r3, [pc, #284]	; (41c72c <ddlist_init+0x128>)
  41c60e:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
  41c610:	6824      	ldr	r4, [r4, #0]
  41c612:	3458      	adds	r4, #88	; 0x58
  41c614:	2000      	movs	r0, #0
  41c616:	4b46      	ldr	r3, [pc, #280]	; (41c730 <ddlist_init+0x12c>)
  41c618:	4798      	blx	r3
  41c61a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c61e:	0080      	lsls	r0, r0, #2
  41c620:	3050      	adds	r0, #80	; 0x50
  41c622:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c626:	da4d      	bge.n	41c6c4 <ddlist_init+0xc0>
  41c628:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41c62a:	f248 0181 	movw	r1, #32897	; 0x8081
  41c62e:	4620      	mov	r0, r4
  41c630:	4d40      	ldr	r5, [pc, #256]	; (41c734 <ddlist_init+0x130>)
  41c632:	47a8      	blx	r5
    lv_style_set_clip_corner(&styles->ddlist_page, LV_STATE_DEFAULT, true);
  41c634:	4c3c      	ldr	r4, [pc, #240]	; (41c728 <ddlist_init+0x124>)
  41c636:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41c638:	2201      	movs	r2, #1
  41c63a:	2102      	movs	r1, #2
  41c63c:	3058      	adds	r0, #88	; 0x58
  41c63e:	47a8      	blx	r5
    style_init_reset(&styles->ddlist_sel);
  41c640:	6820      	ldr	r0, [r4, #0]
  41c642:	305c      	adds	r0, #92	; 0x5c
  41c644:	4b39      	ldr	r3, [pc, #228]	; (41c72c <ddlist_init+0x128>)
  41c646:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->ddlist_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
  41c648:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41c64a:	22ff      	movs	r2, #255	; 0xff
  41c64c:	212c      	movs	r1, #44	; 0x2c
  41c64e:	305c      	adds	r0, #92	; 0x5c
  41c650:	4b39      	ldr	r3, [pc, #228]	; (41c738 <ddlist_init+0x134>)
  41c652:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_DEFAULT, theme.color_primary);
  41c654:	6820      	ldr	r0, [r4, #0]
  41c656:	4d39      	ldr	r5, [pc, #228]	; (41c73c <ddlist_init+0x138>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41c658:	89aa      	ldrh	r2, [r5, #12]
  41c65a:	2129      	movs	r1, #41	; 0x29
  41c65c:	305c      	adds	r0, #92	; 0x5c
  41c65e:	4b38      	ldr	r3, [pc, #224]	; (41c740 <ddlist_init+0x13c>)
  41c660:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex3(0xfff) : lv_color_hex3(0xfff));
  41c662:	6820      	ldr	r0, [r4, #0]
  41c664:	305c      	adds	r0, #92	; 0x5c
  41c666:	6a2b      	ldr	r3, [r5, #32]
  41c668:	f013 0f02 	tst.w	r3, #2
  41c66c:	d039      	beq.n	41c6e2 <ddlist_init+0xde>
  41c66e:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41c672:	f248 0189 	movw	r1, #32905	; 0x8089
  41c676:	4b32      	ldr	r3, [pc, #200]	; (41c740 <ddlist_init+0x13c>)
  41c678:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
  41c67a:	4b2b      	ldr	r3, [pc, #172]	; (41c728 <ddlist_init+0x124>)
  41c67c:	6818      	ldr	r0, [r3, #0]
  41c67e:	305c      	adds	r0, #92	; 0x5c
  41c680:	4b2e      	ldr	r3, [pc, #184]	; (41c73c <ddlist_init+0x138>)
  41c682:	6a1b      	ldr	r3, [r3, #32]
  41c684:	f013 0f02 	tst.w	r3, #2
  41c688:	d02e      	beq.n	41c6e8 <ddlist_init+0xe4>
  41c68a:	f04f 0207 	mov.w	r2, #7
  41c68e:	231d      	movs	r3, #29
  41c690:	f363 02c7 	bfi	r2, r3, #3, #5
  41c694:	f363 220c 	bfi	r2, r3, #8, #5
  41c698:	2303      	movs	r3, #3
  41c69a:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41c69e:	f241 0129 	movw	r1, #4137	; 0x1029
  41c6a2:	4b27      	ldr	r3, [pc, #156]	; (41c740 <ddlist_init+0x13c>)
  41c6a4:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41c6a6:	4b20      	ldr	r3, [pc, #128]	; (41c728 <ddlist_init+0x124>)
  41c6a8:	6818      	ldr	r0, [r3, #0]
  41c6aa:	305c      	adds	r0, #92	; 0x5c
  41c6ac:	4b23      	ldr	r3, [pc, #140]	; (41c73c <ddlist_init+0x138>)
  41c6ae:	6a1b      	ldr	r3, [r3, #32]
  41c6b0:	f013 0f02 	tst.w	r3, #2
  41c6b4:	d127      	bne.n	41c706 <ddlist_init+0x102>
  41c6b6:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41c6ba:	f249 0189 	movw	r1, #37001	; 0x9089
  41c6be:	4b20      	ldr	r3, [pc, #128]	; (41c740 <ddlist_init+0x13c>)
  41c6c0:	4798      	blx	r3
  41c6c2:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
  41c6c4:	2000      	movs	r0, #0
  41c6c6:	4b1a      	ldr	r3, [pc, #104]	; (41c730 <ddlist_init+0x12c>)
  41c6c8:	4798      	blx	r3
  41c6ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c6ce:	0080      	lsls	r0, r0, #2
  41c6d0:	3050      	adds	r0, #80	; 0x50
  41c6d2:	4b1c      	ldr	r3, [pc, #112]	; (41c744 <ddlist_init+0x140>)
  41c6d4:	fb83 2300 	smull	r2, r3, r3, r0
  41c6d8:	17c2      	asrs	r2, r0, #31
  41c6da:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c6de:	b212      	sxth	r2, r2
  41c6e0:	e7a3      	b.n	41c62a <ddlist_init+0x26>
  41c6e2:	f04f 32ff 	mov.w	r2, #4294967295
  41c6e6:	e7c4      	b.n	41c672 <ddlist_init+0x6e>
  41c6e8:	f04f 0200 	mov.w	r2, #0
  41c6ec:	2302      	movs	r3, #2
  41c6ee:	f363 0202 	bfi	r2, r3, #0, #3
  41c6f2:	2309      	movs	r3, #9
  41c6f4:	f363 02c7 	bfi	r2, r3, #3, #5
  41c6f8:	230a      	movs	r3, #10
  41c6fa:	f363 220c 	bfi	r2, r3, #8, #5
  41c6fe:	2303      	movs	r3, #3
  41c700:	f363 324f 	bfi	r2, r3, #13, #3
  41c704:	e7cb      	b.n	41c69e <ddlist_init+0x9a>
  41c706:	f04f 0200 	mov.w	r2, #0
  41c70a:	2301      	movs	r3, #1
  41c70c:	f363 0202 	bfi	r2, r3, #0, #3
  41c710:	2307      	movs	r3, #7
  41c712:	f363 02c7 	bfi	r2, r3, #3, #5
  41c716:	2308      	movs	r3, #8
  41c718:	f363 220c 	bfi	r2, r3, #8, #5
  41c71c:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c720:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41c724:	e7c9      	b.n	41c6ba <ddlist_init+0xb6>
  41c726:	bf00      	nop
  41c728:	2041480c 	.word	0x2041480c
  41c72c:	004198fd 	.word	0x004198fd
  41c730:	00415c7d 	.word	0x00415c7d
  41c734:	0040a121 	.word	0x0040a121
  41c738:	0040a441 	.word	0x0040a441
  41c73c:	20414810 	.word	0x20414810
  41c740:	0040a2b1 	.word	0x0040a2b1
  41c744:	66666667 	.word	0x66666667

0041c748 <roller_init>:
{
  41c748:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->roller_bg);
  41c74a:	4c21      	ldr	r4, [pc, #132]	; (41c7d0 <roller_init+0x88>)
  41c74c:	6820      	ldr	r0, [r4, #0]
  41c74e:	308c      	adds	r0, #140	; 0x8c
  41c750:	4b20      	ldr	r3, [pc, #128]	; (41c7d4 <roller_init+0x8c>)
  41c752:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
  41c754:	6824      	ldr	r4, [r4, #0]
  41c756:	348c      	adds	r4, #140	; 0x8c
  41c758:	2000      	movs	r0, #0
  41c75a:	4b1f      	ldr	r3, [pc, #124]	; (41c7d8 <roller_init+0x90>)
  41c75c:	4798      	blx	r3
  41c75e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c762:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c766:	3050      	adds	r0, #80	; 0x50
  41c768:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c76c:	da1f      	bge.n	41c7ae <roller_init+0x66>
  41c76e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41c770:	f248 0181 	movw	r1, #32897	; 0x8081
  41c774:	4620      	mov	r0, r4
  41c776:	4b19      	ldr	r3, [pc, #100]	; (41c7dc <roller_init+0x94>)
  41c778:	4798      	blx	r3
    style_init_reset(&styles->roller_sel);
  41c77a:	4c15      	ldr	r4, [pc, #84]	; (41c7d0 <roller_init+0x88>)
  41c77c:	6820      	ldr	r0, [r4, #0]
  41c77e:	3090      	adds	r0, #144	; 0x90
  41c780:	4b14      	ldr	r3, [pc, #80]	; (41c7d4 <roller_init+0x8c>)
  41c782:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->roller_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
  41c784:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41c786:	22ff      	movs	r2, #255	; 0xff
  41c788:	212c      	movs	r1, #44	; 0x2c
  41c78a:	3090      	adds	r0, #144	; 0x90
  41c78c:	4b14      	ldr	r3, [pc, #80]	; (41c7e0 <roller_init+0x98>)
  41c78e:	4798      	blx	r3
    lv_style_set_bg_color(&styles->roller_sel, LV_STATE_DEFAULT, theme.color_primary);
  41c790:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41c792:	4b14      	ldr	r3, [pc, #80]	; (41c7e4 <roller_init+0x9c>)
  41c794:	899a      	ldrh	r2, [r3, #12]
  41c796:	2129      	movs	r1, #41	; 0x29
  41c798:	3090      	adds	r0, #144	; 0x90
  41c79a:	4d13      	ldr	r5, [pc, #76]	; (41c7e8 <roller_init+0xa0>)
  41c79c:	47a8      	blx	r5
    lv_style_set_text_color(&styles->roller_sel, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  41c79e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41c7a0:	4b12      	ldr	r3, [pc, #72]	; (41c7ec <roller_init+0xa4>)
  41c7a2:	881a      	ldrh	r2, [r3, #0]
  41c7a4:	f248 0189 	movw	r1, #32905	; 0x8089
  41c7a8:	3090      	adds	r0, #144	; 0x90
  41c7aa:	47a8      	blx	r5
  41c7ac:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
  41c7ae:	2000      	movs	r0, #0
  41c7b0:	4b09      	ldr	r3, [pc, #36]	; (41c7d8 <roller_init+0x90>)
  41c7b2:	4798      	blx	r3
  41c7b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c7b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c7bc:	3050      	adds	r0, #80	; 0x50
  41c7be:	4b0c      	ldr	r3, [pc, #48]	; (41c7f0 <roller_init+0xa8>)
  41c7c0:	fb83 2300 	smull	r2, r3, r3, r0
  41c7c4:	17c2      	asrs	r2, r0, #31
  41c7c6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c7ca:	b212      	sxth	r2, r2
  41c7cc:	e7d0      	b.n	41c770 <roller_init+0x28>
  41c7ce:	bf00      	nop
  41c7d0:	2041480c 	.word	0x2041480c
  41c7d4:	004198fd 	.word	0x004198fd
  41c7d8:	00415c7d 	.word	0x00415c7d
  41c7dc:	0040a121 	.word	0x0040a121
  41c7e0:	0040a441 	.word	0x0040a441
  41c7e4:	20414810 	.word	0x20414810
  41c7e8:	0040a2b1 	.word	0x0040a2b1
  41c7ec:	00431c94 	.word	0x00431c94
  41c7f0:	66666667 	.word	0x66666667

0041c7f4 <table_init>:
{
  41c7f4:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->table_cell);
  41c7f6:	4c9d      	ldr	r4, [pc, #628]	; (41ca6c <table_init+0x278>)
  41c7f8:	6820      	ldr	r0, [r4, #0]
  41c7fa:	30a4      	adds	r0, #164	; 0xa4
  41c7fc:	4b9c      	ldr	r3, [pc, #624]	; (41ca70 <table_init+0x27c>)
  41c7fe:	4798      	blx	r3
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41c800:	6820      	ldr	r0, [r4, #0]
  41c802:	30a4      	adds	r0, #164	; 0xa4
  41c804:	4b9b      	ldr	r3, [pc, #620]	; (41ca74 <table_init+0x280>)
  41c806:	6a1b      	ldr	r3, [r3, #32]
  41c808:	f013 0f02 	tst.w	r3, #2
  41c80c:	d07e      	beq.n	41c90c <table_init+0x118>
  41c80e:	f04f 0200 	mov.w	r2, #0
  41c812:	2306      	movs	r3, #6
  41c814:	f363 0202 	bfi	r2, r3, #0, #3
  41c818:	231a      	movs	r3, #26
  41c81a:	f363 02c7 	bfi	r2, r3, #3, #5
  41c81e:	231c      	movs	r3, #28
  41c820:	f363 220c 	bfi	r2, r3, #8, #5
  41c824:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c828:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41c82c:	2139      	movs	r1, #57	; 0x39
  41c82e:	4b92      	ldr	r3, [pc, #584]	; (41ca78 <table_init+0x284>)
  41c830:	4798      	blx	r3
    lv_style_set_border_width(&styles->table_cell, LV_STATE_DEFAULT, 1);
  41c832:	4c8e      	ldr	r4, [pc, #568]	; (41ca6c <table_init+0x278>)
  41c834:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41c836:	2201      	movs	r2, #1
  41c838:	2130      	movs	r1, #48	; 0x30
  41c83a:	30a4      	adds	r0, #164	; 0xa4
  41c83c:	4d8f      	ldr	r5, [pc, #572]	; (41ca7c <table_init+0x288>)
  41c83e:	47a8      	blx	r5
    lv_style_set_border_side(&styles->table_cell, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
  41c840:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41c842:	2203      	movs	r2, #3
  41c844:	2131      	movs	r1, #49	; 0x31
  41c846:	30a4      	adds	r0, #164	; 0xa4
  41c848:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41c84a:	6824      	ldr	r4, [r4, #0]
  41c84c:	34a4      	adds	r4, #164	; 0xa4
  41c84e:	2000      	movs	r0, #0
  41c850:	4b8b      	ldr	r3, [pc, #556]	; (41ca80 <table_init+0x28c>)
  41c852:	4798      	blx	r3
  41c854:	2801      	cmp	r0, #1
  41c856:	d968      	bls.n	41c92a <table_init+0x136>
  41c858:	2000      	movs	r0, #0
  41c85a:	4b8a      	ldr	r3, [pc, #552]	; (41ca84 <table_init+0x290>)
  41c85c:	4798      	blx	r3
  41c85e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c862:	0040      	lsls	r0, r0, #1
  41c864:	3050      	adds	r0, #80	; 0x50
  41c866:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c86a:	da77      	bge.n	41c95c <table_init+0x168>
  41c86c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41c86e:	2112      	movs	r1, #18
  41c870:	4620      	mov	r0, r4
  41c872:	4b82      	ldr	r3, [pc, #520]	; (41ca7c <table_init+0x288>)
  41c874:	4798      	blx	r3
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41c876:	4b7d      	ldr	r3, [pc, #500]	; (41ca6c <table_init+0x278>)
  41c878:	681c      	ldr	r4, [r3, #0]
  41c87a:	34a4      	adds	r4, #164	; 0xa4
  41c87c:	2000      	movs	r0, #0
  41c87e:	4b80      	ldr	r3, [pc, #512]	; (41ca80 <table_init+0x28c>)
  41c880:	4798      	blx	r3
  41c882:	2801      	cmp	r0, #1
  41c884:	d979      	bls.n	41c97a <table_init+0x186>
  41c886:	2000      	movs	r0, #0
  41c888:	4b7e      	ldr	r3, [pc, #504]	; (41ca84 <table_init+0x290>)
  41c88a:	4798      	blx	r3
  41c88c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c890:	0040      	lsls	r0, r0, #1
  41c892:	3050      	adds	r0, #80	; 0x50
  41c894:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c898:	f280 8088 	bge.w	41c9ac <table_init+0x1b8>
  41c89c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41c89e:	2113      	movs	r1, #19
  41c8a0:	4620      	mov	r0, r4
  41c8a2:	4b76      	ldr	r3, [pc, #472]	; (41ca7c <table_init+0x288>)
  41c8a4:	4798      	blx	r3
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41c8a6:	4b71      	ldr	r3, [pc, #452]	; (41ca6c <table_init+0x278>)
  41c8a8:	681c      	ldr	r4, [r3, #0]
  41c8aa:	34a4      	adds	r4, #164	; 0xa4
  41c8ac:	2000      	movs	r0, #0
  41c8ae:	4b74      	ldr	r3, [pc, #464]	; (41ca80 <table_init+0x28c>)
  41c8b0:	4798      	blx	r3
  41c8b2:	2801      	cmp	r0, #1
  41c8b4:	f240 8089 	bls.w	41c9ca <table_init+0x1d6>
  41c8b8:	2000      	movs	r0, #0
  41c8ba:	4b72      	ldr	r3, [pc, #456]	; (41ca84 <table_init+0x290>)
  41c8bc:	4798      	blx	r3
  41c8be:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c8c2:	0040      	lsls	r0, r0, #1
  41c8c4:	3050      	adds	r0, #80	; 0x50
  41c8c6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c8ca:	f280 8097 	bge.w	41c9fc <table_init+0x208>
  41c8ce:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41c8d0:	2110      	movs	r1, #16
  41c8d2:	4620      	mov	r0, r4
  41c8d4:	4b69      	ldr	r3, [pc, #420]	; (41ca7c <table_init+0x288>)
  41c8d6:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41c8d8:	4b64      	ldr	r3, [pc, #400]	; (41ca6c <table_init+0x278>)
  41c8da:	681c      	ldr	r4, [r3, #0]
  41c8dc:	34a4      	adds	r4, #164	; 0xa4
  41c8de:	2000      	movs	r0, #0
  41c8e0:	4b67      	ldr	r3, [pc, #412]	; (41ca80 <table_init+0x28c>)
  41c8e2:	4798      	blx	r3
  41c8e4:	2801      	cmp	r0, #1
  41c8e6:	f240 8098 	bls.w	41ca1a <table_init+0x226>
  41c8ea:	2000      	movs	r0, #0
  41c8ec:	4b65      	ldr	r3, [pc, #404]	; (41ca84 <table_init+0x290>)
  41c8ee:	4798      	blx	r3
  41c8f0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c8f4:	0040      	lsls	r0, r0, #1
  41c8f6:	3050      	adds	r0, #80	; 0x50
  41c8f8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c8fc:	f280 80a6 	bge.w	41ca4c <table_init+0x258>
  41c900:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41c902:	2111      	movs	r1, #17
  41c904:	4620      	mov	r0, r4
  41c906:	4b5d      	ldr	r3, [pc, #372]	; (41ca7c <table_init+0x288>)
  41c908:	4798      	blx	r3
  41c90a:	bd38      	pop	{r3, r4, r5, pc}
  41c90c:	f04f 0200 	mov.w	r2, #0
  41c910:	2304      	movs	r3, #4
  41c912:	f363 0202 	bfi	r2, r3, #0, #3
  41c916:	2310      	movs	r3, #16
  41c918:	f363 02c7 	bfi	r2, r3, #3, #5
  41c91c:	2312      	movs	r3, #18
  41c91e:	f363 220c 	bfi	r2, r3, #8, #5
  41c922:	2302      	movs	r3, #2
  41c924:	f363 324f 	bfi	r2, r3, #13, #3
  41c928:	e780      	b.n	41c82c <table_init+0x38>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41c92a:	2000      	movs	r0, #0
  41c92c:	4b55      	ldr	r3, [pc, #340]	; (41ca84 <table_init+0x290>)
  41c92e:	4798      	blx	r3
  41c930:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c934:	3050      	adds	r0, #80	; 0x50
  41c936:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c93a:	da01      	bge.n	41c940 <table_init+0x14c>
  41c93c:	2201      	movs	r2, #1
  41c93e:	e796      	b.n	41c86e <table_init+0x7a>
  41c940:	2000      	movs	r0, #0
  41c942:	4b50      	ldr	r3, [pc, #320]	; (41ca84 <table_init+0x290>)
  41c944:	4798      	blx	r3
  41c946:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c94a:	3050      	adds	r0, #80	; 0x50
  41c94c:	4b4e      	ldr	r3, [pc, #312]	; (41ca88 <table_init+0x294>)
  41c94e:	fb83 2300 	smull	r2, r3, r3, r0
  41c952:	17c2      	asrs	r2, r0, #31
  41c954:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c958:	b212      	sxth	r2, r2
  41c95a:	e788      	b.n	41c86e <table_init+0x7a>
  41c95c:	2000      	movs	r0, #0
  41c95e:	4b49      	ldr	r3, [pc, #292]	; (41ca84 <table_init+0x290>)
  41c960:	4798      	blx	r3
  41c962:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c966:	0040      	lsls	r0, r0, #1
  41c968:	3050      	adds	r0, #80	; 0x50
  41c96a:	4b47      	ldr	r3, [pc, #284]	; (41ca88 <table_init+0x294>)
  41c96c:	fb83 2300 	smull	r2, r3, r3, r0
  41c970:	17c2      	asrs	r2, r0, #31
  41c972:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c976:	b212      	sxth	r2, r2
  41c978:	e779      	b.n	41c86e <table_init+0x7a>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41c97a:	2000      	movs	r0, #0
  41c97c:	4b41      	ldr	r3, [pc, #260]	; (41ca84 <table_init+0x290>)
  41c97e:	4798      	blx	r3
  41c980:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c984:	3050      	adds	r0, #80	; 0x50
  41c986:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c98a:	da01      	bge.n	41c990 <table_init+0x19c>
  41c98c:	2201      	movs	r2, #1
  41c98e:	e786      	b.n	41c89e <table_init+0xaa>
  41c990:	2000      	movs	r0, #0
  41c992:	4b3c      	ldr	r3, [pc, #240]	; (41ca84 <table_init+0x290>)
  41c994:	4798      	blx	r3
  41c996:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c99a:	3050      	adds	r0, #80	; 0x50
  41c99c:	4b3a      	ldr	r3, [pc, #232]	; (41ca88 <table_init+0x294>)
  41c99e:	fb83 2300 	smull	r2, r3, r3, r0
  41c9a2:	17c2      	asrs	r2, r0, #31
  41c9a4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c9a8:	b212      	sxth	r2, r2
  41c9aa:	e778      	b.n	41c89e <table_init+0xaa>
  41c9ac:	2000      	movs	r0, #0
  41c9ae:	4b35      	ldr	r3, [pc, #212]	; (41ca84 <table_init+0x290>)
  41c9b0:	4798      	blx	r3
  41c9b2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c9b6:	0040      	lsls	r0, r0, #1
  41c9b8:	3050      	adds	r0, #80	; 0x50
  41c9ba:	4b33      	ldr	r3, [pc, #204]	; (41ca88 <table_init+0x294>)
  41c9bc:	fb83 2300 	smull	r2, r3, r3, r0
  41c9c0:	17c2      	asrs	r2, r0, #31
  41c9c2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c9c6:	b212      	sxth	r2, r2
  41c9c8:	e769      	b.n	41c89e <table_init+0xaa>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41c9ca:	2000      	movs	r0, #0
  41c9cc:	4b2d      	ldr	r3, [pc, #180]	; (41ca84 <table_init+0x290>)
  41c9ce:	4798      	blx	r3
  41c9d0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c9d4:	3050      	adds	r0, #80	; 0x50
  41c9d6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c9da:	da01      	bge.n	41c9e0 <table_init+0x1ec>
  41c9dc:	2201      	movs	r2, #1
  41c9de:	e777      	b.n	41c8d0 <table_init+0xdc>
  41c9e0:	2000      	movs	r0, #0
  41c9e2:	4b28      	ldr	r3, [pc, #160]	; (41ca84 <table_init+0x290>)
  41c9e4:	4798      	blx	r3
  41c9e6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c9ea:	3050      	adds	r0, #80	; 0x50
  41c9ec:	4b26      	ldr	r3, [pc, #152]	; (41ca88 <table_init+0x294>)
  41c9ee:	fb83 2300 	smull	r2, r3, r3, r0
  41c9f2:	17c2      	asrs	r2, r0, #31
  41c9f4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c9f8:	b212      	sxth	r2, r2
  41c9fa:	e769      	b.n	41c8d0 <table_init+0xdc>
  41c9fc:	2000      	movs	r0, #0
  41c9fe:	4b21      	ldr	r3, [pc, #132]	; (41ca84 <table_init+0x290>)
  41ca00:	4798      	blx	r3
  41ca02:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ca06:	0040      	lsls	r0, r0, #1
  41ca08:	3050      	adds	r0, #80	; 0x50
  41ca0a:	4b1f      	ldr	r3, [pc, #124]	; (41ca88 <table_init+0x294>)
  41ca0c:	fb83 2300 	smull	r2, r3, r3, r0
  41ca10:	17c2      	asrs	r2, r0, #31
  41ca12:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ca16:	b212      	sxth	r2, r2
  41ca18:	e75a      	b.n	41c8d0 <table_init+0xdc>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41ca1a:	2000      	movs	r0, #0
  41ca1c:	4b19      	ldr	r3, [pc, #100]	; (41ca84 <table_init+0x290>)
  41ca1e:	4798      	blx	r3
  41ca20:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ca24:	3050      	adds	r0, #80	; 0x50
  41ca26:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ca2a:	da01      	bge.n	41ca30 <table_init+0x23c>
  41ca2c:	2201      	movs	r2, #1
  41ca2e:	e768      	b.n	41c902 <table_init+0x10e>
  41ca30:	2000      	movs	r0, #0
  41ca32:	4b14      	ldr	r3, [pc, #80]	; (41ca84 <table_init+0x290>)
  41ca34:	4798      	blx	r3
  41ca36:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ca3a:	3050      	adds	r0, #80	; 0x50
  41ca3c:	4b12      	ldr	r3, [pc, #72]	; (41ca88 <table_init+0x294>)
  41ca3e:	fb83 2300 	smull	r2, r3, r3, r0
  41ca42:	17c2      	asrs	r2, r0, #31
  41ca44:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ca48:	b212      	sxth	r2, r2
  41ca4a:	e75a      	b.n	41c902 <table_init+0x10e>
  41ca4c:	2000      	movs	r0, #0
  41ca4e:	4b0d      	ldr	r3, [pc, #52]	; (41ca84 <table_init+0x290>)
  41ca50:	4798      	blx	r3
  41ca52:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ca56:	0040      	lsls	r0, r0, #1
  41ca58:	3050      	adds	r0, #80	; 0x50
  41ca5a:	4b0b      	ldr	r3, [pc, #44]	; (41ca88 <table_init+0x294>)
  41ca5c:	fb83 2300 	smull	r2, r3, r3, r0
  41ca60:	17c2      	asrs	r2, r0, #31
  41ca62:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ca66:	b212      	sxth	r2, r2
  41ca68:	e74b      	b.n	41c902 <table_init+0x10e>
  41ca6a:	bf00      	nop
  41ca6c:	2041480c 	.word	0x2041480c
  41ca70:	004198fd 	.word	0x004198fd
  41ca74:	20414810 	.word	0x20414810
  41ca78:	0040a2b1 	.word	0x0040a2b1
  41ca7c:	0040a121 	.word	0x0040a121
  41ca80:	00415c9d 	.word	0x00415c9d
  41ca84:	00415c7d 	.word	0x00415c7d
  41ca88:	66666667 	.word	0x66666667

0041ca8c <tabview_win_shared_init>:
{
  41ca8c:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->tabview_btns_bg);
  41ca8e:	4cbe      	ldr	r4, [pc, #760]	; (41cd88 <tabview_win_shared_init+0x2fc>)
  41ca90:	6820      	ldr	r0, [r4, #0]
  41ca92:	30ac      	adds	r0, #172	; 0xac
  41ca94:	4bbd      	ldr	r3, [pc, #756]	; (41cd8c <tabview_win_shared_init+0x300>)
  41ca96:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41ca98:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41ca9a:	22ff      	movs	r2, #255	; 0xff
  41ca9c:	212c      	movs	r1, #44	; 0x2c
  41ca9e:	30ac      	adds	r0, #172	; 0xac
  41caa0:	4bbb      	ldr	r3, [pc, #748]	; (41cd90 <tabview_win_shared_init+0x304>)
  41caa2:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
  41caa4:	6820      	ldr	r0, [r4, #0]
  41caa6:	30ac      	adds	r0, #172	; 0xac
  41caa8:	4bba      	ldr	r3, [pc, #744]	; (41cd94 <tabview_win_shared_init+0x308>)
  41caaa:	6a1b      	ldr	r3, [r3, #32]
  41caac:	f013 0f02 	tst.w	r3, #2
  41cab0:	f000 8198 	beq.w	41cde4 <tabview_win_shared_init+0x358>
  41cab4:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41cab8:	2129      	movs	r1, #41	; 0x29
  41caba:	4bb7      	ldr	r3, [pc, #732]	; (41cd98 <tabview_win_shared_init+0x30c>)
  41cabc:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41cabe:	4bb2      	ldr	r3, [pc, #712]	; (41cd88 <tabview_win_shared_init+0x2fc>)
  41cac0:	6818      	ldr	r0, [r3, #0]
  41cac2:	30ac      	adds	r0, #172	; 0xac
  41cac4:	4bb3      	ldr	r3, [pc, #716]	; (41cd94 <tabview_win_shared_init+0x308>)
  41cac6:	6a1b      	ldr	r3, [r3, #32]
  41cac8:	f013 0f02 	tst.w	r3, #2
  41cacc:	f000 8198 	beq.w	41ce00 <tabview_win_shared_init+0x374>
  41cad0:	f04f 0200 	mov.w	r2, #0
  41cad4:	2301      	movs	r3, #1
  41cad6:	f363 0202 	bfi	r2, r3, #0, #3
  41cada:	2307      	movs	r3, #7
  41cadc:	f363 02c7 	bfi	r2, r3, #3, #5
  41cae0:	2308      	movs	r3, #8
  41cae2:	f363 220c 	bfi	r2, r3, #8, #5
  41cae6:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41caea:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41caee:	f248 0189 	movw	r1, #32905	; 0x8089
  41caf2:	4da9      	ldr	r5, [pc, #676]	; (41cd98 <tabview_win_shared_init+0x30c>)
  41caf4:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->tabview_btns_bg, LV_STATE_DEFAULT, lv_color_hex(0x979a9f));
  41caf6:	4ca4      	ldr	r4, [pc, #656]	; (41cd88 <tabview_win_shared_init+0x2fc>)
  41caf8:	6820      	ldr	r0, [r4, #0]
  41cafa:	f04f 0200 	mov.w	r2, #0
  41cafe:	2304      	movs	r3, #4
  41cb00:	f363 0202 	bfi	r2, r3, #0, #3
  41cb04:	2312      	movs	r3, #18
  41cb06:	f363 02c7 	bfi	r2, r3, #3, #5
  41cb0a:	2313      	movs	r3, #19
  41cb0c:	f363 220c 	bfi	r2, r3, #8, #5
  41cb10:	2306      	movs	r3, #6
  41cb12:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41cb16:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41cb1a:	30ac      	adds	r0, #172	; 0xac
  41cb1c:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41cb1e:	6824      	ldr	r4, [r4, #0]
  41cb20:	34ac      	adds	r4, #172	; 0xac
  41cb22:	2000      	movs	r0, #0
  41cb24:	4b9d      	ldr	r3, [pc, #628]	; (41cd9c <tabview_win_shared_init+0x310>)
  41cb26:	4798      	blx	r3
  41cb28:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41cb2c:	3050      	adds	r0, #80	; 0x50
  41cb2e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cb32:	f280 8171 	bge.w	41ce18 <tabview_win_shared_init+0x38c>
  41cb36:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41cb38:	2110      	movs	r1, #16
  41cb3a:	4620      	mov	r0, r4
  41cb3c:	4b98      	ldr	r3, [pc, #608]	; (41cda0 <tabview_win_shared_init+0x314>)
  41cb3e:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41cb40:	4b91      	ldr	r3, [pc, #580]	; (41cd88 <tabview_win_shared_init+0x2fc>)
  41cb42:	681c      	ldr	r4, [r3, #0]
  41cb44:	34ac      	adds	r4, #172	; 0xac
  41cb46:	2000      	movs	r0, #0
  41cb48:	4b94      	ldr	r3, [pc, #592]	; (41cd9c <tabview_win_shared_init+0x310>)
  41cb4a:	4798      	blx	r3
  41cb4c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41cb50:	3050      	adds	r0, #80	; 0x50
  41cb52:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cb56:	f280 816d 	bge.w	41ce34 <tabview_win_shared_init+0x3a8>
  41cb5a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41cb5c:	2112      	movs	r1, #18
  41cb5e:	4620      	mov	r0, r4
  41cb60:	4b8f      	ldr	r3, [pc, #572]	; (41cda0 <tabview_win_shared_init+0x314>)
  41cb62:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41cb64:	4b88      	ldr	r3, [pc, #544]	; (41cd88 <tabview_win_shared_init+0x2fc>)
  41cb66:	681c      	ldr	r4, [r3, #0]
  41cb68:	34ac      	adds	r4, #172	; 0xac
  41cb6a:	2000      	movs	r0, #0
  41cb6c:	4b8b      	ldr	r3, [pc, #556]	; (41cd9c <tabview_win_shared_init+0x310>)
  41cb6e:	4798      	blx	r3
  41cb70:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41cb74:	3050      	adds	r0, #80	; 0x50
  41cb76:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cb7a:	f280 8169 	bge.w	41ce50 <tabview_win_shared_init+0x3c4>
  41cb7e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41cb80:	2113      	movs	r1, #19
  41cb82:	4620      	mov	r0, r4
  41cb84:	4b86      	ldr	r3, [pc, #536]	; (41cda0 <tabview_win_shared_init+0x314>)
  41cb86:	4798      	blx	r3
    style_init_reset(&styles->tabview_btns);
  41cb88:	4c7f      	ldr	r4, [pc, #508]	; (41cd88 <tabview_win_shared_init+0x2fc>)
  41cb8a:	6820      	ldr	r0, [r4, #0]
  41cb8c:	30a8      	adds	r0, #168	; 0xa8
  41cb8e:	4b7f      	ldr	r3, [pc, #508]	; (41cd8c <tabview_win_shared_init+0x300>)
  41cb90:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns, LV_STATE_PRESSED, LV_OPA_50);
  41cb92:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41cb94:	227f      	movs	r2, #127	; 0x7f
  41cb96:	f241 012c 	movw	r1, #4140	; 0x102c
  41cb9a:	30a8      	adds	r0, #168	; 0xa8
  41cb9c:	4b7c      	ldr	r3, [pc, #496]	; (41cd90 <tabview_win_shared_init+0x304>)
  41cb9e:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns, LV_STATE_PRESSED, lv_color_hex3(0x888));
  41cba0:	6820      	ldr	r0, [r4, #0]
  41cba2:	f04f 0200 	mov.w	r2, #0
  41cba6:	2304      	movs	r3, #4
  41cba8:	f363 0202 	bfi	r2, r3, #0, #3
  41cbac:	2311      	movs	r3, #17
  41cbae:	f363 02c7 	bfi	r2, r3, #3, #5
  41cbb2:	f363 220c 	bfi	r2, r3, #8, #5
  41cbb6:	2302      	movs	r3, #2
  41cbb8:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41cbbc:	f241 0129 	movw	r1, #4137	; 0x1029
  41cbc0:	30a8      	adds	r0, #168	; 0xa8
  41cbc2:	4b75      	ldr	r3, [pc, #468]	; (41cd98 <tabview_win_shared_init+0x30c>)
  41cbc4:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
  41cbc6:	6820      	ldr	r0, [r4, #0]
  41cbc8:	30a8      	adds	r0, #168	; 0xa8
  41cbca:	4b72      	ldr	r3, [pc, #456]	; (41cd94 <tabview_win_shared_init+0x308>)
  41cbcc:	6a1b      	ldr	r3, [r3, #32]
  41cbce:	f013 0f02 	tst.w	r3, #2
  41cbd2:	f000 814b 	beq.w	41ce6c <tabview_win_shared_init+0x3e0>
  41cbd6:	f04f 0200 	mov.w	r2, #0
  41cbda:	2301      	movs	r3, #1
  41cbdc:	f363 0202 	bfi	r2, r3, #0, #3
  41cbe0:	2307      	movs	r3, #7
  41cbe2:	f363 02c7 	bfi	r2, r3, #3, #5
  41cbe6:	2308      	movs	r3, #8
  41cbe8:	f363 220c 	bfi	r2, r3, #8, #5
  41cbec:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41cbf0:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41cbf4:	f248 1189 	movw	r1, #33161	; 0x8189
  41cbf8:	4b67      	ldr	r3, [pc, #412]	; (41cd98 <tabview_win_shared_init+0x30c>)
  41cbfa:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41cbfc:	4b62      	ldr	r3, [pc, #392]	; (41cd88 <tabview_win_shared_init+0x2fc>)
  41cbfe:	681c      	ldr	r4, [r3, #0]
  41cc00:	34a8      	adds	r4, #168	; 0xa8
  41cc02:	2000      	movs	r0, #0
  41cc04:	4b65      	ldr	r3, [pc, #404]	; (41cd9c <tabview_win_shared_init+0x310>)
  41cc06:	4798      	blx	r3
  41cc08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41cc0c:	0080      	lsls	r0, r0, #2
  41cc0e:	3050      	adds	r0, #80	; 0x50
  41cc10:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cc14:	f280 8136 	bge.w	41ce84 <tabview_win_shared_init+0x3f8>
  41cc18:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41cc1a:	2110      	movs	r1, #16
  41cc1c:	4620      	mov	r0, r4
  41cc1e:	4b60      	ldr	r3, [pc, #384]	; (41cda0 <tabview_win_shared_init+0x314>)
  41cc20:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41cc22:	4b59      	ldr	r3, [pc, #356]	; (41cd88 <tabview_win_shared_init+0x2fc>)
  41cc24:	681c      	ldr	r4, [r3, #0]
  41cc26:	34a8      	adds	r4, #168	; 0xa8
  41cc28:	2000      	movs	r0, #0
  41cc2a:	4b5c      	ldr	r3, [pc, #368]	; (41cd9c <tabview_win_shared_init+0x310>)
  41cc2c:	4798      	blx	r3
  41cc2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41cc32:	0080      	lsls	r0, r0, #2
  41cc34:	3050      	adds	r0, #80	; 0x50
  41cc36:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cc3a:	f280 8132 	bge.w	41cea2 <tabview_win_shared_init+0x416>
  41cc3e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41cc40:	2111      	movs	r1, #17
  41cc42:	4620      	mov	r0, r4
  41cc44:	4b56      	ldr	r3, [pc, #344]	; (41cda0 <tabview_win_shared_init+0x314>)
  41cc46:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_FOCUSED, theme.color_primary);
  41cc48:	4c4f      	ldr	r4, [pc, #316]	; (41cd88 <tabview_win_shared_init+0x2fc>)
  41cc4a:	6820      	ldr	r0, [r4, #0]
  41cc4c:	4e51      	ldr	r6, [pc, #324]	; (41cd94 <tabview_win_shared_init+0x308>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41cc4e:	89b2      	ldrh	r2, [r6, #12]
  41cc50:	f248 2189 	movw	r1, #33417	; 0x8289
  41cc54:	30a8      	adds	r0, #168	; 0xa8
  41cc56:	4d50      	ldr	r5, [pc, #320]	; (41cd98 <tabview_win_shared_init+0x30c>)
  41cc58:	47a8      	blx	r5
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_EDITED, theme.color_secondary);
  41cc5a:	6820      	ldr	r0, [r4, #0]
  41cc5c:	89f2      	ldrh	r2, [r6, #14]
  41cc5e:	f248 4189 	movw	r1, #33929	; 0x8489
  41cc62:	30a8      	adds	r0, #168	; 0xa8
  41cc64:	47a8      	blx	r5
    style_init_reset(&styles->tabview_indic);
  41cc66:	6820      	ldr	r0, [r4, #0]
  41cc68:	30b0      	adds	r0, #176	; 0xb0
  41cc6a:	4b48      	ldr	r3, [pc, #288]	; (41cd8c <tabview_win_shared_init+0x300>)
  41cc6c:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  41cc6e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41cc70:	22ff      	movs	r2, #255	; 0xff
  41cc72:	212c      	movs	r1, #44	; 0x2c
  41cc74:	30b0      	adds	r0, #176	; 0xb0
  41cc76:	4b46      	ldr	r3, [pc, #280]	; (41cd90 <tabview_win_shared_init+0x304>)
  41cc78:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_DEFAULT, theme.color_primary);
  41cc7a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41cc7c:	89b2      	ldrh	r2, [r6, #12]
  41cc7e:	2129      	movs	r1, #41	; 0x29
  41cc80:	30b0      	adds	r0, #176	; 0xb0
  41cc82:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_EDITED, theme.color_secondary);
  41cc84:	6820      	ldr	r0, [r4, #0]
  41cc86:	89f2      	ldrh	r2, [r6, #14]
  41cc88:	f240 4129 	movw	r1, #1065	; 0x429
  41cc8c:	30b0      	adds	r0, #176	; 0xb0
  41cc8e:	47a8      	blx	r5
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
  41cc90:	6824      	ldr	r4, [r4, #0]
  41cc92:	34b0      	adds	r4, #176	; 0xb0
  41cc94:	2000      	movs	r0, #0
  41cc96:	4b41      	ldr	r3, [pc, #260]	; (41cd9c <tabview_win_shared_init+0x310>)
  41cc98:	4798      	blx	r3
  41cc9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41cc9e:	3050      	adds	r0, #80	; 0x50
  41cca0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cca4:	f280 810c 	bge.w	41cec0 <tabview_win_shared_init+0x434>
  41cca8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41ccaa:	2103      	movs	r1, #3
  41ccac:	4620      	mov	r0, r4
  41ccae:	4d3c      	ldr	r5, [pc, #240]	; (41cda0 <tabview_win_shared_init+0x314>)
  41ccb0:	47a8      	blx	r5
    lv_style_set_radius(&styles->tabview_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41ccb2:	4c35      	ldr	r4, [pc, #212]	; (41cd88 <tabview_win_shared_init+0x2fc>)
  41ccb4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41ccb6:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41ccba:	2101      	movs	r1, #1
  41ccbc:	30b0      	adds	r0, #176	; 0xb0
  41ccbe:	47a8      	blx	r5
    style_init_reset(&styles->tabview_page_scrl);
  41ccc0:	6820      	ldr	r0, [r4, #0]
  41ccc2:	30b4      	adds	r0, #180	; 0xb4
  41ccc4:	4b31      	ldr	r3, [pc, #196]	; (41cd8c <tabview_win_shared_init+0x300>)
  41ccc6:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41ccc8:	6824      	ldr	r4, [r4, #0]
  41ccca:	34b4      	adds	r4, #180	; 0xb4
  41cccc:	2000      	movs	r0, #0
  41ccce:	4b35      	ldr	r3, [pc, #212]	; (41cda4 <tabview_win_shared_init+0x318>)
  41ccd0:	4798      	blx	r3
  41ccd2:	2801      	cmp	r0, #1
  41ccd4:	f240 8102 	bls.w	41cedc <tabview_win_shared_init+0x450>
  41ccd8:	2000      	movs	r0, #0
  41ccda:	4b30      	ldr	r3, [pc, #192]	; (41cd9c <tabview_win_shared_init+0x310>)
  41ccdc:	4798      	blx	r3
  41ccde:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cce2:	0040      	lsls	r0, r0, #1
  41cce4:	3050      	adds	r0, #80	; 0x50
  41cce6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ccea:	f280 8110 	bge.w	41cf0e <tabview_win_shared_init+0x482>
  41ccee:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41ccf0:	2110      	movs	r1, #16
  41ccf2:	4620      	mov	r0, r4
  41ccf4:	4b2a      	ldr	r3, [pc, #168]	; (41cda0 <tabview_win_shared_init+0x314>)
  41ccf6:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41ccf8:	4b23      	ldr	r3, [pc, #140]	; (41cd88 <tabview_win_shared_init+0x2fc>)
  41ccfa:	681c      	ldr	r4, [r3, #0]
  41ccfc:	34b4      	adds	r4, #180	; 0xb4
  41ccfe:	2000      	movs	r0, #0
  41cd00:	4b28      	ldr	r3, [pc, #160]	; (41cda4 <tabview_win_shared_init+0x318>)
  41cd02:	4798      	blx	r3
  41cd04:	2801      	cmp	r0, #1
  41cd06:	f240 8111 	bls.w	41cf2c <tabview_win_shared_init+0x4a0>
  41cd0a:	2000      	movs	r0, #0
  41cd0c:	4b23      	ldr	r3, [pc, #140]	; (41cd9c <tabview_win_shared_init+0x310>)
  41cd0e:	4798      	blx	r3
  41cd10:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cd14:	0040      	lsls	r0, r0, #1
  41cd16:	3050      	adds	r0, #80	; 0x50
  41cd18:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cd1c:	f280 811f 	bge.w	41cf5e <tabview_win_shared_init+0x4d2>
  41cd20:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41cd22:	2111      	movs	r1, #17
  41cd24:	4620      	mov	r0, r4
  41cd26:	4b1e      	ldr	r3, [pc, #120]	; (41cda0 <tabview_win_shared_init+0x314>)
  41cd28:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41cd2a:	4b17      	ldr	r3, [pc, #92]	; (41cd88 <tabview_win_shared_init+0x2fc>)
  41cd2c:	681c      	ldr	r4, [r3, #0]
  41cd2e:	34b4      	adds	r4, #180	; 0xb4
  41cd30:	2000      	movs	r0, #0
  41cd32:	4b1c      	ldr	r3, [pc, #112]	; (41cda4 <tabview_win_shared_init+0x318>)
  41cd34:	4798      	blx	r3
  41cd36:	2801      	cmp	r0, #1
  41cd38:	f240 8120 	bls.w	41cf7c <tabview_win_shared_init+0x4f0>
  41cd3c:	2000      	movs	r0, #0
  41cd3e:	4b17      	ldr	r3, [pc, #92]	; (41cd9c <tabview_win_shared_init+0x310>)
  41cd40:	4798      	blx	r3
  41cd42:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cd46:	0040      	lsls	r0, r0, #1
  41cd48:	3050      	adds	r0, #80	; 0x50
  41cd4a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cd4e:	f280 812e 	bge.w	41cfae <tabview_win_shared_init+0x522>
  41cd52:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41cd54:	2112      	movs	r1, #18
  41cd56:	4620      	mov	r0, r4
  41cd58:	4b11      	ldr	r3, [pc, #68]	; (41cda0 <tabview_win_shared_init+0x314>)
  41cd5a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41cd5c:	4b0a      	ldr	r3, [pc, #40]	; (41cd88 <tabview_win_shared_init+0x2fc>)
  41cd5e:	681c      	ldr	r4, [r3, #0]
  41cd60:	34b4      	adds	r4, #180	; 0xb4
  41cd62:	2000      	movs	r0, #0
  41cd64:	4b0f      	ldr	r3, [pc, #60]	; (41cda4 <tabview_win_shared_init+0x318>)
  41cd66:	4798      	blx	r3
  41cd68:	2801      	cmp	r0, #1
  41cd6a:	f240 812f 	bls.w	41cfcc <tabview_win_shared_init+0x540>
  41cd6e:	2000      	movs	r0, #0
  41cd70:	4b0a      	ldr	r3, [pc, #40]	; (41cd9c <tabview_win_shared_init+0x310>)
  41cd72:	4798      	blx	r3
  41cd74:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cd78:	0040      	lsls	r0, r0, #1
  41cd7a:	3050      	adds	r0, #80	; 0x50
  41cd7c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cd80:	f280 813d 	bge.w	41cffe <tabview_win_shared_init+0x572>
  41cd84:	2201      	movs	r2, #1
  41cd86:	e00f      	b.n	41cda8 <tabview_win_shared_init+0x31c>
  41cd88:	2041480c 	.word	0x2041480c
  41cd8c:	004198fd 	.word	0x004198fd
  41cd90:	0040a441 	.word	0x0040a441
  41cd94:	20414810 	.word	0x20414810
  41cd98:	0040a2b1 	.word	0x0040a2b1
  41cd9c:	00415c7d 	.word	0x00415c7d
  41cda0:	0040a121 	.word	0x0040a121
  41cda4:	00415c9d 	.word	0x00415c9d
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41cda8:	2113      	movs	r1, #19
  41cdaa:	4620      	mov	r0, r4
  41cdac:	4baf      	ldr	r3, [pc, #700]	; (41d06c <tabview_win_shared_init+0x5e0>)
  41cdae:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41cdb0:	4baf      	ldr	r3, [pc, #700]	; (41d070 <tabview_win_shared_init+0x5e4>)
  41cdb2:	681c      	ldr	r4, [r3, #0]
  41cdb4:	34b4      	adds	r4, #180	; 0xb4
  41cdb6:	2000      	movs	r0, #0
  41cdb8:	4bae      	ldr	r3, [pc, #696]	; (41d074 <tabview_win_shared_init+0x5e8>)
  41cdba:	4798      	blx	r3
  41cdbc:	2801      	cmp	r0, #1
  41cdbe:	f240 812d 	bls.w	41d01c <tabview_win_shared_init+0x590>
  41cdc2:	2000      	movs	r0, #0
  41cdc4:	4bac      	ldr	r3, [pc, #688]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41cdc6:	4798      	blx	r3
  41cdc8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cdcc:	0040      	lsls	r0, r0, #1
  41cdce:	3050      	adds	r0, #80	; 0x50
  41cdd0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cdd4:	f280 813b 	bge.w	41d04e <tabview_win_shared_init+0x5c2>
  41cdd8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41cdda:	2114      	movs	r1, #20
  41cddc:	4620      	mov	r0, r4
  41cdde:	4ba3      	ldr	r3, [pc, #652]	; (41d06c <tabview_win_shared_init+0x5e0>)
  41cde0:	4798      	blx	r3
  41cde2:	bd70      	pop	{r4, r5, r6, pc}
  41cde4:	f04f 0200 	mov.w	r2, #0
  41cde8:	2303      	movs	r3, #3
  41cdea:	f363 0202 	bfi	r2, r3, #0, #3
  41cdee:	230b      	movs	r3, #11
  41cdf0:	f363 02c7 	bfi	r2, r3, #3, #5
  41cdf4:	230e      	movs	r3, #14
  41cdf6:	f363 220c 	bfi	r2, r3, #8, #5
  41cdfa:	f36f 324f 	bfc	r2, #13, #3
  41cdfe:	e65b      	b.n	41cab8 <tabview_win_shared_init+0x2c>
  41ce00:	f04f 0207 	mov.w	r2, #7
  41ce04:	231c      	movs	r3, #28
  41ce06:	f363 02c7 	bfi	r2, r3, #3, #5
  41ce0a:	231d      	movs	r3, #29
  41ce0c:	f363 220c 	bfi	r2, r3, #8, #5
  41ce10:	2302      	movs	r3, #2
  41ce12:	f363 324f 	bfi	r2, r3, #13, #3
  41ce16:	e66a      	b.n	41caee <tabview_win_shared_init+0x62>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41ce18:	2000      	movs	r0, #0
  41ce1a:	4b97      	ldr	r3, [pc, #604]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41ce1c:	4798      	blx	r3
  41ce1e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41ce22:	3050      	adds	r0, #80	; 0x50
  41ce24:	4b95      	ldr	r3, [pc, #596]	; (41d07c <tabview_win_shared_init+0x5f0>)
  41ce26:	fb83 2300 	smull	r2, r3, r3, r0
  41ce2a:	17c2      	asrs	r2, r0, #31
  41ce2c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ce30:	b212      	sxth	r2, r2
  41ce32:	e681      	b.n	41cb38 <tabview_win_shared_init+0xac>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41ce34:	2000      	movs	r0, #0
  41ce36:	4b90      	ldr	r3, [pc, #576]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41ce38:	4798      	blx	r3
  41ce3a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41ce3e:	3050      	adds	r0, #80	; 0x50
  41ce40:	4b8e      	ldr	r3, [pc, #568]	; (41d07c <tabview_win_shared_init+0x5f0>)
  41ce42:	fb83 2300 	smull	r2, r3, r3, r0
  41ce46:	17c2      	asrs	r2, r0, #31
  41ce48:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ce4c:	b212      	sxth	r2, r2
  41ce4e:	e685      	b.n	41cb5c <tabview_win_shared_init+0xd0>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41ce50:	2000      	movs	r0, #0
  41ce52:	4b89      	ldr	r3, [pc, #548]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41ce54:	4798      	blx	r3
  41ce56:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41ce5a:	3050      	adds	r0, #80	; 0x50
  41ce5c:	4b87      	ldr	r3, [pc, #540]	; (41d07c <tabview_win_shared_init+0x5f0>)
  41ce5e:	fb83 2300 	smull	r2, r3, r3, r0
  41ce62:	17c2      	asrs	r2, r0, #31
  41ce64:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ce68:	b212      	sxth	r2, r2
  41ce6a:	e689      	b.n	41cb80 <tabview_win_shared_init+0xf4>
  41ce6c:	f04f 0207 	mov.w	r2, #7
  41ce70:	231c      	movs	r3, #28
  41ce72:	f363 02c7 	bfi	r2, r3, #3, #5
  41ce76:	231d      	movs	r3, #29
  41ce78:	f363 220c 	bfi	r2, r3, #8, #5
  41ce7c:	2302      	movs	r3, #2
  41ce7e:	f363 324f 	bfi	r2, r3, #13, #3
  41ce82:	e6b7      	b.n	41cbf4 <tabview_win_shared_init+0x168>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41ce84:	2000      	movs	r0, #0
  41ce86:	4b7c      	ldr	r3, [pc, #496]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41ce88:	4798      	blx	r3
  41ce8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41ce8e:	0080      	lsls	r0, r0, #2
  41ce90:	3050      	adds	r0, #80	; 0x50
  41ce92:	4b7a      	ldr	r3, [pc, #488]	; (41d07c <tabview_win_shared_init+0x5f0>)
  41ce94:	fb83 2300 	smull	r2, r3, r3, r0
  41ce98:	17c2      	asrs	r2, r0, #31
  41ce9a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ce9e:	b212      	sxth	r2, r2
  41cea0:	e6bb      	b.n	41cc1a <tabview_win_shared_init+0x18e>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41cea2:	2000      	movs	r0, #0
  41cea4:	4b74      	ldr	r3, [pc, #464]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41cea6:	4798      	blx	r3
  41cea8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41ceac:	0080      	lsls	r0, r0, #2
  41ceae:	3050      	adds	r0, #80	; 0x50
  41ceb0:	4b72      	ldr	r3, [pc, #456]	; (41d07c <tabview_win_shared_init+0x5f0>)
  41ceb2:	fb83 2300 	smull	r2, r3, r3, r0
  41ceb6:	17c2      	asrs	r2, r0, #31
  41ceb8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41cebc:	b212      	sxth	r2, r2
  41cebe:	e6bf      	b.n	41cc40 <tabview_win_shared_init+0x1b4>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
  41cec0:	2000      	movs	r0, #0
  41cec2:	4b6d      	ldr	r3, [pc, #436]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41cec4:	4798      	blx	r3
  41cec6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41ceca:	3050      	adds	r0, #80	; 0x50
  41cecc:	4b6b      	ldr	r3, [pc, #428]	; (41d07c <tabview_win_shared_init+0x5f0>)
  41cece:	fb83 2300 	smull	r2, r3, r3, r0
  41ced2:	17c2      	asrs	r2, r0, #31
  41ced4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ced8:	b212      	sxth	r2, r2
  41ceda:	e6e6      	b.n	41ccaa <tabview_win_shared_init+0x21e>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41cedc:	2000      	movs	r0, #0
  41cede:	4b66      	ldr	r3, [pc, #408]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41cee0:	4798      	blx	r3
  41cee2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cee6:	3050      	adds	r0, #80	; 0x50
  41cee8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ceec:	da01      	bge.n	41cef2 <tabview_win_shared_init+0x466>
  41ceee:	2201      	movs	r2, #1
  41cef0:	e6fe      	b.n	41ccf0 <tabview_win_shared_init+0x264>
  41cef2:	2000      	movs	r0, #0
  41cef4:	4b60      	ldr	r3, [pc, #384]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41cef6:	4798      	blx	r3
  41cef8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cefc:	3050      	adds	r0, #80	; 0x50
  41cefe:	4b5f      	ldr	r3, [pc, #380]	; (41d07c <tabview_win_shared_init+0x5f0>)
  41cf00:	fb83 2300 	smull	r2, r3, r3, r0
  41cf04:	17c2      	asrs	r2, r0, #31
  41cf06:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41cf0a:	b212      	sxth	r2, r2
  41cf0c:	e6f0      	b.n	41ccf0 <tabview_win_shared_init+0x264>
  41cf0e:	2000      	movs	r0, #0
  41cf10:	4b59      	ldr	r3, [pc, #356]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41cf12:	4798      	blx	r3
  41cf14:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cf18:	0040      	lsls	r0, r0, #1
  41cf1a:	3050      	adds	r0, #80	; 0x50
  41cf1c:	4b57      	ldr	r3, [pc, #348]	; (41d07c <tabview_win_shared_init+0x5f0>)
  41cf1e:	fb83 2300 	smull	r2, r3, r3, r0
  41cf22:	17c2      	asrs	r2, r0, #31
  41cf24:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41cf28:	b212      	sxth	r2, r2
  41cf2a:	e6e1      	b.n	41ccf0 <tabview_win_shared_init+0x264>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41cf2c:	2000      	movs	r0, #0
  41cf2e:	4b52      	ldr	r3, [pc, #328]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41cf30:	4798      	blx	r3
  41cf32:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cf36:	3050      	adds	r0, #80	; 0x50
  41cf38:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cf3c:	da01      	bge.n	41cf42 <tabview_win_shared_init+0x4b6>
  41cf3e:	2201      	movs	r2, #1
  41cf40:	e6ef      	b.n	41cd22 <tabview_win_shared_init+0x296>
  41cf42:	2000      	movs	r0, #0
  41cf44:	4b4c      	ldr	r3, [pc, #304]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41cf46:	4798      	blx	r3
  41cf48:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cf4c:	3050      	adds	r0, #80	; 0x50
  41cf4e:	4b4b      	ldr	r3, [pc, #300]	; (41d07c <tabview_win_shared_init+0x5f0>)
  41cf50:	fb83 2300 	smull	r2, r3, r3, r0
  41cf54:	17c2      	asrs	r2, r0, #31
  41cf56:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41cf5a:	b212      	sxth	r2, r2
  41cf5c:	e6e1      	b.n	41cd22 <tabview_win_shared_init+0x296>
  41cf5e:	2000      	movs	r0, #0
  41cf60:	4b45      	ldr	r3, [pc, #276]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41cf62:	4798      	blx	r3
  41cf64:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cf68:	0040      	lsls	r0, r0, #1
  41cf6a:	3050      	adds	r0, #80	; 0x50
  41cf6c:	4b43      	ldr	r3, [pc, #268]	; (41d07c <tabview_win_shared_init+0x5f0>)
  41cf6e:	fb83 2300 	smull	r2, r3, r3, r0
  41cf72:	17c2      	asrs	r2, r0, #31
  41cf74:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41cf78:	b212      	sxth	r2, r2
  41cf7a:	e6d2      	b.n	41cd22 <tabview_win_shared_init+0x296>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41cf7c:	2000      	movs	r0, #0
  41cf7e:	4b3e      	ldr	r3, [pc, #248]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41cf80:	4798      	blx	r3
  41cf82:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cf86:	3050      	adds	r0, #80	; 0x50
  41cf88:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cf8c:	da01      	bge.n	41cf92 <tabview_win_shared_init+0x506>
  41cf8e:	2201      	movs	r2, #1
  41cf90:	e6e0      	b.n	41cd54 <tabview_win_shared_init+0x2c8>
  41cf92:	2000      	movs	r0, #0
  41cf94:	4b38      	ldr	r3, [pc, #224]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41cf96:	4798      	blx	r3
  41cf98:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cf9c:	3050      	adds	r0, #80	; 0x50
  41cf9e:	4b37      	ldr	r3, [pc, #220]	; (41d07c <tabview_win_shared_init+0x5f0>)
  41cfa0:	fb83 2300 	smull	r2, r3, r3, r0
  41cfa4:	17c2      	asrs	r2, r0, #31
  41cfa6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41cfaa:	b212      	sxth	r2, r2
  41cfac:	e6d2      	b.n	41cd54 <tabview_win_shared_init+0x2c8>
  41cfae:	2000      	movs	r0, #0
  41cfb0:	4b31      	ldr	r3, [pc, #196]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41cfb2:	4798      	blx	r3
  41cfb4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cfb8:	0040      	lsls	r0, r0, #1
  41cfba:	3050      	adds	r0, #80	; 0x50
  41cfbc:	4b2f      	ldr	r3, [pc, #188]	; (41d07c <tabview_win_shared_init+0x5f0>)
  41cfbe:	fb83 2300 	smull	r2, r3, r3, r0
  41cfc2:	17c2      	asrs	r2, r0, #31
  41cfc4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41cfc8:	b212      	sxth	r2, r2
  41cfca:	e6c3      	b.n	41cd54 <tabview_win_shared_init+0x2c8>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41cfcc:	2000      	movs	r0, #0
  41cfce:	4b2a      	ldr	r3, [pc, #168]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41cfd0:	4798      	blx	r3
  41cfd2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cfd6:	3050      	adds	r0, #80	; 0x50
  41cfd8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cfdc:	da01      	bge.n	41cfe2 <tabview_win_shared_init+0x556>
  41cfde:	2201      	movs	r2, #1
  41cfe0:	e6e2      	b.n	41cda8 <tabview_win_shared_init+0x31c>
  41cfe2:	2000      	movs	r0, #0
  41cfe4:	4b24      	ldr	r3, [pc, #144]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41cfe6:	4798      	blx	r3
  41cfe8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cfec:	3050      	adds	r0, #80	; 0x50
  41cfee:	4b23      	ldr	r3, [pc, #140]	; (41d07c <tabview_win_shared_init+0x5f0>)
  41cff0:	fb83 2300 	smull	r2, r3, r3, r0
  41cff4:	17c2      	asrs	r2, r0, #31
  41cff6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41cffa:	b212      	sxth	r2, r2
  41cffc:	e6d4      	b.n	41cda8 <tabview_win_shared_init+0x31c>
  41cffe:	2000      	movs	r0, #0
  41d000:	4b1d      	ldr	r3, [pc, #116]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41d002:	4798      	blx	r3
  41d004:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d008:	0040      	lsls	r0, r0, #1
  41d00a:	3050      	adds	r0, #80	; 0x50
  41d00c:	4b1b      	ldr	r3, [pc, #108]	; (41d07c <tabview_win_shared_init+0x5f0>)
  41d00e:	fb83 2300 	smull	r2, r3, r3, r0
  41d012:	17c2      	asrs	r2, r0, #31
  41d014:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d018:	b212      	sxth	r2, r2
  41d01a:	e6c5      	b.n	41cda8 <tabview_win_shared_init+0x31c>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41d01c:	2000      	movs	r0, #0
  41d01e:	4b16      	ldr	r3, [pc, #88]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41d020:	4798      	blx	r3
  41d022:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d026:	3050      	adds	r0, #80	; 0x50
  41d028:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d02c:	da01      	bge.n	41d032 <tabview_win_shared_init+0x5a6>
  41d02e:	2201      	movs	r2, #1
  41d030:	e6d3      	b.n	41cdda <tabview_win_shared_init+0x34e>
  41d032:	2000      	movs	r0, #0
  41d034:	4b10      	ldr	r3, [pc, #64]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41d036:	4798      	blx	r3
  41d038:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d03c:	3050      	adds	r0, #80	; 0x50
  41d03e:	4b0f      	ldr	r3, [pc, #60]	; (41d07c <tabview_win_shared_init+0x5f0>)
  41d040:	fb83 2300 	smull	r2, r3, r3, r0
  41d044:	17c2      	asrs	r2, r0, #31
  41d046:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d04a:	b212      	sxth	r2, r2
  41d04c:	e6c5      	b.n	41cdda <tabview_win_shared_init+0x34e>
  41d04e:	2000      	movs	r0, #0
  41d050:	4b09      	ldr	r3, [pc, #36]	; (41d078 <tabview_win_shared_init+0x5ec>)
  41d052:	4798      	blx	r3
  41d054:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d058:	0040      	lsls	r0, r0, #1
  41d05a:	3050      	adds	r0, #80	; 0x50
  41d05c:	4b07      	ldr	r3, [pc, #28]	; (41d07c <tabview_win_shared_init+0x5f0>)
  41d05e:	fb83 2300 	smull	r2, r3, r3, r0
  41d062:	17c2      	asrs	r2, r0, #31
  41d064:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d068:	b212      	sxth	r2, r2
  41d06a:	e6b6      	b.n	41cdda <tabview_win_shared_init+0x34e>
  41d06c:	0040a121 	.word	0x0040a121
  41d070:	2041480c 	.word	0x2041480c
  41d074:	00415c9d 	.word	0x00415c9d
  41d078:	00415c7d 	.word	0x00415c7d
  41d07c:	66666667 	.word	0x66666667

0041d080 <led_init>:
{
  41d080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    style_init_reset(&styles->led);
  41d084:	4c3a      	ldr	r4, [pc, #232]	; (41d170 <led_init+0xf0>)
  41d086:	6820      	ldr	r0, [r4, #0]
  41d088:	3070      	adds	r0, #112	; 0x70
  41d08a:	4b3a      	ldr	r3, [pc, #232]	; (41d174 <led_init+0xf4>)
  41d08c:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_COVER);
  41d08e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41d090:	22ff      	movs	r2, #255	; 0xff
  41d092:	212c      	movs	r1, #44	; 0x2c
  41d094:	3070      	adds	r0, #112	; 0x70
  41d096:	4d38      	ldr	r5, [pc, #224]	; (41d178 <led_init+0xf8>)
  41d098:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
  41d09a:	6820      	ldr	r0, [r4, #0]
  41d09c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 41d18c <led_init+0x10c>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41d0a0:	f8b8 200c 	ldrh.w	r2, [r8, #12]
  41d0a4:	2129      	movs	r1, #41	; 0x29
  41d0a6:	3070      	adds	r0, #112	; 0x70
  41d0a8:	4f34      	ldr	r7, [pc, #208]	; (41d17c <led_init+0xfc>)
  41d0aa:	47b8      	blx	r7
    lv_style_set_border_width(&styles->led, LV_STATE_DEFAULT, 2);
  41d0ac:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41d0ae:	2202      	movs	r2, #2
  41d0b0:	2130      	movs	r1, #48	; 0x30
  41d0b2:	3070      	adds	r0, #112	; 0x70
  41d0b4:	4e32      	ldr	r6, [pc, #200]	; (41d180 <led_init+0x100>)
  41d0b6:	47b0      	blx	r6
    lv_style_set_border_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_50);
  41d0b8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  41d0ba:	227f      	movs	r2, #127	; 0x7f
  41d0bc:	213c      	movs	r1, #60	; 0x3c
  41d0be:	3070      	adds	r0, #112	; 0x70
  41d0c0:	47a8      	blx	r5
    lv_style_set_border_color(&styles->led, LV_STATE_DEFAULT, lv_color_lighten(theme.color_primary, LV_OPA_30));
  41d0c2:	6825      	ldr	r5, [r4, #0]
  41d0c4:	3570      	adds	r5, #112	; 0x70
  41d0c6:	214c      	movs	r1, #76	; 0x4c
  41d0c8:	f8b8 000c 	ldrh.w	r0, [r8, #12]
  41d0cc:	4b2d      	ldr	r3, [pc, #180]	; (41d184 <led_init+0x104>)
  41d0ce:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41d0d0:	4602      	mov	r2, r0
  41d0d2:	2139      	movs	r1, #57	; 0x39
  41d0d4:	4628      	mov	r0, r5
  41d0d6:	47b8      	blx	r7
    lv_style_set_radius(&styles->led, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41d0d8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41d0da:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41d0de:	2101      	movs	r1, #1
  41d0e0:	3070      	adds	r0, #112	; 0x70
  41d0e2:	47b0      	blx	r6
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
  41d0e4:	6824      	ldr	r4, [r4, #0]
  41d0e6:	3470      	adds	r4, #112	; 0x70
  41d0e8:	2000      	movs	r0, #0
  41d0ea:	4b27      	ldr	r3, [pc, #156]	; (41d188 <led_init+0x108>)
  41d0ec:	4798      	blx	r3
  41d0ee:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d0f2:	3050      	adds	r0, #80	; 0x50
  41d0f4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d0f8:	da1e      	bge.n	41d138 <led_init+0xb8>
  41d0fa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  41d0fc:	2150      	movs	r1, #80	; 0x50
  41d0fe:	4620      	mov	r0, r4
  41d100:	4b1f      	ldr	r3, [pc, #124]	; (41d180 <led_init+0x100>)
  41d102:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
  41d104:	4c1a      	ldr	r4, [pc, #104]	; (41d170 <led_init+0xf0>)
  41d106:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  41d108:	4b20      	ldr	r3, [pc, #128]	; (41d18c <led_init+0x10c>)
  41d10a:	899a      	ldrh	r2, [r3, #12]
  41d10c:	2159      	movs	r1, #89	; 0x59
  41d10e:	3070      	adds	r0, #112	; 0x70
  41d110:	4b1a      	ldr	r3, [pc, #104]	; (41d17c <led_init+0xfc>)
  41d112:	4798      	blx	r3
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
  41d114:	6824      	ldr	r4, [r4, #0]
  41d116:	3470      	adds	r4, #112	; 0x70
  41d118:	2000      	movs	r0, #0
  41d11a:	4b1b      	ldr	r3, [pc, #108]	; (41d188 <led_init+0x108>)
  41d11c:	4798      	blx	r3
  41d11e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d122:	3050      	adds	r0, #80	; 0x50
  41d124:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d128:	da14      	bge.n	41d154 <led_init+0xd4>
  41d12a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  41d12c:	2153      	movs	r1, #83	; 0x53
  41d12e:	4620      	mov	r0, r4
  41d130:	4b13      	ldr	r3, [pc, #76]	; (41d180 <led_init+0x100>)
  41d132:	4798      	blx	r3
  41d134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
  41d138:	2000      	movs	r0, #0
  41d13a:	4b13      	ldr	r3, [pc, #76]	; (41d188 <led_init+0x108>)
  41d13c:	4798      	blx	r3
  41d13e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d142:	3050      	adds	r0, #80	; 0x50
  41d144:	4b12      	ldr	r3, [pc, #72]	; (41d190 <led_init+0x110>)
  41d146:	fb83 2300 	smull	r2, r3, r3, r0
  41d14a:	17c2      	asrs	r2, r0, #31
  41d14c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d150:	b212      	sxth	r2, r2
  41d152:	e7d3      	b.n	41d0fc <led_init+0x7c>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
  41d154:	2000      	movs	r0, #0
  41d156:	4b0c      	ldr	r3, [pc, #48]	; (41d188 <led_init+0x108>)
  41d158:	4798      	blx	r3
  41d15a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d15e:	3050      	adds	r0, #80	; 0x50
  41d160:	4b0b      	ldr	r3, [pc, #44]	; (41d190 <led_init+0x110>)
  41d162:	fb83 2300 	smull	r2, r3, r3, r0
  41d166:	17c2      	asrs	r2, r0, #31
  41d168:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d16c:	b212      	sxth	r2, r2
  41d16e:	e7dd      	b.n	41d12c <led_init+0xac>
  41d170:	2041480c 	.word	0x2041480c
  41d174:	004198fd 	.word	0x004198fd
  41d178:	0040a441 	.word	0x0040a441
  41d17c:	0040a2b1 	.word	0x0040a2b1
  41d180:	0040a121 	.word	0x0040a121
  41d184:	00416ca1 	.word	0x00416ca1
  41d188:	00415c7d 	.word	0x00415c7d
  41d18c:	20414810 	.word	0x20414810
  41d190:	66666667 	.word	0x66666667

0041d194 <basic_init>:
{
  41d194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->scr);
  41d196:	4cc2      	ldr	r4, [pc, #776]	; (41d4a0 <basic_init+0x30c>)
  41d198:	6820      	ldr	r0, [r4, #0]
  41d19a:	4bc2      	ldr	r3, [pc, #776]	; (41d4a4 <basic_init+0x310>)
  41d19c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41d19e:	22ff      	movs	r2, #255	; 0xff
  41d1a0:	212c      	movs	r1, #44	; 0x2c
  41d1a2:	6820      	ldr	r0, [r4, #0]
  41d1a4:	4bc0      	ldr	r3, [pc, #768]	; (41d4a8 <basic_init+0x314>)
  41d1a6:	4798      	blx	r3
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
  41d1a8:	6820      	ldr	r0, [r4, #0]
  41d1aa:	4bc0      	ldr	r3, [pc, #768]	; (41d4ac <basic_init+0x318>)
  41d1ac:	6a1b      	ldr	r3, [r3, #32]
  41d1ae:	f013 0f02 	tst.w	r3, #2
  41d1b2:	f000 8742 	beq.w	41e03a <basic_init+0xea6>
  41d1b6:	f04f 0207 	mov.w	r2, #7
  41d1ba:	231d      	movs	r3, #29
  41d1bc:	f363 02c7 	bfi	r2, r3, #3, #5
  41d1c0:	231e      	movs	r3, #30
  41d1c2:	f363 220c 	bfi	r2, r3, #8, #5
  41d1c6:	2303      	movs	r3, #3
  41d1c8:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41d1cc:	2129      	movs	r1, #41	; 0x29
  41d1ce:	4bb8      	ldr	r3, [pc, #736]	; (41d4b0 <basic_init+0x31c>)
  41d1d0:	4798      	blx	r3
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41d1d2:	4bb3      	ldr	r3, [pc, #716]	; (41d4a0 <basic_init+0x30c>)
  41d1d4:	6818      	ldr	r0, [r3, #0]
  41d1d6:	4bb5      	ldr	r3, [pc, #724]	; (41d4ac <basic_init+0x318>)
  41d1d8:	6a1b      	ldr	r3, [r3, #32]
  41d1da:	f013 0f02 	tst.w	r3, #2
  41d1de:	f000 873b 	beq.w	41e058 <basic_init+0xec4>
  41d1e2:	f04f 0200 	mov.w	r2, #0
  41d1e6:	2301      	movs	r3, #1
  41d1e8:	f363 0202 	bfi	r2, r3, #0, #3
  41d1ec:	2307      	movs	r3, #7
  41d1ee:	f363 02c7 	bfi	r2, r3, #3, #5
  41d1f2:	2308      	movs	r3, #8
  41d1f4:	f363 220c 	bfi	r2, r3, #8, #5
  41d1f8:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41d1fc:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41d200:	f248 0189 	movw	r1, #32905	; 0x8089
  41d204:	4baa      	ldr	r3, [pc, #680]	; (41d4b0 <basic_init+0x31c>)
  41d206:	4798      	blx	r3
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41d208:	4ba5      	ldr	r3, [pc, #660]	; (41d4a0 <basic_init+0x30c>)
  41d20a:	6818      	ldr	r0, [r3, #0]
  41d20c:	4ba7      	ldr	r3, [pc, #668]	; (41d4ac <basic_init+0x318>)
  41d20e:	6a1b      	ldr	r3, [r3, #32]
  41d210:	f013 0f02 	tst.w	r3, #2
  41d214:	f000 872d 	beq.w	41e072 <basic_init+0xede>
  41d218:	f04f 0200 	mov.w	r2, #0
  41d21c:	2301      	movs	r3, #1
  41d21e:	f363 0202 	bfi	r2, r3, #0, #3
  41d222:	2307      	movs	r3, #7
  41d224:	f363 02c7 	bfi	r2, r3, #3, #5
  41d228:	2308      	movs	r3, #8
  41d22a:	f363 220c 	bfi	r2, r3, #8, #5
  41d22e:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41d232:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41d236:	2179      	movs	r1, #121	; 0x79
  41d238:	4b9d      	ldr	r3, [pc, #628]	; (41d4b0 <basic_init+0x31c>)
  41d23a:	4798      	blx	r3
    lv_style_set_text_sel_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41d23c:	4b98      	ldr	r3, [pc, #608]	; (41d4a0 <basic_init+0x30c>)
  41d23e:	6818      	ldr	r0, [r3, #0]
  41d240:	4b9a      	ldr	r3, [pc, #616]	; (41d4ac <basic_init+0x318>)
  41d242:	6a1b      	ldr	r3, [r3, #32]
  41d244:	f013 0f02 	tst.w	r3, #2
  41d248:	f000 8720 	beq.w	41e08c <basic_init+0xef8>
  41d24c:	f04f 0200 	mov.w	r2, #0
  41d250:	2301      	movs	r3, #1
  41d252:	f363 0202 	bfi	r2, r3, #0, #3
  41d256:	2307      	movs	r3, #7
  41d258:	f363 02c7 	bfi	r2, r3, #3, #5
  41d25c:	2308      	movs	r3, #8
  41d25e:	f363 220c 	bfi	r2, r3, #8, #5
  41d262:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41d266:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
  41d26a:	f248 018a 	movw	r1, #32906	; 0x808a
  41d26e:	4e90      	ldr	r6, [pc, #576]	; (41d4b0 <basic_init+0x31c>)
  41d270:	47b0      	blx	r6
    lv_style_set_text_sel_bg_color(&styles->scr, LV_STATE_DEFAULT, theme.color_primary);
  41d272:	4c8b      	ldr	r4, [pc, #556]	; (41d4a0 <basic_init+0x30c>)
  41d274:	4d8d      	ldr	r5, [pc, #564]	; (41d4ac <basic_init+0x318>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
  41d276:	89aa      	ldrh	r2, [r5, #12]
  41d278:	f248 018b 	movw	r1, #32907	; 0x808b
  41d27c:	6820      	ldr	r0, [r4, #0]
  41d27e:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  41d280:	696a      	ldr	r2, [r5, #20]
  41d282:	217e      	movs	r1, #126	; 0x7e
  41d284:	6820      	ldr	r0, [r4, #0]
  41d286:	4b8b      	ldr	r3, [pc, #556]	; (41d4b4 <basic_init+0x320>)
  41d288:	4798      	blx	r3
    style_init_reset(&styles->bg);
  41d28a:	6820      	ldr	r0, [r4, #0]
  41d28c:	3004      	adds	r0, #4
  41d28e:	4b85      	ldr	r3, [pc, #532]	; (41d4a4 <basic_init+0x310>)
  41d290:	4798      	blx	r3
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
  41d292:	6824      	ldr	r4, [r4, #0]
  41d294:	3404      	adds	r4, #4
  41d296:	2000      	movs	r0, #0
  41d298:	4b87      	ldr	r3, [pc, #540]	; (41d4b8 <basic_init+0x324>)
  41d29a:	4798      	blx	r3
  41d29c:	300a      	adds	r0, #10
  41d29e:	00c0      	lsls	r0, r0, #3
  41d2a0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d2a4:	f280 86ff 	bge.w	41e0a6 <basic_init+0xf12>
  41d2a8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41d2aa:	2101      	movs	r1, #1
  41d2ac:	4620      	mov	r0, r4
  41d2ae:	4b83      	ldr	r3, [pc, #524]	; (41d4bc <basic_init+0x328>)
  41d2b0:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41d2b2:	4c7b      	ldr	r4, [pc, #492]	; (41d4a0 <basic_init+0x30c>)
  41d2b4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41d2b6:	22ff      	movs	r2, #255	; 0xff
  41d2b8:	212c      	movs	r1, #44	; 0x2c
  41d2ba:	3004      	adds	r0, #4
  41d2bc:	4b7a      	ldr	r3, [pc, #488]	; (41d4a8 <basic_init+0x314>)
  41d2be:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
  41d2c0:	6820      	ldr	r0, [r4, #0]
  41d2c2:	3004      	adds	r0, #4
  41d2c4:	4b79      	ldr	r3, [pc, #484]	; (41d4ac <basic_init+0x318>)
  41d2c6:	6a1b      	ldr	r3, [r3, #32]
  41d2c8:	f013 0f02 	tst.w	r3, #2
  41d2cc:	f000 86f9 	beq.w	41e0c2 <basic_init+0xf2e>
  41d2d0:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41d2d4:	2129      	movs	r1, #41	; 0x29
  41d2d6:	4b76      	ldr	r3, [pc, #472]	; (41d4b0 <basic_init+0x31c>)
  41d2d8:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41d2da:	4b71      	ldr	r3, [pc, #452]	; (41d4a0 <basic_init+0x30c>)
  41d2dc:	6818      	ldr	r0, [r3, #0]
  41d2de:	3004      	adds	r0, #4
  41d2e0:	4b72      	ldr	r3, [pc, #456]	; (41d4ac <basic_init+0x318>)
  41d2e2:	6a1b      	ldr	r3, [r3, #32]
  41d2e4:	f013 0f02 	tst.w	r3, #2
  41d2e8:	f000 86fa 	beq.w	41e0e0 <basic_init+0xf4c>
  41d2ec:	f04f 0200 	mov.w	r2, #0
  41d2f0:	2306      	movs	r3, #6
  41d2f2:	f363 0202 	bfi	r2, r3, #0, #3
  41d2f6:	231a      	movs	r3, #26
  41d2f8:	f363 02c7 	bfi	r2, r3, #3, #5
  41d2fc:	231c      	movs	r3, #28
  41d2fe:	f363 220c 	bfi	r2, r3, #8, #5
  41d302:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41d306:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41d30a:	2139      	movs	r1, #57	; 0x39
  41d30c:	4b68      	ldr	r3, [pc, #416]	; (41d4b0 <basic_init+0x31c>)
  41d30e:	4798      	blx	r3
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
  41d310:	4b66      	ldr	r3, [pc, #408]	; (41d4ac <basic_init+0x318>)
  41d312:	6a1b      	ldr	r3, [r3, #32]
  41d314:	f013 0f20 	tst.w	r3, #32
  41d318:	f000 86f2 	beq.w	41e100 <basic_init+0xf6c>
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
  41d31c:	4c60      	ldr	r4, [pc, #384]	; (41d4a0 <basic_init+0x30c>)
  41d31e:	6820      	ldr	r0, [r4, #0]
  41d320:	4b62      	ldr	r3, [pc, #392]	; (41d4ac <basic_init+0x318>)
  41d322:	89da      	ldrh	r2, [r3, #14]
  41d324:	f240 4139 	movw	r1, #1081	; 0x439
  41d328:	3004      	adds	r0, #4
  41d32a:	4b61      	ldr	r3, [pc, #388]	; (41d4b0 <basic_init+0x31c>)
  41d32c:	4798      	blx	r3
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
  41d32e:	6824      	ldr	r4, [r4, #0]
  41d330:	3404      	adds	r4, #4
  41d332:	2000      	movs	r0, #0
  41d334:	4b60      	ldr	r3, [pc, #384]	; (41d4b8 <basic_init+0x324>)
  41d336:	4798      	blx	r3
  41d338:	3028      	adds	r0, #40	; 0x28
  41d33a:	0040      	lsls	r0, r0, #1
  41d33c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d340:	f280 86e9 	bge.w	41e116 <basic_init+0xf82>
  41d344:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41d346:	2130      	movs	r1, #48	; 0x30
  41d348:	4620      	mov	r0, r4
  41d34a:	4d5c      	ldr	r5, [pc, #368]	; (41d4bc <basic_init+0x328>)
  41d34c:	47a8      	blx	r5
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
  41d34e:	4c54      	ldr	r4, [pc, #336]	; (41d4a0 <basic_init+0x30c>)
  41d350:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  41d352:	2201      	movs	r2, #1
  41d354:	2133      	movs	r1, #51	; 0x33
  41d356:	3004      	adds	r0, #4
  41d358:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41d35a:	6820      	ldr	r0, [r4, #0]
  41d35c:	3004      	adds	r0, #4
  41d35e:	4b53      	ldr	r3, [pc, #332]	; (41d4ac <basic_init+0x318>)
  41d360:	6a1b      	ldr	r3, [r3, #32]
  41d362:	f013 0f02 	tst.w	r3, #2
  41d366:	f000 86e4 	beq.w	41e132 <basic_init+0xf9e>
  41d36a:	f04f 0200 	mov.w	r2, #0
  41d36e:	2301      	movs	r3, #1
  41d370:	f363 0202 	bfi	r2, r3, #0, #3
  41d374:	2307      	movs	r3, #7
  41d376:	f363 02c7 	bfi	r2, r3, #3, #5
  41d37a:	2308      	movs	r3, #8
  41d37c:	f363 220c 	bfi	r2, r3, #8, #5
  41d380:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41d384:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41d388:	f248 0189 	movw	r1, #32905	; 0x8089
  41d38c:	4b48      	ldr	r3, [pc, #288]	; (41d4b0 <basic_init+0x31c>)
  41d38e:	4798      	blx	r3
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
  41d390:	4d43      	ldr	r5, [pc, #268]	; (41d4a0 <basic_init+0x30c>)
  41d392:	6828      	ldr	r0, [r5, #0]
  41d394:	4c45      	ldr	r4, [pc, #276]	; (41d4ac <basic_init+0x318>)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  41d396:	6962      	ldr	r2, [r4, #20]
  41d398:	217e      	movs	r1, #126	; 0x7e
  41d39a:	3004      	adds	r0, #4
  41d39c:	4b45      	ldr	r3, [pc, #276]	; (41d4b4 <basic_init+0x320>)
  41d39e:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41d3a0:	6828      	ldr	r0, [r5, #0]
  41d3a2:	3004      	adds	r0, #4
  41d3a4:	6a23      	ldr	r3, [r4, #32]
  41d3a6:	f013 0f02 	tst.w	r3, #2
  41d3aa:	f000 86c6 	beq.w	41e13a <basic_init+0xfa6>
  41d3ae:	f04f 0200 	mov.w	r2, #0
  41d3b2:	2301      	movs	r3, #1
  41d3b4:	f363 0202 	bfi	r2, r3, #0, #3
  41d3b8:	2307      	movs	r3, #7
  41d3ba:	f363 02c7 	bfi	r2, r3, #3, #5
  41d3be:	2308      	movs	r3, #8
  41d3c0:	f363 220c 	bfi	r2, r3, #8, #5
  41d3c4:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41d3c8:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41d3cc:	2179      	movs	r1, #121	; 0x79
  41d3ce:	4b38      	ldr	r3, [pc, #224]	; (41d4b0 <basic_init+0x31c>)
  41d3d0:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41d3d2:	4b33      	ldr	r3, [pc, #204]	; (41d4a0 <basic_init+0x30c>)
  41d3d4:	6818      	ldr	r0, [r3, #0]
  41d3d6:	3004      	adds	r0, #4
  41d3d8:	4b34      	ldr	r3, [pc, #208]	; (41d4ac <basic_init+0x318>)
  41d3da:	6a1b      	ldr	r3, [r3, #32]
  41d3dc:	f013 0f02 	tst.w	r3, #2
  41d3e0:	f000 86af 	beq.w	41e142 <basic_init+0xfae>
  41d3e4:	f04f 0200 	mov.w	r2, #0
  41d3e8:	2301      	movs	r3, #1
  41d3ea:	f363 0202 	bfi	r2, r3, #0, #3
  41d3ee:	2307      	movs	r3, #7
  41d3f0:	f363 02c7 	bfi	r2, r3, #3, #5
  41d3f4:	2308      	movs	r3, #8
  41d3f6:	f363 220c 	bfi	r2, r3, #8, #5
  41d3fa:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41d3fe:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41d402:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41d406:	4b2a      	ldr	r3, [pc, #168]	; (41d4b0 <basic_init+0x31c>)
  41d408:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41d40a:	4b25      	ldr	r3, [pc, #148]	; (41d4a0 <basic_init+0x30c>)
  41d40c:	6818      	ldr	r0, [r3, #0]
  41d40e:	3004      	adds	r0, #4
  41d410:	4b26      	ldr	r3, [pc, #152]	; (41d4ac <basic_init+0x318>)
  41d412:	6a1b      	ldr	r3, [r3, #32]
  41d414:	f013 0f02 	tst.w	r3, #2
  41d418:	f000 8697 	beq.w	41e14a <basic_init+0xfb6>
  41d41c:	f04f 0200 	mov.w	r2, #0
  41d420:	2301      	movs	r3, #1
  41d422:	f363 0202 	bfi	r2, r3, #0, #3
  41d426:	2307      	movs	r3, #7
  41d428:	f363 02c7 	bfi	r2, r3, #3, #5
  41d42c:	2308      	movs	r3, #8
  41d42e:	f363 220c 	bfi	r2, r3, #8, #5
  41d432:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41d436:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41d43a:	2199      	movs	r1, #153	; 0x99
  41d43c:	4b1c      	ldr	r3, [pc, #112]	; (41d4b0 <basic_init+0x31c>)
  41d43e:	4798      	blx	r3
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
  41d440:	4c17      	ldr	r4, [pc, #92]	; (41d4a0 <basic_init+0x30c>)
  41d442:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41d444:	2201      	movs	r2, #1
  41d446:	2190      	movs	r1, #144	; 0x90
  41d448:	3004      	adds	r0, #4
  41d44a:	4b1c      	ldr	r3, [pc, #112]	; (41d4bc <basic_init+0x328>)
  41d44c:	4798      	blx	r3
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41d44e:	6825      	ldr	r5, [r4, #0]
  41d450:	3504      	adds	r5, #4
  41d452:	2000      	movs	r0, #0
  41d454:	4b1a      	ldr	r3, [pc, #104]	; (41d4c0 <basic_init+0x32c>)
  41d456:	4798      	blx	r3
  41d458:	2801      	cmp	r0, #1
  41d45a:	f240 867a 	bls.w	41e152 <basic_init+0xfbe>
  41d45e:	2000      	movs	r0, #0
  41d460:	4b15      	ldr	r3, [pc, #84]	; (41d4b8 <basic_init+0x324>)
  41d462:	4798      	blx	r3
  41d464:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d468:	0040      	lsls	r0, r0, #1
  41d46a:	3050      	adds	r0, #80	; 0x50
  41d46c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d470:	f280 868a 	bge.w	41e188 <basic_init+0xff4>
  41d474:	2401      	movs	r4, #1
  41d476:	2000      	movs	r0, #0
  41d478:	4b0f      	ldr	r3, [pc, #60]	; (41d4b8 <basic_init+0x324>)
  41d47a:	4798      	blx	r3
  41d47c:	3028      	adds	r0, #40	; 0x28
  41d47e:	0040      	lsls	r0, r0, #1
  41d480:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d484:	f280 86a2 	bge.w	41e1cc <basic_init+0x1038>
  41d488:	2201      	movs	r2, #1
  41d48a:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41d48c:	b212      	sxth	r2, r2
  41d48e:	2112      	movs	r1, #18
  41d490:	4628      	mov	r0, r5
  41d492:	4b0a      	ldr	r3, [pc, #40]	; (41d4bc <basic_init+0x328>)
  41d494:	4798      	blx	r3
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41d496:	4b02      	ldr	r3, [pc, #8]	; (41d4a0 <basic_init+0x30c>)
  41d498:	681d      	ldr	r5, [r3, #0]
  41d49a:	3504      	adds	r5, #4
  41d49c:	e012      	b.n	41d4c4 <basic_init+0x330>
  41d49e:	bf00      	nop
  41d4a0:	2041480c 	.word	0x2041480c
  41d4a4:	004198fd 	.word	0x004198fd
  41d4a8:	0040a441 	.word	0x0040a441
  41d4ac:	20414810 	.word	0x20414810
  41d4b0:	0040a2b1 	.word	0x0040a2b1
  41d4b4:	0040a5d1 	.word	0x0040a5d1
  41d4b8:	00415c7d 	.word	0x00415c7d
  41d4bc:	0040a121 	.word	0x0040a121
  41d4c0:	00415c9d 	.word	0x00415c9d
  41d4c4:	2000      	movs	r0, #0
  41d4c6:	4bc2      	ldr	r3, [pc, #776]	; (41d7d0 <basic_init+0x63c>)
  41d4c8:	4798      	blx	r3
  41d4ca:	2801      	cmp	r0, #1
  41d4cc:	f240 868c 	bls.w	41e1e8 <basic_init+0x1054>
  41d4d0:	2000      	movs	r0, #0
  41d4d2:	4bc0      	ldr	r3, [pc, #768]	; (41d7d4 <basic_init+0x640>)
  41d4d4:	4798      	blx	r3
  41d4d6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d4da:	0040      	lsls	r0, r0, #1
  41d4dc:	3050      	adds	r0, #80	; 0x50
  41d4de:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d4e2:	f280 869c 	bge.w	41e21e <basic_init+0x108a>
  41d4e6:	2401      	movs	r4, #1
  41d4e8:	2000      	movs	r0, #0
  41d4ea:	4bba      	ldr	r3, [pc, #744]	; (41d7d4 <basic_init+0x640>)
  41d4ec:	4798      	blx	r3
  41d4ee:	3028      	adds	r0, #40	; 0x28
  41d4f0:	0040      	lsls	r0, r0, #1
  41d4f2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d4f6:	f280 86a2 	bge.w	41e23e <basic_init+0x10aa>
  41d4fa:	2201      	movs	r2, #1
  41d4fc:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41d4fe:	b212      	sxth	r2, r2
  41d500:	2113      	movs	r1, #19
  41d502:	4628      	mov	r0, r5
  41d504:	4bb4      	ldr	r3, [pc, #720]	; (41d7d8 <basic_init+0x644>)
  41d506:	4798      	blx	r3
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41d508:	4bb4      	ldr	r3, [pc, #720]	; (41d7dc <basic_init+0x648>)
  41d50a:	681d      	ldr	r5, [r3, #0]
  41d50c:	3504      	adds	r5, #4
  41d50e:	2000      	movs	r0, #0
  41d510:	4baf      	ldr	r3, [pc, #700]	; (41d7d0 <basic_init+0x63c>)
  41d512:	4798      	blx	r3
  41d514:	2801      	cmp	r0, #1
  41d516:	f240 86a0 	bls.w	41e25a <basic_init+0x10c6>
  41d51a:	2000      	movs	r0, #0
  41d51c:	4bad      	ldr	r3, [pc, #692]	; (41d7d4 <basic_init+0x640>)
  41d51e:	4798      	blx	r3
  41d520:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d524:	0040      	lsls	r0, r0, #1
  41d526:	3050      	adds	r0, #80	; 0x50
  41d528:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d52c:	f280 86b0 	bge.w	41e290 <basic_init+0x10fc>
  41d530:	2401      	movs	r4, #1
  41d532:	2000      	movs	r0, #0
  41d534:	4ba7      	ldr	r3, [pc, #668]	; (41d7d4 <basic_init+0x640>)
  41d536:	4798      	blx	r3
  41d538:	3028      	adds	r0, #40	; 0x28
  41d53a:	0040      	lsls	r0, r0, #1
  41d53c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d540:	f280 86b6 	bge.w	41e2b0 <basic_init+0x111c>
  41d544:	2201      	movs	r2, #1
  41d546:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41d548:	b212      	sxth	r2, r2
  41d54a:	2110      	movs	r1, #16
  41d54c:	4628      	mov	r0, r5
  41d54e:	4ba2      	ldr	r3, [pc, #648]	; (41d7d8 <basic_init+0x644>)
  41d550:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41d552:	4ba2      	ldr	r3, [pc, #648]	; (41d7dc <basic_init+0x648>)
  41d554:	681d      	ldr	r5, [r3, #0]
  41d556:	3504      	adds	r5, #4
  41d558:	2000      	movs	r0, #0
  41d55a:	4b9d      	ldr	r3, [pc, #628]	; (41d7d0 <basic_init+0x63c>)
  41d55c:	4798      	blx	r3
  41d55e:	2801      	cmp	r0, #1
  41d560:	f240 86b4 	bls.w	41e2cc <basic_init+0x1138>
  41d564:	2000      	movs	r0, #0
  41d566:	4b9b      	ldr	r3, [pc, #620]	; (41d7d4 <basic_init+0x640>)
  41d568:	4798      	blx	r3
  41d56a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d56e:	0040      	lsls	r0, r0, #1
  41d570:	3050      	adds	r0, #80	; 0x50
  41d572:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d576:	f280 86c4 	bge.w	41e302 <basic_init+0x116e>
  41d57a:	2401      	movs	r4, #1
  41d57c:	2000      	movs	r0, #0
  41d57e:	4b95      	ldr	r3, [pc, #596]	; (41d7d4 <basic_init+0x640>)
  41d580:	4798      	blx	r3
  41d582:	3028      	adds	r0, #40	; 0x28
  41d584:	0040      	lsls	r0, r0, #1
  41d586:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d58a:	f280 86ca 	bge.w	41e322 <basic_init+0x118e>
  41d58e:	2201      	movs	r2, #1
  41d590:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41d592:	b212      	sxth	r2, r2
  41d594:	2111      	movs	r1, #17
  41d596:	4628      	mov	r0, r5
  41d598:	4b8f      	ldr	r3, [pc, #572]	; (41d7d8 <basic_init+0x644>)
  41d59a:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
  41d59c:	4b8f      	ldr	r3, [pc, #572]	; (41d7dc <basic_init+0x648>)
  41d59e:	681c      	ldr	r4, [r3, #0]
  41d5a0:	3404      	adds	r4, #4
  41d5a2:	2000      	movs	r0, #0
  41d5a4:	4b8a      	ldr	r3, [pc, #552]	; (41d7d0 <basic_init+0x63c>)
  41d5a6:	4798      	blx	r3
  41d5a8:	2801      	cmp	r0, #1
  41d5aa:	f240 86c8 	bls.w	41e33e <basic_init+0x11aa>
  41d5ae:	2000      	movs	r0, #0
  41d5b0:	4b88      	ldr	r3, [pc, #544]	; (41d7d4 <basic_init+0x640>)
  41d5b2:	4798      	blx	r3
  41d5b4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d5b8:	0040      	lsls	r0, r0, #1
  41d5ba:	3050      	adds	r0, #80	; 0x50
  41d5bc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d5c0:	f280 86d8 	bge.w	41e374 <basic_init+0x11e0>
  41d5c4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41d5c6:	2114      	movs	r1, #20
  41d5c8:	4620      	mov	r0, r4
  41d5ca:	4d83      	ldr	r5, [pc, #524]	; (41d7d8 <basic_init+0x644>)
  41d5cc:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  41d5ce:	4c83      	ldr	r4, [pc, #524]	; (41d7dc <basic_init+0x648>)
  41d5d0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41d5d2:	2200      	movs	r2, #0
  41d5d4:	21b0      	movs	r1, #176	; 0xb0
  41d5d6:	3004      	adds	r0, #4
  41d5d8:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
  41d5da:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41d5dc:	2239      	movs	r2, #57	; 0x39
  41d5de:	21b7      	movs	r1, #183	; 0xb7
  41d5e0:	3004      	adds	r0, #4
  41d5e2:	47a8      	blx	r5
    style_init_reset(&styles->bg_sec);
  41d5e4:	6820      	ldr	r0, [r4, #0]
  41d5e6:	300c      	adds	r0, #12
  41d5e8:	4b7d      	ldr	r3, [pc, #500]	; (41d7e0 <basic_init+0x64c>)
  41d5ea:	4798      	blx	r3
    lv_style_copy(&styles->bg_sec, &styles->bg);
  41d5ec:	6820      	ldr	r0, [r4, #0]
  41d5ee:	1d01      	adds	r1, r0, #4
  41d5f0:	300c      	adds	r0, #12
  41d5f2:	4b7c      	ldr	r3, [pc, #496]	; (41d7e4 <basic_init+0x650>)
  41d5f4:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
  41d5f6:	6820      	ldr	r0, [r4, #0]
  41d5f8:	300c      	adds	r0, #12
  41d5fa:	4b7b      	ldr	r3, [pc, #492]	; (41d7e8 <basic_init+0x654>)
  41d5fc:	6a1b      	ldr	r3, [r3, #32]
  41d5fe:	f013 0f02 	tst.w	r3, #2
  41d602:	f000 86c7 	beq.w	41e394 <basic_init+0x1200>
  41d606:	f04f 0200 	mov.w	r2, #0
  41d60a:	2306      	movs	r3, #6
  41d60c:	f363 0202 	bfi	r2, r3, #0, #3
  41d610:	231a      	movs	r3, #26
  41d612:	f363 02c7 	bfi	r2, r3, #3, #5
  41d616:	231b      	movs	r3, #27
  41d618:	f363 220c 	bfi	r2, r3, #8, #5
  41d61c:	2305      	movs	r3, #5
  41d61e:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41d622:	2129      	movs	r1, #41	; 0x29
  41d624:	4b71      	ldr	r3, [pc, #452]	; (41d7ec <basic_init+0x658>)
  41d626:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
  41d628:	4b6c      	ldr	r3, [pc, #432]	; (41d7dc <basic_init+0x648>)
  41d62a:	6818      	ldr	r0, [r3, #0]
  41d62c:	300c      	adds	r0, #12
  41d62e:	4b6e      	ldr	r3, [pc, #440]	; (41d7e8 <basic_init+0x654>)
  41d630:	6a1b      	ldr	r3, [r3, #32]
  41d632:	f013 0f02 	tst.w	r3, #2
  41d636:	f000 86bc 	beq.w	41e3b2 <basic_init+0x121e>
  41d63a:	f04f 0207 	mov.w	r2, #7
  41d63e:	231b      	movs	r3, #27
  41d640:	f363 02c7 	bfi	r2, r3, #3, #5
  41d644:	231d      	movs	r3, #29
  41d646:	f363 220c 	bfi	r2, r3, #8, #5
  41d64a:	2301      	movs	r3, #1
  41d64c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41d650:	2139      	movs	r1, #57	; 0x39
  41d652:	4b66      	ldr	r3, [pc, #408]	; (41d7ec <basic_init+0x658>)
  41d654:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41d656:	4b61      	ldr	r3, [pc, #388]	; (41d7dc <basic_init+0x648>)
  41d658:	6818      	ldr	r0, [r3, #0]
  41d65a:	300c      	adds	r0, #12
  41d65c:	4b62      	ldr	r3, [pc, #392]	; (41d7e8 <basic_init+0x654>)
  41d65e:	6a1b      	ldr	r3, [r3, #32]
  41d660:	f013 0f02 	tst.w	r3, #2
  41d664:	f000 86b3 	beq.w	41e3ce <basic_init+0x123a>
  41d668:	f04f 0200 	mov.w	r2, #0
  41d66c:	2302      	movs	r3, #2
  41d66e:	f363 0202 	bfi	r2, r3, #0, #3
  41d672:	2306      	movs	r3, #6
  41d674:	f363 02c7 	bfi	r2, r3, #3, #5
  41d678:	2309      	movs	r3, #9
  41d67a:	f363 220c 	bfi	r2, r3, #8, #5
  41d67e:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41d682:	f248 0189 	movw	r1, #32905	; 0x8089
  41d686:	4b59      	ldr	r3, [pc, #356]	; (41d7ec <basic_init+0x658>)
  41d688:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41d68a:	4b54      	ldr	r3, [pc, #336]	; (41d7dc <basic_init+0x648>)
  41d68c:	6818      	ldr	r0, [r3, #0]
  41d68e:	300c      	adds	r0, #12
  41d690:	4b55      	ldr	r3, [pc, #340]	; (41d7e8 <basic_init+0x654>)
  41d692:	6a1b      	ldr	r3, [r3, #32]
  41d694:	f013 0f02 	tst.w	r3, #2
  41d698:	f000 86a9 	beq.w	41e3ee <basic_init+0x125a>
  41d69c:	f04f 0200 	mov.w	r2, #0
  41d6a0:	2302      	movs	r3, #2
  41d6a2:	f363 0202 	bfi	r2, r3, #0, #3
  41d6a6:	2306      	movs	r3, #6
  41d6a8:	f363 02c7 	bfi	r2, r3, #3, #5
  41d6ac:	2309      	movs	r3, #9
  41d6ae:	f363 220c 	bfi	r2, r3, #8, #5
  41d6b2:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41d6b6:	2179      	movs	r1, #121	; 0x79
  41d6b8:	4b4c      	ldr	r3, [pc, #304]	; (41d7ec <basic_init+0x658>)
  41d6ba:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41d6bc:	4b47      	ldr	r3, [pc, #284]	; (41d7dc <basic_init+0x648>)
  41d6be:	6818      	ldr	r0, [r3, #0]
  41d6c0:	300c      	adds	r0, #12
  41d6c2:	4b49      	ldr	r3, [pc, #292]	; (41d7e8 <basic_init+0x654>)
  41d6c4:	6a1b      	ldr	r3, [r3, #32]
  41d6c6:	f013 0f02 	tst.w	r3, #2
  41d6ca:	f000 86a0 	beq.w	41e40e <basic_init+0x127a>
  41d6ce:	f04f 0200 	mov.w	r2, #0
  41d6d2:	2302      	movs	r3, #2
  41d6d4:	f363 0202 	bfi	r2, r3, #0, #3
  41d6d8:	2306      	movs	r3, #6
  41d6da:	f363 02c7 	bfi	r2, r3, #3, #5
  41d6de:	2309      	movs	r3, #9
  41d6e0:	f363 220c 	bfi	r2, r3, #8, #5
  41d6e4:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41d6e8:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41d6ec:	4b3f      	ldr	r3, [pc, #252]	; (41d7ec <basic_init+0x658>)
  41d6ee:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41d6f0:	4b3a      	ldr	r3, [pc, #232]	; (41d7dc <basic_init+0x648>)
  41d6f2:	6818      	ldr	r0, [r3, #0]
  41d6f4:	300c      	adds	r0, #12
  41d6f6:	4b3c      	ldr	r3, [pc, #240]	; (41d7e8 <basic_init+0x654>)
  41d6f8:	6a1b      	ldr	r3, [r3, #32]
  41d6fa:	f013 0f02 	tst.w	r3, #2
  41d6fe:	f000 8696 	beq.w	41e42e <basic_init+0x129a>
  41d702:	f04f 0200 	mov.w	r2, #0
  41d706:	2302      	movs	r3, #2
  41d708:	f363 0202 	bfi	r2, r3, #0, #3
  41d70c:	2306      	movs	r3, #6
  41d70e:	f363 02c7 	bfi	r2, r3, #3, #5
  41d712:	2309      	movs	r3, #9
  41d714:	f363 220c 	bfi	r2, r3, #8, #5
  41d718:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41d71c:	2199      	movs	r1, #153	; 0x99
  41d71e:	4b33      	ldr	r3, [pc, #204]	; (41d7ec <basic_init+0x658>)
  41d720:	4798      	blx	r3
    style_init_reset(&styles->bg_click);
  41d722:	4c2e      	ldr	r4, [pc, #184]	; (41d7dc <basic_init+0x648>)
  41d724:	6820      	ldr	r0, [r4, #0]
  41d726:	3008      	adds	r0, #8
  41d728:	4b2d      	ldr	r3, [pc, #180]	; (41d7e0 <basic_init+0x64c>)
  41d72a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
  41d72c:	6820      	ldr	r0, [r4, #0]
  41d72e:	3008      	adds	r0, #8
  41d730:	4b2d      	ldr	r3, [pc, #180]	; (41d7e8 <basic_init+0x654>)
  41d732:	6a1b      	ldr	r3, [r3, #32]
  41d734:	f013 0f02 	tst.w	r3, #2
  41d738:	f000 8689 	beq.w	41e44e <basic_init+0x12ba>
  41d73c:	f04f 0207 	mov.w	r2, #7
  41d740:	231d      	movs	r3, #29
  41d742:	f363 02c7 	bfi	r2, r3, #3, #5
  41d746:	f363 220c 	bfi	r2, r3, #8, #5
  41d74a:	2303      	movs	r3, #3
  41d74c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41d750:	f241 0129 	movw	r1, #4137	; 0x1029
  41d754:	4d25      	ldr	r5, [pc, #148]	; (41d7ec <basic_init+0x658>)
  41d756:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
  41d758:	4c20      	ldr	r4, [pc, #128]	; (41d7dc <basic_init+0x648>)
  41d75a:	6820      	ldr	r0, [r4, #0]
  41d75c:	4f22      	ldr	r7, [pc, #136]	; (41d7e8 <basic_init+0x654>)
  41d75e:	89ba      	ldrh	r2, [r7, #12]
  41d760:	f240 1129 	movw	r1, #297	; 0x129
  41d764:	3008      	adds	r0, #8
  41d766:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
  41d768:	6826      	ldr	r6, [r4, #0]
  41d76a:	3608      	adds	r6, #8
  41d76c:	2133      	movs	r1, #51	; 0x33
  41d76e:	89b8      	ldrh	r0, [r7, #12]
  41d770:	4b1f      	ldr	r3, [pc, #124]	; (41d7f0 <basic_init+0x65c>)
  41d772:	4798      	blx	r3
  41d774:	4602      	mov	r2, r0
  41d776:	f241 1129 	movw	r1, #4393	; 0x1129
  41d77a:	4630      	mov	r0, r6
  41d77c:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
  41d77e:	6820      	ldr	r0, [r4, #0]
  41d780:	3008      	adds	r0, #8
  41d782:	6a3b      	ldr	r3, [r7, #32]
  41d784:	f013 0f02 	tst.w	r3, #2
  41d788:	f000 8671 	beq.w	41e46e <basic_init+0x12da>
  41d78c:	f04f 32ff 	mov.w	r2, #4294967295
  41d790:	f242 0129 	movw	r1, #8233	; 0x2029
  41d794:	4f15      	ldr	r7, [pc, #84]	; (41d7ec <basic_init+0x658>)
  41d796:	47b8      	blx	r7
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
  41d798:	4c10      	ldr	r4, [pc, #64]	; (41d7dc <basic_init+0x648>)
  41d79a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41d79c:	2200      	movs	r2, #0
  41d79e:	f44f 7198 	mov.w	r1, #304	; 0x130
  41d7a2:	3008      	adds	r0, #8
  41d7a4:	4b0c      	ldr	r3, [pc, #48]	; (41d7d8 <basic_init+0x644>)
  41d7a6:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
  41d7a8:	6825      	ldr	r5, [r4, #0]
  41d7aa:	3508      	adds	r5, #8
  41d7ac:	4e0e      	ldr	r6, [pc, #56]	; (41d7e8 <basic_init+0x654>)
  41d7ae:	2133      	movs	r1, #51	; 0x33
  41d7b0:	89b0      	ldrh	r0, [r6, #12]
  41d7b2:	4b0f      	ldr	r3, [pc, #60]	; (41d7f0 <basic_init+0x65c>)
  41d7b4:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41d7b6:	4602      	mov	r2, r0
  41d7b8:	f241 2139 	movw	r1, #4665	; 0x1239
  41d7bc:	4628      	mov	r0, r5
  41d7be:	47b8      	blx	r7
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
  41d7c0:	6820      	ldr	r0, [r4, #0]
  41d7c2:	3008      	adds	r0, #8
  41d7c4:	6a33      	ldr	r3, [r6, #32]
  41d7c6:	f013 0f02 	tst.w	r3, #2
  41d7ca:	f000 865f 	beq.w	41e48c <basic_init+0x12f8>
  41d7ce:	e011      	b.n	41d7f4 <basic_init+0x660>
  41d7d0:	00415c9d 	.word	0x00415c9d
  41d7d4:	00415c7d 	.word	0x00415c7d
  41d7d8:	0040a121 	.word	0x0040a121
  41d7dc:	2041480c 	.word	0x2041480c
  41d7e0:	004198fd 	.word	0x004198fd
  41d7e4:	00409fbd 	.word	0x00409fbd
  41d7e8:	20414810 	.word	0x20414810
  41d7ec:	0040a2b1 	.word	0x0040a2b1
  41d7f0:	00416d39 	.word	0x00416d39
  41d7f4:	f04f 0200 	mov.w	r2, #0
  41d7f8:	2306      	movs	r3, #6
  41d7fa:	f363 0202 	bfi	r2, r3, #0, #3
  41d7fe:	2319      	movs	r3, #25
  41d800:	f363 02c7 	bfi	r2, r3, #3, #5
  41d804:	f363 220c 	bfi	r2, r3, #8, #5
  41d808:	2303      	movs	r3, #3
  41d80a:	f363 324f 	bfi	r2, r3, #13, #3
  41d80e:	f241 0139 	movw	r1, #4153	; 0x1039
  41d812:	4bc9      	ldr	r3, [pc, #804]	; (41db38 <basic_init+0x9a4>)
  41d814:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
  41d816:	4bc9      	ldr	r3, [pc, #804]	; (41db3c <basic_init+0x9a8>)
  41d818:	6818      	ldr	r0, [r3, #0]
  41d81a:	3008      	adds	r0, #8
  41d81c:	4bc8      	ldr	r3, [pc, #800]	; (41db40 <basic_init+0x9ac>)
  41d81e:	6a1b      	ldr	r3, [r3, #32]
  41d820:	f013 0f02 	tst.w	r3, #2
  41d824:	f000 8642 	beq.w	41e4ac <basic_init+0x1318>
  41d828:	f04f 0200 	mov.w	r2, #0
  41d82c:	2301      	movs	r3, #1
  41d82e:	f363 0202 	bfi	r2, r3, #0, #3
  41d832:	2307      	movs	r3, #7
  41d834:	f363 02c7 	bfi	r2, r3, #3, #5
  41d838:	2308      	movs	r3, #8
  41d83a:	f363 220c 	bfi	r2, r3, #8, #5
  41d83e:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41d842:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41d846:	f240 1139 	movw	r1, #313	; 0x139
  41d84a:	4bbb      	ldr	r3, [pc, #748]	; (41db38 <basic_init+0x9a4>)
  41d84c:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
  41d84e:	4bbb      	ldr	r3, [pc, #748]	; (41db3c <basic_init+0x9a8>)
  41d850:	6818      	ldr	r0, [r3, #0]
  41d852:	3008      	adds	r0, #8
  41d854:	4bba      	ldr	r3, [pc, #744]	; (41db40 <basic_init+0x9ac>)
  41d856:	6a1b      	ldr	r3, [r3, #32]
  41d858:	f013 0f02 	tst.w	r3, #2
  41d85c:	f000 8636 	beq.w	41e4cc <basic_init+0x1338>
  41d860:	f04f 0200 	mov.w	r2, #0
  41d864:	2301      	movs	r3, #1
  41d866:	f363 0202 	bfi	r2, r3, #0, #3
  41d86a:	2307      	movs	r3, #7
  41d86c:	f363 02c7 	bfi	r2, r3, #3, #5
  41d870:	2308      	movs	r3, #8
  41d872:	f363 220c 	bfi	r2, r3, #8, #5
  41d876:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41d87a:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41d87e:	f241 1139 	movw	r1, #4409	; 0x1139
  41d882:	4bad      	ldr	r3, [pc, #692]	; (41db38 <basic_init+0x9a4>)
  41d884:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
  41d886:	4bad      	ldr	r3, [pc, #692]	; (41db3c <basic_init+0x9a8>)
  41d888:	6818      	ldr	r0, [r3, #0]
  41d88a:	3008      	adds	r0, #8
  41d88c:	4bac      	ldr	r3, [pc, #688]	; (41db40 <basic_init+0x9ac>)
  41d88e:	6a1b      	ldr	r3, [r3, #32]
  41d890:	f013 0f02 	tst.w	r3, #2
  41d894:	f000 862a 	beq.w	41e4ec <basic_init+0x1358>
  41d898:	f04f 0200 	mov.w	r2, #0
  41d89c:	2306      	movs	r3, #6
  41d89e:	f363 0202 	bfi	r2, r3, #0, #3
  41d8a2:	231a      	movs	r3, #26
  41d8a4:	f363 02c7 	bfi	r2, r3, #3, #5
  41d8a8:	231c      	movs	r3, #28
  41d8aa:	f363 220c 	bfi	r2, r3, #8, #5
  41d8ae:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41d8b2:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41d8b6:	f242 0139 	movw	r1, #8249	; 0x2039
  41d8ba:	4b9f      	ldr	r3, [pc, #636]	; (41db38 <basic_init+0x9a4>)
  41d8bc:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41d8be:	4b9f      	ldr	r3, [pc, #636]	; (41db3c <basic_init+0x9a8>)
  41d8c0:	6818      	ldr	r0, [r3, #0]
  41d8c2:	3008      	adds	r0, #8
  41d8c4:	4b9e      	ldr	r3, [pc, #632]	; (41db40 <basic_init+0x9ac>)
  41d8c6:	6a1b      	ldr	r3, [r3, #32]
  41d8c8:	f013 0f02 	tst.w	r3, #2
  41d8cc:	f000 861e 	beq.w	41e50c <basic_init+0x1378>
  41d8d0:	f04f 0200 	mov.w	r2, #0
  41d8d4:	2301      	movs	r3, #1
  41d8d6:	f363 0202 	bfi	r2, r3, #0, #3
  41d8da:	2307      	movs	r3, #7
  41d8dc:	f363 02c7 	bfi	r2, r3, #3, #5
  41d8e0:	2308      	movs	r3, #8
  41d8e2:	f363 220c 	bfi	r2, r3, #8, #5
  41d8e6:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41d8ea:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41d8ee:	f249 0189 	movw	r1, #37001	; 0x9089
  41d8f2:	4b91      	ldr	r3, [pc, #580]	; (41db38 <basic_init+0x9a4>)
  41d8f4:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41d8f6:	4b91      	ldr	r3, [pc, #580]	; (41db3c <basic_init+0x9a8>)
  41d8f8:	6818      	ldr	r0, [r3, #0]
  41d8fa:	3008      	adds	r0, #8
  41d8fc:	4b90      	ldr	r3, [pc, #576]	; (41db40 <basic_init+0x9ac>)
  41d8fe:	6a1b      	ldr	r3, [r3, #32]
  41d900:	f013 0f02 	tst.w	r3, #2
  41d904:	f000 8606 	beq.w	41e514 <basic_init+0x1380>
  41d908:	f04f 32ff 	mov.w	r2, #4294967295
  41d90c:	f248 1189 	movw	r1, #33161	; 0x8189
  41d910:	4b89      	ldr	r3, [pc, #548]	; (41db38 <basic_init+0x9a4>)
  41d912:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
  41d914:	4b89      	ldr	r3, [pc, #548]	; (41db3c <basic_init+0x9a8>)
  41d916:	6818      	ldr	r0, [r3, #0]
  41d918:	3008      	adds	r0, #8
  41d91a:	4b89      	ldr	r3, [pc, #548]	; (41db40 <basic_init+0x9ac>)
  41d91c:	6a1b      	ldr	r3, [r3, #32]
  41d91e:	f013 0f02 	tst.w	r3, #2
  41d922:	f000 85fb 	beq.w	41e51c <basic_init+0x1388>
  41d926:	f04f 32ff 	mov.w	r2, #4294967295
  41d92a:	f249 1189 	movw	r1, #37257	; 0x9189
  41d92e:	4b82      	ldr	r3, [pc, #520]	; (41db38 <basic_init+0x9a4>)
  41d930:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41d932:	4b82      	ldr	r3, [pc, #520]	; (41db3c <basic_init+0x9a8>)
  41d934:	6818      	ldr	r0, [r3, #0]
  41d936:	3008      	adds	r0, #8
  41d938:	4b81      	ldr	r3, [pc, #516]	; (41db40 <basic_init+0x9ac>)
  41d93a:	6a1b      	ldr	r3, [r3, #32]
  41d93c:	f013 0f02 	tst.w	r3, #2
  41d940:	f000 85f0 	beq.w	41e524 <basic_init+0x1390>
  41d944:	f04f 0200 	mov.w	r2, #0
  41d948:	2305      	movs	r3, #5
  41d94a:	f363 0202 	bfi	r2, r3, #0, #3
  41d94e:	2315      	movs	r3, #21
  41d950:	f363 02c7 	bfi	r2, r3, #3, #5
  41d954:	f363 220c 	bfi	r2, r3, #8, #5
  41d958:	2302      	movs	r3, #2
  41d95a:	f363 324f 	bfi	r2, r3, #13, #3
  41d95e:	f24a 0189 	movw	r1, #41097	; 0xa089
  41d962:	4b75      	ldr	r3, [pc, #468]	; (41db38 <basic_init+0x9a4>)
  41d964:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41d966:	4b75      	ldr	r3, [pc, #468]	; (41db3c <basic_init+0x9a8>)
  41d968:	6818      	ldr	r0, [r3, #0]
  41d96a:	3008      	adds	r0, #8
  41d96c:	4b74      	ldr	r3, [pc, #464]	; (41db40 <basic_init+0x9ac>)
  41d96e:	6a1b      	ldr	r3, [r3, #32]
  41d970:	f013 0f02 	tst.w	r3, #2
  41d974:	f000 85e5 	beq.w	41e542 <basic_init+0x13ae>
  41d978:	f04f 0200 	mov.w	r2, #0
  41d97c:	2301      	movs	r3, #1
  41d97e:	f363 0202 	bfi	r2, r3, #0, #3
  41d982:	2307      	movs	r3, #7
  41d984:	f363 02c7 	bfi	r2, r3, #3, #5
  41d988:	2308      	movs	r3, #8
  41d98a:	f363 220c 	bfi	r2, r3, #8, #5
  41d98e:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41d992:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41d996:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41d99a:	4b67      	ldr	r3, [pc, #412]	; (41db38 <basic_init+0x9a4>)
  41d99c:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41d99e:	4b67      	ldr	r3, [pc, #412]	; (41db3c <basic_init+0x9a8>)
  41d9a0:	6818      	ldr	r0, [r3, #0]
  41d9a2:	3008      	adds	r0, #8
  41d9a4:	4b66      	ldr	r3, [pc, #408]	; (41db40 <basic_init+0x9ac>)
  41d9a6:	6a1b      	ldr	r3, [r3, #32]
  41d9a8:	f013 0f02 	tst.w	r3, #2
  41d9ac:	f000 85d2 	beq.w	41e554 <basic_init+0x13c0>
  41d9b0:	f04f 32ff 	mov.w	r2, #4294967295
  41d9b4:	f248 11a9 	movw	r1, #33193	; 0x81a9
  41d9b8:	4b5f      	ldr	r3, [pc, #380]	; (41db38 <basic_init+0x9a4>)
  41d9ba:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
  41d9bc:	4b5f      	ldr	r3, [pc, #380]	; (41db3c <basic_init+0x9a8>)
  41d9be:	6818      	ldr	r0, [r3, #0]
  41d9c0:	3008      	adds	r0, #8
  41d9c2:	4b5f      	ldr	r3, [pc, #380]	; (41db40 <basic_init+0x9ac>)
  41d9c4:	6a1b      	ldr	r3, [r3, #32]
  41d9c6:	f013 0f02 	tst.w	r3, #2
  41d9ca:	f000 85c7 	beq.w	41e55c <basic_init+0x13c8>
  41d9ce:	f04f 32ff 	mov.w	r2, #4294967295
  41d9d2:	f249 11a9 	movw	r1, #37289	; 0x91a9
  41d9d6:	4b58      	ldr	r3, [pc, #352]	; (41db38 <basic_init+0x9a4>)
  41d9d8:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41d9da:	4b58      	ldr	r3, [pc, #352]	; (41db3c <basic_init+0x9a8>)
  41d9dc:	6818      	ldr	r0, [r3, #0]
  41d9de:	3008      	adds	r0, #8
  41d9e0:	4b57      	ldr	r3, [pc, #348]	; (41db40 <basic_init+0x9ac>)
  41d9e2:	6a1b      	ldr	r3, [r3, #32]
  41d9e4:	f013 0f02 	tst.w	r3, #2
  41d9e8:	f000 85bc 	beq.w	41e564 <basic_init+0x13d0>
  41d9ec:	f04f 0200 	mov.w	r2, #0
  41d9f0:	2305      	movs	r3, #5
  41d9f2:	f363 0202 	bfi	r2, r3, #0, #3
  41d9f6:	2315      	movs	r3, #21
  41d9f8:	f363 02c7 	bfi	r2, r3, #3, #5
  41d9fc:	f363 220c 	bfi	r2, r3, #8, #5
  41da00:	2302      	movs	r3, #2
  41da02:	f363 324f 	bfi	r2, r3, #13, #3
  41da06:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41da0a:	4b4b      	ldr	r3, [pc, #300]	; (41db38 <basic_init+0x9a4>)
  41da0c:	4798      	blx	r3
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41da0e:	4c4b      	ldr	r4, [pc, #300]	; (41db3c <basic_init+0x9a8>)
  41da10:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41da12:	2229      	movs	r2, #41	; 0x29
  41da14:	21b6      	movs	r1, #182	; 0xb6
  41da16:	3008      	adds	r0, #8
  41da18:	4d4a      	ldr	r5, [pc, #296]	; (41db44 <basic_init+0x9b0>)
  41da1a:	47a8      	blx	r5
    style_init_reset(&styles->btn);
  41da1c:	6820      	ldr	r0, [r4, #0]
  41da1e:	3010      	adds	r0, #16
  41da20:	4b49      	ldr	r3, [pc, #292]	; (41db48 <basic_init+0x9b4>)
  41da22:	4798      	blx	r3
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41da24:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41da26:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41da2a:	2101      	movs	r1, #1
  41da2c:	3010      	adds	r0, #16
  41da2e:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
  41da30:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41da32:	22ff      	movs	r2, #255	; 0xff
  41da34:	212c      	movs	r1, #44	; 0x2c
  41da36:	3010      	adds	r0, #16
  41da38:	4b44      	ldr	r3, [pc, #272]	; (41db4c <basic_init+0x9b8>)
  41da3a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
  41da3c:	6820      	ldr	r0, [r4, #0]
  41da3e:	3010      	adds	r0, #16
  41da40:	4b3f      	ldr	r3, [pc, #252]	; (41db40 <basic_init+0x9ac>)
  41da42:	6a1b      	ldr	r3, [r3, #32]
  41da44:	f013 0f02 	tst.w	r3, #2
  41da48:	f000 859b 	beq.w	41e582 <basic_init+0x13ee>
  41da4c:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41da50:	2129      	movs	r1, #41	; 0x29
  41da52:	4b39      	ldr	r3, [pc, #228]	; (41db38 <basic_init+0x9a4>)
  41da54:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
  41da56:	4b39      	ldr	r3, [pc, #228]	; (41db3c <basic_init+0x9a8>)
  41da58:	6818      	ldr	r0, [r3, #0]
  41da5a:	3010      	adds	r0, #16
  41da5c:	4b38      	ldr	r3, [pc, #224]	; (41db40 <basic_init+0x9ac>)
  41da5e:	6a1b      	ldr	r3, [r3, #32]
  41da60:	f013 0f02 	tst.w	r3, #2
  41da64:	f000 859c 	beq.w	41e5a0 <basic_init+0x140c>
  41da68:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41da6c:	4a34      	ldr	r2, [pc, #208]	; (41db40 <basic_init+0x9ac>)
  41da6e:	8994      	ldrh	r4, [r2, #12]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41da70:	f3c4 02c4 	ubfx	r2, r4, #3, #5
  41da74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  41da78:	eb02 1102 	add.w	r1, r2, r2, lsl #4
  41da7c:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  41da80:	25cc      	movs	r5, #204	; 0xcc
  41da82:	fb05 1202 	mla	r2, r5, r2, r1
  41da86:	3280      	adds	r2, #128	; 0x80
  41da88:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  41da8c:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  41da90:	f3c2 51c4 	ubfx	r1, r2, #23, #5
  41da94:	f04f 0200 	mov.w	r2, #0
  41da98:	f361 02c7 	bfi	r2, r1, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41da9c:	f004 0607 	and.w	r6, r4, #7
  41daa0:	f3c4 3142 	ubfx	r1, r4, #13, #3
  41daa4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
  41daa8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  41daac:	eb01 1601 	add.w	r6, r1, r1, lsl #4
  41dab0:	f003 0707 	and.w	r7, r3, #7
  41dab4:	0b59      	lsrs	r1, r3, #13
  41dab6:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  41daba:	fb05 6101 	mla	r1, r5, r1, r6
  41dabe:	3180      	adds	r1, #128	; 0x80
  41dac0:	eb01 2601 	add.w	r6, r1, r1, lsl #8
  41dac4:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
  41dac8:	f3c1 6682 	ubfx	r6, r1, #26, #3
  41dacc:	f366 0202 	bfi	r2, r6, #0, #3
  41dad0:	f3c1 51c2 	ubfx	r1, r1, #23, #3
  41dad4:	f361 324f 	bfi	r2, r1, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41dad8:	f3c4 2404 	ubfx	r4, r4, #8, #5
  41dadc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  41dae0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
  41dae4:	f3c3 2304 	ubfx	r3, r3, #8, #5
  41dae8:	fb05 4303 	mla	r3, r5, r3, r4
  41daec:	3380      	adds	r3, #128	; 0x80
  41daee:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  41daf2:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  41daf6:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  41dafa:	f363 220c 	bfi	r2, r3, #8, #5
  41dafe:	f241 0129 	movw	r1, #4137	; 0x1029
  41db02:	4d0d      	ldr	r5, [pc, #52]	; (41db38 <basic_init+0x9a4>)
  41db04:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
  41db06:	4c0d      	ldr	r4, [pc, #52]	; (41db3c <basic_init+0x9a8>)
  41db08:	6820      	ldr	r0, [r4, #0]
  41db0a:	4f0d      	ldr	r7, [pc, #52]	; (41db40 <basic_init+0x9ac>)
  41db0c:	89ba      	ldrh	r2, [r7, #12]
  41db0e:	f240 1129 	movw	r1, #297	; 0x129
  41db12:	3010      	adds	r0, #16
  41db14:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
  41db16:	6826      	ldr	r6, [r4, #0]
  41db18:	3610      	adds	r6, #16
  41db1a:	214c      	movs	r1, #76	; 0x4c
  41db1c:	89b8      	ldrh	r0, [r7, #12]
  41db1e:	4b0c      	ldr	r3, [pc, #48]	; (41db50 <basic_init+0x9bc>)
  41db20:	4798      	blx	r3
  41db22:	4602      	mov	r2, r0
  41db24:	f241 1129 	movw	r1, #4393	; 0x1129
  41db28:	4630      	mov	r0, r6
  41db2a:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
  41db2c:	6820      	ldr	r0, [r4, #0]
  41db2e:	3010      	adds	r0, #16
  41db30:	6a3b      	ldr	r3, [r7, #32]
  41db32:	f013 0f02 	tst.w	r3, #2
  41db36:	e00d      	b.n	41db54 <basic_init+0x9c0>
  41db38:	0040a2b1 	.word	0x0040a2b1
  41db3c:	2041480c 	.word	0x2041480c
  41db40:	20414810 	.word	0x20414810
  41db44:	0040a121 	.word	0x0040a121
  41db48:	004198fd 	.word	0x004198fd
  41db4c:	0040a441 	.word	0x0040a441
  41db50:	00416d39 	.word	0x00416d39
  41db54:	f000 8575 	beq.w	41e642 <basic_init+0x14ae>
  41db58:	f04f 32ff 	mov.w	r2, #4294967295
  41db5c:	f242 0129 	movw	r1, #8233	; 0x2029
  41db60:	4bc7      	ldr	r3, [pc, #796]	; (41de80 <basic_init+0xcec>)
  41db62:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
  41db64:	4bc7      	ldr	r3, [pc, #796]	; (41de84 <basic_init+0xcf0>)
  41db66:	6818      	ldr	r0, [r3, #0]
  41db68:	3010      	adds	r0, #16
  41db6a:	4bc7      	ldr	r3, [pc, #796]	; (41de88 <basic_init+0xcf4>)
  41db6c:	6a1b      	ldr	r3, [r3, #32]
  41db6e:	f013 0f02 	tst.w	r3, #2
  41db72:	f000 8575 	beq.w	41e660 <basic_init+0x14cc>
    return LV_COLOR_MAKE(r, g, b);
  41db76:	f04f 0200 	mov.w	r2, #0
  41db7a:	2306      	movs	r3, #6
  41db7c:	f363 0202 	bfi	r2, r3, #0, #3
  41db80:	2319      	movs	r3, #25
  41db82:	f363 02c7 	bfi	r2, r3, #3, #5
  41db86:	f363 220c 	bfi	r2, r3, #8, #5
  41db8a:	2303      	movs	r3, #3
  41db8c:	f363 324f 	bfi	r2, r3, #13, #3
  41db90:	f242 1129 	movw	r1, #8489	; 0x2129
  41db94:	4eba      	ldr	r6, [pc, #744]	; (41de80 <basic_init+0xcec>)
  41db96:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
  41db98:	4dba      	ldr	r5, [pc, #744]	; (41de84 <basic_init+0xcf0>)
  41db9a:	6828      	ldr	r0, [r5, #0]
  41db9c:	4cba      	ldr	r4, [pc, #744]	; (41de88 <basic_init+0xcf4>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41db9e:	89a2      	ldrh	r2, [r4, #12]
  41dba0:	2139      	movs	r1, #57	; 0x39
  41dba2:	3010      	adds	r0, #16
  41dba4:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
  41dba6:	6828      	ldr	r0, [r5, #0]
  41dba8:	89a2      	ldrh	r2, [r4, #12]
  41dbaa:	f241 0139 	movw	r1, #4153	; 0x1039
  41dbae:	3010      	adds	r0, #16
  41dbb0:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
  41dbb2:	6828      	ldr	r0, [r5, #0]
  41dbb4:	3010      	adds	r0, #16
  41dbb6:	6a23      	ldr	r3, [r4, #32]
  41dbb8:	f013 0f02 	tst.w	r3, #2
  41dbbc:	f000 855f 	beq.w	41e67e <basic_init+0x14ea>
  41dbc0:	f04f 0200 	mov.w	r2, #0
  41dbc4:	2304      	movs	r3, #4
  41dbc6:	f363 0202 	bfi	r2, r3, #0, #3
  41dbca:	2311      	movs	r3, #17
  41dbcc:	f363 02c7 	bfi	r2, r3, #3, #5
  41dbd0:	f363 220c 	bfi	r2, r3, #8, #5
  41dbd4:	2302      	movs	r3, #2
  41dbd6:	f363 324f 	bfi	r2, r3, #13, #3
  41dbda:	f242 0139 	movw	r1, #8249	; 0x2039
  41dbde:	4ba8      	ldr	r3, [pc, #672]	; (41de80 <basic_init+0xcec>)
  41dbe0:	4798      	blx	r3
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
  41dbe2:	4ba8      	ldr	r3, [pc, #672]	; (41de84 <basic_init+0xcf0>)
  41dbe4:	681c      	ldr	r4, [r3, #0]
  41dbe6:	3410      	adds	r4, #16
  41dbe8:	2000      	movs	r0, #0
  41dbea:	4ba8      	ldr	r3, [pc, #672]	; (41de8c <basic_init+0xcf8>)
  41dbec:	4798      	blx	r3
  41dbee:	3028      	adds	r0, #40	; 0x28
  41dbf0:	0040      	lsls	r0, r0, #1
  41dbf2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41dbf6:	f280 8550 	bge.w	41e69a <basic_init+0x1506>
  41dbfa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41dbfc:	2130      	movs	r1, #48	; 0x30
  41dbfe:	4620      	mov	r0, r4
  41dc00:	4ba3      	ldr	r3, [pc, #652]	; (41de90 <basic_init+0xcfc>)
  41dc02:	4798      	blx	r3
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
  41dc04:	4c9f      	ldr	r4, [pc, #636]	; (41de84 <basic_init+0xcf0>)
  41dc06:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  41dc08:	2200      	movs	r2, #0
  41dc0a:	f44f 719e 	mov.w	r1, #316	; 0x13c
  41dc0e:	3010      	adds	r0, #16
  41dc10:	4ba0      	ldr	r3, [pc, #640]	; (41de94 <basic_init+0xd00>)
  41dc12:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41dc14:	6820      	ldr	r0, [r4, #0]
  41dc16:	3010      	adds	r0, #16
  41dc18:	4b9b      	ldr	r3, [pc, #620]	; (41de88 <basic_init+0xcf4>)
  41dc1a:	6a1b      	ldr	r3, [r3, #32]
  41dc1c:	f013 0f02 	tst.w	r3, #2
  41dc20:	f000 8549 	beq.w	41e6b6 <basic_init+0x1522>
  41dc24:	f04f 0200 	mov.w	r2, #0
  41dc28:	2302      	movs	r3, #2
  41dc2a:	f363 0202 	bfi	r2, r3, #0, #3
  41dc2e:	2306      	movs	r3, #6
  41dc30:	f363 02c7 	bfi	r2, r3, #3, #5
  41dc34:	2309      	movs	r3, #9
  41dc36:	f363 220c 	bfi	r2, r3, #8, #5
  41dc3a:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41dc3e:	f248 0189 	movw	r1, #32905	; 0x8089
  41dc42:	4b8f      	ldr	r3, [pc, #572]	; (41de80 <basic_init+0xcec>)
  41dc44:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41dc46:	4b8f      	ldr	r3, [pc, #572]	; (41de84 <basic_init+0xcf0>)
  41dc48:	6818      	ldr	r0, [r3, #0]
  41dc4a:	3010      	adds	r0, #16
  41dc4c:	4b8e      	ldr	r3, [pc, #568]	; (41de88 <basic_init+0xcf4>)
  41dc4e:	6a1b      	ldr	r3, [r3, #32]
  41dc50:	f013 0f02 	tst.w	r3, #2
  41dc54:	f000 8533 	beq.w	41e6be <basic_init+0x152a>
  41dc58:	f04f 0200 	mov.w	r2, #0
  41dc5c:	2302      	movs	r3, #2
  41dc5e:	f363 0202 	bfi	r2, r3, #0, #3
  41dc62:	2306      	movs	r3, #6
  41dc64:	f363 02c7 	bfi	r2, r3, #3, #5
  41dc68:	2309      	movs	r3, #9
  41dc6a:	f363 220c 	bfi	r2, r3, #8, #5
  41dc6e:	f36f 324f 	bfc	r2, #13, #3
  41dc72:	f249 0189 	movw	r1, #37001	; 0x9089
  41dc76:	4d82      	ldr	r5, [pc, #520]	; (41de80 <basic_init+0xcec>)
  41dc78:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
  41dc7a:	4c82      	ldr	r4, [pc, #520]	; (41de84 <basic_init+0xcf0>)
  41dc7c:	6820      	ldr	r0, [r4, #0]
  41dc7e:	f04f 32ff 	mov.w	r2, #4294967295
  41dc82:	f248 1189 	movw	r1, #33161	; 0x8189
  41dc86:	3010      	adds	r0, #16
  41dc88:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41dc8a:	6820      	ldr	r0, [r4, #0]
  41dc8c:	f04f 32ff 	mov.w	r2, #4294967295
  41dc90:	f249 1189 	movw	r1, #37257	; 0x9189
  41dc94:	3010      	adds	r0, #16
  41dc96:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41dc98:	6820      	ldr	r0, [r4, #0]
  41dc9a:	3010      	adds	r0, #16
  41dc9c:	4b7a      	ldr	r3, [pc, #488]	; (41de88 <basic_init+0xcf4>)
  41dc9e:	6a1b      	ldr	r3, [r3, #32]
  41dca0:	f013 0f02 	tst.w	r3, #2
  41dca4:	f000 850f 	beq.w	41e6c6 <basic_init+0x1532>
  41dca8:	f04f 0200 	mov.w	r2, #0
  41dcac:	2304      	movs	r3, #4
  41dcae:	f363 0202 	bfi	r2, r3, #0, #3
  41dcb2:	2311      	movs	r3, #17
  41dcb4:	f363 02c7 	bfi	r2, r3, #3, #5
  41dcb8:	f363 220c 	bfi	r2, r3, #8, #5
  41dcbc:	2302      	movs	r3, #2
  41dcbe:	f363 324f 	bfi	r2, r3, #13, #3
  41dcc2:	f24a 0189 	movw	r1, #41097	; 0xa089
  41dcc6:	4b6e      	ldr	r3, [pc, #440]	; (41de80 <basic_init+0xcec>)
  41dcc8:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41dcca:	4b6e      	ldr	r3, [pc, #440]	; (41de84 <basic_init+0xcf0>)
  41dccc:	6818      	ldr	r0, [r3, #0]
  41dcce:	3010      	adds	r0, #16
  41dcd0:	4b6d      	ldr	r3, [pc, #436]	; (41de88 <basic_init+0xcf4>)
  41dcd2:	6a1b      	ldr	r3, [r3, #32]
  41dcd4:	f013 0f02 	tst.w	r3, #2
  41dcd8:	f000 8504 	beq.w	41e6e4 <basic_init+0x1550>
  41dcdc:	f04f 0200 	mov.w	r2, #0
  41dce0:	2302      	movs	r3, #2
  41dce2:	f363 0202 	bfi	r2, r3, #0, #3
  41dce6:	2306      	movs	r3, #6
  41dce8:	f363 02c7 	bfi	r2, r3, #3, #5
  41dcec:	2309      	movs	r3, #9
  41dcee:	f363 220c 	bfi	r2, r3, #8, #5
  41dcf2:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41dcf6:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41dcfa:	4b61      	ldr	r3, [pc, #388]	; (41de80 <basic_init+0xcec>)
  41dcfc:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41dcfe:	4b61      	ldr	r3, [pc, #388]	; (41de84 <basic_init+0xcf0>)
  41dd00:	6818      	ldr	r0, [r3, #0]
  41dd02:	3010      	adds	r0, #16
  41dd04:	4b60      	ldr	r3, [pc, #384]	; (41de88 <basic_init+0xcf4>)
  41dd06:	6a1b      	ldr	r3, [r3, #32]
  41dd08:	f013 0f02 	tst.w	r3, #2
  41dd0c:	f000 84ee 	beq.w	41e6ec <basic_init+0x1558>
  41dd10:	f04f 0200 	mov.w	r2, #0
  41dd14:	2302      	movs	r3, #2
  41dd16:	f363 0202 	bfi	r2, r3, #0, #3
  41dd1a:	2306      	movs	r3, #6
  41dd1c:	f363 02c7 	bfi	r2, r3, #3, #5
  41dd20:	2309      	movs	r3, #9
  41dd22:	f363 220c 	bfi	r2, r3, #8, #5
  41dd26:	f36f 324f 	bfc	r2, #13, #3
  41dd2a:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41dd2e:	4d54      	ldr	r5, [pc, #336]	; (41de80 <basic_init+0xcec>)
  41dd30:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41dd32:	4c54      	ldr	r4, [pc, #336]	; (41de84 <basic_init+0xcf0>)
  41dd34:	6820      	ldr	r0, [r4, #0]
  41dd36:	f04f 32ff 	mov.w	r2, #4294967295
  41dd3a:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41dd3e:	3010      	adds	r0, #16
  41dd40:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41dd42:	6820      	ldr	r0, [r4, #0]
  41dd44:	f04f 32ff 	mov.w	r2, #4294967295
  41dd48:	f249 11a9 	movw	r1, #37289	; 0x91a9
  41dd4c:	3010      	adds	r0, #16
  41dd4e:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41dd50:	6820      	ldr	r0, [r4, #0]
  41dd52:	3010      	adds	r0, #16
  41dd54:	4b4c      	ldr	r3, [pc, #304]	; (41de88 <basic_init+0xcf4>)
  41dd56:	6a1b      	ldr	r3, [r3, #32]
  41dd58:	f013 0f02 	tst.w	r3, #2
  41dd5c:	f000 84ca 	beq.w	41e6f4 <basic_init+0x1560>
  41dd60:	f04f 0200 	mov.w	r2, #0
  41dd64:	2304      	movs	r3, #4
  41dd66:	f363 0202 	bfi	r2, r3, #0, #3
  41dd6a:	2311      	movs	r3, #17
  41dd6c:	f363 02c7 	bfi	r2, r3, #3, #5
  41dd70:	f363 220c 	bfi	r2, r3, #8, #5
  41dd74:	2302      	movs	r3, #2
  41dd76:	f363 324f 	bfi	r2, r3, #13, #3
  41dd7a:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41dd7e:	4b40      	ldr	r3, [pc, #256]	; (41de80 <basic_init+0xcec>)
  41dd80:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41dd82:	4b40      	ldr	r3, [pc, #256]	; (41de84 <basic_init+0xcf0>)
  41dd84:	6818      	ldr	r0, [r3, #0]
  41dd86:	3010      	adds	r0, #16
  41dd88:	4b3f      	ldr	r3, [pc, #252]	; (41de88 <basic_init+0xcf4>)
  41dd8a:	6a1b      	ldr	r3, [r3, #32]
  41dd8c:	f013 0f02 	tst.w	r3, #2
  41dd90:	f000 84bf 	beq.w	41e712 <basic_init+0x157e>
  41dd94:	f04f 0200 	mov.w	r2, #0
  41dd98:	2302      	movs	r3, #2
  41dd9a:	f363 0202 	bfi	r2, r3, #0, #3
  41dd9e:	2306      	movs	r3, #6
  41dda0:	f363 02c7 	bfi	r2, r3, #3, #5
  41dda4:	2309      	movs	r3, #9
  41dda6:	f363 220c 	bfi	r2, r3, #8, #5
  41ddaa:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41ddae:	2179      	movs	r1, #121	; 0x79
  41ddb0:	4b33      	ldr	r3, [pc, #204]	; (41de80 <basic_init+0xcec>)
  41ddb2:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41ddb4:	4b33      	ldr	r3, [pc, #204]	; (41de84 <basic_init+0xcf0>)
  41ddb6:	6818      	ldr	r0, [r3, #0]
  41ddb8:	3010      	adds	r0, #16
  41ddba:	4b33      	ldr	r3, [pc, #204]	; (41de88 <basic_init+0xcf4>)
  41ddbc:	6a1b      	ldr	r3, [r3, #32]
  41ddbe:	f013 0f02 	tst.w	r3, #2
  41ddc2:	f000 84aa 	beq.w	41e71a <basic_init+0x1586>
  41ddc6:	f04f 0200 	mov.w	r2, #0
  41ddca:	2302      	movs	r3, #2
  41ddcc:	f363 0202 	bfi	r2, r3, #0, #3
  41ddd0:	2306      	movs	r3, #6
  41ddd2:	f363 02c7 	bfi	r2, r3, #3, #5
  41ddd6:	2309      	movs	r3, #9
  41ddd8:	f363 220c 	bfi	r2, r3, #8, #5
  41dddc:	f36f 324f 	bfc	r2, #13, #3
  41dde0:	f241 0179 	movw	r1, #4217	; 0x1079
  41dde4:	4d26      	ldr	r5, [pc, #152]	; (41de80 <basic_init+0xcec>)
  41dde6:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
  41dde8:	4c26      	ldr	r4, [pc, #152]	; (41de84 <basic_init+0xcf0>)
  41ddea:	6820      	ldr	r0, [r4, #0]
  41ddec:	f04f 32ff 	mov.w	r2, #4294967295
  41ddf0:	f240 1179 	movw	r1, #377	; 0x179
  41ddf4:	3010      	adds	r0, #16
  41ddf6:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41ddf8:	6820      	ldr	r0, [r4, #0]
  41ddfa:	f04f 32ff 	mov.w	r2, #4294967295
  41ddfe:	f241 1179 	movw	r1, #4473	; 0x1179
  41de02:	3010      	adds	r0, #16
  41de04:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41de06:	6820      	ldr	r0, [r4, #0]
  41de08:	3010      	adds	r0, #16
  41de0a:	4b1f      	ldr	r3, [pc, #124]	; (41de88 <basic_init+0xcf4>)
  41de0c:	6a1b      	ldr	r3, [r3, #32]
  41de0e:	f013 0f02 	tst.w	r3, #2
  41de12:	f000 8486 	beq.w	41e722 <basic_init+0x158e>
  41de16:	f04f 0200 	mov.w	r2, #0
  41de1a:	2304      	movs	r3, #4
  41de1c:	f363 0202 	bfi	r2, r3, #0, #3
  41de20:	2311      	movs	r3, #17
  41de22:	f363 02c7 	bfi	r2, r3, #3, #5
  41de26:	f363 220c 	bfi	r2, r3, #8, #5
  41de2a:	2302      	movs	r3, #2
  41de2c:	f363 324f 	bfi	r2, r3, #13, #3
  41de30:	f242 0179 	movw	r1, #8313	; 0x2079
  41de34:	4b12      	ldr	r3, [pc, #72]	; (41de80 <basic_init+0xcec>)
  41de36:	4798      	blx	r3
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41de38:	4b12      	ldr	r3, [pc, #72]	; (41de84 <basic_init+0xcf0>)
  41de3a:	681c      	ldr	r4, [r3, #0]
  41de3c:	3410      	adds	r4, #16
  41de3e:	2000      	movs	r0, #0
  41de40:	4b12      	ldr	r3, [pc, #72]	; (41de8c <basic_init+0xcf8>)
  41de42:	4798      	blx	r3
  41de44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41de48:	00c0      	lsls	r0, r0, #3
  41de4a:	3050      	adds	r0, #80	; 0x50
  41de4c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41de50:	f280 8476 	bge.w	41e740 <basic_init+0x15ac>
  41de54:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41de56:	2112      	movs	r1, #18
  41de58:	4620      	mov	r0, r4
  41de5a:	4b0d      	ldr	r3, [pc, #52]	; (41de90 <basic_init+0xcfc>)
  41de5c:	4798      	blx	r3
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41de5e:	4b09      	ldr	r3, [pc, #36]	; (41de84 <basic_init+0xcf0>)
  41de60:	681c      	ldr	r4, [r3, #0]
  41de62:	3410      	adds	r4, #16
  41de64:	2000      	movs	r0, #0
  41de66:	4b09      	ldr	r3, [pc, #36]	; (41de8c <basic_init+0xcf8>)
  41de68:	4798      	blx	r3
  41de6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41de6e:	00c0      	lsls	r0, r0, #3
  41de70:	3050      	adds	r0, #80	; 0x50
  41de72:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41de76:	f280 8473 	bge.w	41e760 <basic_init+0x15cc>
  41de7a:	2201      	movs	r2, #1
  41de7c:	e00c      	b.n	41de98 <basic_init+0xd04>
  41de7e:	bf00      	nop
  41de80:	0040a2b1 	.word	0x0040a2b1
  41de84:	2041480c 	.word	0x2041480c
  41de88:	20414810 	.word	0x20414810
  41de8c:	00415c7d 	.word	0x00415c7d
  41de90:	0040a121 	.word	0x0040a121
  41de94:	0040a441 	.word	0x0040a441
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41de98:	2113      	movs	r1, #19
  41de9a:	4620      	mov	r0, r4
  41de9c:	4bc2      	ldr	r3, [pc, #776]	; (41e1a8 <basic_init+0x1014>)
  41de9e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41dea0:	4bc2      	ldr	r3, [pc, #776]	; (41e1ac <basic_init+0x1018>)
  41dea2:	681c      	ldr	r4, [r3, #0]
  41dea4:	3410      	adds	r4, #16
  41dea6:	2000      	movs	r0, #0
  41dea8:	4bc1      	ldr	r3, [pc, #772]	; (41e1b0 <basic_init+0x101c>)
  41deaa:	4798      	blx	r3
  41deac:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41deb0:	3050      	adds	r0, #80	; 0x50
  41deb2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41deb6:	f280 8463 	bge.w	41e780 <basic_init+0x15ec>
  41deba:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41debc:	2110      	movs	r1, #16
  41debe:	4620      	mov	r0, r4
  41dec0:	4bb9      	ldr	r3, [pc, #740]	; (41e1a8 <basic_init+0x1014>)
  41dec2:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41dec4:	4bb9      	ldr	r3, [pc, #740]	; (41e1ac <basic_init+0x1018>)
  41dec6:	681c      	ldr	r4, [r3, #0]
  41dec8:	3410      	adds	r4, #16
  41deca:	2000      	movs	r0, #0
  41decc:	4bb8      	ldr	r3, [pc, #736]	; (41e1b0 <basic_init+0x101c>)
  41dece:	4798      	blx	r3
  41ded0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ded4:	3050      	adds	r0, #80	; 0x50
  41ded6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41deda:	f280 8460 	bge.w	41e79e <basic_init+0x160a>
  41dede:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41dee0:	2111      	movs	r1, #17
  41dee2:	4620      	mov	r0, r4
  41dee4:	4bb0      	ldr	r3, [pc, #704]	; (41e1a8 <basic_init+0x1014>)
  41dee6:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
  41dee8:	4bb0      	ldr	r3, [pc, #704]	; (41e1ac <basic_init+0x1018>)
  41deea:	681c      	ldr	r4, [r3, #0]
  41deec:	3410      	adds	r4, #16
  41deee:	2000      	movs	r0, #0
  41def0:	4baf      	ldr	r3, [pc, #700]	; (41e1b0 <basic_init+0x101c>)
  41def2:	4798      	blx	r3
  41def4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41def8:	0080      	lsls	r0, r0, #2
  41defa:	3050      	adds	r0, #80	; 0x50
  41defc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41df00:	f280 845c 	bge.w	41e7bc <basic_init+0x1628>
  41df04:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41df06:	2114      	movs	r1, #20
  41df08:	4620      	mov	r0, r4
  41df0a:	4ba7      	ldr	r3, [pc, #668]	; (41e1a8 <basic_init+0x1014>)
  41df0c:	4798      	blx	r3
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41df0e:	4ba7      	ldr	r3, [pc, #668]	; (41e1ac <basic_init+0x1018>)
  41df10:	681c      	ldr	r4, [r3, #0]
  41df12:	3410      	adds	r4, #16
  41df14:	4ba7      	ldr	r3, [pc, #668]	; (41e1b4 <basic_init+0x1020>)
  41df16:	6a1b      	ldr	r3, [r3, #32]
  41df18:	f013 0f20 	tst.w	r3, #32
  41df1c:	f000 845e 	beq.w	41e7dc <basic_init+0x1648>
  41df20:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41df22:	2140      	movs	r1, #64	; 0x40
  41df24:	4620      	mov	r0, r4
  41df26:	4da0      	ldr	r5, [pc, #640]	; (41e1a8 <basic_init+0x1014>)
  41df28:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
  41df2a:	4ca0      	ldr	r4, [pc, #640]	; (41e1ac <basic_init+0x1018>)
  41df2c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  41df2e:	2200      	movs	r2, #0
  41df30:	214c      	movs	r1, #76	; 0x4c
  41df32:	3010      	adds	r0, #16
  41df34:	4ea0      	ldr	r6, [pc, #640]	; (41e1b8 <basic_init+0x1024>)
  41df36:	47b0      	blx	r6
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
  41df38:	6820      	ldr	r0, [r4, #0]
  41df3a:	227f      	movs	r2, #127	; 0x7f
  41df3c:	f44f 7113 	mov.w	r1, #588	; 0x24c
  41df40:	3010      	adds	r0, #16
  41df42:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
  41df44:	6820      	ldr	r0, [r4, #0]
  41df46:	4f9b      	ldr	r7, [pc, #620]	; (41e1b4 <basic_init+0x1020>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  41df48:	89ba      	ldrh	r2, [r7, #12]
  41df4a:	2149      	movs	r1, #73	; 0x49
  41df4c:	3010      	adds	r0, #16
  41df4e:	4e9b      	ldr	r6, [pc, #620]	; (41e1bc <basic_init+0x1028>)
  41df50:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
  41df52:	6820      	ldr	r0, [r4, #0]
  41df54:	89fa      	ldrh	r2, [r7, #14]
  41df56:	f240 4149 	movw	r1, #1097	; 0x449
  41df5a:	3010      	adds	r0, #16
  41df5c:	47b0      	blx	r6
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41df5e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41df60:	2200      	movs	r2, #0
  41df62:	21b0      	movs	r1, #176	; 0xb0
  41df64:	3010      	adds	r0, #16
  41df66:	47a8      	blx	r5
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
  41df68:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
  41df6a:	223c      	movs	r2, #60	; 0x3c
  41df6c:	21b5      	movs	r1, #181	; 0xb5
  41df6e:	3010      	adds	r0, #16
  41df70:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41df72:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41df74:	2229      	movs	r2, #41	; 0x29
  41df76:	21b6      	movs	r1, #182	; 0xb6
  41df78:	3010      	adds	r0, #16
  41df7a:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  41df7c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41df7e:	224c      	movs	r2, #76	; 0x4c
  41df80:	21b7      	movs	r1, #183	; 0xb7
  41df82:	3010      	adds	r0, #16
  41df84:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41df86:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
  41df88:	2200      	movs	r2, #0
  41df8a:	21b1      	movs	r1, #177	; 0xb1
  41df8c:	3010      	adds	r0, #16
  41df8e:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
  41df90:	6820      	ldr	r0, [r4, #0]
  41df92:	2200      	movs	r2, #0
  41df94:	f241 01b1 	movw	r1, #4273	; 0x10b1
  41df98:	3010      	adds	r0, #16
  41df9a:	47a8      	blx	r5
    style_init_reset(&styles->pad_inner);
  41df9c:	6820      	ldr	r0, [r4, #0]
  41df9e:	3014      	adds	r0, #20
  41dfa0:	4b87      	ldr	r3, [pc, #540]	; (41e1c0 <basic_init+0x102c>)
  41dfa2:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41dfa4:	6824      	ldr	r4, [r4, #0]
  41dfa6:	3414      	adds	r4, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41dfa8:	2000      	movs	r0, #0
  41dfaa:	4b86      	ldr	r3, [pc, #536]	; (41e1c4 <basic_init+0x1030>)
  41dfac:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41dfae:	2801      	cmp	r0, #1
  41dfb0:	f240 842d 	bls.w	41e80e <basic_init+0x167a>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41dfb4:	2000      	movs	r0, #0
  41dfb6:	4b7e      	ldr	r3, [pc, #504]	; (41e1b0 <basic_init+0x101c>)
  41dfb8:	4798      	blx	r3
  41dfba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41dfbe:	00c0      	lsls	r0, r0, #3
  41dfc0:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41dfc2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41dfc6:	f280 843f 	bge.w	41e848 <basic_init+0x16b4>
  41dfca:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41dfcc:	2114      	movs	r1, #20
  41dfce:	4620      	mov	r0, r4
  41dfd0:	4b75      	ldr	r3, [pc, #468]	; (41e1a8 <basic_init+0x1014>)
  41dfd2:	4798      	blx	r3
    style_init_reset(&styles->pad_small);
  41dfd4:	4b75      	ldr	r3, [pc, #468]	; (41e1ac <basic_init+0x1018>)
  41dfd6:	6818      	ldr	r0, [r3, #0]
  41dfd8:	3018      	adds	r0, #24
  41dfda:	4b79      	ldr	r3, [pc, #484]	; (41e1c0 <basic_init+0x102c>)
  41dfdc:	4798      	blx	r3
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
  41dfde:	2000      	movs	r0, #0
  41dfe0:	4b78      	ldr	r3, [pc, #480]	; (41e1c4 <basic_init+0x1030>)
  41dfe2:	4798      	blx	r3
  41dfe4:	2801      	cmp	r0, #1
  41dfe6:	f240 843f 	bls.w	41e868 <basic_init+0x16d4>
  41dfea:	2000      	movs	r0, #0
  41dfec:	4b70      	ldr	r3, [pc, #448]	; (41e1b0 <basic_init+0x101c>)
  41dfee:	4798      	blx	r3
  41dff0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41dff4:	0080      	lsls	r0, r0, #2
  41dff6:	3050      	adds	r0, #80	; 0x50
  41dff8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41dffc:	f280 8451 	bge.w	41e8a2 <basic_init+0x170e>
  41e000:	2401      	movs	r4, #1
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
  41e002:	4e6a      	ldr	r6, [pc, #424]	; (41e1ac <basic_init+0x1018>)
  41e004:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41e006:	4622      	mov	r2, r4
  41e008:	2112      	movs	r1, #18
  41e00a:	3018      	adds	r0, #24
  41e00c:	4d66      	ldr	r5, [pc, #408]	; (41e1a8 <basic_init+0x1014>)
  41e00e:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41e010:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41e012:	4622      	mov	r2, r4
  41e014:	2113      	movs	r1, #19
  41e016:	3018      	adds	r0, #24
  41e018:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
  41e01a:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41e01c:	4622      	mov	r2, r4
  41e01e:	2110      	movs	r1, #16
  41e020:	3018      	adds	r0, #24
  41e022:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41e024:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41e026:	4622      	mov	r2, r4
  41e028:	2111      	movs	r1, #17
  41e02a:	3018      	adds	r0, #24
  41e02c:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41e02e:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41e030:	4622      	mov	r2, r4
  41e032:	2114      	movs	r1, #20
  41e034:	3018      	adds	r0, #24
  41e036:	47a8      	blx	r5
  41e038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41e03a:	2302      	movs	r3, #2
  41e03c:	f04f 0200 	mov.w	r2, #0
  41e040:	f363 0202 	bfi	r2, r3, #0, #3
  41e044:	2108      	movs	r1, #8
  41e046:	f361 02c7 	bfi	r2, r1, #3, #5
  41e04a:	210b      	movs	r1, #11
  41e04c:	f361 220c 	bfi	r2, r1, #8, #5
  41e050:	f363 324f 	bfi	r2, r3, #13, #3
  41e054:	f7ff b8ba 	b.w	41d1cc <basic_init+0x38>
  41e058:	f04f 0207 	mov.w	r2, #7
  41e05c:	231c      	movs	r3, #28
  41e05e:	f363 02c7 	bfi	r2, r3, #3, #5
  41e062:	231d      	movs	r3, #29
  41e064:	f363 220c 	bfi	r2, r3, #8, #5
  41e068:	2302      	movs	r3, #2
  41e06a:	f363 324f 	bfi	r2, r3, #13, #3
  41e06e:	f7ff b8c7 	b.w	41d200 <basic_init+0x6c>
  41e072:	f04f 0207 	mov.w	r2, #7
  41e076:	231c      	movs	r3, #28
  41e078:	f363 02c7 	bfi	r2, r3, #3, #5
  41e07c:	231d      	movs	r3, #29
  41e07e:	f363 220c 	bfi	r2, r3, #8, #5
  41e082:	2302      	movs	r3, #2
  41e084:	f363 324f 	bfi	r2, r3, #13, #3
  41e088:	f7ff b8d5 	b.w	41d236 <basic_init+0xa2>
  41e08c:	f04f 0207 	mov.w	r2, #7
  41e090:	231c      	movs	r3, #28
  41e092:	f363 02c7 	bfi	r2, r3, #3, #5
  41e096:	231d      	movs	r3, #29
  41e098:	f363 220c 	bfi	r2, r3, #8, #5
  41e09c:	2302      	movs	r3, #2
  41e09e:	f363 324f 	bfi	r2, r3, #13, #3
  41e0a2:	f7ff b8e2 	b.w	41d26a <basic_init+0xd6>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
  41e0a6:	2000      	movs	r0, #0
  41e0a8:	4b41      	ldr	r3, [pc, #260]	; (41e1b0 <basic_init+0x101c>)
  41e0aa:	4798      	blx	r3
  41e0ac:	300a      	adds	r0, #10
  41e0ae:	00c0      	lsls	r0, r0, #3
  41e0b0:	4b45      	ldr	r3, [pc, #276]	; (41e1c8 <basic_init+0x1034>)
  41e0b2:	fb83 2300 	smull	r2, r3, r3, r0
  41e0b6:	17c2      	asrs	r2, r0, #31
  41e0b8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41e0bc:	b212      	sxth	r2, r2
  41e0be:	f7ff b8f4 	b.w	41d2aa <basic_init+0x116>
  41e0c2:	f04f 0200 	mov.w	r2, #0
  41e0c6:	2303      	movs	r3, #3
  41e0c8:	f363 0202 	bfi	r2, r3, #0, #3
  41e0cc:	230b      	movs	r3, #11
  41e0ce:	f363 02c7 	bfi	r2, r3, #3, #5
  41e0d2:	230e      	movs	r3, #14
  41e0d4:	f363 220c 	bfi	r2, r3, #8, #5
  41e0d8:	f36f 324f 	bfc	r2, #13, #3
  41e0dc:	f7ff b8fa 	b.w	41d2d4 <basic_init+0x140>
  41e0e0:	f04f 0200 	mov.w	r2, #0
  41e0e4:	2304      	movs	r3, #4
  41e0e6:	f363 0202 	bfi	r2, r3, #0, #3
  41e0ea:	2310      	movs	r3, #16
  41e0ec:	f363 02c7 	bfi	r2, r3, #3, #5
  41e0f0:	2312      	movs	r3, #18
  41e0f2:	f363 220c 	bfi	r2, r3, #8, #5
  41e0f6:	2302      	movs	r3, #2
  41e0f8:	f363 324f 	bfi	r2, r3, #13, #3
  41e0fc:	f7ff b905 	b.w	41d30a <basic_init+0x176>
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
  41e100:	4b2a      	ldr	r3, [pc, #168]	; (41e1ac <basic_init+0x1018>)
  41e102:	6818      	ldr	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41e104:	4b2b      	ldr	r3, [pc, #172]	; (41e1b4 <basic_init+0x1020>)
  41e106:	899a      	ldrh	r2, [r3, #12]
  41e108:	f240 2139 	movw	r1, #569	; 0x239
  41e10c:	3004      	adds	r0, #4
  41e10e:	4b2b      	ldr	r3, [pc, #172]	; (41e1bc <basic_init+0x1028>)
  41e110:	4798      	blx	r3
  41e112:	f7ff b903 	b.w	41d31c <basic_init+0x188>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
  41e116:	2000      	movs	r0, #0
  41e118:	4b25      	ldr	r3, [pc, #148]	; (41e1b0 <basic_init+0x101c>)
  41e11a:	4798      	blx	r3
  41e11c:	3028      	adds	r0, #40	; 0x28
  41e11e:	0040      	lsls	r0, r0, #1
  41e120:	4b29      	ldr	r3, [pc, #164]	; (41e1c8 <basic_init+0x1034>)
  41e122:	fb83 2300 	smull	r2, r3, r3, r0
  41e126:	17c2      	asrs	r2, r0, #31
  41e128:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41e12c:	b212      	sxth	r2, r2
  41e12e:	f7ff b90a 	b.w	41d346 <basic_init+0x1b2>
  41e132:	f04f 32ff 	mov.w	r2, #4294967295
  41e136:	f7ff b927 	b.w	41d388 <basic_init+0x1f4>
  41e13a:	f04f 32ff 	mov.w	r2, #4294967295
  41e13e:	f7ff b945 	b.w	41d3cc <basic_init+0x238>
  41e142:	f04f 32ff 	mov.w	r2, #4294967295
  41e146:	f7ff b95c 	b.w	41d402 <basic_init+0x26e>
  41e14a:	f04f 32ff 	mov.w	r2, #4294967295
  41e14e:	f7ff b974 	b.w	41d43a <basic_init+0x2a6>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41e152:	2000      	movs	r0, #0
  41e154:	4b16      	ldr	r3, [pc, #88]	; (41e1b0 <basic_init+0x101c>)
  41e156:	4798      	blx	r3
  41e158:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41e15c:	3050      	adds	r0, #80	; 0x50
  41e15e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41e162:	da02      	bge.n	41e16a <basic_init+0xfd6>
  41e164:	2401      	movs	r4, #1
  41e166:	f7ff b986 	b.w	41d476 <basic_init+0x2e2>
  41e16a:	2000      	movs	r0, #0
  41e16c:	4b10      	ldr	r3, [pc, #64]	; (41e1b0 <basic_init+0x101c>)
  41e16e:	4798      	blx	r3
  41e170:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41e174:	3050      	adds	r0, #80	; 0x50
  41e176:	4a14      	ldr	r2, [pc, #80]	; (41e1c8 <basic_init+0x1034>)
  41e178:	fb82 3200 	smull	r3, r2, r2, r0
  41e17c:	17c4      	asrs	r4, r0, #31
  41e17e:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41e182:	b2a4      	uxth	r4, r4
  41e184:	f7ff b977 	b.w	41d476 <basic_init+0x2e2>
  41e188:	2000      	movs	r0, #0
  41e18a:	4b09      	ldr	r3, [pc, #36]	; (41e1b0 <basic_init+0x101c>)
  41e18c:	4798      	blx	r3
  41e18e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41e192:	0040      	lsls	r0, r0, #1
  41e194:	3050      	adds	r0, #80	; 0x50
  41e196:	4a0c      	ldr	r2, [pc, #48]	; (41e1c8 <basic_init+0x1034>)
  41e198:	fb82 3200 	smull	r3, r2, r2, r0
  41e19c:	17c4      	asrs	r4, r0, #31
  41e19e:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41e1a2:	b2a4      	uxth	r4, r4
  41e1a4:	f7ff b967 	b.w	41d476 <basic_init+0x2e2>
  41e1a8:	0040a121 	.word	0x0040a121
  41e1ac:	2041480c 	.word	0x2041480c
  41e1b0:	00415c7d 	.word	0x00415c7d
  41e1b4:	20414810 	.word	0x20414810
  41e1b8:	0040a441 	.word	0x0040a441
  41e1bc:	0040a2b1 	.word	0x0040a2b1
  41e1c0:	004198fd 	.word	0x004198fd
  41e1c4:	00415c9d 	.word	0x00415c9d
  41e1c8:	66666667 	.word	0x66666667
  41e1cc:	2000      	movs	r0, #0
  41e1ce:	4bdf      	ldr	r3, [pc, #892]	; (41e54c <basic_init+0x13b8>)
  41e1d0:	4798      	blx	r3
  41e1d2:	3028      	adds	r0, #40	; 0x28
  41e1d4:	0040      	lsls	r0, r0, #1
  41e1d6:	4bde      	ldr	r3, [pc, #888]	; (41e550 <basic_init+0x13bc>)
  41e1d8:	fb83 2300 	smull	r2, r3, r3, r0
  41e1dc:	17c2      	asrs	r2, r0, #31
  41e1de:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41e1e2:	b292      	uxth	r2, r2
  41e1e4:	f7ff b951 	b.w	41d48a <basic_init+0x2f6>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41e1e8:	2000      	movs	r0, #0
  41e1ea:	4bd8      	ldr	r3, [pc, #864]	; (41e54c <basic_init+0x13b8>)
  41e1ec:	4798      	blx	r3
  41e1ee:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41e1f2:	3050      	adds	r0, #80	; 0x50
  41e1f4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41e1f8:	da02      	bge.n	41e200 <basic_init+0x106c>
  41e1fa:	2401      	movs	r4, #1
  41e1fc:	f7ff b974 	b.w	41d4e8 <basic_init+0x354>
  41e200:	2000      	movs	r0, #0
  41e202:	4bd2      	ldr	r3, [pc, #840]	; (41e54c <basic_init+0x13b8>)
  41e204:	4798      	blx	r3
  41e206:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41e20a:	3050      	adds	r0, #80	; 0x50
  41e20c:	4ad0      	ldr	r2, [pc, #832]	; (41e550 <basic_init+0x13bc>)
  41e20e:	fb82 3200 	smull	r3, r2, r2, r0
  41e212:	17c4      	asrs	r4, r0, #31
  41e214:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41e218:	b2a4      	uxth	r4, r4
  41e21a:	f7ff b965 	b.w	41d4e8 <basic_init+0x354>
  41e21e:	2000      	movs	r0, #0
  41e220:	4bca      	ldr	r3, [pc, #808]	; (41e54c <basic_init+0x13b8>)
  41e222:	4798      	blx	r3
  41e224:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41e228:	0040      	lsls	r0, r0, #1
  41e22a:	3050      	adds	r0, #80	; 0x50
  41e22c:	4ac8      	ldr	r2, [pc, #800]	; (41e550 <basic_init+0x13bc>)
  41e22e:	fb82 3200 	smull	r3, r2, r2, r0
  41e232:	17c4      	asrs	r4, r0, #31
  41e234:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41e238:	b2a4      	uxth	r4, r4
  41e23a:	f7ff b955 	b.w	41d4e8 <basic_init+0x354>
  41e23e:	2000      	movs	r0, #0
  41e240:	4bc2      	ldr	r3, [pc, #776]	; (41e54c <basic_init+0x13b8>)
  41e242:	4798      	blx	r3
  41e244:	3028      	adds	r0, #40	; 0x28
  41e246:	0040      	lsls	r0, r0, #1
  41e248:	4bc1      	ldr	r3, [pc, #772]	; (41e550 <basic_init+0x13bc>)
  41e24a:	fb83 2300 	smull	r2, r3, r3, r0
  41e24e:	17c2      	asrs	r2, r0, #31
  41e250:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41e254:	b292      	uxth	r2, r2
  41e256:	f7ff b951 	b.w	41d4fc <basic_init+0x368>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41e25a:	2000      	movs	r0, #0
  41e25c:	4bbb      	ldr	r3, [pc, #748]	; (41e54c <basic_init+0x13b8>)
  41e25e:	4798      	blx	r3
  41e260:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41e264:	3050      	adds	r0, #80	; 0x50
  41e266:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41e26a:	da02      	bge.n	41e272 <basic_init+0x10de>
  41e26c:	2401      	movs	r4, #1
  41e26e:	f7ff b960 	b.w	41d532 <basic_init+0x39e>
  41e272:	2000      	movs	r0, #0
  41e274:	4bb5      	ldr	r3, [pc, #724]	; (41e54c <basic_init+0x13b8>)
  41e276:	4798      	blx	r3
  41e278:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41e27c:	3050      	adds	r0, #80	; 0x50
  41e27e:	4ab4      	ldr	r2, [pc, #720]	; (41e550 <basic_init+0x13bc>)
  41e280:	fb82 3200 	smull	r3, r2, r2, r0
  41e284:	17c4      	asrs	r4, r0, #31
  41e286:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41e28a:	b2a4      	uxth	r4, r4
  41e28c:	f7ff b951 	b.w	41d532 <basic_init+0x39e>
  41e290:	2000      	movs	r0, #0
  41e292:	4bae      	ldr	r3, [pc, #696]	; (41e54c <basic_init+0x13b8>)
  41e294:	4798      	blx	r3
  41e296:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41e29a:	0040      	lsls	r0, r0, #1
  41e29c:	3050      	adds	r0, #80	; 0x50
  41e29e:	4aac      	ldr	r2, [pc, #688]	; (41e550 <basic_init+0x13bc>)
  41e2a0:	fb82 3200 	smull	r3, r2, r2, r0
  41e2a4:	17c4      	asrs	r4, r0, #31
  41e2a6:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41e2aa:	b2a4      	uxth	r4, r4
  41e2ac:	f7ff b941 	b.w	41d532 <basic_init+0x39e>
  41e2b0:	2000      	movs	r0, #0
  41e2b2:	4ba6      	ldr	r3, [pc, #664]	; (41e54c <basic_init+0x13b8>)
  41e2b4:	4798      	blx	r3
  41e2b6:	3028      	adds	r0, #40	; 0x28
  41e2b8:	0040      	lsls	r0, r0, #1
  41e2ba:	4ba5      	ldr	r3, [pc, #660]	; (41e550 <basic_init+0x13bc>)
  41e2bc:	fb83 2300 	smull	r2, r3, r3, r0
  41e2c0:	17c2      	asrs	r2, r0, #31
  41e2c2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41e2c6:	b292      	uxth	r2, r2
  41e2c8:	f7ff b93d 	b.w	41d546 <basic_init+0x3b2>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41e2cc:	2000      	movs	r0, #0
  41e2ce:	4b9f      	ldr	r3, [pc, #636]	; (41e54c <basic_init+0x13b8>)
  41e2d0:	4798      	blx	r3
  41e2d2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41e2d6:	3050      	adds	r0, #80	; 0x50
  41e2d8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41e2dc:	da02      	bge.n	41e2e4 <basic_init+0x1150>
  41e2de:	2401      	movs	r4, #1
  41e2e0:	f7ff b94c 	b.w	41d57c <basic_init+0x3e8>
  41e2e4:	2000      	movs	r0, #0
  41e2e6:	4b99      	ldr	r3, [pc, #612]	; (41e54c <basic_init+0x13b8>)
  41e2e8:	4798      	blx	r3
  41e2ea:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41e2ee:	3050      	adds	r0, #80	; 0x50
  41e2f0:	4a97      	ldr	r2, [pc, #604]	; (41e550 <basic_init+0x13bc>)
  41e2f2:	fb82 3200 	smull	r3, r2, r2, r0
  41e2f6:	17c4      	asrs	r4, r0, #31
  41e2f8:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41e2fc:	b2a4      	uxth	r4, r4
  41e2fe:	f7ff b93d 	b.w	41d57c <basic_init+0x3e8>
  41e302:	2000      	movs	r0, #0
  41e304:	4b91      	ldr	r3, [pc, #580]	; (41e54c <basic_init+0x13b8>)
  41e306:	4798      	blx	r3
  41e308:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41e30c:	0040      	lsls	r0, r0, #1
  41e30e:	3050      	adds	r0, #80	; 0x50
  41e310:	4a8f      	ldr	r2, [pc, #572]	; (41e550 <basic_init+0x13bc>)
  41e312:	fb82 3200 	smull	r3, r2, r2, r0
  41e316:	17c4      	asrs	r4, r0, #31
  41e318:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41e31c:	b2a4      	uxth	r4, r4
  41e31e:	f7ff b92d 	b.w	41d57c <basic_init+0x3e8>
  41e322:	2000      	movs	r0, #0
  41e324:	4b89      	ldr	r3, [pc, #548]	; (41e54c <basic_init+0x13b8>)
  41e326:	4798      	blx	r3
  41e328:	3028      	adds	r0, #40	; 0x28
  41e32a:	0040      	lsls	r0, r0, #1
  41e32c:	4b88      	ldr	r3, [pc, #544]	; (41e550 <basic_init+0x13bc>)
  41e32e:	fb83 2300 	smull	r2, r3, r3, r0
  41e332:	17c2      	asrs	r2, r0, #31
  41e334:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41e338:	b292      	uxth	r2, r2
  41e33a:	f7ff b929 	b.w	41d590 <basic_init+0x3fc>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
  41e33e:	2000      	movs	r0, #0
  41e340:	4b82      	ldr	r3, [pc, #520]	; (41e54c <basic_init+0x13b8>)
  41e342:	4798      	blx	r3
  41e344:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41e348:	3050      	adds	r0, #80	; 0x50
  41e34a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41e34e:	da02      	bge.n	41e356 <basic_init+0x11c2>
  41e350:	2201      	movs	r2, #1
  41e352:	f7ff b938 	b.w	41d5c6 <basic_init+0x432>
  41e356:	2000      	movs	r0, #0
  41e358:	4b7c      	ldr	r3, [pc, #496]	; (41e54c <basic_init+0x13b8>)
  41e35a:	4798      	blx	r3
  41e35c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41e360:	3050      	adds	r0, #80	; 0x50
  41e362:	4b7b      	ldr	r3, [pc, #492]	; (41e550 <basic_init+0x13bc>)
  41e364:	fb83 2300 	smull	r2, r3, r3, r0
  41e368:	17c2      	asrs	r2, r0, #31
  41e36a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41e36e:	b212      	sxth	r2, r2
  41e370:	f7ff b929 	b.w	41d5c6 <basic_init+0x432>
  41e374:	2000      	movs	r0, #0
  41e376:	4b75      	ldr	r3, [pc, #468]	; (41e54c <basic_init+0x13b8>)
  41e378:	4798      	blx	r3
  41e37a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41e37e:	0040      	lsls	r0, r0, #1
  41e380:	3050      	adds	r0, #80	; 0x50
  41e382:	4b73      	ldr	r3, [pc, #460]	; (41e550 <basic_init+0x13bc>)
  41e384:	fb83 2300 	smull	r2, r3, r3, r0
  41e388:	17c2      	asrs	r2, r0, #31
  41e38a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41e38e:	b212      	sxth	r2, r2
  41e390:	f7ff b919 	b.w	41d5c6 <basic_init+0x432>
  41e394:	2302      	movs	r3, #2
  41e396:	f04f 0200 	mov.w	r2, #0
  41e39a:	f363 0202 	bfi	r2, r3, #0, #3
  41e39e:	2108      	movs	r1, #8
  41e3a0:	f361 02c7 	bfi	r2, r1, #3, #5
  41e3a4:	2109      	movs	r1, #9
  41e3a6:	f361 220c 	bfi	r2, r1, #8, #5
  41e3aa:	f363 324f 	bfi	r2, r3, #13, #3
  41e3ae:	f7ff b938 	b.w	41d622 <basic_init+0x48e>
  41e3b2:	f04f 0200 	mov.w	r2, #0
  41e3b6:	2302      	movs	r3, #2
  41e3b8:	f363 0202 	bfi	r2, r3, #0, #3
  41e3bc:	2308      	movs	r3, #8
  41e3be:	f363 02c7 	bfi	r2, r3, #3, #5
  41e3c2:	f363 220c 	bfi	r2, r3, #8, #5
  41e3c6:	f36f 324f 	bfc	r2, #13, #3
  41e3ca:	f7ff b941 	b.w	41d650 <basic_init+0x4bc>
  41e3ce:	f04f 0200 	mov.w	r2, #0
  41e3d2:	2305      	movs	r3, #5
  41e3d4:	f363 0202 	bfi	r2, r3, #0, #3
  41e3d8:	2314      	movs	r3, #20
  41e3da:	f363 02c7 	bfi	r2, r3, #3, #5
  41e3de:	2315      	movs	r3, #21
  41e3e0:	f363 220c 	bfi	r2, r3, #8, #5
  41e3e4:	2302      	movs	r3, #2
  41e3e6:	f363 324f 	bfi	r2, r3, #13, #3
  41e3ea:	f7ff b94a 	b.w	41d682 <basic_init+0x4ee>
  41e3ee:	f04f 0200 	mov.w	r2, #0
  41e3f2:	2305      	movs	r3, #5
  41e3f4:	f363 0202 	bfi	r2, r3, #0, #3
  41e3f8:	2314      	movs	r3, #20
  41e3fa:	f363 02c7 	bfi	r2, r3, #3, #5
  41e3fe:	2315      	movs	r3, #21
  41e400:	f363 220c 	bfi	r2, r3, #8, #5
  41e404:	2302      	movs	r3, #2
  41e406:	f363 324f 	bfi	r2, r3, #13, #3
  41e40a:	f7ff b954 	b.w	41d6b6 <basic_init+0x522>
  41e40e:	f04f 0200 	mov.w	r2, #0
  41e412:	2305      	movs	r3, #5
  41e414:	f363 0202 	bfi	r2, r3, #0, #3
  41e418:	2314      	movs	r3, #20
  41e41a:	f363 02c7 	bfi	r2, r3, #3, #5
  41e41e:	2315      	movs	r3, #21
  41e420:	f363 220c 	bfi	r2, r3, #8, #5
  41e424:	2302      	movs	r3, #2
  41e426:	f363 324f 	bfi	r2, r3, #13, #3
  41e42a:	f7ff b95d 	b.w	41d6e8 <basic_init+0x554>
  41e42e:	f04f 0200 	mov.w	r2, #0
  41e432:	2305      	movs	r3, #5
  41e434:	f363 0202 	bfi	r2, r3, #0, #3
  41e438:	2314      	movs	r3, #20
  41e43a:	f363 02c7 	bfi	r2, r3, #3, #5
  41e43e:	2315      	movs	r3, #21
  41e440:	f363 220c 	bfi	r2, r3, #8, #5
  41e444:	2302      	movs	r3, #2
  41e446:	f363 324f 	bfi	r2, r3, #13, #3
  41e44a:	f7ff b967 	b.w	41d71c <basic_init+0x588>
  41e44e:	f04f 0200 	mov.w	r2, #0
  41e452:	2302      	movs	r3, #2
  41e454:	f363 0202 	bfi	r2, r3, #0, #3
  41e458:	2309      	movs	r3, #9
  41e45a:	f363 02c7 	bfi	r2, r3, #3, #5
  41e45e:	230a      	movs	r3, #10
  41e460:	f363 220c 	bfi	r2, r3, #8, #5
  41e464:	2303      	movs	r3, #3
  41e466:	f363 324f 	bfi	r2, r3, #13, #3
  41e46a:	f7ff b971 	b.w	41d750 <basic_init+0x5bc>
  41e46e:	f04f 0200 	mov.w	r2, #0
  41e472:	2303      	movs	r3, #3
  41e474:	f363 0202 	bfi	r2, r3, #0, #3
  41e478:	230b      	movs	r3, #11
  41e47a:	f363 02c7 	bfi	r2, r3, #3, #5
  41e47e:	230e      	movs	r3, #14
  41e480:	f363 220c 	bfi	r2, r3, #8, #5
  41e484:	f36f 324f 	bfc	r2, #13, #3
  41e488:	f7ff b982 	b.w	41d790 <basic_init+0x5fc>
  41e48c:	f04f 0200 	mov.w	r2, #0
  41e490:	2303      	movs	r3, #3
  41e492:	f363 0202 	bfi	r2, r3, #0, #3
  41e496:	230b      	movs	r3, #11
  41e498:	f363 02c7 	bfi	r2, r3, #3, #5
  41e49c:	230d      	movs	r3, #13
  41e49e:	f363 220c 	bfi	r2, r3, #8, #5
  41e4a2:	2301      	movs	r3, #1
  41e4a4:	f363 324f 	bfi	r2, r3, #13, #3
  41e4a8:	f7ff b9b1 	b.w	41d80e <basic_init+0x67a>
  41e4ac:	f04f 0200 	mov.w	r2, #0
  41e4b0:	2303      	movs	r3, #3
  41e4b2:	f363 0202 	bfi	r2, r3, #0, #3
  41e4b6:	230b      	movs	r3, #11
  41e4b8:	f363 02c7 	bfi	r2, r3, #3, #5
  41e4bc:	230d      	movs	r3, #13
  41e4be:	f363 220c 	bfi	r2, r3, #8, #5
  41e4c2:	2301      	movs	r3, #1
  41e4c4:	f363 324f 	bfi	r2, r3, #13, #3
  41e4c8:	f7ff b9bd 	b.w	41d846 <basic_init+0x6b2>
  41e4cc:	f04f 0200 	mov.w	r2, #0
  41e4d0:	2303      	movs	r3, #3
  41e4d2:	f363 0202 	bfi	r2, r3, #0, #3
  41e4d6:	230b      	movs	r3, #11
  41e4d8:	f363 02c7 	bfi	r2, r3, #3, #5
  41e4dc:	230d      	movs	r3, #13
  41e4de:	f363 220c 	bfi	r2, r3, #8, #5
  41e4e2:	2301      	movs	r3, #1
  41e4e4:	f363 324f 	bfi	r2, r3, #13, #3
  41e4e8:	f7ff b9c9 	b.w	41d87e <basic_init+0x6ea>
  41e4ec:	f04f 0200 	mov.w	r2, #0
  41e4f0:	2303      	movs	r3, #3
  41e4f2:	f363 0202 	bfi	r2, r3, #0, #3
  41e4f6:	230b      	movs	r3, #11
  41e4f8:	f363 02c7 	bfi	r2, r3, #3, #5
  41e4fc:	230d      	movs	r3, #13
  41e4fe:	f363 220c 	bfi	r2, r3, #8, #5
  41e502:	2301      	movs	r3, #1
  41e504:	f363 324f 	bfi	r2, r3, #13, #3
  41e508:	f7ff b9d5 	b.w	41d8b6 <basic_init+0x722>
  41e50c:	f04f 32ff 	mov.w	r2, #4294967295
  41e510:	f7ff b9ed 	b.w	41d8ee <basic_init+0x75a>
  41e514:	f04f 32ff 	mov.w	r2, #4294967295
  41e518:	f7ff b9f8 	b.w	41d90c <basic_init+0x778>
  41e51c:	f04f 32ff 	mov.w	r2, #4294967295
  41e520:	f7ff ba03 	b.w	41d92a <basic_init+0x796>
  41e524:	f04f 0200 	mov.w	r2, #0
  41e528:	2304      	movs	r3, #4
  41e52a:	f363 0202 	bfi	r2, r3, #0, #3
  41e52e:	2313      	movs	r3, #19
  41e530:	f363 02c7 	bfi	r2, r3, #3, #5
  41e534:	f363 220c 	bfi	r2, r3, #8, #5
  41e538:	2306      	movs	r3, #6
  41e53a:	f363 324f 	bfi	r2, r3, #13, #3
  41e53e:	f7ff ba0e 	b.w	41d95e <basic_init+0x7ca>
  41e542:	f04f 32ff 	mov.w	r2, #4294967295
  41e546:	f7ff ba26 	b.w	41d996 <basic_init+0x802>
  41e54a:	bf00      	nop
  41e54c:	00415c7d 	.word	0x00415c7d
  41e550:	66666667 	.word	0x66666667
  41e554:	f04f 32ff 	mov.w	r2, #4294967295
  41e558:	f7ff ba2c 	b.w	41d9b4 <basic_init+0x820>
  41e55c:	f04f 32ff 	mov.w	r2, #4294967295
  41e560:	f7ff ba37 	b.w	41d9d2 <basic_init+0x83e>
  41e564:	f04f 0200 	mov.w	r2, #0
  41e568:	2304      	movs	r3, #4
  41e56a:	f363 0202 	bfi	r2, r3, #0, #3
  41e56e:	2313      	movs	r3, #19
  41e570:	f363 02c7 	bfi	r2, r3, #3, #5
  41e574:	f363 220c 	bfi	r2, r3, #8, #5
  41e578:	2306      	movs	r3, #6
  41e57a:	f363 324f 	bfi	r2, r3, #13, #3
  41e57e:	f7ff ba42 	b.w	41da06 <basic_init+0x872>
  41e582:	f04f 0200 	mov.w	r2, #0
  41e586:	2303      	movs	r3, #3
  41e588:	f363 0202 	bfi	r2, r3, #0, #3
  41e58c:	230b      	movs	r3, #11
  41e58e:	f363 02c7 	bfi	r2, r3, #3, #5
  41e592:	230e      	movs	r3, #14
  41e594:	f363 220c 	bfi	r2, r3, #8, #5
  41e598:	f36f 324f 	bfc	r2, #13, #3
  41e59c:	f7ff ba58 	b.w	41da50 <basic_init+0x8bc>
  41e5a0:	f04f 0400 	mov.w	r4, #0
  41e5a4:	2303      	movs	r3, #3
  41e5a6:	f363 0402 	bfi	r4, r3, #0, #3
  41e5aa:	230b      	movs	r3, #11
  41e5ac:	f363 04c7 	bfi	r4, r3, #3, #5
  41e5b0:	230e      	movs	r3, #14
  41e5b2:	f363 240c 	bfi	r4, r3, #8, #5
  41e5b6:	f36f 344f 	bfc	r4, #13, #3
  41e5ba:	4bc2      	ldr	r3, [pc, #776]	; (41e8c4 <basic_init+0x1730>)
  41e5bc:	899b      	ldrh	r3, [r3, #12]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41e5be:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  41e5c2:	264c      	movs	r6, #76	; 0x4c
  41e5c4:	f3c4 01c4 	ubfx	r1, r4, #3, #5
  41e5c8:	25b3      	movs	r5, #179	; 0xb3
  41e5ca:	fb05 f101 	mul.w	r1, r5, r1
  41e5ce:	fb06 1202 	mla	r2, r6, r2, r1
  41e5d2:	3280      	adds	r2, #128	; 0x80
  41e5d4:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  41e5d8:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  41e5dc:	f3c2 51c4 	ubfx	r1, r2, #23, #5
  41e5e0:	f04f 0200 	mov.w	r2, #0
  41e5e4:	f361 02c7 	bfi	r2, r1, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41e5e8:	f003 0707 	and.w	r7, r3, #7
  41e5ec:	f3c3 3142 	ubfx	r1, r3, #13, #3
  41e5f0:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  41e5f4:	f004 0707 	and.w	r7, r4, #7
  41e5f8:	00ff      	lsls	r7, r7, #3
  41e5fa:	fb05 f707 	mul.w	r7, r5, r7
  41e5fe:	fb06 7101 	mla	r1, r6, r1, r7
  41e602:	3180      	adds	r1, #128	; 0x80
  41e604:	eb01 2701 	add.w	r7, r1, r1, lsl #8
  41e608:	eb01 11c7 	add.w	r1, r1, r7, lsl #7
  41e60c:	f3c1 6782 	ubfx	r7, r1, #26, #3
  41e610:	f367 0202 	bfi	r2, r7, #0, #3
  41e614:	f3c1 51c2 	ubfx	r1, r1, #23, #3
  41e618:	f361 324f 	bfi	r2, r1, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41e61c:	f3c3 2304 	ubfx	r3, r3, #8, #5
  41e620:	f3c4 2404 	ubfx	r4, r4, #8, #5
  41e624:	fb05 f404 	mul.w	r4, r5, r4
  41e628:	fb06 4303 	mla	r3, r6, r3, r4
  41e62c:	3380      	adds	r3, #128	; 0x80
  41e62e:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  41e632:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  41e636:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  41e63a:	f363 220c 	bfi	r2, r3, #8, #5
  41e63e:	f7ff ba5e 	b.w	41dafe <basic_init+0x96a>
    return LV_COLOR_MAKE(r, g, b);
  41e642:	f04f 0200 	mov.w	r2, #0
  41e646:	2303      	movs	r3, #3
  41e648:	f363 0202 	bfi	r2, r3, #0, #3
  41e64c:	230b      	movs	r3, #11
  41e64e:	f363 02c7 	bfi	r2, r3, #3, #5
  41e652:	230e      	movs	r3, #14
  41e654:	f363 220c 	bfi	r2, r3, #8, #5
  41e658:	f36f 324f 	bfc	r2, #13, #3
  41e65c:	f7ff ba7e 	b.w	41db5c <basic_init+0x9c8>
  41e660:	f04f 0200 	mov.w	r2, #0
  41e664:	2304      	movs	r3, #4
  41e666:	f363 0202 	bfi	r2, r3, #0, #3
  41e66a:	2311      	movs	r3, #17
  41e66c:	f363 02c7 	bfi	r2, r3, #3, #5
  41e670:	f363 220c 	bfi	r2, r3, #8, #5
  41e674:	2302      	movs	r3, #2
  41e676:	f363 324f 	bfi	r2, r3, #13, #3
  41e67a:	f7ff ba89 	b.w	41db90 <basic_init+0x9fc>
  41e67e:	f04f 0200 	mov.w	r2, #0
  41e682:	2302      	movs	r3, #2
  41e684:	f363 0202 	bfi	r2, r3, #0, #3
  41e688:	2308      	movs	r3, #8
  41e68a:	f363 02c7 	bfi	r2, r3, #3, #5
  41e68e:	f363 220c 	bfi	r2, r3, #8, #5
  41e692:	f36f 324f 	bfc	r2, #13, #3
  41e696:	f7ff baa0 	b.w	41dbda <basic_init+0xa46>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
  41e69a:	2000      	movs	r0, #0
  41e69c:	4b8a      	ldr	r3, [pc, #552]	; (41e8c8 <basic_init+0x1734>)
  41e69e:	4798      	blx	r3
  41e6a0:	3028      	adds	r0, #40	; 0x28
  41e6a2:	0040      	lsls	r0, r0, #1
  41e6a4:	4b89      	ldr	r3, [pc, #548]	; (41e8cc <basic_init+0x1738>)
  41e6a6:	fb83 2300 	smull	r2, r3, r3, r0
  41e6aa:	17c2      	asrs	r2, r0, #31
  41e6ac:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41e6b0:	b212      	sxth	r2, r2
  41e6b2:	f7ff baa3 	b.w	41dbfc <basic_init+0xa68>
  41e6b6:	f04f 32ff 	mov.w	r2, #4294967295
  41e6ba:	f7ff bac0 	b.w	41dc3e <basic_init+0xaaa>
  41e6be:	f04f 32ff 	mov.w	r2, #4294967295
  41e6c2:	f7ff bad6 	b.w	41dc72 <basic_init+0xade>
  41e6c6:	f04f 0200 	mov.w	r2, #0
  41e6ca:	2304      	movs	r3, #4
  41e6cc:	f363 0202 	bfi	r2, r3, #0, #3
  41e6d0:	2311      	movs	r3, #17
  41e6d2:	f363 02c7 	bfi	r2, r3, #3, #5
  41e6d6:	f363 220c 	bfi	r2, r3, #8, #5
  41e6da:	2302      	movs	r3, #2
  41e6dc:	f363 324f 	bfi	r2, r3, #13, #3
  41e6e0:	f7ff baef 	b.w	41dcc2 <basic_init+0xb2e>
  41e6e4:	f04f 32ff 	mov.w	r2, #4294967295
  41e6e8:	f7ff bb05 	b.w	41dcf6 <basic_init+0xb62>
  41e6ec:	f04f 32ff 	mov.w	r2, #4294967295
  41e6f0:	f7ff bb1b 	b.w	41dd2a <basic_init+0xb96>
  41e6f4:	f04f 0200 	mov.w	r2, #0
  41e6f8:	2304      	movs	r3, #4
  41e6fa:	f363 0202 	bfi	r2, r3, #0, #3
  41e6fe:	2311      	movs	r3, #17
  41e700:	f363 02c7 	bfi	r2, r3, #3, #5
  41e704:	f363 220c 	bfi	r2, r3, #8, #5
  41e708:	2302      	movs	r3, #2
  41e70a:	f363 324f 	bfi	r2, r3, #13, #3
  41e70e:	f7ff bb34 	b.w	41dd7a <basic_init+0xbe6>
  41e712:	f04f 32ff 	mov.w	r2, #4294967295
  41e716:	f7ff bb4a 	b.w	41ddae <basic_init+0xc1a>
  41e71a:	f04f 32ff 	mov.w	r2, #4294967295
  41e71e:	f7ff bb5f 	b.w	41dde0 <basic_init+0xc4c>
  41e722:	f04f 0200 	mov.w	r2, #0
  41e726:	2304      	movs	r3, #4
  41e728:	f363 0202 	bfi	r2, r3, #0, #3
  41e72c:	2311      	movs	r3, #17
  41e72e:	f363 02c7 	bfi	r2, r3, #3, #5
  41e732:	f363 220c 	bfi	r2, r3, #8, #5
  41e736:	2302      	movs	r3, #2
  41e738:	f363 324f 	bfi	r2, r3, #13, #3
  41e73c:	f7ff bb78 	b.w	41de30 <basic_init+0xc9c>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41e740:	2000      	movs	r0, #0
  41e742:	4b61      	ldr	r3, [pc, #388]	; (41e8c8 <basic_init+0x1734>)
  41e744:	4798      	blx	r3
  41e746:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41e74a:	00c0      	lsls	r0, r0, #3
  41e74c:	3050      	adds	r0, #80	; 0x50
  41e74e:	4b5f      	ldr	r3, [pc, #380]	; (41e8cc <basic_init+0x1738>)
  41e750:	fb83 2300 	smull	r2, r3, r3, r0
  41e754:	17c2      	asrs	r2, r0, #31
  41e756:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41e75a:	b212      	sxth	r2, r2
  41e75c:	f7ff bb7b 	b.w	41de56 <basic_init+0xcc2>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41e760:	2000      	movs	r0, #0
  41e762:	4b59      	ldr	r3, [pc, #356]	; (41e8c8 <basic_init+0x1734>)
  41e764:	4798      	blx	r3
  41e766:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41e76a:	00c0      	lsls	r0, r0, #3
  41e76c:	3050      	adds	r0, #80	; 0x50
  41e76e:	4b57      	ldr	r3, [pc, #348]	; (41e8cc <basic_init+0x1738>)
  41e770:	fb83 2300 	smull	r2, r3, r3, r0
  41e774:	17c2      	asrs	r2, r0, #31
  41e776:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41e77a:	b212      	sxth	r2, r2
  41e77c:	f7ff bb8c 	b.w	41de98 <basic_init+0xd04>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41e780:	2000      	movs	r0, #0
  41e782:	4b51      	ldr	r3, [pc, #324]	; (41e8c8 <basic_init+0x1734>)
  41e784:	4798      	blx	r3
  41e786:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41e78a:	3050      	adds	r0, #80	; 0x50
  41e78c:	4b4f      	ldr	r3, [pc, #316]	; (41e8cc <basic_init+0x1738>)
  41e78e:	fb83 2300 	smull	r2, r3, r3, r0
  41e792:	17c2      	asrs	r2, r0, #31
  41e794:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41e798:	b212      	sxth	r2, r2
  41e79a:	f7ff bb8f 	b.w	41debc <basic_init+0xd28>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41e79e:	2000      	movs	r0, #0
  41e7a0:	4b49      	ldr	r3, [pc, #292]	; (41e8c8 <basic_init+0x1734>)
  41e7a2:	4798      	blx	r3
  41e7a4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41e7a8:	3050      	adds	r0, #80	; 0x50
  41e7aa:	4b48      	ldr	r3, [pc, #288]	; (41e8cc <basic_init+0x1738>)
  41e7ac:	fb83 2300 	smull	r2, r3, r3, r0
  41e7b0:	17c2      	asrs	r2, r0, #31
  41e7b2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41e7b6:	b212      	sxth	r2, r2
  41e7b8:	f7ff bb92 	b.w	41dee0 <basic_init+0xd4c>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
  41e7bc:	2000      	movs	r0, #0
  41e7be:	4b42      	ldr	r3, [pc, #264]	; (41e8c8 <basic_init+0x1734>)
  41e7c0:	4798      	blx	r3
  41e7c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41e7c6:	0080      	lsls	r0, r0, #2
  41e7c8:	3050      	adds	r0, #80	; 0x50
  41e7ca:	4b40      	ldr	r3, [pc, #256]	; (41e8cc <basic_init+0x1738>)
  41e7cc:	fb83 2300 	smull	r2, r3, r3, r0
  41e7d0:	17c2      	asrs	r2, r0, #31
  41e7d2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41e7d6:	b212      	sxth	r2, r2
  41e7d8:	f7ff bb95 	b.w	41df06 <basic_init+0xd72>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41e7dc:	2000      	movs	r0, #0
  41e7de:	4b3a      	ldr	r3, [pc, #232]	; (41e8c8 <basic_init+0x1734>)
  41e7e0:	4798      	blx	r3
  41e7e2:	3028      	adds	r0, #40	; 0x28
  41e7e4:	0040      	lsls	r0, r0, #1
  41e7e6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41e7ea:	da02      	bge.n	41e7f2 <basic_init+0x165e>
  41e7ec:	2201      	movs	r2, #1
  41e7ee:	f7ff bb98 	b.w	41df22 <basic_init+0xd8e>
  41e7f2:	2000      	movs	r0, #0
  41e7f4:	4b34      	ldr	r3, [pc, #208]	; (41e8c8 <basic_init+0x1734>)
  41e7f6:	4798      	blx	r3
  41e7f8:	3028      	adds	r0, #40	; 0x28
  41e7fa:	0040      	lsls	r0, r0, #1
  41e7fc:	4b33      	ldr	r3, [pc, #204]	; (41e8cc <basic_init+0x1738>)
  41e7fe:	fb83 2300 	smull	r2, r3, r3, r0
  41e802:	17c2      	asrs	r2, r0, #31
  41e804:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41e808:	b212      	sxth	r2, r2
  41e80a:	f7ff bb8a 	b.w	41df22 <basic_init+0xd8e>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41e80e:	2000      	movs	r0, #0
  41e810:	4b2d      	ldr	r3, [pc, #180]	; (41e8c8 <basic_init+0x1734>)
  41e812:	4798      	blx	r3
  41e814:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41e818:	0080      	lsls	r0, r0, #2
  41e81a:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41e81c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41e820:	da02      	bge.n	41e828 <basic_init+0x1694>
  41e822:	2201      	movs	r2, #1
  41e824:	f7ff bbd2 	b.w	41dfcc <basic_init+0xe38>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41e828:	2000      	movs	r0, #0
  41e82a:	4b27      	ldr	r3, [pc, #156]	; (41e8c8 <basic_init+0x1734>)
  41e82c:	4798      	blx	r3
  41e82e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41e832:	0080      	lsls	r0, r0, #2
  41e834:	3050      	adds	r0, #80	; 0x50
  41e836:	4b25      	ldr	r3, [pc, #148]	; (41e8cc <basic_init+0x1738>)
  41e838:	fb83 2300 	smull	r2, r3, r3, r0
  41e83c:	17c2      	asrs	r2, r0, #31
  41e83e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41e842:	b212      	sxth	r2, r2
  41e844:	f7ff bbc2 	b.w	41dfcc <basic_init+0xe38>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41e848:	2000      	movs	r0, #0
  41e84a:	4b1f      	ldr	r3, [pc, #124]	; (41e8c8 <basic_init+0x1734>)
  41e84c:	4798      	blx	r3
  41e84e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41e852:	00c0      	lsls	r0, r0, #3
  41e854:	3050      	adds	r0, #80	; 0x50
  41e856:	4b1d      	ldr	r3, [pc, #116]	; (41e8cc <basic_init+0x1738>)
  41e858:	fb83 2300 	smull	r2, r3, r3, r0
  41e85c:	17c2      	asrs	r2, r0, #31
  41e85e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41e862:	b212      	sxth	r2, r2
  41e864:	f7ff bbb2 	b.w	41dfcc <basic_init+0xe38>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
  41e868:	2000      	movs	r0, #0
  41e86a:	4b17      	ldr	r3, [pc, #92]	; (41e8c8 <basic_init+0x1734>)
  41e86c:	4798      	blx	r3
  41e86e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41e872:	0040      	lsls	r0, r0, #1
  41e874:	3050      	adds	r0, #80	; 0x50
  41e876:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41e87a:	da02      	bge.n	41e882 <basic_init+0x16ee>
  41e87c:	2401      	movs	r4, #1
  41e87e:	f7ff bbc0 	b.w	41e002 <basic_init+0xe6e>
  41e882:	2000      	movs	r0, #0
  41e884:	4b10      	ldr	r3, [pc, #64]	; (41e8c8 <basic_init+0x1734>)
  41e886:	4798      	blx	r3
  41e888:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41e88c:	0040      	lsls	r0, r0, #1
  41e88e:	3050      	adds	r0, #80	; 0x50
  41e890:	4b0e      	ldr	r3, [pc, #56]	; (41e8cc <basic_init+0x1738>)
  41e892:	fb83 2300 	smull	r2, r3, r3, r0
  41e896:	17c4      	asrs	r4, r0, #31
  41e898:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
  41e89c:	b224      	sxth	r4, r4
  41e89e:	f7ff bbb0 	b.w	41e002 <basic_init+0xe6e>
  41e8a2:	2000      	movs	r0, #0
  41e8a4:	4b08      	ldr	r3, [pc, #32]	; (41e8c8 <basic_init+0x1734>)
  41e8a6:	4798      	blx	r3
  41e8a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41e8ac:	0080      	lsls	r0, r0, #2
  41e8ae:	3050      	adds	r0, #80	; 0x50
  41e8b0:	4b06      	ldr	r3, [pc, #24]	; (41e8cc <basic_init+0x1738>)
  41e8b2:	fb83 2300 	smull	r2, r3, r3, r0
  41e8b6:	17c4      	asrs	r4, r0, #31
  41e8b8:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
  41e8bc:	b224      	sxth	r4, r4
  41e8be:	f7ff bba0 	b.w	41e002 <basic_init+0xe6e>
  41e8c2:	bf00      	nop
  41e8c4:	20414810 	.word	0x20414810
  41e8c8:	00415c7d 	.word	0x00415c7d
  41e8cc:	66666667 	.word	0x66666667

0041e8d0 <lv_theme_material_init>:
{
  41e8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41e8d4:	4680      	mov	r8, r0
  41e8d6:	460f      	mov	r7, r1
  41e8d8:	4615      	mov	r5, r2
  41e8da:	461e      	mov	r6, r3
    if(!inited) {
  41e8dc:	4b27      	ldr	r3, [pc, #156]	; (41e97c <lv_theme_material_init+0xac>)
  41e8de:	781b      	ldrb	r3, [r3, #0]
  41e8e0:	2b00      	cmp	r3, #0
  41e8e2:	d043      	beq.n	41e96c <lv_theme_material_init+0x9c>
    theme.color_primary = color_primary;
  41e8e4:	4c26      	ldr	r4, [pc, #152]	; (41e980 <lv_theme_material_init+0xb0>)
  41e8e6:	f8a4 800c 	strh.w	r8, [r4, #12]
    theme.color_secondary = color_secondary;
  41e8ea:	81e7      	strh	r7, [r4, #14]
    theme.font_small = font_small;
  41e8ec:	6126      	str	r6, [r4, #16]
    theme.font_normal = font_normal;
  41e8ee:	9b06      	ldr	r3, [sp, #24]
  41e8f0:	6163      	str	r3, [r4, #20]
    theme.font_subtitle = font_subtitle;
  41e8f2:	9b07      	ldr	r3, [sp, #28]
  41e8f4:	61a3      	str	r3, [r4, #24]
    theme.font_title = font_title;
  41e8f6:	9b08      	ldr	r3, [sp, #32]
  41e8f8:	61e3      	str	r3, [r4, #28]
    theme.flags = flags;
  41e8fa:	6225      	str	r5, [r4, #32]
    basic_init();
  41e8fc:	4b21      	ldr	r3, [pc, #132]	; (41e984 <lv_theme_material_init+0xb4>)
  41e8fe:	4798      	blx	r3
    bar_init();
  41e900:	4b21      	ldr	r3, [pc, #132]	; (41e988 <lv_theme_material_init+0xb8>)
  41e902:	4798      	blx	r3
    led_init();
  41e904:	4b21      	ldr	r3, [pc, #132]	; (41e98c <lv_theme_material_init+0xbc>)
  41e906:	4798      	blx	r3
    slider_init();
  41e908:	4b21      	ldr	r3, [pc, #132]	; (41e990 <lv_theme_material_init+0xc0>)
  41e90a:	4798      	blx	r3
    switch_init();
  41e90c:	4b21      	ldr	r3, [pc, #132]	; (41e994 <lv_theme_material_init+0xc4>)
  41e90e:	4798      	blx	r3
    linemeter_init();
  41e910:	4b21      	ldr	r3, [pc, #132]	; (41e998 <lv_theme_material_init+0xc8>)
  41e912:	4798      	blx	r3
    gauge_init();
  41e914:	4b21      	ldr	r3, [pc, #132]	; (41e99c <lv_theme_material_init+0xcc>)
  41e916:	4798      	blx	r3
    arc_init();
  41e918:	4b21      	ldr	r3, [pc, #132]	; (41e9a0 <lv_theme_material_init+0xd0>)
  41e91a:	4798      	blx	r3
    chart_init();
  41e91c:	4b21      	ldr	r3, [pc, #132]	; (41e9a4 <lv_theme_material_init+0xd4>)
  41e91e:	4798      	blx	r3
    calendar_init();
  41e920:	4b21      	ldr	r3, [pc, #132]	; (41e9a8 <lv_theme_material_init+0xd8>)
  41e922:	4798      	blx	r3
    cpicker_init();
  41e924:	4b21      	ldr	r3, [pc, #132]	; (41e9ac <lv_theme_material_init+0xdc>)
  41e926:	4798      	blx	r3
    checkbox_init();
  41e928:	4b21      	ldr	r3, [pc, #132]	; (41e9b0 <lv_theme_material_init+0xe0>)
  41e92a:	4798      	blx	r3
    keyboard_init();
  41e92c:	4b21      	ldr	r3, [pc, #132]	; (41e9b4 <lv_theme_material_init+0xe4>)
  41e92e:	4798      	blx	r3
    msgbox_init();
  41e930:	4b21      	ldr	r3, [pc, #132]	; (41e9b8 <lv_theme_material_init+0xe8>)
  41e932:	4798      	blx	r3
    page_init();
  41e934:	4b21      	ldr	r3, [pc, #132]	; (41e9bc <lv_theme_material_init+0xec>)
  41e936:	4798      	blx	r3
    textarea_init();
  41e938:	4b21      	ldr	r3, [pc, #132]	; (41e9c0 <lv_theme_material_init+0xf0>)
  41e93a:	4798      	blx	r3
    spinbox_init();
  41e93c:	4b21      	ldr	r3, [pc, #132]	; (41e9c4 <lv_theme_material_init+0xf4>)
  41e93e:	4798      	blx	r3
    list_init();
  41e940:	4b21      	ldr	r3, [pc, #132]	; (41e9c8 <lv_theme_material_init+0xf8>)
  41e942:	4798      	blx	r3
    ddlist_init();
  41e944:	4b21      	ldr	r3, [pc, #132]	; (41e9cc <lv_theme_material_init+0xfc>)
  41e946:	4798      	blx	r3
    roller_init();
  41e948:	4b21      	ldr	r3, [pc, #132]	; (41e9d0 <lv_theme_material_init+0x100>)
  41e94a:	4798      	blx	r3
    table_init();
  41e94c:	4b21      	ldr	r3, [pc, #132]	; (41e9d4 <lv_theme_material_init+0x104>)
  41e94e:	4798      	blx	r3
    tabview_win_shared_init();
  41e950:	4b21      	ldr	r3, [pc, #132]	; (41e9d8 <lv_theme_material_init+0x108>)
  41e952:	4798      	blx	r3
    theme.apply_xcb = NULL;
  41e954:	2000      	movs	r0, #0
  41e956:	6060      	str	r0, [r4, #4]
    theme.apply_cb = theme_apply;
  41e958:	4b20      	ldr	r3, [pc, #128]	; (41e9dc <lv_theme_material_init+0x10c>)
  41e95a:	6023      	str	r3, [r4, #0]
    inited = true;
  41e95c:	2201      	movs	r2, #1
  41e95e:	4b07      	ldr	r3, [pc, #28]	; (41e97c <lv_theme_material_init+0xac>)
  41e960:	701a      	strb	r2, [r3, #0]
    lv_obj_report_style_mod(NULL);
  41e962:	4b1f      	ldr	r3, [pc, #124]	; (41e9e0 <lv_theme_material_init+0x110>)
  41e964:	4798      	blx	r3
}
  41e966:	4620      	mov	r0, r4
  41e968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
  41e96c:	20c0      	movs	r0, #192	; 0xc0
  41e96e:	4b1d      	ldr	r3, [pc, #116]	; (41e9e4 <lv_theme_material_init+0x114>)
  41e970:	4798      	blx	r3
  41e972:	4b1d      	ldr	r3, [pc, #116]	; (41e9e8 <lv_theme_material_init+0x118>)
  41e974:	6018      	str	r0, [r3, #0]
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
  41e976:	4b1d      	ldr	r3, [pc, #116]	; (41e9ec <lv_theme_material_init+0x11c>)
  41e978:	6018      	str	r0, [r3, #0]
  41e97a:	e7b3      	b.n	41e8e4 <lv_theme_material_init+0x14>
  41e97c:	20414808 	.word	0x20414808
  41e980:	20414810 	.word	0x20414810
  41e984:	0041d195 	.word	0x0041d195
  41e988:	0041991d 	.word	0x0041991d
  41e98c:	0041d081 	.word	0x0041d081
  41e990:	00419b01 	.word	0x00419b01
  41e994:	00419db5 	.word	0x00419db5
  41e998:	00419ef9 	.word	0x00419ef9
  41e99c:	0041a141 	.word	0x0041a141
  41e9a0:	0041a651 	.word	0x0041a651
  41e9a4:	0041a7bd 	.word	0x0041a7bd
  41e9a8:	0041aa45 	.word	0x0041aa45
  41e9ac:	0041b1dd 	.word	0x0041b1dd
  41e9b0:	0041b46d 	.word	0x0041b46d
  41e9b4:	0041b795 	.word	0x0041b795
  41e9b8:	0041b98d 	.word	0x0041b98d
  41e9bc:	0041ba31 	.word	0x0041ba31
  41e9c0:	0041bbbd 	.word	0x0041bbbd
  41e9c4:	0041bd05 	.word	0x0041bd05
  41e9c8:	0041bde1 	.word	0x0041bde1
  41e9cc:	0041c605 	.word	0x0041c605
  41e9d0:	0041c749 	.word	0x0041c749
  41e9d4:	0041c7f5 	.word	0x0041c7f5
  41e9d8:	0041ca8d 	.word	0x0041ca8d
  41e9dc:	004192d5 	.word	0x004192d5
  41e9e0:	00407a89 	.word	0x00407a89
  41e9e4:	004174ed 	.word	0x004174ed
  41e9e8:	2043a314 	.word	0x2043a314
  41e9ec:	2041480c 	.word	0x2041480c

0041e9f0 <lv_btn_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return an element of `lv_design_res_t`
 */
static lv_design_res_t lv_btn_design(lv_obj_t * btn, const lv_area_t * clip_area, lv_design_mode_t mode)
{
  41e9f0:	b508      	push	{r3, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
  41e9f2:	2a02      	cmp	r2, #2
  41e9f4:	d004      	beq.n	41ea00 <lv_btn_design+0x10>
        return ancestor_design(btn, clip_area, mode);
    }
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  41e9f6:	b13a      	cbz	r2, 41ea08 <lv_btn_design+0x18>
        ancestor_design(btn, clip_area, mode);
    }
    else if(mode == LV_DESIGN_DRAW_POST) {
  41e9f8:	2a01      	cmp	r2, #1
  41e9fa:	d00a      	beq.n	41ea12 <lv_btn_design+0x22>
        ancestor_design(btn, clip_area, mode);
    }

    return LV_DESIGN_RES_OK;
  41e9fc:	2000      	movs	r0, #0
}
  41e9fe:	bd08      	pop	{r3, pc}
        return ancestor_design(btn, clip_area, mode);
  41ea00:	4b06      	ldr	r3, [pc, #24]	; (41ea1c <lv_btn_design+0x2c>)
  41ea02:	681b      	ldr	r3, [r3, #0]
  41ea04:	4798      	blx	r3
  41ea06:	bd08      	pop	{r3, pc}
        ancestor_design(btn, clip_area, mode);
  41ea08:	4b04      	ldr	r3, [pc, #16]	; (41ea1c <lv_btn_design+0x2c>)
  41ea0a:	681b      	ldr	r3, [r3, #0]
  41ea0c:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  41ea0e:	2000      	movs	r0, #0
  41ea10:	bd08      	pop	{r3, pc}
        ancestor_design(btn, clip_area, mode);
  41ea12:	4b02      	ldr	r3, [pc, #8]	; (41ea1c <lv_btn_design+0x2c>)
  41ea14:	681b      	ldr	r3, [r3, #0]
  41ea16:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  41ea18:	2000      	movs	r0, #0
  41ea1a:	bd08      	pop	{r3, pc}
  41ea1c:	20414838 	.word	0x20414838

0041ea20 <lv_btn_create>:
{
  41ea20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41ea22:	4607      	mov	r7, r0
  41ea24:	460e      	mov	r6, r1
    btn = lv_cont_create(par, copy);
  41ea26:	4b31      	ldr	r3, [pc, #196]	; (41eaec <lv_btn_create+0xcc>)
  41ea28:	4798      	blx	r3
  41ea2a:	4604      	mov	r4, r0
    LV_ASSERT_MEM(btn);
  41ea2c:	4b30      	ldr	r3, [pc, #192]	; (41eaf0 <lv_btn_create+0xd0>)
  41ea2e:	4798      	blx	r3
  41ea30:	b1a8      	cbz	r0, 41ea5e <lv_btn_create+0x3e>
    if(btn == NULL) return NULL;
  41ea32:	2c00      	cmp	r4, #0
  41ea34:	d045      	beq.n	41eac2 <lv_btn_create+0xa2>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btn);
  41ea36:	4b2f      	ldr	r3, [pc, #188]	; (41eaf4 <lv_btn_create+0xd4>)
  41ea38:	681b      	ldr	r3, [r3, #0]
  41ea3a:	b1b3      	cbz	r3, 41ea6a <lv_btn_create+0x4a>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(btn);
  41ea3c:	4b2e      	ldr	r3, [pc, #184]	; (41eaf8 <lv_btn_create+0xd8>)
  41ea3e:	681b      	ldr	r3, [r3, #0]
  41ea40:	b1cb      	cbz	r3, 41ea76 <lv_btn_create+0x56>
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(btn, sizeof(lv_btn_ext_t));
  41ea42:	2103      	movs	r1, #3
  41ea44:	4620      	mov	r0, r4
  41ea46:	4b2d      	ldr	r3, [pc, #180]	; (41eafc <lv_btn_create+0xdc>)
  41ea48:	4798      	blx	r3
  41ea4a:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
  41ea4c:	4b28      	ldr	r3, [pc, #160]	; (41eaf0 <lv_btn_create+0xd0>)
  41ea4e:	4798      	blx	r3
  41ea50:	b9b8      	cbnz	r0, 41ea82 <lv_btn_create+0x62>
  41ea52:	462a      	mov	r2, r5
  41ea54:	2300      	movs	r3, #0
  41ea56:	482a      	ldr	r0, [pc, #168]	; (41eb00 <lv_btn_create+0xe0>)
  41ea58:	492a      	ldr	r1, [pc, #168]	; (41eb04 <lv_btn_create+0xe4>)
  41ea5a:	4788      	blx	r1
  41ea5c:	e7fe      	b.n	41ea5c <lv_btn_create+0x3c>
    LV_ASSERT_MEM(btn);
  41ea5e:	4622      	mov	r2, r4
  41ea60:	2300      	movs	r3, #0
  41ea62:	4827      	ldr	r0, [pc, #156]	; (41eb00 <lv_btn_create+0xe0>)
  41ea64:	4927      	ldr	r1, [pc, #156]	; (41eb04 <lv_btn_create+0xe4>)
  41ea66:	4788      	blx	r1
  41ea68:	e7fe      	b.n	41ea68 <lv_btn_create+0x48>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btn);
  41ea6a:	4620      	mov	r0, r4
  41ea6c:	4b26      	ldr	r3, [pc, #152]	; (41eb08 <lv_btn_create+0xe8>)
  41ea6e:	4798      	blx	r3
  41ea70:	4b20      	ldr	r3, [pc, #128]	; (41eaf4 <lv_btn_create+0xd4>)
  41ea72:	6018      	str	r0, [r3, #0]
  41ea74:	e7e2      	b.n	41ea3c <lv_btn_create+0x1c>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(btn);
  41ea76:	4620      	mov	r0, r4
  41ea78:	4b24      	ldr	r3, [pc, #144]	; (41eb0c <lv_btn_create+0xec>)
  41ea7a:	4798      	blx	r3
  41ea7c:	4b1e      	ldr	r3, [pc, #120]	; (41eaf8 <lv_btn_create+0xd8>)
  41ea7e:	6018      	str	r0, [r3, #0]
  41ea80:	e7df      	b.n	41ea42 <lv_btn_create+0x22>
    if(ext == NULL) {
  41ea82:	b305      	cbz	r5, 41eac6 <lv_btn_create+0xa6>
    ext->checkable = 0;
  41ea84:	78ab      	ldrb	r3, [r5, #2]
  41ea86:	f36f 0300 	bfc	r3, #0, #1
  41ea8a:	70ab      	strb	r3, [r5, #2]
    lv_obj_set_signal_cb(btn, lv_btn_signal);
  41ea8c:	4920      	ldr	r1, [pc, #128]	; (41eb10 <lv_btn_create+0xf0>)
  41ea8e:	4620      	mov	r0, r4
  41ea90:	4b20      	ldr	r3, [pc, #128]	; (41eb14 <lv_btn_create+0xf4>)
  41ea92:	4798      	blx	r3
    lv_obj_set_design_cb(btn, lv_btn_design);
  41ea94:	4920      	ldr	r1, [pc, #128]	; (41eb18 <lv_btn_create+0xf8>)
  41ea96:	4620      	mov	r0, r4
  41ea98:	4b20      	ldr	r3, [pc, #128]	; (41eb1c <lv_btn_create+0xfc>)
  41ea9a:	4798      	blx	r3
    if(copy == NULL) {
  41ea9c:	b9c6      	cbnz	r6, 41ead0 <lv_btn_create+0xb0>
        if(par) {
  41ea9e:	b147      	cbz	r7, 41eab2 <lv_btn_create+0x92>
            lv_obj_set_size(btn, LV_DPI, LV_DPI / 3);
  41eaa0:	2231      	movs	r2, #49	; 0x31
  41eaa2:	2194      	movs	r1, #148	; 0x94
  41eaa4:	4620      	mov	r0, r4
  41eaa6:	4b1e      	ldr	r3, [pc, #120]	; (41eb20 <lv_btn_create+0x100>)
  41eaa8:	4798      	blx	r3
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
  41eaaa:	2101      	movs	r1, #1
  41eaac:	4620      	mov	r0, r4
  41eaae:	4b1d      	ldr	r3, [pc, #116]	; (41eb24 <lv_btn_create+0x104>)
  41eab0:	4798      	blx	r3
        lv_obj_set_click(btn, true); /*Be sure the button is clickable*/
  41eab2:	2101      	movs	r1, #1
  41eab4:	4620      	mov	r0, r4
  41eab6:	4b1c      	ldr	r3, [pc, #112]	; (41eb28 <lv_btn_create+0x108>)
  41eab8:	4798      	blx	r3
        lv_theme_apply(btn, LV_THEME_BTN);
  41eaba:	2105      	movs	r1, #5
  41eabc:	4620      	mov	r0, r4
  41eabe:	4b1b      	ldr	r3, [pc, #108]	; (41eb2c <lv_btn_create+0x10c>)
  41eac0:	4798      	blx	r3
}
  41eac2:	4620      	mov	r0, r4
  41eac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_del(btn);
  41eac6:	4620      	mov	r0, r4
  41eac8:	4b19      	ldr	r3, [pc, #100]	; (41eb30 <lv_btn_create+0x110>)
  41eaca:	4798      	blx	r3
        return NULL;
  41eacc:	2400      	movs	r4, #0
  41eace:	e7f8      	b.n	41eac2 <lv_btn_create+0xa2>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  41ead0:	4630      	mov	r0, r6
  41ead2:	4b18      	ldr	r3, [pc, #96]	; (41eb34 <lv_btn_create+0x114>)
  41ead4:	4798      	blx	r3
        ext->checkable             = copy_ext->checkable;
  41ead6:	7882      	ldrb	r2, [r0, #2]
  41ead8:	78ab      	ldrb	r3, [r5, #2]
  41eada:	f362 0300 	bfi	r3, r2, #0, #1
  41eade:	70ab      	strb	r3, [r5, #2]
        lv_obj_refresh_style(btn, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  41eae0:	22ff      	movs	r2, #255	; 0xff
  41eae2:	4611      	mov	r1, r2
  41eae4:	4620      	mov	r0, r4
  41eae6:	4b14      	ldr	r3, [pc, #80]	; (41eb38 <lv_btn_create+0x118>)
  41eae8:	4798      	blx	r3
  41eaea:	e7ea      	b.n	41eac2 <lv_btn_create+0xa2>
  41eaec:	00420f19 	.word	0x00420f19
  41eaf0:	00416da9 	.word	0x00416da9
  41eaf4:	2041483c 	.word	0x2041483c
  41eaf8:	20414838 	.word	0x20414838
  41eafc:	004058e9 	.word	0x004058e9
  41eb00:	0042e54c 	.word	0x0042e54c
  41eb04:	00416db5 	.word	0x00416db5
  41eb08:	00407fad 	.word	0x00407fad
  41eb0c:	00407fd5 	.word	0x00407fd5
  41eb10:	0041ecfd 	.word	0x0041ecfd
  41eb14:	00405885 	.word	0x00405885
  41eb18:	0041e9f1 	.word	0x0041e9f1
  41eb1c:	004058c1 	.word	0x004058c1
  41eb20:	00406be1 	.word	0x00406be1
  41eb24:	00421049 	.word	0x00421049
  41eb28:	004056c5 	.word	0x004056c5
  41eb2c:	004192a5 	.word	0x004192a5
  41eb30:	0040815d 	.word	0x0040815d
  41eb34:	00407ffd 	.word	0x00407ffd
  41eb38:	00407809 	.word	0x00407809

0041eb3c <lv_btn_set_checkable>:
{
  41eb3c:	b538      	push	{r3, r4, r5, lr}
  41eb3e:	4604      	mov	r4, r0
  41eb40:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41eb42:	4b08      	ldr	r3, [pc, #32]	; (41eb64 <lv_btn_set_checkable+0x28>)
  41eb44:	4798      	blx	r3
  41eb46:	b928      	cbnz	r0, 41eb54 <lv_btn_set_checkable+0x18>
  41eb48:	4622      	mov	r2, r4
  41eb4a:	2300      	movs	r3, #0
  41eb4c:	4806      	ldr	r0, [pc, #24]	; (41eb68 <lv_btn_set_checkable+0x2c>)
  41eb4e:	4907      	ldr	r1, [pc, #28]	; (41eb6c <lv_btn_set_checkable+0x30>)
  41eb50:	4788      	blx	r1
  41eb52:	e7fe      	b.n	41eb52 <lv_btn_set_checkable+0x16>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
  41eb54:	4620      	mov	r0, r4
  41eb56:	4b06      	ldr	r3, [pc, #24]	; (41eb70 <lv_btn_set_checkable+0x34>)
  41eb58:	4798      	blx	r3
    ext->checkable = tgl != false ? 1 : 0;
  41eb5a:	7883      	ldrb	r3, [r0, #2]
  41eb5c:	f365 0300 	bfi	r3, r5, #0, #1
  41eb60:	7083      	strb	r3, [r0, #2]
  41eb62:	bd38      	pop	{r3, r4, r5, pc}
  41eb64:	00416da9 	.word	0x00416da9
  41eb68:	0042e560 	.word	0x0042e560
  41eb6c:	00416db5 	.word	0x00416db5
  41eb70:	00407ffd 	.word	0x00407ffd

0041eb74 <lv_btn_set_state>:
{
  41eb74:	b538      	push	{r3, r4, r5, lr}
  41eb76:	4604      	mov	r4, r0
  41eb78:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41eb7a:	4b21      	ldr	r3, [pc, #132]	; (41ec00 <lv_btn_set_state+0x8c>)
  41eb7c:	4798      	blx	r3
  41eb7e:	b130      	cbz	r0, 41eb8e <lv_btn_set_state+0x1a>
    switch(state) {
  41eb80:	2d05      	cmp	r5, #5
  41eb82:	d83b      	bhi.n	41ebfc <lv_btn_set_state+0x88>
  41eb84:	e8df f005 	tbb	[pc, r5]
  41eb88:	17290e09 	.word	0x17290e09
  41eb8c:	3220      	.short	0x3220
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41eb8e:	4622      	mov	r2, r4
  41eb90:	2300      	movs	r3, #0
  41eb92:	481c      	ldr	r0, [pc, #112]	; (41ec04 <lv_btn_set_state+0x90>)
  41eb94:	491c      	ldr	r1, [pc, #112]	; (41ec08 <lv_btn_set_state+0x94>)
  41eb96:	4788      	blx	r1
  41eb98:	e7fe      	b.n	41eb98 <lv_btn_set_state+0x24>
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED | LV_STATE_DISABLED);
  41eb9a:	2131      	movs	r1, #49	; 0x31
  41eb9c:	4620      	mov	r0, r4
  41eb9e:	4b1b      	ldr	r3, [pc, #108]	; (41ec0c <lv_btn_set_state+0x98>)
  41eba0:	4798      	blx	r3
            break;
  41eba2:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_clear_state(btn, LV_STATE_CHECKED | LV_STATE_DISABLED);
  41eba4:	2121      	movs	r1, #33	; 0x21
  41eba6:	4620      	mov	r0, r4
  41eba8:	4b18      	ldr	r3, [pc, #96]	; (41ec0c <lv_btn_set_state+0x98>)
  41ebaa:	4798      	blx	r3
            lv_obj_add_state(btn, LV_STATE_PRESSED);
  41ebac:	2110      	movs	r1, #16
  41ebae:	4620      	mov	r0, r4
  41ebb0:	4b17      	ldr	r3, [pc, #92]	; (41ec10 <lv_btn_set_state+0x9c>)
  41ebb2:	4798      	blx	r3
            break;
  41ebb4:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_add_state(btn, LV_STATE_CHECKED);
  41ebb6:	2101      	movs	r1, #1
  41ebb8:	4620      	mov	r0, r4
  41ebba:	4b15      	ldr	r3, [pc, #84]	; (41ec10 <lv_btn_set_state+0x9c>)
  41ebbc:	4798      	blx	r3
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_DISABLED);
  41ebbe:	2130      	movs	r1, #48	; 0x30
  41ebc0:	4620      	mov	r0, r4
  41ebc2:	4b12      	ldr	r3, [pc, #72]	; (41ec0c <lv_btn_set_state+0x98>)
  41ebc4:	4798      	blx	r3
            break;
  41ebc6:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_add_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED);
  41ebc8:	2111      	movs	r1, #17
  41ebca:	4620      	mov	r0, r4
  41ebcc:	4b10      	ldr	r3, [pc, #64]	; (41ec10 <lv_btn_set_state+0x9c>)
  41ebce:	4798      	blx	r3
            lv_obj_clear_state(btn, LV_STATE_DISABLED);
  41ebd0:	2120      	movs	r1, #32
  41ebd2:	4620      	mov	r0, r4
  41ebd4:	4b0d      	ldr	r3, [pc, #52]	; (41ec0c <lv_btn_set_state+0x98>)
  41ebd6:	4798      	blx	r3
            break;
  41ebd8:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED);
  41ebda:	2111      	movs	r1, #17
  41ebdc:	4620      	mov	r0, r4
  41ebde:	4b0b      	ldr	r3, [pc, #44]	; (41ec0c <lv_btn_set_state+0x98>)
  41ebe0:	4798      	blx	r3
            lv_obj_add_state(btn, LV_STATE_DISABLED);
  41ebe2:	2120      	movs	r1, #32
  41ebe4:	4620      	mov	r0, r4
  41ebe6:	4b0a      	ldr	r3, [pc, #40]	; (41ec10 <lv_btn_set_state+0x9c>)
  41ebe8:	4798      	blx	r3
            break;
  41ebea:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_clear_state(btn, LV_STATE_PRESSED);
  41ebec:	2110      	movs	r1, #16
  41ebee:	4620      	mov	r0, r4
  41ebf0:	4b06      	ldr	r3, [pc, #24]	; (41ec0c <lv_btn_set_state+0x98>)
  41ebf2:	4798      	blx	r3
            lv_obj_add_state(btn, LV_STATE_DISABLED | LV_STATE_CHECKED);
  41ebf4:	2121      	movs	r1, #33	; 0x21
  41ebf6:	4620      	mov	r0, r4
  41ebf8:	4b05      	ldr	r3, [pc, #20]	; (41ec10 <lv_btn_set_state+0x9c>)
  41ebfa:	4798      	blx	r3
  41ebfc:	bd38      	pop	{r3, r4, r5, pc}
  41ebfe:	bf00      	nop
  41ec00:	00416da9 	.word	0x00416da9
  41ec04:	0042e560 	.word	0x0042e560
  41ec08:	00416db5 	.word	0x00416db5
  41ec0c:	00408f55 	.word	0x00408f55
  41ec10:	00408f19 	.word	0x00408f19

0041ec14 <lv_btn_toggle>:
{
  41ec14:	b510      	push	{r4, lr}
  41ec16:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41ec18:	4b0c      	ldr	r3, [pc, #48]	; (41ec4c <lv_btn_toggle+0x38>)
  41ec1a:	4798      	blx	r3
  41ec1c:	b928      	cbnz	r0, 41ec2a <lv_btn_toggle+0x16>
  41ec1e:	4622      	mov	r2, r4
  41ec20:	2300      	movs	r3, #0
  41ec22:	480b      	ldr	r0, [pc, #44]	; (41ec50 <lv_btn_toggle+0x3c>)
  41ec24:	490b      	ldr	r1, [pc, #44]	; (41ec54 <lv_btn_toggle+0x40>)
  41ec26:	4788      	blx	r1
  41ec28:	e7fe      	b.n	41ec28 <lv_btn_toggle+0x14>
    if(lv_obj_get_state(btn, LV_BTN_PART_MAIN) & LV_STATE_CHECKED) {
  41ec2a:	2100      	movs	r1, #0
  41ec2c:	4620      	mov	r0, r4
  41ec2e:	4b0a      	ldr	r3, [pc, #40]	; (41ec58 <lv_btn_toggle+0x44>)
  41ec30:	4798      	blx	r3
  41ec32:	f010 0f01 	tst.w	r0, #1
  41ec36:	d104      	bne.n	41ec42 <lv_btn_toggle+0x2e>
        lv_obj_add_state(btn, LV_STATE_CHECKED);
  41ec38:	2101      	movs	r1, #1
  41ec3a:	4620      	mov	r0, r4
  41ec3c:	4b07      	ldr	r3, [pc, #28]	; (41ec5c <lv_btn_toggle+0x48>)
  41ec3e:	4798      	blx	r3
  41ec40:	bd10      	pop	{r4, pc}
        lv_obj_clear_state(btn, LV_STATE_CHECKED);
  41ec42:	2101      	movs	r1, #1
  41ec44:	4620      	mov	r0, r4
  41ec46:	4b06      	ldr	r3, [pc, #24]	; (41ec60 <lv_btn_toggle+0x4c>)
  41ec48:	4798      	blx	r3
  41ec4a:	bd10      	pop	{r4, pc}
  41ec4c:	00416da9 	.word	0x00416da9
  41ec50:	0042e560 	.word	0x0042e560
  41ec54:	00416db5 	.word	0x00416db5
  41ec58:	00406d89 	.word	0x00406d89
  41ec5c:	00408f19 	.word	0x00408f19
  41ec60:	00408f55 	.word	0x00408f55

0041ec64 <lv_btn_get_state>:
{
  41ec64:	b510      	push	{r4, lr}
  41ec66:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41ec68:	4b13      	ldr	r3, [pc, #76]	; (41ecb8 <lv_btn_get_state+0x54>)
  41ec6a:	4798      	blx	r3
  41ec6c:	b928      	cbnz	r0, 41ec7a <lv_btn_get_state+0x16>
  41ec6e:	4622      	mov	r2, r4
  41ec70:	2300      	movs	r3, #0
  41ec72:	4812      	ldr	r0, [pc, #72]	; (41ecbc <lv_btn_get_state+0x58>)
  41ec74:	4912      	ldr	r1, [pc, #72]	; (41ecc0 <lv_btn_get_state+0x5c>)
  41ec76:	4788      	blx	r1
  41ec78:	e7fe      	b.n	41ec78 <lv_btn_get_state+0x14>
    lv_state_t obj_state = lv_obj_get_state(btn, LV_BTN_PART_MAIN);
  41ec7a:	2100      	movs	r1, #0
  41ec7c:	4620      	mov	r0, r4
  41ec7e:	4b11      	ldr	r3, [pc, #68]	; (41ecc4 <lv_btn_get_state+0x60>)
  41ec80:	4798      	blx	r3
    if(obj_state & LV_STATE_DISABLED) {
  41ec82:	f010 0f20 	tst.w	r0, #32
  41ec86:	d004      	beq.n	41ec92 <lv_btn_get_state+0x2e>
        if(obj_state & LV_STATE_CHECKED) return LV_BTN_STATE_CHECKED_DISABLED;
  41ec88:	f010 0f01 	tst.w	r0, #1
  41ec8c:	d00e      	beq.n	41ecac <lv_btn_get_state+0x48>
  41ec8e:	2005      	movs	r0, #5
  41ec90:	bd10      	pop	{r4, pc}
    if(obj_state & LV_STATE_CHECKED) {
  41ec92:	f010 0f01 	tst.w	r0, #1
  41ec96:	d004      	beq.n	41eca2 <lv_btn_get_state+0x3e>
        if(obj_state & LV_STATE_PRESSED) return LV_BTN_STATE_CHECKED_PRESSED;
  41ec98:	f010 0f10 	tst.w	r0, #16
  41ec9c:	d008      	beq.n	41ecb0 <lv_btn_get_state+0x4c>
  41ec9e:	2004      	movs	r0, #4
  41eca0:	bd10      	pop	{r4, pc}
        if(obj_state & LV_STATE_PRESSED) return LV_BTN_STATE_PRESSED;
  41eca2:	f010 0f10 	tst.w	r0, #16
  41eca6:	d005      	beq.n	41ecb4 <lv_btn_get_state+0x50>
  41eca8:	2001      	movs	r0, #1
  41ecaa:	bd10      	pop	{r4, pc}
        else return LV_BTN_STATE_DISABLED;
  41ecac:	2002      	movs	r0, #2
  41ecae:	bd10      	pop	{r4, pc}
        else return LV_BTN_STATE_CHECKED_RELEASED;
  41ecb0:	2003      	movs	r0, #3
  41ecb2:	bd10      	pop	{r4, pc}
        else return LV_BTN_STATE_RELEASED;
  41ecb4:	2000      	movs	r0, #0
}
  41ecb6:	bd10      	pop	{r4, pc}
  41ecb8:	00416da9 	.word	0x00416da9
  41ecbc:	0042e560 	.word	0x0042e560
  41ecc0:	00416db5 	.word	0x00416db5
  41ecc4:	00406d89 	.word	0x00406d89

0041ecc8 <lv_btn_get_checkable>:
{
  41ecc8:	b510      	push	{r4, lr}
  41ecca:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41eccc:	4b07      	ldr	r3, [pc, #28]	; (41ecec <lv_btn_get_checkable+0x24>)
  41ecce:	4798      	blx	r3
  41ecd0:	b928      	cbnz	r0, 41ecde <lv_btn_get_checkable+0x16>
  41ecd2:	4622      	mov	r2, r4
  41ecd4:	2300      	movs	r3, #0
  41ecd6:	4806      	ldr	r0, [pc, #24]	; (41ecf0 <lv_btn_get_checkable+0x28>)
  41ecd8:	4906      	ldr	r1, [pc, #24]	; (41ecf4 <lv_btn_get_checkable+0x2c>)
  41ecda:	4788      	blx	r1
  41ecdc:	e7fe      	b.n	41ecdc <lv_btn_get_checkable+0x14>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
  41ecde:	4620      	mov	r0, r4
  41ece0:	4b05      	ldr	r3, [pc, #20]	; (41ecf8 <lv_btn_get_checkable+0x30>)
  41ece2:	4798      	blx	r3
    return ext->checkable != 0 ? true : false;
  41ece4:	7880      	ldrb	r0, [r0, #2]
}
  41ece6:	f000 0001 	and.w	r0, r0, #1
  41ecea:	bd10      	pop	{r4, pc}
  41ecec:	00416da9 	.word	0x00416da9
  41ecf0:	0042e560 	.word	0x0042e560
  41ecf4:	00416db5 	.word	0x00416db5
  41ecf8:	00407ffd 	.word	0x00407ffd

0041ecfc <lv_btn_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
  41ecfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41ed00:	b082      	sub	sp, #8
  41ed02:	4606      	mov	r6, r0
  41ed04:	460d      	mov	r5, r1
  41ed06:	4617      	mov	r7, r2
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
  41ed08:	4b36      	ldr	r3, [pc, #216]	; (41ede4 <lv_btn_signal+0xe8>)
  41ed0a:	681b      	ldr	r3, [r3, #0]
  41ed0c:	4798      	blx	r3
  41ed0e:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
  41ed10:	2801      	cmp	r0, #1
  41ed12:	d003      	beq.n	41ed1c <lv_btn_signal+0x20>
        }
#endif
    }

    return res;
}
  41ed14:	4620      	mov	r0, r4
  41ed16:	b002      	add	sp, #8
  41ed18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41ed1c:	2d07      	cmp	r5, #7
  41ed1e:	d023      	beq.n	41ed68 <lv_btn_signal+0x6c>
    bool tgl           = lv_btn_get_checkable(btn);
  41ed20:	4630      	mov	r0, r6
  41ed22:	4b31      	ldr	r3, [pc, #196]	; (41ede8 <lv_btn_signal+0xec>)
  41ed24:	4798      	blx	r3
  41ed26:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_RELEASED) {
  41ed28:	2d0e      	cmp	r5, #14
  41ed2a:	d023      	beq.n	41ed74 <lv_btn_signal+0x78>
    else if(sign == LV_SIGNAL_CONTROL) {
  41ed2c:	2d18      	cmp	r5, #24
  41ed2e:	d1f1      	bne.n	41ed14 <lv_btn_signal+0x18>
        char c = *((char *)param);
  41ed30:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
  41ed32:	2b11      	cmp	r3, #17
  41ed34:	bf18      	it	ne
  41ed36:	2b13      	cmpne	r3, #19
  41ed38:	d040      	beq.n	41edbc <lv_btn_signal+0xc0>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
  41ed3a:	2b12      	cmp	r3, #18
  41ed3c:	bf18      	it	ne
  41ed3e:	2b14      	cmpne	r3, #20
  41ed40:	d1e8      	bne.n	41ed14 <lv_btn_signal+0x18>
            if(lv_btn_get_checkable(btn)) {
  41ed42:	4630      	mov	r0, r6
  41ed44:	4b28      	ldr	r3, [pc, #160]	; (41ede8 <lv_btn_signal+0xec>)
  41ed46:	4798      	blx	r3
  41ed48:	2800      	cmp	r0, #0
  41ed4a:	d0e3      	beq.n	41ed14 <lv_btn_signal+0x18>
                lv_btn_set_state(btn, LV_BTN_STATE_RELEASED);
  41ed4c:	2100      	movs	r1, #0
  41ed4e:	4630      	mov	r0, r6
  41ed50:	4b26      	ldr	r3, [pc, #152]	; (41edec <lv_btn_signal+0xf0>)
  41ed52:	4798      	blx	r3
                uint32_t state = 0;
  41ed54:	aa02      	add	r2, sp, #8
  41ed56:	2300      	movs	r3, #0
  41ed58:	f842 3d04 	str.w	r3, [r2, #-4]!
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
  41ed5c:	2110      	movs	r1, #16
  41ed5e:	4630      	mov	r0, r6
  41ed60:	4b23      	ldr	r3, [pc, #140]	; (41edf0 <lv_btn_signal+0xf4>)
  41ed62:	4798      	blx	r3
  41ed64:	4604      	mov	r4, r0
  41ed66:	e7d5      	b.n	41ed14 <lv_btn_signal+0x18>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41ed68:	4922      	ldr	r1, [pc, #136]	; (41edf4 <lv_btn_signal+0xf8>)
  41ed6a:	4638      	mov	r0, r7
  41ed6c:	4b22      	ldr	r3, [pc, #136]	; (41edf8 <lv_btn_signal+0xfc>)
  41ed6e:	4798      	blx	r3
  41ed70:	4604      	mov	r4, r0
  41ed72:	e7cf      	b.n	41ed14 <lv_btn_signal+0x18>
        if(lv_indev_is_dragging(param) == false && tgl) {
  41ed74:	4638      	mov	r0, r7
  41ed76:	4b21      	ldr	r3, [pc, #132]	; (41edfc <lv_btn_signal+0x100>)
  41ed78:	4798      	blx	r3
  41ed7a:	2800      	cmp	r0, #0
  41ed7c:	d1ca      	bne.n	41ed14 <lv_btn_signal+0x18>
  41ed7e:	f1b8 0f00 	cmp.w	r8, #0
  41ed82:	d0c7      	beq.n	41ed14 <lv_btn_signal+0x18>
            uint32_t toggled = 0;
  41ed84:	2100      	movs	r1, #0
  41ed86:	9101      	str	r1, [sp, #4]
            if(lv_obj_get_state(btn, LV_BTN_PART_MAIN) & LV_STATE_CHECKED) {
  41ed88:	4630      	mov	r0, r6
  41ed8a:	4b1d      	ldr	r3, [pc, #116]	; (41ee00 <lv_btn_signal+0x104>)
  41ed8c:	4798      	blx	r3
  41ed8e:	f010 0f01 	tst.w	r0, #1
  41ed92:	d00c      	beq.n	41edae <lv_btn_signal+0xb2>
                lv_btn_set_state(btn, LV_BTN_STATE_RELEASED);
  41ed94:	2100      	movs	r1, #0
  41ed96:	4630      	mov	r0, r6
  41ed98:	4b14      	ldr	r3, [pc, #80]	; (41edec <lv_btn_signal+0xf0>)
  41ed9a:	4798      	blx	r3
                toggled = 0;
  41ed9c:	2300      	movs	r3, #0
  41ed9e:	9301      	str	r3, [sp, #4]
            res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
  41eda0:	aa01      	add	r2, sp, #4
  41eda2:	2110      	movs	r1, #16
  41eda4:	4630      	mov	r0, r6
  41eda6:	4b12      	ldr	r3, [pc, #72]	; (41edf0 <lv_btn_signal+0xf4>)
  41eda8:	4798      	blx	r3
  41edaa:	4604      	mov	r4, r0
  41edac:	e7b2      	b.n	41ed14 <lv_btn_signal+0x18>
                lv_btn_set_state(btn, LV_BTN_STATE_CHECKED_RELEASED);
  41edae:	2103      	movs	r1, #3
  41edb0:	4630      	mov	r0, r6
  41edb2:	4b0e      	ldr	r3, [pc, #56]	; (41edec <lv_btn_signal+0xf0>)
  41edb4:	4798      	blx	r3
                toggled = 1;
  41edb6:	2301      	movs	r3, #1
  41edb8:	9301      	str	r3, [sp, #4]
  41edba:	e7f1      	b.n	41eda0 <lv_btn_signal+0xa4>
            if(lv_btn_get_checkable(btn)) {
  41edbc:	4630      	mov	r0, r6
  41edbe:	4b0a      	ldr	r3, [pc, #40]	; (41ede8 <lv_btn_signal+0xec>)
  41edc0:	4798      	blx	r3
  41edc2:	2800      	cmp	r0, #0
  41edc4:	d0a6      	beq.n	41ed14 <lv_btn_signal+0x18>
                lv_btn_set_state(btn, LV_BTN_STATE_CHECKED_RELEASED);
  41edc6:	2103      	movs	r1, #3
  41edc8:	4630      	mov	r0, r6
  41edca:	4b08      	ldr	r3, [pc, #32]	; (41edec <lv_btn_signal+0xf0>)
  41edcc:	4798      	blx	r3
                uint32_t state = 1;
  41edce:	aa02      	add	r2, sp, #8
  41edd0:	2301      	movs	r3, #1
  41edd2:	f842 3d04 	str.w	r3, [r2, #-4]!
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
  41edd6:	2110      	movs	r1, #16
  41edd8:	4630      	mov	r0, r6
  41edda:	4b05      	ldr	r3, [pc, #20]	; (41edf0 <lv_btn_signal+0xf4>)
  41eddc:	4798      	blx	r3
  41edde:	4604      	mov	r4, r0
  41ede0:	e798      	b.n	41ed14 <lv_btn_signal+0x18>
  41ede2:	bf00      	nop
  41ede4:	2041483c 	.word	0x2041483c
  41ede8:	0041ecc9 	.word	0x0041ecc9
  41edec:	0041eb75 	.word	0x0041eb75
  41edf0:	00405845 	.word	0x00405845
  41edf4:	00431ca4 	.word	0x00431ca4
  41edf8:	00408289 	.word	0x00408289
  41edfc:	00404ce9 	.word	0x00404ce9
  41ee00:	00406d89 	.word	0x00406d89

0041ee04 <create_axis_label_iter>:
 * @param list pointer to newline-separated labels list
 * @param iterator_dir LV_CHART_ITERATOR_FORWARD or LV_CHART_LABEL_ITERATOR_REVERSE
 * @return lv_chart_label_iterator_t
 */
static lv_chart_label_iterator_t create_axis_label_iter(const char * list, uint8_t iterator_dir)
{
  41ee04:	b430      	push	{r4, r5}
    lv_chart_label_iterator_t iterator = {0};
  41ee06:	2300      	movs	r3, #0
  41ee08:	6043      	str	r3, [r0, #4]
  41ee0a:	6083      	str	r3, [r0, #8]
    uint8_t j;

    iterator.list_start = list;
  41ee0c:	6001      	str	r1, [r0, #0]

    /* count number of list items */
    for(j = 0; list[j] != '\0'; j++) {
  41ee0e:	e001      	b.n	41ee14 <create_axis_label_iter+0x10>
  41ee10:	3301      	adds	r3, #1
  41ee12:	b2db      	uxtb	r3, r3
  41ee14:	461d      	mov	r5, r3
  41ee16:	5ccc      	ldrb	r4, [r1, r3]
  41ee18:	b12c      	cbz	r4, 41ee26 <create_axis_label_iter+0x22>
        if(list[j] == '\n')
  41ee1a:	2c0a      	cmp	r4, #10
  41ee1c:	d1f8      	bne.n	41ee10 <create_axis_label_iter+0xc>
            iterator.items_left++;
  41ee1e:	7a04      	ldrb	r4, [r0, #8]
  41ee20:	3401      	adds	r4, #1
  41ee22:	7204      	strb	r4, [r0, #8]
  41ee24:	e7f4      	b.n	41ee10 <create_axis_label_iter+0xc>
    }

    if(iterator_dir == LV_CHART_LABEL_ITERATOR_FORWARD) {
  41ee26:	2a01      	cmp	r2, #1
  41ee28:	d009      	beq.n	41ee3e <create_axis_label_iter+0x3a>
        iterator.is_reverse_iter = 0;
        iterator.current_pos = list;
    }
    else {
        iterator.is_reverse_iter = 1;
  41ee2a:	2301      	movs	r3, #1
  41ee2c:	7243      	strb	r3, [r0, #9]
        // -1 to skip '\0' at the end of the string
        iterator.current_pos = list + j - 1;
  41ee2e:	3d01      	subs	r5, #1
  41ee30:	4429      	add	r1, r5
  41ee32:	6041      	str	r1, [r0, #4]
    }
    iterator.items_left++;
  41ee34:	7a03      	ldrb	r3, [r0, #8]
  41ee36:	3301      	adds	r3, #1
  41ee38:	7203      	strb	r3, [r0, #8]
    return iterator;
}
  41ee3a:	bc30      	pop	{r4, r5}
  41ee3c:	4770      	bx	lr
        iterator.current_pos = list;
  41ee3e:	6041      	str	r1, [r0, #4]
  41ee40:	e7f8      	b.n	41ee34 <create_axis_label_iter+0x30>
	...

0041ee44 <lv_chart_get_style>:
{
  41ee44:	b538      	push	{r3, r4, r5, lr}
  41ee46:	4604      	mov	r4, r0
  41ee48:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  41ee4a:	4b0e      	ldr	r3, [pc, #56]	; (41ee84 <lv_chart_get_style+0x40>)
  41ee4c:	4798      	blx	r3
  41ee4e:	b928      	cbnz	r0, 41ee5c <lv_chart_get_style+0x18>
  41ee50:	4622      	mov	r2, r4
  41ee52:	2300      	movs	r3, #0
  41ee54:	480c      	ldr	r0, [pc, #48]	; (41ee88 <lv_chart_get_style+0x44>)
  41ee56:	490d      	ldr	r1, [pc, #52]	; (41ee8c <lv_chart_get_style+0x48>)
  41ee58:	4788      	blx	r1
  41ee5a:	e7fe      	b.n	41ee5a <lv_chart_get_style+0x16>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  41ee5c:	4620      	mov	r0, r4
  41ee5e:	4b0c      	ldr	r3, [pc, #48]	; (41ee90 <lv_chart_get_style+0x4c>)
  41ee60:	4798      	blx	r3
    switch(part) {
  41ee62:	2d03      	cmp	r5, #3
  41ee64:	d80c      	bhi.n	41ee80 <lv_chart_get_style+0x3c>
  41ee66:	e8df f005 	tbb	[pc, r5]
  41ee6a:	0502      	.short	0x0502
  41ee6c:	0907      	.short	0x0907
            style_dsc_p = &chart->style_list;
  41ee6e:	f104 0028 	add.w	r0, r4, #40	; 0x28
            break;
  41ee72:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = &ext->style_series_bg;
  41ee74:	3024      	adds	r0, #36	; 0x24
            break;
  41ee76:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = &ext->style_series;
  41ee78:	302c      	adds	r0, #44	; 0x2c
            break;
  41ee7a:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = &ext->style_cursors;
  41ee7c:	3034      	adds	r0, #52	; 0x34
            break;
  41ee7e:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = NULL;
  41ee80:	2000      	movs	r0, #0
}
  41ee82:	bd38      	pop	{r3, r4, r5, pc}
  41ee84:	00416da9 	.word	0x00416da9
  41ee88:	0042e560 	.word	0x0042e560
  41ee8c:	00416db5 	.word	0x00416db5
  41ee90:	00407ffd 	.word	0x00407ffd

0041ee94 <draw_series_bg>:
{
  41ee94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41ee98:	b09f      	sub	sp, #124	; 0x7c
  41ee9a:	4604      	mov	r4, r0
  41ee9c:	460e      	mov	r6, r1
  41ee9e:	4615      	mov	r5, r2
  41eea0:	9200      	str	r2, [sp, #0]
    lv_draw_rect_dsc_init(&bg_dsc);
  41eea2:	a809      	add	r0, sp, #36	; 0x24
  41eea4:	4b4d      	ldr	r3, [pc, #308]	; (41efdc <draw_series_bg+0x148>)
  41eea6:	4798      	blx	r3
    lv_obj_init_draw_rect_dsc(chart, LV_CHART_PART_SERIES_BG, &bg_dsc);
  41eea8:	aa09      	add	r2, sp, #36	; 0x24
  41eeaa:	2101      	movs	r1, #1
  41eeac:	4620      	mov	r0, r4
  41eeae:	4b4c      	ldr	r3, [pc, #304]	; (41efe0 <draw_series_bg+0x14c>)
  41eeb0:	4798      	blx	r3
    lv_draw_rect(series_area, clip_area, &bg_dsc);
  41eeb2:	aa09      	add	r2, sp, #36	; 0x24
  41eeb4:	4629      	mov	r1, r5
  41eeb6:	4630      	mov	r0, r6
  41eeb8:	4b4a      	ldr	r3, [pc, #296]	; (41efe4 <draw_series_bg+0x150>)
  41eeba:	4798      	blx	r3
    lv_chart_ext_t * ext     = lv_obj_get_ext_attr(chart);
  41eebc:	4620      	mov	r0, r4
  41eebe:	4b4a      	ldr	r3, [pc, #296]	; (41efe8 <draw_series_bg+0x154>)
  41eec0:	4798      	blx	r3
  41eec2:	4605      	mov	r5, r0
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41eec4:	88b3      	ldrh	r3, [r6, #4]
  41eec6:	f9b6 7000 	ldrsh.w	r7, [r6]
  41eeca:	fa1f f887 	uxth.w	r8, r7
  41eece:	eba3 0308 	sub.w	r3, r3, r8
  41eed2:	b29b      	uxth	r3, r3
  41eed4:	3301      	adds	r3, #1
  41eed6:	b29b      	uxth	r3, r3
  41eed8:	9303      	str	r3, [sp, #12]
  41eeda:	fa0f fa83 	sxth.w	sl, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41eede:	88f3      	ldrh	r3, [r6, #6]
  41eee0:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
  41eee4:	9201      	str	r2, [sp, #4]
  41eee6:	b296      	uxth	r6, r2
  41eee8:	1b9b      	subs	r3, r3, r6
  41eeea:	b29b      	uxth	r3, r3
  41eeec:	3301      	adds	r3, #1
  41eeee:	b29b      	uxth	r3, r3
  41eef0:	9302      	str	r3, [sp, #8]
  41eef2:	fa0f fb83 	sxth.w	fp, r3
    lv_draw_line_dsc_init(&line_dsc);
  41eef6:	a804      	add	r0, sp, #16
  41eef8:	4b3c      	ldr	r3, [pc, #240]	; (41efec <draw_series_bg+0x158>)
  41eefa:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(chart, LV_CHART_PART_SERIES_BG, &line_dsc);
  41eefc:	aa04      	add	r2, sp, #16
  41eefe:	2101      	movs	r1, #1
  41ef00:	4620      	mov	r0, r4
  41ef02:	4b3b      	ldr	r3, [pc, #236]	; (41eff0 <draw_series_bg+0x15c>)
  41ef04:	4798      	blx	r3
    if(ext->hdiv_cnt != 0) {
  41ef06:	f895 9020 	ldrb.w	r9, [r5, #32]
  41ef0a:	f1b9 0f00 	cmp.w	r9, #0
  41ef0e:	d02d      	beq.n	41ef6c <draw_series_bg+0xd8>
        if(bg_dsc.border_width != 0) {
  41ef10:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
  41ef14:	b963      	cbnz	r3, 41ef30 <draw_series_bg+0x9c>
            div_i_end   = ext->hdiv_cnt + 1;
  41ef16:	f109 0901 	add.w	r9, r9, #1
  41ef1a:	fa5f f989 	uxtb.w	r9, r9
            div_i_start = 0;
  41ef1e:	2400      	movs	r4, #0
        p1.x = 0 + x_ofs;
  41ef20:	f8ad 7020 	strh.w	r7, [sp, #32]
        p2.x = w - 1 + x_ofs;
  41ef24:	9b03      	ldr	r3, [sp, #12]
  41ef26:	4443      	add	r3, r8
  41ef28:	3b01      	subs	r3, #1
  41ef2a:	f8ad 301c 	strh.w	r3, [sp, #28]
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
  41ef2e:	e01b      	b.n	41ef68 <draw_series_bg+0xd4>
            div_i_start = 1;
  41ef30:	2401      	movs	r4, #1
  41ef32:	e7f5      	b.n	41ef20 <draw_series_bg+0x8c>
            p1.y = (int32_t)((int32_t)(h - line_dsc.width) * div_i) / (ext->hdiv_cnt + 1);
  41ef34:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  41ef38:	ebab 0303 	sub.w	r3, fp, r3
  41ef3c:	fb03 f304 	mul.w	r3, r3, r4
  41ef40:	f895 2020 	ldrb.w	r2, [r5, #32]
  41ef44:	3201      	adds	r2, #1
  41ef46:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.y += y_ofs;
  41ef4a:	fa06 f383 	sxtah	r3, r6, r3
  41ef4e:	b21b      	sxth	r3, r3
  41ef50:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            p2.y = p1.y;
  41ef54:	f8ad 301e 	strh.w	r3, [sp, #30]
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
  41ef58:	ab04      	add	r3, sp, #16
  41ef5a:	9a00      	ldr	r2, [sp, #0]
  41ef5c:	a907      	add	r1, sp, #28
  41ef5e:	a808      	add	r0, sp, #32
  41ef60:	4f24      	ldr	r7, [pc, #144]	; (41eff4 <draw_series_bg+0x160>)
  41ef62:	47b8      	blx	r7
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
  41ef64:	3401      	adds	r4, #1
  41ef66:	b2e4      	uxtb	r4, r4
  41ef68:	454c      	cmp	r4, r9
  41ef6a:	d9e3      	bls.n	41ef34 <draw_series_bg+0xa0>
    if(ext->vdiv_cnt != 0) {
  41ef6c:	f895 7021 	ldrb.w	r7, [r5, #33]	; 0x21
  41ef70:	b387      	cbz	r7, 41efd4 <draw_series_bg+0x140>
        if(bg_dsc.border_width != 0) {
  41ef72:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
  41ef76:	b97b      	cbnz	r3, 41ef98 <draw_series_bg+0x104>
            div_i_end   = ext->vdiv_cnt + 1;
  41ef78:	3701      	adds	r7, #1
  41ef7a:	b2ff      	uxtb	r7, r7
            div_i_start = 0;
  41ef7c:	2400      	movs	r4, #0
        p1.y = 0 + y_ofs;
  41ef7e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  41ef82:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        p2.y = h + y_ofs - 1;
  41ef86:	9b02      	ldr	r3, [sp, #8]
  41ef88:	441e      	add	r6, r3
  41ef8a:	b2b6      	uxth	r6, r6
  41ef8c:	3e01      	subs	r6, #1
  41ef8e:	f8ad 601e 	strh.w	r6, [sp, #30]
  41ef92:	f8dd 9000 	ldr.w	r9, [sp]
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
  41ef96:	e01b      	b.n	41efd0 <draw_series_bg+0x13c>
            div_i_start = 1;
  41ef98:	2401      	movs	r4, #1
  41ef9a:	e7f0      	b.n	41ef7e <draw_series_bg+0xea>
            p1.x = (int32_t)((int32_t)(w - line_dsc.width) * div_i) / (ext->vdiv_cnt + 1);
  41ef9c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  41efa0:	ebaa 0303 	sub.w	r3, sl, r3
  41efa4:	fb03 f304 	mul.w	r3, r3, r4
  41efa8:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
  41efac:	3201      	adds	r2, #1
  41efae:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.x += x_ofs;
  41efb2:	fa08 f383 	sxtah	r3, r8, r3
  41efb6:	b21b      	sxth	r3, r3
  41efb8:	f8ad 3020 	strh.w	r3, [sp, #32]
            p2.x = p1.x;
  41efbc:	f8ad 301c 	strh.w	r3, [sp, #28]
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
  41efc0:	ab04      	add	r3, sp, #16
  41efc2:	464a      	mov	r2, r9
  41efc4:	a907      	add	r1, sp, #28
  41efc6:	a808      	add	r0, sp, #32
  41efc8:	4e0a      	ldr	r6, [pc, #40]	; (41eff4 <draw_series_bg+0x160>)
  41efca:	47b0      	blx	r6
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
  41efcc:	3401      	adds	r4, #1
  41efce:	b2e4      	uxtb	r4, r4
  41efd0:	42bc      	cmp	r4, r7
  41efd2:	d9e3      	bls.n	41ef9c <draw_series_bg+0x108>
}
  41efd4:	b01f      	add	sp, #124	; 0x7c
  41efd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41efda:	bf00      	nop
  41efdc:	0041338d 	.word	0x0041338d
  41efe0:	004082a5 	.word	0x004082a5
  41efe4:	004133d9 	.word	0x004133d9
  41efe8:	00407ffd 	.word	0x00407ffd
  41efec:	0040f769 	.word	0x0040f769
  41eff0:	00408a4d 	.word	0x00408a4d
  41eff4:	0040f785 	.word	0x0040f785

0041eff8 <get_next_axis_label>:
 * Get next label from iterator created by lv_chart_create_label_iter()
 * @param iterator iterator to get label from
 * @param[out] buf buffer to point next label to
 */
static void get_next_axis_label(lv_chart_label_iterator_t * iterator, char * buf)
{
  41eff8:	b538      	push	{r3, r4, r5, lr}
  41effa:	460d      	mov	r5, r1
    uint32_t label_len = 0;
    if(iterator->is_reverse_iter) {
  41effc:	7a43      	ldrb	r3, [r0, #9]
  41effe:	b9d3      	cbnz	r3, 41f036 <get_next_axis_label+0x3e>
  41f000:	2400      	movs	r4, #0
  41f002:	e01f      	b.n	41f044 <get_next_axis_label+0x4c>
        const char * label_start;
        /* count the length of the current label*/
        while((*iterator->current_pos != '\n') &&
              (iterator->current_pos != iterator->list_start)) {
            iterator->current_pos--;
  41f004:	3901      	subs	r1, #1
  41f006:	6041      	str	r1, [r0, #4]
            label_len++;
  41f008:	3401      	adds	r4, #1
        while((*iterator->current_pos != '\n') &&
  41f00a:	6841      	ldr	r1, [r0, #4]
  41f00c:	780b      	ldrb	r3, [r1, #0]
  41f00e:	2b0a      	cmp	r3, #10
  41f010:	d002      	beq.n	41f018 <get_next_axis_label+0x20>
              (iterator->current_pos != iterator->list_start)) {
  41f012:	6802      	ldr	r2, [r0, #0]
        while((*iterator->current_pos != '\n') &&
  41f014:	4291      	cmp	r1, r2
  41f016:	d1f5      	bne.n	41f004 <get_next_axis_label+0xc>
        }

        label_start = iterator->current_pos;

        if(*iterator->current_pos == '\n') {
  41f018:	2b0a      	cmp	r3, #10
  41f01a:	d00e      	beq.n	41f03a <get_next_axis_label+0x42>
            /* skip newline*/
            iterator->current_pos--;
        }
        else {
            /* it is last label in list (first one from the beginning )*/
            label_len++;
  41f01c:	3401      	adds	r4, #1
        }

        /* do not allow output buffer overflow */
        if(label_len > LV_CHART_AXIS_TICK_LABEL_MAX_LEN) {
  41f01e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
  41f022:	d901      	bls.n	41f028 <get_next_axis_label+0x30>
            label_len = LV_CHART_AXIS_TICK_LABEL_MAX_LEN;
  41f024:	f44f 7480 	mov.w	r4, #256	; 0x100
        }

        strncpy(buf, label_start, label_len);
  41f028:	4622      	mov	r2, r4
  41f02a:	4628      	mov	r0, r5
  41f02c:	4b11      	ldr	r3, [pc, #68]	; (41f074 <get_next_axis_label+0x7c>)
  41f02e:	4798      	blx	r3

        if(*iterator->current_pos == '\n') iterator->current_pos++;
    }

    /* terminate the string */
    buf[label_len] = '\0';
  41f030:	2300      	movs	r3, #0
  41f032:	552b      	strb	r3, [r5, r4]
  41f034:	bd38      	pop	{r3, r4, r5, pc}
  41f036:	2400      	movs	r4, #0
  41f038:	e7e7      	b.n	41f00a <get_next_axis_label+0x12>
            iterator->current_pos--;
  41f03a:	1e4b      	subs	r3, r1, #1
  41f03c:	6043      	str	r3, [r0, #4]
            label_start++;
  41f03e:	3101      	adds	r1, #1
  41f040:	e7ed      	b.n	41f01e <get_next_axis_label+0x26>
                label_len++;
  41f042:	3401      	adds	r4, #1
        while(iterator->current_pos[label_len] != '\n' &&
  41f044:	6843      	ldr	r3, [r0, #4]
  41f046:	191a      	adds	r2, r3, r4
  41f048:	5d1b      	ldrb	r3, [r3, r4]
  41f04a:	2b0a      	cmp	r3, #10
  41f04c:	bf18      	it	ne
  41f04e:	2b00      	cmpne	r3, #0
  41f050:	d004      	beq.n	41f05c <get_next_axis_label+0x64>
            if(label_len < LV_CHART_AXIS_TICK_LABEL_MAX_LEN) {
  41f052:	2cff      	cmp	r4, #255	; 0xff
  41f054:	d8f5      	bhi.n	41f042 <get_next_axis_label+0x4a>
                buf[label_len] = iterator->current_pos[label_len];
  41f056:	552b      	strb	r3, [r5, r4]
                label_len++;
  41f058:	3401      	adds	r4, #1
  41f05a:	e7f3      	b.n	41f044 <get_next_axis_label+0x4c>
        iterator->current_pos += label_len;
  41f05c:	6042      	str	r2, [r0, #4]
        if(label_len > LV_CHART_AXIS_TICK_LABEL_MAX_LEN) {
  41f05e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
  41f062:	d901      	bls.n	41f068 <get_next_axis_label+0x70>
            label_len = LV_CHART_AXIS_TICK_LABEL_MAX_LEN;
  41f064:	f44f 7480 	mov.w	r4, #256	; 0x100
        if(*iterator->current_pos == '\n') iterator->current_pos++;
  41f068:	7813      	ldrb	r3, [r2, #0]
  41f06a:	2b0a      	cmp	r3, #10
  41f06c:	d1e0      	bne.n	41f030 <get_next_axis_label+0x38>
  41f06e:	3201      	adds	r2, #1
  41f070:	6042      	str	r2, [r0, #4]
  41f072:	e7dd      	b.n	41f030 <get_next_axis_label+0x38>
  41f074:	00428e9d 	.word	0x00428e9d

0041f078 <draw_y_ticks>:
{
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
}

static void draw_y_ticks(lv_obj_t * chart, const lv_area_t * series_area, const lv_area_t * mask, uint8_t which_axis)
{
  41f078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f07c:	b0e5      	sub	sp, #404	; 0x194
  41f07e:	4604      	mov	r4, r0
  41f080:	460d      	mov	r5, r1
  41f082:	4616      	mov	r6, r2
  41f084:	469b      	mov	fp, r3
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  41f086:	4b97      	ldr	r3, [pc, #604]	; (41f2e4 <draw_y_ticks+0x26c>)
  41f088:	4798      	blx	r3
    lv_chart_axis_cfg_t * y_axis = (which_axis == LV_CHART_AXIS_PRIMARY_Y) ?
                                   &ext->y_axis : &ext->secondary_y_axis;
  41f08a:	f1bb 0f00 	cmp.w	fp, #0
  41f08e:	d167      	bne.n	41f160 <draw_y_ticks+0xe8>
  41f090:	f100 0740 	add.w	r7, r0, #64	; 0x40

    if(y_axis->list_of_values == NULL && y_axis->num_tick_marks == 0)  return;
  41f094:	6839      	ldr	r1, [r7, #0]
  41f096:	2900      	cmp	r1, #0
  41f098:	d065      	beq.n	41f166 <draw_y_ticks+0xee>
  41f09a:	f8b5 8006 	ldrh.w	r8, [r5, #6]
  41f09e:	f8b5 a002 	ldrh.w	sl, [r5, #2]
  41f0a2:	eba8 080a 	sub.w	r8, r8, sl
  41f0a6:	fa1f f888 	uxth.w	r8, r8
  41f0aa:	f108 0801 	add.w	r8, r8, #1
  41f0ae:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41f0b2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  41f0b6:	9306      	str	r3, [sp, #24]
  41f0b8:	b29b      	uxth	r3, r3
  41f0ba:	f9b5 2000 	ldrsh.w	r2, [r5]
  41f0be:	b290      	uxth	r0, r2
  41f0c0:	1a1b      	subs	r3, r3, r0
  41f0c2:	b29b      	uxth	r3, r3
  41f0c4:	3301      	adds	r3, #1
  41f0c6:	b21b      	sxth	r3, r3
    lv_coord_t h     = lv_area_get_height(series_area);
    lv_coord_t w     = lv_area_get_width(series_area);
    char buf[LV_CHART_AXIS_TICK_LABEL_MAX_LEN + 1]; /* up to N symbols per label + null terminator */

    /* chose correct side of the chart */
    if(which_axis == LV_CHART_AXIS_PRIMARY_Y)
  41f0c8:	f1bb 0f00 	cmp.w	fp, #0
  41f0cc:	d100      	bne.n	41f0d0 <draw_y_ticks+0x58>
        x_ofs = series_area->x1;
  41f0ce:	9206      	str	r2, [sp, #24]
    else
        x_ofs = series_area->x2;

    /* calculate the size of tick marks */
    if(y_axis->major_tick_len == LV_CHART_TICK_LENGTH_AUTO)
  41f0d0:	79ba      	ldrb	r2, [r7, #6]
  41f0d2:	2aff      	cmp	r2, #255	; 0xff
  41f0d4:	d04d      	beq.n	41f172 <draw_y_ticks+0xfa>
        major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
    else
        major_tick_len = y_axis->major_tick_len;
  41f0d6:	b253      	sxtb	r3, r2
  41f0d8:	9308      	str	r3, [sp, #32]

    if(y_axis->minor_tick_len == LV_CHART_TICK_LENGTH_AUTO)
  41f0da:	79fb      	ldrb	r3, [r7, #7]
  41f0dc:	2bff      	cmp	r3, #255	; 0xff
  41f0de:	d052      	beq.n	41f186 <draw_y_ticks+0x10e>
        minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
    else
        minor_tick_len = y_axis->minor_tick_len;
  41f0e0:	b25b      	sxtb	r3, r3
  41f0e2:	9307      	str	r3, [sp, #28]

    /* tick lines on secondary y axis are drawn in other direction*/
    if(which_axis == LV_CHART_AXIS_SECONDARY_Y) {
  41f0e4:	f1bb 0f01 	cmp.w	fp, #1
  41f0e8:	d057      	beq.n	41f19a <draw_y_ticks+0x122>
        major_tick_len *= -1;
        minor_tick_len *= -1;
    }

    iter_dir = (y_axis->options & LV_CHART_AXIS_INVERSE_LABELS_ORDER) ? LV_CHART_LABEL_ITERATOR_REVERSE :
  41f0ea:	793a      	ldrb	r2, [r7, #4]
  41f0ec:	0852      	lsrs	r2, r2, #1
  41f0ee:	f082 0201 	eor.w	r2, r2, #1
               LV_CHART_LABEL_ITERATOR_FORWARD;
    iter = create_axis_label_iter(y_axis->list_of_values, iter_dir);
  41f0f2:	ad0a      	add	r5, sp, #40	; 0x28
  41f0f4:	f002 0201 	and.w	r2, r2, #1
  41f0f8:	4628      	mov	r0, r5
  41f0fa:	4b7b      	ldr	r3, [pc, #492]	; (41f2e8 <draw_y_ticks+0x270>)
  41f0fc:	4798      	blx	r3
  41f0fe:	ab5f      	add	r3, sp, #380	; 0x17c
  41f100:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  41f104:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /*determine the number of options */
    num_of_labels = iter.items_left;
  41f108:	f89d 9184 	ldrb.w	r9, [sp, #388]	; 0x184

    /* we can't have string labels without ticks step, set to 1 if not specified */
    if(y_axis->num_tick_marks == 0) y_axis->num_tick_marks = 1;
  41f10c:	797b      	ldrb	r3, [r7, #5]
  41f10e:	b90b      	cbnz	r3, 41f114 <draw_y_ticks+0x9c>
  41f110:	2301      	movs	r3, #1
  41f112:	717b      	strb	r3, [r7, #5]

    /* calculate total number of ticks */
    if(num_of_labels < 2)
  41f114:	f1b9 0f01 	cmp.w	r9, #1
  41f118:	d948      	bls.n	41f1ac <draw_y_ticks+0x134>
        num_scale_ticks = y_axis->num_tick_marks;
    else
        num_scale_ticks = (y_axis->num_tick_marks * (num_of_labels - 1));
  41f11a:	797b      	ldrb	r3, [r7, #5]
  41f11c:	f109 35ff 	add.w	r5, r9, #4294967295
  41f120:	fb15 f503 	smulbb	r5, r5, r3
  41f124:	b2ed      	uxtb	r5, r5

    lv_style_int_t label_dist  = which_axis == LV_CHART_AXIS_PRIMARY_Y ?
  41f126:	f1bb 0f00 	cmp.w	fp, #0
  41f12a:	d141      	bne.n	41f1b0 <draw_y_ticks+0x138>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41f12c:	2212      	movs	r2, #18
  41f12e:	2101      	movs	r1, #1
  41f130:	4620      	mov	r0, r4
  41f132:	4b6e      	ldr	r3, [pc, #440]	; (41f2ec <draw_y_ticks+0x274>)
  41f134:	4798      	blx	r3
  41f136:	9009      	str	r0, [sp, #36]	; 0x24
                                 lv_obj_get_style_pad_left(chart, LV_CHART_PART_SERIES_BG)  : lv_obj_get_style_pad_right(chart, LV_CHART_PART_SERIES_BG);

    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
  41f138:	a81b      	add	r0, sp, #108	; 0x6c
  41f13a:	4b6d      	ldr	r3, [pc, #436]	; (41f2f0 <draw_y_ticks+0x278>)
  41f13c:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(chart, LV_CHART_PART_BG, &line_dsc);
  41f13e:	aa1b      	add	r2, sp, #108	; 0x6c
  41f140:	2100      	movs	r1, #0
  41f142:	4620      	mov	r0, r4
  41f144:	4b6b      	ldr	r3, [pc, #428]	; (41f2f4 <draw_y_ticks+0x27c>)
  41f146:	4798      	blx	r3

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
  41f148:	a812      	add	r0, sp, #72	; 0x48
  41f14a:	4b6b      	ldr	r3, [pc, #428]	; (41f2f8 <draw_y_ticks+0x280>)
  41f14c:	4798      	blx	r3
    lv_obj_init_draw_label_dsc(chart, LV_CHART_PART_BG, &label_dsc);
  41f14e:	aa12      	add	r2, sp, #72	; 0x48
  41f150:	2100      	movs	r1, #0
  41f152:	4620      	mov	r0, r4
  41f154:	4b69      	ldr	r3, [pc, #420]	; (41f2fc <draw_y_ticks+0x284>)
  41f156:	4798      	blx	r3

    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
  41f158:	2400      	movs	r4, #0
  41f15a:	f8cd b014 	str.w	fp, [sp, #20]
  41f15e:	e032      	b.n	41f1c6 <draw_y_ticks+0x14e>
                                   &ext->y_axis : &ext->secondary_y_axis;
  41f160:	f100 0750 	add.w	r7, r0, #80	; 0x50
  41f164:	e796      	b.n	41f094 <draw_y_ticks+0x1c>
    if(y_axis->list_of_values == NULL && y_axis->num_tick_marks == 0)  return;
  41f166:	797b      	ldrb	r3, [r7, #5]
  41f168:	2b00      	cmp	r3, #0
  41f16a:	d196      	bne.n	41f09a <draw_y_ticks+0x22>

                lv_draw_label(&a, mask, &label_dsc, buf, NULL);
            }
        }
    }
}
  41f16c:	b065      	add	sp, #404	; 0x194
  41f16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
  41f172:	4a63      	ldr	r2, [pc, #396]	; (41f300 <draw_y_ticks+0x288>)
  41f174:	fb82 0203 	smull	r0, r2, r2, r3
  41f178:	441a      	add	r2, r3
  41f17a:	17db      	asrs	r3, r3, #31
  41f17c:	ebc3 03e2 	rsb	r3, r3, r2, asr #3
  41f180:	b25b      	sxtb	r3, r3
  41f182:	9308      	str	r3, [sp, #32]
  41f184:	e7a9      	b.n	41f0da <draw_y_ticks+0x62>
        minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
  41f186:	9b08      	ldr	r3, [sp, #32]
  41f188:	005a      	lsls	r2, r3, #1
  41f18a:	4b5e      	ldr	r3, [pc, #376]	; (41f304 <draw_y_ticks+0x28c>)
  41f18c:	fb83 0302 	smull	r0, r3, r3, r2
  41f190:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
  41f194:	b25b      	sxtb	r3, r3
  41f196:	9307      	str	r3, [sp, #28]
  41f198:	e7a4      	b.n	41f0e4 <draw_y_ticks+0x6c>
        major_tick_len *= -1;
  41f19a:	9b08      	ldr	r3, [sp, #32]
  41f19c:	425b      	negs	r3, r3
  41f19e:	b25b      	sxtb	r3, r3
  41f1a0:	9308      	str	r3, [sp, #32]
        minor_tick_len *= -1;
  41f1a2:	9b07      	ldr	r3, [sp, #28]
  41f1a4:	425b      	negs	r3, r3
  41f1a6:	b25b      	sxtb	r3, r3
  41f1a8:	9307      	str	r3, [sp, #28]
  41f1aa:	e79e      	b.n	41f0ea <draw_y_ticks+0x72>
        num_scale_ticks = y_axis->num_tick_marks;
  41f1ac:	797d      	ldrb	r5, [r7, #5]
  41f1ae:	e7ba      	b.n	41f126 <draw_y_ticks+0xae>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41f1b0:	2213      	movs	r2, #19
  41f1b2:	2101      	movs	r1, #1
  41f1b4:	4620      	mov	r0, r4
  41f1b6:	4b4d      	ldr	r3, [pc, #308]	; (41f2ec <draw_y_ticks+0x274>)
  41f1b8:	4798      	blx	r3
  41f1ba:	9009      	str	r0, [sp, #36]	; 0x24
  41f1bc:	e7bc      	b.n	41f138 <draw_y_ticks+0xc0>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41f1be:	2301      	movs	r3, #1
            if(is_tick_with_label(i, y_axis)) {
  41f1c0:	bb6b      	cbnz	r3, 41f21e <draw_y_ticks+0x1a6>
    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
  41f1c2:	3401      	adds	r4, #1
  41f1c4:	b2e4      	uxtb	r4, r4
  41f1c6:	1c6b      	adds	r3, r5, #1
  41f1c8:	429c      	cmp	r4, r3
  41f1ca:	dacf      	bge.n	41f16c <draw_y_ticks+0xf4>
                   y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / num_scale_ticks;
  41f1cc:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
  41f1d0:	eba8 0303 	sub.w	r3, r8, r3
  41f1d4:	fb03 f304 	mul.w	r3, r3, r4
  41f1d8:	fb93 f3f5 	sdiv	r3, r3, r5
  41f1dc:	4453      	add	r3, sl
  41f1de:	b21b      	sxth	r3, r3
        p2.y = p1.y =
  41f1e0:	f8ad 318e 	strh.w	r3, [sp, #398]	; 0x18e
  41f1e4:	f8ad 318a 	strh.w	r3, [sp, #394]	; 0x18a
        if(p2.y - label_dsc.font->line_height > mask->y2) return;
  41f1e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
  41f1ea:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
  41f1ee:	1a98      	subs	r0, r3, r2
  41f1f0:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
  41f1f4:	4288      	cmp	r0, r1
  41f1f6:	dcb9      	bgt.n	41f16c <draw_y_ticks+0xf4>
        if(p2.y + label_dsc.font->line_height < mask->y1) {
  41f1f8:	4413      	add	r3, r2
  41f1fa:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
  41f1fe:	4293      	cmp	r3, r2
  41f200:	da12      	bge.n	41f228 <draw_y_ticks+0x1b0>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41f202:	2c00      	cmp	r4, #0
  41f204:	d0db      	beq.n	41f1be <draw_y_ticks+0x146>
  41f206:	797a      	ldrb	r2, [r7, #5]
  41f208:	fbb4 f3f2 	udiv	r3, r4, r2
  41f20c:	fb02 4313 	mls	r3, r2, r3, r4
  41f210:	f013 0fff 	tst.w	r3, #255	; 0xff
  41f214:	d101      	bne.n	41f21a <draw_y_ticks+0x1a2>
  41f216:	2301      	movs	r3, #1
  41f218:	e7d2      	b.n	41f1c0 <draw_y_ticks+0x148>
  41f21a:	2300      	movs	r3, #0
  41f21c:	e7d0      	b.n	41f1c0 <draw_y_ticks+0x148>
                get_next_axis_label(&iter, buf);
  41f21e:	a91e      	add	r1, sp, #120	; 0x78
  41f220:	a85f      	add	r0, sp, #380	; 0x17c
  41f222:	4b39      	ldr	r3, [pc, #228]	; (41f308 <draw_y_ticks+0x290>)
  41f224:	4798      	blx	r3
            continue;
  41f226:	e7cc      	b.n	41f1c2 <draw_y_ticks+0x14a>
        if(which_axis == LV_CHART_AXIS_PRIMARY_Y)
  41f228:	9b05      	ldr	r3, [sp, #20]
  41f22a:	b9b3      	cbnz	r3, 41f25a <draw_y_ticks+0x1e2>
            p1.x--;
  41f22c:	9b06      	ldr	r3, [sp, #24]
  41f22e:	3b01      	subs	r3, #1
  41f230:	f8ad 318c 	strh.w	r3, [sp, #396]	; 0x18c
        if((num_of_labels != 0) && (i == 0 || i % y_axis->num_tick_marks == 0))
  41f234:	f1b9 0f00 	cmp.w	r9, #0
  41f238:	d014      	beq.n	41f264 <draw_y_ticks+0x1ec>
  41f23a:	b13c      	cbz	r4, 41f24c <draw_y_ticks+0x1d4>
  41f23c:	797a      	ldrb	r2, [r7, #5]
  41f23e:	fbb4 f3f2 	udiv	r3, r4, r2
  41f242:	fb02 4313 	mls	r3, r2, r3, r4
  41f246:	f013 0fff 	tst.w	r3, #255	; 0xff
  41f24a:	d10b      	bne.n	41f264 <draw_y_ticks+0x1ec>
            p2.x = p1.x - major_tick_len; /* major tick */
  41f24c:	f8bd 318c 	ldrh.w	r3, [sp, #396]	; 0x18c
  41f250:	9a08      	ldr	r2, [sp, #32]
  41f252:	1a9b      	subs	r3, r3, r2
  41f254:	f8ad 3188 	strh.w	r3, [sp, #392]	; 0x188
  41f258:	e00a      	b.n	41f270 <draw_y_ticks+0x1f8>
            p1.x++;
  41f25a:	9b06      	ldr	r3, [sp, #24]
  41f25c:	3301      	adds	r3, #1
  41f25e:	f8ad 318c 	strh.w	r3, [sp, #396]	; 0x18c
  41f262:	e7e7      	b.n	41f234 <draw_y_ticks+0x1bc>
            p2.x = p1.x - minor_tick_len; /* minor tick */
  41f264:	f8bd 318c 	ldrh.w	r3, [sp, #396]	; 0x18c
  41f268:	9a07      	ldr	r2, [sp, #28]
  41f26a:	1a9b      	subs	r3, r3, r2
  41f26c:	f8ad 3188 	strh.w	r3, [sp, #392]	; 0x188
        if(y_axis->options & LV_CHART_AXIS_INVERSE_LABELS_ORDER) {
  41f270:	793b      	ldrb	r3, [r7, #4]
  41f272:	f013 0f02 	tst.w	r3, #2
  41f276:	d013      	beq.n	41f2a0 <draw_y_ticks+0x228>
            if(i != 0)
  41f278:	b954      	cbnz	r4, 41f290 <draw_y_ticks+0x218>
            else if((y_axis->options & LV_CHART_AXIS_DRAW_LAST_TICK) != 0)
  41f27a:	f013 0f01 	tst.w	r3, #1
  41f27e:	d018      	beq.n	41f2b2 <draw_y_ticks+0x23a>
                lv_draw_line(&p1, &p2, mask, &line_dsc);
  41f280:	ab1b      	add	r3, sp, #108	; 0x6c
  41f282:	4632      	mov	r2, r6
  41f284:	a962      	add	r1, sp, #392	; 0x188
  41f286:	a863      	add	r0, sp, #396	; 0x18c
  41f288:	f8df b080 	ldr.w	fp, [pc, #128]	; 41f30c <draw_y_ticks+0x294>
  41f28c:	47d8      	blx	fp
  41f28e:	e010      	b.n	41f2b2 <draw_y_ticks+0x23a>
                lv_draw_line(&p1, &p2, mask, &line_dsc);
  41f290:	ab1b      	add	r3, sp, #108	; 0x6c
  41f292:	4632      	mov	r2, r6
  41f294:	a962      	add	r1, sp, #392	; 0x188
  41f296:	a863      	add	r0, sp, #396	; 0x18c
  41f298:	f8df b070 	ldr.w	fp, [pc, #112]	; 41f30c <draw_y_ticks+0x294>
  41f29c:	47d8      	blx	fp
  41f29e:	e008      	b.n	41f2b2 <draw_y_ticks+0x23a>
            if(i != num_scale_ticks)
  41f2a0:	42ac      	cmp	r4, r5
  41f2a2:	d014      	beq.n	41f2ce <draw_y_ticks+0x256>
                lv_draw_line(&p1, &p2, mask, &line_dsc);
  41f2a4:	ab1b      	add	r3, sp, #108	; 0x6c
  41f2a6:	4632      	mov	r2, r6
  41f2a8:	a962      	add	r1, sp, #392	; 0x188
  41f2aa:	a863      	add	r0, sp, #396	; 0x18c
  41f2ac:	f8df b05c 	ldr.w	fp, [pc, #92]	; 41f30c <draw_y_ticks+0x294>
  41f2b0:	47d8      	blx	fp
        if(num_of_labels != 0) {
  41f2b2:	f1b9 0f00 	cmp.w	r9, #0
  41f2b6:	d084      	beq.n	41f1c2 <draw_y_ticks+0x14a>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41f2b8:	b354      	cbz	r4, 41f310 <draw_y_ticks+0x298>
  41f2ba:	797a      	ldrb	r2, [r7, #5]
  41f2bc:	fbb4 f3f2 	udiv	r3, r4, r2
  41f2c0:	fb02 4313 	mls	r3, r2, r3, r4
  41f2c4:	f013 0fff 	tst.w	r3, #255	; 0xff
  41f2c8:	d162      	bne.n	41f390 <draw_y_ticks+0x318>
  41f2ca:	2301      	movs	r3, #1
  41f2cc:	e021      	b.n	41f312 <draw_y_ticks+0x29a>
            else if((y_axis->options & LV_CHART_AXIS_DRAW_LAST_TICK) != 0)
  41f2ce:	f013 0f01 	tst.w	r3, #1
  41f2d2:	d0ee      	beq.n	41f2b2 <draw_y_ticks+0x23a>
                lv_draw_line(&p1, &p2, mask, &line_dsc);
  41f2d4:	ab1b      	add	r3, sp, #108	; 0x6c
  41f2d6:	4632      	mov	r2, r6
  41f2d8:	a962      	add	r1, sp, #392	; 0x188
  41f2da:	a863      	add	r0, sp, #396	; 0x18c
  41f2dc:	f8df b02c 	ldr.w	fp, [pc, #44]	; 41f30c <draw_y_ticks+0x294>
  41f2e0:	47d8      	blx	fp
  41f2e2:	e7e6      	b.n	41f2b2 <draw_y_ticks+0x23a>
  41f2e4:	00407ffd 	.word	0x00407ffd
  41f2e8:	0041ee05 	.word	0x0041ee05
  41f2ec:	004073ed 	.word	0x004073ed
  41f2f0:	0040f769 	.word	0x0040f769
  41f2f4:	00408a4d 	.word	0x00408a4d
  41f2f8:	0040e919 	.word	0x0040e919
  41f2fc:	004088d5 	.word	0x004088d5
  41f300:	88888889 	.word	0x88888889
  41f304:	55555556 	.word	0x55555556
  41f308:	0041eff9 	.word	0x0041eff9
  41f30c:	0040f785 	.word	0x0040f785
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41f310:	2301      	movs	r3, #1
            if(is_tick_with_label(i, y_axis)) {
  41f312:	2b00      	cmp	r3, #0
  41f314:	f43f af55 	beq.w	41f1c2 <draw_y_ticks+0x14a>
                get_next_axis_label(&iter, buf);
  41f318:	a91e      	add	r1, sp, #120	; 0x78
  41f31a:	a85f      	add	r0, sp, #380	; 0x17c
  41f31c:	4b26      	ldr	r3, [pc, #152]	; (41f3b8 <draw_y_ticks+0x340>)
  41f31e:	4798      	blx	r3
                _lv_txt_get_size(&size, buf, label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
  41f320:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
  41f324:	9a14      	ldr	r2, [sp, #80]	; 0x50
  41f326:	2104      	movs	r1, #4
  41f328:	9102      	str	r1, [sp, #8]
  41f32a:	f647 4118 	movw	r1, #31768	; 0x7c18
  41f32e:	9101      	str	r1, [sp, #4]
  41f330:	f9bd 1056 	ldrsh.w	r1, [sp, #86]	; 0x56
  41f334:	9100      	str	r1, [sp, #0]
  41f336:	a91e      	add	r1, sp, #120	; 0x78
  41f338:	a80f      	add	r0, sp, #60	; 0x3c
  41f33a:	f8df b080 	ldr.w	fp, [pc, #128]	; 41f3bc <draw_y_ticks+0x344>
  41f33e:	47d8      	blx	fp
                a.y1 = p2.y - size.y / 2;
  41f340:	f8bd 218a 	ldrh.w	r2, [sp, #394]	; 0x18a
  41f344:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
  41f348:	2b00      	cmp	r3, #0
  41f34a:	db23      	blt.n	41f394 <draw_y_ticks+0x31c>
  41f34c:	f3c3 034f 	ubfx	r3, r3, #1, #16
  41f350:	1ad1      	subs	r1, r2, r3
  41f352:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
                a.y2 = p2.y + size.y / 2;
  41f356:	4413      	add	r3, r2
  41f358:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                if(which_axis == LV_CHART_AXIS_PRIMARY_Y) {
  41f35c:	9b05      	ldr	r3, [sp, #20]
  41f35e:	b9db      	cbnz	r3, 41f398 <draw_y_ticks+0x320>
                    a.x1 = p2.x - size.x - label_dist;
  41f360:	f8bd 2188 	ldrh.w	r2, [sp, #392]	; 0x188
  41f364:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  41f368:	1ad3      	subs	r3, r2, r3
  41f36a:	b29b      	uxth	r3, r3
  41f36c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
  41f370:	1a5b      	subs	r3, r3, r1
  41f372:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                    a.x2 = p2.x - label_dist;
  41f376:	1a52      	subs	r2, r2, r1
  41f378:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
                lv_draw_label(&a, mask, &label_dsc, buf, NULL);
  41f37c:	2300      	movs	r3, #0
  41f37e:	9300      	str	r3, [sp, #0]
  41f380:	ab1e      	add	r3, sp, #120	; 0x78
  41f382:	aa12      	add	r2, sp, #72	; 0x48
  41f384:	4631      	mov	r1, r6
  41f386:	a810      	add	r0, sp, #64	; 0x40
  41f388:	f8df b034 	ldr.w	fp, [pc, #52]	; 41f3c0 <draw_y_ticks+0x348>
  41f38c:	47d8      	blx	fp
  41f38e:	e718      	b.n	41f1c2 <draw_y_ticks+0x14a>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41f390:	2300      	movs	r3, #0
  41f392:	e7be      	b.n	41f312 <draw_y_ticks+0x29a>
                a.y1 = p2.y - size.y / 2;
  41f394:	3301      	adds	r3, #1
  41f396:	e7d9      	b.n	41f34c <draw_y_ticks+0x2d4>
                    a.x1 = p2.x + label_dist;
  41f398:	f8bd 3188 	ldrh.w	r3, [sp, #392]	; 0x188
  41f39c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  41f3a0:	1899      	adds	r1, r3, r2
  41f3a2:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
                    a.x2 = p2.x + size.x + label_dist;
  41f3a6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
  41f3aa:	440b      	add	r3, r1
  41f3ac:	fa12 f383 	uxtah	r3, r2, r3
  41f3b0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  41f3b4:	e7e2      	b.n	41f37c <draw_y_ticks+0x304>
  41f3b6:	bf00      	nop
  41f3b8:	0041eff9 	.word	0x0041eff9
  41f3bc:	00418db5 	.word	0x00418db5
  41f3c0:	0040e961 	.word	0x0040e961

0041f3c4 <draw_x_ticks>:

static void draw_x_ticks(lv_obj_t * chart, const lv_area_t * series_area, const lv_area_t * mask)
{
  41f3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f3c8:	b0e5      	sub	sp, #404	; 0x194
  41f3ca:	9006      	str	r0, [sp, #24]
  41f3cc:	460c      	mov	r4, r1
  41f3ce:	9204      	str	r2, [sp, #16]
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  41f3d0:	4ba3      	ldr	r3, [pc, #652]	; (41f660 <draw_x_ticks+0x29c>)
  41f3d2:	4798      	blx	r3
  41f3d4:	4606      	mov	r6, r0

    if(ext->x_axis.list_of_values == NULL && ext->x_axis.num_tick_marks == 0) return;
  41f3d6:	6c83      	ldr	r3, [r0, #72]	; 0x48
  41f3d8:	2b00      	cmp	r3, #0
  41f3da:	d044      	beq.n	41f466 <draw_x_ticks+0xa2>
    uint8_t num_scale_ticks;
    uint8_t major_tick_len, minor_tick_len;
    lv_chart_label_iterator_t iter;
    lv_point_t p1;
    lv_point_t p2;
    lv_coord_t x_ofs = series_area->x1;
  41f3dc:	f9b4 3000 	ldrsh.w	r3, [r4]
  41f3e0:	461a      	mov	r2, r3
  41f3e2:	9308      	str	r3, [sp, #32]
    lv_coord_t y_ofs = series_area->y1;
  41f3e4:	f9b4 a002 	ldrsh.w	sl, [r4, #2]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41f3e8:	88e3      	ldrh	r3, [r4, #6]
  41f3ea:	fa1f f98a 	uxth.w	r9, sl
  41f3ee:	eba3 0309 	sub.w	r3, r3, r9
  41f3f2:	b29b      	uxth	r3, r3
  41f3f4:	3301      	adds	r3, #1
  41f3f6:	b29b      	uxth	r3, r3
  41f3f8:	9305      	str	r3, [sp, #20]
  41f3fa:	b21d      	sxth	r5, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41f3fc:	88a4      	ldrh	r4, [r4, #4]
  41f3fe:	b293      	uxth	r3, r2
  41f400:	9309      	str	r3, [sp, #36]	; 0x24
  41f402:	1ae4      	subs	r4, r4, r3
  41f404:	b2a4      	uxth	r4, r4
  41f406:	3401      	adds	r4, #1
  41f408:	b2a4      	uxth	r4, r4
  41f40a:	fa0f fb84 	sxth.w	fp, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41f40e:	2211      	movs	r2, #17
  41f410:	2101      	movs	r1, #1
  41f412:	9f06      	ldr	r7, [sp, #24]
  41f414:	4638      	mov	r0, r7
  41f416:	4b93      	ldr	r3, [pc, #588]	; (41f664 <draw_x_ticks+0x2a0>)
  41f418:	4798      	blx	r3
  41f41a:	9007      	str	r0, [sp, #28]
    lv_coord_t h     = lv_area_get_height(series_area);
    lv_coord_t w     = lv_area_get_width(series_area);
    lv_style_int_t label_dist  = lv_obj_get_style_pad_bottom(chart, LV_CHART_PART_SERIES_BG);

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
  41f41c:	a856      	add	r0, sp, #344	; 0x158
  41f41e:	4b92      	ldr	r3, [pc, #584]	; (41f668 <draw_x_ticks+0x2a4>)
  41f420:	4798      	blx	r3
    lv_obj_init_draw_label_dsc(chart, LV_CHART_PART_BG, &label_dsc);
  41f422:	aa56      	add	r2, sp, #344	; 0x158
  41f424:	2100      	movs	r1, #0
  41f426:	4638      	mov	r0, r7
  41f428:	4b90      	ldr	r3, [pc, #576]	; (41f66c <draw_x_ticks+0x2a8>)
  41f42a:	4798      	blx	r3

    /* calculate the size of tick marks */
    if(ext->x_axis.major_tick_len == LV_CHART_TICK_LENGTH_AUTO)
  41f42c:	f896 804e 	ldrb.w	r8, [r6, #78]	; 0x4e
  41f430:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  41f434:	d01c      	beq.n	41f470 <draw_x_ticks+0xac>
        major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
    else
        major_tick_len = ext->x_axis.major_tick_len;

    if(ext->x_axis.minor_tick_len == LV_CHART_TICK_LENGTH_AUTO)
  41f436:	f896 704f 	ldrb.w	r7, [r6, #79]	; 0x4f
  41f43a:	2fff      	cmp	r7, #255	; 0xff
  41f43c:	d023      	beq.n	41f486 <draw_x_ticks+0xc2>
        minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
    else
        minor_tick_len = ext->x_axis.minor_tick_len;

    if(h + y_ofs > mask->y2) return;
  41f43e:	4455      	add	r5, sl
  41f440:	9a04      	ldr	r2, [sp, #16]
  41f442:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
  41f446:	429d      	cmp	r5, r3
  41f448:	dc0a      	bgt.n	41f460 <draw_x_ticks+0x9c>
    if(h + y_ofs + label_dist  + label_dsc.font->line_height + major_tick_len < mask->y1) return;
  41f44a:	9b07      	ldr	r3, [sp, #28]
  41f44c:	441d      	add	r5, r3
  41f44e:	9b58      	ldr	r3, [sp, #352]	; 0x160
  41f450:	f9b3 a008 	ldrsh.w	sl, [r3, #8]
  41f454:	4455      	add	r5, sl
  41f456:	4445      	add	r5, r8
  41f458:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
  41f45c:	429d      	cmp	r5, r3
  41f45e:	da1b      	bge.n	41f498 <draw_x_ticks+0xd4>
                              };
                lv_draw_label(&a, mask, &label_dsc, buf, NULL);
            }
        }
    }
}
  41f460:	b065      	add	sp, #404	; 0x194
  41f462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(ext->x_axis.list_of_values == NULL && ext->x_axis.num_tick_marks == 0) return;
  41f466:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
  41f46a:	2b00      	cmp	r3, #0
  41f46c:	d0f8      	beq.n	41f460 <draw_x_ticks+0x9c>
  41f46e:	e7b5      	b.n	41f3dc <draw_x_ticks+0x18>
        major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
  41f470:	4b7f      	ldr	r3, [pc, #508]	; (41f670 <draw_x_ticks+0x2ac>)
  41f472:	fb83 230b 	smull	r2, r3, r3, fp
  41f476:	445b      	add	r3, fp
  41f478:	ea4f 78eb 	mov.w	r8, fp, asr #31
  41f47c:	ebc8 08e3 	rsb	r8, r8, r3, asr #3
  41f480:	fa5f f888 	uxtb.w	r8, r8
  41f484:	e7d7      	b.n	41f436 <draw_x_ticks+0x72>
        minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
  41f486:	ea4f 0348 	mov.w	r3, r8, lsl #1
  41f48a:	4f7a      	ldr	r7, [pc, #488]	; (41f674 <draw_x_ticks+0x2b0>)
  41f48c:	fb87 2703 	smull	r2, r7, r7, r3
  41f490:	eba7 77e3 	sub.w	r7, r7, r3, asr #31
  41f494:	b2ff      	uxtb	r7, r7
  41f496:	e7d2      	b.n	41f43e <draw_x_ticks+0x7a>
    lv_draw_line_dsc_init(&line_dsc);
  41f498:	a853      	add	r0, sp, #332	; 0x14c
  41f49a:	4b77      	ldr	r3, [pc, #476]	; (41f678 <draw_x_ticks+0x2b4>)
  41f49c:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(chart, LV_CHART_PART_BG, &line_dsc);
  41f49e:	aa53      	add	r2, sp, #332	; 0x14c
  41f4a0:	2100      	movs	r1, #0
  41f4a2:	9806      	ldr	r0, [sp, #24]
  41f4a4:	4b75      	ldr	r3, [pc, #468]	; (41f67c <draw_x_ticks+0x2b8>)
  41f4a6:	4798      	blx	r3
    if(ext->type == LV_CHART_TYPE_COLUMN) {
  41f4a8:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
  41f4ac:	2b02      	cmp	r3, #2
  41f4ae:	d024      	beq.n	41f4fa <draw_x_ticks+0x136>
    iter = create_axis_label_iter(ext->x_axis.list_of_values, LV_CHART_LABEL_ITERATOR_FORWARD);
  41f4b0:	ac0a      	add	r4, sp, #40	; 0x28
  41f4b2:	2201      	movs	r2, #1
  41f4b4:	6cb1      	ldr	r1, [r6, #72]	; 0x48
  41f4b6:	4620      	mov	r0, r4
  41f4b8:	4b71      	ldr	r3, [pc, #452]	; (41f680 <draw_x_ticks+0x2bc>)
  41f4ba:	4798      	blx	r3
  41f4bc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  41f4c0:	ab64      	add	r3, sp, #400	; 0x190
  41f4c2:	e903 0007 	stmdb	r3, {r0, r1, r2}
    num_of_labels = iter.items_left;
  41f4c6:	f89d 318c 	ldrb.w	r3, [sp, #396]	; 0x18c
  41f4ca:	4619      	mov	r1, r3
    if(ext->x_axis.num_tick_marks == 0) ext->x_axis.num_tick_marks = 1;
  41f4cc:	f896 304d 	ldrb.w	r3, [r6, #77]	; 0x4d
  41f4d0:	b913      	cbnz	r3, 41f4d8 <draw_x_ticks+0x114>
  41f4d2:	2301      	movs	r3, #1
  41f4d4:	f886 304d 	strb.w	r3, [r6, #77]	; 0x4d
    if(num_of_labels < 2)
  41f4d8:	2901      	cmp	r1, #1
  41f4da:	d92e      	bls.n	41f53a <draw_x_ticks+0x176>
        num_scale_ticks = (ext->x_axis.num_tick_marks * (num_of_labels - 1));
  41f4dc:	f896 304d 	ldrb.w	r3, [r6, #77]	; 0x4d
  41f4e0:	1e4d      	subs	r5, r1, #1
  41f4e2:	fb15 f503 	smulbb	r5, r5, r3
  41f4e6:	b2ed      	uxtb	r5, r5
    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
  41f4e8:	2400      	movs	r4, #0
  41f4ea:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  41f4ee:	9706      	str	r7, [sp, #24]
  41f4f0:	f8dd a020 	ldr.w	sl, [sp, #32]
  41f4f4:	46b0      	mov	r8, r6
  41f4f6:	460e      	mov	r6, r1
  41f4f8:	e059      	b.n	41f5ae <draw_x_ticks+0x1ea>
        uint32_t ser_num = _lv_ll_get_len(&ext->series_ll);
  41f4fa:	4630      	mov	r0, r6
  41f4fc:	4b61      	ldr	r3, [pc, #388]	; (41f684 <draw_x_ticks+0x2c0>)
  41f4fe:	4798      	blx	r3
        lv_coord_t col_w = w / ((ser_num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
  41f500:	1c41      	adds	r1, r0, #1
  41f502:	8c73      	ldrh	r3, [r6, #34]	; 0x22
  41f504:	fb03 f301 	mul.w	r3, r3, r1
  41f508:	fbbb f3f3 	udiv	r3, fp, r3
  41f50c:	b21b      	sxth	r3, r3
        x_ofs += col_w / 2 + (col_w * (ser_num) / 2);
  41f50e:	fb03 f200 	mul.w	r2, r3, r0
  41f512:	0852      	lsrs	r2, r2, #1
  41f514:	4618      	mov	r0, r3
  41f516:	2b00      	cmp	r3, #0
  41f518:	db0d      	blt.n	41f536 <draw_x_ticks+0x172>
  41f51a:	eb02 0260 	add.w	r2, r2, r0, asr #1
  41f51e:	9809      	ldr	r0, [sp, #36]	; 0x24
  41f520:	fa10 fb82 	uxtah	fp, r0, r2
  41f524:	fa0f f28b 	sxth.w	r2, fp
  41f528:	9208      	str	r2, [sp, #32]
        w -= col_w * ser_num + col_w;
  41f52a:	fb11 f303 	smulbb	r3, r1, r3
  41f52e:	1ae4      	subs	r4, r4, r3
  41f530:	fa0f fb84 	sxth.w	fp, r4
  41f534:	e7bc      	b.n	41f4b0 <draw_x_ticks+0xec>
        x_ofs += col_w / 2 + (col_w * (ser_num) / 2);
  41f536:	1c58      	adds	r0, r3, #1
  41f538:	e7ef      	b.n	41f51a <draw_x_ticks+0x156>
        num_scale_ticks = ext->x_axis.num_tick_marks;
  41f53a:	f896 504d 	ldrb.w	r5, [r6, #77]	; 0x4d
  41f53e:	e7d3      	b.n	41f4e8 <draw_x_ticks+0x124>
            p2.y = p1.y + minor_tick_len; /* minor tick */
  41f540:	9b06      	ldr	r3, [sp, #24]
  41f542:	441a      	add	r2, r3
  41f544:	f8ad 217e 	strh.w	r2, [sp, #382]	; 0x17e
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / num_scale_ticks;
  41f548:	f9bd 314e 	ldrsh.w	r3, [sp, #334]	; 0x14e
  41f54c:	ebab 0303 	sub.w	r3, fp, r3
  41f550:	fb03 f300 	mul.w	r3, r3, r0
  41f554:	fb93 f3f1 	sdiv	r3, r3, r1
  41f558:	4453      	add	r3, sl
  41f55a:	b21b      	sxth	r3, r3
  41f55c:	f8ad 3180 	strh.w	r3, [sp, #384]	; 0x180
  41f560:	f8ad 317c 	strh.w	r3, [sp, #380]	; 0x17c
        if(i != num_scale_ticks)
  41f564:	42ac      	cmp	r4, r5
  41f566:	d012      	beq.n	41f58e <draw_x_ticks+0x1ca>
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  41f568:	ab53      	add	r3, sp, #332	; 0x14c
  41f56a:	9a04      	ldr	r2, [sp, #16]
  41f56c:	a95f      	add	r1, sp, #380	; 0x17c
  41f56e:	a860      	add	r0, sp, #384	; 0x180
  41f570:	4f45      	ldr	r7, [pc, #276]	; (41f688 <draw_x_ticks+0x2c4>)
  41f572:	47b8      	blx	r7
        if(num_of_labels != 0) {
  41f574:	b1ce      	cbz	r6, 41f5aa <draw_x_ticks+0x1e6>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41f576:	b1b4      	cbz	r4, 41f5a6 <draw_x_ticks+0x1e2>
  41f578:	f898 204d 	ldrb.w	r2, [r8, #77]	; 0x4d
  41f57c:	fbb4 f3f2 	udiv	r3, r4, r2
  41f580:	fb02 4313 	mls	r3, r2, r3, r4
  41f584:	f013 0fff 	tst.w	r3, #255	; 0xff
  41f588:	d12e      	bne.n	41f5e8 <draw_x_ticks+0x224>
  41f58a:	2301      	movs	r3, #1
  41f58c:	e00c      	b.n	41f5a8 <draw_x_ticks+0x1e4>
        else if((ext->x_axis.options & LV_CHART_AXIS_DRAW_LAST_TICK) != 0)
  41f58e:	f898 304c 	ldrb.w	r3, [r8, #76]	; 0x4c
  41f592:	f013 0f01 	tst.w	r3, #1
  41f596:	d0ed      	beq.n	41f574 <draw_x_ticks+0x1b0>
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  41f598:	ab53      	add	r3, sp, #332	; 0x14c
  41f59a:	9a04      	ldr	r2, [sp, #16]
  41f59c:	a95f      	add	r1, sp, #380	; 0x17c
  41f59e:	a860      	add	r0, sp, #384	; 0x180
  41f5a0:	4f39      	ldr	r7, [pc, #228]	; (41f688 <draw_x_ticks+0x2c4>)
  41f5a2:	47b8      	blx	r7
  41f5a4:	e7e6      	b.n	41f574 <draw_x_ticks+0x1b0>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41f5a6:	2301      	movs	r3, #1
            if(is_tick_with_label(i, &(ext->x_axis))) {
  41f5a8:	bb03      	cbnz	r3, 41f5ec <draw_x_ticks+0x228>
    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
  41f5aa:	3401      	adds	r4, #1
  41f5ac:	b2e4      	uxtb	r4, r4
  41f5ae:	4620      	mov	r0, r4
  41f5b0:	4629      	mov	r1, r5
  41f5b2:	1c6b      	adds	r3, r5, #1
  41f5b4:	429c      	cmp	r4, r3
  41f5b6:	f6bf af53 	bge.w	41f460 <draw_x_ticks+0x9c>
        p1.y = h + y_ofs;
  41f5ba:	9b05      	ldr	r3, [sp, #20]
  41f5bc:	eb09 0203 	add.w	r2, r9, r3
  41f5c0:	b292      	uxth	r2, r2
  41f5c2:	f8ad 2182 	strh.w	r2, [sp, #386]	; 0x182
        if((num_of_labels != 0) && (i == 0 || i % ext->x_axis.num_tick_marks == 0))
  41f5c6:	2e00      	cmp	r6, #0
  41f5c8:	d0ba      	beq.n	41f540 <draw_x_ticks+0x17c>
  41f5ca:	b144      	cbz	r4, 41f5de <draw_x_ticks+0x21a>
  41f5cc:	f898 704d 	ldrb.w	r7, [r8, #77]	; 0x4d
  41f5d0:	fbb4 f3f7 	udiv	r3, r4, r7
  41f5d4:	fb07 4313 	mls	r3, r7, r3, r4
  41f5d8:	f013 0fff 	tst.w	r3, #255	; 0xff
  41f5dc:	d1b0      	bne.n	41f540 <draw_x_ticks+0x17c>
            p2.y = p1.y + major_tick_len; /* major tick */
  41f5de:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41f5e0:	441a      	add	r2, r3
  41f5e2:	f8ad 217e 	strh.w	r2, [sp, #382]	; 0x17e
  41f5e6:	e7af      	b.n	41f548 <draw_x_ticks+0x184>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41f5e8:	2300      	movs	r3, #0
  41f5ea:	e7dd      	b.n	41f5a8 <draw_x_ticks+0x1e4>
                get_next_axis_label(&iter, buf);
  41f5ec:	a912      	add	r1, sp, #72	; 0x48
  41f5ee:	a861      	add	r0, sp, #388	; 0x184
  41f5f0:	4b26      	ldr	r3, [pc, #152]	; (41f68c <draw_x_ticks+0x2c8>)
  41f5f2:	4798      	blx	r3
                _lv_txt_get_size(&size, buf, label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
  41f5f4:	f9bd 3168 	ldrsh.w	r3, [sp, #360]	; 0x168
  41f5f8:	2204      	movs	r2, #4
  41f5fa:	9202      	str	r2, [sp, #8]
  41f5fc:	f647 4218 	movw	r2, #31768	; 0x7c18
  41f600:	9201      	str	r2, [sp, #4]
  41f602:	f9bd 2166 	ldrsh.w	r2, [sp, #358]	; 0x166
  41f606:	9200      	str	r2, [sp, #0]
  41f608:	9a58      	ldr	r2, [sp, #352]	; 0x160
  41f60a:	a912      	add	r1, sp, #72	; 0x48
  41f60c:	a80f      	add	r0, sp, #60	; 0x3c
  41f60e:	4f20      	ldr	r7, [pc, #128]	; (41f690 <draw_x_ticks+0x2cc>)
  41f610:	47b8      	blx	r7
                lv_area_t a = {(p2.x - size.x / 2), (p2.y + label_dist), (p2.x + size.x / 2),
  41f612:	f8bd 117c 	ldrh.w	r1, [sp, #380]	; 0x17c
  41f616:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
  41f61a:	2b00      	cmp	r3, #0
  41f61c:	db1e      	blt.n	41f65c <draw_x_ticks+0x298>
  41f61e:	f3c3 024f 	ubfx	r2, r3, #1, #16
  41f622:	1a8b      	subs	r3, r1, r2
  41f624:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  41f628:	f8bd 317e 	ldrh.w	r3, [sp, #382]	; 0x17e
  41f62c:	f8bd 001c 	ldrh.w	r0, [sp, #28]
  41f630:	181f      	adds	r7, r3, r0
  41f632:	f8ad 7042 	strh.w	r7, [sp, #66]	; 0x42
  41f636:	440a      	add	r2, r1
  41f638:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
                               (p2.y + size.y + label_dist)
  41f63c:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
  41f640:	4413      	add	r3, r2
  41f642:	fa10 f383 	uxtah	r3, r0, r3
                lv_area_t a = {(p2.x - size.x / 2), (p2.y + label_dist), (p2.x + size.x / 2),
  41f646:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                lv_draw_label(&a, mask, &label_dsc, buf, NULL);
  41f64a:	2300      	movs	r3, #0
  41f64c:	9300      	str	r3, [sp, #0]
  41f64e:	ab12      	add	r3, sp, #72	; 0x48
  41f650:	aa56      	add	r2, sp, #344	; 0x158
  41f652:	9904      	ldr	r1, [sp, #16]
  41f654:	a810      	add	r0, sp, #64	; 0x40
  41f656:	4f0f      	ldr	r7, [pc, #60]	; (41f694 <draw_x_ticks+0x2d0>)
  41f658:	47b8      	blx	r7
  41f65a:	e7a6      	b.n	41f5aa <draw_x_ticks+0x1e6>
                lv_area_t a = {(p2.x - size.x / 2), (p2.y + label_dist), (p2.x + size.x / 2),
  41f65c:	3301      	adds	r3, #1
  41f65e:	e7de      	b.n	41f61e <draw_x_ticks+0x25a>
  41f660:	00407ffd 	.word	0x00407ffd
  41f664:	004073ed 	.word	0x004073ed
  41f668:	0040e919 	.word	0x0040e919
  41f66c:	004088d5 	.word	0x004088d5
  41f670:	88888889 	.word	0x88888889
  41f674:	55555556 	.word	0x55555556
  41f678:	0040f769 	.word	0x0040f769
  41f67c:	00408a4d 	.word	0x00408a4d
  41f680:	0041ee05 	.word	0x0041ee05
  41f684:	004172bd 	.word	0x004172bd
  41f688:	0040f785 	.word	0x0040f785
  41f68c:	0041eff9 	.word	0x0041eff9
  41f690:	00418db5 	.word	0x00418db5
  41f694:	0040e961 	.word	0x0040e961

0041f698 <draw_axes>:

static void draw_axes(lv_obj_t * chart, const lv_area_t * series_area, const lv_area_t * mask)
{
  41f698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41f69a:	4604      	mov	r4, r0
  41f69c:	460d      	mov	r5, r1
  41f69e:	4616      	mov	r6, r2
    draw_y_ticks(chart, series_area, mask, LV_CHART_AXIS_PRIMARY_Y);
  41f6a0:	2300      	movs	r3, #0
  41f6a2:	4f06      	ldr	r7, [pc, #24]	; (41f6bc <draw_axes+0x24>)
  41f6a4:	47b8      	blx	r7
    draw_y_ticks(chart, series_area, mask, LV_CHART_AXIS_SECONDARY_Y);
  41f6a6:	2301      	movs	r3, #1
  41f6a8:	4632      	mov	r2, r6
  41f6aa:	4629      	mov	r1, r5
  41f6ac:	4620      	mov	r0, r4
  41f6ae:	47b8      	blx	r7
    draw_x_ticks(chart, series_area, mask);
  41f6b0:	4632      	mov	r2, r6
  41f6b2:	4629      	mov	r1, r5
  41f6b4:	4620      	mov	r0, r4
  41f6b6:	4b02      	ldr	r3, [pc, #8]	; (41f6c0 <draw_axes+0x28>)
  41f6b8:	4798      	blx	r3
  41f6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41f6bc:	0041f079 	.word	0x0041f079
  41f6c0:	0041f3c5 	.word	0x0041f3c5

0041f6c4 <draw_series_column>:
{
  41f6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f6c8:	b0a3      	sub	sp, #140	; 0x8c
  41f6ca:	4604      	mov	r4, r0
  41f6cc:	468a      	mov	sl, r1
  41f6ce:	4615      	mov	r5, r2
    if(_lv_area_intersect(&com_area, series_area, clip_area) == false) return;
  41f6d0:	a820      	add	r0, sp, #128	; 0x80
  41f6d2:	4b68      	ldr	r3, [pc, #416]	; (41f874 <draw_series_column+0x1b0>)
  41f6d4:	4798      	blx	r3
  41f6d6:	b910      	cbnz	r0, 41f6de <draw_series_column+0x1a>
}
  41f6d8:	b023      	add	sp, #140	; 0x8c
  41f6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  41f6de:	4620      	mov	r0, r4
  41f6e0:	4b65      	ldr	r3, [pc, #404]	; (41f878 <draw_series_column+0x1b4>)
  41f6e2:	4798      	blx	r3
  41f6e4:	4607      	mov	r7, r0
  41f6e6:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  41f6ea:	f8ba 2000 	ldrh.w	r2, [sl]
  41f6ee:	1a9b      	subs	r3, r3, r2
  41f6f0:	b29b      	uxth	r3, r3
  41f6f2:	3301      	adds	r3, #1
  41f6f4:	b21b      	sxth	r3, r3
  41f6f6:	461e      	mov	r6, r3
  41f6f8:	9305      	str	r3, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41f6fa:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  41f6fe:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  41f702:	1a9b      	subs	r3, r3, r2
  41f704:	b29b      	uxth	r3, r3
  41f706:	3301      	adds	r3, #1
  41f708:	fa1f fb83 	uxth.w	fp, r3
  41f70c:	fa0f f38b 	sxth.w	r3, fp
  41f710:	9302      	str	r3, [sp, #8]
    lv_coord_t col_w = w / ((_lv_ll_get_len(&ext->series_ll) + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
  41f712:	9000      	str	r0, [sp, #0]
  41f714:	4b59      	ldr	r3, [pc, #356]	; (41f87c <draw_series_column+0x1b8>)
  41f716:	4798      	blx	r3
  41f718:	f8b7 8022 	ldrh.w	r8, [r7, #34]	; 0x22
  41f71c:	fb00 8808 	mla	r8, r0, r8, r8
  41f720:	fbb6 f8f8 	udiv	r8, r6, r8
  41f724:	fa0f f388 	sxth.w	r3, r8
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/
  41f728:	2b00      	cmp	r3, #0
  41f72a:	db26      	blt.n	41f77a <draw_series_column+0xb6>
  41f72c:	105b      	asrs	r3, r3, #1
  41f72e:	9304      	str	r3, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41f730:	2214      	movs	r2, #20
  41f732:	2102      	movs	r1, #2
  41f734:	4620      	mov	r0, r4
  41f736:	4b52      	ldr	r3, [pc, #328]	; (41f880 <draw_series_column+0x1bc>)
  41f738:	4798      	blx	r3
  41f73a:	4681      	mov	r9, r0
    lv_draw_rect_dsc_init(&col_dsc);
  41f73c:	a809      	add	r0, sp, #36	; 0x24
  41f73e:	4b51      	ldr	r3, [pc, #324]	; (41f884 <draw_series_column+0x1c0>)
  41f740:	4798      	blx	r3
    lv_obj_init_draw_rect_dsc(chart, LV_CHART_PART_SERIES, &col_dsc);
  41f742:	aa09      	add	r2, sp, #36	; 0x24
  41f744:	2102      	movs	r1, #2
  41f746:	4620      	mov	r0, r4
  41f748:	4b4f      	ldr	r3, [pc, #316]	; (41f888 <draw_series_column+0x1c4>)
  41f74a:	4798      	blx	r3
    col_dsc.bg_grad_dir = LV_GRAD_DIR_NONE;
  41f74c:	2300      	movs	r3, #0
  41f74e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    col_dsc.bg_opa = LV_OPA_COVER;
  41f752:	23ff      	movs	r3, #255	; 0xff
  41f754:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    col_a.y2 = series_area->y2 + col_dsc.radius;
  41f758:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  41f75c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  41f760:	4413      	add	r3, r2
  41f762:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    bool mask_ret = _lv_area_intersect(&series_mask, series_area, clip_area);
  41f766:	462a      	mov	r2, r5
  41f768:	4651      	mov	r1, sl
  41f76a:	a807      	add	r0, sp, #28
  41f76c:	4b41      	ldr	r3, [pc, #260]	; (41f874 <draw_series_column+0x1b0>)
  41f76e:	4798      	blx	r3
    if(mask_ret == false) return;
  41f770:	2800      	cmp	r0, #0
  41f772:	d0b1      	beq.n	41f6d8 <draw_series_column+0x14>
  41f774:	2300      	movs	r3, #0
  41f776:	9303      	str	r3, [sp, #12]
  41f778:	e063      	b.n	41f842 <draw_series_column+0x17e>
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/
  41f77a:	3301      	adds	r3, #1
  41f77c:	e7d6      	b.n	41f72c <draw_series_column+0x68>
            lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
  41f77e:	2200      	movs	r2, #0
  41f780:	e012      	b.n	41f7a8 <draw_series_column+0xe4>
            x_act += col_w;
  41f782:	462e      	mov	r6, r5
        _LV_LL_READ_BACK(ext->series_ll, ser) {
  41f784:	4621      	mov	r1, r4
  41f786:	9800      	ldr	r0, [sp, #0]
  41f788:	4b40      	ldr	r3, [pc, #256]	; (41f88c <draw_series_column+0x1c8>)
  41f78a:	4798      	blx	r3
  41f78c:	4604      	mov	r4, r0
  41f78e:	2c00      	cmp	r4, #0
  41f790:	d053      	beq.n	41f83a <draw_series_column+0x176>
            if(ser->hidden) continue;
  41f792:	7a23      	ldrb	r3, [r4, #8]
  41f794:	f013 0f02 	tst.w	r3, #2
  41f798:	d1f4      	bne.n	41f784 <draw_series_column+0xc0>
            lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
  41f79a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
  41f79e:	f013 0f01 	tst.w	r3, #1
  41f7a2:	d1ec      	bne.n	41f77e <draw_series_column+0xba>
  41f7a4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
            col_a.x1 = x_act;
  41f7a8:	f8ad 6078 	strh.w	r6, [sp, #120]	; 0x78
            col_a.x2 = col_a.x1 + col_w - col_space;
  41f7ac:	fa18 f586 	uxtah	r5, r8, r6
  41f7b0:	b2ad      	uxth	r5, r5
  41f7b2:	eba5 0309 	sub.w	r3, r5, r9
  41f7b6:	b21b      	sxth	r3, r3
  41f7b8:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            x_act += col_w;
  41f7bc:	b22d      	sxth	r5, r5
            if(col_a.x2 < series_mask.x1) continue;
  41f7be:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
  41f7c2:	428b      	cmp	r3, r1
  41f7c4:	dbdd      	blt.n	41f782 <draw_series_column+0xbe>
            if(col_a.x1 > series_mask.x2) break;
  41f7c6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
  41f7ca:	429e      	cmp	r6, r3
  41f7cc:	dc35      	bgt.n	41f83a <draw_series_column+0x176>
            col_dsc.bg_color = ser->color;
  41f7ce:	88a3      	ldrh	r3, [r4, #4]
  41f7d0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            lv_coord_t p_act = (start_point + i) % ext->point_cnt;
  41f7d4:	9b01      	ldr	r3, [sp, #4]
  41f7d6:	441a      	add	r2, r3
  41f7d8:	8c79      	ldrh	r1, [r7, #34]	; 0x22
  41f7da:	fb92 f3f1 	sdiv	r3, r2, r1
  41f7de:	fb01 2213 	mls	r2, r1, r3, r2
  41f7e2:	b212      	sxth	r2, r2
            y_tmp            = (int32_t)((int32_t)ser->points[p_act] - ext->ymin[ser->y_axis]) * h;
  41f7e4:	6823      	ldr	r3, [r4, #0]
  41f7e6:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
  41f7ea:	7a23      	ldrb	r3, [r4, #8]
  41f7ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
  41f7f0:	330c      	adds	r3, #12
  41f7f2:	f937 0013 	ldrsh.w	r0, [r7, r3, lsl #1]
  41f7f6:	1a09      	subs	r1, r1, r0
  41f7f8:	9e02      	ldr	r6, [sp, #8]
  41f7fa:	fb06 f101 	mul.w	r1, r6, r1
            y_tmp            = y_tmp / (ext->ymax[ser->y_axis] - ext->ymin[ser->y_axis]);
  41f7fe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
  41f802:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  41f806:	1a1b      	subs	r3, r3, r0
  41f808:	fb91 f3f3 	sdiv	r3, r1, r3
            col_a.y1         = h - y_tmp + series_area->y1;
  41f80c:	ebab 0303 	sub.w	r3, fp, r3
  41f810:	f8ba 1002 	ldrh.w	r1, [sl, #2]
  41f814:	fa11 f383 	uxtah	r3, r1, r3
  41f818:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            if(ser->points[p_act] != LV_CHART_POINT_DEF) {
  41f81c:	6823      	ldr	r3, [r4, #0]
  41f81e:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
  41f822:	4b1b      	ldr	r3, [pc, #108]	; (41f890 <draw_series_column+0x1cc>)
  41f824:	429a      	cmp	r2, r3
  41f826:	d006      	beq.n	41f836 <draw_series_column+0x172>
                lv_draw_rect(&col_a, &series_mask, &col_dsc);
  41f828:	aa09      	add	r2, sp, #36	; 0x24
  41f82a:	a907      	add	r1, sp, #28
  41f82c:	a81e      	add	r0, sp, #120	; 0x78
  41f82e:	4b19      	ldr	r3, [pc, #100]	; (41f894 <draw_series_column+0x1d0>)
  41f830:	4798      	blx	r3
            x_act += col_w;
  41f832:	462e      	mov	r6, r5
  41f834:	e7a6      	b.n	41f784 <draw_series_column+0xc0>
  41f836:	462e      	mov	r6, r5
  41f838:	e7a4      	b.n	41f784 <draw_series_column+0xc0>
    for(i = 0; i < ext->point_cnt; i++) {
  41f83a:	9b03      	ldr	r3, [sp, #12]
  41f83c:	3301      	adds	r3, #1
  41f83e:	b29b      	uxth	r3, r3
  41f840:	9303      	str	r3, [sp, #12]
  41f842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
  41f844:	9a03      	ldr	r2, [sp, #12]
  41f846:	429a      	cmp	r2, r3
  41f848:	f4bf af46 	bcs.w	41f6d8 <draw_series_column+0x14>
        lv_coord_t x_act = (int32_t)((int32_t)w * i) / ext->point_cnt;
  41f84c:	9a03      	ldr	r2, [sp, #12]
  41f84e:	9201      	str	r2, [sp, #4]
  41f850:	9905      	ldr	r1, [sp, #20]
  41f852:	fb02 f601 	mul.w	r6, r2, r1
  41f856:	fb96 f3f3 	sdiv	r3, r6, r3
        x_act += series_area->x1 + x_ofs;
  41f85a:	f8ba 6000 	ldrh.w	r6, [sl]
  41f85e:	9a04      	ldr	r2, [sp, #16]
  41f860:	4416      	add	r6, r2
  41f862:	fa13 f686 	uxtah	r6, r3, r6
  41f866:	b236      	sxth	r6, r6
        _LV_LL_READ_BACK(ext->series_ll, ser) {
  41f868:	9800      	ldr	r0, [sp, #0]
  41f86a:	4b0b      	ldr	r3, [pc, #44]	; (41f898 <draw_series_column+0x1d4>)
  41f86c:	4798      	blx	r3
  41f86e:	4604      	mov	r4, r0
  41f870:	e78d      	b.n	41f78e <draw_series_column+0xca>
  41f872:	bf00      	nop
  41f874:	004164e3 	.word	0x004164e3
  41f878:	00407ffd 	.word	0x00407ffd
  41f87c:	004172bd 	.word	0x004172bd
  41f880:	004073ed 	.word	0x004073ed
  41f884:	0041338d 	.word	0x0041338d
  41f888:	004082a5 	.word	0x004082a5
  41f88c:	004170db 	.word	0x004170db
  41f890:	ffff83e8 	.word	0xffff83e8
  41f894:	004133d9 	.word	0x004133d9
  41f898:	004170c3 	.word	0x004170c3

0041f89c <draw_series_line>:
{
  41f89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f8a0:	b0d7      	sub	sp, #348	; 0x15c
  41f8a2:	4604      	mov	r4, r0
  41f8a4:	9108      	str	r1, [sp, #32]
  41f8a6:	9207      	str	r2, [sp, #28]
    if(_lv_area_intersect(&com_area, series_area, clip_area) == false) return;
  41f8a8:	a854      	add	r0, sp, #336	; 0x150
  41f8aa:	4ba1      	ldr	r3, [pc, #644]	; (41fb30 <draw_series_line+0x294>)
  41f8ac:	4798      	blx	r3
  41f8ae:	b910      	cbnz	r0, 41f8b6 <draw_series_line+0x1a>
}
  41f8b0:	b057      	add	sp, #348	; 0x15c
  41f8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  41f8b6:	4620      	mov	r0, r4
  41f8b8:	4b9e      	ldr	r3, [pc, #632]	; (41fb34 <draw_series_line+0x298>)
  41f8ba:	4798      	blx	r3
  41f8bc:	4607      	mov	r7, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41f8be:	9908      	ldr	r1, [sp, #32]
  41f8c0:	888b      	ldrh	r3, [r1, #4]
  41f8c2:	f9b1 2000 	ldrsh.w	r2, [r1]
  41f8c6:	920d      	str	r2, [sp, #52]	; 0x34
  41f8c8:	fa1f f982 	uxth.w	r9, r2
  41f8cc:	eba3 0309 	sub.w	r3, r3, r9
  41f8d0:	b29b      	uxth	r3, r3
  41f8d2:	3301      	adds	r3, #1
  41f8d4:	b21b      	sxth	r3, r3
  41f8d6:	9306      	str	r3, [sp, #24]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41f8d8:	88cb      	ldrh	r3, [r1, #6]
  41f8da:	f8b1 b002 	ldrh.w	fp, [r1, #2]
  41f8de:	eba3 030b 	sub.w	r3, r3, fp
  41f8e2:	b29b      	uxth	r3, r3
  41f8e4:	3301      	adds	r3, #1
  41f8e6:	fa1f fa83 	uxth.w	sl, r3
  41f8ea:	fa0f f38a 	sxth.w	r3, sl
  41f8ee:	930c      	str	r3, [sp, #48]	; 0x30
    bool mask_ret = _lv_area_intersect(&series_mask, series_area, clip_area);
  41f8f0:	9a07      	ldr	r2, [sp, #28]
  41f8f2:	a850      	add	r0, sp, #320	; 0x140
  41f8f4:	4b8e      	ldr	r3, [pc, #568]	; (41fb30 <draw_series_line+0x294>)
  41f8f6:	4798      	blx	r3
    if(mask_ret == false) return;
  41f8f8:	2800      	cmp	r0, #0
  41f8fa:	d0d9      	beq.n	41f8b0 <draw_series_line+0x14>
    lv_draw_line_dsc_init(&line_dsc);
  41f8fc:	a84d      	add	r0, sp, #308	; 0x134
  41f8fe:	4b8e      	ldr	r3, [pc, #568]	; (41fb38 <draw_series_line+0x29c>)
  41f900:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(chart, LV_CHART_PART_SERIES, &line_dsc);
  41f902:	aa4d      	add	r2, sp, #308	; 0x134
  41f904:	2102      	movs	r1, #2
  41f906:	4620      	mov	r0, r4
  41f908:	4b8c      	ldr	r3, [pc, #560]	; (41fb3c <draw_series_line+0x2a0>)
  41f90a:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41f90c:	222c      	movs	r2, #44	; 0x2c
  41f90e:	2102      	movs	r1, #2
  41f910:	4620      	mov	r0, r4
  41f912:	4b8b      	ldr	r3, [pc, #556]	; (41fb40 <draw_series_line+0x2a4>)
  41f914:	4798      	blx	r3
  41f916:	900b      	str	r0, [sp, #44]	; 0x2c
    if(has_area) {
  41f918:	2802      	cmp	r0, #2
  41f91a:	d829      	bhi.n	41f970 <draw_series_line+0xd4>
    bool has_fade = false;
  41f91c:	2300      	movs	r3, #0
  41f91e:	930f      	str	r3, [sp, #60]	; 0x3c
    lv_draw_rect_dsc_init(&point_dsc);
  41f920:	a81d      	add	r0, sp, #116	; 0x74
  41f922:	4b88      	ldr	r3, [pc, #544]	; (41fb44 <draw_series_line+0x2a8>)
  41f924:	4798      	blx	r3
    point_dsc.bg_opa = line_dsc.opa;
  41f926:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
  41f92a:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
    point_dsc.radius = LV_RADIUS_CIRCLE;
  41f92e:	f647 73ff 	movw	r3, #32767	; 0x7fff
  41f932:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41f936:	2203      	movs	r2, #3
  41f938:	2102      	movs	r1, #2
  41f93a:	4620      	mov	r0, r4
  41f93c:	4b82      	ldr	r3, [pc, #520]	; (41fb48 <draw_series_line+0x2ac>)
  41f93e:	4798      	blx	r3
  41f940:	9004      	str	r0, [sp, #16]
    if(point_radius > line_dsc.width / 2) line_dsc.raw_end = 1;
  41f942:	f9bd 3136 	ldrsh.w	r3, [sp, #310]	; 0x136
  41f946:	2b00      	cmp	r3, #0
  41f948:	db36      	blt.n	41f9b8 <draw_series_line+0x11c>
  41f94a:	9a04      	ldr	r2, [sp, #16]
  41f94c:	ebb2 0f63 	cmp.w	r2, r3, asr #1
  41f950:	dd05      	ble.n	41f95e <draw_series_line+0xc2>
  41f952:	f89d 313d 	ldrb.w	r3, [sp, #317]	; 0x13d
  41f956:	f043 0310 	orr.w	r3, r3, #16
  41f95a:	f88d 313d 	strb.w	r3, [sp, #317]	; 0x13d
    _LV_LL_READ_BACK(ext->series_ll, ser) {
  41f95e:	9709      	str	r7, [sp, #36]	; 0x24
  41f960:	4638      	mov	r0, r7
  41f962:	4b7a      	ldr	r3, [pc, #488]	; (41fb4c <draw_series_line+0x2b0>)
  41f964:	4798      	blx	r3
  41f966:	4606      	mov	r6, r0
    int16_t mask_fade_id = LV_MASK_ID_INV;
  41f968:	f04f 33ff 	mov.w	r3, #4294967295
  41f96c:	930e      	str	r3, [sp, #56]	; 0x38
    _LV_LL_READ_BACK(ext->series_ll, ser) {
  41f96e:	e123      	b.n	41fbb8 <draw_series_line+0x31c>
        lv_draw_rect_dsc_init(&area_dsc);
  41f970:	a832      	add	r0, sp, #200	; 0xc8
  41f972:	4b74      	ldr	r3, [pc, #464]	; (41fb44 <draw_series_line+0x2a8>)
  41f974:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(chart, LV_CHART_PART_SERIES, &area_dsc);
  41f976:	aa32      	add	r2, sp, #200	; 0xc8
  41f978:	2102      	movs	r1, #2
  41f97a:	4620      	mov	r0, r4
  41f97c:	4b74      	ldr	r3, [pc, #464]	; (41fb50 <draw_series_line+0x2b4>)
  41f97e:	4798      	blx	r3
        area_dsc.border_width = 0;
  41f980:	2300      	movs	r3, #0
  41f982:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
        has_fade = area_dsc.bg_grad_dir == LV_GRAD_DIR_VER ? true : false;
  41f986:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
  41f98a:	2b01      	cmp	r3, #1
  41f98c:	bf0c      	ite	eq
  41f98e:	2301      	moveq	r3, #1
  41f990:	2300      	movne	r3, #0
  41f992:	930f      	str	r3, [sp, #60]	; 0x3c
        if(has_fade) {
  41f994:	d1c4      	bne.n	41f920 <draw_series_line+0x84>
                                   area_dsc.bg_grad_color_stop, series_area->y2);
  41f996:	f9bd 10d2 	ldrsh.w	r1, [sp, #210]	; 0xd2
            lv_draw_mask_fade_init(&mask_fade_p, series_area, area_dsc.bg_main_color_stop, series_area->y1,
  41f99a:	9d08      	ldr	r5, [sp, #32]
  41f99c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  41f9a0:	f89d 20d0 	ldrb.w	r2, [sp, #208]	; 0xd0
  41f9a4:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
  41f9a8:	9001      	str	r0, [sp, #4]
  41f9aa:	b2c9      	uxtb	r1, r1
  41f9ac:	9100      	str	r1, [sp, #0]
  41f9ae:	4629      	mov	r1, r5
  41f9b0:	a847      	add	r0, sp, #284	; 0x11c
  41f9b2:	4d68      	ldr	r5, [pc, #416]	; (41fb54 <draw_series_line+0x2b8>)
  41f9b4:	47a8      	blx	r5
  41f9b6:	e7b3      	b.n	41f920 <draw_series_line+0x84>
    if(point_radius > line_dsc.width / 2) line_dsc.raw_end = 1;
  41f9b8:	3301      	adds	r3, #1
  41f9ba:	e7c6      	b.n	41f94a <draw_series_line+0xae>
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
  41f9bc:	f04f 0800 	mov.w	r8, #0
  41f9c0:	e112      	b.n	41fbe8 <draw_series_line+0x34c>
                    if(has_fade) mask_fade_id = lv_draw_mask_add(&mask_fade_p, NULL);
  41f9c2:	2100      	movs	r1, #0
  41f9c4:	a847      	add	r0, sp, #284	; 0x11c
  41f9c6:	4b64      	ldr	r3, [pc, #400]	; (41fb58 <draw_series_line+0x2bc>)
  41f9c8:	4798      	blx	r3
  41f9ca:	900e      	str	r0, [sp, #56]	; 0x38
                    lv_draw_rect(&a, &series_mask, &area_dsc);
  41f9cc:	aa32      	add	r2, sp, #200	; 0xc8
  41f9ce:	a950      	add	r1, sp, #320	; 0x140
  41f9d0:	a810      	add	r0, sp, #64	; 0x40
  41f9d2:	4b62      	ldr	r3, [pc, #392]	; (41fb5c <draw_series_line+0x2c0>)
  41f9d4:	4798      	blx	r3
                    lv_draw_mask_remove_id(mask_line_id);
  41f9d6:	4630      	mov	r0, r6
  41f9d8:	4b61      	ldr	r3, [pc, #388]	; (41fb60 <draw_series_line+0x2c4>)
  41f9da:	4798      	blx	r3
                    lv_draw_mask_remove_id(mask_fade_id);
  41f9dc:	980e      	ldr	r0, [sp, #56]	; 0x38
  41f9de:	4b60      	ldr	r3, [pc, #384]	; (41fb60 <draw_series_line+0x2c4>)
  41f9e0:	4798      	blx	r3
            if(point_radius) {
  41f9e2:	9a04      	ldr	r2, [sp, #16]
  41f9e4:	b1e2      	cbz	r2, 41fa20 <draw_series_line+0x184>
                point_area.x2 = point_area.x1 + point_radius;
  41f9e6:	f8bd 314c 	ldrh.w	r3, [sp, #332]	; 0x14c
  41f9ea:	b292      	uxth	r2, r2
  41f9ec:	1899      	adds	r1, r3, r2
  41f9ee:	f8ad 104c 	strh.w	r1, [sp, #76]	; 0x4c
                point_area.x1 -= point_radius;
  41f9f2:	1a9b      	subs	r3, r3, r2
  41f9f4:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
                point_area.y2 = point_area.y1 + point_radius;
  41f9f8:	f8bd 314e 	ldrh.w	r3, [sp, #334]	; 0x14e
  41f9fc:	18d1      	adds	r1, r2, r3
  41f9fe:	f8ad 104e 	strh.w	r1, [sp, #78]	; 0x4e
                point_area.y1 -= point_radius;
  41fa02:	1a9b      	subs	r3, r3, r2
  41fa04:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                if(ser->points[p_act] != LV_CHART_POINT_DEF) {
  41fa08:	9b03      	ldr	r3, [sp, #12]
  41fa0a:	681b      	ldr	r3, [r3, #0]
  41fa0c:	f933 2014 	ldrsh.w	r2, [r3, r4, lsl #1]
  41fa10:	4b54      	ldr	r3, [pc, #336]	; (41fb64 <draw_series_line+0x2c8>)
  41fa12:	429a      	cmp	r2, r3
  41fa14:	d004      	beq.n	41fa20 <draw_series_line+0x184>
                    lv_draw_rect(&point_area, clip_area, &point_dsc);
  41fa16:	aa1d      	add	r2, sp, #116	; 0x74
  41fa18:	9907      	ldr	r1, [sp, #28]
  41fa1a:	a812      	add	r0, sp, #72	; 0x48
  41fa1c:	4b4f      	ldr	r3, [pc, #316]	; (41fb5c <draw_series_line+0x2c0>)
  41fa1e:	4798      	blx	r3
        for(i = 0; i < ext->point_cnt; i++) {
  41fa20:	3501      	adds	r5, #1
  41fa22:	b2ad      	uxth	r5, r5
            p_act = (start_point + i) % ext->point_cnt;
  41fa24:	46a6      	mov	lr, r4
        for(i = 0; i < ext->point_cnt; i++) {
  41fa26:	8c79      	ldrh	r1, [r7, #34]	; 0x22
  41fa28:	428d      	cmp	r5, r1
  41fa2a:	f080 80a1 	bcs.w	41fb70 <draw_series_line+0x2d4>
            p1.x = p2.x;
  41fa2e:	f9bd 3148 	ldrsh.w	r3, [sp, #328]	; 0x148
  41fa32:	f8ad 314c 	strh.w	r3, [sp, #332]	; 0x14c
            p1.y = p2.y;
  41fa36:	f9bd 314a 	ldrsh.w	r3, [sp, #330]	; 0x14a
  41fa3a:	f8ad 314e 	strh.w	r3, [sp, #334]	; 0x14e
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
  41fa3e:	9b06      	ldr	r3, [sp, #24]
  41fa40:	fb05 f303 	mul.w	r3, r5, r3
  41fa44:	1e48      	subs	r0, r1, #1
  41fa46:	fb93 f3f0 	sdiv	r3, r3, r0
  41fa4a:	444b      	add	r3, r9
  41fa4c:	f8ad 3148 	strh.w	r3, [sp, #328]	; 0x148
            p_act = (start_point + i) % ext->point_cnt;
  41fa50:	eb08 0305 	add.w	r3, r8, r5
  41fa54:	fb93 f4f1 	sdiv	r4, r3, r1
  41fa58:	fb01 3414 	mls	r4, r1, r4, r3
  41fa5c:	b224      	sxth	r4, r4
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin[ser->y_axis]) * h;
  41fa5e:	9e03      	ldr	r6, [sp, #12]
  41fa60:	6833      	ldr	r3, [r6, #0]
  41fa62:	f933 1014 	ldrsh.w	r1, [r3, r4, lsl #1]
  41fa66:	7a33      	ldrb	r3, [r6, #8]
  41fa68:	f3c3 0380 	ubfx	r3, r3, #2, #1
  41fa6c:	330c      	adds	r3, #12
  41fa6e:	f937 0013 	ldrsh.w	r0, [r7, r3, lsl #1]
  41fa72:	1a09      	subs	r1, r1, r0
  41fa74:	9a05      	ldr	r2, [sp, #20]
  41fa76:	fb01 f102 	mul.w	r1, r1, r2
            y_tmp = y_tmp / (ext->ymax[ser->y_axis] - ext->ymin[ser->y_axis]);
  41fa7a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
  41fa7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  41fa82:	1a1b      	subs	r3, r3, r0
  41fa84:	fb91 f3f3 	sdiv	r3, r1, r3
            p2.y  = h - y_tmp + y_ofs;
  41fa88:	ebaa 0303 	sub.w	r3, sl, r3
  41fa8c:	fa1b f383 	uxtah	r3, fp, r3
  41fa90:	f8ad 314a 	strh.w	r3, [sp, #330]	; 0x14a
            if(i != 0 && ser->points[p_prev] != LV_CHART_POINT_DEF && ser->points[p_act] != LV_CHART_POINT_DEF) {
  41fa94:	2d00      	cmp	r5, #0
  41fa96:	d0a4      	beq.n	41f9e2 <draw_series_line+0x146>
  41fa98:	6833      	ldr	r3, [r6, #0]
  41fa9a:	f933 101e 	ldrsh.w	r1, [r3, lr, lsl #1]
  41fa9e:	4a31      	ldr	r2, [pc, #196]	; (41fb64 <draw_series_line+0x2c8>)
  41faa0:	4291      	cmp	r1, r2
  41faa2:	d09e      	beq.n	41f9e2 <draw_series_line+0x146>
  41faa4:	f933 2014 	ldrsh.w	r2, [r3, r4, lsl #1]
  41faa8:	4b2e      	ldr	r3, [pc, #184]	; (41fb64 <draw_series_line+0x2c8>)
  41faaa:	429a      	cmp	r2, r3
  41faac:	d099      	beq.n	41f9e2 <draw_series_line+0x146>
                lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
  41faae:	ab4d      	add	r3, sp, #308	; 0x134
  41fab0:	aa50      	add	r2, sp, #320	; 0x140
  41fab2:	a952      	add	r1, sp, #328	; 0x148
  41fab4:	a853      	add	r0, sp, #332	; 0x14c
  41fab6:	4e2c      	ldr	r6, [pc, #176]	; (41fb68 <draw_series_line+0x2cc>)
  41fab8:	47b0      	blx	r6
                lv_coord_t y_top = LV_MATH_MIN(p1.y, p2.y);
  41faba:	f9bd 014a 	ldrsh.w	r0, [sp, #330]	; 0x14a
  41fabe:	f9bd 214e 	ldrsh.w	r2, [sp, #334]	; 0x14e
  41fac2:	4603      	mov	r3, r0
  41fac4:	4290      	cmp	r0, r2
  41fac6:	bfa8      	it	ge
  41fac8:	4613      	movge	r3, r2
  41faca:	4619      	mov	r1, r3
  41facc:	930a      	str	r3, [sp, #40]	; 0x28
                if(has_area && y_top <= clip_area->y2) {
  41face:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  41fad0:	2b02      	cmp	r3, #2
  41fad2:	d986      	bls.n	41f9e2 <draw_series_line+0x146>
  41fad4:	9b07      	ldr	r3, [sp, #28]
  41fad6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  41fada:	4299      	cmp	r1, r3
  41fadc:	dc81      	bgt.n	41f9e2 <draw_series_line+0x146>
                    lv_draw_mask_line_points_init(&mask_line_p, p1.x, p1.y, p2.x, p2.y, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
  41fade:	f9bd 3148 	ldrsh.w	r3, [sp, #328]	; 0x148
  41fae2:	f9bd 114c 	ldrsh.w	r1, [sp, #332]	; 0x14c
  41fae6:	f04f 0e03 	mov.w	lr, #3
  41faea:	f8cd e004 	str.w	lr, [sp, #4]
  41faee:	9000      	str	r0, [sp, #0]
  41faf0:	a812      	add	r0, sp, #72	; 0x48
  41faf2:	4e1e      	ldr	r6, [pc, #120]	; (41fb6c <draw_series_line+0x2d0>)
  41faf4:	47b0      	blx	r6
                    mask_line_id = lv_draw_mask_add(&mask_line_p, NULL);
  41faf6:	2100      	movs	r1, #0
  41faf8:	a812      	add	r0, sp, #72	; 0x48
  41fafa:	4b17      	ldr	r3, [pc, #92]	; (41fb58 <draw_series_line+0x2bc>)
  41fafc:	4798      	blx	r3
  41fafe:	4606      	mov	r6, r0
                    a.x1 = p1.x;
  41fb00:	f9bd 314c 	ldrsh.w	r3, [sp, #332]	; 0x14c
  41fb04:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                    a.x2 = p2.x - 1;
  41fb08:	f8bd 3148 	ldrh.w	r3, [sp, #328]	; 0x148
  41fb0c:	3b01      	subs	r3, #1
  41fb0e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                    a.y1 = y_top;
  41fb12:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  41fb16:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
                    a.y2 = series_area->y2;
  41fb1a:	9b08      	ldr	r3, [sp, #32]
  41fb1c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  41fb20:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                    if(has_fade) mask_fade_id = lv_draw_mask_add(&mask_fade_p, NULL);
  41fb24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  41fb26:	2b00      	cmp	r3, #0
  41fb28:	f43f af50 	beq.w	41f9cc <draw_series_line+0x130>
  41fb2c:	e749      	b.n	41f9c2 <draw_series_line+0x126>
  41fb2e:	bf00      	nop
  41fb30:	004164e3 	.word	0x004164e3
  41fb34:	00407ffd 	.word	0x00407ffd
  41fb38:	0040f769 	.word	0x0040f769
  41fb3c:	00408a4d 	.word	0x00408a4d
  41fb40:	00406e61 	.word	0x00406e61
  41fb44:	0041338d 	.word	0x0041338d
  41fb48:	004073ed 	.word	0x004073ed
  41fb4c:	004170c3 	.word	0x004170c3
  41fb50:	004082a5 	.word	0x004082a5
  41fb54:	00410dc1 	.word	0x00410dc1
  41fb58:	004109a5 	.word	0x004109a5
  41fb5c:	004133d9 	.word	0x004133d9
  41fb60:	00410a29 	.word	0x00410a29
  41fb64:	ffff83e8 	.word	0xffff83e8
  41fb68:	0040f785 	.word	0x0040f785
  41fb6c:	00410ac5 	.word	0x00410ac5
  41fb70:	9e03      	ldr	r6, [sp, #12]
        if(point_radius) {
  41fb72:	9904      	ldr	r1, [sp, #16]
  41fb74:	b1d9      	cbz	r1, 41fbae <draw_series_line+0x312>
            point_area.x2 = point_area.x1 + point_radius;
  41fb76:	f8bd 3148 	ldrh.w	r3, [sp, #328]	; 0x148
  41fb7a:	b289      	uxth	r1, r1
  41fb7c:	1858      	adds	r0, r3, r1
  41fb7e:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
            point_area.x1 -= point_radius;
  41fb82:	1a5b      	subs	r3, r3, r1
  41fb84:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            point_area.y2 = point_area.y1 + point_radius;
  41fb88:	f8bd 314a 	ldrh.w	r3, [sp, #330]	; 0x14a
  41fb8c:	18c8      	adds	r0, r1, r3
  41fb8e:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
            point_area.y1 -= point_radius;
  41fb92:	1a5b      	subs	r3, r3, r1
  41fb94:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            if(ser->points[p_act] != LV_CHART_POINT_DEF) {
  41fb98:	6833      	ldr	r3, [r6, #0]
  41fb9a:	f933 201e 	ldrsh.w	r2, [r3, lr, lsl #1]
  41fb9e:	4b24      	ldr	r3, [pc, #144]	; (41fc30 <draw_series_line+0x394>)
  41fba0:	429a      	cmp	r2, r3
  41fba2:	d004      	beq.n	41fbae <draw_series_line+0x312>
                lv_draw_rect(&point_area, clip_area, &point_dsc);
  41fba4:	aa1d      	add	r2, sp, #116	; 0x74
  41fba6:	9907      	ldr	r1, [sp, #28]
  41fba8:	a812      	add	r0, sp, #72	; 0x48
  41fbaa:	4b22      	ldr	r3, [pc, #136]	; (41fc34 <draw_series_line+0x398>)
  41fbac:	4798      	blx	r3
    _LV_LL_READ_BACK(ext->series_ll, ser) {
  41fbae:	4631      	mov	r1, r6
  41fbb0:	9809      	ldr	r0, [sp, #36]	; 0x24
  41fbb2:	4b21      	ldr	r3, [pc, #132]	; (41fc38 <draw_series_line+0x39c>)
  41fbb4:	4798      	blx	r3
  41fbb6:	4606      	mov	r6, r0
  41fbb8:	2e00      	cmp	r6, #0
  41fbba:	f43f ae79 	beq.w	41f8b0 <draw_series_line+0x14>
        if(ser->hidden) continue;
  41fbbe:	7a33      	ldrb	r3, [r6, #8]
  41fbc0:	f013 0f02 	tst.w	r3, #2
  41fbc4:	d1f3      	bne.n	41fbae <draw_series_line+0x312>
        line_dsc.color = ser->color;
  41fbc6:	88b3      	ldrh	r3, [r6, #4]
  41fbc8:	f8ad 3134 	strh.w	r3, [sp, #308]	; 0x134
        point_dsc.bg_color = ser->color;
  41fbcc:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        area_dsc.bg_color = ser->color;
  41fbd0:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
        area_dsc.bg_grad_color = ser->color;
  41fbd4:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
  41fbd8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
  41fbdc:	f013 0f01 	tst.w	r3, #1
  41fbe0:	f47f aeec 	bne.w	41f9bc <draw_series_line+0x120>
  41fbe4:	f9b6 8006 	ldrsh.w	r8, [r6, #6]
        p1.x = 0 + x_ofs;
  41fbe8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41fbea:	f8ad 314c 	strh.w	r3, [sp, #332]	; 0x14c
        p2.x = 0 + x_ofs;
  41fbee:	f8ad 3148 	strh.w	r3, [sp, #328]	; 0x148
        int32_t y_tmp = (int32_t)((int32_t)ser->points[p_prev] - ext->ymin[ser->y_axis]) * h;
  41fbf2:	6833      	ldr	r3, [r6, #0]
  41fbf4:	f933 3018 	ldrsh.w	r3, [r3, r8, lsl #1]
  41fbf8:	7a32      	ldrb	r2, [r6, #8]
  41fbfa:	f3c2 0280 	ubfx	r2, r2, #2, #1
  41fbfe:	320c      	adds	r2, #12
  41fc00:	f937 1012 	ldrsh.w	r1, [r7, r2, lsl #1]
  41fc04:	1a5b      	subs	r3, r3, r1
  41fc06:	980c      	ldr	r0, [sp, #48]	; 0x30
  41fc08:	9005      	str	r0, [sp, #20]
  41fc0a:	fb00 f303 	mul.w	r3, r0, r3
        y_tmp = y_tmp / (ext->ymax[ser->y_axis] - ext->ymin[ser->y_axis]);
  41fc0e:	eb07 0242 	add.w	r2, r7, r2, lsl #1
  41fc12:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
  41fc16:	1a52      	subs	r2, r2, r1
  41fc18:	fb93 f3f2 	sdiv	r3, r3, r2
        p2.y   = h - y_tmp + y_ofs;
  41fc1c:	ebaa 0303 	sub.w	r3, sl, r3
  41fc20:	fa1b f383 	uxtah	r3, fp, r3
  41fc24:	f8ad 314a 	strh.w	r3, [sp, #330]	; 0x14a
        for(i = 0; i < ext->point_cnt; i++) {
  41fc28:	2500      	movs	r5, #0
  41fc2a:	9603      	str	r6, [sp, #12]
  41fc2c:	46c6      	mov	lr, r8
  41fc2e:	e6fa      	b.n	41fa26 <draw_series_line+0x18a>
  41fc30:	ffff83e8 	.word	0xffff83e8
  41fc34:	004133d9 	.word	0x004133d9
  41fc38:	004170db 	.word	0x004170db

0041fc3c <draw_cursors>:
{
  41fc3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  41fc40:	b09f      	sub	sp, #124	; 0x7c
  41fc42:	4604      	mov	r4, r0
  41fc44:	460d      	mov	r5, r1
  41fc46:	4690      	mov	r8, r2
    bool mask_ret = _lv_area_intersect(&series_mask, series_area, clip_area);
  41fc48:	a81c      	add	r0, sp, #112	; 0x70
  41fc4a:	4b70      	ldr	r3, [pc, #448]	; (41fe0c <draw_cursors+0x1d0>)
  41fc4c:	4798      	blx	r3
    if(mask_ret == false) return;
  41fc4e:	b910      	cbnz	r0, 41fc56 <draw_cursors+0x1a>
}
  41fc50:	b01f      	add	sp, #124	; 0x7c
  41fc52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  41fc56:	4620      	mov	r0, r4
  41fc58:	4b6d      	ldr	r3, [pc, #436]	; (41fe10 <draw_cursors+0x1d4>)
  41fc5a:	4798      	blx	r3
    if(_lv_ll_is_empty(&ext->cursors_ll)) return;
  41fc5c:	f100 060c 	add.w	r6, r0, #12
  41fc60:	4630      	mov	r0, r6
  41fc62:	4b6c      	ldr	r3, [pc, #432]	; (41fe14 <draw_cursors+0x1d8>)
  41fc64:	4798      	blx	r3
  41fc66:	2800      	cmp	r0, #0
  41fc68:	d1f2      	bne.n	41fc50 <draw_cursors+0x14>
    lv_draw_line_dsc_init(&line_dsc);
  41fc6a:	a817      	add	r0, sp, #92	; 0x5c
  41fc6c:	4b6a      	ldr	r3, [pc, #424]	; (41fe18 <draw_cursors+0x1dc>)
  41fc6e:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(chart, LV_CHART_PART_CURSOR, &line_dsc);
  41fc70:	aa17      	add	r2, sp, #92	; 0x5c
  41fc72:	2103      	movs	r1, #3
  41fc74:	4620      	mov	r0, r4
  41fc76:	4b69      	ldr	r3, [pc, #420]	; (41fe1c <draw_cursors+0x1e0>)
  41fc78:	4798      	blx	r3
    lv_draw_rect_dsc_init(&point_dsc);
  41fc7a:	a802      	add	r0, sp, #8
  41fc7c:	4b68      	ldr	r3, [pc, #416]	; (41fe20 <draw_cursors+0x1e4>)
  41fc7e:	4798      	blx	r3
    point_dsc.bg_opa = line_dsc.opa;
  41fc80:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
  41fc84:	f88d 3014 	strb.w	r3, [sp, #20]
    point_dsc.radius = LV_RADIUS_CIRCLE;
  41fc88:	f647 73ff 	movw	r3, #32767	; 0x7fff
  41fc8c:	f8ad 3008 	strh.w	r3, [sp, #8]
  41fc90:	2203      	movs	r2, #3
  41fc92:	4611      	mov	r1, r2
  41fc94:	4620      	mov	r0, r4
  41fc96:	4b63      	ldr	r3, [pc, #396]	; (41fe24 <draw_cursors+0x1e8>)
  41fc98:	4798      	blx	r3
  41fc9a:	4607      	mov	r7, r0
    if(point_radius > line_dsc.width / 2) line_dsc.raw_end = 1;
  41fc9c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
  41fca0:	2b00      	cmp	r3, #0
  41fca2:	db0d      	blt.n	41fcc0 <draw_cursors+0x84>
  41fca4:	ebb7 0f63 	cmp.w	r7, r3, asr #1
  41fca8:	dd05      	ble.n	41fcb6 <draw_cursors+0x7a>
  41fcaa:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
  41fcae:	f043 0310 	orr.w	r3, r3, #16
  41fcb2:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
    _LV_LL_READ_BACK(ext->cursors_ll, cursor) {
  41fcb6:	4630      	mov	r0, r6
  41fcb8:	4b5b      	ldr	r3, [pc, #364]	; (41fe28 <draw_cursors+0x1ec>)
  41fcba:	4798      	blx	r3
  41fcbc:	4604      	mov	r4, r0
  41fcbe:	e06a      	b.n	41fd96 <draw_cursors+0x15a>
    if(point_radius > line_dsc.width / 2) line_dsc.raw_end = 1;
  41fcc0:	3301      	adds	r3, #1
  41fcc2:	e7ef      	b.n	41fca4 <draw_cursors+0x68>
            p1.x = series_area->x1 + cursor->point.x;
  41fcc4:	882b      	ldrh	r3, [r5, #0]
  41fcc6:	8822      	ldrh	r2, [r4, #0]
  41fcc8:	4413      	add	r3, r2
  41fcca:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            p1.y = series_area->y1 + cursor->point.y;
  41fcce:	886b      	ldrh	r3, [r5, #2]
  41fcd0:	8862      	ldrh	r2, [r4, #2]
  41fcd2:	4413      	add	r3, r2
  41fcd4:	b21b      	sxth	r3, r3
  41fcd6:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            p2.x = series_area->x2;
  41fcda:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
  41fcde:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            p2.y = p1.y;
  41fce2:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
  41fce6:	ab17      	add	r3, sp, #92	; 0x5c
  41fce8:	aa1c      	add	r2, sp, #112	; 0x70
  41fcea:	a91a      	add	r1, sp, #104	; 0x68
  41fcec:	a81b      	add	r0, sp, #108	; 0x6c
  41fcee:	f8df 9144 	ldr.w	r9, [pc, #324]	; 41fe34 <draw_cursors+0x1f8>
  41fcf2:	47c8      	blx	r9
  41fcf4:	e05b      	b.n	41fdae <draw_cursors+0x172>
            p1.x = series_area->x1 + cursor->point.x;
  41fcf6:	882b      	ldrh	r3, [r5, #0]
  41fcf8:	8822      	ldrh	r2, [r4, #0]
  41fcfa:	4413      	add	r3, r2
  41fcfc:	b21b      	sxth	r3, r3
  41fcfe:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            p1.y = series_area->y1;
  41fd02:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
  41fd06:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
            p2.x = p1.x;
  41fd0a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            p2.y = series_area->y1 + cursor->point.y;
  41fd0e:	886b      	ldrh	r3, [r5, #2]
  41fd10:	8862      	ldrh	r2, [r4, #2]
  41fd12:	4413      	add	r3, r2
  41fd14:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
  41fd18:	ab17      	add	r3, sp, #92	; 0x5c
  41fd1a:	aa1c      	add	r2, sp, #112	; 0x70
  41fd1c:	a91a      	add	r1, sp, #104	; 0x68
  41fd1e:	a81b      	add	r0, sp, #108	; 0x6c
  41fd20:	f8df 9110 	ldr.w	r9, [pc, #272]	; 41fe34 <draw_cursors+0x1f8>
  41fd24:	47c8      	blx	r9
  41fd26:	e046      	b.n	41fdb6 <draw_cursors+0x17a>
            p1.x = series_area->x1;
  41fd28:	f9b5 2000 	ldrsh.w	r2, [r5]
  41fd2c:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            p1.y = series_area->y1 + cursor->point.y;
  41fd30:	886b      	ldrh	r3, [r5, #2]
  41fd32:	8861      	ldrh	r1, [r4, #2]
  41fd34:	440b      	add	r3, r1
  41fd36:	b21b      	sxth	r3, r3
  41fd38:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            p2.x = p1.x + cursor->point.x;
  41fd3c:	8821      	ldrh	r1, [r4, #0]
  41fd3e:	fa11 f282 	uxtah	r2, r1, r2
  41fd42:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            p2.y = p1.y;
  41fd46:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
  41fd4a:	ab17      	add	r3, sp, #92	; 0x5c
  41fd4c:	aa1c      	add	r2, sp, #112	; 0x70
  41fd4e:	a91a      	add	r1, sp, #104	; 0x68
  41fd50:	a81b      	add	r0, sp, #108	; 0x6c
  41fd52:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 41fe34 <draw_cursors+0x1f8>
  41fd56:	47c8      	blx	r9
  41fd58:	e031      	b.n	41fdbe <draw_cursors+0x182>
            p1.x = series_area->x1 + cursor->point.x;
  41fd5a:	882b      	ldrh	r3, [r5, #0]
  41fd5c:	8822      	ldrh	r2, [r4, #0]
  41fd5e:	4413      	add	r3, r2
  41fd60:	b21b      	sxth	r3, r3
  41fd62:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            p1.y = series_area->y1 + cursor->point.y;
  41fd66:	886a      	ldrh	r2, [r5, #2]
  41fd68:	8861      	ldrh	r1, [r4, #2]
  41fd6a:	440a      	add	r2, r1
  41fd6c:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
            p2.x = p1.x;
  41fd70:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            p2.y = series_area->y2;
  41fd74:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  41fd78:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
  41fd7c:	ab17      	add	r3, sp, #92	; 0x5c
  41fd7e:	aa1c      	add	r2, sp, #112	; 0x70
  41fd80:	a91a      	add	r1, sp, #104	; 0x68
  41fd82:	a81b      	add	r0, sp, #108	; 0x6c
  41fd84:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 41fe34 <draw_cursors+0x1f8>
  41fd88:	47c8      	blx	r9
  41fd8a:	e01c      	b.n	41fdc6 <draw_cursors+0x18a>
    _LV_LL_READ_BACK(ext->cursors_ll, cursor) {
  41fd8c:	4621      	mov	r1, r4
  41fd8e:	4630      	mov	r0, r6
  41fd90:	4b26      	ldr	r3, [pc, #152]	; (41fe2c <draw_cursors+0x1f0>)
  41fd92:	4798      	blx	r3
  41fd94:	4604      	mov	r4, r0
  41fd96:	2c00      	cmp	r4, #0
  41fd98:	f43f af5a 	beq.w	41fc50 <draw_cursors+0x14>
        line_dsc.color = cursor->color;
  41fd9c:	88a3      	ldrh	r3, [r4, #4]
  41fd9e:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
        point_dsc.bg_color = cursor->color;
  41fda2:	f8ad 300a 	strh.w	r3, [sp, #10]
        if(cursor->axes & LV_CHART_CURSOR_RIGHT) {
  41fda6:	79a3      	ldrb	r3, [r4, #6]
  41fda8:	f013 0f01 	tst.w	r3, #1
  41fdac:	d18a      	bne.n	41fcc4 <draw_cursors+0x88>
        if(cursor->axes & LV_CHART_CURSOR_UP) {
  41fdae:	79a3      	ldrb	r3, [r4, #6]
  41fdb0:	f013 0f02 	tst.w	r3, #2
  41fdb4:	d19f      	bne.n	41fcf6 <draw_cursors+0xba>
        if(cursor->axes & LV_CHART_CURSOR_LEFT) {
  41fdb6:	79a3      	ldrb	r3, [r4, #6]
  41fdb8:	f013 0f04 	tst.w	r3, #4
  41fdbc:	d1b4      	bne.n	41fd28 <draw_cursors+0xec>
        if(cursor->axes & LV_CHART_CURSOR_DOWN) {
  41fdbe:	79a3      	ldrb	r3, [r4, #6]
  41fdc0:	f013 0f08 	tst.w	r3, #8
  41fdc4:	d1c9      	bne.n	41fd5a <draw_cursors+0x11e>
        if(point_radius) {
  41fdc6:	2f00      	cmp	r7, #0
  41fdc8:	d0e0      	beq.n	41fd8c <draw_cursors+0x150>
            point_area.x1 = series_area->x1 + cursor->point.x - point_radius;
  41fdca:	882a      	ldrh	r2, [r5, #0]
  41fdcc:	8823      	ldrh	r3, [r4, #0]
  41fdce:	4413      	add	r3, r2
  41fdd0:	b29b      	uxth	r3, r3
  41fdd2:	b2b9      	uxth	r1, r7
  41fdd4:	1a5b      	subs	r3, r3, r1
  41fdd6:	f8ad 3000 	strh.w	r3, [sp]
            point_area.x2 = series_area->x1 + cursor->point.x + point_radius;
  41fdda:	8823      	ldrh	r3, [r4, #0]
  41fddc:	441a      	add	r2, r3
  41fdde:	fa11 f282 	uxtah	r2, r1, r2
  41fde2:	f8ad 2004 	strh.w	r2, [sp, #4]
            point_area.y1 = series_area->y1 + cursor->point.y - point_radius;
  41fde6:	886a      	ldrh	r2, [r5, #2]
  41fde8:	8863      	ldrh	r3, [r4, #2]
  41fdea:	4413      	add	r3, r2
  41fdec:	b29b      	uxth	r3, r3
  41fdee:	1a5b      	subs	r3, r3, r1
  41fdf0:	f8ad 3002 	strh.w	r3, [sp, #2]
            point_area.y2 = series_area->y1 + cursor->point.y + point_radius;
  41fdf4:	8863      	ldrh	r3, [r4, #2]
  41fdf6:	441a      	add	r2, r3
  41fdf8:	fa11 f282 	uxtah	r2, r1, r2
  41fdfc:	f8ad 2006 	strh.w	r2, [sp, #6]
            lv_draw_rect(&point_area, clip_area, &point_dsc);
  41fe00:	aa02      	add	r2, sp, #8
  41fe02:	4641      	mov	r1, r8
  41fe04:	4668      	mov	r0, sp
  41fe06:	4b0a      	ldr	r3, [pc, #40]	; (41fe30 <draw_cursors+0x1f4>)
  41fe08:	4798      	blx	r3
  41fe0a:	e7bf      	b.n	41fd8c <draw_cursors+0x150>
  41fe0c:	004164e3 	.word	0x004164e3
  41fe10:	00407ffd 	.word	0x00407ffd
  41fe14:	00417361 	.word	0x00417361
  41fe18:	0040f769 	.word	0x0040f769
  41fe1c:	00408a4d 	.word	0x00408a4d
  41fe20:	0041338d 	.word	0x0041338d
  41fe24:	004073ed 	.word	0x004073ed
  41fe28:	004170c3 	.word	0x004170c3
  41fe2c:	004170db 	.word	0x004170db
  41fe30:	004133d9 	.word	0x004133d9
  41fe34:	0040f785 	.word	0x0040f785

0041fe38 <lv_chart_signal>:
{
  41fe38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41fe3a:	4607      	mov	r7, r0
  41fe3c:	460c      	mov	r4, r1
  41fe3e:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  41fe40:	2908      	cmp	r1, #8
  41fe42:	d007      	beq.n	41fe54 <lv_chart_signal+0x1c>
    res = ancestor_signal(chart, sign, param);
  41fe44:	4b23      	ldr	r3, [pc, #140]	; (41fed4 <lv_chart_signal+0x9c>)
  41fe46:	681b      	ldr	r3, [r3, #0]
  41fe48:	4798      	blx	r3
  41fe4a:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  41fe4c:	2801      	cmp	r0, #1
  41fe4e:	d010      	beq.n	41fe72 <lv_chart_signal+0x3a>
}
  41fe50:	4630      	mov	r0, r6
  41fe52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        info->result = lv_chart_get_style(chart, info->part);
  41fe54:	7811      	ldrb	r1, [r2, #0]
  41fe56:	4b20      	ldr	r3, [pc, #128]	; (41fed8 <lv_chart_signal+0xa0>)
  41fe58:	4798      	blx	r3
  41fe5a:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  41fe5c:	b108      	cbz	r0, 41fe62 <lv_chart_signal+0x2a>
  41fe5e:	2601      	movs	r6, #1
  41fe60:	e7f6      	b.n	41fe50 <lv_chart_signal+0x18>
        else return ancestor_signal(chart, sign, param);
  41fe62:	4b1c      	ldr	r3, [pc, #112]	; (41fed4 <lv_chart_signal+0x9c>)
  41fe64:	681b      	ldr	r3, [r3, #0]
  41fe66:	462a      	mov	r2, r5
  41fe68:	4621      	mov	r1, r4
  41fe6a:	4638      	mov	r0, r7
  41fe6c:	4798      	blx	r3
  41fe6e:	4606      	mov	r6, r0
  41fe70:	e7ee      	b.n	41fe50 <lv_chart_signal+0x18>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41fe72:	2c07      	cmp	r4, #7
  41fe74:	d005      	beq.n	41fe82 <lv_chart_signal+0x4a>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  41fe76:	4638      	mov	r0, r7
  41fe78:	4b18      	ldr	r3, [pc, #96]	; (41fedc <lv_chart_signal+0xa4>)
  41fe7a:	4798      	blx	r3
  41fe7c:	4605      	mov	r5, r0
    if(sign == LV_SIGNAL_CLEANUP) {
  41fe7e:	b16c      	cbz	r4, 41fe9c <lv_chart_signal+0x64>
  41fe80:	e7e6      	b.n	41fe50 <lv_chart_signal+0x18>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41fe82:	4917      	ldr	r1, [pc, #92]	; (41fee0 <lv_chart_signal+0xa8>)
  41fe84:	4628      	mov	r0, r5
  41fe86:	4b17      	ldr	r3, [pc, #92]	; (41fee4 <lv_chart_signal+0xac>)
  41fe88:	4798      	blx	r3
  41fe8a:	4606      	mov	r6, r0
  41fe8c:	e7e0      	b.n	41fe50 <lv_chart_signal+0x18>
            _lv_ll_remove(&ext->series_ll, ser);
  41fe8e:	4621      	mov	r1, r4
  41fe90:	4628      	mov	r0, r5
  41fe92:	4b15      	ldr	r3, [pc, #84]	; (41fee8 <lv_chart_signal+0xb0>)
  41fe94:	4798      	blx	r3
            lv_mem_free(ser);
  41fe96:	4620      	mov	r0, r4
  41fe98:	4b14      	ldr	r3, [pc, #80]	; (41feec <lv_chart_signal+0xb4>)
  41fe9a:	4798      	blx	r3
        while(ext->series_ll.head != NULL) {
  41fe9c:	686b      	ldr	r3, [r5, #4]
  41fe9e:	b15b      	cbz	r3, 41feb8 <lv_chart_signal+0x80>
            ser = _lv_ll_get_head(&ext->series_ll);
  41fea0:	4628      	mov	r0, r5
  41fea2:	4b13      	ldr	r3, [pc, #76]	; (41fef0 <lv_chart_signal+0xb8>)
  41fea4:	4798      	blx	r3
  41fea6:	4604      	mov	r4, r0
            if(!ser->ext_buf_assigned) lv_mem_free(ser->points);
  41fea8:	7a03      	ldrb	r3, [r0, #8]
  41feaa:	f013 0f01 	tst.w	r3, #1
  41feae:	d1ee      	bne.n	41fe8e <lv_chart_signal+0x56>
  41feb0:	6800      	ldr	r0, [r0, #0]
  41feb2:	4b0e      	ldr	r3, [pc, #56]	; (41feec <lv_chart_signal+0xb4>)
  41feb4:	4798      	blx	r3
  41feb6:	e7ea      	b.n	41fe8e <lv_chart_signal+0x56>
        _lv_ll_clear(&ext->series_ll);
  41feb8:	4628      	mov	r0, r5
  41feba:	4b0e      	ldr	r3, [pc, #56]	; (41fef4 <lv_chart_signal+0xbc>)
  41febc:	4798      	blx	r3
        lv_obj_clean_style_list(chart, LV_CHART_PART_SERIES);
  41febe:	2102      	movs	r1, #2
  41fec0:	4638      	mov	r0, r7
  41fec2:	4c0d      	ldr	r4, [pc, #52]	; (41fef8 <lv_chart_signal+0xc0>)
  41fec4:	47a0      	blx	r4
        lv_obj_clean_style_list(chart, LV_CHART_PART_CURSOR);
  41fec6:	2103      	movs	r1, #3
  41fec8:	4638      	mov	r0, r7
  41feca:	47a0      	blx	r4
        lv_obj_clean_style_list(chart, LV_CHART_PART_SERIES_BG);
  41fecc:	2101      	movs	r1, #1
  41fece:	4638      	mov	r0, r7
  41fed0:	47a0      	blx	r4
  41fed2:	e7bd      	b.n	41fe50 <lv_chart_signal+0x18>
  41fed4:	20414844 	.word	0x20414844
  41fed8:	0041ee45 	.word	0x0041ee45
  41fedc:	00407ffd 	.word	0x00407ffd
  41fee0:	00431cac 	.word	0x00431cac
  41fee4:	00408289 	.word	0x00408289
  41fee8:	00417175 	.word	0x00417175
  41feec:	004175b1 	.word	0x004175b1
  41fef0:	004170b9 	.word	0x004170b9
  41fef4:	0041720d 	.word	0x0041720d
  41fef8:	00405c7d 	.word	0x00405c7d

0041fefc <lv_chart_create>:
{
  41fefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41ff00:	b083      	sub	sp, #12
  41ff02:	9100      	str	r1, [sp, #0]
    lv_obj_t * chart = lv_obj_create(par, copy);
  41ff04:	4b78      	ldr	r3, [pc, #480]	; (4200e8 <lv_chart_create+0x1ec>)
  41ff06:	4798      	blx	r3
  41ff08:	4605      	mov	r5, r0
    LV_ASSERT_MEM(chart);
  41ff0a:	4b78      	ldr	r3, [pc, #480]	; (4200ec <lv_chart_create+0x1f0>)
  41ff0c:	4798      	blx	r3
  41ff0e:	b180      	cbz	r0, 41ff32 <lv_chart_create+0x36>
    if(chart == NULL) return NULL;
  41ff10:	2d00      	cmp	r5, #0
  41ff12:	f000 80e5 	beq.w	4200e0 <lv_chart_create+0x1e4>
    lv_chart_ext_t * ext = lv_obj_allocate_ext_attr(chart, sizeof(lv_chart_ext_t));
  41ff16:	215c      	movs	r1, #92	; 0x5c
  41ff18:	4628      	mov	r0, r5
  41ff1a:	4b75      	ldr	r3, [pc, #468]	; (4200f0 <lv_chart_create+0x1f4>)
  41ff1c:	4798      	blx	r3
  41ff1e:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ext);
  41ff20:	4b72      	ldr	r3, [pc, #456]	; (4200ec <lv_chart_create+0x1f0>)
  41ff22:	4798      	blx	r3
  41ff24:	b958      	cbnz	r0, 41ff3e <lv_chart_create+0x42>
  41ff26:	4622      	mov	r2, r4
  41ff28:	2300      	movs	r3, #0
  41ff2a:	4872      	ldr	r0, [pc, #456]	; (4200f4 <lv_chart_create+0x1f8>)
  41ff2c:	4972      	ldr	r1, [pc, #456]	; (4200f8 <lv_chart_create+0x1fc>)
  41ff2e:	4788      	blx	r1
  41ff30:	e7fe      	b.n	41ff30 <lv_chart_create+0x34>
    LV_ASSERT_MEM(chart);
  41ff32:	462a      	mov	r2, r5
  41ff34:	2300      	movs	r3, #0
  41ff36:	486f      	ldr	r0, [pc, #444]	; (4200f4 <lv_chart_create+0x1f8>)
  41ff38:	496f      	ldr	r1, [pc, #444]	; (4200f8 <lv_chart_create+0x1fc>)
  41ff3a:	4788      	blx	r1
  41ff3c:	e7fe      	b.n	41ff3c <lv_chart_create+0x40>
    if(ext == NULL) {
  41ff3e:	b14c      	cbz	r4, 41ff54 <lv_chart_create+0x58>
    _lv_ll_init(&ext->series_ll, sizeof(lv_chart_series_t));
  41ff40:	210c      	movs	r1, #12
  41ff42:	4620      	mov	r0, r4
  41ff44:	4e6d      	ldr	r6, [pc, #436]	; (4200fc <lv_chart_create+0x200>)
  41ff46:	47b0      	blx	r6
    _lv_ll_init(&ext->cursors_ll, sizeof(lv_chart_cursor_t));
  41ff48:	2108      	movs	r1, #8
  41ff4a:	f104 000c 	add.w	r0, r4, #12
  41ff4e:	47b0      	blx	r6
    for(i = 0; i < _LV_CHART_AXIS_LAST; i++) {
  41ff50:	2300      	movs	r3, #0
  41ff52:	e00f      	b.n	41ff74 <lv_chart_create+0x78>
        lv_obj_del(chart);
  41ff54:	4628      	mov	r0, r5
  41ff56:	4b6a      	ldr	r3, [pc, #424]	; (420100 <lv_chart_create+0x204>)
  41ff58:	4798      	blx	r3
        return NULL;
  41ff5a:	2500      	movs	r5, #0
  41ff5c:	e0c0      	b.n	4200e0 <lv_chart_create+0x1e4>
        ext->ymin[i]                  = LV_CHART_YMIN_DEF;
  41ff5e:	f103 020c 	add.w	r2, r3, #12
  41ff62:	2100      	movs	r1, #0
  41ff64:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
        ext->ymax[i]                  = LV_CHART_YMAX_DEF;
  41ff68:	eb04 0242 	add.w	r2, r4, r2, lsl #1
  41ff6c:	2164      	movs	r1, #100	; 0x64
  41ff6e:	8091      	strh	r1, [r2, #4]
    for(i = 0; i < _LV_CHART_AXIS_LAST; i++) {
  41ff70:	3301      	adds	r3, #1
  41ff72:	b2db      	uxtb	r3, r3
  41ff74:	2b01      	cmp	r3, #1
  41ff76:	d9f2      	bls.n	41ff5e <lv_chart_create+0x62>
    ext->hdiv_cnt              = LV_CHART_HDIV_DEF;
  41ff78:	2303      	movs	r3, #3
  41ff7a:	f884 3020 	strb.w	r3, [r4, #32]
    ext->vdiv_cnt              = LV_CHART_VDIV_DEF;
  41ff7e:	2305      	movs	r3, #5
  41ff80:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    ext->point_cnt             = LV_CHART_PNUM_DEF;
  41ff84:	230a      	movs	r3, #10
  41ff86:	8463      	strh	r3, [r4, #34]	; 0x22
    ext->type                  = LV_CHART_TYPE_LINE;
  41ff88:	2301      	movs	r3, #1
  41ff8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    ext->update_mode           = LV_CHART_UPDATE_MODE_SHIFT;
  41ff8e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
  41ff92:	f36f 0300 	bfc	r3, #0, #1
  41ff96:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    _lv_memset_00(&ext->x_axis, sizeof(ext->x_axis));
  41ff9a:	f104 0948 	add.w	r9, r4, #72	; 0x48
  41ff9e:	2108      	movs	r1, #8
  41ffa0:	4648      	mov	r0, r9
  41ffa2:	4e58      	ldr	r6, [pc, #352]	; (420104 <lv_chart_create+0x208>)
  41ffa4:	47b0      	blx	r6
    _lv_memset_00(&ext->y_axis, sizeof(ext->y_axis));
  41ffa6:	f104 0840 	add.w	r8, r4, #64	; 0x40
  41ffaa:	2108      	movs	r1, #8
  41ffac:	4640      	mov	r0, r8
  41ffae:	47b0      	blx	r6
    _lv_memset_00(&ext->secondary_y_axis, sizeof(ext->secondary_y_axis));
  41ffb0:	f104 0350 	add.w	r3, r4, #80	; 0x50
  41ffb4:	9301      	str	r3, [sp, #4]
  41ffb6:	2108      	movs	r1, #8
  41ffb8:	4618      	mov	r0, r3
  41ffba:	47b0      	blx	r6
    ext->x_axis.major_tick_len = LV_CHART_TICK_LENGTH_AUTO;
  41ffbc:	23ff      	movs	r3, #255	; 0xff
  41ffbe:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
    ext->x_axis.minor_tick_len = LV_CHART_TICK_LENGTH_AUTO;
  41ffc2:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
    ext->y_axis.major_tick_len = LV_CHART_TICK_LENGTH_AUTO;
  41ffc6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    ext->y_axis.minor_tick_len = LV_CHART_TICK_LENGTH_AUTO;
  41ffca:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
    ext->secondary_y_axis.major_tick_len = LV_CHART_TICK_LENGTH_AUTO;
  41ffce:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
    ext->secondary_y_axis.minor_tick_len = LV_CHART_TICK_LENGTH_AUTO;
  41ffd2:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
    lv_style_list_init(&ext->style_series_bg);
  41ffd6:	f104 0b24 	add.w	fp, r4, #36	; 0x24
  41ffda:	4658      	mov	r0, fp
  41ffdc:	4e4a      	ldr	r6, [pc, #296]	; (420108 <lv_chart_create+0x20c>)
  41ffde:	47b0      	blx	r6
    lv_style_list_init(&ext->style_series);
  41ffe0:	f104 072c 	add.w	r7, r4, #44	; 0x2c
  41ffe4:	4638      	mov	r0, r7
  41ffe6:	47b0      	blx	r6
    lv_style_list_init(&ext->style_cursors);
  41ffe8:	f104 0a34 	add.w	sl, r4, #52	; 0x34
  41ffec:	4650      	mov	r0, sl
  41ffee:	47b0      	blx	r6
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(chart);
  41fff0:	4b46      	ldr	r3, [pc, #280]	; (42010c <lv_chart_create+0x210>)
  41fff2:	681b      	ldr	r3, [r3, #0]
  41fff4:	2b00      	cmp	r3, #0
  41fff6:	d033      	beq.n	420060 <lv_chart_create+0x164>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(chart);
  41fff8:	4b45      	ldr	r3, [pc, #276]	; (420110 <lv_chart_create+0x214>)
  41fffa:	681b      	ldr	r3, [r3, #0]
  41fffc:	2b00      	cmp	r3, #0
  41fffe:	d035      	beq.n	42006c <lv_chart_create+0x170>
    lv_obj_set_signal_cb(chart, lv_chart_signal);
  420000:	4944      	ldr	r1, [pc, #272]	; (420114 <lv_chart_create+0x218>)
  420002:	4628      	mov	r0, r5
  420004:	4b44      	ldr	r3, [pc, #272]	; (420118 <lv_chart_create+0x21c>)
  420006:	4798      	blx	r3
    lv_obj_set_design_cb(chart, lv_chart_design);
  420008:	4944      	ldr	r1, [pc, #272]	; (42011c <lv_chart_create+0x220>)
  42000a:	4628      	mov	r0, r5
  42000c:	4b44      	ldr	r3, [pc, #272]	; (420120 <lv_chart_create+0x224>)
  42000e:	4798      	blx	r3
    if(copy == NULL) {
  420010:	9b00      	ldr	r3, [sp, #0]
  420012:	2b00      	cmp	r3, #0
  420014:	d030      	beq.n	420078 <lv_chart_create+0x17c>
        lv_chart_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
  420016:	9800      	ldr	r0, [sp, #0]
  420018:	4b42      	ldr	r3, [pc, #264]	; (420124 <lv_chart_create+0x228>)
  42001a:	4798      	blx	r3
  42001c:	4606      	mov	r6, r0
        lv_style_list_copy(&ext->style_series, &ext_copy->style_series);
  42001e:	f100 012c 	add.w	r1, r0, #44	; 0x2c
  420022:	4638      	mov	r0, r7
  420024:	4f40      	ldr	r7, [pc, #256]	; (420128 <lv_chart_create+0x22c>)
  420026:	47b8      	blx	r7
        lv_style_list_copy(&ext->style_series_bg, &ext_copy->style_series_bg);
  420028:	f106 0124 	add.w	r1, r6, #36	; 0x24
  42002c:	4658      	mov	r0, fp
  42002e:	47b8      	blx	r7
        lv_style_list_copy(&ext->style_cursors, &ext_copy->style_cursors);
  420030:	f106 0134 	add.w	r1, r6, #52	; 0x34
  420034:	4650      	mov	r0, sl
  420036:	47b8      	blx	r7
        ext->type       = ext_copy->type;
  420038:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
  42003c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        ext->hdiv_cnt   = ext_copy->hdiv_cnt;
  420040:	f896 3020 	ldrb.w	r3, [r6, #32]
  420044:	f884 3020 	strb.w	r3, [r4, #32]
        ext->vdiv_cnt   = ext_copy->vdiv_cnt;
  420048:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  42004c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        ext->point_cnt  = ext_copy->point_cnt;
  420050:	8c73      	ldrh	r3, [r6, #34]	; 0x22
  420052:	8463      	strh	r3, [r4, #34]	; 0x22
        _lv_memcpy_small(ext->ymin, ext_copy->ymin, sizeof(ext->ymin));
  420054:	f106 0118 	add.w	r1, r6, #24
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  420058:	f104 0218 	add.w	r2, r4, #24
  42005c:	2304      	movs	r3, #4
  42005e:	e01c      	b.n	42009a <lv_chart_create+0x19e>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(chart);
  420060:	4628      	mov	r0, r5
  420062:	4b32      	ldr	r3, [pc, #200]	; (42012c <lv_chart_create+0x230>)
  420064:	4798      	blx	r3
  420066:	4b29      	ldr	r3, [pc, #164]	; (42010c <lv_chart_create+0x210>)
  420068:	6018      	str	r0, [r3, #0]
  42006a:	e7c5      	b.n	41fff8 <lv_chart_create+0xfc>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(chart);
  42006c:	4628      	mov	r0, r5
  42006e:	4b30      	ldr	r3, [pc, #192]	; (420130 <lv_chart_create+0x234>)
  420070:	4798      	blx	r3
  420072:	4b27      	ldr	r3, [pc, #156]	; (420110 <lv_chart_create+0x214>)
  420074:	6018      	str	r0, [r3, #0]
  420076:	e7c3      	b.n	420000 <lv_chart_create+0x104>
        lv_obj_set_size(chart, LV_DPI * 3, LV_DPI * 2);
  420078:	f44f 7294 	mov.w	r2, #296	; 0x128
  42007c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
  420080:	4628      	mov	r0, r5
  420082:	4b2c      	ldr	r3, [pc, #176]	; (420134 <lv_chart_create+0x238>)
  420084:	4798      	blx	r3
        lv_theme_apply(chart, LV_THEME_CHART);
  420086:	210a      	movs	r1, #10
  420088:	4628      	mov	r0, r5
  42008a:	4b2b      	ldr	r3, [pc, #172]	; (420138 <lv_chart_create+0x23c>)
  42008c:	4798      	blx	r3
  42008e:	e027      	b.n	4200e0 <lv_chart_create+0x1e4>
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  420090:	f811 0b01 	ldrb.w	r0, [r1], #1
  420094:	f802 0b01 	strb.w	r0, [r2], #1
        d8++;
        s8++;
        len--;
  420098:	3b01      	subs	r3, #1
    while(len) {
  42009a:	2b00      	cmp	r3, #0
  42009c:	d1f8      	bne.n	420090 <lv_chart_create+0x194>
        _lv_memcpy_small(ext->ymax, ext_copy->ymax, sizeof(ext->ymax));
  42009e:	f106 021c 	add.w	r2, r6, #28
    uint8_t * d8 = (uint8_t *)dst;
  4200a2:	341c      	adds	r4, #28
  4200a4:	2304      	movs	r3, #4
  4200a6:	e004      	b.n	4200b2 <lv_chart_create+0x1b6>
        *d8 = *s8;
  4200a8:	f812 1b01 	ldrb.w	r1, [r2], #1
  4200ac:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  4200b0:	3b01      	subs	r3, #1
    while(len) {
  4200b2:	2b00      	cmp	r3, #0
  4200b4:	d1f8      	bne.n	4200a8 <lv_chart_create+0x1ac>
        _lv_memcpy(&ext->x_axis, &ext_copy->x_axis, sizeof(lv_chart_axis_cfg_t));
  4200b6:	2208      	movs	r2, #8
  4200b8:	f106 0148 	add.w	r1, r6, #72	; 0x48
  4200bc:	4648      	mov	r0, r9
  4200be:	4c1f      	ldr	r4, [pc, #124]	; (42013c <lv_chart_create+0x240>)
  4200c0:	47a0      	blx	r4
        _lv_memcpy(&ext->y_axis, &ext_copy->y_axis, sizeof(lv_chart_axis_cfg_t));
  4200c2:	2208      	movs	r2, #8
  4200c4:	f106 0140 	add.w	r1, r6, #64	; 0x40
  4200c8:	4640      	mov	r0, r8
  4200ca:	47a0      	blx	r4
        _lv_memcpy(&ext->secondary_y_axis, &ext_copy->secondary_y_axis, sizeof(lv_chart_axis_cfg_t));
  4200cc:	2208      	movs	r2, #8
  4200ce:	f106 0150 	add.w	r1, r6, #80	; 0x50
  4200d2:	9801      	ldr	r0, [sp, #4]
  4200d4:	47a0      	blx	r4
        lv_obj_refresh_style(chart, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  4200d6:	22ff      	movs	r2, #255	; 0xff
  4200d8:	4611      	mov	r1, r2
  4200da:	4628      	mov	r0, r5
  4200dc:	4b18      	ldr	r3, [pc, #96]	; (420140 <lv_chart_create+0x244>)
  4200de:	4798      	blx	r3
}
  4200e0:	4628      	mov	r0, r5
  4200e2:	b003      	add	sp, #12
  4200e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4200e8:	004067bd 	.word	0x004067bd
  4200ec:	00416da9 	.word	0x00416da9
  4200f0:	004058e9 	.word	0x004058e9
  4200f4:	0042e54c 	.word	0x0042e54c
  4200f8:	00416db5 	.word	0x00416db5
  4200fc:	0041700f 	.word	0x0041700f
  420100:	0040815d 	.word	0x0040815d
  420104:	00417a21 	.word	0x00417a21
  420108:	00409d49 	.word	0x00409d49
  42010c:	20414840 	.word	0x20414840
  420110:	20414844 	.word	0x20414844
  420114:	0041fe39 	.word	0x0041fe39
  420118:	00405885 	.word	0x00405885
  42011c:	00420389 	.word	0x00420389
  420120:	004058c1 	.word	0x004058c1
  420124:	00407ffd 	.word	0x00407ffd
  420128:	0040ac25 	.word	0x0040ac25
  42012c:	00407fd5 	.word	0x00407fd5
  420130:	00407fad 	.word	0x00407fad
  420134:	00406be1 	.word	0x00406be1
  420138:	004192a5 	.word	0x004192a5
  42013c:	004176fd 	.word	0x004176fd
  420140:	00407809 	.word	0x00407809

00420144 <lv_chart_add_series>:
{
  420144:	b570      	push	{r4, r5, r6, lr}
  420146:	4604      	mov	r4, r0
  420148:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  42014a:	4b24      	ldr	r3, [pc, #144]	; (4201dc <lv_chart_add_series+0x98>)
  42014c:	4798      	blx	r3
  42014e:	b928      	cbnz	r0, 42015c <lv_chart_add_series+0x18>
  420150:	4622      	mov	r2, r4
  420152:	2300      	movs	r3, #0
  420154:	4822      	ldr	r0, [pc, #136]	; (4201e0 <lv_chart_add_series+0x9c>)
  420156:	4923      	ldr	r1, [pc, #140]	; (4201e4 <lv_chart_add_series+0xa0>)
  420158:	4788      	blx	r1
  42015a:	e7fe      	b.n	42015a <lv_chart_add_series+0x16>
    lv_chart_ext_t * ext    = lv_obj_get_ext_attr(chart);
  42015c:	4620      	mov	r0, r4
  42015e:	4b22      	ldr	r3, [pc, #136]	; (4201e8 <lv_chart_add_series+0xa4>)
  420160:	4798      	blx	r3
  420162:	4605      	mov	r5, r0
    lv_chart_series_t * ser = _lv_ll_ins_head(&ext->series_ll);
  420164:	4b21      	ldr	r3, [pc, #132]	; (4201ec <lv_chart_add_series+0xa8>)
  420166:	4798      	blx	r3
  420168:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ser);
  42016a:	4b1c      	ldr	r3, [pc, #112]	; (4201dc <lv_chart_add_series+0x98>)
  42016c:	4798      	blx	r3
  42016e:	b1a8      	cbz	r0, 42019c <lv_chart_add_series+0x58>
    if(ser == NULL) return NULL;
  420170:	b194      	cbz	r4, 420198 <lv_chart_add_series+0x54>
    ser->color  = color;
  420172:	80a6      	strh	r6, [r4, #4]
    ser->points = lv_mem_alloc(sizeof(lv_coord_t) * ext->point_cnt);
  420174:	8c68      	ldrh	r0, [r5, #34]	; 0x22
  420176:	0040      	lsls	r0, r0, #1
  420178:	4b1d      	ldr	r3, [pc, #116]	; (4201f0 <lv_chart_add_series+0xac>)
  42017a:	4798      	blx	r3
  42017c:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(ser->points);
  42017e:	4b17      	ldr	r3, [pc, #92]	; (4201dc <lv_chart_add_series+0x98>)
  420180:	4798      	blx	r3
  420182:	b188      	cbz	r0, 4201a8 <lv_chart_add_series+0x64>
    if(ser->points == NULL) {
  420184:	6821      	ldr	r1, [r4, #0]
  420186:	b9a9      	cbnz	r1, 4201b4 <lv_chart_add_series+0x70>
        _lv_ll_remove(&ext->series_ll, ser);
  420188:	4621      	mov	r1, r4
  42018a:	4628      	mov	r0, r5
  42018c:	4b19      	ldr	r3, [pc, #100]	; (4201f4 <lv_chart_add_series+0xb0>)
  42018e:	4798      	blx	r3
        lv_mem_free(ser);
  420190:	4620      	mov	r0, r4
  420192:	4b19      	ldr	r3, [pc, #100]	; (4201f8 <lv_chart_add_series+0xb4>)
  420194:	4798      	blx	r3
        return NULL;
  420196:	2400      	movs	r4, #0
}
  420198:	4620      	mov	r0, r4
  42019a:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(ser);
  42019c:	4622      	mov	r2, r4
  42019e:	2300      	movs	r3, #0
  4201a0:	4816      	ldr	r0, [pc, #88]	; (4201fc <lv_chart_add_series+0xb8>)
  4201a2:	4910      	ldr	r1, [pc, #64]	; (4201e4 <lv_chart_add_series+0xa0>)
  4201a4:	4788      	blx	r1
  4201a6:	e7fe      	b.n	4201a6 <lv_chart_add_series+0x62>
    LV_ASSERT_MEM(ser->points);
  4201a8:	6822      	ldr	r2, [r4, #0]
  4201aa:	2300      	movs	r3, #0
  4201ac:	4813      	ldr	r0, [pc, #76]	; (4201fc <lv_chart_add_series+0xb8>)
  4201ae:	490d      	ldr	r1, [pc, #52]	; (4201e4 <lv_chart_add_series+0xa0>)
  4201b0:	4788      	blx	r1
  4201b2:	e7fe      	b.n	4201b2 <lv_chart_add_series+0x6e>
    ser->start_point = 0;
  4201b4:	2300      	movs	r3, #0
  4201b6:	80e3      	strh	r3, [r4, #6]
    ser->ext_buf_assigned = false;
  4201b8:	7a22      	ldrb	r2, [r4, #8]
    ser->y_axis = LV_CHART_AXIS_PRIMARY_Y;
  4201ba:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
  4201be:	f363 0282 	bfi	r2, r3, #2, #1
  4201c2:	7222      	strb	r2, [r4, #8]
    for(i = 0; i < ext->point_cnt; i++) {
  4201c4:	e005      	b.n	4201d2 <lv_chart_add_series+0x8e>
        *p_tmp = def;
  4201c6:	f248 32e8 	movw	r2, #33768	; 0x83e8
  4201ca:	f821 2b02 	strh.w	r2, [r1], #2
    for(i = 0; i < ext->point_cnt; i++) {
  4201ce:	3301      	adds	r3, #1
  4201d0:	b29b      	uxth	r3, r3
  4201d2:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
  4201d4:	4293      	cmp	r3, r2
  4201d6:	d3f6      	bcc.n	4201c6 <lv_chart_add_series+0x82>
  4201d8:	e7de      	b.n	420198 <lv_chart_add_series+0x54>
  4201da:	bf00      	nop
  4201dc:	00416da9 	.word	0x00416da9
  4201e0:	0042e560 	.word	0x0042e560
  4201e4:	00416db5 	.word	0x00416db5
  4201e8:	00407ffd 	.word	0x00407ffd
  4201ec:	00417021 	.word	0x00417021
  4201f0:	004174ed 	.word	0x004174ed
  4201f4:	00417175 	.word	0x00417175
  4201f8:	004175b1 	.word	0x004175b1
  4201fc:	0042e54c 	.word	0x0042e54c

00420200 <lv_chart_set_div_line_count>:
{
  420200:	b570      	push	{r4, r5, r6, lr}
  420202:	4604      	mov	r4, r0
  420204:	460e      	mov	r6, r1
  420206:	4615      	mov	r5, r2
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  420208:	4b0e      	ldr	r3, [pc, #56]	; (420244 <lv_chart_set_div_line_count+0x44>)
  42020a:	4798      	blx	r3
  42020c:	b928      	cbnz	r0, 42021a <lv_chart_set_div_line_count+0x1a>
  42020e:	4622      	mov	r2, r4
  420210:	2300      	movs	r3, #0
  420212:	480d      	ldr	r0, [pc, #52]	; (420248 <lv_chart_set_div_line_count+0x48>)
  420214:	490d      	ldr	r1, [pc, #52]	; (42024c <lv_chart_set_div_line_count+0x4c>)
  420216:	4788      	blx	r1
  420218:	e7fe      	b.n	420218 <lv_chart_set_div_line_count+0x18>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  42021a:	4620      	mov	r0, r4
  42021c:	4b0c      	ldr	r3, [pc, #48]	; (420250 <lv_chart_set_div_line_count+0x50>)
  42021e:	4798      	blx	r3
    if(ext->hdiv_cnt == hdiv && ext->vdiv_cnt == vdiv) return;
  420220:	f890 3020 	ldrb.w	r3, [r0, #32]
  420224:	42b3      	cmp	r3, r6
  420226:	d007      	beq.n	420238 <lv_chart_set_div_line_count+0x38>
    ext->hdiv_cnt = hdiv;
  420228:	f880 6020 	strb.w	r6, [r0, #32]
    ext->vdiv_cnt = vdiv;
  42022c:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
    lv_obj_invalidate(chart);
  420230:	4620      	mov	r0, r4
  420232:	4b08      	ldr	r3, [pc, #32]	; (420254 <lv_chart_set_div_line_count+0x54>)
  420234:	4798      	blx	r3
  420236:	bd70      	pop	{r4, r5, r6, pc}
    if(ext->hdiv_cnt == hdiv && ext->vdiv_cnt == vdiv) return;
  420238:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
  42023c:	42ab      	cmp	r3, r5
  42023e:	d1f3      	bne.n	420228 <lv_chart_set_div_line_count+0x28>
  420240:	e7f9      	b.n	420236 <lv_chart_set_div_line_count+0x36>
  420242:	bf00      	nop
  420244:	00416da9 	.word	0x00416da9
  420248:	0042e560 	.word	0x0042e560
  42024c:	00416db5 	.word	0x00416db5
  420250:	00407ffd 	.word	0x00407ffd
  420254:	00405f01 	.word	0x00405f01

00420258 <lv_chart_set_update_mode>:
{
  420258:	b538      	push	{r3, r4, r5, lr}
  42025a:	4604      	mov	r4, r0
  42025c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  42025e:	4b0e      	ldr	r3, [pc, #56]	; (420298 <lv_chart_set_update_mode+0x40>)
  420260:	4798      	blx	r3
  420262:	b928      	cbnz	r0, 420270 <lv_chart_set_update_mode+0x18>
  420264:	4622      	mov	r2, r4
  420266:	2300      	movs	r3, #0
  420268:	480c      	ldr	r0, [pc, #48]	; (42029c <lv_chart_set_update_mode+0x44>)
  42026a:	490d      	ldr	r1, [pc, #52]	; (4202a0 <lv_chart_set_update_mode+0x48>)
  42026c:	4788      	blx	r1
  42026e:	e7fe      	b.n	42026e <lv_chart_set_update_mode+0x16>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  420270:	4620      	mov	r0, r4
  420272:	4b0c      	ldr	r3, [pc, #48]	; (4202a4 <lv_chart_set_update_mode+0x4c>)
  420274:	4798      	blx	r3
    if(ext->update_mode == update_mode) return;
  420276:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  42027a:	f003 0301 	and.w	r3, r3, #1
  42027e:	42ab      	cmp	r3, r5
  420280:	d008      	beq.n	420294 <lv_chart_set_update_mode+0x3c>
    ext->update_mode = update_mode;
  420282:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  420286:	f365 0300 	bfi	r3, r5, #0, #1
  42028a:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    lv_obj_invalidate(chart);
  42028e:	4620      	mov	r0, r4
  420290:	4b05      	ldr	r3, [pc, #20]	; (4202a8 <lv_chart_set_update_mode+0x50>)
  420292:	4798      	blx	r3
  420294:	bd38      	pop	{r3, r4, r5, pc}
  420296:	bf00      	nop
  420298:	00416da9 	.word	0x00416da9
  42029c:	0042e560 	.word	0x0042e560
  4202a0:	00416db5 	.word	0x00416db5
  4202a4:	00407ffd 	.word	0x00407ffd
  4202a8:	00405f01 	.word	0x00405f01

004202ac <lv_chart_set_ext_array>:
{
  4202ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4202ae:	4605      	mov	r5, r0
  4202b0:	460c      	mov	r4, r1
  4202b2:	4617      	mov	r7, r2
  4202b4:	461e      	mov	r6, r3
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  4202b6:	4b15      	ldr	r3, [pc, #84]	; (42030c <lv_chart_set_ext_array+0x60>)
  4202b8:	4798      	blx	r3
  4202ba:	b928      	cbnz	r0, 4202c8 <lv_chart_set_ext_array+0x1c>
  4202bc:	462a      	mov	r2, r5
  4202be:	2300      	movs	r3, #0
  4202c0:	4813      	ldr	r0, [pc, #76]	; (420310 <lv_chart_set_ext_array+0x64>)
  4202c2:	4914      	ldr	r1, [pc, #80]	; (420314 <lv_chart_set_ext_array+0x68>)
  4202c4:	4788      	blx	r1
  4202c6:	e7fe      	b.n	4202c6 <lv_chart_set_ext_array+0x1a>
    LV_ASSERT_NULL(ser);
  4202c8:	4620      	mov	r0, r4
  4202ca:	4b10      	ldr	r3, [pc, #64]	; (42030c <lv_chart_set_ext_array+0x60>)
  4202cc:	4798      	blx	r3
  4202ce:	b120      	cbz	r0, 4202da <lv_chart_set_ext_array+0x2e>
    if(chart == NULL || ser == NULL) return;
  4202d0:	2c00      	cmp	r4, #0
  4202d2:	bf18      	it	ne
  4202d4:	2d00      	cmpne	r5, #0
  4202d6:	d106      	bne.n	4202e6 <lv_chart_set_ext_array+0x3a>
  4202d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_NULL(ser);
  4202da:	4622      	mov	r2, r4
  4202dc:	2300      	movs	r3, #0
  4202de:	480c      	ldr	r0, [pc, #48]	; (420310 <lv_chart_set_ext_array+0x64>)
  4202e0:	490c      	ldr	r1, [pc, #48]	; (420314 <lv_chart_set_ext_array+0x68>)
  4202e2:	4788      	blx	r1
  4202e4:	e7fe      	b.n	4202e4 <lv_chart_set_ext_array+0x38>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  4202e6:	4628      	mov	r0, r5
  4202e8:	4b0b      	ldr	r3, [pc, #44]	; (420318 <lv_chart_set_ext_array+0x6c>)
  4202ea:	4798      	blx	r3
  4202ec:	4605      	mov	r5, r0
    if(!ser->ext_buf_assigned && ser->points) lv_mem_free(ser->points);
  4202ee:	7a23      	ldrb	r3, [r4, #8]
  4202f0:	f013 0f01 	tst.w	r3, #1
  4202f4:	d103      	bne.n	4202fe <lv_chart_set_ext_array+0x52>
  4202f6:	6820      	ldr	r0, [r4, #0]
  4202f8:	b108      	cbz	r0, 4202fe <lv_chart_set_ext_array+0x52>
  4202fa:	4b08      	ldr	r3, [pc, #32]	; (42031c <lv_chart_set_ext_array+0x70>)
  4202fc:	4798      	blx	r3
    ser->ext_buf_assigned = true;
  4202fe:	7a23      	ldrb	r3, [r4, #8]
  420300:	f043 0301 	orr.w	r3, r3, #1
  420304:	7223      	strb	r3, [r4, #8]
    ser->points = array;
  420306:	6027      	str	r7, [r4, #0]
    ext->point_cnt = point_cnt;
  420308:	846e      	strh	r6, [r5, #34]	; 0x22
  42030a:	e7e5      	b.n	4202d8 <lv_chart_set_ext_array+0x2c>
  42030c:	00416da9 	.word	0x00416da9
  420310:	0042e560 	.word	0x0042e560
  420314:	00416db5 	.word	0x00416db5
  420318:	00407ffd 	.word	0x00407ffd
  42031c:	004175b1 	.word	0x004175b1

00420320 <lv_chart_get_series_area>:
{
  420320:	b570      	push	{r4, r5, r6, lr}
  420322:	4605      	mov	r5, r0
  420324:	460c      	mov	r4, r1
    lv_area_copy(series_area, &chart->coords);
  420326:	f100 0110 	add.w	r1, r0, #16
    uint8_t * d8 = (uint8_t *)dst;
  42032a:	4622      	mov	r2, r4
  42032c:	2308      	movs	r3, #8
  42032e:	e004      	b.n	42033a <lv_chart_get_series_area+0x1a>
        *d8 = *s8;
  420330:	f811 0b01 	ldrb.w	r0, [r1], #1
  420334:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  420338:	3b01      	subs	r3, #1
    while(len) {
  42033a:	2b00      	cmp	r3, #0
  42033c:	d1f8      	bne.n	420330 <lv_chart_get_series_area+0x10>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  42033e:	2212      	movs	r2, #18
  420340:	2100      	movs	r1, #0
  420342:	4628      	mov	r0, r5
  420344:	4e0f      	ldr	r6, [pc, #60]	; (420384 <lv_chart_get_series_area+0x64>)
  420346:	47b0      	blx	r6
    series_area->x1 += lv_obj_get_style_pad_left(chart, LV_CHART_PART_BG);
  420348:	8823      	ldrh	r3, [r4, #0]
  42034a:	fa13 f080 	uxtah	r0, r3, r0
  42034e:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  420350:	2213      	movs	r2, #19
  420352:	2100      	movs	r1, #0
  420354:	4628      	mov	r0, r5
  420356:	47b0      	blx	r6
    series_area->x2 -= lv_obj_get_style_pad_right(chart, LV_CHART_PART_BG);
  420358:	b280      	uxth	r0, r0
  42035a:	88a3      	ldrh	r3, [r4, #4]
  42035c:	1a18      	subs	r0, r3, r0
  42035e:	80a0      	strh	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  420360:	2210      	movs	r2, #16
  420362:	2100      	movs	r1, #0
  420364:	4628      	mov	r0, r5
  420366:	47b0      	blx	r6
    series_area->y1 += lv_obj_get_style_pad_top(chart, LV_CHART_PART_BG);
  420368:	8863      	ldrh	r3, [r4, #2]
  42036a:	fa13 f080 	uxtah	r0, r3, r0
  42036e:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  420370:	2211      	movs	r2, #17
  420372:	2100      	movs	r1, #0
  420374:	4628      	mov	r0, r5
  420376:	47b0      	blx	r6
    series_area->y2 -= lv_obj_get_style_pad_bottom(chart, LV_CHART_PART_BG);
  420378:	b280      	uxth	r0, r0
  42037a:	88e3      	ldrh	r3, [r4, #6]
  42037c:	1a18      	subs	r0, r3, r0
  42037e:	80e0      	strh	r0, [r4, #6]
  420380:	bd70      	pop	{r4, r5, r6, pc}
  420382:	bf00      	nop
  420384:	004073ed 	.word	0x004073ed

00420388 <lv_chart_design>:
{
  420388:	b570      	push	{r4, r5, r6, lr}
  42038a:	b098      	sub	sp, #96	; 0x60
  42038c:	4604      	mov	r4, r0
  42038e:	460d      	mov	r5, r1
    if(mode == LV_DESIGN_COVER_CHK) {
  420390:	2a02      	cmp	r2, #2
  420392:	d003      	beq.n	42039c <lv_chart_design+0x14>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  420394:	b132      	cbz	r2, 4203a4 <lv_chart_design+0x1c>
    return LV_DESIGN_RES_OK;
  420396:	2000      	movs	r0, #0
}
  420398:	b018      	add	sp, #96	; 0x60
  42039a:	bd70      	pop	{r4, r5, r6, pc}
        return ancestor_design(chart, clip_area, mode);
  42039c:	4b20      	ldr	r3, [pc, #128]	; (420420 <lv_chart_design+0x98>)
  42039e:	681b      	ldr	r3, [r3, #0]
  4203a0:	4798      	blx	r3
  4203a2:	e7f9      	b.n	420398 <lv_chart_design+0x10>
        lv_draw_rect_dsc_init(&bg_dsc);
  4203a4:	a803      	add	r0, sp, #12
  4203a6:	4b1f      	ldr	r3, [pc, #124]	; (420424 <lv_chart_design+0x9c>)
  4203a8:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(chart, LV_CHART_PART_BG, &bg_dsc);
  4203aa:	aa03      	add	r2, sp, #12
  4203ac:	2100      	movs	r1, #0
  4203ae:	4620      	mov	r0, r4
  4203b0:	4b1d      	ldr	r3, [pc, #116]	; (420428 <lv_chart_design+0xa0>)
  4203b2:	4798      	blx	r3
        lv_draw_rect(&chart->coords, clip_area, &bg_dsc);
  4203b4:	aa03      	add	r2, sp, #12
  4203b6:	4629      	mov	r1, r5
  4203b8:	f104 0010 	add.w	r0, r4, #16
  4203bc:	4b1b      	ldr	r3, [pc, #108]	; (42042c <lv_chart_design+0xa4>)
  4203be:	4798      	blx	r3
        lv_chart_get_series_area(chart, &series_area);
  4203c0:	a901      	add	r1, sp, #4
  4203c2:	4620      	mov	r0, r4
  4203c4:	4b1a      	ldr	r3, [pc, #104]	; (420430 <lv_chart_design+0xa8>)
  4203c6:	4798      	blx	r3
        draw_series_bg(chart, &series_area, clip_area);
  4203c8:	462a      	mov	r2, r5
  4203ca:	a901      	add	r1, sp, #4
  4203cc:	4620      	mov	r0, r4
  4203ce:	4b19      	ldr	r3, [pc, #100]	; (420434 <lv_chart_design+0xac>)
  4203d0:	4798      	blx	r3
        draw_axes(chart, &series_area, clip_area);
  4203d2:	462a      	mov	r2, r5
  4203d4:	a901      	add	r1, sp, #4
  4203d6:	4620      	mov	r0, r4
  4203d8:	4b17      	ldr	r3, [pc, #92]	; (420438 <lv_chart_design+0xb0>)
  4203da:	4798      	blx	r3
        lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  4203dc:	4620      	mov	r0, r4
  4203de:	4b17      	ldr	r3, [pc, #92]	; (42043c <lv_chart_design+0xb4>)
  4203e0:	4798      	blx	r3
  4203e2:	4606      	mov	r6, r0
        if(ext->type & LV_CHART_TYPE_LINE) draw_series_line(chart, &series_area, clip_area);
  4203e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  4203e8:	f013 0f01 	tst.w	r3, #1
  4203ec:	d10b      	bne.n	420406 <lv_chart_design+0x7e>
        if(ext->type & LV_CHART_TYPE_COLUMN) draw_series_column(chart, &series_area, clip_area);
  4203ee:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
  4203f2:	f013 0f02 	tst.w	r3, #2
  4203f6:	d10c      	bne.n	420412 <lv_chart_design+0x8a>
        draw_cursors(chart, &series_area, clip_area);
  4203f8:	462a      	mov	r2, r5
  4203fa:	a901      	add	r1, sp, #4
  4203fc:	4620      	mov	r0, r4
  4203fe:	4b10      	ldr	r3, [pc, #64]	; (420440 <lv_chart_design+0xb8>)
  420400:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  420402:	2000      	movs	r0, #0
  420404:	e7c8      	b.n	420398 <lv_chart_design+0x10>
        if(ext->type & LV_CHART_TYPE_LINE) draw_series_line(chart, &series_area, clip_area);
  420406:	462a      	mov	r2, r5
  420408:	a901      	add	r1, sp, #4
  42040a:	4620      	mov	r0, r4
  42040c:	4b0d      	ldr	r3, [pc, #52]	; (420444 <lv_chart_design+0xbc>)
  42040e:	4798      	blx	r3
  420410:	e7ed      	b.n	4203ee <lv_chart_design+0x66>
        if(ext->type & LV_CHART_TYPE_COLUMN) draw_series_column(chart, &series_area, clip_area);
  420412:	462a      	mov	r2, r5
  420414:	a901      	add	r1, sp, #4
  420416:	4620      	mov	r0, r4
  420418:	4b0b      	ldr	r3, [pc, #44]	; (420448 <lv_chart_design+0xc0>)
  42041a:	4798      	blx	r3
  42041c:	e7ec      	b.n	4203f8 <lv_chart_design+0x70>
  42041e:	bf00      	nop
  420420:	20414840 	.word	0x20414840
  420424:	0041338d 	.word	0x0041338d
  420428:	004082a5 	.word	0x004082a5
  42042c:	004133d9 	.word	0x004133d9
  420430:	00420321 	.word	0x00420321
  420434:	0041ee95 	.word	0x0041ee95
  420438:	0041f699 	.word	0x0041f699
  42043c:	00407ffd 	.word	0x00407ffd
  420440:	0041fc3d 	.word	0x0041fc3d
  420444:	0041f89d 	.word	0x0041f89d
  420448:	0041f6c5 	.word	0x0041f6c5

0042044c <invalidate_lines>:
/**
 * invalid area of the new line data lines on a chart
 * @param obj pointer to chart object
 */
static void invalidate_lines(lv_obj_t * chart, uint16_t i)
{
  42044c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  420450:	b084      	sub	sp, #16
  420452:	4681      	mov	r9, r0
  420454:	4688      	mov	r8, r1
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  420456:	4b3c      	ldr	r3, [pc, #240]	; (420548 <invalidate_lines+0xfc>)
  420458:	4798      	blx	r3
    if(i >= ext->point_cnt) return;
  42045a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  42045c:	4543      	cmp	r3, r8
  42045e:	d96a      	bls.n	420536 <invalidate_lines+0xea>
  420460:	4682      	mov	sl, r0

    lv_area_t series_area;
    lv_chart_get_series_area(chart, &series_area);
  420462:	a902      	add	r1, sp, #8
  420464:	4648      	mov	r0, r9
  420466:	4b39      	ldr	r3, [pc, #228]	; (42054c <invalidate_lines+0x100>)
  420468:	4798      	blx	r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  42046a:	f8bd 400c 	ldrh.w	r4, [sp, #12]
  42046e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  420472:	1b64      	subs	r4, r4, r5
  420474:	b2a4      	uxth	r4, r4
  420476:	3401      	adds	r4, #1
  420478:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  42047a:	2290      	movs	r2, #144	; 0x90
  42047c:	2102      	movs	r1, #2
  42047e:	4648      	mov	r0, r9
  420480:	4e33      	ldr	r6, [pc, #204]	; (420550 <invalidate_lines+0x104>)
  420482:	47b0      	blx	r6
  420484:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  420486:	2203      	movs	r2, #3
  420488:	2102      	movs	r1, #2
  42048a:	4648      	mov	r0, r9
  42048c:	47b0      	blx	r6
    const uint8_t * s8 = (const uint8_t *)src;
  42048e:	ab02      	add	r3, sp, #8
    uint8_t * d8 = (uint8_t *)dst;
  420490:	4669      	mov	r1, sp
  420492:	2208      	movs	r2, #8
    while(len) {
  420494:	2a00      	cmp	r2, #0
  420496:	d151      	bne.n	42053c <invalidate_lines+0xf0>
    lv_style_int_t line_width = lv_obj_get_style_line_width(chart, LV_CHART_PART_SERIES);
    lv_style_int_t point_radius = lv_obj_get_style_size(chart, LV_CHART_PART_SERIES);

    lv_area_t coords;
    lv_area_copy(&coords, &series_area);
    coords.y1 -= line_width + point_radius;
  420498:	b2bf      	uxth	r7, r7
  42049a:	b286      	uxth	r6, r0
  42049c:	19bb      	adds	r3, r7, r6
  42049e:	b29b      	uxth	r3, r3
  4204a0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  4204a4:	1ad2      	subs	r2, r2, r3
  4204a6:	f8ad 2002 	strh.w	r2, [sp, #2]
    coords.y2 += line_width + point_radius;
  4204aa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  4204ae:	4413      	add	r3, r2
  4204b0:	f8ad 3006 	strh.w	r3, [sp, #6]

    if(i < ext->point_cnt - 1) {
  4204b4:	f8ba 2022 	ldrh.w	r2, [sl, #34]	; 0x22
  4204b8:	3a01      	subs	r2, #1
  4204ba:	4590      	cmp	r8, r2
  4204bc:	da19      	bge.n	4204f2 <invalidate_lines+0xa6>
        coords.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs - line_width - point_radius;
  4204be:	fb04 f308 	mul.w	r3, r4, r8
  4204c2:	fb93 f3f2 	sdiv	r3, r3, r2
  4204c6:	442b      	add	r3, r5
  4204c8:	b29b      	uxth	r3, r3
  4204ca:	1bdb      	subs	r3, r3, r7
  4204cc:	b29b      	uxth	r3, r3
  4204ce:	1b9b      	subs	r3, r3, r6
  4204d0:	f8ad 3000 	strh.w	r3, [sp]
        coords.x2 = ((w * (i + 1)) / (ext->point_cnt - 1)) + x_ofs + line_width + point_radius;
  4204d4:	fb08 4304 	mla	r3, r8, r4, r4
  4204d8:	fb93 f2f2 	sdiv	r2, r3, r2
  4204dc:	442a      	add	r2, r5
  4204de:	fa17 f282 	uxtah	r2, r7, r2
  4204e2:	fa16 f282 	uxtah	r2, r6, r2
  4204e6:	f8ad 2004 	strh.w	r2, [sp, #4]
        lv_obj_invalidate_area(chart, &coords);
  4204ea:	4669      	mov	r1, sp
  4204ec:	4648      	mov	r0, r9
  4204ee:	4b19      	ldr	r3, [pc, #100]	; (420554 <invalidate_lines+0x108>)
  4204f0:	4798      	blx	r3
    }

    if(i > 0) {
  4204f2:	f1b8 0f00 	cmp.w	r8, #0
  4204f6:	d01e      	beq.n	420536 <invalidate_lines+0xea>
        coords.x1 = ((w * (i - 1)) / (ext->point_cnt - 1)) + x_ofs - line_width - point_radius;
  4204f8:	f108 33ff 	add.w	r3, r8, #4294967295
  4204fc:	fb03 f304 	mul.w	r3, r3, r4
  420500:	f8ba 2022 	ldrh.w	r2, [sl, #34]	; 0x22
  420504:	3a01      	subs	r2, #1
  420506:	fb93 f3f2 	sdiv	r3, r3, r2
  42050a:	442b      	add	r3, r5
  42050c:	b29b      	uxth	r3, r3
  42050e:	1bdb      	subs	r3, r3, r7
  420510:	b29b      	uxth	r3, r3
  420512:	1b9b      	subs	r3, r3, r6
  420514:	f8ad 3000 	strh.w	r3, [sp]
        coords.x2 = ((w * i) / (ext->point_cnt - 1)) + x_ofs + line_width + point_radius;
  420518:	fb04 f408 	mul.w	r4, r4, r8
  42051c:	fb94 f4f2 	sdiv	r4, r4, r2
  420520:	4425      	add	r5, r4
  420522:	fa17 f785 	uxtah	r7, r7, r5
  420526:	fa16 f687 	uxtah	r6, r6, r7
  42052a:	f8ad 6004 	strh.w	r6, [sp, #4]
        lv_obj_invalidate_area(chart, &coords);
  42052e:	4669      	mov	r1, sp
  420530:	4648      	mov	r0, r9
  420532:	4b08      	ldr	r3, [pc, #32]	; (420554 <invalidate_lines+0x108>)
  420534:	4798      	blx	r3
    }
}
  420536:	b004      	add	sp, #16
  420538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        *d8 = *s8;
  42053c:	f813 6b01 	ldrb.w	r6, [r3], #1
  420540:	f801 6b01 	strb.w	r6, [r1], #1
        len--;
  420544:	3a01      	subs	r2, #1
  420546:	e7a5      	b.n	420494 <invalidate_lines+0x48>
  420548:	00407ffd 	.word	0x00407ffd
  42054c:	00420321 	.word	0x00420321
  420550:	004073ed 	.word	0x004073ed
  420554:	00405e9d 	.word	0x00405e9d

00420558 <invalidate_columns>:
 * invalid area of the new column data lines on a chart
 * @param chart pointer to chart object
 * @param mask mask, inherited from the design function
 */
static void invalidate_columns(lv_obj_t * chart, uint16_t i)
{
  420558:	b5f0      	push	{r4, r5, r6, r7, lr}
  42055a:	b085      	sub	sp, #20
  42055c:	4605      	mov	r5, r0
  42055e:	460f      	mov	r7, r1
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  420560:	4b1b      	ldr	r3, [pc, #108]	; (4205d0 <invalidate_columns+0x78>)
  420562:	4798      	blx	r3
  420564:	4606      	mov	r6, r0

    lv_area_t series_area;
    lv_chart_get_series_area(chart, &series_area);
  420566:	a902      	add	r1, sp, #8
  420568:	4628      	mov	r0, r5
  42056a:	4b1a      	ldr	r3, [pc, #104]	; (4205d4 <invalidate_columns+0x7c>)
  42056c:	4798      	blx	r3
  42056e:	f8bd 400c 	ldrh.w	r4, [sp, #12]
  420572:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  420576:	1ae4      	subs	r4, r4, r3
  420578:	b2a4      	uxth	r4, r4
  42057a:	3401      	adds	r4, #1
  42057c:	b224      	sxth	r4, r4

    lv_area_t col_a;
    lv_coord_t w     = lv_area_get_width(&series_area);
    lv_coord_t col_w = w / ((_lv_ll_get_len(&ext->series_ll) + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
  42057e:	4630      	mov	r0, r6
  420580:	4b15      	ldr	r3, [pc, #84]	; (4205d8 <invalidate_columns+0x80>)
  420582:	4798      	blx	r3
  420584:	8c71      	ldrh	r1, [r6, #34]	; 0x22
  420586:	fb00 1001 	mla	r0, r0, r1, r1
  42058a:	fbb4 f6f0 	udiv	r6, r4, r0
  42058e:	b233      	sxth	r3, r6
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/
  420590:	2202      	movs	r2, #2
  420592:	fb93 f3f2 	sdiv	r3, r3, r2

    lv_coord_t x_act;
    x_act = (int32_t)((int32_t)w * i) / ext->point_cnt;
  420596:	fb04 f407 	mul.w	r4, r4, r7
  42059a:	fb94 f1f1 	sdiv	r1, r4, r1
    x_act += series_area.x1 + x_ofs;
  42059e:	f8bd 4008 	ldrh.w	r4, [sp, #8]
  4205a2:	441c      	add	r4, r3
  4205a4:	fa11 f484 	uxtah	r4, r1, r4
  4205a8:	b2a4      	uxth	r4, r4
  4205aa:	b227      	sxth	r7, r4

    lv_obj_get_coords(chart, &col_a);
  4205ac:	4669      	mov	r1, sp
  4205ae:	4628      	mov	r0, r5
  4205b0:	4b0a      	ldr	r3, [pc, #40]	; (4205dc <invalidate_columns+0x84>)
  4205b2:	4798      	blx	r3
    col_a.x1 = x_act;
  4205b4:	f8ad 7000 	strh.w	r7, [sp]
    col_a.x2 = col_a.x1 + col_w;
  4205b8:	4434      	add	r4, r6
  4205ba:	f8ad 4004 	strh.w	r4, [sp, #4]

    _lv_inv_area(lv_obj_get_disp(chart), &col_a);
  4205be:	4628      	mov	r0, r5
  4205c0:	4b07      	ldr	r3, [pc, #28]	; (4205e0 <invalidate_columns+0x88>)
  4205c2:	4798      	blx	r3
  4205c4:	4669      	mov	r1, sp
  4205c6:	4b07      	ldr	r3, [pc, #28]	; (4205e4 <invalidate_columns+0x8c>)
  4205c8:	4798      	blx	r3
}
  4205ca:	b005      	add	sp, #20
  4205cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4205ce:	bf00      	nop
  4205d0:	00407ffd 	.word	0x00407ffd
  4205d4:	00420321 	.word	0x00420321
  4205d8:	004172bd 	.word	0x004172bd
  4205dc:	00405a69 	.word	0x00405a69
  4205e0:	004059b5 	.word	0x004059b5
  4205e4:	004095fd 	.word	0x004095fd

004205e8 <lv_chart_refresh>:
{
  4205e8:	b510      	push	{r4, lr}
  4205ea:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  4205ec:	4b06      	ldr	r3, [pc, #24]	; (420608 <lv_chart_refresh+0x20>)
  4205ee:	4798      	blx	r3
  4205f0:	b928      	cbnz	r0, 4205fe <lv_chart_refresh+0x16>
  4205f2:	4622      	mov	r2, r4
  4205f4:	2300      	movs	r3, #0
  4205f6:	4805      	ldr	r0, [pc, #20]	; (42060c <lv_chart_refresh+0x24>)
  4205f8:	4905      	ldr	r1, [pc, #20]	; (420610 <lv_chart_refresh+0x28>)
  4205fa:	4788      	blx	r1
  4205fc:	e7fe      	b.n	4205fc <lv_chart_refresh+0x14>
    lv_obj_invalidate(chart);
  4205fe:	4620      	mov	r0, r4
  420600:	4b04      	ldr	r3, [pc, #16]	; (420614 <lv_chart_refresh+0x2c>)
  420602:	4798      	blx	r3
  420604:	bd10      	pop	{r4, pc}
  420606:	bf00      	nop
  420608:	00416da9 	.word	0x00416da9
  42060c:	0042e560 	.word	0x0042e560
  420610:	00416db5 	.word	0x00416db5
  420614:	00405f01 	.word	0x00405f01

00420618 <lv_chart_set_y_range>:
{
  420618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42061a:	4606      	mov	r6, r0
  42061c:	460d      	mov	r5, r1
  42061e:	4617      	mov	r7, r2
  420620:	461c      	mov	r4, r3
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  420622:	4b16      	ldr	r3, [pc, #88]	; (42067c <lv_chart_set_y_range+0x64>)
  420624:	4798      	blx	r3
  420626:	b110      	cbz	r0, 42062e <lv_chart_set_y_range+0x16>
    if(axis >= _LV_CHART_AXIS_LAST) {
  420628:	2d01      	cmp	r5, #1
  42062a:	d906      	bls.n	42063a <lv_chart_set_y_range+0x22>
  42062c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  42062e:	4632      	mov	r2, r6
  420630:	2300      	movs	r3, #0
  420632:	4813      	ldr	r0, [pc, #76]	; (420680 <lv_chart_set_y_range+0x68>)
  420634:	4913      	ldr	r1, [pc, #76]	; (420684 <lv_chart_set_y_range+0x6c>)
  420636:	4788      	blx	r1
  420638:	e7fe      	b.n	420638 <lv_chart_set_y_range+0x20>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  42063a:	4630      	mov	r0, r6
  42063c:	4b12      	ldr	r3, [pc, #72]	; (420688 <lv_chart_set_y_range+0x70>)
  42063e:	4798      	blx	r3
    if(ext->ymin[axis] == ymin && ext->ymax[axis] == ymax) return;
  420640:	f105 030c 	add.w	r3, r5, #12
  420644:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
  420648:	42bb      	cmp	r3, r7
  42064a:	d107      	bne.n	42065c <lv_chart_set_y_range+0x44>
  42064c:	f105 030c 	add.w	r3, r5, #12
  420650:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  420654:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  420658:	42a3      	cmp	r3, r4
  42065a:	d0e7      	beq.n	42062c <lv_chart_set_y_range+0x14>
    ext->ymin[axis] = ymin;
  42065c:	f105 030c 	add.w	r3, r5, #12
  420660:	f820 7013 	strh.w	r7, [r0, r3, lsl #1]
    ext->ymax[axis] = (ymax == ymin ? ymax + 1 : ymax);
  420664:	42a7      	cmp	r7, r4
  420666:	d101      	bne.n	42066c <lv_chart_set_y_range+0x54>
  420668:	3401      	adds	r4, #1
  42066a:	b224      	sxth	r4, r4
  42066c:	350c      	adds	r5, #12
  42066e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  420672:	80ac      	strh	r4, [r5, #4]
    lv_chart_refresh(chart);
  420674:	4630      	mov	r0, r6
  420676:	4b05      	ldr	r3, [pc, #20]	; (42068c <lv_chart_set_y_range+0x74>)
  420678:	4798      	blx	r3
  42067a:	e7d7      	b.n	42062c <lv_chart_set_y_range+0x14>
  42067c:	00416da9 	.word	0x00416da9
  420680:	0042e560 	.word	0x0042e560
  420684:	00416db5 	.word	0x00416db5
  420688:	00407ffd 	.word	0x00407ffd
  42068c:	004205e9 	.word	0x004205e9

00420690 <lv_chart_set_type>:
{
  420690:	b538      	push	{r3, r4, r5, lr}
  420692:	4604      	mov	r4, r0
  420694:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  420696:	4b0b      	ldr	r3, [pc, #44]	; (4206c4 <lv_chart_set_type+0x34>)
  420698:	4798      	blx	r3
  42069a:	b928      	cbnz	r0, 4206a8 <lv_chart_set_type+0x18>
  42069c:	4622      	mov	r2, r4
  42069e:	2300      	movs	r3, #0
  4206a0:	4809      	ldr	r0, [pc, #36]	; (4206c8 <lv_chart_set_type+0x38>)
  4206a2:	490a      	ldr	r1, [pc, #40]	; (4206cc <lv_chart_set_type+0x3c>)
  4206a4:	4788      	blx	r1
  4206a6:	e7fe      	b.n	4206a6 <lv_chart_set_type+0x16>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  4206a8:	4620      	mov	r0, r4
  4206aa:	4b09      	ldr	r3, [pc, #36]	; (4206d0 <lv_chart_set_type+0x40>)
  4206ac:	4798      	blx	r3
    if(ext->type == type) return;
  4206ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  4206b2:	42ab      	cmp	r3, r5
  4206b4:	d004      	beq.n	4206c0 <lv_chart_set_type+0x30>
    ext->type = type;
  4206b6:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    lv_chart_refresh(chart);
  4206ba:	4620      	mov	r0, r4
  4206bc:	4b05      	ldr	r3, [pc, #20]	; (4206d4 <lv_chart_set_type+0x44>)
  4206be:	4798      	blx	r3
  4206c0:	bd38      	pop	{r3, r4, r5, pc}
  4206c2:	bf00      	nop
  4206c4:	00416da9 	.word	0x00416da9
  4206c8:	0042e560 	.word	0x0042e560
  4206cc:	00416db5 	.word	0x00416db5
  4206d0:	00407ffd 	.word	0x00407ffd
  4206d4:	004205e9 	.word	0x004205e9

004206d8 <lv_chart_set_point_count>:
{
  4206d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4206dc:	4680      	mov	r8, r0
  4206de:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  4206e0:	4b48      	ldr	r3, [pc, #288]	; (420804 <lv_chart_set_point_count+0x12c>)
  4206e2:	4798      	blx	r3
  4206e4:	b928      	cbnz	r0, 4206f2 <lv_chart_set_point_count+0x1a>
  4206e6:	4642      	mov	r2, r8
  4206e8:	2300      	movs	r3, #0
  4206ea:	4847      	ldr	r0, [pc, #284]	; (420808 <lv_chart_set_point_count+0x130>)
  4206ec:	4947      	ldr	r1, [pc, #284]	; (42080c <lv_chart_set_point_count+0x134>)
  4206ee:	4788      	blx	r1
  4206f0:	e7fe      	b.n	4206f0 <lv_chart_set_point_count+0x18>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  4206f2:	4640      	mov	r0, r8
  4206f4:	4b46      	ldr	r3, [pc, #280]	; (420810 <lv_chart_set_point_count+0x138>)
  4206f6:	4798      	blx	r3
  4206f8:	4607      	mov	r7, r0
    if(ext->point_cnt == point_cnt) return;
  4206fa:	8c46      	ldrh	r6, [r0, #34]	; 0x22
  4206fc:	42ae      	cmp	r6, r5
  4206fe:	d07e      	beq.n	4207fe <lv_chart_set_point_count+0x126>
    if(point_cnt < 1) point_cnt = 1;
  420700:	b905      	cbnz	r5, 420704 <lv_chart_set_point_count+0x2c>
  420702:	2501      	movs	r5, #1
    _LV_LL_READ_BACK(ext->series_ll, ser) {
  420704:	46b9      	mov	r9, r7
  420706:	4638      	mov	r0, r7
  420708:	4b42      	ldr	r3, [pc, #264]	; (420814 <lv_chart_set_point_count+0x13c>)
  42070a:	4798      	blx	r3
  42070c:	4604      	mov	r4, r0
  42070e:	e02c      	b.n	42076a <lv_chart_set_point_count+0x92>
                LV_ASSERT_MEM(new_points);
  420710:	4652      	mov	r2, sl
  420712:	2300      	movs	r3, #0
  420714:	4840      	ldr	r0, [pc, #256]	; (420818 <lv_chart_set_point_count+0x140>)
  420716:	493d      	ldr	r1, [pc, #244]	; (42080c <lv_chart_set_point_count+0x134>)
  420718:	4788      	blx	r1
  42071a:	e7fe      	b.n	42071a <lv_chart_set_point_count+0x42>
                            ser->points[(i + ser->start_point) % point_cnt_old]; /*Copy old contents to new array*/
  42071c:	6821      	ldr	r1, [r4, #0]
  42071e:	88e2      	ldrh	r2, [r4, #6]
  420720:	441a      	add	r2, r3
  420722:	fb92 f0f6 	sdiv	r0, r2, r6
  420726:	fb06 2210 	mls	r2, r6, r0, r2
  42072a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
                        new_points[i] =
  42072e:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
                    for(i = 0; i < point_cnt_old; i++) {
  420732:	3301      	adds	r3, #1
  420734:	b29b      	uxth	r3, r3
  420736:	42b3      	cmp	r3, r6
  420738:	d3f0      	bcc.n	42071c <lv_chart_set_point_count+0x44>
  42073a:	4633      	mov	r3, r6
  42073c:	e007      	b.n	42074e <lv_chart_set_point_count+0x76>
  42073e:	2300      	movs	r3, #0
  420740:	e7f9      	b.n	420736 <lv_chart_set_point_count+0x5e>
                        new_points[i] = def; /*Fill up the rest with default value*/
  420742:	f248 32e8 	movw	r2, #33768	; 0x83e8
  420746:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
                    for(i = point_cnt_old; i < point_cnt; i++) {
  42074a:	3301      	adds	r3, #1
  42074c:	b29b      	uxth	r3, r3
  42074e:	429d      	cmp	r5, r3
  420750:	d8f7      	bhi.n	420742 <lv_chart_set_point_count+0x6a>
                lv_mem_free(ser->points);
  420752:	6820      	ldr	r0, [r4, #0]
  420754:	4b31      	ldr	r3, [pc, #196]	; (42081c <lv_chart_set_point_count+0x144>)
  420756:	4798      	blx	r3
                ser->points = new_points;
  420758:	f8c4 a000 	str.w	sl, [r4]
        ser->start_point = 0;
  42075c:	2300      	movs	r3, #0
  42075e:	80e3      	strh	r3, [r4, #6]
    _LV_LL_READ_BACK(ext->series_ll, ser) {
  420760:	4621      	mov	r1, r4
  420762:	4648      	mov	r0, r9
  420764:	4b2e      	ldr	r3, [pc, #184]	; (420820 <lv_chart_set_point_count+0x148>)
  420766:	4798      	blx	r3
  420768:	4604      	mov	r4, r0
  42076a:	2c00      	cmp	r4, #0
  42076c:	d043      	beq.n	4207f6 <lv_chart_set_point_count+0x11e>
        if(!ser->ext_buf_assigned) {
  42076e:	7a23      	ldrb	r3, [r4, #8]
  420770:	f013 0f01 	tst.w	r3, #1
  420774:	d1f2      	bne.n	42075c <lv_chart_set_point_count+0x84>
            if(ser->start_point != 0) {
  420776:	88e3      	ldrh	r3, [r4, #6]
  420778:	b1f3      	cbz	r3, 4207b8 <lv_chart_set_point_count+0xe0>
                lv_coord_t * new_points = lv_mem_alloc(sizeof(lv_coord_t) * point_cnt);
  42077a:	0068      	lsls	r0, r5, #1
  42077c:	4b29      	ldr	r3, [pc, #164]	; (420824 <lv_chart_set_point_count+0x14c>)
  42077e:	4798      	blx	r3
  420780:	4682      	mov	sl, r0
                LV_ASSERT_MEM(new_points);
  420782:	4b20      	ldr	r3, [pc, #128]	; (420804 <lv_chart_set_point_count+0x12c>)
  420784:	4798      	blx	r3
  420786:	2800      	cmp	r0, #0
  420788:	d0c2      	beq.n	420710 <lv_chart_set_point_count+0x38>
                if(new_points == NULL) return;
  42078a:	f1ba 0f00 	cmp.w	sl, #0
  42078e:	d036      	beq.n	4207fe <lv_chart_set_point_count+0x126>
                if(point_cnt >= point_cnt_old) {
  420790:	42b5      	cmp	r5, r6
  420792:	d2d4      	bcs.n	42073e <lv_chart_set_point_count+0x66>
  420794:	2300      	movs	r3, #0
  420796:	e00c      	b.n	4207b2 <lv_chart_set_point_count+0xda>
                            ser->points[(i + ser->start_point) % point_cnt_old]; /*Copy old contents to new array*/
  420798:	6821      	ldr	r1, [r4, #0]
  42079a:	88e2      	ldrh	r2, [r4, #6]
  42079c:	441a      	add	r2, r3
  42079e:	fb92 f0f6 	sdiv	r0, r2, r6
  4207a2:	fb06 2210 	mls	r2, r6, r0, r2
  4207a6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
                        new_points[i] =
  4207aa:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
                    for(i = 0; i < point_cnt; i++) {
  4207ae:	3301      	adds	r3, #1
  4207b0:	b29b      	uxth	r3, r3
  4207b2:	429d      	cmp	r5, r3
  4207b4:	d8f0      	bhi.n	420798 <lv_chart_set_point_count+0xc0>
  4207b6:	e7cc      	b.n	420752 <lv_chart_set_point_count+0x7a>
                ser->points = lv_mem_realloc(ser->points, sizeof(lv_coord_t) * point_cnt);
  4207b8:	0069      	lsls	r1, r5, #1
  4207ba:	6820      	ldr	r0, [r4, #0]
  4207bc:	4b1a      	ldr	r3, [pc, #104]	; (420828 <lv_chart_set_point_count+0x150>)
  4207be:	4798      	blx	r3
  4207c0:	6020      	str	r0, [r4, #0]
                LV_ASSERT_MEM(ser->points);
  4207c2:	4b10      	ldr	r3, [pc, #64]	; (420804 <lv_chart_set_point_count+0x12c>)
  4207c4:	4798      	blx	r3
  4207c6:	b130      	cbz	r0, 4207d6 <lv_chart_set_point_count+0xfe>
                if(ser->points == NULL) return;
  4207c8:	6823      	ldr	r3, [r4, #0]
  4207ca:	b1c3      	cbz	r3, 4207fe <lv_chart_set_point_count+0x126>
                if(point_cnt > point_cnt_old) {
  4207cc:	42b5      	cmp	r5, r6
  4207ce:	d9c5      	bls.n	42075c <lv_chart_set_point_count+0x84>
                    for(i = point_cnt_old - 1; i < point_cnt; i++) {
  4207d0:	1e73      	subs	r3, r6, #1
  4207d2:	b29b      	uxth	r3, r3
  4207d4:	e00c      	b.n	4207f0 <lv_chart_set_point_count+0x118>
                LV_ASSERT_MEM(ser->points);
  4207d6:	6822      	ldr	r2, [r4, #0]
  4207d8:	2300      	movs	r3, #0
  4207da:	480f      	ldr	r0, [pc, #60]	; (420818 <lv_chart_set_point_count+0x140>)
  4207dc:	490b      	ldr	r1, [pc, #44]	; (42080c <lv_chart_set_point_count+0x134>)
  4207de:	4788      	blx	r1
  4207e0:	e7fe      	b.n	4207e0 <lv_chart_set_point_count+0x108>
                        ser->points[i] = def;
  4207e2:	6822      	ldr	r2, [r4, #0]
  4207e4:	f248 31e8 	movw	r1, #33768	; 0x83e8
  4207e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    for(i = point_cnt_old - 1; i < point_cnt; i++) {
  4207ec:	3301      	adds	r3, #1
  4207ee:	b29b      	uxth	r3, r3
  4207f0:	429d      	cmp	r5, r3
  4207f2:	d8f6      	bhi.n	4207e2 <lv_chart_set_point_count+0x10a>
  4207f4:	e7b2      	b.n	42075c <lv_chart_set_point_count+0x84>
    ext->point_cnt = point_cnt;
  4207f6:	847d      	strh	r5, [r7, #34]	; 0x22
    lv_chart_refresh(chart);
  4207f8:	4640      	mov	r0, r8
  4207fa:	4b0c      	ldr	r3, [pc, #48]	; (42082c <lv_chart_set_point_count+0x154>)
  4207fc:	4798      	blx	r3
  4207fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  420802:	bf00      	nop
  420804:	00416da9 	.word	0x00416da9
  420808:	0042e560 	.word	0x0042e560
  42080c:	00416db5 	.word	0x00416db5
  420810:	00407ffd 	.word	0x00407ffd
  420814:	004170c3 	.word	0x004170c3
  420818:	0042e54c 	.word	0x0042e54c
  42081c:	004175b1 	.word	0x004175b1
  420820:	004170db 	.word	0x004170db
  420824:	004174ed 	.word	0x004174ed
  420828:	0041781d 	.word	0x0041781d
  42082c:	004205e9 	.word	0x004205e9

00420830 <lv_chart_set_next>:
{
  420830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  420832:	4606      	mov	r6, r0
  420834:	460c      	mov	r4, r1
  420836:	4617      	mov	r7, r2
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  420838:	4b25      	ldr	r3, [pc, #148]	; (4208d0 <lv_chart_set_next+0xa0>)
  42083a:	4798      	blx	r3
  42083c:	b928      	cbnz	r0, 42084a <lv_chart_set_next+0x1a>
  42083e:	4632      	mov	r2, r6
  420840:	2300      	movs	r3, #0
  420842:	4824      	ldr	r0, [pc, #144]	; (4208d4 <lv_chart_set_next+0xa4>)
  420844:	4924      	ldr	r1, [pc, #144]	; (4208d8 <lv_chart_set_next+0xa8>)
  420846:	4788      	blx	r1
  420848:	e7fe      	b.n	420848 <lv_chart_set_next+0x18>
    LV_ASSERT_NULL(ser);
  42084a:	4620      	mov	r0, r4
  42084c:	4b20      	ldr	r3, [pc, #128]	; (4208d0 <lv_chart_set_next+0xa0>)
  42084e:	4798      	blx	r3
  420850:	b928      	cbnz	r0, 42085e <lv_chart_set_next+0x2e>
  420852:	4622      	mov	r2, r4
  420854:	2300      	movs	r3, #0
  420856:	481f      	ldr	r0, [pc, #124]	; (4208d4 <lv_chart_set_next+0xa4>)
  420858:	491f      	ldr	r1, [pc, #124]	; (4208d8 <lv_chart_set_next+0xa8>)
  42085a:	4788      	blx	r1
  42085c:	e7fe      	b.n	42085c <lv_chart_set_next+0x2c>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  42085e:	4630      	mov	r0, r6
  420860:	4b1e      	ldr	r3, [pc, #120]	; (4208dc <lv_chart_set_next+0xac>)
  420862:	4798      	blx	r3
  420864:	4605      	mov	r5, r0
    if(ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT) {
  420866:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  42086a:	f013 0f01 	tst.w	r3, #1
  42086e:	d10f      	bne.n	420890 <lv_chart_set_next+0x60>
        ser->points[ser->start_point] =
  420870:	6823      	ldr	r3, [r4, #0]
  420872:	88e2      	ldrh	r2, [r4, #6]
  420874:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
        ser->start_point = (ser->start_point + 1) % ext->point_cnt;
  420878:	88e3      	ldrh	r3, [r4, #6]
  42087a:	3301      	adds	r3, #1
  42087c:	8c41      	ldrh	r1, [r0, #34]	; 0x22
  42087e:	fb93 f2f1 	sdiv	r2, r3, r1
  420882:	fb01 3312 	mls	r3, r1, r2, r3
  420886:	80e3      	strh	r3, [r4, #6]
        lv_chart_refresh(chart);
  420888:	4630      	mov	r0, r6
  42088a:	4b15      	ldr	r3, [pc, #84]	; (4208e0 <lv_chart_set_next+0xb0>)
  42088c:	4798      	blx	r3
  42088e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ser->points[ser->start_point] = y;
  420890:	6823      	ldr	r3, [r4, #0]
  420892:	88e2      	ldrh	r2, [r4, #6]
  420894:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
        if(ext->type & LV_CHART_TYPE_LINE) invalidate_lines(chart, ser->start_point);
  420898:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  42089c:	f013 0f01 	tst.w	r3, #1
  4208a0:	d003      	beq.n	4208aa <lv_chart_set_next+0x7a>
  4208a2:	88e1      	ldrh	r1, [r4, #6]
  4208a4:	4630      	mov	r0, r6
  4208a6:	4b0f      	ldr	r3, [pc, #60]	; (4208e4 <lv_chart_set_next+0xb4>)
  4208a8:	4798      	blx	r3
        if(ext->type & LV_CHART_TYPE_COLUMN) invalidate_columns(chart, ser->start_point);
  4208aa:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
  4208ae:	f013 0f02 	tst.w	r3, #2
  4208b2:	d003      	beq.n	4208bc <lv_chart_set_next+0x8c>
  4208b4:	88e1      	ldrh	r1, [r4, #6]
  4208b6:	4630      	mov	r0, r6
  4208b8:	4b0b      	ldr	r3, [pc, #44]	; (4208e8 <lv_chart_set_next+0xb8>)
  4208ba:	4798      	blx	r3
        ser->start_point = (ser->start_point + 1) % ext->point_cnt; /*update the x for next incoming y*/
  4208bc:	88e3      	ldrh	r3, [r4, #6]
  4208be:	3301      	adds	r3, #1
  4208c0:	8c69      	ldrh	r1, [r5, #34]	; 0x22
  4208c2:	fb93 f2f1 	sdiv	r2, r3, r1
  4208c6:	fb01 3312 	mls	r3, r1, r2, r3
  4208ca:	80e3      	strh	r3, [r4, #6]
  4208cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4208ce:	bf00      	nop
  4208d0:	00416da9 	.word	0x00416da9
  4208d4:	0042e560 	.word	0x0042e560
  4208d8:	00416db5 	.word	0x00416db5
  4208dc:	00407ffd 	.word	0x00407ffd
  4208e0:	004205e9 	.word	0x004205e9
  4208e4:	0042044d 	.word	0x0042044d
  4208e8:	00420559 	.word	0x00420559

004208ec <lv_cont_get_style>:
}

static lv_style_list_t * lv_cont_get_style(lv_obj_t * cont, uint8_t type)
{
    lv_style_list_t * style_dsc_p;
    switch(type) {
  4208ec:	b909      	cbnz	r1, 4208f2 <lv_cont_get_style+0x6>
        case LV_CONT_PART_MAIN:
            style_dsc_p = &cont->style_list;
  4208ee:	3028      	adds	r0, #40	; 0x28
            break;
  4208f0:	4770      	bx	lr
        default:
            style_dsc_p = NULL;
  4208f2:	2000      	movs	r0, #0
    }

    return style_dsc_p;
}
  4208f4:	4770      	bx	lr
	...

004208f8 <lv_cont_layout_center>:
/**
 * Handle the center layout
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_center(lv_obj_t * cont)
{
  4208f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4208fc:	b083      	sub	sp, #12
  4208fe:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  420900:	2214      	movs	r2, #20
  420902:	2100      	movs	r1, #0
  420904:	4b3c      	ldr	r3, [pc, #240]	; (4209f8 <lv_cont_layout_center+0x100>)
  420906:	4798      	blx	r3
  420908:	4607      	mov	r7, r0
    lv_obj_t * child;
    uint32_t obj_num         = 0;
    lv_coord_t h_tot         = 0;

    lv_coord_t inner = lv_obj_get_style_pad_inner(cont, LV_CONT_PART_MAIN);
    _LV_LL_READ(cont->child_ll, child) {
  42090a:	1d35      	adds	r5, r6, #4
  42090c:	4628      	mov	r0, r5
  42090e:	4b3b      	ldr	r3, [pc, #236]	; (4209fc <lv_cont_layout_center+0x104>)
  420910:	4798      	blx	r3
  420912:	4604      	mov	r4, r0
    lv_coord_t h_tot         = 0;
  420914:	f04f 0800 	mov.w	r8, #0
    uint32_t obj_num         = 0;
  420918:	46c1      	mov	r9, r8
    _LV_LL_READ(cont->child_ll, child) {
  42091a:	e004      	b.n	420926 <lv_cont_layout_center+0x2e>
  42091c:	4621      	mov	r1, r4
  42091e:	4628      	mov	r0, r5
  420920:	4b37      	ldr	r3, [pc, #220]	; (420a00 <lv_cont_layout_center+0x108>)
  420922:	4798      	blx	r3
  420924:	4604      	mov	r4, r0
  420926:	b1a4      	cbz	r4, 420952 <lv_cont_layout_center+0x5a>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  420928:	4620      	mov	r0, r4
  42092a:	4b36      	ldr	r3, [pc, #216]	; (420a04 <lv_cont_layout_center+0x10c>)
  42092c:	4798      	blx	r3
  42092e:	2800      	cmp	r0, #0
  420930:	d1f4      	bne.n	42091c <lv_cont_layout_center+0x24>
  420932:	2104      	movs	r1, #4
  420934:	4620      	mov	r0, r4
  420936:	4b34      	ldr	r3, [pc, #208]	; (420a08 <lv_cont_layout_center+0x110>)
  420938:	4798      	blx	r3
  42093a:	2800      	cmp	r0, #0
  42093c:	d1ee      	bne.n	42091c <lv_cont_layout_center+0x24>
        h_tot += lv_obj_get_height(child) + inner;
  42093e:	4620      	mov	r0, r4
  420940:	4b32      	ldr	r3, [pc, #200]	; (420a0c <lv_cont_layout_center+0x114>)
  420942:	4798      	blx	r3
  420944:	4438      	add	r0, r7
  420946:	4480      	add	r8, r0
  420948:	fa0f f888 	sxth.w	r8, r8
        obj_num++;
  42094c:	f109 0901 	add.w	r9, r9, #1
  420950:	e7e4      	b.n	42091c <lv_cont_layout_center+0x24>
    }

    if(obj_num == 0) return;
  420952:	f1b9 0f00 	cmp.w	r9, #0
  420956:	d102      	bne.n	42095e <lv_cont_layout_center+0x66>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
        last_cord += lv_obj_get_height(child) + inner;
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
}
  420958:	b003      	add	sp, #12
  42095a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    h_tot -= inner;
  42095e:	eba8 0807 	sub.w	r8, r8, r7
  420962:	fa0f f888 	sxth.w	r8, r8
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  420966:	2101      	movs	r1, #1
  420968:	4630      	mov	r0, r6
  42096a:	4b29      	ldr	r3, [pc, #164]	; (420a10 <lv_cont_layout_center+0x118>)
  42096c:	4798      	blx	r3
    lv_coord_t last_cord = -(h_tot / 2);
  42096e:	4643      	mov	r3, r8
  420970:	f1b8 0f00 	cmp.w	r8, #0
  420974:	db0a      	blt.n	42098c <lv_cont_layout_center+0x94>
  420976:	ea4f 0863 	mov.w	r8, r3, asr #1
  42097a:	f1c8 0800 	rsb	r8, r8, #0
  42097e:	fa0f f888 	sxth.w	r8, r8
    _LV_LL_READ_BACK(cont->child_ll, child) {
  420982:	4628      	mov	r0, r5
  420984:	4b23      	ldr	r3, [pc, #140]	; (420a14 <lv_cont_layout_center+0x11c>)
  420986:	4798      	blx	r3
  420988:	4604      	mov	r4, r0
  42098a:	e019      	b.n	4209c0 <lv_cont_layout_center+0xc8>
    lv_coord_t last_cord = -(h_tot / 2);
  42098c:	f108 0301 	add.w	r3, r8, #1
  420990:	e7f1      	b.n	420976 <lv_cont_layout_center+0x7e>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
  420992:	eb08 0363 	add.w	r3, r8, r3, asr #1
  420996:	b21b      	sxth	r3, r3
  420998:	9300      	str	r3, [sp, #0]
  42099a:	2300      	movs	r3, #0
  42099c:	461a      	mov	r2, r3
  42099e:	4631      	mov	r1, r6
  4209a0:	4620      	mov	r0, r4
  4209a2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 420a20 <lv_cont_layout_center+0x128>
  4209a6:	47c8      	blx	r9
        last_cord += lv_obj_get_height(child) + inner;
  4209a8:	4620      	mov	r0, r4
  4209aa:	4b18      	ldr	r3, [pc, #96]	; (420a0c <lv_cont_layout_center+0x114>)
  4209ac:	4798      	blx	r3
  4209ae:	4438      	add	r0, r7
  4209b0:	4480      	add	r8, r0
  4209b2:	fa0f f888 	sxth.w	r8, r8
    _LV_LL_READ_BACK(cont->child_ll, child) {
  4209b6:	4621      	mov	r1, r4
  4209b8:	4628      	mov	r0, r5
  4209ba:	4b17      	ldr	r3, [pc, #92]	; (420a18 <lv_cont_layout_center+0x120>)
  4209bc:	4798      	blx	r3
  4209be:	4604      	mov	r4, r0
  4209c0:	b1a4      	cbz	r4, 4209ec <lv_cont_layout_center+0xf4>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  4209c2:	4620      	mov	r0, r4
  4209c4:	4b0f      	ldr	r3, [pc, #60]	; (420a04 <lv_cont_layout_center+0x10c>)
  4209c6:	4798      	blx	r3
  4209c8:	2800      	cmp	r0, #0
  4209ca:	d1f4      	bne.n	4209b6 <lv_cont_layout_center+0xbe>
  4209cc:	2104      	movs	r1, #4
  4209ce:	4620      	mov	r0, r4
  4209d0:	4b0d      	ldr	r3, [pc, #52]	; (420a08 <lv_cont_layout_center+0x110>)
  4209d2:	4798      	blx	r3
  4209d4:	2800      	cmp	r0, #0
  4209d6:	d1ee      	bne.n	4209b6 <lv_cont_layout_center+0xbe>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
  4209d8:	4620      	mov	r0, r4
  4209da:	4b0c      	ldr	r3, [pc, #48]	; (420a0c <lv_cont_layout_center+0x114>)
  4209dc:	4798      	blx	r3
  4209de:	fa1f f888 	uxth.w	r8, r8
  4209e2:	4603      	mov	r3, r0
  4209e4:	2800      	cmp	r0, #0
  4209e6:	dad4      	bge.n	420992 <lv_cont_layout_center+0x9a>
  4209e8:	1c43      	adds	r3, r0, #1
  4209ea:	e7d2      	b.n	420992 <lv_cont_layout_center+0x9a>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  4209ec:	2101      	movs	r1, #1
  4209ee:	4630      	mov	r0, r6
  4209f0:	4b0a      	ldr	r3, [pc, #40]	; (420a1c <lv_cont_layout_center+0x124>)
  4209f2:	4798      	blx	r3
  4209f4:	e7b0      	b.n	420958 <lv_cont_layout_center+0x60>
  4209f6:	bf00      	nop
  4209f8:	004073ed 	.word	0x004073ed
  4209fc:	004170b9 	.word	0x004170b9
  420a00:	004170cd 	.word	0x004170cd
  420a04:	00405d71 	.word	0x00405d71
  420a08:	00406d55 	.word	0x00406d55
  420a0c:	00405b59 	.word	0x00405b59
  420a10:	004056f9 	.word	0x004056f9
  420a14:	004170c3 	.word	0x004170c3
  420a18:	004170db 	.word	0x004170db
  420a1c:	00405729 	.word	0x00405729
  420a20:	004061a9 	.word	0x004061a9

00420a24 <lv_cont_layout_grid>:
/**
 * Handle the grid layout. Align same-sized objects in a grid
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_grid(lv_obj_t * cont)
{
  420a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  420a28:	b083      	sub	sp, #12
  420a2a:	4680      	mov	r8, r0
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
  420a2c:	4b2d      	ldr	r3, [pc, #180]	; (420ae4 <lv_cont_layout_grid+0xc0>)
  420a2e:	4798      	blx	r3
  420a30:	9000      	str	r0, [sp, #0]
  420a32:	2214      	movs	r2, #20
  420a34:	2100      	movs	r1, #0
  420a36:	4640      	mov	r0, r8
  420a38:	4c2b      	ldr	r4, [pc, #172]	; (420ae8 <lv_cont_layout_grid+0xc4>)
  420a3a:	47a0      	blx	r4
  420a3c:	4681      	mov	r9, r0
    lv_coord_t inner = lv_obj_get_style_pad_inner(cont, LV_CONT_PART_MAIN);
    lv_coord_t y_ofs = inner + lv_obj_get_height(lv_obj_get_child(cont, NULL));
  420a3e:	2100      	movs	r1, #0
  420a40:	4640      	mov	r0, r8
  420a42:	4b2a      	ldr	r3, [pc, #168]	; (420aec <lv_cont_layout_grid+0xc8>)
  420a44:	4798      	blx	r3
  420a46:	4b2a      	ldr	r3, [pc, #168]	; (420af0 <lv_cont_layout_grid+0xcc>)
  420a48:	4798      	blx	r3
  420a4a:	fa1f f989 	uxth.w	r9, r9
  420a4e:	fa19 f080 	uxtah	r0, r9, r0
  420a52:	fa1f fb80 	uxth.w	fp, r0

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  420a56:	2101      	movs	r1, #1
  420a58:	4640      	mov	r0, r8
  420a5a:	4b26      	ldr	r3, [pc, #152]	; (420af4 <lv_cont_layout_grid+0xd0>)
  420a5c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  420a5e:	2212      	movs	r2, #18
  420a60:	2100      	movs	r1, #0
  420a62:	4640      	mov	r0, r8
  420a64:	47a0      	blx	r4
  420a66:	4606      	mov	r6, r0
  420a68:	9001      	str	r0, [sp, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  420a6a:	2210      	movs	r2, #16
  420a6c:	2100      	movs	r1, #0
  420a6e:	4640      	mov	r0, r8
  420a70:	47a0      	blx	r4
  420a72:	4682      	mov	sl, r0
    /* Align the children */
    lv_coord_t left = lv_obj_get_style_pad_left(cont, LV_CONT_PART_MAIN);
    lv_coord_t act_x = left;
    lv_coord_t act_y = lv_obj_get_style_pad_top(cont, LV_CONT_PART_MAIN);
    lv_obj_t * child;
    _LV_LL_READ_BACK(cont->child_ll, child) {
  420a74:	f108 0504 	add.w	r5, r8, #4
  420a78:	4628      	mov	r0, r5
  420a7a:	4b1f      	ldr	r3, [pc, #124]	; (420af8 <lv_cont_layout_grid+0xd4>)
  420a7c:	4798      	blx	r3
  420a7e:	4604      	mov	r4, r0
  420a80:	e00d      	b.n	420a9e <lv_cont_layout_grid+0x7a>
        if(act_x + obj_w > w_fit + left) {
            act_x = left;
            act_y += y_ofs;
        }

        lv_obj_set_pos(child, act_x, act_y);
  420a82:	4652      	mov	r2, sl
  420a84:	4631      	mov	r1, r6
  420a86:	4620      	mov	r0, r4
  420a88:	4b1c      	ldr	r3, [pc, #112]	; (420afc <lv_cont_layout_grid+0xd8>)
  420a8a:	4798      	blx	r3
        act_x += inner + obj_w;
  420a8c:	444f      	add	r7, r9
  420a8e:	fa16 f687 	uxtah	r6, r6, r7
  420a92:	b236      	sxth	r6, r6
    _LV_LL_READ_BACK(cont->child_ll, child) {
  420a94:	4621      	mov	r1, r4
  420a96:	4628      	mov	r0, r5
  420a98:	4b19      	ldr	r3, [pc, #100]	; (420b00 <lv_cont_layout_grid+0xdc>)
  420a9a:	4798      	blx	r3
  420a9c:	4604      	mov	r4, r0
  420a9e:	b1cc      	cbz	r4, 420ad4 <lv_cont_layout_grid+0xb0>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  420aa0:	4620      	mov	r0, r4
  420aa2:	4b18      	ldr	r3, [pc, #96]	; (420b04 <lv_cont_layout_grid+0xe0>)
  420aa4:	4798      	blx	r3
  420aa6:	2800      	cmp	r0, #0
  420aa8:	d1f4      	bne.n	420a94 <lv_cont_layout_grid+0x70>
  420aaa:	2104      	movs	r1, #4
  420aac:	4620      	mov	r0, r4
  420aae:	4b16      	ldr	r3, [pc, #88]	; (420b08 <lv_cont_layout_grid+0xe4>)
  420ab0:	4798      	blx	r3
  420ab2:	2800      	cmp	r0, #0
  420ab4:	d1ee      	bne.n	420a94 <lv_cont_layout_grid+0x70>
        lv_coord_t obj_w = lv_obj_get_width(child);
  420ab6:	4620      	mov	r0, r4
  420ab8:	4b14      	ldr	r3, [pc, #80]	; (420b0c <lv_cont_layout_grid+0xe8>)
  420aba:	4798      	blx	r3
  420abc:	4607      	mov	r7, r0
        if(act_x + obj_w > w_fit + left) {
  420abe:	1832      	adds	r2, r6, r0
  420ac0:	9800      	ldr	r0, [sp, #0]
  420ac2:	9901      	ldr	r1, [sp, #4]
  420ac4:	1843      	adds	r3, r0, r1
  420ac6:	429a      	cmp	r2, r3
  420ac8:	dddb      	ble.n	420a82 <lv_cont_layout_grid+0x5e>
            act_y += y_ofs;
  420aca:	44da      	add	sl, fp
  420acc:	fa0f fa8a 	sxth.w	sl, sl
            act_x = left;
  420ad0:	460e      	mov	r6, r1
  420ad2:	e7d6      	b.n	420a82 <lv_cont_layout_grid+0x5e>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  420ad4:	2101      	movs	r1, #1
  420ad6:	4640      	mov	r0, r8
  420ad8:	4b0d      	ldr	r3, [pc, #52]	; (420b10 <lv_cont_layout_grid+0xec>)
  420ada:	4798      	blx	r3
}
  420adc:	b003      	add	sp, #12
  420ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  420ae2:	bf00      	nop
  420ae4:	00407629 	.word	0x00407629
  420ae8:	004073ed 	.word	0x004073ed
  420aec:	00405a29 	.word	0x00405a29
  420af0:	00405b59 	.word	0x00405b59
  420af4:	004056f9 	.word	0x004056f9
  420af8:	004170c3 	.word	0x004170c3
  420afc:	00405fe5 	.word	0x00405fe5
  420b00:	004170db 	.word	0x004170db
  420b04:	00405d71 	.word	0x00405d71
  420b08:	00406d55 	.word	0x00406d55
  420b0c:	00405b29 	.word	0x00405b29
  420b10:	00405729 	.word	0x00405729

00420b14 <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
  420b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  420b18:	b089      	sub	sp, #36	; 0x24
  420b1a:	4604      	mov	r4, r0
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
  420b1c:	2101      	movs	r1, #1
  420b1e:	4bc2      	ldr	r3, [pc, #776]	; (420e28 <lv_cont_refr_autofit+0x314>)
  420b20:	4798      	blx	r3
  420b22:	b110      	cbz	r0, 420b2a <lv_cont_refr_autofit+0x16>
    else {
        LV_LOG_ERROR("LV_LAYOUT_MAX_RECURSION reached! You may have encountered issue #1539.");
    }

    recursion_level--;
}
  420b24:	b009      	add	sp, #36	; 0x24
  420b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  420b2a:	4620      	mov	r0, r4
  420b2c:	4bbf      	ldr	r3, [pc, #764]	; (420e2c <lv_cont_refr_autofit+0x318>)
  420b2e:	4798      	blx	r3
  420b30:	4605      	mov	r5, r0
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
  420b32:	7803      	ldrb	r3, [r0, #0]
  420b34:	f013 0ff0 	tst.w	r3, #240	; 0xf0
  420b38:	d103      	bne.n	420b42 <lv_cont_refr_autofit+0x2e>
  420b3a:	7843      	ldrb	r3, [r0, #1]
  420b3c:	f013 0f0f 	tst.w	r3, #15
  420b40:	d0f0      	beq.n	420b24 <lv_cont_refr_autofit+0x10>
    recursion_level++;
  420b42:	4abb      	ldr	r2, [pc, #748]	; (420e30 <lv_cont_refr_autofit+0x31c>)
  420b44:	6813      	ldr	r3, [r2, #0]
  420b46:	3301      	adds	r3, #1
  420b48:	6013      	str	r3, [r2, #0]
    if(recursion_level <= LV_LAYOUT_MAX_RECURSION) {
  420b4a:	2b0a      	cmp	r3, #10
  420b4c:	dd04      	ble.n	420b58 <lv_cont_refr_autofit+0x44>
    recursion_level--;
  420b4e:	4ab8      	ldr	r2, [pc, #736]	; (420e30 <lv_cont_refr_autofit+0x31c>)
  420b50:	6813      	ldr	r3, [r2, #0]
  420b52:	3b01      	subs	r3, #1
  420b54:	6013      	str	r3, [r2, #0]
  420b56:	e7e5      	b.n	420b24 <lv_cont_refr_autofit+0x10>
        lv_obj_t * par               = lv_obj_get_parent(cont);
  420b58:	4620      	mov	r0, r4
  420b5a:	4bb6      	ldr	r3, [pc, #728]	; (420e34 <lv_cont_refr_autofit+0x320>)
  420b5c:	4798      	blx	r3
  420b5e:	4680      	mov	r8, r0
        lv_area_copy(&parent_area, &par->coords);
  420b60:	f100 0110 	add.w	r1, r0, #16
    uint8_t * d8 = (uint8_t *)dst;
  420b64:	aa04      	add	r2, sp, #16
  420b66:	2308      	movs	r3, #8
  420b68:	e004      	b.n	420b74 <lv_cont_refr_autofit+0x60>
        *d8 = *s8;
  420b6a:	f811 0b01 	ldrb.w	r0, [r1], #1
  420b6e:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  420b72:	3b01      	subs	r3, #1
    while(len) {
  420b74:	2b00      	cmp	r3, #0
  420b76:	d1f8      	bne.n	420b6a <lv_cont_refr_autofit+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  420b78:	2212      	movs	r2, #18
  420b7a:	2100      	movs	r1, #0
  420b7c:	4640      	mov	r0, r8
  420b7e:	4eae      	ldr	r6, [pc, #696]	; (420e38 <lv_cont_refr_autofit+0x324>)
  420b80:	47b0      	blx	r6
        parent_area.x1 += lv_obj_get_style_pad_left(par, LV_OBJ_PART_MAIN);
  420b82:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  420b86:	fa13 f080 	uxtah	r0, r3, r0
  420b8a:	f8ad 0010 	strh.w	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  420b8e:	2213      	movs	r2, #19
  420b90:	2100      	movs	r1, #0
  420b92:	4640      	mov	r0, r8
  420b94:	47b0      	blx	r6
        parent_area.x2 -= lv_obj_get_style_pad_right(par, LV_OBJ_PART_MAIN);
  420b96:	b280      	uxth	r0, r0
  420b98:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  420b9c:	1a18      	subs	r0, r3, r0
  420b9e:	f8ad 0014 	strh.w	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  420ba2:	2210      	movs	r2, #16
  420ba4:	2100      	movs	r1, #0
  420ba6:	4640      	mov	r0, r8
  420ba8:	47b0      	blx	r6
        parent_area.y1 += lv_obj_get_style_pad_top(par, LV_OBJ_PART_MAIN);
  420baa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  420bae:	fa13 f080 	uxtah	r0, r3, r0
  420bb2:	f8ad 0012 	strh.w	r0, [sp, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  420bb6:	2211      	movs	r2, #17
  420bb8:	2100      	movs	r1, #0
  420bba:	4640      	mov	r0, r8
  420bbc:	47b0      	blx	r6
        parent_area.y2 -= lv_obj_get_style_pad_bottom(par, LV_OBJ_PART_MAIN);
  420bbe:	b280      	uxth	r0, r0
  420bc0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  420bc4:	1a18      	subs	r0, r3, r0
  420bc6:	f8ad 0016 	strh.w	r0, [sp, #22]
        lv_obj_get_coords(cont, &ori);
  420bca:	a902      	add	r1, sp, #8
  420bcc:	4620      	mov	r0, r4
  420bce:	4e9b      	ldr	r6, [pc, #620]	; (420e3c <lv_cont_refr_autofit+0x328>)
  420bd0:	47b0      	blx	r6
        lv_obj_get_coords(cont, &tight_area);
  420bd2:	4669      	mov	r1, sp
  420bd4:	4620      	mov	r0, r4
  420bd6:	47b0      	blx	r6
        bool has_children = _lv_ll_is_empty(&cont->child_ll) ? false : true;
  420bd8:	1d26      	adds	r6, r4, #4
  420bda:	4630      	mov	r0, r6
  420bdc:	4b98      	ldr	r3, [pc, #608]	; (420e40 <lv_cont_refr_autofit+0x32c>)
  420bde:	4798      	blx	r3
  420be0:	f080 0001 	eor.w	r0, r0, #1
        if(has_children) {
  420be4:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
  420be8:	d103      	bne.n	420bf2 <lv_cont_refr_autofit+0xde>
        lv_area_copy(&parent_area, &par->coords);
  420bea:	a902      	add	r1, sp, #8
  420bec:	aa06      	add	r2, sp, #24
  420bee:	2308      	movs	r3, #8
  420bf0:	e09c      	b.n	420d2c <lv_cont_refr_autofit+0x218>
            tight_area.x1 = LV_COORD_MAX;
  420bf2:	f647 4318 	movw	r3, #31768	; 0x7c18
  420bf6:	f8ad 3000 	strh.w	r3, [sp]
            tight_area.y1 = LV_COORD_MAX;
  420bfa:	f8ad 3002 	strh.w	r3, [sp, #2]
            tight_area.x2 = LV_COORD_MIN;
  420bfe:	f248 33e8 	movw	r3, #33768	; 0x83e8
  420c02:	f8ad 3004 	strh.w	r3, [sp, #4]
            tight_area.y2 = LV_COORD_MIN;
  420c06:	f8ad 3006 	strh.w	r3, [sp, #6]
            _LV_LL_READ(cont->child_ll, child_i) {
  420c0a:	4630      	mov	r0, r6
  420c0c:	4b8d      	ldr	r3, [pc, #564]	; (420e44 <lv_cont_refr_autofit+0x330>)
  420c0e:	4798      	blx	r3
  420c10:	4607      	mov	r7, r0
  420c12:	e004      	b.n	420c1e <lv_cont_refr_autofit+0x10a>
  420c14:	4639      	mov	r1, r7
  420c16:	4630      	mov	r0, r6
  420c18:	4b8b      	ldr	r3, [pc, #556]	; (420e48 <lv_cont_refr_autofit+0x334>)
  420c1a:	4798      	blx	r3
  420c1c:	4607      	mov	r7, r0
  420c1e:	2f00      	cmp	r7, #0
  420c20:	d055      	beq.n	420cce <lv_cont_refr_autofit+0x1ba>
                if(lv_obj_get_hidden(child_i) != false) continue;
  420c22:	4638      	mov	r0, r7
  420c24:	4b89      	ldr	r3, [pc, #548]	; (420e4c <lv_cont_refr_autofit+0x338>)
  420c26:	4798      	blx	r3
  420c28:	2800      	cmp	r0, #0
  420c2a:	d1f3      	bne.n	420c14 <lv_cont_refr_autofit+0x100>
                if(ext->fit_left != LV_FIT_PARENT) {
  420c2c:	782b      	ldrb	r3, [r5, #0]
  420c2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
  420c32:	2b20      	cmp	r3, #32
  420c34:	d00e      	beq.n	420c54 <lv_cont_refr_autofit+0x140>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  420c36:	2217      	movs	r2, #23
  420c38:	2100      	movs	r1, #0
  420c3a:	4638      	mov	r0, r7
  420c3c:	4b7e      	ldr	r3, [pc, #504]	; (420e38 <lv_cont_refr_autofit+0x324>)
  420c3e:	4798      	blx	r3
                    tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1 - mleft);
  420c40:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
  420c44:	1a18      	subs	r0, r3, r0
  420c46:	f9bd 3000 	ldrsh.w	r3, [sp]
  420c4a:	4298      	cmp	r0, r3
  420c4c:	bfa8      	it	ge
  420c4e:	4618      	movge	r0, r3
  420c50:	f8ad 0000 	strh.w	r0, [sp]
                if(ext->fit_right != LV_FIT_PARENT) {
  420c54:	782b      	ldrb	r3, [r5, #0]
  420c56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  420c5a:	2b80      	cmp	r3, #128	; 0x80
  420c5c:	d00e      	beq.n	420c7c <lv_cont_refr_autofit+0x168>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  420c5e:	2218      	movs	r2, #24
  420c60:	2100      	movs	r1, #0
  420c62:	4638      	mov	r0, r7
  420c64:	4b74      	ldr	r3, [pc, #464]	; (420e38 <lv_cont_refr_autofit+0x324>)
  420c66:	4798      	blx	r3
                    tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2 + mright);
  420c68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
  420c6c:	4418      	add	r0, r3
  420c6e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  420c72:	4298      	cmp	r0, r3
  420c74:	bfb8      	it	lt
  420c76:	4618      	movlt	r0, r3
  420c78:	f8ad 0004 	strh.w	r0, [sp, #4]
                if(ext->fit_top != LV_FIT_PARENT) {
  420c7c:	786b      	ldrb	r3, [r5, #1]
  420c7e:	f003 0303 	and.w	r3, r3, #3
  420c82:	2b02      	cmp	r3, #2
  420c84:	d00e      	beq.n	420ca4 <lv_cont_refr_autofit+0x190>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  420c86:	2215      	movs	r2, #21
  420c88:	2100      	movs	r1, #0
  420c8a:	4638      	mov	r0, r7
  420c8c:	4b6a      	ldr	r3, [pc, #424]	; (420e38 <lv_cont_refr_autofit+0x324>)
  420c8e:	4798      	blx	r3
                    tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1 - mtop);
  420c90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
  420c94:	1a18      	subs	r0, r3, r0
  420c96:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
  420c9a:	4298      	cmp	r0, r3
  420c9c:	bfa8      	it	ge
  420c9e:	4618      	movge	r0, r3
  420ca0:	f8ad 0002 	strh.w	r0, [sp, #2]
                if(ext->fit_bottom != LV_FIT_PARENT) {
  420ca4:	786b      	ldrb	r3, [r5, #1]
  420ca6:	f003 030c 	and.w	r3, r3, #12
  420caa:	2b08      	cmp	r3, #8
  420cac:	d0b2      	beq.n	420c14 <lv_cont_refr_autofit+0x100>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  420cae:	2216      	movs	r2, #22
  420cb0:	2100      	movs	r1, #0
  420cb2:	4638      	mov	r0, r7
  420cb4:	4b60      	ldr	r3, [pc, #384]	; (420e38 <lv_cont_refr_autofit+0x324>)
  420cb6:	4798      	blx	r3
                    tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2 + mbottom);
  420cb8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  420cbc:	4418      	add	r0, r3
  420cbe:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  420cc2:	4298      	cmp	r0, r3
  420cc4:	bfb8      	it	lt
  420cc6:	4618      	movlt	r0, r3
  420cc8:	f8ad 0006 	strh.w	r0, [sp, #6]
  420ccc:	e7a2      	b.n	420c14 <lv_cont_refr_autofit+0x100>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  420cce:	2212      	movs	r2, #18
  420cd0:	2100      	movs	r1, #0
  420cd2:	4620      	mov	r0, r4
  420cd4:	4f58      	ldr	r7, [pc, #352]	; (420e38 <lv_cont_refr_autofit+0x324>)
  420cd6:	47b8      	blx	r7
            tight_area.x1 -= lv_obj_get_style_pad_left(cont, LV_CONT_PART_MAIN);
  420cd8:	b280      	uxth	r0, r0
  420cda:	f8bd 3000 	ldrh.w	r3, [sp]
  420cde:	1a18      	subs	r0, r3, r0
  420ce0:	f8ad 0000 	strh.w	r0, [sp]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  420ce4:	2213      	movs	r2, #19
  420ce6:	2100      	movs	r1, #0
  420ce8:	4620      	mov	r0, r4
  420cea:	47b8      	blx	r7
            tight_area.x2 += lv_obj_get_style_pad_right(cont, LV_CONT_PART_MAIN);
  420cec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  420cf0:	fa13 f080 	uxtah	r0, r3, r0
  420cf4:	f8ad 0004 	strh.w	r0, [sp, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  420cf8:	2210      	movs	r2, #16
  420cfa:	2100      	movs	r1, #0
  420cfc:	4620      	mov	r0, r4
  420cfe:	47b8      	blx	r7
            tight_area.y1 -= lv_obj_get_style_pad_top(cont, LV_CONT_PART_MAIN);
  420d00:	b280      	uxth	r0, r0
  420d02:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  420d06:	1a18      	subs	r0, r3, r0
  420d08:	f8ad 0002 	strh.w	r0, [sp, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  420d0c:	2211      	movs	r2, #17
  420d0e:	2100      	movs	r1, #0
  420d10:	4620      	mov	r0, r4
  420d12:	47b8      	blx	r7
            tight_area.y2 += lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
  420d14:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  420d18:	fa13 f080 	uxtah	r0, r3, r0
  420d1c:	f8ad 0006 	strh.w	r0, [sp, #6]
  420d20:	e763      	b.n	420bea <lv_cont_refr_autofit+0xd6>
        *d8 = *s8;
  420d22:	f811 0b01 	ldrb.w	r0, [r1], #1
  420d26:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  420d2a:	3b01      	subs	r3, #1
    while(len) {
  420d2c:	2b00      	cmp	r3, #0
  420d2e:	d1f8      	bne.n	420d22 <lv_cont_refr_autofit+0x20e>
        switch(ext->fit_left) {
  420d30:	782b      	ldrb	r3, [r5, #0]
  420d32:	f3c3 1301 	ubfx	r3, r3, #4, #2
  420d36:	2b02      	cmp	r3, #2
  420d38:	d037      	beq.n	420daa <lv_cont_refr_autofit+0x296>
  420d3a:	d83b      	bhi.n	420db4 <lv_cont_refr_autofit+0x2a0>
  420d3c:	2b01      	cmp	r3, #1
  420d3e:	d103      	bne.n	420d48 <lv_cont_refr_autofit+0x234>
                new_area.x1 = tight_area.x1;
  420d40:	f9bd 3000 	ldrsh.w	r3, [sp]
  420d44:	f8ad 3018 	strh.w	r3, [sp, #24]
        switch(ext->fit_right) {
  420d48:	782b      	ldrb	r3, [r5, #0]
  420d4a:	099b      	lsrs	r3, r3, #6
  420d4c:	2b02      	cmp	r3, #2
  420d4e:	d041      	beq.n	420dd4 <lv_cont_refr_autofit+0x2c0>
  420d50:	d845      	bhi.n	420dde <lv_cont_refr_autofit+0x2ca>
  420d52:	2b01      	cmp	r3, #1
  420d54:	d103      	bne.n	420d5e <lv_cont_refr_autofit+0x24a>
                new_area.x2 = tight_area.x2;
  420d56:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  420d5a:	f8ad 301c 	strh.w	r3, [sp, #28]
        switch(ext->fit_top) {
  420d5e:	786b      	ldrb	r3, [r5, #1]
  420d60:	f003 0303 	and.w	r3, r3, #3
  420d64:	2b02      	cmp	r3, #2
  420d66:	d04a      	beq.n	420dfe <lv_cont_refr_autofit+0x2ea>
  420d68:	d84e      	bhi.n	420e08 <lv_cont_refr_autofit+0x2f4>
  420d6a:	2b01      	cmp	r3, #1
  420d6c:	d103      	bne.n	420d76 <lv_cont_refr_autofit+0x262>
                new_area.y1 = tight_area.y1;
  420d6e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
  420d72:	f8ad 301a 	strh.w	r3, [sp, #26]
        switch(ext->fit_bottom) {
  420d76:	786b      	ldrb	r3, [r5, #1]
  420d78:	f3c3 0381 	ubfx	r3, r3, #2, #2
  420d7c:	2b02      	cmp	r3, #2
  420d7e:	d069      	beq.n	420e54 <lv_cont_refr_autofit+0x340>
  420d80:	d86d      	bhi.n	420e5e <lv_cont_refr_autofit+0x34a>
  420d82:	2b01      	cmp	r3, #1
  420d84:	d103      	bne.n	420d8e <lv_cont_refr_autofit+0x27a>
                new_area.y2 = tight_area.y2;
  420d86:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  420d8a:	f8ad 301e 	strh.w	r3, [sp, #30]
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
  420d8e:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  420d92:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  420d96:	429a      	cmp	r2, r3
  420d98:	d071      	beq.n	420e7e <lv_cont_refr_autofit+0x36a>
            lv_obj_invalidate(cont);
  420d9a:	4620      	mov	r0, r4
  420d9c:	4b2c      	ldr	r3, [pc, #176]	; (420e50 <lv_cont_refr_autofit+0x33c>)
  420d9e:	4798      	blx	r3
            lv_area_copy(&cont->coords, &new_area);
  420da0:	f104 0110 	add.w	r1, r4, #16
    const uint8_t * s8 = (const uint8_t *)src;
  420da4:	aa06      	add	r2, sp, #24
  420da6:	2308      	movs	r3, #8
  420da8:	e082      	b.n	420eb0 <lv_cont_refr_autofit+0x39c>
                new_area.x1 = parent_area.x1;
  420daa:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  420dae:	f8ad 3018 	strh.w	r3, [sp, #24]
                break;
  420db2:	e7c9      	b.n	420d48 <lv_cont_refr_autofit+0x234>
                new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, parent_area.x1) : parent_area.x1;
  420db4:	f1b9 0f00 	cmp.w	r9, #0
  420db8:	d009      	beq.n	420dce <lv_cont_refr_autofit+0x2ba>
  420dba:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  420dbe:	f9bd 2000 	ldrsh.w	r2, [sp]
  420dc2:	4293      	cmp	r3, r2
  420dc4:	bfa8      	it	ge
  420dc6:	4613      	movge	r3, r2
  420dc8:	f8ad 3018 	strh.w	r3, [sp, #24]
                break;
  420dcc:	e7bc      	b.n	420d48 <lv_cont_refr_autofit+0x234>
                new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, parent_area.x1) : parent_area.x1;
  420dce:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  420dd2:	e7f9      	b.n	420dc8 <lv_cont_refr_autofit+0x2b4>
                new_area.x2 = parent_area.x2;
  420dd4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  420dd8:	f8ad 301c 	strh.w	r3, [sp, #28]
                break;
  420ddc:	e7bf      	b.n	420d5e <lv_cont_refr_autofit+0x24a>
                new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, parent_area.x2) : parent_area.x2;
  420dde:	f1b9 0f00 	cmp.w	r9, #0
  420de2:	d009      	beq.n	420df8 <lv_cont_refr_autofit+0x2e4>
  420de4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  420de8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
  420dec:	4293      	cmp	r3, r2
  420dee:	bfb8      	it	lt
  420df0:	4613      	movlt	r3, r2
  420df2:	f8ad 301c 	strh.w	r3, [sp, #28]
                break;
  420df6:	e7b2      	b.n	420d5e <lv_cont_refr_autofit+0x24a>
                new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, parent_area.x2) : parent_area.x2;
  420df8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  420dfc:	e7f9      	b.n	420df2 <lv_cont_refr_autofit+0x2de>
                new_area.y1 = parent_area.y1;
  420dfe:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  420e02:	f8ad 301a 	strh.w	r3, [sp, #26]
                break;
  420e06:	e7b6      	b.n	420d76 <lv_cont_refr_autofit+0x262>
                new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, parent_area.y1) : parent_area.y1;
  420e08:	f1b9 0f00 	cmp.w	r9, #0
  420e0c:	d009      	beq.n	420e22 <lv_cont_refr_autofit+0x30e>
  420e0e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  420e12:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  420e16:	4293      	cmp	r3, r2
  420e18:	bfa8      	it	ge
  420e1a:	4613      	movge	r3, r2
  420e1c:	f8ad 301a 	strh.w	r3, [sp, #26]
                break;
  420e20:	e7a9      	b.n	420d76 <lv_cont_refr_autofit+0x262>
                new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, parent_area.y1) : parent_area.y1;
  420e22:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  420e26:	e7f9      	b.n	420e1c <lv_cont_refr_autofit+0x308>
  420e28:	00406d55 	.word	0x00406d55
  420e2c:	00407ffd 	.word	0x00407ffd
  420e30:	20414850 	.word	0x20414850
  420e34:	00405955 	.word	0x00405955
  420e38:	004073ed 	.word	0x004073ed
  420e3c:	00405a69 	.word	0x00405a69
  420e40:	00417361 	.word	0x00417361
  420e44:	004170b9 	.word	0x004170b9
  420e48:	004170cd 	.word	0x004170cd
  420e4c:	00405d71 	.word	0x00405d71
  420e50:	00405f01 	.word	0x00405f01
                new_area.y2 = parent_area.y2;
  420e54:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  420e58:	f8ad 301e 	strh.w	r3, [sp, #30]
                break;
  420e5c:	e797      	b.n	420d8e <lv_cont_refr_autofit+0x27a>
                new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, parent_area.y2) : parent_area.y2;
  420e5e:	f1b9 0f00 	cmp.w	r9, #0
  420e62:	d009      	beq.n	420e78 <lv_cont_refr_autofit+0x364>
  420e64:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  420e68:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  420e6c:	4293      	cmp	r3, r2
  420e6e:	bfb8      	it	lt
  420e70:	4613      	movlt	r3, r2
  420e72:	f8ad 301e 	strh.w	r3, [sp, #30]
                break;
  420e76:	e78a      	b.n	420d8e <lv_cont_refr_autofit+0x27a>
                new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, parent_area.y2) : parent_area.y2;
  420e78:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  420e7c:	e7f9      	b.n	420e72 <lv_cont_refr_autofit+0x35e>
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
  420e7e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
  420e82:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
  420e86:	429a      	cmp	r2, r3
  420e88:	d187      	bne.n	420d9a <lv_cont_refr_autofit+0x286>
  420e8a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
  420e8e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  420e92:	429a      	cmp	r2, r3
  420e94:	d181      	bne.n	420d9a <lv_cont_refr_autofit+0x286>
           cont->coords.y2 != new_area.y2) {
  420e96:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
  420e9a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
  420e9e:	429a      	cmp	r2, r3
  420ea0:	f47f af7b 	bne.w	420d9a <lv_cont_refr_autofit+0x286>
  420ea4:	e653      	b.n	420b4e <lv_cont_refr_autofit+0x3a>
        *d8 = *s8;
  420ea6:	f812 0b01 	ldrb.w	r0, [r2], #1
  420eaa:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  420eae:	3b01      	subs	r3, #1
    while(len) {
  420eb0:	2b00      	cmp	r3, #0
  420eb2:	d1f8      	bne.n	420ea6 <lv_cont_refr_autofit+0x392>
            lv_obj_invalidate(cont);
  420eb4:	4620      	mov	r0, r4
  420eb6:	4b13      	ldr	r3, [pc, #76]	; (420f04 <lv_cont_refr_autofit+0x3f0>)
  420eb8:	4798      	blx	r3
            cont->signal_cb(cont, LV_SIGNAL_COORD_CHG, &ori);
  420eba:	69e3      	ldr	r3, [r4, #28]
  420ebc:	aa02      	add	r2, sp, #8
  420ebe:	2102      	movs	r1, #2
  420ec0:	4620      	mov	r0, r4
  420ec2:	4798      	blx	r3
            par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
  420ec4:	f8d8 301c 	ldr.w	r3, [r8, #28]
  420ec8:	4622      	mov	r2, r4
  420eca:	2101      	movs	r1, #1
  420ecc:	4640      	mov	r0, r8
  420ece:	4798      	blx	r3
            if(lv_obj_get_auto_realign(cont)) {
  420ed0:	4620      	mov	r0, r4
  420ed2:	4b0d      	ldr	r3, [pc, #52]	; (420f08 <lv_cont_refr_autofit+0x3f4>)
  420ed4:	4798      	blx	r3
  420ed6:	b920      	cbnz	r0, 420ee2 <lv_cont_refr_autofit+0x3ce>
            _LV_LL_READ(cont->child_ll, child_i) {
  420ed8:	4630      	mov	r0, r6
  420eda:	4b0c      	ldr	r3, [pc, #48]	; (420f0c <lv_cont_refr_autofit+0x3f8>)
  420edc:	4798      	blx	r3
  420ede:	4604      	mov	r4, r0
  420ee0:	e00d      	b.n	420efe <lv_cont_refr_autofit+0x3ea>
                lv_obj_realign(cont);
  420ee2:	4620      	mov	r0, r4
  420ee4:	4b0a      	ldr	r3, [pc, #40]	; (420f10 <lv_cont_refr_autofit+0x3fc>)
  420ee6:	4798      	blx	r3
  420ee8:	e7f6      	b.n	420ed8 <lv_cont_refr_autofit+0x3c4>
                child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, &ori);
  420eea:	69e3      	ldr	r3, [r4, #28]
  420eec:	aa02      	add	r2, sp, #8
  420eee:	2103      	movs	r1, #3
  420ef0:	4620      	mov	r0, r4
  420ef2:	4798      	blx	r3
            _LV_LL_READ(cont->child_ll, child_i) {
  420ef4:	4621      	mov	r1, r4
  420ef6:	4630      	mov	r0, r6
  420ef8:	4b06      	ldr	r3, [pc, #24]	; (420f14 <lv_cont_refr_autofit+0x400>)
  420efa:	4798      	blx	r3
  420efc:	4604      	mov	r4, r0
  420efe:	2c00      	cmp	r4, #0
  420f00:	d1f3      	bne.n	420eea <lv_cont_refr_autofit+0x3d6>
  420f02:	e624      	b.n	420b4e <lv_cont_refr_autofit+0x3a>
  420f04:	00405f01 	.word	0x00405f01
  420f08:	00405b89 	.word	0x00405b89
  420f0c:	004170b9 	.word	0x004170b9
  420f10:	0040661d 	.word	0x0040661d
  420f14:	004170cd 	.word	0x004170cd

00420f18 <lv_cont_create>:
{
  420f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  420f1a:	4607      	mov	r7, r0
  420f1c:	460e      	mov	r6, r1
    lv_obj_t * cont = lv_obj_create(par, copy);
  420f1e:	4b3b      	ldr	r3, [pc, #236]	; (42100c <lv_cont_create+0xf4>)
  420f20:	4798      	blx	r3
  420f22:	4605      	mov	r5, r0
    LV_ASSERT_MEM(cont);
  420f24:	4b3a      	ldr	r3, [pc, #232]	; (421010 <lv_cont_create+0xf8>)
  420f26:	4798      	blx	r3
  420f28:	b1c8      	cbz	r0, 420f5e <lv_cont_create+0x46>
    if(cont == NULL) return NULL;
  420f2a:	2d00      	cmp	r5, #0
  420f2c:	d065      	beq.n	420ffa <lv_cont_create+0xe2>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(cont);
  420f2e:	4b39      	ldr	r3, [pc, #228]	; (421014 <lv_cont_create+0xfc>)
  420f30:	681b      	ldr	r3, [r3, #0]
  420f32:	b1d3      	cbz	r3, 420f6a <lv_cont_create+0x52>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(cont);
  420f34:	4b38      	ldr	r3, [pc, #224]	; (421018 <lv_cont_create+0x100>)
  420f36:	681b      	ldr	r3, [r3, #0]
  420f38:	b1eb      	cbz	r3, 420f76 <lv_cont_create+0x5e>
    lv_obj_allocate_ext_attr(cont, sizeof(lv_cont_ext_t));
  420f3a:	2102      	movs	r1, #2
  420f3c:	4628      	mov	r0, r5
  420f3e:	4b37      	ldr	r3, [pc, #220]	; (42101c <lv_cont_create+0x104>)
  420f40:	4798      	blx	r3
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  420f42:	4628      	mov	r0, r5
  420f44:	4b36      	ldr	r3, [pc, #216]	; (421020 <lv_cont_create+0x108>)
  420f46:	4798      	blx	r3
    if(ext == NULL) {
  420f48:	4604      	mov	r4, r0
  420f4a:	b1d0      	cbz	r0, 420f82 <lv_cont_create+0x6a>
    LV_ASSERT_MEM(ext);
  420f4c:	4b30      	ldr	r3, [pc, #192]	; (421010 <lv_cont_create+0xf8>)
  420f4e:	4798      	blx	r3
  420f50:	b9e0      	cbnz	r0, 420f8c <lv_cont_create+0x74>
  420f52:	4622      	mov	r2, r4
  420f54:	2300      	movs	r3, #0
  420f56:	4833      	ldr	r0, [pc, #204]	; (421024 <lv_cont_create+0x10c>)
  420f58:	4933      	ldr	r1, [pc, #204]	; (421028 <lv_cont_create+0x110>)
  420f5a:	4788      	blx	r1
  420f5c:	e7fe      	b.n	420f5c <lv_cont_create+0x44>
    LV_ASSERT_MEM(cont);
  420f5e:	462a      	mov	r2, r5
  420f60:	2300      	movs	r3, #0
  420f62:	4830      	ldr	r0, [pc, #192]	; (421024 <lv_cont_create+0x10c>)
  420f64:	4930      	ldr	r1, [pc, #192]	; (421028 <lv_cont_create+0x110>)
  420f66:	4788      	blx	r1
  420f68:	e7fe      	b.n	420f68 <lv_cont_create+0x50>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(cont);
  420f6a:	4628      	mov	r0, r5
  420f6c:	4b2f      	ldr	r3, [pc, #188]	; (42102c <lv_cont_create+0x114>)
  420f6e:	4798      	blx	r3
  420f70:	4b28      	ldr	r3, [pc, #160]	; (421014 <lv_cont_create+0xfc>)
  420f72:	6018      	str	r0, [r3, #0]
  420f74:	e7de      	b.n	420f34 <lv_cont_create+0x1c>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(cont);
  420f76:	4628      	mov	r0, r5
  420f78:	4b2d      	ldr	r3, [pc, #180]	; (421030 <lv_cont_create+0x118>)
  420f7a:	4798      	blx	r3
  420f7c:	4b26      	ldr	r3, [pc, #152]	; (421018 <lv_cont_create+0x100>)
  420f7e:	6018      	str	r0, [r3, #0]
  420f80:	e7db      	b.n	420f3a <lv_cont_create+0x22>
        lv_obj_del(cont);
  420f82:	4628      	mov	r0, r5
  420f84:	4b2b      	ldr	r3, [pc, #172]	; (421034 <lv_cont_create+0x11c>)
  420f86:	4798      	blx	r3
        return NULL;
  420f88:	2500      	movs	r5, #0
  420f8a:	e036      	b.n	420ffa <lv_cont_create+0xe2>
    ext->fit_left   = LV_FIT_NONE;
  420f8c:	7823      	ldrb	r3, [r4, #0]
    ext->fit_top    = LV_FIT_NONE;
  420f8e:	7862      	ldrb	r2, [r4, #1]
    ext->fit_bottom = LV_FIT_NONE;
  420f90:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
  420f94:	f36f 0283 	bfc	r2, #2, #2
  420f98:	7062      	strb	r2, [r4, #1]
    ext->layout     = LV_LAYOUT_OFF;
  420f9a:	f003 030f 	and.w	r3, r3, #15
  420f9e:	f36f 0303 	bfc	r3, #0, #4
  420fa2:	7023      	strb	r3, [r4, #0]
    lv_obj_set_signal_cb(cont, lv_cont_signal);
  420fa4:	4924      	ldr	r1, [pc, #144]	; (421038 <lv_cont_create+0x120>)
  420fa6:	4628      	mov	r0, r5
  420fa8:	4b24      	ldr	r3, [pc, #144]	; (42103c <lv_cont_create+0x124>)
  420faa:	4798      	blx	r3
    if(copy == NULL) {
  420fac:	b33e      	cbz	r6, 420ffe <lv_cont_create+0xe6>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  420fae:	4630      	mov	r0, r6
  420fb0:	4b1b      	ldr	r3, [pc, #108]	; (421020 <lv_cont_create+0x108>)
  420fb2:	4798      	blx	r3
        ext->fit_left            = copy_ext->fit_left;
  420fb4:	7803      	ldrb	r3, [r0, #0]
  420fb6:	f3c3 1301 	ubfx	r3, r3, #4, #2
  420fba:	7822      	ldrb	r2, [r4, #0]
  420fbc:	f363 1205 	bfi	r2, r3, #4, #2
  420fc0:	7022      	strb	r2, [r4, #0]
        ext->fit_right           = copy_ext->fit_right;
  420fc2:	7803      	ldrb	r3, [r0, #0]
  420fc4:	099b      	lsrs	r3, r3, #6
  420fc6:	b2d2      	uxtb	r2, r2
  420fc8:	f363 1287 	bfi	r2, r3, #6, #2
  420fcc:	7022      	strb	r2, [r4, #0]
        ext->fit_top             = copy_ext->fit_top;
  420fce:	7842      	ldrb	r2, [r0, #1]
  420fd0:	7863      	ldrb	r3, [r4, #1]
  420fd2:	f362 0301 	bfi	r3, r2, #0, #2
  420fd6:	7063      	strb	r3, [r4, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
  420fd8:	7843      	ldrb	r3, [r0, #1]
  420fda:	f3c3 0381 	ubfx	r3, r3, #2, #2
  420fde:	7862      	ldrb	r2, [r4, #1]
  420fe0:	f363 0283 	bfi	r2, r3, #2, #2
  420fe4:	7062      	strb	r2, [r4, #1]
        ext->layout              = copy_ext->layout;
  420fe6:	7802      	ldrb	r2, [r0, #0]
  420fe8:	7823      	ldrb	r3, [r4, #0]
  420fea:	f362 0303 	bfi	r3, r2, #0, #4
  420fee:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(cont, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  420ff0:	22ff      	movs	r2, #255	; 0xff
  420ff2:	4611      	mov	r1, r2
  420ff4:	4628      	mov	r0, r5
  420ff6:	4b12      	ldr	r3, [pc, #72]	; (421040 <lv_cont_create+0x128>)
  420ff8:	4798      	blx	r3
}
  420ffa:	4628      	mov	r0, r5
  420ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(par != NULL) {
  420ffe:	2f00      	cmp	r7, #0
  421000:	d0fb      	beq.n	420ffa <lv_cont_create+0xe2>
            lv_theme_apply(cont, LV_THEME_CONT);
  421002:	210b      	movs	r1, #11
  421004:	4628      	mov	r0, r5
  421006:	4b0f      	ldr	r3, [pc, #60]	; (421044 <lv_cont_create+0x12c>)
  421008:	4798      	blx	r3
  42100a:	e7f6      	b.n	420ffa <lv_cont_create+0xe2>
  42100c:	004067bd 	.word	0x004067bd
  421010:	00416da9 	.word	0x00416da9
  421014:	2041484c 	.word	0x2041484c
  421018:	20414848 	.word	0x20414848
  42101c:	004058e9 	.word	0x004058e9
  421020:	00407ffd 	.word	0x00407ffd
  421024:	0042e54c 	.word	0x0042e54c
  421028:	00416db5 	.word	0x00416db5
  42102c:	00407fad 	.word	0x00407fad
  421030:	00407fd5 	.word	0x00407fd5
  421034:	0040815d 	.word	0x0040815d
  421038:	00421741 	.word	0x00421741
  42103c:	00405885 	.word	0x00405885
  421040:	00407809 	.word	0x00407809
  421044:	004192a5 	.word	0x004192a5

00421048 <lv_cont_set_layout>:
{
  421048:	b538      	push	{r3, r4, r5, lr}
  42104a:	4604      	mov	r4, r0
  42104c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
  42104e:	4b0d      	ldr	r3, [pc, #52]	; (421084 <lv_cont_set_layout+0x3c>)
  421050:	4798      	blx	r3
  421052:	b928      	cbnz	r0, 421060 <lv_cont_set_layout+0x18>
  421054:	4622      	mov	r2, r4
  421056:	2300      	movs	r3, #0
  421058:	480b      	ldr	r0, [pc, #44]	; (421088 <lv_cont_set_layout+0x40>)
  42105a:	490c      	ldr	r1, [pc, #48]	; (42108c <lv_cont_set_layout+0x44>)
  42105c:	4788      	blx	r1
  42105e:	e7fe      	b.n	42105e <lv_cont_set_layout+0x16>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  421060:	4620      	mov	r0, r4
  421062:	4b0b      	ldr	r3, [pc, #44]	; (421090 <lv_cont_set_layout+0x48>)
  421064:	4798      	blx	r3
    if(ext->layout == layout) return;
  421066:	7803      	ldrb	r3, [r0, #0]
  421068:	f003 030f 	and.w	r3, r3, #15
  42106c:	42ab      	cmp	r3, r5
  42106e:	d008      	beq.n	421082 <lv_cont_set_layout+0x3a>
    ext->layout = layout;
  421070:	7803      	ldrb	r3, [r0, #0]
  421072:	f365 0303 	bfi	r3, r5, #0, #4
  421076:	7003      	strb	r3, [r0, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
  421078:	69e3      	ldr	r3, [r4, #28]
  42107a:	2200      	movs	r2, #0
  42107c:	2101      	movs	r1, #1
  42107e:	4620      	mov	r0, r4
  421080:	4798      	blx	r3
  421082:	bd38      	pop	{r3, r4, r5, pc}
  421084:	00416da9 	.word	0x00416da9
  421088:	0042e560 	.word	0x0042e560
  42108c:	00416db5 	.word	0x00416db5
  421090:	00407ffd 	.word	0x00407ffd

00421094 <lv_cont_get_layout>:
{
  421094:	b510      	push	{r4, lr}
  421096:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
  421098:	4b07      	ldr	r3, [pc, #28]	; (4210b8 <lv_cont_get_layout+0x24>)
  42109a:	4798      	blx	r3
  42109c:	b928      	cbnz	r0, 4210aa <lv_cont_get_layout+0x16>
  42109e:	4622      	mov	r2, r4
  4210a0:	2300      	movs	r3, #0
  4210a2:	4806      	ldr	r0, [pc, #24]	; (4210bc <lv_cont_get_layout+0x28>)
  4210a4:	4906      	ldr	r1, [pc, #24]	; (4210c0 <lv_cont_get_layout+0x2c>)
  4210a6:	4788      	blx	r1
  4210a8:	e7fe      	b.n	4210a8 <lv_cont_get_layout+0x14>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  4210aa:	4620      	mov	r0, r4
  4210ac:	4b05      	ldr	r3, [pc, #20]	; (4210c4 <lv_cont_get_layout+0x30>)
  4210ae:	4798      	blx	r3
    return ext->layout;
  4210b0:	7800      	ldrb	r0, [r0, #0]
}
  4210b2:	f000 000f 	and.w	r0, r0, #15
  4210b6:	bd10      	pop	{r4, pc}
  4210b8:	00416da9 	.word	0x00416da9
  4210bc:	0042e560 	.word	0x0042e560
  4210c0:	00416db5 	.word	0x00416db5
  4210c4:	00407ffd 	.word	0x00407ffd

004210c8 <lv_cont_layout_col>:
{
  4210c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4210cc:	b085      	sub	sp, #20
  4210ce:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4210d0:	2212      	movs	r2, #18
  4210d2:	2100      	movs	r1, #0
  4210d4:	4c3c      	ldr	r4, [pc, #240]	; (4211c8 <lv_cont_layout_col+0x100>)
  4210d6:	47a0      	blx	r4
  4210d8:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4210da:	2213      	movs	r2, #19
  4210dc:	2100      	movs	r1, #0
  4210de:	4648      	mov	r0, r9
  4210e0:	47a0      	blx	r4
  4210e2:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4210e4:	2210      	movs	r2, #16
  4210e6:	2100      	movs	r1, #0
  4210e8:	4648      	mov	r0, r9
  4210ea:	47a0      	blx	r4
  4210ec:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4210ee:	2214      	movs	r2, #20
  4210f0:	2100      	movs	r1, #0
  4210f2:	4648      	mov	r0, r9
  4210f4:	47a0      	blx	r4
  4210f6:	9002      	str	r0, [sp, #8]
    lv_layout_t type = lv_cont_get_layout(cont);
  4210f8:	4648      	mov	r0, r9
  4210fa:	4b34      	ldr	r3, [pc, #208]	; (4211cc <lv_cont_layout_col+0x104>)
  4210fc:	4798      	blx	r3
    switch(type) {
  4210fe:	2803      	cmp	r0, #3
  421100:	d01c      	beq.n	42113c <lv_cont_layout_col+0x74>
  421102:	2804      	cmp	r0, #4
  421104:	d013      	beq.n	42112e <lv_cont_layout_col+0x66>
  421106:	2802      	cmp	r0, #2
  421108:	d004      	beq.n	421114 <lv_cont_layout_col+0x4c>
            hpad_corr = 0;
  42110a:	f04f 0a00 	mov.w	sl, #0
            align     = LV_ALIGN_IN_TOP_LEFT;
  42110e:	2301      	movs	r3, #1
  421110:	9303      	str	r3, [sp, #12]
            break;
  421112:	e001      	b.n	421118 <lv_cont_layout_col+0x50>
            align     = LV_ALIGN_IN_TOP_LEFT;
  421114:	2301      	movs	r3, #1
  421116:	9303      	str	r3, [sp, #12]
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  421118:	2101      	movs	r1, #1
  42111a:	4648      	mov	r0, r9
  42111c:	4b2c      	ldr	r3, [pc, #176]	; (4211d0 <lv_cont_layout_col+0x108>)
  42111e:	4798      	blx	r3
    _LV_LL_READ_BACK(cont->child_ll, child) {
  421120:	f109 0804 	add.w	r8, r9, #4
  421124:	4640      	mov	r0, r8
  421126:	4b2b      	ldr	r3, [pc, #172]	; (4211d4 <lv_cont_layout_col+0x10c>)
  421128:	4798      	blx	r3
  42112a:	4604      	mov	r4, r0
  42112c:	e010      	b.n	421150 <lv_cont_layout_col+0x88>
            hpad_corr = -right;
  42112e:	f1c6 0a00 	rsb	sl, r6, #0
  421132:	fa0f fa8a 	sxth.w	sl, sl
            align     = LV_ALIGN_IN_TOP_RIGHT;
  421136:	2303      	movs	r3, #3
  421138:	9303      	str	r3, [sp, #12]
            break;
  42113a:	e7ed      	b.n	421118 <lv_cont_layout_col+0x50>
            hpad_corr = 0;
  42113c:	f04f 0a00 	mov.w	sl, #0
            align     = LV_ALIGN_IN_TOP_MID;
  421140:	2302      	movs	r3, #2
  421142:	9303      	str	r3, [sp, #12]
  421144:	e7e8      	b.n	421118 <lv_cont_layout_col+0x50>
    _LV_LL_READ_BACK(cont->child_ll, child) {
  421146:	4621      	mov	r1, r4
  421148:	4640      	mov	r0, r8
  42114a:	4b23      	ldr	r3, [pc, #140]	; (4211d8 <lv_cont_layout_col+0x110>)
  42114c:	4798      	blx	r3
  42114e:	4604      	mov	r4, r0
  421150:	2c00      	cmp	r4, #0
  421152:	d031      	beq.n	4211b8 <lv_cont_layout_col+0xf0>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  421154:	4620      	mov	r0, r4
  421156:	4b21      	ldr	r3, [pc, #132]	; (4211dc <lv_cont_layout_col+0x114>)
  421158:	4798      	blx	r3
  42115a:	2800      	cmp	r0, #0
  42115c:	d1f3      	bne.n	421146 <lv_cont_layout_col+0x7e>
  42115e:	2104      	movs	r1, #4
  421160:	4620      	mov	r0, r4
  421162:	4b1f      	ldr	r3, [pc, #124]	; (4211e0 <lv_cont_layout_col+0x118>)
  421164:	4798      	blx	r3
  421166:	2800      	cmp	r0, #0
  421168:	d1ed      	bne.n	421146 <lv_cont_layout_col+0x7e>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  42116a:	2215      	movs	r2, #21
  42116c:	2100      	movs	r1, #0
  42116e:	4620      	mov	r0, r4
  421170:	f8df b054 	ldr.w	fp, [pc, #84]	; 4211c8 <lv_cont_layout_col+0x100>
  421174:	47d8      	blx	fp
  421176:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  421178:	2216      	movs	r2, #22
  42117a:	2100      	movs	r1, #0
  42117c:	4620      	mov	r0, r4
  42117e:	47d8      	blx	fp
  421180:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  421182:	2217      	movs	r2, #23
  421184:	2100      	movs	r1, #0
  421186:	4620      	mov	r0, r4
  421188:	47d8      	blx	fp
        lv_obj_align(child, cont, align, hpad_corr + mleft, last_cord + mtop);
  42118a:	eb0a 0300 	add.w	r3, sl, r0
  42118e:	b2ad      	uxth	r5, r5
  421190:	19aa      	adds	r2, r5, r6
  421192:	b212      	sxth	r2, r2
  421194:	9200      	str	r2, [sp, #0]
  421196:	b21b      	sxth	r3, r3
  421198:	9a03      	ldr	r2, [sp, #12]
  42119a:	4649      	mov	r1, r9
  42119c:	4620      	mov	r0, r4
  42119e:	f8df b04c 	ldr.w	fp, [pc, #76]	; 4211ec <lv_cont_layout_col+0x124>
  4211a2:	47d8      	blx	fp
        last_cord += lv_obj_get_height(child) + inner + mtop + mbottom;
  4211a4:	4620      	mov	r0, r4
  4211a6:	4b0f      	ldr	r3, [pc, #60]	; (4211e4 <lv_cont_layout_col+0x11c>)
  4211a8:	4798      	blx	r3
  4211aa:	9b02      	ldr	r3, [sp, #8]
  4211ac:	4418      	add	r0, r3
  4211ae:	4406      	add	r6, r0
  4211b0:	443e      	add	r6, r7
  4211b2:	4435      	add	r5, r6
  4211b4:	b22d      	sxth	r5, r5
  4211b6:	e7c6      	b.n	421146 <lv_cont_layout_col+0x7e>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  4211b8:	2101      	movs	r1, #1
  4211ba:	4648      	mov	r0, r9
  4211bc:	4b0a      	ldr	r3, [pc, #40]	; (4211e8 <lv_cont_layout_col+0x120>)
  4211be:	4798      	blx	r3
}
  4211c0:	b005      	add	sp, #20
  4211c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4211c6:	bf00      	nop
  4211c8:	004073ed 	.word	0x004073ed
  4211cc:	00421095 	.word	0x00421095
  4211d0:	004056f9 	.word	0x004056f9
  4211d4:	004170c3 	.word	0x004170c3
  4211d8:	004170db 	.word	0x004170db
  4211dc:	00405d71 	.word	0x00405d71
  4211e0:	00406d55 	.word	0x00406d55
  4211e4:	00405b59 	.word	0x00405b59
  4211e8:	00405729 	.word	0x00405729
  4211ec:	004061a9 	.word	0x004061a9

004211f0 <lv_cont_layout_row>:
{
  4211f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4211f4:	b085      	sub	sp, #20
  4211f6:	4607      	mov	r7, r0
    lv_layout_t type = lv_cont_get_layout(cont);
  4211f8:	4b4d      	ldr	r3, [pc, #308]	; (421330 <lv_cont_layout_row+0x140>)
  4211fa:	4798      	blx	r3
  4211fc:	4604      	mov	r4, r0
    lv_bidi_dir_t base_dir = lv_obj_get_base_dir(cont);
  4211fe:	4638      	mov	r0, r7
  421200:	4b4c      	ldr	r3, [pc, #304]	; (421334 <lv_cont_layout_row+0x144>)
  421202:	4798      	blx	r3
  421204:	4680      	mov	r8, r0
    switch(type) {
  421206:	2c06      	cmp	r4, #6
  421208:	d031      	beq.n	42126e <lv_cont_layout_row+0x7e>
  42120a:	2c07      	cmp	r4, #7
  42120c:	d03b      	beq.n	421286 <lv_cont_layout_row+0x96>
  42120e:	2c05      	cmp	r4, #5
  421210:	d006      	beq.n	421220 <lv_cont_layout_row+0x30>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  421212:	2801      	cmp	r0, #1
  421214:	d04b      	beq.n	4212ae <lv_cont_layout_row+0xbe>
            vpad_corr = 0;
  421216:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  42121a:	2301      	movs	r3, #1
  42121c:	9303      	str	r3, [sp, #12]
  42121e:	e00a      	b.n	421236 <lv_cont_layout_row+0x46>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  421220:	2210      	movs	r2, #16
  421222:	2100      	movs	r1, #0
  421224:	4638      	mov	r0, r7
  421226:	4b44      	ldr	r3, [pc, #272]	; (421338 <lv_cont_layout_row+0x148>)
  421228:	4798      	blx	r3
  42122a:	4681      	mov	r9, r0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  42122c:	f1b8 0f01 	cmp.w	r8, #1
  421230:	d01a      	beq.n	421268 <lv_cont_layout_row+0x78>
  421232:	2301      	movs	r3, #1
  421234:	9303      	str	r3, [sp, #12]
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  421236:	2101      	movs	r1, #1
  421238:	4638      	mov	r0, r7
  42123a:	4b40      	ldr	r3, [pc, #256]	; (42133c <lv_cont_layout_row+0x14c>)
  42123c:	4798      	blx	r3
    if(base_dir == LV_BIDI_DIR_RTL) last_cord = lv_obj_get_style_pad_right(cont, LV_CONT_PART_MAIN);
  42123e:	f1b8 0f01 	cmp.w	r8, #1
  421242:	d039      	beq.n	4212b8 <lv_cont_layout_row+0xc8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  421244:	2212      	movs	r2, #18
  421246:	2100      	movs	r1, #0
  421248:	4638      	mov	r0, r7
  42124a:	4b3b      	ldr	r3, [pc, #236]	; (421338 <lv_cont_layout_row+0x148>)
  42124c:	4798      	blx	r3
  42124e:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  421250:	2214      	movs	r2, #20
  421252:	2100      	movs	r1, #0
  421254:	4638      	mov	r0, r7
  421256:	4b38      	ldr	r3, [pc, #224]	; (421338 <lv_cont_layout_row+0x148>)
  421258:	4798      	blx	r3
  42125a:	4682      	mov	sl, r0
    _LV_LL_READ_BACK(cont->child_ll, child) {
  42125c:	1d3d      	adds	r5, r7, #4
  42125e:	4628      	mov	r0, r5
  421260:	4b37      	ldr	r3, [pc, #220]	; (421340 <lv_cont_layout_row+0x150>)
  421262:	4798      	blx	r3
  421264:	4604      	mov	r4, r0
  421266:	e043      	b.n	4212f0 <lv_cont_layout_row+0x100>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  421268:	2303      	movs	r3, #3
  42126a:	9303      	str	r3, [sp, #12]
  42126c:	e7e3      	b.n	421236 <lv_cont_layout_row+0x46>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
  42126e:	2801      	cmp	r0, #1
  421270:	d004      	beq.n	42127c <lv_cont_layout_row+0x8c>
            vpad_corr = 0;
  421272:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
  421276:	2307      	movs	r3, #7
  421278:	9303      	str	r3, [sp, #12]
  42127a:	e7dc      	b.n	421236 <lv_cont_layout_row+0x46>
            vpad_corr = 0;
  42127c:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
  421280:	2308      	movs	r3, #8
  421282:	9303      	str	r3, [sp, #12]
  421284:	e7d7      	b.n	421236 <lv_cont_layout_row+0x46>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  421286:	2211      	movs	r2, #17
  421288:	2100      	movs	r1, #0
  42128a:	4638      	mov	r0, r7
  42128c:	4b2a      	ldr	r3, [pc, #168]	; (421338 <lv_cont_layout_row+0x148>)
  42128e:	4798      	blx	r3
            vpad_corr = -lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
  421290:	fa1f f980 	uxth.w	r9, r0
  421294:	f1c9 0900 	rsb	r9, r9, #0
  421298:	fa0f f989 	sxth.w	r9, r9
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_BOTTOM_RIGHT : LV_ALIGN_IN_BOTTOM_LEFT;
  42129c:	f1b8 0f01 	cmp.w	r8, #1
  4212a0:	d002      	beq.n	4212a8 <lv_cont_layout_row+0xb8>
  4212a2:	2304      	movs	r3, #4
  4212a4:	9303      	str	r3, [sp, #12]
  4212a6:	e7c6      	b.n	421236 <lv_cont_layout_row+0x46>
  4212a8:	2306      	movs	r3, #6
  4212aa:	9303      	str	r3, [sp, #12]
  4212ac:	e7c3      	b.n	421236 <lv_cont_layout_row+0x46>
            vpad_corr = 0;
  4212ae:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  4212b2:	2303      	movs	r3, #3
  4212b4:	9303      	str	r3, [sp, #12]
  4212b6:	e7be      	b.n	421236 <lv_cont_layout_row+0x46>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4212b8:	2213      	movs	r2, #19
  4212ba:	2100      	movs	r1, #0
  4212bc:	4638      	mov	r0, r7
  4212be:	4b1e      	ldr	r3, [pc, #120]	; (421338 <lv_cont_layout_row+0x148>)
  4212c0:	4798      	blx	r3
  4212c2:	4606      	mov	r6, r0
  4212c4:	e7c4      	b.n	421250 <lv_cont_layout_row+0x60>
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
  4212c6:	4273      	negs	r3, r6
  4212c8:	f8cd 9000 	str.w	r9, [sp]
  4212cc:	b21b      	sxth	r3, r3
  4212ce:	9a03      	ldr	r2, [sp, #12]
  4212d0:	4639      	mov	r1, r7
  4212d2:	4620      	mov	r0, r4
  4212d4:	f8df b080 	ldr.w	fp, [pc, #128]	; 421358 <lv_cont_layout_row+0x168>
  4212d8:	47d8      	blx	fp
        last_cord += lv_obj_get_width(child) + inner;
  4212da:	4620      	mov	r0, r4
  4212dc:	4b19      	ldr	r3, [pc, #100]	; (421344 <lv_cont_layout_row+0x154>)
  4212de:	4798      	blx	r3
  4212e0:	4450      	add	r0, sl
  4212e2:	4406      	add	r6, r0
  4212e4:	b236      	sxth	r6, r6
    _LV_LL_READ_BACK(cont->child_ll, child) {
  4212e6:	4621      	mov	r1, r4
  4212e8:	4628      	mov	r0, r5
  4212ea:	4b17      	ldr	r3, [pc, #92]	; (421348 <lv_cont_layout_row+0x158>)
  4212ec:	4798      	blx	r3
  4212ee:	4604      	mov	r4, r0
  4212f0:	b1bc      	cbz	r4, 421322 <lv_cont_layout_row+0x132>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  4212f2:	4620      	mov	r0, r4
  4212f4:	4b15      	ldr	r3, [pc, #84]	; (42134c <lv_cont_layout_row+0x15c>)
  4212f6:	4798      	blx	r3
  4212f8:	2800      	cmp	r0, #0
  4212fa:	d1f4      	bne.n	4212e6 <lv_cont_layout_row+0xf6>
  4212fc:	2104      	movs	r1, #4
  4212fe:	4620      	mov	r0, r4
  421300:	4b13      	ldr	r3, [pc, #76]	; (421350 <lv_cont_layout_row+0x160>)
  421302:	4798      	blx	r3
  421304:	2800      	cmp	r0, #0
  421306:	d1ee      	bne.n	4212e6 <lv_cont_layout_row+0xf6>
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
  421308:	f1b8 0f01 	cmp.w	r8, #1
  42130c:	d0db      	beq.n	4212c6 <lv_cont_layout_row+0xd6>
        else lv_obj_align(child, cont, align, last_cord, vpad_corr);
  42130e:	f8cd 9000 	str.w	r9, [sp]
  421312:	4633      	mov	r3, r6
  421314:	9a03      	ldr	r2, [sp, #12]
  421316:	4639      	mov	r1, r7
  421318:	4620      	mov	r0, r4
  42131a:	f8df b03c 	ldr.w	fp, [pc, #60]	; 421358 <lv_cont_layout_row+0x168>
  42131e:	47d8      	blx	fp
  421320:	e7db      	b.n	4212da <lv_cont_layout_row+0xea>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  421322:	2101      	movs	r1, #1
  421324:	4638      	mov	r0, r7
  421326:	4b0b      	ldr	r3, [pc, #44]	; (421354 <lv_cont_layout_row+0x164>)
  421328:	4798      	blx	r3
}
  42132a:	b005      	add	sp, #20
  42132c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  421330:	00421095 	.word	0x00421095
  421334:	00406795 	.word	0x00406795
  421338:	004073ed 	.word	0x004073ed
  42133c:	004056f9 	.word	0x004056f9
  421340:	004170c3 	.word	0x004170c3
  421344:	00405b29 	.word	0x00405b29
  421348:	004170db 	.word	0x004170db
  42134c:	00405d71 	.word	0x00405d71
  421350:	00406d55 	.word	0x00406d55
  421354:	00405729 	.word	0x00405729
  421358:	004061a9 	.word	0x004061a9

0042135c <lv_cont_layout_pretty>:
{
  42135c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  421360:	b08d      	sub	sp, #52	; 0x34
  421362:	4604      	mov	r4, r0
  421364:	9006      	str	r0, [sp, #24]
    lv_layout_t type = lv_cont_get_layout(cont);
  421366:	4bac      	ldr	r3, [pc, #688]	; (421618 <lv_cont_layout_pretty+0x2bc>)
  421368:	4798      	blx	r3
  42136a:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_coord_t w_obj         = lv_obj_get_width(cont);
  42136c:	4620      	mov	r0, r4
  42136e:	4bab      	ldr	r3, [pc, #684]	; (42161c <lv_cont_layout_pretty+0x2c0>)
  421370:	4798      	blx	r3
  421372:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  421374:	2210      	movs	r2, #16
  421376:	2100      	movs	r1, #0
  421378:	4620      	mov	r0, r4
  42137a:	4ba9      	ldr	r3, [pc, #676]	; (421620 <lv_cont_layout_pretty+0x2c4>)
  42137c:	4798      	blx	r3
  42137e:	9004      	str	r0, [sp, #16]
    child_rs = _lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
  421380:	4623      	mov	r3, r4
  421382:	3304      	adds	r3, #4
  421384:	9302      	str	r3, [sp, #8]
  421386:	4618      	mov	r0, r3
  421388:	4ba6      	ldr	r3, [pc, #664]	; (421624 <lv_cont_layout_pretty+0x2c8>)
  42138a:	4798      	blx	r3
    if(child_rs == NULL) return;                /*Return if no child*/
  42138c:	2800      	cmp	r0, #0
  42138e:	f000 8184 	beq.w	42169a <lv_cont_layout_pretty+0x33e>
  421392:	4625      	mov	r5, r4
  421394:	4682      	mov	sl, r0
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  421396:	2101      	movs	r1, #1
  421398:	4620      	mov	r0, r4
  42139a:	4ba3      	ldr	r3, [pc, #652]	; (421628 <lv_cont_layout_pretty+0x2cc>)
  42139c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  42139e:	2212      	movs	r2, #18
  4213a0:	2100      	movs	r1, #0
  4213a2:	4620      	mov	r0, r4
  4213a4:	4c9e      	ldr	r4, [pc, #632]	; (421620 <lv_cont_layout_pretty+0x2c4>)
  4213a6:	47a0      	blx	r4
  4213a8:	9005      	str	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4213aa:	2213      	movs	r2, #19
  4213ac:	2100      	movs	r1, #0
  4213ae:	4628      	mov	r0, r5
  4213b0:	47a0      	blx	r4
  4213b2:	9007      	str	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4213b4:	2214      	movs	r2, #20
  4213b6:	2100      	movs	r1, #0
  4213b8:	4628      	mov	r0, r5
  4213ba:	47a0      	blx	r4
  4213bc:	4683      	mov	fp, r0
    while(child_rs != NULL) {
  4213be:	e08a      	b.n	4214d6 <lv_cont_layout_pretty+0x17a>
  4213c0:	464d      	mov	r5, r9
                    if(child_rc != NULL && obj_num != 0) {
  4213c2:	2c00      	cmp	r4, #0
  4213c4:	bf18      	it	ne
  4213c6:	2f00      	cmpne	r7, #0
  4213c8:	d056      	beq.n	421478 <lv_cont_layout_pretty+0x11c>
                        child_rc = _lv_ll_get_next(&cont->child_ll, child_rc);
  4213ca:	4621      	mov	r1, r4
  4213cc:	9802      	ldr	r0, [sp, #8]
  4213ce:	4b97      	ldr	r3, [pc, #604]	; (42162c <lv_cont_layout_pretty+0x2d0>)
  4213d0:	4798      	blx	r3
  4213d2:	4604      	mov	r4, r0
  4213d4:	e050      	b.n	421478 <lv_cont_layout_pretty+0x11c>
            child_rc = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
  4213d6:	4621      	mov	r1, r4
  4213d8:	9802      	ldr	r0, [sp, #8]
  4213da:	4b95      	ldr	r3, [pc, #596]	; (421630 <lv_cont_layout_pretty+0x2d4>)
  4213dc:	4798      	blx	r3
  4213de:	4604      	mov	r4, r0
            if(obj_num == 0)
  4213e0:	b907      	cbnz	r7, 4213e4 <lv_cont_layout_pretty+0x88>
                child_rs = child_rc; /*If the first object was hidden (or too long) then set the
  4213e2:	4682      	mov	sl, r0
        } while(child_rc != NULL);
  4213e4:	2c00      	cmp	r4, #0
  4213e6:	d046      	beq.n	421476 <lv_cont_layout_pretty+0x11a>
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
  4213e8:	4620      	mov	r0, r4
  4213ea:	4b92      	ldr	r3, [pc, #584]	; (421634 <lv_cont_layout_pretty+0x2d8>)
  4213ec:	4798      	blx	r3
  4213ee:	2800      	cmp	r0, #0
  4213f0:	d1f1      	bne.n	4213d6 <lv_cont_layout_pretty+0x7a>
  4213f2:	2104      	movs	r1, #4
  4213f4:	4620      	mov	r0, r4
  4213f6:	4b90      	ldr	r3, [pc, #576]	; (421638 <lv_cont_layout_pretty+0x2dc>)
  4213f8:	4798      	blx	r3
  4213fa:	2800      	cmp	r0, #0
  4213fc:	d1eb      	bne.n	4213d6 <lv_cont_layout_pretty+0x7a>
                lv_coord_t w = lv_obj_get_width(child_rc);
  4213fe:	4620      	mov	r0, r4
  421400:	4b86      	ldr	r3, [pc, #536]	; (42161c <lv_cont_layout_pretty+0x2c0>)
  421402:	4798      	blx	r3
  421404:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  421406:	2217      	movs	r2, #23
  421408:	2100      	movs	r1, #0
  42140a:	4620      	mov	r0, r4
  42140c:	4d84      	ldr	r5, [pc, #528]	; (421620 <lv_cont_layout_pretty+0x2c4>)
  42140e:	47a8      	blx	r5
                w += lv_obj_get_style_margin_left(child_rc, LV_OBJ_PART_MAIN);
  421410:	fa16 f680 	uxtah	r6, r6, r0
  421414:	b2b6      	uxth	r6, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  421416:	2218      	movs	r2, #24
  421418:	2100      	movs	r1, #0
  42141a:	4620      	mov	r0, r4
  42141c:	47a8      	blx	r5
                w += lv_obj_get_style_margin_right(child_rc, LV_OBJ_PART_MAIN);
  42141e:	fa16 f080 	uxtah	r0, r6, r0
  421422:	b280      	uxth	r0, r0
                if(w_row + w > w_obj) {
  421424:	fa09 f380 	sxtah	r3, r9, r0
  421428:	9a03      	ldr	r2, [sp, #12]
  42142a:	4293      	cmp	r3, r2
  42142c:	dcc8      	bgt.n	4213c0 <lv_cont_layout_pretty+0x64>
                w_row += w + pinner; /*Add the object width + inner padding*/
  42142e:	4458      	add	r0, fp
  421430:	fa19 f980 	uxtah	r9, r9, r0
  421434:	fa0f f989 	sxth.w	r9, r9
                lv_coord_t h = lv_obj_get_height(child_rc);
  421438:	4620      	mov	r0, r4
  42143a:	4b80      	ldr	r3, [pc, #512]	; (42163c <lv_cont_layout_pretty+0x2e0>)
  42143c:	4798      	blx	r3
  42143e:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  421440:	2215      	movs	r2, #21
  421442:	2100      	movs	r1, #0
  421444:	4620      	mov	r0, r4
  421446:	4e76      	ldr	r6, [pc, #472]	; (421620 <lv_cont_layout_pretty+0x2c4>)
  421448:	47b0      	blx	r6
                h += lv_obj_get_style_margin_top(child_rc, LV_OBJ_PART_MAIN);
  42144a:	fa15 f580 	uxtah	r5, r5, r0
  42144e:	b2ad      	uxth	r5, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  421450:	2216      	movs	r2, #22
  421452:	2100      	movs	r1, #0
  421454:	4620      	mov	r0, r4
  421456:	47b0      	blx	r6
                h += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
  421458:	fa15 f080 	uxtah	r0, r5, r0
  42145c:	b200      	sxth	r0, r0
                h_row = LV_MATH_MAX(h_row, h);         /*Search the highest object*/
  42145e:	4580      	cmp	r8, r0
  421460:	bfb8      	it	lt
  421462:	4680      	movlt	r8, r0
                obj_num++;
  421464:	3701      	adds	r7, #1
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
  421466:	2108      	movs	r1, #8
  421468:	4620      	mov	r0, r4
  42146a:	4b73      	ldr	r3, [pc, #460]	; (421638 <lv_cont_layout_pretty+0x2dc>)
  42146c:	4798      	blx	r3
  42146e:	2800      	cmp	r0, #0
  421470:	d0b1      	beq.n	4213d6 <lv_cont_layout_pretty+0x7a>
  421472:	464d      	mov	r5, r9
  421474:	e000      	b.n	421478 <lv_cont_layout_pretty+0x11c>
  421476:	464d      	mov	r5, r9
        if(obj_num == 0) {
  421478:	2f00      	cmp	r7, #0
  42147a:	d139      	bne.n	4214f0 <lv_cont_layout_pretty+0x194>
            if(child_rc != NULL) {
  42147c:	b1e4      	cbz	r4, 4214b8 <lv_cont_layout_pretty+0x15c>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  42147e:	2215      	movs	r2, #21
  421480:	2100      	movs	r1, #0
  421482:	4620      	mov	r0, r4
  421484:	4e66      	ldr	r6, [pc, #408]	; (421620 <lv_cont_layout_pretty+0x2c4>)
  421486:	47b0      	blx	r6
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y + mtop);
  421488:	b285      	uxth	r5, r0
  42148a:	9b04      	ldr	r3, [sp, #16]
  42148c:	18eb      	adds	r3, r5, r3
  42148e:	b21b      	sxth	r3, r3
  421490:	9300      	str	r3, [sp, #0]
  421492:	2300      	movs	r3, #0
  421494:	2202      	movs	r2, #2
  421496:	9906      	ldr	r1, [sp, #24]
  421498:	4620      	mov	r0, r4
  42149a:	4f69      	ldr	r7, [pc, #420]	; (421640 <lv_cont_layout_pretty+0x2e4>)
  42149c:	47b8      	blx	r7
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
  42149e:	4620      	mov	r0, r4
  4214a0:	4b66      	ldr	r3, [pc, #408]	; (42163c <lv_cont_layout_pretty+0x2e0>)
  4214a2:	4798      	blx	r3
                h_row += mtop;
  4214a4:	4405      	add	r5, r0
  4214a6:	b2ad      	uxth	r5, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  4214a8:	2216      	movs	r2, #22
  4214aa:	2100      	movs	r1, #0
  4214ac:	4620      	mov	r0, r4
  4214ae:	47b0      	blx	r6
                h_row += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
  4214b0:	fa15 f080 	uxtah	r0, r5, r0
  4214b4:	fa0f f880 	sxth.w	r8, r0
        if(child_rc == NULL) break;
  4214b8:	2c00      	cmp	r4, #0
  4214ba:	f000 80ea 	beq.w	421692 <lv_cont_layout_pretty+0x336>
        act_y += pinner + h_row;           /*y increment*/
  4214be:	44d8      	add	r8, fp
  4214c0:	9b04      	ldr	r3, [sp, #16]
  4214c2:	fa13 f888 	uxtah	r8, r3, r8
  4214c6:	fa0f f388 	sxth.w	r3, r8
  4214ca:	9304      	str	r3, [sp, #16]
        child_rs = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
  4214cc:	4621      	mov	r1, r4
  4214ce:	9802      	ldr	r0, [sp, #8]
  4214d0:	4b57      	ldr	r3, [pc, #348]	; (421630 <lv_cont_layout_pretty+0x2d4>)
  4214d2:	4798      	blx	r3
  4214d4:	4682      	mov	sl, r0
    while(child_rs != NULL) {
  4214d6:	f1ba 0f00 	cmp.w	sl, #0
  4214da:	f000 80da 	beq.w	421692 <lv_cont_layout_pretty+0x336>
        lv_coord_t w_row = pleft + pright; /*The width is at least the left+right pad*/
  4214de:	9b05      	ldr	r3, [sp, #20]
  4214e0:	9a07      	ldr	r2, [sp, #28]
  4214e2:	189d      	adds	r5, r3, r2
  4214e4:	b22d      	sxth	r5, r5
  4214e6:	4654      	mov	r4, sl
        uint32_t obj_num = 0;
  4214e8:	2700      	movs	r7, #0
        lv_coord_t h_row = 0;
  4214ea:	46b8      	mov	r8, r7
  4214ec:	46a9      	mov	r9, r5
  4214ee:	e77b      	b.n	4213e8 <lv_cont_layout_pretty+0x8c>
        else if(obj_num == 1) {
  4214f0:	2f01      	cmp	r7, #1
  4214f2:	d015      	beq.n	421520 <lv_cont_layout_pretty+0x1c4>
            w_row -= pinner * obj_num;
  4214f4:	fb1b f307 	smulbb	r3, fp, r7
  4214f8:	1aeb      	subs	r3, r5, r3
  4214fa:	b21b      	sxth	r3, r3
            lv_coord_t new_pinner = (w_obj - w_row) / (obj_num - 1);
  4214fc:	9a03      	ldr	r2, [sp, #12]
  4214fe:	1ad3      	subs	r3, r2, r3
  421500:	3f01      	subs	r7, #1
  421502:	fbb3 f7f7 	udiv	r7, r3, r7
  421506:	b23d      	sxth	r5, r7
            if(lv_obj_get_base_dir(cont) == LV_BIDI_DIR_RTL) {
  421508:	9806      	ldr	r0, [sp, #24]
  42150a:	4b4e      	ldr	r3, [pc, #312]	; (421644 <lv_cont_layout_pretty+0x2e8>)
  42150c:	4798      	blx	r3
  42150e:	2801      	cmp	r0, #1
  421510:	d017      	beq.n	421542 <lv_cont_layout_pretty+0x1e6>
                inv = 1;
  421512:	2301      	movs	r3, #1
  421514:	930a      	str	r3, [sp, #40]	; 0x28
                align = LV_ALIGN_IN_TOP_LEFT;
  421516:	9309      	str	r3, [sp, #36]	; 0x24
                align = LV_ALIGN_IN_TOP_RIGHT;
  421518:	f8dd 9014 	ldr.w	r9, [sp, #20]
  42151c:	4656      	mov	r6, sl
  42151e:	e03e      	b.n	42159e <lv_cont_layout_pretty+0x242>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  421520:	2215      	movs	r2, #21
  421522:	2100      	movs	r1, #0
  421524:	4650      	mov	r0, sl
  421526:	4b3e      	ldr	r3, [pc, #248]	; (421620 <lv_cont_layout_pretty+0x2c4>)
  421528:	4798      	blx	r3
                         act_y + lv_obj_get_style_margin_top(child_rs, LV_OBJ_PART_MAIN));
  42152a:	9b04      	ldr	r3, [sp, #16]
  42152c:	fa13 f380 	uxtah	r3, r3, r0
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID,
  421530:	b21b      	sxth	r3, r3
  421532:	9300      	str	r3, [sp, #0]
  421534:	2300      	movs	r3, #0
  421536:	2202      	movs	r2, #2
  421538:	9906      	ldr	r1, [sp, #24]
  42153a:	4650      	mov	r0, sl
  42153c:	4d40      	ldr	r5, [pc, #256]	; (421640 <lv_cont_layout_pretty+0x2e4>)
  42153e:	47a8      	blx	r5
  421540:	e7ba      	b.n	4214b8 <lv_cont_layout_pretty+0x15c>
                inv = -1;
  421542:	f04f 33ff 	mov.w	r3, #4294967295
  421546:	930a      	str	r3, [sp, #40]	; 0x28
                align = LV_ALIGN_IN_TOP_RIGHT;
  421548:	2303      	movs	r3, #3
  42154a:	9309      	str	r3, [sp, #36]	; 0x24
  42154c:	e7e4      	b.n	421518 <lv_cont_layout_pretty+0x1bc>
                                         inv * (act_x + mleft),
  42154e:	eb09 0a07 	add.w	sl, r9, r7
  421552:	2215      	movs	r2, #21
  421554:	2100      	movs	r1, #0
  421556:	4630      	mov	r0, r6
  421558:	4b31      	ldr	r3, [pc, #196]	; (421620 <lv_cont_layout_pretty+0x2c4>)
  42155a:	4798      	blx	r3
                                         act_y + lv_obj_get_style_margin_top(child_tmp, LV_OBJ_PART_MAIN));
  42155c:	9b04      	ldr	r3, [sp, #16]
  42155e:	fa13 f280 	uxtah	r2, r3, r0
                            lv_obj_align(child_tmp, cont, align,
  421562:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  421566:	fb1a f303 	smulbb	r3, sl, r3
  42156a:	b212      	sxth	r2, r2
  42156c:	9200      	str	r2, [sp, #0]
  42156e:	b21b      	sxth	r3, r3
  421570:	9a09      	ldr	r2, [sp, #36]	; 0x24
  421572:	9906      	ldr	r1, [sp, #24]
  421574:	4630      	mov	r0, r6
  421576:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 421640 <lv_cont_layout_pretty+0x2e4>
  42157a:	47d0      	blx	sl
                    act_x += lv_obj_get_width(child_tmp) + new_pinner + mleft + mright;
  42157c:	4630      	mov	r0, r6
  42157e:	4b27      	ldr	r3, [pc, #156]	; (42161c <lv_cont_layout_pretty+0x2c0>)
  421580:	4798      	blx	r3
  421582:	182b      	adds	r3, r5, r0
  421584:	443b      	add	r3, r7
  421586:	9a08      	ldr	r2, [sp, #32]
  421588:	441a      	add	r2, r3
  42158a:	4491      	add	r9, r2
  42158c:	fa0f f989 	sxth.w	r9, r9
                if(child_tmp == child_rc) break;
  421590:	42b4      	cmp	r4, r6
  421592:	d091      	beq.n	4214b8 <lv_cont_layout_pretty+0x15c>
                child_tmp = _lv_ll_get_prev(&cont->child_ll, child_tmp);
  421594:	4631      	mov	r1, r6
  421596:	9802      	ldr	r0, [sp, #8]
  421598:	4b25      	ldr	r3, [pc, #148]	; (421630 <lv_cont_layout_pretty+0x2d4>)
  42159a:	4798      	blx	r3
  42159c:	4606      	mov	r6, r0
            while(child_tmp != NULL) {
  42159e:	2e00      	cmp	r6, #0
  4215a0:	d08a      	beq.n	4214b8 <lv_cont_layout_pretty+0x15c>
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
  4215a2:	4630      	mov	r0, r6
  4215a4:	4b23      	ldr	r3, [pc, #140]	; (421634 <lv_cont_layout_pretty+0x2d8>)
  4215a6:	4798      	blx	r3
  4215a8:	2800      	cmp	r0, #0
  4215aa:	d1f1      	bne.n	421590 <lv_cont_layout_pretty+0x234>
  4215ac:	2104      	movs	r1, #4
  4215ae:	4630      	mov	r0, r6
  4215b0:	4b21      	ldr	r3, [pc, #132]	; (421638 <lv_cont_layout_pretty+0x2dc>)
  4215b2:	4798      	blx	r3
  4215b4:	2800      	cmp	r0, #0
  4215b6:	d1eb      	bne.n	421590 <lv_cont_layout_pretty+0x234>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  4215b8:	2217      	movs	r2, #23
  4215ba:	2100      	movs	r1, #0
  4215bc:	4630      	mov	r0, r6
  4215be:	f8df a060 	ldr.w	sl, [pc, #96]	; 421620 <lv_cont_layout_pretty+0x2c4>
  4215c2:	47d0      	blx	sl
  4215c4:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  4215c6:	2218      	movs	r2, #24
  4215c8:	2100      	movs	r1, #0
  4215ca:	4630      	mov	r0, r6
  4215cc:	47d0      	blx	sl
  4215ce:	9008      	str	r0, [sp, #32]
                    switch(type) {
  4215d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4215d2:	2b09      	cmp	r3, #9
  4215d4:	d004      	beq.n	4215e0 <lv_cont_layout_pretty+0x284>
  4215d6:	2b0a      	cmp	r3, #10
  4215d8:	d036      	beq.n	421648 <lv_cont_layout_pretty+0x2ec>
  4215da:	2b08      	cmp	r3, #8
  4215dc:	d1ce      	bne.n	42157c <lv_cont_layout_pretty+0x220>
  4215de:	e7b6      	b.n	42154e <lv_cont_layout_pretty+0x1f2>
                                         inv * (act_x + mleft),
  4215e0:	eb09 0a07 	add.w	sl, r9, r7
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
  4215e4:	4630      	mov	r0, r6
  4215e6:	4b15      	ldr	r3, [pc, #84]	; (42163c <lv_cont_layout_pretty+0x2e0>)
  4215e8:	4798      	blx	r3
  4215ea:	ebb8 0000 	subs.w	r0, r8, r0
  4215ee:	d410      	bmi.n	421612 <lv_cont_layout_pretty+0x2b6>
  4215f0:	9b04      	ldr	r3, [sp, #16]
  4215f2:	eb03 0260 	add.w	r2, r3, r0, asr #1
                            lv_obj_align(child_tmp, cont, align,
  4215f6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  4215fa:	fb1a f303 	smulbb	r3, sl, r3
  4215fe:	b212      	sxth	r2, r2
  421600:	9200      	str	r2, [sp, #0]
  421602:	b21b      	sxth	r3, r3
  421604:	9a09      	ldr	r2, [sp, #36]	; 0x24
  421606:	9906      	ldr	r1, [sp, #24]
  421608:	4630      	mov	r0, r6
  42160a:	f8df a034 	ldr.w	sl, [pc, #52]	; 421640 <lv_cont_layout_pretty+0x2e4>
  42160e:	47d0      	blx	sl
                            break;
  421610:	e7b4      	b.n	42157c <lv_cont_layout_pretty+0x220>
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
  421612:	3001      	adds	r0, #1
  421614:	e7ec      	b.n	4215f0 <lv_cont_layout_pretty+0x294>
  421616:	bf00      	nop
  421618:	00421095 	.word	0x00421095
  42161c:	00405b29 	.word	0x00405b29
  421620:	004073ed 	.word	0x004073ed
  421624:	004170c3 	.word	0x004170c3
  421628:	004056f9 	.word	0x004056f9
  42162c:	004170cd 	.word	0x004170cd
  421630:	004170db 	.word	0x004170db
  421634:	00405d71 	.word	0x00405d71
  421638:	00406d55 	.word	0x00406d55
  42163c:	00405b59 	.word	0x00405b59
  421640:	004061a9 	.word	0x004061a9
  421644:	00406795 	.word	0x00406795
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
  421648:	9b04      	ldr	r3, [sp, #16]
  42164a:	eb03 0a08 	add.w	sl, r3, r8
  42164e:	fa1f fa8a 	uxth.w	sl, sl
  421652:	4630      	mov	r0, r6
  421654:	4b12      	ldr	r3, [pc, #72]	; (4216a0 <lv_cont_layout_pretty+0x344>)
  421656:	4798      	blx	r3
  421658:	b280      	uxth	r0, r0
  42165a:	ebaa 0a00 	sub.w	sl, sl, r0
  42165e:	fa1f fa8a 	uxth.w	sl, sl
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  421662:	2216      	movs	r2, #22
  421664:	2100      	movs	r1, #0
  421666:	4630      	mov	r0, r6
  421668:	4b0e      	ldr	r3, [pc, #56]	; (4216a4 <lv_cont_layout_pretty+0x348>)
  42166a:	4798      	blx	r3
  42166c:	b282      	uxth	r2, r0
  42166e:	ebaa 0202 	sub.w	r2, sl, r2
                            lv_obj_align(child_tmp, cont, align,
  421672:	eb09 0307 	add.w	r3, r9, r7
  421676:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
  42167a:	fb13 f301 	smulbb	r3, r3, r1
  42167e:	b212      	sxth	r2, r2
  421680:	9200      	str	r2, [sp, #0]
  421682:	b21b      	sxth	r3, r3
  421684:	9a09      	ldr	r2, [sp, #36]	; 0x24
  421686:	9906      	ldr	r1, [sp, #24]
  421688:	4630      	mov	r0, r6
  42168a:	f8df a020 	ldr.w	sl, [pc, #32]	; 4216ac <lv_cont_layout_pretty+0x350>
  42168e:	47d0      	blx	sl
                            break;
  421690:	e774      	b.n	42157c <lv_cont_layout_pretty+0x220>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  421692:	2101      	movs	r1, #1
  421694:	9806      	ldr	r0, [sp, #24]
  421696:	4b04      	ldr	r3, [pc, #16]	; (4216a8 <lv_cont_layout_pretty+0x34c>)
  421698:	4798      	blx	r3
}
  42169a:	b00d      	add	sp, #52	; 0x34
  42169c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4216a0:	00405b59 	.word	0x00405b59
  4216a4:	004073ed 	.word	0x004073ed
  4216a8:	00405729 	.word	0x00405729
  4216ac:	004061a9 	.word	0x004061a9

004216b0 <lv_cont_refr_layout>:
{
  4216b0:	b538      	push	{r3, r4, r5, lr}
  4216b2:	4604      	mov	r4, r0
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
  4216b4:	2101      	movs	r1, #1
  4216b6:	4b1a      	ldr	r3, [pc, #104]	; (421720 <lv_cont_refr_layout+0x70>)
  4216b8:	4798      	blx	r3
  4216ba:	b100      	cbz	r0, 4216be <lv_cont_refr_layout+0xe>
  4216bc:	bd38      	pop	{r3, r4, r5, pc}
    lv_layout_t type = lv_cont_get_layout(cont);
  4216be:	4620      	mov	r0, r4
  4216c0:	4b18      	ldr	r3, [pc, #96]	; (421724 <lv_cont_refr_layout+0x74>)
  4216c2:	4798      	blx	r3
  4216c4:	4605      	mov	r5, r0
    if(lv_obj_get_child(cont, NULL) == NULL) return;
  4216c6:	2100      	movs	r1, #0
  4216c8:	4620      	mov	r0, r4
  4216ca:	4b17      	ldr	r3, [pc, #92]	; (421728 <lv_cont_refr_layout+0x78>)
  4216cc:	4798      	blx	r3
  4216ce:	2800      	cmp	r0, #0
  4216d0:	d0f4      	beq.n	4216bc <lv_cont_refr_layout+0xc>
    if(type == LV_LAYOUT_OFF) return;
  4216d2:	2d00      	cmp	r5, #0
  4216d4:	d0f2      	beq.n	4216bc <lv_cont_refr_layout+0xc>
    if(type == LV_LAYOUT_CENTER) {
  4216d6:	2d01      	cmp	r5, #1
  4216d8:	d012      	beq.n	421700 <lv_cont_refr_layout+0x50>
    else if(type == LV_LAYOUT_COLUMN_LEFT || type == LV_LAYOUT_COLUMN_MID || type == LV_LAYOUT_COLUMN_RIGHT) {
  4216da:	1eab      	subs	r3, r5, #2
  4216dc:	b2db      	uxtb	r3, r3
  4216de:	2b02      	cmp	r3, #2
  4216e0:	d912      	bls.n	421708 <lv_cont_refr_layout+0x58>
    else if(type == LV_LAYOUT_ROW_TOP || type == LV_LAYOUT_ROW_MID || type == LV_LAYOUT_ROW_BOTTOM) {
  4216e2:	1f6b      	subs	r3, r5, #5
  4216e4:	b2db      	uxtb	r3, r3
  4216e6:	2b02      	cmp	r3, #2
  4216e8:	d912      	bls.n	421710 <lv_cont_refr_layout+0x60>
    else if(type == LV_LAYOUT_PRETTY_MID || type == LV_LAYOUT_PRETTY_TOP || type == LV_LAYOUT_PRETTY_BOTTOM) {
  4216ea:	f1a5 0308 	sub.w	r3, r5, #8
  4216ee:	b2db      	uxtb	r3, r3
  4216f0:	2b02      	cmp	r3, #2
  4216f2:	d911      	bls.n	421718 <lv_cont_refr_layout+0x68>
    else if(type == LV_LAYOUT_GRID) {
  4216f4:	2d0b      	cmp	r5, #11
  4216f6:	d1e1      	bne.n	4216bc <lv_cont_refr_layout+0xc>
        lv_cont_layout_grid(cont);
  4216f8:	4620      	mov	r0, r4
  4216fa:	4b0c      	ldr	r3, [pc, #48]	; (42172c <lv_cont_refr_layout+0x7c>)
  4216fc:	4798      	blx	r3
  4216fe:	e7dd      	b.n	4216bc <lv_cont_refr_layout+0xc>
        lv_cont_layout_center(cont);
  421700:	4620      	mov	r0, r4
  421702:	4b0b      	ldr	r3, [pc, #44]	; (421730 <lv_cont_refr_layout+0x80>)
  421704:	4798      	blx	r3
  421706:	bd38      	pop	{r3, r4, r5, pc}
        lv_cont_layout_col(cont);
  421708:	4620      	mov	r0, r4
  42170a:	4b0a      	ldr	r3, [pc, #40]	; (421734 <lv_cont_refr_layout+0x84>)
  42170c:	4798      	blx	r3
  42170e:	bd38      	pop	{r3, r4, r5, pc}
        lv_cont_layout_row(cont);
  421710:	4620      	mov	r0, r4
  421712:	4b09      	ldr	r3, [pc, #36]	; (421738 <lv_cont_refr_layout+0x88>)
  421714:	4798      	blx	r3
  421716:	bd38      	pop	{r3, r4, r5, pc}
        lv_cont_layout_pretty(cont);
  421718:	4620      	mov	r0, r4
  42171a:	4b08      	ldr	r3, [pc, #32]	; (42173c <lv_cont_refr_layout+0x8c>)
  42171c:	4798      	blx	r3
  42171e:	bd38      	pop	{r3, r4, r5, pc}
  421720:	00406d55 	.word	0x00406d55
  421724:	00421095 	.word	0x00421095
  421728:	00405a29 	.word	0x00405a29
  42172c:	00420a25 	.word	0x00420a25
  421730:	004208f9 	.word	0x004208f9
  421734:	004210c9 	.word	0x004210c9
  421738:	004211f1 	.word	0x004211f1
  42173c:	0042135d 	.word	0x0042135d

00421740 <lv_cont_signal>:
{
  421740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  421742:	4607      	mov	r7, r0
  421744:	460c      	mov	r4, r1
  421746:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  421748:	2908      	cmp	r1, #8
  42174a:	d013      	beq.n	421774 <lv_cont_signal+0x34>
    res = ancestor_signal(cont, sign, param);
  42174c:	4b2a      	ldr	r3, [pc, #168]	; (4217f8 <lv_cont_signal+0xb8>)
  42174e:	681b      	ldr	r3, [r3, #0]
  421750:	4798      	blx	r3
  421752:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  421754:	2801      	cmp	r0, #1
  421756:	d113      	bne.n	421780 <lv_cont_signal+0x40>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  421758:	2c07      	cmp	r4, #7
  42175a:	d01b      	beq.n	421794 <lv_cont_signal+0x54>
    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
  42175c:	2c04      	cmp	r4, #4
  42175e:	d01f      	beq.n	4217a0 <lv_cont_signal+0x60>
    else if(sign == LV_SIGNAL_CHILD_CHG) {
  421760:	2c01      	cmp	r4, #1
  421762:	d024      	beq.n	4217ae <lv_cont_signal+0x6e>
    else if(sign == LV_SIGNAL_COORD_CHG) {
  421764:	2c02      	cmp	r4, #2
  421766:	d029      	beq.n	4217bc <lv_cont_signal+0x7c>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
  421768:	2c03      	cmp	r4, #3
  42176a:	d109      	bne.n	421780 <lv_cont_signal+0x40>
        lv_cont_refr_autofit(cont);
  42176c:	4638      	mov	r0, r7
  42176e:	4b23      	ldr	r3, [pc, #140]	; (4217fc <lv_cont_signal+0xbc>)
  421770:	4798      	blx	r3
  421772:	e005      	b.n	421780 <lv_cont_signal+0x40>
        info->result = lv_cont_get_style(cont, info->part);
  421774:	7811      	ldrb	r1, [r2, #0]
  421776:	4b22      	ldr	r3, [pc, #136]	; (421800 <lv_cont_signal+0xc0>)
  421778:	4798      	blx	r3
  42177a:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  42177c:	b110      	cbz	r0, 421784 <lv_cont_signal+0x44>
  42177e:	2601      	movs	r6, #1
}
  421780:	4630      	mov	r0, r6
  421782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        else return ancestor_signal(cont, sign, param);
  421784:	4b1c      	ldr	r3, [pc, #112]	; (4217f8 <lv_cont_signal+0xb8>)
  421786:	681b      	ldr	r3, [r3, #0]
  421788:	462a      	mov	r2, r5
  42178a:	4621      	mov	r1, r4
  42178c:	4638      	mov	r0, r7
  42178e:	4798      	blx	r3
  421790:	4606      	mov	r6, r0
  421792:	e7f5      	b.n	421780 <lv_cont_signal+0x40>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  421794:	491b      	ldr	r1, [pc, #108]	; (421804 <lv_cont_signal+0xc4>)
  421796:	4628      	mov	r0, r5
  421798:	4b1b      	ldr	r3, [pc, #108]	; (421808 <lv_cont_signal+0xc8>)
  42179a:	4798      	blx	r3
  42179c:	4606      	mov	r6, r0
  42179e:	e7ef      	b.n	421780 <lv_cont_signal+0x40>
        lv_cont_refr_layout(cont);
  4217a0:	4638      	mov	r0, r7
  4217a2:	4b1a      	ldr	r3, [pc, #104]	; (42180c <lv_cont_signal+0xcc>)
  4217a4:	4798      	blx	r3
        lv_cont_refr_autofit(cont);
  4217a6:	4638      	mov	r0, r7
  4217a8:	4b14      	ldr	r3, [pc, #80]	; (4217fc <lv_cont_signal+0xbc>)
  4217aa:	4798      	blx	r3
  4217ac:	e7e8      	b.n	421780 <lv_cont_signal+0x40>
        lv_cont_refr_layout(cont);
  4217ae:	4638      	mov	r0, r7
  4217b0:	4b16      	ldr	r3, [pc, #88]	; (42180c <lv_cont_signal+0xcc>)
  4217b2:	4798      	blx	r3
        lv_cont_refr_autofit(cont);
  4217b4:	4638      	mov	r0, r7
  4217b6:	4b11      	ldr	r3, [pc, #68]	; (4217fc <lv_cont_signal+0xbc>)
  4217b8:	4798      	blx	r3
  4217ba:	e7e1      	b.n	421780 <lv_cont_signal+0x40>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
  4217bc:	4638      	mov	r0, r7
  4217be:	4b14      	ldr	r3, [pc, #80]	; (421810 <lv_cont_signal+0xd0>)
  4217c0:	4798      	blx	r3
  4217c2:	88ab      	ldrh	r3, [r5, #4]
  4217c4:	882a      	ldrh	r2, [r5, #0]
  4217c6:	1a9b      	subs	r3, r3, r2
  4217c8:	b29b      	uxth	r3, r3
  4217ca:	3301      	adds	r3, #1
  4217cc:	b21b      	sxth	r3, r3
  4217ce:	4298      	cmp	r0, r3
  4217d0:	d006      	beq.n	4217e0 <lv_cont_signal+0xa0>
            lv_cont_refr_layout(cont);
  4217d2:	4638      	mov	r0, r7
  4217d4:	4b0d      	ldr	r3, [pc, #52]	; (42180c <lv_cont_signal+0xcc>)
  4217d6:	4798      	blx	r3
            lv_cont_refr_autofit(cont);
  4217d8:	4638      	mov	r0, r7
  4217da:	4b08      	ldr	r3, [pc, #32]	; (4217fc <lv_cont_signal+0xbc>)
  4217dc:	4798      	blx	r3
  4217de:	e7cf      	b.n	421780 <lv_cont_signal+0x40>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
  4217e0:	4638      	mov	r0, r7
  4217e2:	4b0c      	ldr	r3, [pc, #48]	; (421814 <lv_cont_signal+0xd4>)
  4217e4:	4798      	blx	r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4217e6:	88eb      	ldrh	r3, [r5, #6]
  4217e8:	886a      	ldrh	r2, [r5, #2]
  4217ea:	1a9b      	subs	r3, r3, r2
  4217ec:	b29b      	uxth	r3, r3
  4217ee:	3301      	adds	r3, #1
  4217f0:	b21b      	sxth	r3, r3
  4217f2:	4298      	cmp	r0, r3
  4217f4:	d1ed      	bne.n	4217d2 <lv_cont_signal+0x92>
  4217f6:	e7c3      	b.n	421780 <lv_cont_signal+0x40>
  4217f8:	2041484c 	.word	0x2041484c
  4217fc:	00420b15 	.word	0x00420b15
  421800:	004208ed 	.word	0x004208ed
  421804:	00431cb8 	.word	0x00431cb8
  421808:	00408289 	.word	0x00408289
  42180c:	004216b1 	.word	0x004216b1
  421810:	00405b29 	.word	0x00405b29
  421814:	00405b59 	.word	0x00405b59

00421818 <lv_gauge_get_style>:
 * @param page pointer the object
 * @param part the part from `lv_gauge_part_t`. (LV_GAUGE_PART_...)
 * @return pointer to the style descriptor of the specified part
 */
static lv_style_list_t * lv_gauge_get_style(lv_obj_t * gauge, uint8_t part)
{
  421818:	b538      	push	{r3, r4, r5, lr}
  42181a:	4604      	mov	r4, r0
  42181c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(gauge, LV_OBJX_NAME);
  42181e:	4b0d      	ldr	r3, [pc, #52]	; (421854 <lv_gauge_get_style+0x3c>)
  421820:	4798      	blx	r3
  421822:	b928      	cbnz	r0, 421830 <lv_gauge_get_style+0x18>
  421824:	4622      	mov	r2, r4
  421826:	2300      	movs	r3, #0
  421828:	480b      	ldr	r0, [pc, #44]	; (421858 <lv_gauge_get_style+0x40>)
  42182a:	490c      	ldr	r1, [pc, #48]	; (42185c <lv_gauge_get_style+0x44>)
  42182c:	4788      	blx	r1
  42182e:	e7fe      	b.n	42182e <lv_gauge_get_style+0x16>

    lv_gauge_ext_t * ext = lv_obj_get_ext_attr(gauge);
  421830:	4620      	mov	r0, r4
  421832:	4b0b      	ldr	r3, [pc, #44]	; (421860 <lv_gauge_get_style+0x48>)
  421834:	4798      	blx	r3
    lv_style_list_t * style_dsc_p;

    switch(part) {
  421836:	2d01      	cmp	r5, #1
  421838:	d007      	beq.n	42184a <lv_gauge_get_style+0x32>
  42183a:	b11d      	cbz	r5, 421844 <lv_gauge_get_style+0x2c>
  42183c:	2d02      	cmp	r5, #2
  42183e:	d006      	beq.n	42184e <lv_gauge_get_style+0x36>
            break;
        case LV_GAUGE_PART_NEEDLE:
            style_dsc_p = &ext->style_needle;
            break;
        default:
            style_dsc_p = NULL;
  421840:	2000      	movs	r0, #0
    }

    return style_dsc_p;
}
  421842:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = &gauge->style_list;
  421844:	f104 0028 	add.w	r0, r4, #40	; 0x28
            break;
  421848:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = &ext->style_strong;
  42184a:	3030      	adds	r0, #48	; 0x30
            break;
  42184c:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = &ext->style_needle;
  42184e:	3028      	adds	r0, #40	; 0x28
            break;
  421850:	bd38      	pop	{r3, r4, r5, pc}
  421852:	bf00      	nop
  421854:	00416da9 	.word	0x00416da9
  421858:	0042e560 	.word	0x0042e560
  42185c:	00416db5 	.word	0x00416db5
  421860:	00407ffd 	.word	0x00407ffd

00421864 <lv_gauge_draw_labels>:
 * Draw the scale on a gauge
 * @param gauge pointer to gauge object
 * @param mask mask of drawing
 */
static void lv_gauge_draw_labels(lv_obj_t * gauge, const lv_area_t * mask)
{
  421864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  421868:	b09f      	sub	sp, #124	; 0x7c
  42186a:	4681      	mov	r9, r0
  42186c:	9006      	str	r0, [sp, #24]
  42186e:	910d      	str	r1, [sp, #52]	; 0x34
    lv_gauge_ext_t * ext     = lv_obj_get_ext_attr(gauge);
  421870:	4b76      	ldr	r3, [pc, #472]	; (421a4c <lv_gauge_draw_labels+0x1e8>)
  421872:	4798      	blx	r3
  421874:	9005      	str	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  421876:	22c0      	movs	r2, #192	; 0xc0
  421878:	2101      	movs	r1, #1
  42187a:	4648      	mov	r0, r9
  42187c:	4d74      	ldr	r5, [pc, #464]	; (421a50 <lv_gauge_draw_labels+0x1ec>)
  42187e:	47a8      	blx	r5
  421880:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  421882:	2212      	movs	r2, #18
  421884:	2100      	movs	r1, #0
  421886:	4648      	mov	r0, r9
  421888:	47a8      	blx	r5
  42188a:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  42188c:	2213      	movs	r2, #19
  42188e:	2100      	movs	r1, #0
  421890:	4648      	mov	r0, r9
  421892:	47a8      	blx	r5
  421894:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  421896:	2210      	movs	r2, #16
  421898:	2100      	movs	r1, #0
  42189a:	4648      	mov	r0, r9
  42189c:	47a8      	blx	r5
  42189e:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4218a0:	2214      	movs	r2, #20
  4218a2:	2100      	movs	r1, #0
  4218a4:	4648      	mov	r0, r9
  4218a6:	47a8      	blx	r5
  4218a8:	4605      	mov	r5, r0
    lv_style_int_t scale_width = lv_obj_get_style_scale_width(gauge, LV_GAUGE_PART_MAJOR);
    lv_style_int_t left = lv_obj_get_style_pad_left(gauge, LV_GAUGE_PART_MAIN);
    lv_style_int_t right = lv_obj_get_style_pad_right(gauge, LV_GAUGE_PART_MAIN);
    lv_style_int_t top = lv_obj_get_style_pad_top(gauge, LV_GAUGE_PART_MAIN);
    lv_style_int_t txt_pad = lv_obj_get_style_pad_inner(gauge, LV_GAUGE_PART_MAIN);
    lv_coord_t r             = (lv_obj_get_width(gauge) - left - right) / 2 - scale_width - txt_pad;
  4218aa:	4648      	mov	r0, r9
  4218ac:	4b69      	ldr	r3, [pc, #420]	; (421a54 <lv_gauge_draw_labels+0x1f0>)
  4218ae:	4798      	blx	r3
  4218b0:	1b80      	subs	r0, r0, r6
  4218b2:	ebb0 0808 	subs.w	r8, r0, r8
  4218b6:	d445      	bmi.n	421944 <lv_gauge_draw_labels+0xe0>
  4218b8:	b2bf      	uxth	r7, r7
  4218ba:	ebc7 0868 	rsb	r8, r7, r8, asr #1
  4218be:	fa1f f388 	uxth.w	r3, r8
  4218c2:	b2ad      	uxth	r5, r5
  4218c4:	1b5b      	subs	r3, r3, r5
  4218c6:	b29b      	uxth	r3, r3
  4218c8:	fa0f fb83 	sxth.w	fp, r3
    lv_coord_t x_ofs         = gauge->coords.x1 + r + left + scale_width + txt_pad;
  4218cc:	9906      	ldr	r1, [sp, #24]
  4218ce:	8a0a      	ldrh	r2, [r1, #16]
  4218d0:	441a      	add	r2, r3
  4218d2:	fa16 f682 	uxtah	r6, r6, r2
  4218d6:	fa17 f686 	uxtah	r6, r7, r6
  4218da:	fa15 f686 	uxtah	r6, r5, r6
  4218de:	b2b2      	uxth	r2, r6
  4218e0:	9207      	str	r2, [sp, #28]
    lv_coord_t y_ofs         = gauge->coords.y1 + r + top + scale_width + txt_pad;
  4218e2:	8a48      	ldrh	r0, [r1, #18]
  4218e4:	4418      	add	r0, r3
  4218e6:	fa14 f080 	uxtah	r0, r4, r0
  4218ea:	fa17 f080 	uxtah	r0, r7, r0
  4218ee:	fa15 f080 	uxtah	r0, r5, r0
  4218f2:	b283      	uxth	r3, r0
  4218f4:	9308      	str	r3, [sp, #32]
    int16_t scale_angle      = lv_linemeter_get_scale_angle(gauge);
  4218f6:	4608      	mov	r0, r1
  4218f8:	4b57      	ldr	r3, [pc, #348]	; (421a58 <lv_gauge_draw_labels+0x1f4>)
  4218fa:	4798      	blx	r3
  4218fc:	b200      	sxth	r0, r0
    uint16_t label_num       = ext->label_count;
  4218fe:	9b05      	ldr	r3, [sp, #20]
  421900:	f893 a039 	ldrb.w	sl, [r3, #57]	; 0x39
    int16_t angle_ofs        = 90 + (360 - scale_angle) / 2 + lv_gauge_get_angle_offset(gauge);
  421904:	9009      	str	r0, [sp, #36]	; 0x24
  421906:	f5d0 70b4 	rsbs	r0, r0, #360	; 0x168
  42190a:	d41e      	bmi.n	42194a <lv_gauge_draw_labels+0xe6>
  42190c:	1044      	asrs	r4, r0, #1
 * @param gauge pointer to a gauge object
 * @return angle offset (0..360)
 */
static inline uint16_t lv_gauge_get_angle_offset(lv_obj_t * gauge)
{
    return lv_linemeter_get_angle_offset(gauge);
  42190e:	9d06      	ldr	r5, [sp, #24]
  421910:	4628      	mov	r0, r5
  421912:	4b52      	ldr	r3, [pc, #328]	; (421a5c <lv_gauge_draw_labels+0x1f8>)
  421914:	4798      	blx	r3
  421916:	4420      	add	r0, r4
  421918:	305a      	adds	r0, #90	; 0x5a
  42191a:	b283      	uxth	r3, r0
  42191c:	930a      	str	r3, [sp, #40]	; 0x28
    return lv_linemeter_get_min_value(lmeter);
  42191e:	4628      	mov	r0, r5
  421920:	4b4f      	ldr	r3, [pc, #316]	; (421a60 <lv_gauge_draw_labels+0x1fc>)
  421922:	4798      	blx	r3
  421924:	900c      	str	r0, [sp, #48]	; 0x30
    return lv_linemeter_get_max_value(lmeter);
  421926:	4628      	mov	r0, r5
  421928:	4b4e      	ldr	r3, [pc, #312]	; (421a64 <lv_gauge_draw_labels+0x200>)
  42192a:	4798      	blx	r3
  42192c:	900b      	str	r0, [sp, #44]	; 0x2c
    int32_t min              = lv_gauge_get_min_value(gauge);
    int32_t max              = lv_gauge_get_max_value(gauge);

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
  42192e:	a815      	add	r0, sp, #84	; 0x54
  421930:	4b4d      	ldr	r3, [pc, #308]	; (421a68 <lv_gauge_draw_labels+0x204>)
  421932:	4798      	blx	r3
    lv_obj_init_draw_label_dsc(gauge, LV_GAUGE_PART_MAJOR, &label_dsc);
  421934:	aa15      	add	r2, sp, #84	; 0x54
  421936:	2101      	movs	r1, #1
  421938:	4628      	mov	r0, r5
  42193a:	4b4c      	ldr	r3, [pc, #304]	; (421a6c <lv_gauge_draw_labels+0x208>)
  42193c:	4798      	blx	r3

    uint8_t i;
    for(i = 0; i < label_num; i++) {
  42193e:	f04f 0800 	mov.w	r8, #0
  421942:	e024      	b.n	42198e <lv_gauge_draw_labels+0x12a>
    lv_coord_t r             = (lv_obj_get_width(gauge) - left - right) / 2 - scale_width - txt_pad;
  421944:	f108 0801 	add.w	r8, r8, #1
  421948:	e7b6      	b.n	4218b8 <lv_gauge_draw_labels+0x54>
    int16_t angle_ofs        = 90 + (360 - scale_angle) / 2 + lv_gauge_get_angle_offset(gauge);
  42194a:	3001      	adds	r0, #1
  42194c:	e7de      	b.n	42190c <lv_gauge_draw_labels+0xa8>

        int32_t scale_act = (int32_t)((int32_t)(max - min) * i) / (label_num - 1);
        scale_act += min;
        char scale_txt[16];
        if(ext->format_cb == NULL)
            _lv_utils_num_to_str(scale_act, scale_txt);
  42194e:	a911      	add	r1, sp, #68	; 0x44
  421950:	4618      	mov	r0, r3
  421952:	4b47      	ldr	r3, [pc, #284]	; (421a70 <lv_gauge_draw_labels+0x20c>)
  421954:	4798      	blx	r3
  421956:	e055      	b.n	421a04 <lv_gauge_draw_labels+0x1a0>
        lv_point_t label_size;
        _lv_txt_get_size(&label_size, scale_txt, label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
                         LV_COORD_MAX, LV_TXT_FLAG_NONE);

        /*Draw the label*/
        label_cord.x1 = x - label_size.x / 2;
  421958:	1c53      	adds	r3, r2, #1
  42195a:	e067      	b.n	421a2c <lv_gauge_draw_labels+0x1c8>
        label_cord.y1 = y - label_size.y / 2;
  42195c:	eba4 0461 	sub.w	r4, r4, r1, asr #1
  421960:	b2a4      	uxth	r4, r4
  421962:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
        label_cord.x2 = label_cord.x1 + label_size.x;
  421966:	fa15 f582 	uxtah	r5, r5, r2
  42196a:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
        label_cord.y2 = label_cord.y1 + label_size.y;
  42196e:	fa14 f483 	uxtah	r4, r4, r3
  421972:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42

        lv_draw_label(&label_cord, mask, &label_dsc, scale_txt, NULL);
  421976:	2300      	movs	r3, #0
  421978:	9300      	str	r3, [sp, #0]
  42197a:	ab11      	add	r3, sp, #68	; 0x44
  42197c:	aa15      	add	r2, sp, #84	; 0x54
  42197e:	990d      	ldr	r1, [sp, #52]	; 0x34
  421980:	a80f      	add	r0, sp, #60	; 0x3c
  421982:	4c3c      	ldr	r4, [pc, #240]	; (421a74 <lv_gauge_draw_labels+0x210>)
  421984:	47a0      	blx	r4
    for(i = 0; i < label_num; i++) {
  421986:	f108 0801 	add.w	r8, r8, #1
  42198a:	fa5f f888 	uxtb.w	r8, r8
  42198e:	45d0      	cmp	r8, sl
  421990:	d258      	bcs.n	421a44 <lv_gauge_draw_labels+0x1e0>
        int16_t angle = (i * scale_angle) / (label_num - 1) + angle_ofs;
  421992:	9b09      	ldr	r3, [sp, #36]	; 0x24
  421994:	fb08 f503 	mul.w	r5, r8, r3
  421998:	f10a 37ff 	add.w	r7, sl, #4294967295
  42199c:	fb95 f5f7 	sdiv	r5, r5, r7
  4219a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4219a2:	441d      	add	r5, r3
  4219a4:	b2ad      	uxth	r5, r5
        lv_coord_t y = (int32_t)((int32_t)_lv_trigo_sin(angle) * r) / LV_TRIGO_SIN_MAX;
  4219a6:	b228      	sxth	r0, r5
  4219a8:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 421a80 <lv_gauge_draw_labels+0x21c>
  4219ac:	47c8      	blx	r9
  4219ae:	fb0b f000 	mul.w	r0, fp, r0
  4219b2:	4e31      	ldr	r6, [pc, #196]	; (421a78 <lv_gauge_draw_labels+0x214>)
  4219b4:	fb86 3400 	smull	r3, r4, r6, r0
  4219b8:	1823      	adds	r3, r4, r0
  4219ba:	17c4      	asrs	r4, r0, #31
  4219bc:	ebc4 34a3 	rsb	r4, r4, r3, asr #14
        y += y_ofs;
  4219c0:	9b08      	ldr	r3, [sp, #32]
  4219c2:	441c      	add	r4, r3
  4219c4:	b2a4      	uxth	r4, r4
        lv_coord_t x = (int32_t)((int32_t)_lv_trigo_sin(angle + 90) * r) / LV_TRIGO_SIN_MAX;
  4219c6:	f105 005a 	add.w	r0, r5, #90	; 0x5a
  4219ca:	b200      	sxth	r0, r0
  4219cc:	47c8      	blx	r9
  4219ce:	fb00 f00b 	mul.w	r0, r0, fp
  4219d2:	fb86 3600 	smull	r3, r6, r6, r0
  4219d6:	4406      	add	r6, r0
  4219d8:	17c5      	asrs	r5, r0, #31
  4219da:	ebc5 35a6 	rsb	r5, r5, r6, asr #14
        x += x_ofs;
  4219de:	9b07      	ldr	r3, [sp, #28]
  4219e0:	441d      	add	r5, r3
  4219e2:	b2ad      	uxth	r5, r5
        int32_t scale_act = (int32_t)((int32_t)(max - min) * i) / (label_num - 1);
  4219e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4219e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4219e8:	1ad0      	subs	r0, r2, r3
  4219ea:	fb00 f008 	mul.w	r0, r0, r8
  4219ee:	fb90 f7f7 	sdiv	r7, r0, r7
        scale_act += min;
  4219f2:	18fb      	adds	r3, r7, r3
        if(ext->format_cb == NULL)
  4219f4:	9a05      	ldr	r2, [sp, #20]
  4219f6:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
  4219f8:	2e00      	cmp	r6, #0
  4219fa:	d0a8      	beq.n	42194e <lv_gauge_draw_labels+0xea>
            ext->format_cb(gauge, scale_txt, sizeof(scale_txt), scale_act);
  4219fc:	2210      	movs	r2, #16
  4219fe:	a911      	add	r1, sp, #68	; 0x44
  421a00:	9806      	ldr	r0, [sp, #24]
  421a02:	47b0      	blx	r6
        _lv_txt_get_size(&label_size, scale_txt, label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
  421a04:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
  421a08:	2200      	movs	r2, #0
  421a0a:	9202      	str	r2, [sp, #8]
  421a0c:	f647 4218 	movw	r2, #31768	; 0x7c18
  421a10:	9201      	str	r2, [sp, #4]
  421a12:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
  421a16:	9200      	str	r2, [sp, #0]
  421a18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  421a1a:	a911      	add	r1, sp, #68	; 0x44
  421a1c:	a80e      	add	r0, sp, #56	; 0x38
  421a1e:	4e17      	ldr	r6, [pc, #92]	; (421a7c <lv_gauge_draw_labels+0x218>)
  421a20:	47b0      	blx	r6
        label_cord.x1 = x - label_size.x / 2;
  421a22:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
  421a26:	4613      	mov	r3, r2
  421a28:	2a00      	cmp	r2, #0
  421a2a:	db95      	blt.n	421958 <lv_gauge_draw_labels+0xf4>
  421a2c:	eba5 0563 	sub.w	r5, r5, r3, asr #1
  421a30:	b2ad      	uxth	r5, r5
  421a32:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
        label_cord.y1 = y - label_size.y / 2;
  421a36:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
  421a3a:	4619      	mov	r1, r3
  421a3c:	2b00      	cmp	r3, #0
  421a3e:	da8d      	bge.n	42195c <lv_gauge_draw_labels+0xf8>
  421a40:	1c59      	adds	r1, r3, #1
  421a42:	e78b      	b.n	42195c <lv_gauge_draw_labels+0xf8>
    }
}
  421a44:	b01f      	add	sp, #124	; 0x7c
  421a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  421a4a:	bf00      	nop
  421a4c:	00407ffd 	.word	0x00407ffd
  421a50:	004073ed 	.word	0x004073ed
  421a54:	00405b29 	.word	0x00405b29
  421a58:	004246d5 	.word	0x004246d5
  421a5c:	00424705 	.word	0x00424705
  421a60:	00424675 	.word	0x00424675
  421a64:	004246a5 	.word	0x004246a5
  421a68:	0040e919 	.word	0x0040e919
  421a6c:	004088d5 	.word	0x004088d5
  421a70:	00418eed 	.word	0x00418eed
  421a74:	0040e961 	.word	0x0040e961
  421a78:	80010003 	.word	0x80010003
  421a7c:	00418db5 	.word	0x00418db5
  421a80:	0041737d 	.word	0x0041737d

00421a84 <lv_gauge_draw_needle>:
 * Draw the needles of a gauge
 * @param gauge pointer to gauge object
 * @param mask mask of drawing
 */
static void lv_gauge_draw_needle(lv_obj_t * gauge, const lv_area_t * clip_area)
{
  421a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  421a88:	b0ab      	sub	sp, #172	; 0xac
  421a8a:	4607      	mov	r7, r0
  421a8c:	9101      	str	r1, [sp, #4]
    lv_gauge_ext_t * ext     = lv_obj_get_ext_attr(gauge);
  421a8e:	4ba0      	ldr	r3, [pc, #640]	; (421d10 <lv_gauge_draw_needle+0x28c>)
  421a90:	4798      	blx	r3
  421a92:	4606      	mov	r6, r0
  421a94:	2214      	movs	r2, #20
  421a96:	2102      	movs	r1, #2
  421a98:	4638      	mov	r0, r7
  421a9a:	4c9e      	ldr	r4, [pc, #632]	; (421d14 <lv_gauge_draw_needle+0x290>)
  421a9c:	47a0      	blx	r4
  421a9e:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  421aa0:	2212      	movs	r2, #18
  421aa2:	2100      	movs	r1, #0
  421aa4:	4638      	mov	r0, r7
  421aa6:	47a0      	blx	r4
  421aa8:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  421aaa:	2213      	movs	r2, #19
  421aac:	2100      	movs	r1, #0
  421aae:	4638      	mov	r0, r7
  421ab0:	47a0      	blx	r4
  421ab2:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  421ab4:	2210      	movs	r2, #16
  421ab6:	2100      	movs	r1, #0
  421ab8:	4638      	mov	r0, r7
  421aba:	47a0      	blx	r4
  421abc:	4604      	mov	r4, r0
    lv_style_int_t pad = lv_obj_get_style_pad_inner(gauge, LV_GAUGE_PART_NEEDLE);
    lv_style_int_t left = lv_obj_get_style_pad_left(gauge, LV_GAUGE_PART_MAIN);
    lv_style_int_t right = lv_obj_get_style_pad_right(gauge, LV_GAUGE_PART_MAIN);
    lv_style_int_t top = lv_obj_get_style_pad_top(gauge, LV_GAUGE_PART_MAIN);

    lv_coord_t r      = (lv_obj_get_width(gauge) - left - right) / 2 - pad;
  421abe:	4638      	mov	r0, r7
  421ac0:	4b95      	ldr	r3, [pc, #596]	; (421d18 <lv_gauge_draw_needle+0x294>)
  421ac2:	4798      	blx	r3
  421ac4:	1b40      	subs	r0, r0, r5
  421ac6:	ebb0 0309 	subs.w	r3, r0, r9
  421aca:	d444      	bmi.n	421b56 <lv_gauge_draw_needle+0xd2>
  421acc:	fa1f f088 	uxth.w	r0, r8
  421ad0:	ebc0 0363 	rsb	r3, r0, r3, asr #1
  421ad4:	b29b      	uxth	r3, r3
  421ad6:	b21a      	sxth	r2, r3
  421ad8:	9203      	str	r2, [sp, #12]
    lv_coord_t x_ofs  = gauge->coords.x1 + r + left + pad;
  421ada:	8a3a      	ldrh	r2, [r7, #16]
  421adc:	441a      	add	r2, r3
  421ade:	fa15 f282 	uxtah	r2, r5, r2
  421ae2:	fa10 f282 	uxtah	r2, r0, r2
  421ae6:	b292      	uxth	r2, r2
  421ae8:	9204      	str	r2, [sp, #16]
  421aea:	b215      	sxth	r5, r2
    lv_coord_t y_ofs  = gauge->coords.y1 + r + top + pad;
  421aec:	8a7a      	ldrh	r2, [r7, #18]
  421aee:	4413      	add	r3, r2
  421af0:	fa14 f383 	uxtah	r3, r4, r3
  421af4:	fa10 f383 	uxtah	r3, r0, r3
  421af8:	b29b      	uxth	r3, r3
  421afa:	9305      	str	r3, [sp, #20]
  421afc:	b21c      	sxth	r4, r3
    uint16_t angle    = lv_linemeter_get_scale_angle(gauge);
  421afe:	4638      	mov	r0, r7
  421b00:	4b86      	ldr	r3, [pc, #536]	; (421d1c <lv_gauge_draw_needle+0x298>)
  421b02:	4798      	blx	r3
    int16_t angle_ofs = 90 + (360 - angle) / 2 + lv_gauge_get_angle_offset(gauge);
  421b04:	9002      	str	r0, [sp, #8]
  421b06:	f5d0 70b4 	rsbs	r0, r0, #360	; 0x168
  421b0a:	d426      	bmi.n	421b5a <lv_gauge_draw_needle+0xd6>
  421b0c:	ea4f 0860 	mov.w	r8, r0, asr #1
    return lv_linemeter_get_angle_offset(gauge);
  421b10:	4638      	mov	r0, r7
  421b12:	4b83      	ldr	r3, [pc, #524]	; (421d20 <lv_gauge_draw_needle+0x29c>)
  421b14:	4798      	blx	r3
  421b16:	4440      	add	r0, r8
  421b18:	305a      	adds	r0, #90	; 0x5a
  421b1a:	fa1f f880 	uxth.w	r8, r0
    return lv_linemeter_get_min_value(lmeter);
  421b1e:	4638      	mov	r0, r7
  421b20:	4b80      	ldr	r3, [pc, #512]	; (421d24 <lv_gauge_draw_needle+0x2a0>)
  421b22:	4798      	blx	r3
    int16_t min       = lv_gauge_get_min_value(gauge);
  421b24:	fa0f f980 	sxth.w	r9, r0
    return lv_linemeter_get_max_value(lmeter);
  421b28:	4638      	mov	r0, r7
  421b2a:	4b7f      	ldr	r3, [pc, #508]	; (421d28 <lv_gauge_draw_needle+0x2a4>)
  421b2c:	4798      	blx	r3
    int16_t max       = lv_gauge_get_max_value(gauge);
  421b2e:	fa0f fb80 	sxth.w	fp, r0
    lv_point_t p_end;
    uint8_t i;

    lv_draw_line_dsc_t line_dsc;
    lv_draw_img_dsc_t img_dsc;
    if(ext->needle_img == NULL) {
  421b32:	6a33      	ldr	r3, [r6, #32]
  421b34:	b19b      	cbz	r3, 421b5e <lv_gauge_draw_needle+0xda>
        lv_draw_line_dsc_init(&line_dsc);
        lv_obj_init_draw_line_dsc(gauge, LV_GAUGE_PART_NEEDLE, &line_dsc);
    }
    else {
        lv_draw_img_dsc_init(&img_dsc);
  421b36:	a821      	add	r0, sp, #132	; 0x84
  421b38:	4b7c      	ldr	r3, [pc, #496]	; (421d2c <lv_gauge_draw_needle+0x2a8>)
  421b3a:	4798      	blx	r3
        lv_obj_init_draw_img_dsc(gauge, LV_GAUGE_PART_NEEDLE, &img_dsc);
  421b3c:	aa21      	add	r2, sp, #132	; 0x84
  421b3e:	2102      	movs	r1, #2
  421b40:	4638      	mov	r0, r7
  421b42:	4b7b      	ldr	r3, [pc, #492]	; (421d30 <lv_gauge_draw_needle+0x2ac>)
  421b44:	4798      	blx	r3
    }

    p_mid.x = x_ofs;
  421b46:	f8ad 50a4 	strh.w	r5, [sp, #164]	; 0xa4
    p_mid.y = y_ofs;
  421b4a:	f8ad 40a6 	strh.w	r4, [sp, #166]	; 0xa6
    for(i = 0; i < ext->needle_count; i++) {
  421b4e:	2500      	movs	r5, #0
  421b50:	46da      	mov	sl, fp
  421b52:	46c3      	mov	fp, r8
  421b54:	e04b      	b.n	421bee <lv_gauge_draw_needle+0x16a>
    lv_coord_t r      = (lv_obj_get_width(gauge) - left - right) / 2 - pad;
  421b56:	3301      	adds	r3, #1
  421b58:	e7b8      	b.n	421acc <lv_gauge_draw_needle+0x48>
    int16_t angle_ofs = 90 + (360 - angle) / 2 + lv_gauge_get_angle_offset(gauge);
  421b5a:	3001      	adds	r0, #1
  421b5c:	e7d6      	b.n	421b0c <lv_gauge_draw_needle+0x88>
        lv_draw_line_dsc_init(&line_dsc);
  421b5e:	a825      	add	r0, sp, #148	; 0x94
  421b60:	4b74      	ldr	r3, [pc, #464]	; (421d34 <lv_gauge_draw_needle+0x2b0>)
  421b62:	4798      	blx	r3
        lv_obj_init_draw_line_dsc(gauge, LV_GAUGE_PART_NEEDLE, &line_dsc);
  421b64:	aa25      	add	r2, sp, #148	; 0x94
  421b66:	2102      	movs	r1, #2
  421b68:	4638      	mov	r0, r7
  421b6a:	4b73      	ldr	r3, [pc, #460]	; (421d38 <lv_gauge_draw_needle+0x2b4>)
  421b6c:	4798      	blx	r3
  421b6e:	e7ea      	b.n	421b46 <lv_gauge_draw_needle+0xc2>
        int16_t needle_angle =
            (ext->values[i] - min) * angle / (max - min) + angle_ofs;

        /*Draw line*/
        if(ext->needle_img == NULL) {
            p_end.y = (_lv_trigo_sin(needle_angle) * r) / LV_TRIGO_SIN_MAX + y_ofs;
  421b70:	4618      	mov	r0, r3
  421b72:	4b72      	ldr	r3, [pc, #456]	; (421d3c <lv_gauge_draw_needle+0x2b8>)
  421b74:	4798      	blx	r3
  421b76:	9b03      	ldr	r3, [sp, #12]
  421b78:	fb03 f000 	mul.w	r0, r3, r0
  421b7c:	4a70      	ldr	r2, [pc, #448]	; (421d40 <lv_gauge_draw_needle+0x2bc>)
  421b7e:	fb82 2300 	smull	r2, r3, r2, r0
  421b82:	4403      	add	r3, r0
  421b84:	17c0      	asrs	r0, r0, #31
  421b86:	ebc0 30a3 	rsb	r0, r0, r3, asr #14
  421b8a:	9a05      	ldr	r2, [sp, #20]
  421b8c:	4410      	add	r0, r2
  421b8e:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
            p_end.x = (_lv_trigo_sin(needle_angle + 90) * r) / LV_TRIGO_SIN_MAX + x_ofs;
  421b92:	f104 005a 	add.w	r0, r4, #90	; 0x5a
  421b96:	b200      	sxth	r0, r0
  421b98:	4a68      	ldr	r2, [pc, #416]	; (421d3c <lv_gauge_draw_needle+0x2b8>)
  421b9a:	4790      	blx	r2
  421b9c:	9b03      	ldr	r3, [sp, #12]
  421b9e:	fb00 f003 	mul.w	r0, r0, r3
  421ba2:	4b67      	ldr	r3, [pc, #412]	; (421d40 <lv_gauge_draw_needle+0x2bc>)
  421ba4:	fb83 2300 	smull	r2, r3, r3, r0
  421ba8:	4403      	add	r3, r0
  421baa:	17c0      	asrs	r0, r0, #31
  421bac:	ebc0 30a3 	rsb	r0, r0, r3, asr #14
  421bb0:	9b04      	ldr	r3, [sp, #16]
  421bb2:	4418      	add	r0, r3
  421bb4:	f8ad 00a0 	strh.w	r0, [sp, #160]	; 0xa0

            /*Draw the needle with the corresponding color*/
            if(ext->needle_colors != NULL) line_dsc.color = ext->needle_colors[i];
  421bb8:	69f3      	ldr	r3, [r6, #28]
  421bba:	b11b      	cbz	r3, 421bc4 <lv_gauge_draw_needle+0x140>
  421bbc:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
  421bc0:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94

            lv_draw_line(&p_mid, &p_end, clip_area, &line_dsc);
  421bc4:	ab25      	add	r3, sp, #148	; 0x94
  421bc6:	9a01      	ldr	r2, [sp, #4]
  421bc8:	a928      	add	r1, sp, #160	; 0xa0
  421bca:	a829      	add	r0, sp, #164	; 0xa4
  421bcc:	4c5d      	ldr	r4, [pc, #372]	; (421d44 <lv_gauge_draw_needle+0x2c0>)
  421bce:	47a0      	blx	r4
  421bd0:	e00b      	b.n	421bea <lv_gauge_draw_needle+0x166>
        else {
            lv_img_header_t info;
            lv_img_decoder_get_info(ext->needle_img, &info);

            lv_area_t a;
            a.x1 = gauge->coords.x1 + lv_area_get_width(&gauge->coords) / 2 - ext->needle_img_pivot.x;
  421bd2:	3301      	adds	r3, #1
  421bd4:	e02d      	b.n	421c32 <lv_gauge_draw_needle+0x1ae>
            a.y1 = gauge->coords.y1 + lv_area_get_height(&gauge->coords) / 2  - ext->needle_img_pivot.y;
  421bd6:	3101      	adds	r1, #1
  421bd8:	e03d      	b.n	421c56 <lv_gauge_draw_needle+0x1d2>

            if(ext->needle_colors != NULL) img_dsc.recolor = ext->needle_colors[i];

            needle_angle = (needle_angle * 10);
            if(needle_angle > 3600) needle_angle -= 3600;
            img_dsc.angle = needle_angle;
  421bda:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
            lv_draw_img(&a, clip_area, ext->needle_img, &img_dsc);
  421bde:	ab21      	add	r3, sp, #132	; 0x84
  421be0:	6a32      	ldr	r2, [r6, #32]
  421be2:	9901      	ldr	r1, [sp, #4]
  421be4:	a808      	add	r0, sp, #32
  421be6:	4c58      	ldr	r4, [pc, #352]	; (421d48 <lv_gauge_draw_needle+0x2c4>)
  421be8:	47a0      	blx	r4
    for(i = 0; i < ext->needle_count; i++) {
  421bea:	3501      	adds	r5, #1
  421bec:	b2ed      	uxtb	r5, r5
  421bee:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
  421bf2:	429d      	cmp	r5, r3
  421bf4:	d261      	bcs.n	421cba <lv_gauge_draw_needle+0x236>
            (ext->values[i] - min) * angle / (max - min) + angle_ofs;
  421bf6:	69b3      	ldr	r3, [r6, #24]
  421bf8:	46a8      	mov	r8, r5
  421bfa:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
  421bfe:	eba4 0409 	sub.w	r4, r4, r9
  421c02:	9b02      	ldr	r3, [sp, #8]
  421c04:	fb04 f403 	mul.w	r4, r4, r3
  421c08:	ebaa 0009 	sub.w	r0, sl, r9
  421c0c:	fb94 f4f0 	sdiv	r4, r4, r0
  421c10:	445c      	add	r4, fp
  421c12:	b2a4      	uxth	r4, r4
        int16_t needle_angle =
  421c14:	b223      	sxth	r3, r4
        if(ext->needle_img == NULL) {
  421c16:	6a30      	ldr	r0, [r6, #32]
  421c18:	2800      	cmp	r0, #0
  421c1a:	d0a9      	beq.n	421b70 <lv_gauge_draw_needle+0xec>
            lv_img_decoder_get_info(ext->needle_img, &info);
  421c1c:	a907      	add	r1, sp, #28
  421c1e:	4b4b      	ldr	r3, [pc, #300]	; (421d4c <lv_gauge_draw_needle+0x2c8>)
  421c20:	4798      	blx	r3
            a.x1 = gauge->coords.x1 + lv_area_get_width(&gauge->coords) / 2 - ext->needle_img_pivot.x;
  421c22:	8a3a      	ldrh	r2, [r7, #16]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  421c24:	8abb      	ldrh	r3, [r7, #20]
  421c26:	1a9b      	subs	r3, r3, r2
  421c28:	b29b      	uxth	r3, r3
  421c2a:	3301      	adds	r3, #1
  421c2c:	b21b      	sxth	r3, r3
  421c2e:	2b00      	cmp	r3, #0
  421c30:	dbcf      	blt.n	421bd2 <lv_gauge_draw_needle+0x14e>
  421c32:	eb02 0263 	add.w	r2, r2, r3, asr #1
  421c36:	b292      	uxth	r2, r2
  421c38:	f9b6 0024 	ldrsh.w	r0, [r6, #36]	; 0x24
  421c3c:	b283      	uxth	r3, r0
  421c3e:	1ad2      	subs	r2, r2, r3
  421c40:	b292      	uxth	r2, r2
  421c42:	f8ad 2020 	strh.w	r2, [sp, #32]
            a.y1 = gauge->coords.y1 + lv_area_get_height(&gauge->coords) / 2  - ext->needle_img_pivot.y;
  421c46:	8a7b      	ldrh	r3, [r7, #18]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  421c48:	8af9      	ldrh	r1, [r7, #22]
  421c4a:	1ac9      	subs	r1, r1, r3
  421c4c:	b289      	uxth	r1, r1
  421c4e:	3101      	adds	r1, #1
  421c50:	b209      	sxth	r1, r1
  421c52:	2900      	cmp	r1, #0
  421c54:	dbbf      	blt.n	421bd6 <lv_gauge_draw_needle+0x152>
  421c56:	eb03 0361 	add.w	r3, r3, r1, asr #1
  421c5a:	b29b      	uxth	r3, r3
  421c5c:	f9b6 e026 	ldrsh.w	lr, [r6, #38]	; 0x26
  421c60:	fa1f f18e 	uxth.w	r1, lr
  421c64:	1a5b      	subs	r3, r3, r1
  421c66:	b29b      	uxth	r3, r3
  421c68:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            a.x2 = a.x1 + info.w - 1;
  421c6c:	9907      	ldr	r1, [sp, #28]
  421c6e:	f3c1 218a 	ubfx	r1, r1, #10, #11
  421c72:	440a      	add	r2, r1
  421c74:	b292      	uxth	r2, r2
  421c76:	3a01      	subs	r2, #1
  421c78:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
            a.y2 = a.y1 + info.h - 1;
  421c7c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
  421c80:	f3c2 124a 	ubfx	r2, r2, #5, #11
  421c84:	4413      	add	r3, r2
  421c86:	b29b      	uxth	r3, r3
  421c88:	3b01      	subs	r3, #1
  421c8a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            img_dsc.pivot.x = ext->needle_img_pivot.x;
  421c8e:	f8ad 0088 	strh.w	r0, [sp, #136]	; 0x88
            img_dsc.pivot.y = ext->needle_img_pivot.y;
  421c92:	f8ad e08a 	strh.w	lr, [sp, #138]	; 0x8a
            if(ext->needle_colors != NULL) img_dsc.recolor = ext->needle_colors[i];
  421c96:	69f3      	ldr	r3, [r6, #28]
  421c98:	b11b      	cbz	r3, 421ca2 <lv_gauge_draw_needle+0x21e>
  421c9a:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
  421c9e:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
            needle_angle = (needle_angle * 10);
  421ca2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  421ca6:	0063      	lsls	r3, r4, #1
  421ca8:	b29b      	uxth	r3, r3
  421caa:	b21a      	sxth	r2, r3
            if(needle_angle > 3600) needle_angle -= 3600;
  421cac:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
  421cb0:	dd93      	ble.n	421bda <lv_gauge_draw_needle+0x156>
  421cb2:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
  421cb6:	b21a      	sxth	r2, r3
  421cb8:	e78f      	b.n	421bda <lv_gauge_draw_needle+0x156>
        }
    }

    lv_draw_rect_dsc_t mid_dsc;
    lv_draw_rect_dsc_init(&mid_dsc);
  421cba:	a80c      	add	r0, sp, #48	; 0x30
  421cbc:	4b24      	ldr	r3, [pc, #144]	; (421d50 <lv_gauge_draw_needle+0x2cc>)
  421cbe:	4798      	blx	r3
    lv_obj_init_draw_rect_dsc(gauge, LV_GAUGE_PART_NEEDLE, &mid_dsc);
  421cc0:	aa0c      	add	r2, sp, #48	; 0x30
  421cc2:	2102      	movs	r1, #2
  421cc4:	4638      	mov	r0, r7
  421cc6:	4b23      	ldr	r3, [pc, #140]	; (421d54 <lv_gauge_draw_needle+0x2d0>)
  421cc8:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  421cca:	2203      	movs	r2, #3
  421ccc:	2102      	movs	r1, #2
  421cce:	4638      	mov	r0, r7
  421cd0:	4b10      	ldr	r3, [pc, #64]	; (421d14 <lv_gauge_draw_needle+0x290>)
  421cd2:	4798      	blx	r3
    lv_style_int_t size = lv_obj_get_style_size(gauge, LV_GAUGE_PART_NEEDLE) / 2;
  421cd4:	4603      	mov	r3, r0
  421cd6:	2800      	cmp	r0, #0
  421cd8:	db18      	blt.n	421d0c <lv_gauge_draw_needle+0x288>
    lv_area_t nm_cord;
    nm_cord.x1 = x_ofs - size;
  421cda:	f3c3 034f 	ubfx	r3, r3, #1, #16
  421cde:	9904      	ldr	r1, [sp, #16]
  421ce0:	1aca      	subs	r2, r1, r3
  421ce2:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
    nm_cord.y1 = y_ofs - size;
  421ce6:	9805      	ldr	r0, [sp, #20]
  421ce8:	1ac2      	subs	r2, r0, r3
  421cea:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    nm_cord.x2 = x_ofs + size;
  421cee:	460a      	mov	r2, r1
  421cf0:	441a      	add	r2, r3
  421cf2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    nm_cord.y2 = y_ofs + size;
  421cf6:	4403      	add	r3, r0
  421cf8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    lv_draw_rect(&nm_cord, clip_area, &mid_dsc);
  421cfc:	aa0c      	add	r2, sp, #48	; 0x30
  421cfe:	9901      	ldr	r1, [sp, #4]
  421d00:	a80a      	add	r0, sp, #40	; 0x28
  421d02:	4b15      	ldr	r3, [pc, #84]	; (421d58 <lv_gauge_draw_needle+0x2d4>)
  421d04:	4798      	blx	r3
}
  421d06:	b02b      	add	sp, #172	; 0xac
  421d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_int_t size = lv_obj_get_style_size(gauge, LV_GAUGE_PART_NEEDLE) / 2;
  421d0c:	1c43      	adds	r3, r0, #1
  421d0e:	e7e4      	b.n	421cda <lv_gauge_draw_needle+0x256>
  421d10:	00407ffd 	.word	0x00407ffd
  421d14:	004073ed 	.word	0x004073ed
  421d18:	00405b29 	.word	0x00405b29
  421d1c:	004246d5 	.word	0x004246d5
  421d20:	00424705 	.word	0x00424705
  421d24:	00424675 	.word	0x00424675
  421d28:	004246a5 	.word	0x004246a5
  421d2c:	0040dd85 	.word	0x0040dd85
  421d30:	0040899d 	.word	0x0040899d
  421d34:	0040f769 	.word	0x0040f769
  421d38:	00408a4d 	.word	0x00408a4d
  421d3c:	0041737d 	.word	0x0041737d
  421d40:	80010003 	.word	0x80010003
  421d44:	0040f785 	.word	0x0040f785
  421d48:	0040e031 	.word	0x0040e031
  421d4c:	00414839 	.word	0x00414839
  421d50:	0041338d 	.word	0x0041338d
  421d54:	004082a5 	.word	0x004082a5
  421d58:	004133d9 	.word	0x004133d9

00421d5c <lv_gauge_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
  421d5c:	2a02      	cmp	r2, #2
  421d5e:	d027      	beq.n	421db0 <lv_gauge_design+0x54>
{
  421d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  421d62:	460d      	mov	r5, r1
  421d64:	4604      	mov	r4, r0
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  421d66:	b11a      	cbz	r2, 421d70 <lv_gauge_design+0x14>
    else if(mode == LV_DESIGN_DRAW_POST) {
  421d68:	2a01      	cmp	r2, #1
  421d6a:	d01c      	beq.n	421da6 <lv_gauge_design+0x4a>
    return LV_DESIGN_RES_OK;
  421d6c:	2000      	movs	r0, #0
}
  421d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ancestor_design(gauge, clip_area, mode);
  421d70:	4b10      	ldr	r3, [pc, #64]	; (421db4 <lv_gauge_design+0x58>)
  421d72:	681b      	ldr	r3, [r3, #0]
  421d74:	4798      	blx	r3
        lv_gauge_ext_t * ext           = lv_obj_get_ext_attr(gauge);
  421d76:	4620      	mov	r0, r4
  421d78:	4b0f      	ldr	r3, [pc, #60]	; (421db8 <lv_gauge_design+0x5c>)
  421d7a:	4798      	blx	r3
  421d7c:	4606      	mov	r6, r0
        lv_gauge_draw_labels(gauge, clip_area);
  421d7e:	4629      	mov	r1, r5
  421d80:	4620      	mov	r0, r4
  421d82:	4b0e      	ldr	r3, [pc, #56]	; (421dbc <lv_gauge_design+0x60>)
  421d84:	4798      	blx	r3
        uint16_t line_cnt_tmp = ext->lmeter.line_cnt;
  421d86:	88b7      	ldrh	r7, [r6, #4]
        ext->lmeter.line_cnt         = ext->label_count;                 /*Only to labels*/
  421d88:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
  421d8c:	80b3      	strh	r3, [r6, #4]
        lv_linemeter_draw_scale(gauge, clip_area, LV_GAUGE_PART_MAJOR);
  421d8e:	2201      	movs	r2, #1
  421d90:	4629      	mov	r1, r5
  421d92:	4620      	mov	r0, r4
  421d94:	4b0a      	ldr	r3, [pc, #40]	; (421dc0 <lv_gauge_design+0x64>)
  421d96:	4798      	blx	r3
        ext->lmeter.line_cnt = line_cnt_tmp; /*Restore the parameters*/
  421d98:	80b7      	strh	r7, [r6, #4]
        lv_gauge_draw_needle(gauge, clip_area);
  421d9a:	4629      	mov	r1, r5
  421d9c:	4620      	mov	r0, r4
  421d9e:	4b09      	ldr	r3, [pc, #36]	; (421dc4 <lv_gauge_design+0x68>)
  421da0:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  421da2:	2000      	movs	r0, #0
  421da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ancestor_design(gauge, clip_area, mode);
  421da6:	4b03      	ldr	r3, [pc, #12]	; (421db4 <lv_gauge_design+0x58>)
  421da8:	681b      	ldr	r3, [r3, #0]
  421daa:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  421dac:	2000      	movs	r0, #0
  421dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LV_DESIGN_RES_NOT_COVER;
  421db0:	2002      	movs	r0, #2
  421db2:	4770      	bx	lr
  421db4:	20414854 	.word	0x20414854
  421db8:	00407ffd 	.word	0x00407ffd
  421dbc:	00421865 	.word	0x00421865
  421dc0:	00424715 	.word	0x00424715
  421dc4:	00421a85 	.word	0x00421a85

00421dc8 <lv_gauge_signal>:
{
  421dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  421dca:	4606      	mov	r6, r0
  421dcc:	460c      	mov	r4, r1
  421dce:	4617      	mov	r7, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  421dd0:	2908      	cmp	r1, #8
  421dd2:	d007      	beq.n	421de4 <lv_gauge_signal+0x1c>
    res = ancestor_signal(gauge, sign, param);
  421dd4:	4b18      	ldr	r3, [pc, #96]	; (421e38 <lv_gauge_signal+0x70>)
  421dd6:	681b      	ldr	r3, [r3, #0]
  421dd8:	4798      	blx	r3
  421dda:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
  421ddc:	2801      	cmp	r0, #1
  421dde:	d010      	beq.n	421e02 <lv_gauge_signal+0x3a>
}
  421de0:	4628      	mov	r0, r5
  421de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        info->result = lv_gauge_get_style(gauge, info->part);
  421de4:	7811      	ldrb	r1, [r2, #0]
  421de6:	4b15      	ldr	r3, [pc, #84]	; (421e3c <lv_gauge_signal+0x74>)
  421de8:	4798      	blx	r3
  421dea:	6078      	str	r0, [r7, #4]
        if(info->result != NULL) return LV_RES_OK;
  421dec:	b108      	cbz	r0, 421df2 <lv_gauge_signal+0x2a>
  421dee:	2501      	movs	r5, #1
  421df0:	e7f6      	b.n	421de0 <lv_gauge_signal+0x18>
        else return ancestor_signal(gauge, sign, param);
  421df2:	4b11      	ldr	r3, [pc, #68]	; (421e38 <lv_gauge_signal+0x70>)
  421df4:	681b      	ldr	r3, [r3, #0]
  421df6:	463a      	mov	r2, r7
  421df8:	4621      	mov	r1, r4
  421dfa:	4630      	mov	r0, r6
  421dfc:	4798      	blx	r3
  421dfe:	4605      	mov	r5, r0
  421e00:	e7ee      	b.n	421de0 <lv_gauge_signal+0x18>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  421e02:	2c07      	cmp	r4, #7
  421e04:	d012      	beq.n	421e2c <lv_gauge_signal+0x64>
    lv_gauge_ext_t * ext = lv_obj_get_ext_attr(gauge);
  421e06:	4630      	mov	r0, r6
  421e08:	4b0d      	ldr	r3, [pc, #52]	; (421e40 <lv_gauge_signal+0x78>)
  421e0a:	4798      	blx	r3
  421e0c:	4607      	mov	r7, r0
    if(sign == LV_SIGNAL_CLEANUP) {
  421e0e:	2c00      	cmp	r4, #0
  421e10:	d1e6      	bne.n	421de0 <lv_gauge_signal+0x18>
        lv_mem_free(ext->values);
  421e12:	6980      	ldr	r0, [r0, #24]
  421e14:	4b0b      	ldr	r3, [pc, #44]	; (421e44 <lv_gauge_signal+0x7c>)
  421e16:	4798      	blx	r3
        ext->values = NULL;
  421e18:	2300      	movs	r3, #0
  421e1a:	61bb      	str	r3, [r7, #24]
        lv_obj_clean_style_list(gauge, LV_GAUGE_PART_NEEDLE);
  421e1c:	2102      	movs	r1, #2
  421e1e:	4630      	mov	r0, r6
  421e20:	4c09      	ldr	r4, [pc, #36]	; (421e48 <lv_gauge_signal+0x80>)
  421e22:	47a0      	blx	r4
        lv_obj_clean_style_list(gauge, LV_GAUGE_PART_MAJOR);
  421e24:	2101      	movs	r1, #1
  421e26:	4630      	mov	r0, r6
  421e28:	47a0      	blx	r4
  421e2a:	e7d9      	b.n	421de0 <lv_gauge_signal+0x18>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  421e2c:	4907      	ldr	r1, [pc, #28]	; (421e4c <lv_gauge_signal+0x84>)
  421e2e:	4638      	mov	r0, r7
  421e30:	4b07      	ldr	r3, [pc, #28]	; (421e50 <lv_gauge_signal+0x88>)
  421e32:	4798      	blx	r3
  421e34:	4605      	mov	r5, r0
  421e36:	e7d3      	b.n	421de0 <lv_gauge_signal+0x18>
  421e38:	20414858 	.word	0x20414858
  421e3c:	00421819 	.word	0x00421819
  421e40:	00407ffd 	.word	0x00407ffd
  421e44:	004175b1 	.word	0x004175b1
  421e48:	00405c7d 	.word	0x00405c7d
  421e4c:	00431cc0 	.word	0x00431cc0
  421e50:	00408289 	.word	0x00408289

00421e54 <lv_gauge_set_needle_count>:
{
  421e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  421e56:	4605      	mov	r5, r0
  421e58:	460e      	mov	r6, r1
  421e5a:	4617      	mov	r7, r2
    LV_ASSERT_OBJ(gauge, LV_OBJX_NAME);
  421e5c:	4b1d      	ldr	r3, [pc, #116]	; (421ed4 <lv_gauge_set_needle_count+0x80>)
  421e5e:	4798      	blx	r3
  421e60:	b928      	cbnz	r0, 421e6e <lv_gauge_set_needle_count+0x1a>
  421e62:	462a      	mov	r2, r5
  421e64:	2300      	movs	r3, #0
  421e66:	481c      	ldr	r0, [pc, #112]	; (421ed8 <lv_gauge_set_needle_count+0x84>)
  421e68:	491c      	ldr	r1, [pc, #112]	; (421edc <lv_gauge_set_needle_count+0x88>)
  421e6a:	4788      	blx	r1
  421e6c:	e7fe      	b.n	421e6c <lv_gauge_set_needle_count+0x18>
    lv_gauge_ext_t * ext = lv_obj_get_ext_attr(gauge);
  421e6e:	4628      	mov	r0, r5
  421e70:	4b1b      	ldr	r3, [pc, #108]	; (421ee0 <lv_gauge_set_needle_count+0x8c>)
  421e72:	4798      	blx	r3
  421e74:	4604      	mov	r4, r0
    if(ext->needle_count != needle_cnt) {
  421e76:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  421e7a:	42b3      	cmp	r3, r6
  421e7c:	d025      	beq.n	421eca <lv_gauge_set_needle_count+0x76>
        if(ext->values != NULL) {
  421e7e:	6980      	ldr	r0, [r0, #24]
  421e80:	b118      	cbz	r0, 421e8a <lv_gauge_set_needle_count+0x36>
            lv_mem_free(ext->values);
  421e82:	4b18      	ldr	r3, [pc, #96]	; (421ee4 <lv_gauge_set_needle_count+0x90>)
  421e84:	4798      	blx	r3
            ext->values = NULL;
  421e86:	2300      	movs	r3, #0
  421e88:	61a3      	str	r3, [r4, #24]
        ext->values = lv_mem_realloc(ext->values, needle_cnt * sizeof(ext->values[0]));
  421e8a:	00b1      	lsls	r1, r6, #2
  421e8c:	69a0      	ldr	r0, [r4, #24]
  421e8e:	4b16      	ldr	r3, [pc, #88]	; (421ee8 <lv_gauge_set_needle_count+0x94>)
  421e90:	4798      	blx	r3
  421e92:	61a0      	str	r0, [r4, #24]
        LV_ASSERT_MEM(ext->values);
  421e94:	4b0f      	ldr	r3, [pc, #60]	; (421ed4 <lv_gauge_set_needle_count+0x80>)
  421e96:	4798      	blx	r3
  421e98:	b140      	cbz	r0, 421eac <lv_gauge_set_needle_count+0x58>
        if(ext->values == NULL) return;
  421e9a:	69a3      	ldr	r3, [r4, #24]
  421e9c:	b1cb      	cbz	r3, 421ed2 <lv_gauge_set_needle_count+0x7e>
    return lv_linemeter_get_min_value(lmeter);
  421e9e:	4628      	mov	r0, r5
  421ea0:	4b12      	ldr	r3, [pc, #72]	; (421eec <lv_gauge_set_needle_count+0x98>)
  421ea2:	4798      	blx	r3
        int16_t min = lv_gauge_get_min_value(gauge);
  421ea4:	b200      	sxth	r0, r0
        for(n = ext->needle_count; n < needle_cnt; n++) {
  421ea6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  421eaa:	e00a      	b.n	421ec2 <lv_gauge_set_needle_count+0x6e>
        LV_ASSERT_MEM(ext->values);
  421eac:	69a2      	ldr	r2, [r4, #24]
  421eae:	2300      	movs	r3, #0
  421eb0:	480f      	ldr	r0, [pc, #60]	; (421ef0 <lv_gauge_set_needle_count+0x9c>)
  421eb2:	490a      	ldr	r1, [pc, #40]	; (421edc <lv_gauge_set_needle_count+0x88>)
  421eb4:	4788      	blx	r1
  421eb6:	e7fe      	b.n	421eb6 <lv_gauge_set_needle_count+0x62>
            ext->values[n] = min;
  421eb8:	69a2      	ldr	r2, [r4, #24]
  421eba:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        for(n = ext->needle_count; n < needle_cnt; n++) {
  421ebe:	3301      	adds	r3, #1
  421ec0:	b2db      	uxtb	r3, r3
  421ec2:	42b3      	cmp	r3, r6
  421ec4:	d3f8      	bcc.n	421eb8 <lv_gauge_set_needle_count+0x64>
        ext->needle_count = needle_cnt;
  421ec6:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    ext->needle_colors = colors;
  421eca:	61e7      	str	r7, [r4, #28]
    lv_obj_invalidate(gauge);
  421ecc:	4628      	mov	r0, r5
  421ece:	4b09      	ldr	r3, [pc, #36]	; (421ef4 <lv_gauge_set_needle_count+0xa0>)
  421ed0:	4798      	blx	r3
  421ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  421ed4:	00416da9 	.word	0x00416da9
  421ed8:	0042e560 	.word	0x0042e560
  421edc:	00416db5 	.word	0x00416db5
  421ee0:	00407ffd 	.word	0x00407ffd
  421ee4:	004175b1 	.word	0x004175b1
  421ee8:	0041781d 	.word	0x0041781d
  421eec:	00424675 	.word	0x00424675
  421ef0:	0042e54c 	.word	0x0042e54c
  421ef4:	00405f01 	.word	0x00405f01

00421ef8 <lv_gauge_set_value>:
{
  421ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  421efc:	b08d      	sub	sp, #52	; 0x34
  421efe:	4606      	mov	r6, r0
  421f00:	9000      	str	r0, [sp, #0]
  421f02:	460c      	mov	r4, r1
  421f04:	4615      	mov	r5, r2
    LV_ASSERT_OBJ(gauge, LV_OBJX_NAME);
  421f06:	4b8a      	ldr	r3, [pc, #552]	; (422130 <lv_gauge_set_value+0x238>)
  421f08:	4798      	blx	r3
  421f0a:	b928      	cbnz	r0, 421f18 <lv_gauge_set_value+0x20>
  421f0c:	4632      	mov	r2, r6
  421f0e:	2300      	movs	r3, #0
  421f10:	4888      	ldr	r0, [pc, #544]	; (422134 <lv_gauge_set_value+0x23c>)
  421f12:	4989      	ldr	r1, [pc, #548]	; (422138 <lv_gauge_set_value+0x240>)
  421f14:	4788      	blx	r1
  421f16:	e7fe      	b.n	421f16 <lv_gauge_set_value+0x1e>
    lv_gauge_ext_t * ext = lv_obj_get_ext_attr(gauge);
  421f18:	9e00      	ldr	r6, [sp, #0]
  421f1a:	4630      	mov	r0, r6
  421f1c:	4b87      	ldr	r3, [pc, #540]	; (42213c <lv_gauge_set_value+0x244>)
  421f1e:	4798      	blx	r3
  421f20:	4682      	mov	sl, r0
    if(needle_id >= ext->needle_count) return;
  421f22:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  421f26:	42a3      	cmp	r3, r4
  421f28:	f240 80f5 	bls.w	422116 <lv_gauge_set_value+0x21e>
    if(ext->values[needle_id] == value) return;
  421f2c:	6983      	ldr	r3, [r0, #24]
  421f2e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  421f32:	42ab      	cmp	r3, r5
  421f34:	f000 80ef 	beq.w	422116 <lv_gauge_set_value+0x21e>
  421f38:	4630      	mov	r0, r6
  421f3a:	4b81      	ldr	r3, [pc, #516]	; (422140 <lv_gauge_set_value+0x248>)
  421f3c:	4798      	blx	r3
    int16_t min = lv_gauge_get_min_value(gauge);
  421f3e:	fa0f f980 	sxth.w	r9, r0
    return lv_linemeter_get_max_value(lmeter);
  421f42:	4630      	mov	r0, r6
  421f44:	4b7f      	ldr	r3, [pc, #508]	; (422144 <lv_gauge_set_value+0x24c>)
  421f46:	4798      	blx	r3
    int16_t max = lv_gauge_get_max_value(gauge);
  421f48:	fa0f fb80 	sxth.w	fp, r0
    if(value > max)
  421f4c:	455d      	cmp	r5, fp
  421f4e:	f300 80e5 	bgt.w	42211c <lv_gauge_set_value+0x224>
    else if(value < min)
  421f52:	f8cd 9004 	str.w	r9, [sp, #4]
  421f56:	454d      	cmp	r5, r9
  421f58:	db00      	blt.n	421f5c <lv_gauge_set_value+0x64>
  421f5a:	9501      	str	r5, [sp, #4]
    int32_t old_value = ext->values[needle_id];
  421f5c:	f8da 3018 	ldr.w	r3, [sl, #24]
  421f60:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    ext->values[needle_id] = value;
  421f64:	9a01      	ldr	r2, [sp, #4]
  421f66:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    lv_coord_t r      = lv_obj_get_width(gauge) / 2;
  421f6a:	9800      	ldr	r0, [sp, #0]
  421f6c:	4b76      	ldr	r3, [pc, #472]	; (422148 <lv_gauge_set_value+0x250>)
  421f6e:	4798      	blx	r3
  421f70:	4604      	mov	r4, r0
  421f72:	2800      	cmp	r0, #0
  421f74:	da00      	bge.n	421f78 <lv_gauge_set_value+0x80>
  421f76:	1c44      	adds	r4, r0, #1
  421f78:	f344 044f 	sbfx	r4, r4, #1, #16
    lv_coord_t x_ofs  = gauge->coords.x1 + r;
  421f7c:	9800      	ldr	r0, [sp, #0]
  421f7e:	8a02      	ldrh	r2, [r0, #16]
  421f80:	b2a3      	uxth	r3, r4
  421f82:	441a      	add	r2, r3
  421f84:	b292      	uxth	r2, r2
  421f86:	9203      	str	r2, [sp, #12]
  421f88:	fa0f f882 	sxth.w	r8, r2
    lv_coord_t y_ofs  = gauge->coords.y1 + r;
  421f8c:	8a42      	ldrh	r2, [r0, #18]
  421f8e:	4413      	add	r3, r2
  421f90:	b29b      	uxth	r3, r3
  421f92:	9304      	str	r3, [sp, #16]
  421f94:	b21e      	sxth	r6, r3
    uint16_t angle    = lv_linemeter_get_scale_angle(gauge);
  421f96:	4b6d      	ldr	r3, [pc, #436]	; (42214c <lv_gauge_set_value+0x254>)
  421f98:	4798      	blx	r3
  421f9a:	9006      	str	r0, [sp, #24]
    int16_t angle_ofs = 90 + (360 - angle) / 2 + lv_gauge_get_angle_offset(gauge);
  421f9c:	f5d0 77b4 	rsbs	r7, r0, #360	; 0x168
  421fa0:	d500      	bpl.n	421fa4 <lv_gauge_set_value+0xac>
  421fa2:	3701      	adds	r7, #1
  421fa4:	107f      	asrs	r7, r7, #1
    return lv_linemeter_get_angle_offset(gauge);
  421fa6:	9800      	ldr	r0, [sp, #0]
  421fa8:	4b69      	ldr	r3, [pc, #420]	; (422150 <lv_gauge_set_value+0x258>)
  421faa:	4798      	blx	r3
  421fac:	19c3      	adds	r3, r0, r7
  421fae:	335a      	adds	r3, #90	; 0x5a
  421fb0:	b29b      	uxth	r3, r3
  421fb2:	9305      	str	r3, [sp, #20]
    if(ext->needle_img) {
  421fb4:	f8da 0020 	ldr.w	r0, [sl, #32]
  421fb8:	2800      	cmp	r0, #0
  421fba:	f000 80b2 	beq.w	422122 <lv_gauge_set_value+0x22a>
        lv_img_decoder_get_info(ext->needle_img, &info);
  421fbe:	a909      	add	r1, sp, #36	; 0x24
  421fc0:	4b64      	ldr	r3, [pc, #400]	; (422154 <lv_gauge_set_value+0x25c>)
  421fc2:	4798      	blx	r3
        needle_w = info.h;
  421fc4:	f8bd 7026 	ldrh.w	r7, [sp, #38]	; 0x26
  421fc8:	f3c7 134a 	ubfx	r3, r7, #5, #11
  421fcc:	9302      	str	r3, [sp, #8]
    int16_t needle_angle = (old_value - min) * angle / (max - min) + angle_ofs;
  421fce:	eba5 0509 	sub.w	r5, r5, r9
  421fd2:	9b06      	ldr	r3, [sp, #24]
  421fd4:	fb05 f503 	mul.w	r5, r5, r3
  421fd8:	ebab 0109 	sub.w	r1, fp, r9
  421fdc:	9107      	str	r1, [sp, #28]
  421fde:	fb95 f5f1 	sdiv	r5, r5, r1
  421fe2:	9805      	ldr	r0, [sp, #20]
  421fe4:	4405      	add	r5, r0
  421fe6:	b2af      	uxth	r7, r5
    p_end.y = (_lv_trigo_sin(needle_angle) * r) / LV_TRIGO_SIN_MAX + y_ofs;
  421fe8:	b238      	sxth	r0, r7
  421fea:	4d5b      	ldr	r5, [pc, #364]	; (422158 <lv_gauge_set_value+0x260>)
  421fec:	47a8      	blx	r5
  421fee:	fb04 f000 	mul.w	r0, r4, r0
  421ff2:	f8df b16c 	ldr.w	fp, [pc, #364]	; 422160 <lv_gauge_set_value+0x268>
  421ff6:	fb8b e300 	smull	lr, r3, fp, r0
  421ffa:	4403      	add	r3, r0
  421ffc:	ea4f 7ae0 	mov.w	sl, r0, asr #31
  422000:	ebca 3aa3 	rsb	sl, sl, r3, asr #14
  422004:	9b04      	ldr	r3, [sp, #16]
  422006:	449a      	add	sl, r3
  422008:	fa0f fa8a 	sxth.w	sl, sl
    p_end.x = (_lv_trigo_sin(needle_angle + 90) * r) / LV_TRIGO_SIN_MAX + x_ofs;
  42200c:	f107 005a 	add.w	r0, r7, #90	; 0x5a
  422010:	b200      	sxth	r0, r0
  422012:	47a8      	blx	r5
  422014:	fb00 f004 	mul.w	r0, r0, r4
  422018:	fb8b 7300 	smull	r7, r3, fp, r0
  42201c:	181a      	adds	r2, r3, r0
  42201e:	17c3      	asrs	r3, r0, #31
  422020:	ebc3 33a2 	rsb	r3, r3, r2, asr #14
  422024:	9f03      	ldr	r7, [sp, #12]
  422026:	443b      	add	r3, r7
  422028:	b21b      	sxth	r3, r3
    a.x1 = LV_MATH_MIN(p_mid.x, p_end.x) - needle_w;
  42202a:	46c6      	mov	lr, r8
  42202c:	4598      	cmp	r8, r3
  42202e:	bfa8      	it	ge
  422030:	469e      	movge	lr, r3
  422032:	fa1f f28e 	uxth.w	r2, lr
  422036:	f8bd 7008 	ldrh.w	r7, [sp, #8]
  42203a:	1bd2      	subs	r2, r2, r7
  42203c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
    a.y1 = LV_MATH_MIN(p_mid.y, p_end.y) - needle_w;
  422040:	46b6      	mov	lr, r6
  422042:	4556      	cmp	r6, sl
  422044:	bfa8      	it	ge
  422046:	46d6      	movge	lr, sl
  422048:	fa1f f28e 	uxth.w	r2, lr
  42204c:	1bd2      	subs	r2, r2, r7
  42204e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    a.x2 = LV_MATH_MAX(p_mid.x, p_end.x) + needle_w;
  422052:	4543      	cmp	r3, r8
  422054:	bfb8      	it	lt
  422056:	4643      	movlt	r3, r8
  422058:	fa17 f383 	uxtah	r3, r7, r3
  42205c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    a.y2 = LV_MATH_MAX(p_mid.y, p_end.y) + needle_w;
  422060:	45b2      	cmp	sl, r6
  422062:	bfb8      	it	lt
  422064:	46b2      	movlt	sl, r6
  422066:	fa17 f38a 	uxtah	r3, r7, sl
  42206a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    lv_obj_invalidate_area(gauge, &a);
  42206e:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
  422072:	4671      	mov	r1, lr
  422074:	9800      	ldr	r0, [sp, #0]
  422076:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 422164 <lv_gauge_set_value+0x26c>
  42207a:	47d0      	blx	sl
    needle_angle = (value - min) * angle / (max - min) + angle_ofs;
  42207c:	9b01      	ldr	r3, [sp, #4]
  42207e:	eba3 0309 	sub.w	r3, r3, r9
  422082:	9a06      	ldr	r2, [sp, #24]
  422084:	fb03 f302 	mul.w	r3, r3, r2
  422088:	9907      	ldr	r1, [sp, #28]
  42208a:	fb93 f3f1 	sdiv	r3, r3, r1
  42208e:	9a05      	ldr	r2, [sp, #20]
  422090:	4413      	add	r3, r2
  422092:	b299      	uxth	r1, r3
    p_end.y = (_lv_trigo_sin(needle_angle) * r) / LV_TRIGO_SIN_MAX + y_ofs;
  422094:	9101      	str	r1, [sp, #4]
  422096:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
  42209a:	47a8      	blx	r5
  42209c:	fb00 f004 	mul.w	r0, r0, r4
  4220a0:	fb8b e300 	smull	lr, r3, fp, r0
  4220a4:	181a      	adds	r2, r3, r0
  4220a6:	17c3      	asrs	r3, r0, #31
  4220a8:	ebc3 33a2 	rsb	r3, r3, r2, asr #14
  4220ac:	9a04      	ldr	r2, [sp, #16]
  4220ae:	4413      	add	r3, r2
  4220b0:	fa0f f983 	sxth.w	r9, r3
    p_end.x = (_lv_trigo_sin(needle_angle + 90) * r) / LV_TRIGO_SIN_MAX + x_ofs;
  4220b4:	9901      	ldr	r1, [sp, #4]
  4220b6:	f101 005a 	add.w	r0, r1, #90	; 0x5a
  4220ba:	b200      	sxth	r0, r0
  4220bc:	47a8      	blx	r5
  4220be:	fb00 f004 	mul.w	r0, r0, r4
  4220c2:	fb8b 1300 	smull	r1, r3, fp, r0
  4220c6:	181a      	adds	r2, r3, r0
  4220c8:	17c3      	asrs	r3, r0, #31
  4220ca:	ebc3 33a2 	rsb	r3, r3, r2, asr #14
  4220ce:	9a03      	ldr	r2, [sp, #12]
  4220d0:	4413      	add	r3, r2
  4220d2:	b21b      	sxth	r3, r3
    a.x1 = LV_MATH_MIN(p_mid.x, p_end.x) - needle_w;
  4220d4:	4642      	mov	r2, r8
  4220d6:	4598      	cmp	r8, r3
  4220d8:	bfa8      	it	ge
  4220da:	461a      	movge	r2, r3
  4220dc:	b292      	uxth	r2, r2
  4220de:	1bd2      	subs	r2, r2, r7
  4220e0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
    a.y1 = LV_MATH_MIN(p_mid.y, p_end.y) - needle_w;
  4220e4:	4632      	mov	r2, r6
  4220e6:	454e      	cmp	r6, r9
  4220e8:	bfa8      	it	ge
  4220ea:	464a      	movge	r2, r9
  4220ec:	b292      	uxth	r2, r2
  4220ee:	1bd2      	subs	r2, r2, r7
  4220f0:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    a.x2 = LV_MATH_MAX(p_mid.x, p_end.x) + needle_w;
  4220f4:	4543      	cmp	r3, r8
  4220f6:	bfb8      	it	lt
  4220f8:	4643      	movlt	r3, r8
  4220fa:	fa17 f383 	uxtah	r3, r7, r3
  4220fe:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    a.y2 = LV_MATH_MAX(p_mid.y, p_end.y) + needle_w;
  422102:	45b1      	cmp	r9, r6
  422104:	bfb8      	it	lt
  422106:	46b1      	movlt	r9, r6
  422108:	fa17 f789 	uxtah	r7, r7, r9
  42210c:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
    lv_obj_invalidate_area(gauge, &a);
  422110:	a90a      	add	r1, sp, #40	; 0x28
  422112:	9800      	ldr	r0, [sp, #0]
  422114:	47d0      	blx	sl
}
  422116:	b00d      	add	sp, #52	; 0x34
  422118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        value = max;
  42211c:	f8cd b004 	str.w	fp, [sp, #4]
  422120:	e71c      	b.n	421f5c <lv_gauge_set_value+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  422122:	2290      	movs	r2, #144	; 0x90
  422124:	2102      	movs	r1, #2
  422126:	9800      	ldr	r0, [sp, #0]
  422128:	4b0c      	ldr	r3, [pc, #48]	; (42215c <lv_gauge_set_value+0x264>)
  42212a:	4798      	blx	r3
  42212c:	9002      	str	r0, [sp, #8]
  42212e:	e74e      	b.n	421fce <lv_gauge_set_value+0xd6>
  422130:	00416da9 	.word	0x00416da9
  422134:	0042e560 	.word	0x0042e560
  422138:	00416db5 	.word	0x00416db5
  42213c:	00407ffd 	.word	0x00407ffd
  422140:	00424675 	.word	0x00424675
  422144:	004246a5 	.word	0x004246a5
  422148:	00405b29 	.word	0x00405b29
  42214c:	004246d5 	.word	0x004246d5
  422150:	00424705 	.word	0x00424705
  422154:	00414839 	.word	0x00414839
  422158:	0041737d 	.word	0x0041737d
  42215c:	004073ed 	.word	0x004073ed
  422160:	80010003 	.word	0x80010003
  422164:	00405e9d 	.word	0x00405e9d

00422168 <lv_gauge_set_scale>:
{
  422168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42216a:	4604      	mov	r4, r0
  42216c:	460e      	mov	r6, r1
  42216e:	4617      	mov	r7, r2
  422170:	461d      	mov	r5, r3
    LV_ASSERT_OBJ(gauge, LV_OBJX_NAME);
  422172:	4b0b      	ldr	r3, [pc, #44]	; (4221a0 <lv_gauge_set_scale+0x38>)
  422174:	4798      	blx	r3
  422176:	b928      	cbnz	r0, 422184 <lv_gauge_set_scale+0x1c>
  422178:	4622      	mov	r2, r4
  42217a:	2300      	movs	r3, #0
  42217c:	4809      	ldr	r0, [pc, #36]	; (4221a4 <lv_gauge_set_scale+0x3c>)
  42217e:	490a      	ldr	r1, [pc, #40]	; (4221a8 <lv_gauge_set_scale+0x40>)
  422180:	4788      	blx	r1
  422182:	e7fe      	b.n	422182 <lv_gauge_set_scale+0x1a>
    lv_linemeter_set_scale(gauge, angle, line_cnt);
  422184:	463a      	mov	r2, r7
  422186:	4631      	mov	r1, r6
  422188:	4620      	mov	r0, r4
  42218a:	4b08      	ldr	r3, [pc, #32]	; (4221ac <lv_gauge_set_scale+0x44>)
  42218c:	4798      	blx	r3
    lv_gauge_ext_t * ext = lv_obj_get_ext_attr(gauge);
  42218e:	4620      	mov	r0, r4
  422190:	4b07      	ldr	r3, [pc, #28]	; (4221b0 <lv_gauge_set_scale+0x48>)
  422192:	4798      	blx	r3
    ext->label_count     = label_cnt;
  422194:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
    lv_obj_invalidate(gauge);
  422198:	4620      	mov	r0, r4
  42219a:	4b06      	ldr	r3, [pc, #24]	; (4221b4 <lv_gauge_set_scale+0x4c>)
  42219c:	4798      	blx	r3
  42219e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4221a0:	00416da9 	.word	0x00416da9
  4221a4:	0042e560 	.word	0x0042e560
  4221a8:	00416db5 	.word	0x00416db5
  4221ac:	00424625 	.word	0x00424625
  4221b0:	00407ffd 	.word	0x00407ffd
  4221b4:	00405f01 	.word	0x00405f01

004221b8 <lv_gauge_create>:
{
  4221b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4221bc:	460e      	mov	r6, r1
    lv_obj_t * gauge = lv_linemeter_create(par, copy);
  4221be:	4b4d      	ldr	r3, [pc, #308]	; (4222f4 <lv_gauge_create+0x13c>)
  4221c0:	4798      	blx	r3
  4221c2:	4604      	mov	r4, r0
    LV_ASSERT_MEM(gauge);
  4221c4:	4b4c      	ldr	r3, [pc, #304]	; (4222f8 <lv_gauge_create+0x140>)
  4221c6:	4798      	blx	r3
  4221c8:	b180      	cbz	r0, 4221ec <lv_gauge_create+0x34>
    if(gauge == NULL) return NULL;
  4221ca:	2c00      	cmp	r4, #0
  4221cc:	f000 808f 	beq.w	4222ee <lv_gauge_create+0x136>
    lv_gauge_ext_t * ext = lv_obj_allocate_ext_attr(gauge, sizeof(lv_gauge_ext_t));
  4221d0:	2140      	movs	r1, #64	; 0x40
  4221d2:	4620      	mov	r0, r4
  4221d4:	4b49      	ldr	r3, [pc, #292]	; (4222fc <lv_gauge_create+0x144>)
  4221d6:	4798      	blx	r3
  4221d8:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
  4221da:	4b47      	ldr	r3, [pc, #284]	; (4222f8 <lv_gauge_create+0x140>)
  4221dc:	4798      	blx	r3
  4221de:	b958      	cbnz	r0, 4221f8 <lv_gauge_create+0x40>
  4221e0:	462a      	mov	r2, r5
  4221e2:	2300      	movs	r3, #0
  4221e4:	4846      	ldr	r0, [pc, #280]	; (422300 <lv_gauge_create+0x148>)
  4221e6:	4947      	ldr	r1, [pc, #284]	; (422304 <lv_gauge_create+0x14c>)
  4221e8:	4788      	blx	r1
  4221ea:	e7fe      	b.n	4221ea <lv_gauge_create+0x32>
    LV_ASSERT_MEM(gauge);
  4221ec:	4622      	mov	r2, r4
  4221ee:	2300      	movs	r3, #0
  4221f0:	4843      	ldr	r0, [pc, #268]	; (422300 <lv_gauge_create+0x148>)
  4221f2:	4944      	ldr	r1, [pc, #272]	; (422304 <lv_gauge_create+0x14c>)
  4221f4:	4788      	blx	r1
  4221f6:	e7fe      	b.n	4221f6 <lv_gauge_create+0x3e>
    if(ext == NULL) {
  4221f8:	2d00      	cmp	r5, #0
  4221fa:	d03b      	beq.n	422274 <lv_gauge_create+0xbc>
    ext->needle_count  = 0;
  4221fc:	2300      	movs	r3, #0
  4221fe:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    ext->values        = NULL;
  422202:	61ab      	str	r3, [r5, #24]
    ext->needle_colors = NULL;
  422204:	61eb      	str	r3, [r5, #28]
    ext->label_count   = LV_GAUGE_DEF_LABEL_COUNT;
  422206:	2206      	movs	r2, #6
  422208:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
    ext->format_cb     = NULL;
  42220c:	63eb      	str	r3, [r5, #60]	; 0x3c
    ext->needle_img = 0;
  42220e:	622b      	str	r3, [r5, #32]
    ext->needle_img_pivot.x = 0;
  422210:	84ab      	strh	r3, [r5, #36]	; 0x24
    ext->needle_img_pivot.y = 0;
  422212:	84eb      	strh	r3, [r5, #38]	; 0x26
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(gauge);
  422214:	4b3c      	ldr	r3, [pc, #240]	; (422308 <lv_gauge_create+0x150>)
  422216:	681b      	ldr	r3, [r3, #0]
  422218:	2b00      	cmp	r3, #0
  42221a:	d030      	beq.n	42227e <lv_gauge_create+0xc6>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(gauge);
  42221c:	4b3b      	ldr	r3, [pc, #236]	; (42230c <lv_gauge_create+0x154>)
  42221e:	681b      	ldr	r3, [r3, #0]
  422220:	2b00      	cmp	r3, #0
  422222:	d032      	beq.n	42228a <lv_gauge_create+0xd2>
    lv_style_list_init(&ext->style_strong);
  422224:	f105 0730 	add.w	r7, r5, #48	; 0x30
  422228:	4638      	mov	r0, r7
  42222a:	f8df 911c 	ldr.w	r9, [pc, #284]	; 422348 <lv_gauge_create+0x190>
  42222e:	47c8      	blx	r9
    lv_style_list_init(&ext->style_needle);
  422230:	f105 0828 	add.w	r8, r5, #40	; 0x28
  422234:	4640      	mov	r0, r8
  422236:	47c8      	blx	r9
    lv_obj_set_signal_cb(gauge, lv_gauge_signal);
  422238:	4935      	ldr	r1, [pc, #212]	; (422310 <lv_gauge_create+0x158>)
  42223a:	4620      	mov	r0, r4
  42223c:	4b35      	ldr	r3, [pc, #212]	; (422314 <lv_gauge_create+0x15c>)
  42223e:	4798      	blx	r3
    lv_obj_set_design_cb(gauge, lv_gauge_design);
  422240:	4935      	ldr	r1, [pc, #212]	; (422318 <lv_gauge_create+0x160>)
  422242:	4620      	mov	r0, r4
  422244:	4b35      	ldr	r3, [pc, #212]	; (42231c <lv_gauge_create+0x164>)
  422246:	4798      	blx	r3
    if(copy == NULL) {
  422248:	b32e      	cbz	r6, 422296 <lv_gauge_create+0xde>
        lv_gauge_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  42224a:	4630      	mov	r0, r6
  42224c:	4b34      	ldr	r3, [pc, #208]	; (422320 <lv_gauge_create+0x168>)
  42224e:	4798      	blx	r3
  422250:	4606      	mov	r6, r0
        lv_gauge_set_needle_count(gauge, copy_ext->needle_count, copy_ext->needle_colors);
  422252:	69c2      	ldr	r2, [r0, #28]
  422254:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
  422258:	4620      	mov	r0, r4
  42225a:	4b32      	ldr	r3, [pc, #200]	; (422324 <lv_gauge_create+0x16c>)
  42225c:	4798      	blx	r3
        lv_style_list_copy(&ext->style_strong, &copy_ext->style_strong);
  42225e:	f106 0130 	add.w	r1, r6, #48	; 0x30
  422262:	4638      	mov	r0, r7
  422264:	4f30      	ldr	r7, [pc, #192]	; (422328 <lv_gauge_create+0x170>)
  422266:	47b8      	blx	r7
        lv_style_list_copy(&ext->style_needle, &copy_ext->style_needle);
  422268:	f106 0128 	add.w	r1, r6, #40	; 0x28
  42226c:	4640      	mov	r0, r8
  42226e:	47b8      	blx	r7
        for(i = 0; i < ext->needle_count; i++) {
  422270:	2300      	movs	r3, #0
  422272:	e02d      	b.n	4222d0 <lv_gauge_create+0x118>
        lv_obj_del(gauge);
  422274:	4620      	mov	r0, r4
  422276:	4b2d      	ldr	r3, [pc, #180]	; (42232c <lv_gauge_create+0x174>)
  422278:	4798      	blx	r3
        return NULL;
  42227a:	2400      	movs	r4, #0
  42227c:	e037      	b.n	4222ee <lv_gauge_create+0x136>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(gauge);
  42227e:	4620      	mov	r0, r4
  422280:	4b2b      	ldr	r3, [pc, #172]	; (422330 <lv_gauge_create+0x178>)
  422282:	4798      	blx	r3
  422284:	4b20      	ldr	r3, [pc, #128]	; (422308 <lv_gauge_create+0x150>)
  422286:	6018      	str	r0, [r3, #0]
  422288:	e7c8      	b.n	42221c <lv_gauge_create+0x64>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(gauge);
  42228a:	4620      	mov	r0, r4
  42228c:	4b29      	ldr	r3, [pc, #164]	; (422334 <lv_gauge_create+0x17c>)
  42228e:	4798      	blx	r3
  422290:	4b1e      	ldr	r3, [pc, #120]	; (42230c <lv_gauge_create+0x154>)
  422292:	6018      	str	r0, [r3, #0]
  422294:	e7c6      	b.n	422224 <lv_gauge_create+0x6c>
        lv_gauge_set_scale(gauge, LV_GAUGE_DEF_ANGLE, LV_GAUGE_DEF_LINE_COUNT, LV_GAUGE_DEF_LABEL_COUNT);
  422296:	2306      	movs	r3, #6
  422298:	2215      	movs	r2, #21
  42229a:	f44f 7187 	mov.w	r1, #270	; 0x10e
  42229e:	4620      	mov	r0, r4
  4222a0:	4d25      	ldr	r5, [pc, #148]	; (422338 <lv_gauge_create+0x180>)
  4222a2:	47a8      	blx	r5
        lv_gauge_set_needle_count(gauge, 1, NULL);
  4222a4:	2200      	movs	r2, #0
  4222a6:	2101      	movs	r1, #1
  4222a8:	4620      	mov	r0, r4
  4222aa:	4b1e      	ldr	r3, [pc, #120]	; (422324 <lv_gauge_create+0x16c>)
  4222ac:	4798      	blx	r3
    lv_linemeter_set_value(gauge, value);
  4222ae:	2150      	movs	r1, #80	; 0x50
  4222b0:	4620      	mov	r0, r4
  4222b2:	4b22      	ldr	r3, [pc, #136]	; (42233c <lv_gauge_create+0x184>)
  4222b4:	4798      	blx	r3
        lv_theme_apply(gauge, LV_THEME_GAUGE);
  4222b6:	210e      	movs	r1, #14
  4222b8:	4620      	mov	r0, r4
  4222ba:	4b21      	ldr	r3, [pc, #132]	; (422340 <lv_gauge_create+0x188>)
  4222bc:	4798      	blx	r3
  4222be:	e016      	b.n	4222ee <lv_gauge_create+0x136>
            ext->values[i] = copy_ext->values[i];
  4222c0:	69aa      	ldr	r2, [r5, #24]
  4222c2:	69b1      	ldr	r1, [r6, #24]
  4222c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  4222c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for(i = 0; i < ext->needle_count; i++) {
  4222cc:	3301      	adds	r3, #1
  4222ce:	b2db      	uxtb	r3, r3
  4222d0:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
  4222d4:	4293      	cmp	r3, r2
  4222d6:	d3f3      	bcc.n	4222c0 <lv_gauge_create+0x108>
        ext->label_count = copy_ext->label_count;
  4222d8:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
  4222dc:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        ext->format_cb   = copy_ext->format_cb;
  4222e0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
  4222e2:	63eb      	str	r3, [r5, #60]	; 0x3c
        lv_obj_refresh_style(gauge, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  4222e4:	22ff      	movs	r2, #255	; 0xff
  4222e6:	4611      	mov	r1, r2
  4222e8:	4620      	mov	r0, r4
  4222ea:	4b16      	ldr	r3, [pc, #88]	; (422344 <lv_gauge_create+0x18c>)
  4222ec:	4798      	blx	r3
}
  4222ee:	4620      	mov	r0, r4
  4222f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4222f4:	0042442d 	.word	0x0042442d
  4222f8:	00416da9 	.word	0x00416da9
  4222fc:	004058e9 	.word	0x004058e9
  422300:	0042e54c 	.word	0x0042e54c
  422304:	00416db5 	.word	0x00416db5
  422308:	20414858 	.word	0x20414858
  42230c:	20414854 	.word	0x20414854
  422310:	00421dc9 	.word	0x00421dc9
  422314:	00405885 	.word	0x00405885
  422318:	00421d5d 	.word	0x00421d5d
  42231c:	004058c1 	.word	0x004058c1
  422320:	00407ffd 	.word	0x00407ffd
  422324:	00421e55 	.word	0x00421e55
  422328:	0040ac25 	.word	0x0040ac25
  42232c:	0040815d 	.word	0x0040815d
  422330:	00407fad 	.word	0x00407fad
  422334:	00407fd5 	.word	0x00407fd5
  422338:	00422169 	.word	0x00422169
  42233c:	00424535 	.word	0x00424535
  422340:	004192a5 	.word	0x004192a5
  422344:	00407809 	.word	0x00407809
  422348:	00409d49 	.word	0x00409d49

0042234c <lv_img_get_style>:
}

static lv_style_list_t * lv_img_get_style(lv_obj_t * img, uint8_t type)
{
    lv_style_list_t * style_dsc_p;
    switch(type) {
  42234c:	b909      	cbnz	r1, 422352 <lv_img_get_style+0x6>
        case LV_IMG_PART_MAIN:
            style_dsc_p = &img->style_list;
  42234e:	3028      	adds	r0, #40	; 0x28
            break;
  422350:	4770      	bx	lr
        default:
            style_dsc_p = NULL;
  422352:	2000      	movs	r0, #0
    }

    return style_dsc_p;
}
  422354:	4770      	bx	lr
	...

00422358 <lv_img_design>:
{
  422358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42235c:	b0af      	sub	sp, #188	; 0xbc
  42235e:	4604      	mov	r4, r0
  422360:	9103      	str	r1, [sp, #12]
  422362:	4617      	mov	r7, r2
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
  422364:	4ba2      	ldr	r3, [pc, #648]	; (4225f0 <lv_img_design+0x298>)
  422366:	4798      	blx	r3
  422368:	4605      	mov	r5, r0
    if(mode == LV_DESIGN_COVER_CHK) {
  42236a:	2f02      	cmp	r7, #2
  42236c:	d00e      	beq.n	42238c <lv_img_design+0x34>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  42236e:	2f00      	cmp	r7, #0
  422370:	f040 825d 	bne.w	42282e <lv_img_design+0x4d6>
        if(ext->h == 0 || ext->w == 0) return true;
  422374:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  422378:	2b00      	cmp	r3, #0
  42237a:	f000 8256 	beq.w	42282a <lv_img_design+0x4d2>
  42237e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  422382:	2b00      	cmp	r3, #0
  422384:	f040 8087 	bne.w	422496 <lv_img_design+0x13e>
  422388:	2001      	movs	r0, #1
  42238a:	e253      	b.n	422834 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  42238c:	2202      	movs	r2, #2
  42238e:	2100      	movs	r1, #0
  422390:	4620      	mov	r0, r4
  422392:	4b98      	ldr	r3, [pc, #608]	; (4225f4 <lv_img_design+0x29c>)
  422394:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(img, LV_IMG_PART_MAIN)) return LV_DESIGN_RES_MASKED;
  422396:	b108      	cbz	r0, 42239c <lv_img_design+0x44>
  422398:	2003      	movs	r0, #3
  42239a:	e24b      	b.n	422834 <lv_img_design+0x4dc>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return LV_DESIGN_RES_NOT_COVER;
  42239c:	7d2a      	ldrb	r2, [r5, #20]
  42239e:	f002 0303 	and.w	r3, r2, #3
  4223a2:	3b02      	subs	r3, #2
  4223a4:	b2db      	uxtb	r3, r3
  4223a6:	2b01      	cmp	r3, #1
  4223a8:	f240 82f6 	bls.w	422998 <lv_img_design+0x640>
        if(ext->cf != LV_IMG_CF_TRUE_COLOR && ext->cf != LV_IMG_CF_RAW) return LV_DESIGN_RES_NOT_COVER;
  4223ac:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
  4223b0:	2a20      	cmp	r2, #32
  4223b2:	bf18      	it	ne
  4223b4:	2a08      	cmpne	r2, #8
  4223b6:	d001      	beq.n	4223bc <lv_img_design+0x64>
  4223b8:	2002      	movs	r0, #2
  4223ba:	e23b      	b.n	422834 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
  4223bc:	f248 02ac 	movw	r2, #32940	; 0x80ac
  4223c0:	2100      	movs	r1, #0
  4223c2:	4620      	mov	r0, r4
  4223c4:	4b8c      	ldr	r3, [pc, #560]	; (4225f8 <lv_img_design+0x2a0>)
  4223c6:	4798      	blx	r3
        if(lv_obj_get_style_image_opa(img, LV_IMG_PART_MAIN) != LV_OPA_COVER) return LV_DESIGN_RES_NOT_COVER;
  4223c8:	28ff      	cmp	r0, #255	; 0xff
  4223ca:	d001      	beq.n	4223d0 <lv_img_design+0x78>
  4223cc:	2002      	movs	r0, #2
  4223ce:	e231      	b.n	422834 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  4223d0:	2206      	movs	r2, #6
  4223d2:	2100      	movs	r1, #0
  4223d4:	4620      	mov	r0, r4
  4223d6:	4b87      	ldr	r3, [pc, #540]	; (4225f4 <lv_img_design+0x29c>)
  4223d8:	4798      	blx	r3
        angle_final += ext->angle;
  4223da:	89ab      	ldrh	r3, [r5, #12]
        if(angle_final != 0) return LV_DESIGN_RES_NOT_COVER;
  4223dc:	42d8      	cmn	r0, r3
  4223de:	d001      	beq.n	4223e4 <lv_img_design+0x8c>
  4223e0:	2002      	movs	r0, #2
  4223e2:	e227      	b.n	422834 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  4223e4:	2207      	movs	r2, #7
  4223e6:	2100      	movs	r1, #0
  4223e8:	4620      	mov	r0, r4
  4223ea:	4b82      	ldr	r3, [pc, #520]	; (4225f4 <lv_img_design+0x29c>)
  4223ec:	4798      	blx	r3
        zoom_final = (zoom_final * ext->zoom) >> 8;
  4223ee:	8a6b      	ldrh	r3, [r5, #18]
  4223f0:	fb03 f300 	mul.w	r3, r3, r0
  4223f4:	121f      	asrs	r7, r3, #8
        if(zoom_final == LV_IMG_ZOOM_NONE) {
  4223f6:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
  4223fa:	d02e      	beq.n	42245a <lv_img_design+0x102>
            _lv_img_buf_get_transformed_area(&a, lv_obj_get_width(img), lv_obj_get_height(img), 0, zoom_final, &ext->pivot);
  4223fc:	4620      	mov	r0, r4
  4223fe:	4b7f      	ldr	r3, [pc, #508]	; (4225fc <lv_img_design+0x2a4>)
  422400:	4798      	blx	r3
  422402:	4680      	mov	r8, r0
  422404:	4620      	mov	r0, r4
  422406:	4b7e      	ldr	r3, [pc, #504]	; (422600 <lv_img_design+0x2a8>)
  422408:	4798      	blx	r3
  42240a:	350e      	adds	r5, #14
  42240c:	9501      	str	r5, [sp, #4]
  42240e:	b2bf      	uxth	r7, r7
  422410:	9700      	str	r7, [sp, #0]
  422412:	2300      	movs	r3, #0
  422414:	4602      	mov	r2, r0
  422416:	4641      	mov	r1, r8
  422418:	a819      	add	r0, sp, #100	; 0x64
  42241a:	4d7a      	ldr	r5, [pc, #488]	; (422604 <lv_img_design+0x2ac>)
  42241c:	47a8      	blx	r5
            a.x1 += img->coords.x1;
  42241e:	8a22      	ldrh	r2, [r4, #16]
  422420:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  422424:	4413      	add	r3, r2
  422426:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            a.y1 += img->coords.y1;
  42242a:	8a63      	ldrh	r3, [r4, #18]
  42242c:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
  422430:	4419      	add	r1, r3
  422432:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
            a.x2 += img->coords.x1;
  422436:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
  42243a:	440a      	add	r2, r1
  42243c:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            a.y2 += img->coords.y1;
  422440:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
  422444:	4413      	add	r3, r2
  422446:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            if(_lv_area_is_in(clip_area, &a, 0) == false) return LV_DESIGN_RES_NOT_COVER;
  42244a:	2200      	movs	r2, #0
  42244c:	a919      	add	r1, sp, #100	; 0x64
  42244e:	9803      	ldr	r0, [sp, #12]
  422450:	4b6d      	ldr	r3, [pc, #436]	; (422608 <lv_img_design+0x2b0>)
  422452:	4798      	blx	r3
  422454:	b950      	cbnz	r0, 42246c <lv_img_design+0x114>
  422456:	2002      	movs	r0, #2
  422458:	e1ec      	b.n	422834 <lv_img_design+0x4dc>
            if(_lv_area_is_in(clip_area, &img->coords, 0) == false) return LV_DESIGN_RES_NOT_COVER;
  42245a:	2200      	movs	r2, #0
  42245c:	f104 0110 	add.w	r1, r4, #16
  422460:	9803      	ldr	r0, [sp, #12]
  422462:	4b69      	ldr	r3, [pc, #420]	; (422608 <lv_img_design+0x2b0>)
  422464:	4798      	blx	r3
  422466:	b908      	cbnz	r0, 42246c <lv_img_design+0x114>
  422468:	2002      	movs	r0, #2
  42246a:	e1e3      	b.n	422834 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  42246c:	2220      	movs	r2, #32
  42246e:	2100      	movs	r1, #0
  422470:	4620      	mov	r0, r4
  422472:	4b60      	ldr	r3, [pc, #384]	; (4225f4 <lv_img_design+0x29c>)
  422474:	4798      	blx	r3
  422476:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  422478:	2800      	cmp	r0, #0
  42247a:	f040 828f 	bne.w	42299c <lv_img_design+0x644>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  42247e:	f248 02a0 	movw	r2, #32928	; 0x80a0
  422482:	2100      	movs	r1, #0
  422484:	4620      	mov	r0, r4
  422486:	4b5b      	ldr	r3, [pc, #364]	; (4225f4 <lv_img_design+0x29c>)
  422488:	4798      	blx	r3
  42248a:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_image_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  42248c:	2800      	cmp	r0, #0
  42248e:	f000 8287 	beq.w	4229a0 <lv_img_design+0x648>
  422492:	2002      	movs	r0, #2
  422494:	e1ce      	b.n	422834 <lv_img_design+0x4dc>
        lv_draw_rect_dsc_init(&bg_dsc);
  422496:	a819      	add	r0, sp, #100	; 0x64
  422498:	4b5c      	ldr	r3, [pc, #368]	; (42260c <lv_img_design+0x2b4>)
  42249a:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(img, LV_IMG_PART_MAIN, &bg_dsc);
  42249c:	aa19      	add	r2, sp, #100	; 0x64
  42249e:	2100      	movs	r1, #0
  4224a0:	4620      	mov	r0, r4
  4224a2:	4b5b      	ldr	r3, [pc, #364]	; (422610 <lv_img_design+0x2b8>)
  4224a4:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  4224a6:	2233      	movs	r2, #51	; 0x33
  4224a8:	2100      	movs	r1, #0
  4224aa:	4620      	mov	r0, r4
  4224ac:	4b51      	ldr	r3, [pc, #324]	; (4225f4 <lv_img_design+0x29c>)
  4224ae:	4798      	blx	r3
        if(lv_obj_get_style_border_post(img, LV_OBJ_PART_MAIN)) {
  4224b0:	b110      	cbz	r0, 4224b8 <lv_img_design+0x160>
            bg_dsc.border_opa = LV_OPA_TRANSP;
  4224b2:	2300      	movs	r3, #0
  4224b4:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  4224b8:	2207      	movs	r2, #7
  4224ba:	2100      	movs	r1, #0
  4224bc:	4620      	mov	r0, r4
  4224be:	4e4d      	ldr	r6, [pc, #308]	; (4225f4 <lv_img_design+0x29c>)
  4224c0:	47b0      	blx	r6
        zoom_final = (zoom_final * ext->zoom) >> 8;
  4224c2:	8a6f      	ldrh	r7, [r5, #18]
  4224c4:	fb07 f700 	mul.w	r7, r7, r0
  4224c8:	123f      	asrs	r7, r7, #8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  4224ca:	2206      	movs	r2, #6
  4224cc:	2100      	movs	r1, #0
  4224ce:	4620      	mov	r0, r4
  4224d0:	47b0      	blx	r6
        angle_final += ext->angle;
  4224d2:	89ab      	ldrh	r3, [r5, #12]
  4224d4:	18c3      	adds	r3, r0, r3
  4224d6:	9304      	str	r3, [sp, #16]
        lv_coord_t obj_w = lv_obj_get_width(img);
  4224d8:	4620      	mov	r0, r4
  4224da:	4b48      	ldr	r3, [pc, #288]	; (4225fc <lv_img_design+0x2a4>)
  4224dc:	4798      	blx	r3
  4224de:	4680      	mov	r8, r0
  4224e0:	9005      	str	r0, [sp, #20]
        lv_coord_t obj_h = lv_obj_get_height(img);
  4224e2:	4620      	mov	r0, r4
  4224e4:	4b46      	ldr	r3, [pc, #280]	; (422600 <lv_img_design+0x2a8>)
  4224e6:	4798      	blx	r3
  4224e8:	4602      	mov	r2, r0
  4224ea:	9006      	str	r0, [sp, #24]
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
  4224ec:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  4224f0:	9307      	str	r3, [sp, #28]
  4224f2:	fa1f f987 	uxth.w	r9, r7
                                         angle_final, zoom_final, &ext->pivot);
  4224f6:	f105 0a0e 	add.w	sl, r5, #14
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
  4224fa:	f8cd a004 	str.w	sl, [sp, #4]
  4224fe:	f8cd 9000 	str.w	r9, [sp]
  422502:	4641      	mov	r1, r8
  422504:	a808      	add	r0, sp, #32
  422506:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 422604 <lv_img_design+0x2ac>
  42250a:	47d8      	blx	fp
        bg_coords.x1 += img->coords.x1;
  42250c:	8a22      	ldrh	r2, [r4, #16]
  42250e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  422512:	4413      	add	r3, r2
  422514:	f8ad 3020 	strh.w	r3, [sp, #32]
        bg_coords.y1 += img->coords.y1;
  422518:	8a63      	ldrh	r3, [r4, #18]
  42251a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  42251e:	4419      	add	r1, r3
  422520:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        bg_coords.x2 += img->coords.x1;
  422524:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
  422528:	440a      	add	r2, r1
  42252a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        bg_coords.y2 += img->coords.y1;
  42252e:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
  422532:	4413      	add	r3, r2
  422534:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  422538:	2212      	movs	r2, #18
  42253a:	2100      	movs	r1, #0
  42253c:	4620      	mov	r0, r4
  42253e:	47b0      	blx	r6
        bg_coords.x1 -= lv_obj_get_style_pad_left(img, LV_IMG_PART_MAIN);
  422540:	b280      	uxth	r0, r0
  422542:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  422546:	1a18      	subs	r0, r3, r0
  422548:	f8ad 0020 	strh.w	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  42254c:	2213      	movs	r2, #19
  42254e:	2100      	movs	r1, #0
  422550:	4620      	mov	r0, r4
  422552:	47b0      	blx	r6
        bg_coords.x2 += lv_obj_get_style_pad_right(img, LV_IMG_PART_MAIN);
  422554:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  422558:	fa13 f080 	uxtah	r0, r3, r0
  42255c:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  422560:	2210      	movs	r2, #16
  422562:	2100      	movs	r1, #0
  422564:	4620      	mov	r0, r4
  422566:	47b0      	blx	r6
        bg_coords.y1 -= lv_obj_get_style_pad_top(img, LV_IMG_PART_MAIN);
  422568:	b280      	uxth	r0, r0
  42256a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
  42256e:	1a18      	subs	r0, r3, r0
  422570:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  422574:	2211      	movs	r2, #17
  422576:	2100      	movs	r1, #0
  422578:	4620      	mov	r0, r4
  42257a:	47b0      	blx	r6
        bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
  42257c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
  422580:	fa13 f080 	uxtah	r0, r3, r0
  422584:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
        lv_draw_rect(&bg_coords, clip_area, &bg_dsc);
  422588:	aa19      	add	r2, sp, #100	; 0x64
  42258a:	9903      	ldr	r1, [sp, #12]
  42258c:	a808      	add	r0, sp, #32
  42258e:	4b21      	ldr	r3, [pc, #132]	; (422614 <lv_img_design+0x2bc>)
  422590:	4798      	blx	r3
        if(zoom_final == 0) return LV_DESIGN_RES_OK;
  422592:	b90f      	cbnz	r7, 422598 <lv_img_design+0x240>
  422594:	2000      	movs	r0, #0
  422596:	e14d      	b.n	422834 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  422598:	2202      	movs	r2, #2
  42259a:	2100      	movs	r1, #0
  42259c:	4620      	mov	r0, r4
  42259e:	47b0      	blx	r6
        if(lv_obj_get_style_clip_corner(img, LV_OBJ_PART_MAIN)) {
  4225a0:	b980      	cbnz	r0, 4225c4 <lv_img_design+0x26c>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
  4225a2:	7d2b      	ldrb	r3, [r5, #20]
  4225a4:	f003 0303 	and.w	r3, r3, #3
  4225a8:	2b01      	cmp	r3, #1
  4225aa:	d93d      	bls.n	422628 <lv_img_design+0x2d0>
        else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
  4225ac:	2b02      	cmp	r3, #2
  4225ae:	f000 8122 	beq.w	4227f6 <lv_img_design+0x49e>
            lv_draw_img(&img->coords, clip_area, NULL, NULL);
  4225b2:	2300      	movs	r3, #0
  4225b4:	461a      	mov	r2, r3
  4225b6:	9903      	ldr	r1, [sp, #12]
  4225b8:	f104 0010 	add.w	r0, r4, #16
  4225bc:	4c16      	ldr	r4, [pc, #88]	; (422618 <lv_img_design+0x2c0>)
  4225be:	47a0      	blx	r4
    return LV_DESIGN_RES_OK;
  4225c0:	2000      	movs	r0, #0
  4225c2:	e137      	b.n	422834 <lv_img_design+0x4dc>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
  4225c4:	201c      	movs	r0, #28
  4225c6:	4b15      	ldr	r3, [pc, #84]	; (42261c <lv_img_design+0x2c4>)
  4225c8:	4798      	blx	r3
  4225ca:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4225cc:	2201      	movs	r2, #1
  4225ce:	2100      	movs	r1, #0
  4225d0:	4620      	mov	r0, r4
  4225d2:	47b0      	blx	r6
            lv_draw_mask_radius_init(mp, &bg_coords, r, false);
  4225d4:	2300      	movs	r3, #0
  4225d6:	4602      	mov	r2, r0
  4225d8:	a908      	add	r1, sp, #32
  4225da:	4658      	mov	r0, fp
  4225dc:	f8df 8044 	ldr.w	r8, [pc, #68]	; 422624 <lv_img_design+0x2cc>
  4225e0:	47c0      	blx	r8
            lv_draw_mask_add(mp, img + 8);
  4225e2:	f504 7118 	add.w	r1, r4, #608	; 0x260
  4225e6:	4658      	mov	r0, fp
  4225e8:	4b0d      	ldr	r3, [pc, #52]	; (422620 <lv_img_design+0x2c8>)
  4225ea:	4798      	blx	r3
  4225ec:	e7d9      	b.n	4225a2 <lv_img_design+0x24a>
  4225ee:	bf00      	nop
  4225f0:	00407ffd 	.word	0x00407ffd
  4225f4:	004073ed 	.word	0x004073ed
  4225f8:	00406e61 	.word	0x00406e61
  4225fc:	00405b29 	.word	0x00405b29
  422600:	00405b59 	.word	0x00405b59
  422604:	00413799 	.word	0x00413799
  422608:	00416759 	.word	0x00416759
  42260c:	0041338d 	.word	0x0041338d
  422610:	004082a5 	.word	0x004082a5
  422614:	004133d9 	.word	0x004133d9
  422618:	0040e031 	.word	0x0040e031
  42261c:	00417895 	.word	0x00417895
  422620:	004109a5 	.word	0x004109a5
  422624:	00410d5d 	.word	0x00410d5d
            lv_draw_img_dsc_init(&img_dsc);
  422628:	a810      	add	r0, sp, #64	; 0x40
  42262a:	4b8e      	ldr	r3, [pc, #568]	; (422864 <lv_img_design+0x50c>)
  42262c:	4798      	blx	r3
            lv_obj_init_draw_img_dsc(img, LV_IMG_PART_MAIN, &img_dsc);
  42262e:	aa10      	add	r2, sp, #64	; 0x40
  422630:	2100      	movs	r1, #0
  422632:	4620      	mov	r0, r4
  422634:	4b8c      	ldr	r3, [pc, #560]	; (422868 <lv_img_design+0x510>)
  422636:	4798      	blx	r3
            img_dsc.zoom = zoom_final;
  422638:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
            if(img_dsc.zoom == 0) return LV_DESIGN_RES_OK;
  42263c:	f1b9 0f00 	cmp.w	r9, #0
  422640:	f000 80d7 	beq.w	4227f2 <lv_img_design+0x49a>
            img_dsc.angle = angle_final;
  422644:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  422648:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            img_dsc.pivot.x = ext->pivot.x;
  42264c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  422650:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            img_dsc.pivot.y = ext->pivot.y;
  422654:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
  422658:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            img_dsc.antialias = ext->antialias;
  42265c:	7d6a      	ldrb	r2, [r5, #21]
  42265e:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
  422662:	f362 0300 	bfi	r3, r2, #0, #1
  422666:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
            lv_coord_t zoomed_src_w = (int32_t)((int32_t)ext->w * zoom_final) >> 8;
  42266a:	f9b5 8008 	ldrsh.w	r8, [r5, #8]
  42266e:	fb08 f807 	mul.w	r8, r8, r7
  422672:	ea4f 2828 	mov.w	r8, r8, asr #8
  422676:	fa0f f388 	sxth.w	r3, r8
            if(zoomed_src_w <= 0) return LV_DESIGN_RES_OK;
  42267a:	2b00      	cmp	r3, #0
  42267c:	f340 80b9 	ble.w	4227f2 <lv_img_design+0x49a>
            lv_coord_t zoomed_src_h = (int32_t)((int32_t)ext->h * zoom_final) >> 8;
  422680:	f9b5 b00a 	ldrsh.w	fp, [r5, #10]
  422684:	fb0b fb07 	mul.w	fp, fp, r7
  422688:	ea4f 2b2b 	mov.w	fp, fp, asr #8
  42268c:	fa0f f38b 	sxth.w	r3, fp
            if(zoomed_src_h <= 0) return LV_DESIGN_RES_OK;
  422690:	2b00      	cmp	r3, #0
  422692:	f340 80ae 	ble.w	4227f2 <lv_img_design+0x49a>
            lv_obj_get_coords(img, &zoomed_coords);
  422696:	a90a      	add	r1, sp, #40	; 0x28
  422698:	4620      	mov	r0, r4
  42269a:	4b74      	ldr	r3, [pc, #464]	; (42286c <lv_img_design+0x514>)
  42269c:	4798      	blx	r3
            zoomed_coords.x1 += (int32_t)((int32_t)ext->offset.x * zoom_final) >> 8;
  42269e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  4226a2:	fb03 f307 	mul.w	r3, r3, r7
  4226a6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
  4226aa:	eb01 2123 	add.w	r1, r1, r3, asr #8
  4226ae:	b289      	uxth	r1, r1
  4226b0:	fa0f fe81 	sxth.w	lr, r1
  4226b4:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
            zoomed_coords.y1 += (int32_t)((int32_t)ext->offset.y * zoom_final) >> 8;
  4226b8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  4226bc:	fb03 f307 	mul.w	r3, r3, r7
  4226c0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
  4226c4:	eb02 2223 	add.w	r2, r2, r3, asr #8
  4226c8:	b292      	uxth	r2, r2
  4226ca:	b210      	sxth	r0, r2
  4226cc:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
            zoomed_coords.x2 = zoomed_coords.x1 + ((int32_t)((int32_t)(obj_w - 1) * zoom_final) >> 8);
  4226d0:	9b05      	ldr	r3, [sp, #20]
  4226d2:	3b01      	subs	r3, #1
  4226d4:	fb03 f307 	mul.w	r3, r3, r7
  4226d8:	eb01 2323 	add.w	r3, r1, r3, asr #8
  4226dc:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            zoomed_coords.y2 = zoomed_coords.y1 + ((int32_t)((int32_t)(obj_h - 1) * zoom_final) >> 8);
  4226e0:	9b06      	ldr	r3, [sp, #24]
  4226e2:	3b01      	subs	r3, #1
  4226e4:	fb03 f307 	mul.w	r3, r3, r7
  4226e8:	eb02 2323 	add.w	r3, r2, r3, asr #8
  4226ec:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            if(zoomed_coords.x1 > img->coords.x1) zoomed_coords.x1 -= ext->w;
  4226f0:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  4226f4:	459e      	cmp	lr, r3
  4226f6:	dd03      	ble.n	422700 <lv_img_design+0x3a8>
  4226f8:	892b      	ldrh	r3, [r5, #8]
  4226fa:	1ac9      	subs	r1, r1, r3
  4226fc:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
            if(zoomed_coords.y1 > img->coords.y1) zoomed_coords.y1 -= ext->h;
  422700:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  422704:	4298      	cmp	r0, r3
  422706:	dd03      	ble.n	422710 <lv_img_design+0x3b8>
  422708:	896b      	ldrh	r3, [r5, #10]
  42270a:	1ad2      	subs	r2, r2, r3
  42270c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            _lv_img_buf_get_transformed_area(&clip_real, lv_obj_get_width(img), lv_obj_get_height(img), angle_final, zoom_final,
  422710:	4620      	mov	r0, r4
  422712:	4b57      	ldr	r3, [pc, #348]	; (422870 <lv_img_design+0x518>)
  422714:	4798      	blx	r3
  422716:	4607      	mov	r7, r0
  422718:	4620      	mov	r0, r4
  42271a:	4b56      	ldr	r3, [pc, #344]	; (422874 <lv_img_design+0x51c>)
  42271c:	4798      	blx	r3
  42271e:	f8cd a004 	str.w	sl, [sp, #4]
  422722:	f8cd 9000 	str.w	r9, [sp]
  422726:	9b07      	ldr	r3, [sp, #28]
  422728:	4602      	mov	r2, r0
  42272a:	4639      	mov	r1, r7
  42272c:	a80c      	add	r0, sp, #48	; 0x30
  42272e:	4f52      	ldr	r7, [pc, #328]	; (422878 <lv_img_design+0x520>)
  422730:	47b8      	blx	r7
            clip_real.x1 += img->coords.x1;
  422732:	8a23      	ldrh	r3, [r4, #16]
  422734:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  422738:	441a      	add	r2, r3
  42273a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
            clip_real.x2 += img->coords.x1;
  42273e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
  422742:	4413      	add	r3, r2
  422744:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            clip_real.y1 += img->coords.y1;
  422748:	8a63      	ldrh	r3, [r4, #18]
  42274a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
  42274e:	441a      	add	r2, r3
  422750:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
            clip_real.y2 += img->coords.y1;
  422754:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
  422758:	4413      	add	r3, r2
  42275a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            if(_lv_area_intersect(&clip_real, &clip_real, clip_area) == false) return LV_DESIGN_RES_OK;
  42275e:	9a03      	ldr	r2, [sp, #12]
  422760:	a90c      	add	r1, sp, #48	; 0x30
  422762:	4608      	mov	r0, r1
  422764:	4b45      	ldr	r3, [pc, #276]	; (42287c <lv_img_design+0x524>)
  422766:	4798      	blx	r3
  422768:	2800      	cmp	r0, #0
  42276a:	d042      	beq.n	4227f2 <lv_img_design+0x49a>
            coords_tmp.y1 = zoomed_coords.y1;
  42276c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
  422770:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            coords_tmp.y2 = zoomed_coords.y1 + ext->h - 1;
  422774:	896a      	ldrh	r2, [r5, #10]
  422776:	fa12 f383 	uxtah	r3, r2, r3
  42277a:	b29b      	uxth	r3, r3
  42277c:	3b01      	subs	r3, #1
  42277e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            for(; coords_tmp.y1 < zoomed_coords.y2; coords_tmp.y1 += zoomed_src_h, coords_tmp.y2 += zoomed_src_h) {
  422782:	e023      	b.n	4227cc <lv_img_design+0x474>
                    lv_draw_img(&coords_tmp, &clip_real, ext->src, &img_dsc);
  422784:	ab10      	add	r3, sp, #64	; 0x40
  422786:	682a      	ldr	r2, [r5, #0]
  422788:	a90c      	add	r1, sp, #48	; 0x30
  42278a:	a80e      	add	r0, sp, #56	; 0x38
  42278c:	4c3c      	ldr	r4, [pc, #240]	; (422880 <lv_img_design+0x528>)
  42278e:	47a0      	blx	r4
                for(; coords_tmp.x1 < zoomed_coords.x2; coords_tmp.x1 += zoomed_src_w, coords_tmp.x2 += zoomed_src_w) {
  422790:	fa1f f388 	uxth.w	r3, r8
  422794:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  422798:	441a      	add	r2, r3
  42279a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
  42279e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
  4227a2:	4413      	add	r3, r2
  4227a4:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  4227a8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
  4227ac:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
  4227b0:	429a      	cmp	r2, r3
  4227b2:	dbe7      	blt.n	422784 <lv_img_design+0x42c>
            for(; coords_tmp.y1 < zoomed_coords.y2; coords_tmp.y1 += zoomed_src_h, coords_tmp.y2 += zoomed_src_h) {
  4227b4:	fa1f f38b 	uxth.w	r3, fp
  4227b8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
  4227bc:	441a      	add	r2, r3
  4227be:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
  4227c2:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
  4227c6:	4413      	add	r3, r2
  4227c8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  4227cc:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
  4227d0:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
  4227d4:	429a      	cmp	r2, r3
  4227d6:	f6bf aef3 	bge.w	4225c0 <lv_img_design+0x268>
                coords_tmp.x1 = zoomed_coords.x1;
  4227da:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
  4227de:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
                coords_tmp.x2 = zoomed_coords.x1 + ext->w - 1;
  4227e2:	892a      	ldrh	r2, [r5, #8]
  4227e4:	fa12 f383 	uxtah	r3, r2, r3
  4227e8:	b29b      	uxth	r3, r3
  4227ea:	3b01      	subs	r3, #1
  4227ec:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
                for(; coords_tmp.x1 < zoomed_coords.x2; coords_tmp.x1 += zoomed_src_w, coords_tmp.x2 += zoomed_src_w) {
  4227f0:	e7da      	b.n	4227a8 <lv_img_design+0x450>
            if(img_dsc.zoom == 0) return LV_DESIGN_RES_OK;
  4227f2:	2000      	movs	r0, #0
  4227f4:	e01e      	b.n	422834 <lv_img_design+0x4dc>
            lv_draw_label_dsc_init(&label_dsc);
  4227f6:	a810      	add	r0, sp, #64	; 0x40
  4227f8:	4b22      	ldr	r3, [pc, #136]	; (422884 <lv_img_design+0x52c>)
  4227fa:	4798      	blx	r3
            lv_obj_init_draw_label_dsc(img, LV_IMG_PART_MAIN, &label_dsc);
  4227fc:	aa10      	add	r2, sp, #64	; 0x40
  4227fe:	2100      	movs	r1, #0
  422800:	4620      	mov	r0, r4
  422802:	4b21      	ldr	r3, [pc, #132]	; (422888 <lv_img_design+0x530>)
  422804:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  422806:	f248 02a9 	movw	r2, #32937	; 0x80a9
  42280a:	2100      	movs	r1, #0
  42280c:	4620      	mov	r0, r4
  42280e:	4b1f      	ldr	r3, [pc, #124]	; (42288c <lv_img_design+0x534>)
  422810:	4798      	blx	r3
            label_dsc.color = lv_obj_get_style_image_recolor(img, LV_IMG_PART_MAIN);
  422812:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
            lv_draw_label(&img->coords, clip_area, &label_dsc, ext->src, NULL);
  422816:	682b      	ldr	r3, [r5, #0]
  422818:	2200      	movs	r2, #0
  42281a:	9200      	str	r2, [sp, #0]
  42281c:	aa10      	add	r2, sp, #64	; 0x40
  42281e:	9903      	ldr	r1, [sp, #12]
  422820:	f104 0010 	add.w	r0, r4, #16
  422824:	4c1a      	ldr	r4, [pc, #104]	; (422890 <lv_img_design+0x538>)
  422826:	47a0      	blx	r4
  422828:	e6ca      	b.n	4225c0 <lv_img_design+0x268>
        if(ext->h == 0 || ext->w == 0) return true;
  42282a:	2001      	movs	r0, #1
  42282c:	e002      	b.n	422834 <lv_img_design+0x4dc>
    else if(mode == LV_DESIGN_DRAW_POST) {
  42282e:	2f01      	cmp	r7, #1
  422830:	d003      	beq.n	42283a <lv_img_design+0x4e2>
    return LV_DESIGN_RES_OK;
  422832:	2000      	movs	r0, #0
}
  422834:	b02f      	add	sp, #188	; 0xbc
  422836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  42283a:	2202      	movs	r2, #2
  42283c:	2100      	movs	r1, #0
  42283e:	4620      	mov	r0, r4
  422840:	4b14      	ldr	r3, [pc, #80]	; (422894 <lv_img_design+0x53c>)
  422842:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(img, LV_OBJ_PART_MAIN)) {
  422844:	b938      	cbnz	r0, 422856 <lv_img_design+0x4fe>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  422846:	2233      	movs	r2, #51	; 0x33
  422848:	2100      	movs	r1, #0
  42284a:	4620      	mov	r0, r4
  42284c:	4b11      	ldr	r3, [pc, #68]	; (422894 <lv_img_design+0x53c>)
  42284e:	4798      	blx	r3
        if(lv_obj_get_style_border_post(img, LV_OBJ_PART_MAIN)) {
  422850:	bb30      	cbnz	r0, 4228a0 <lv_img_design+0x548>
    return LV_DESIGN_RES_OK;
  422852:	2000      	movs	r0, #0
  422854:	e7ee      	b.n	422834 <lv_img_design+0x4dc>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(img + 8);
  422856:	f504 7018 	add.w	r0, r4, #608	; 0x260
  42285a:	4b0f      	ldr	r3, [pc, #60]	; (422898 <lv_img_design+0x540>)
  42285c:	4798      	blx	r3
            _lv_mem_buf_release(param);
  42285e:	4b0f      	ldr	r3, [pc, #60]	; (42289c <lv_img_design+0x544>)
  422860:	4798      	blx	r3
  422862:	e7f0      	b.n	422846 <lv_img_design+0x4ee>
  422864:	0040dd85 	.word	0x0040dd85
  422868:	0040899d 	.word	0x0040899d
  42286c:	00405a69 	.word	0x00405a69
  422870:	00405b29 	.word	0x00405b29
  422874:	00405b59 	.word	0x00405b59
  422878:	00413799 	.word	0x00413799
  42287c:	004164e3 	.word	0x004164e3
  422880:	0040e031 	.word	0x0040e031
  422884:	0040e919 	.word	0x0040e919
  422888:	004088d5 	.word	0x004088d5
  42288c:	00406dd9 	.word	0x00406dd9
  422890:	0040e961 	.word	0x0040e961
  422894:	004073ed 	.word	0x004073ed
  422898:	00410a4d 	.word	0x00410a4d
  42289c:	00417645 	.word	0x00417645
            lv_draw_rect_dsc_init(&draw_dsc);
  4228a0:	a819      	add	r0, sp, #100	; 0x64
  4228a2:	4b40      	ldr	r3, [pc, #256]	; (4229a4 <lv_img_design+0x64c>)
  4228a4:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
  4228a6:	2700      	movs	r7, #0
  4228a8:	f88d 7070 	strb.w	r7, [sp, #112]	; 0x70
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
  4228ac:	f88d 709a 	strb.w	r7, [sp, #154]	; 0x9a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
  4228b0:	f88d 708e 	strb.w	r7, [sp, #142]	; 0x8e
            lv_obj_init_draw_rect_dsc(img, LV_OBJ_PART_MAIN, &draw_dsc);
  4228b4:	aa19      	add	r2, sp, #100	; 0x64
  4228b6:	4639      	mov	r1, r7
  4228b8:	4620      	mov	r0, r4
  4228ba:	4b3b      	ldr	r3, [pc, #236]	; (4229a8 <lv_img_design+0x650>)
  4228bc:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  4228be:	2207      	movs	r2, #7
  4228c0:	4639      	mov	r1, r7
  4228c2:	4620      	mov	r0, r4
  4228c4:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 4229b4 <lv_img_design+0x65c>
  4228c8:	47c8      	blx	r9
            zoom_final = (zoom_final * ext->zoom) >> 8;
  4228ca:	f8b5 8012 	ldrh.w	r8, [r5, #18]
  4228ce:	fb08 f800 	mul.w	r8, r8, r0
  4228d2:	ea4f 2828 	mov.w	r8, r8, asr #8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  4228d6:	2206      	movs	r2, #6
  4228d8:	4639      	mov	r1, r7
  4228da:	4620      	mov	r0, r4
  4228dc:	47c8      	blx	r9
            angle_final += ext->angle;
  4228de:	89ab      	ldrh	r3, [r5, #12]
  4228e0:	4403      	add	r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4228e2:	8aa1      	ldrh	r1, [r4, #20]
  4228e4:	8a22      	ldrh	r2, [r4, #16]
  4228e6:	1a89      	subs	r1, r1, r2
  4228e8:	b289      	uxth	r1, r1
  4228ea:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4228ec:	8ae2      	ldrh	r2, [r4, #22]
  4228ee:	8a60      	ldrh	r0, [r4, #18]
  4228f0:	1a12      	subs	r2, r2, r0
  4228f2:	b292      	uxth	r2, r2
  4228f4:	3201      	adds	r2, #1
                                             angle_final, zoom_final, &ext->pivot);
  4228f6:	350e      	adds	r5, #14
            _lv_img_buf_get_transformed_area(&bg_coords, lv_area_get_width(&img->coords), lv_area_get_height(&img->coords),
  4228f8:	9501      	str	r5, [sp, #4]
  4228fa:	fa1f f088 	uxth.w	r0, r8
  4228fe:	9000      	str	r0, [sp, #0]
  422900:	b21b      	sxth	r3, r3
  422902:	b212      	sxth	r2, r2
  422904:	b209      	sxth	r1, r1
  422906:	a810      	add	r0, sp, #64	; 0x40
  422908:	4d28      	ldr	r5, [pc, #160]	; (4229ac <lv_img_design+0x654>)
  42290a:	47a8      	blx	r5
            bg_coords.x1 += img->coords.x1;
  42290c:	8a22      	ldrh	r2, [r4, #16]
  42290e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  422912:	4413      	add	r3, r2
  422914:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            bg_coords.y1 += img->coords.y1;
  422918:	8a63      	ldrh	r3, [r4, #18]
  42291a:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
  42291e:	4419      	add	r1, r3
  422920:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
            bg_coords.x2 += img->coords.x1;
  422924:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
  422928:	440a      	add	r2, r1
  42292a:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
            bg_coords.y2 += img->coords.y1;
  42292e:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
  422932:	4413      	add	r3, r2
  422934:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  422938:	2212      	movs	r2, #18
  42293a:	4639      	mov	r1, r7
  42293c:	4620      	mov	r0, r4
  42293e:	47c8      	blx	r9
            bg_coords.x1 -= lv_obj_get_style_pad_left(img, LV_IMG_PART_MAIN);
  422940:	b280      	uxth	r0, r0
  422942:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  422946:	1a18      	subs	r0, r3, r0
  422948:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  42294c:	2213      	movs	r2, #19
  42294e:	4639      	mov	r1, r7
  422950:	4620      	mov	r0, r4
  422952:	47c8      	blx	r9
            bg_coords.x2 += lv_obj_get_style_pad_right(img, LV_IMG_PART_MAIN);
  422954:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  422958:	fa13 f080 	uxtah	r0, r3, r0
  42295c:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  422960:	2210      	movs	r2, #16
  422962:	4639      	mov	r1, r7
  422964:	4620      	mov	r0, r4
  422966:	47c8      	blx	r9
            bg_coords.y1 -= lv_obj_get_style_pad_top(img, LV_IMG_PART_MAIN);
  422968:	b280      	uxth	r0, r0
  42296a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
  42296e:	1a18      	subs	r0, r3, r0
  422970:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  422974:	2211      	movs	r2, #17
  422976:	4639      	mov	r1, r7
  422978:	4620      	mov	r0, r4
  42297a:	47c8      	blx	r9
            bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
  42297c:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  422980:	fa13 f080 	uxtah	r0, r3, r0
  422984:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
            lv_draw_rect(&img->coords, clip_area, &draw_dsc);
  422988:	aa19      	add	r2, sp, #100	; 0x64
  42298a:	9903      	ldr	r1, [sp, #12]
  42298c:	f104 0010 	add.w	r0, r4, #16
  422990:	4b07      	ldr	r3, [pc, #28]	; (4229b0 <lv_img_design+0x658>)
  422992:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  422994:	4638      	mov	r0, r7
  422996:	e74d      	b.n	422834 <lv_img_design+0x4dc>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return LV_DESIGN_RES_NOT_COVER;
  422998:	2002      	movs	r0, #2
  42299a:	e74b      	b.n	422834 <lv_img_design+0x4dc>
        if(lv_obj_get_style_bg_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  42299c:	2002      	movs	r0, #2
  42299e:	e749      	b.n	422834 <lv_img_design+0x4dc>
        return LV_DESIGN_RES_COVER;
  4229a0:	2001      	movs	r0, #1
  4229a2:	e747      	b.n	422834 <lv_img_design+0x4dc>
  4229a4:	0041338d 	.word	0x0041338d
  4229a8:	004082a5 	.word	0x004082a5
  4229ac:	00413799 	.word	0x00413799
  4229b0:	004133d9 	.word	0x004133d9
  4229b4:	004073ed 	.word	0x004073ed

004229b8 <lv_img_get_auto_size>:
{
  4229b8:	b510      	push	{r4, lr}
  4229ba:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(img, LV_OBJX_NAME);
  4229bc:	4b07      	ldr	r3, [pc, #28]	; (4229dc <lv_img_get_auto_size+0x24>)
  4229be:	4798      	blx	r3
  4229c0:	b928      	cbnz	r0, 4229ce <lv_img_get_auto_size+0x16>
  4229c2:	4622      	mov	r2, r4
  4229c4:	2300      	movs	r3, #0
  4229c6:	4806      	ldr	r0, [pc, #24]	; (4229e0 <lv_img_get_auto_size+0x28>)
  4229c8:	4906      	ldr	r1, [pc, #24]	; (4229e4 <lv_img_get_auto_size+0x2c>)
  4229ca:	4788      	blx	r1
  4229cc:	e7fe      	b.n	4229cc <lv_img_get_auto_size+0x14>
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
  4229ce:	4620      	mov	r0, r4
  4229d0:	4b05      	ldr	r3, [pc, #20]	; (4229e8 <lv_img_get_auto_size+0x30>)
  4229d2:	4798      	blx	r3
    return ext->auto_size == 0 ? false : true;
  4229d4:	7d00      	ldrb	r0, [r0, #20]
}
  4229d6:	f3c0 0080 	ubfx	r0, r0, #2, #1
  4229da:	bd10      	pop	{r4, pc}
  4229dc:	00416da9 	.word	0x00416da9
  4229e0:	0042e560 	.word	0x0042e560
  4229e4:	00416db5 	.word	0x00416db5
  4229e8:	00407ffd 	.word	0x00407ffd

004229ec <lv_img_set_src>:
{
  4229ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4229f0:	b086      	sub	sp, #24
  4229f2:	4605      	mov	r5, r0
  4229f4:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(img, LV_OBJX_NAME);
  4229f6:	4b63      	ldr	r3, [pc, #396]	; (422b84 <lv_img_set_src+0x198>)
  4229f8:	4798      	blx	r3
  4229fa:	b928      	cbnz	r0, 422a08 <lv_img_set_src+0x1c>
  4229fc:	462a      	mov	r2, r5
  4229fe:	2300      	movs	r3, #0
  422a00:	4861      	ldr	r0, [pc, #388]	; (422b88 <lv_img_set_src+0x19c>)
  422a02:	4962      	ldr	r1, [pc, #392]	; (422b8c <lv_img_set_src+0x1a0>)
  422a04:	4788      	blx	r1
  422a06:	e7fe      	b.n	422a06 <lv_img_set_src+0x1a>
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
  422a08:	4630      	mov	r0, r6
  422a0a:	4b61      	ldr	r3, [pc, #388]	; (422b90 <lv_img_set_src+0x1a4>)
  422a0c:	4798      	blx	r3
  422a0e:	4607      	mov	r7, r0
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
  422a10:	4628      	mov	r0, r5
  422a12:	4b60      	ldr	r3, [pc, #384]	; (422b94 <lv_img_set_src+0x1a8>)
  422a14:	4798      	blx	r3
  422a16:	4604      	mov	r4, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
  422a18:	2f03      	cmp	r7, #3
  422a1a:	d06e      	beq.n	422afa <lv_img_set_src+0x10e>
    lv_img_decoder_get_info(src_img, &header);
  422a1c:	a905      	add	r1, sp, #20
  422a1e:	4630      	mov	r0, r6
  422a20:	4b5d      	ldr	r3, [pc, #372]	; (422b98 <lv_img_set_src+0x1ac>)
  422a22:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
  422a24:	2f00      	cmp	r7, #0
  422a26:	d17b      	bne.n	422b20 <lv_img_set_src+0x134>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
  422a28:	7d23      	ldrb	r3, [r4, #20]
  422a2a:	f003 0303 	and.w	r3, r3, #3
  422a2e:	3b01      	subs	r3, #1
  422a30:	b2db      	uxtb	r3, r3
  422a32:	2b01      	cmp	r3, #1
  422a34:	d802      	bhi.n	422a3c <lv_img_set_src+0x50>
            lv_mem_free(ext->src);
  422a36:	6820      	ldr	r0, [r4, #0]
  422a38:	4b58      	ldr	r3, [pc, #352]	; (422b9c <lv_img_set_src+0x1b0>)
  422a3a:	4798      	blx	r3
        ext->src = src_img;
  422a3c:	6026      	str	r6, [r4, #0]
    if(src_type == LV_IMG_SRC_SYMBOL) {
  422a3e:	2f02      	cmp	r7, #2
  422a40:	d12c      	bne.n	422a9c <lv_img_set_src+0xb0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  422a42:	f248 028e 	movw	r2, #32910	; 0x808e
  422a46:	2100      	movs	r1, #0
  422a48:	4628      	mov	r0, r5
  422a4a:	4b55      	ldr	r3, [pc, #340]	; (422ba0 <lv_img_set_src+0x1b4>)
  422a4c:	4798      	blx	r3
  422a4e:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  422a50:	f248 0280 	movw	r2, #32896	; 0x8080
  422a54:	2100      	movs	r1, #0
  422a56:	4628      	mov	r0, r5
  422a58:	f8df 816c 	ldr.w	r8, [pc, #364]	; 422bc8 <lv_img_set_src+0x1dc>
  422a5c:	47c0      	blx	r8
  422a5e:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  422a60:	f248 0281 	movw	r2, #32897	; 0x8081
  422a64:	2100      	movs	r1, #0
  422a66:	4628      	mov	r0, r5
  422a68:	47c0      	blx	r8
        _lv_txt_get_size(&size, src_img, font, letter_space, line_space,
  422a6a:	2300      	movs	r3, #0
  422a6c:	9302      	str	r3, [sp, #8]
  422a6e:	f647 4318 	movw	r3, #31768	; 0x7c18
  422a72:	9301      	str	r3, [sp, #4]
  422a74:	9000      	str	r0, [sp, #0]
  422a76:	4653      	mov	r3, sl
  422a78:	464a      	mov	r2, r9
  422a7a:	4631      	mov	r1, r6
  422a7c:	a804      	add	r0, sp, #16
  422a7e:	4e49      	ldr	r6, [pc, #292]	; (422ba4 <lv_img_set_src+0x1b8>)
  422a80:	47b0      	blx	r6
        header.w = size.x;
  422a82:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  422a86:	9b05      	ldr	r3, [sp, #20]
  422a88:	f362 2394 	bfi	r3, r2, #10, #11
  422a8c:	9305      	str	r3, [sp, #20]
        header.h = size.y;
  422a8e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  422a92:	0c1b      	lsrs	r3, r3, #16
  422a94:	f362 134f 	bfi	r3, r2, #5, #11
  422a98:	f8ad 3016 	strh.w	r3, [sp, #22]
    ext->src_type = src_type;
  422a9c:	7d21      	ldrb	r1, [r4, #20]
  422a9e:	f367 0101 	bfi	r1, r7, #0, #2
    ext->w        = header.w;
  422aa2:	9b05      	ldr	r3, [sp, #20]
  422aa4:	f3c3 238a 	ubfx	r3, r3, #10, #11
  422aa8:	8123      	strh	r3, [r4, #8]
    ext->h        = header.h;
  422aaa:	f8bd 0016 	ldrh.w	r0, [sp, #22]
  422aae:	f3c0 104a 	ubfx	r0, r0, #5, #11
  422ab2:	b282      	uxth	r2, r0
  422ab4:	8160      	strh	r0, [r4, #10]
    ext->cf       = header.cf;
  422ab6:	f89d 0014 	ldrb.w	r0, [sp, #20]
  422aba:	f360 01c7 	bfi	r1, r0, #3, #5
  422abe:	7521      	strb	r1, [r4, #20]
    ext->pivot.x = header.w / 2;
  422ac0:	f3c3 0349 	ubfx	r3, r3, #1, #10
  422ac4:	81e3      	strh	r3, [r4, #14]
    ext->pivot.y = header.h / 2;
  422ac6:	1053      	asrs	r3, r2, #1
  422ac8:	8223      	strh	r3, [r4, #16]
    if(lv_img_get_auto_size(img) != false) {
  422aca:	4628      	mov	r0, r5
  422acc:	4b36      	ldr	r3, [pc, #216]	; (422ba8 <lv_img_set_src+0x1bc>)
  422ace:	4798      	blx	r3
  422ad0:	b130      	cbz	r0, 422ae0 <lv_img_set_src+0xf4>
        lv_obj_set_size(img, ext->w, ext->h);
  422ad2:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
  422ad6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
  422ada:	4628      	mov	r0, r5
  422adc:	4b33      	ldr	r3, [pc, #204]	; (422bac <lv_img_set_src+0x1c0>)
  422ade:	4798      	blx	r3
    if(ext->angle || ext->zoom != LV_IMG_ZOOM_NONE) lv_obj_refresh_ext_draw_pad(img);
  422ae0:	89a3      	ldrh	r3, [r4, #12]
  422ae2:	b91b      	cbnz	r3, 422aec <lv_img_set_src+0x100>
  422ae4:	8a63      	ldrh	r3, [r4, #18]
  422ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  422aea:	d002      	beq.n	422af2 <lv_img_set_src+0x106>
  422aec:	4628      	mov	r0, r5
  422aee:	4b30      	ldr	r3, [pc, #192]	; (422bb0 <lv_img_set_src+0x1c4>)
  422af0:	4798      	blx	r3
    lv_obj_invalidate(img);
  422af2:	4628      	mov	r0, r5
  422af4:	4b2f      	ldr	r3, [pc, #188]	; (422bb4 <lv_img_set_src+0x1c8>)
  422af6:	4798      	blx	r3
  422af8:	e00f      	b.n	422b1a <lv_img_set_src+0x12e>
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
  422afa:	7d03      	ldrb	r3, [r0, #20]
  422afc:	f003 0303 	and.w	r3, r3, #3
  422b00:	3b01      	subs	r3, #1
  422b02:	b2db      	uxtb	r3, r3
  422b04:	2b01      	cmp	r3, #1
  422b06:	d802      	bhi.n	422b0e <lv_img_set_src+0x122>
            lv_mem_free(ext->src);
  422b08:	6800      	ldr	r0, [r0, #0]
  422b0a:	4b24      	ldr	r3, [pc, #144]	; (422b9c <lv_img_set_src+0x1b0>)
  422b0c:	4798      	blx	r3
        ext->src      = NULL;
  422b0e:	2300      	movs	r3, #0
  422b10:	6023      	str	r3, [r4, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
  422b12:	7d23      	ldrb	r3, [r4, #20]
  422b14:	f043 0303 	orr.w	r3, r3, #3
  422b18:	7523      	strb	r3, [r4, #20]
}
  422b1a:	b006      	add	sp, #24
  422b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
  422b20:	1e7b      	subs	r3, r7, #1
  422b22:	b2db      	uxtb	r3, r3
  422b24:	2b01      	cmp	r3, #1
  422b26:	d88a      	bhi.n	422a3e <lv_img_set_src+0x52>
        if(ext->src != src_img) {
  422b28:	f8d4 8000 	ldr.w	r8, [r4]
  422b2c:	4546      	cmp	r6, r8
  422b2e:	d086      	beq.n	422a3e <lv_img_set_src+0x52>
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
  422b30:	7d23      	ldrb	r3, [r4, #20]
  422b32:	f003 0303 	and.w	r3, r3, #3
  422b36:	3b01      	subs	r3, #1
  422b38:	b2db      	uxtb	r3, r3
  422b3a:	2b01      	cmp	r3, #1
  422b3c:	d901      	bls.n	422b42 <lv_img_set_src+0x156>
            const void * old_src = NULL;
  422b3e:	f04f 0800 	mov.w	r8, #0
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
  422b42:	4630      	mov	r0, r6
  422b44:	4b1c      	ldr	r3, [pc, #112]	; (422bb8 <lv_img_set_src+0x1cc>)
  422b46:	4798      	blx	r3
  422b48:	3001      	adds	r0, #1
  422b4a:	4b1c      	ldr	r3, [pc, #112]	; (422bbc <lv_img_set_src+0x1d0>)
  422b4c:	4798      	blx	r3
  422b4e:	4681      	mov	r9, r0
            LV_ASSERT_MEM(new_str);
  422b50:	4b0c      	ldr	r3, [pc, #48]	; (422b84 <lv_img_set_src+0x198>)
  422b52:	4798      	blx	r3
  422b54:	b928      	cbnz	r0, 422b62 <lv_img_set_src+0x176>
  422b56:	464a      	mov	r2, r9
  422b58:	2300      	movs	r3, #0
  422b5a:	4819      	ldr	r0, [pc, #100]	; (422bc0 <lv_img_set_src+0x1d4>)
  422b5c:	490b      	ldr	r1, [pc, #44]	; (422b8c <lv_img_set_src+0x1a0>)
  422b5e:	4788      	blx	r1
  422b60:	e7fe      	b.n	422b60 <lv_img_set_src+0x174>
            if(new_str == NULL) return;
  422b62:	f1b9 0f00 	cmp.w	r9, #0
  422b66:	d0d8      	beq.n	422b1a <lv_img_set_src+0x12e>
            strcpy(new_str, src_img);
  422b68:	4631      	mov	r1, r6
  422b6a:	4648      	mov	r0, r9
  422b6c:	4b15      	ldr	r3, [pc, #84]	; (422bc4 <lv_img_set_src+0x1d8>)
  422b6e:	4798      	blx	r3
            ext->src = new_str;
  422b70:	f8c4 9000 	str.w	r9, [r4]
            if(old_src) lv_mem_free(old_src);
  422b74:	f1b8 0f00 	cmp.w	r8, #0
  422b78:	f43f af61 	beq.w	422a3e <lv_img_set_src+0x52>
  422b7c:	4640      	mov	r0, r8
  422b7e:	4b07      	ldr	r3, [pc, #28]	; (422b9c <lv_img_set_src+0x1b0>)
  422b80:	4798      	blx	r3
  422b82:	e75c      	b.n	422a3e <lv_img_set_src+0x52>
  422b84:	00416da9 	.word	0x00416da9
  422b88:	0042e560 	.word	0x0042e560
  422b8c:	00416db5 	.word	0x00416db5
  422b90:	0040e071 	.word	0x0040e071
  422b94:	00407ffd 	.word	0x00407ffd
  422b98:	00414839 	.word	0x00414839
  422b9c:	004175b1 	.word	0x004175b1
  422ba0:	004072e5 	.word	0x004072e5
  422ba4:	00418db5 	.word	0x00418db5
  422ba8:	004229b9 	.word	0x004229b9
  422bac:	00406be1 	.word	0x00406be1
  422bb0:	00405925 	.word	0x00405925
  422bb4:	00405f01 	.word	0x00405f01
  422bb8:	00428dc1 	.word	0x00428dc1
  422bbc:	004174ed 	.word	0x004174ed
  422bc0:	0042e54c 	.word	0x0042e54c
  422bc4:	00428cdd 	.word	0x00428cdd
  422bc8:	004073ed 	.word	0x004073ed

00422bcc <lv_img_create>:
{
  422bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  422bd0:	4680      	mov	r8, r0
  422bd2:	460f      	mov	r7, r1
    lv_obj_t * img = lv_obj_create(par, copy);
  422bd4:	4b4c      	ldr	r3, [pc, #304]	; (422d08 <lv_img_create+0x13c>)
  422bd6:	4798      	blx	r3
  422bd8:	4605      	mov	r5, r0
    LV_ASSERT_MEM(img);
  422bda:	4b4c      	ldr	r3, [pc, #304]	; (422d0c <lv_img_create+0x140>)
  422bdc:	4798      	blx	r3
  422bde:	b190      	cbz	r0, 422c06 <lv_img_create+0x3a>
    if(img == NULL) return NULL;
  422be0:	2d00      	cmp	r5, #0
  422be2:	d070      	beq.n	422cc6 <lv_img_create+0xfa>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(img);
  422be4:	4b4a      	ldr	r3, [pc, #296]	; (422d10 <lv_img_create+0x144>)
  422be6:	681b      	ldr	r3, [r3, #0]
  422be8:	b19b      	cbz	r3, 422c12 <lv_img_create+0x46>
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(img, sizeof(lv_img_ext_t));
  422bea:	2118      	movs	r1, #24
  422bec:	4628      	mov	r0, r5
  422bee:	4b49      	ldr	r3, [pc, #292]	; (422d14 <lv_img_create+0x148>)
  422bf0:	4798      	blx	r3
  422bf2:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ext);
  422bf4:	4b45      	ldr	r3, [pc, #276]	; (422d0c <lv_img_create+0x140>)
  422bf6:	4798      	blx	r3
  422bf8:	b988      	cbnz	r0, 422c1e <lv_img_create+0x52>
  422bfa:	4622      	mov	r2, r4
  422bfc:	2300      	movs	r3, #0
  422bfe:	4846      	ldr	r0, [pc, #280]	; (422d18 <lv_img_create+0x14c>)
  422c00:	4946      	ldr	r1, [pc, #280]	; (422d1c <lv_img_create+0x150>)
  422c02:	4788      	blx	r1
  422c04:	e7fe      	b.n	422c04 <lv_img_create+0x38>
    LV_ASSERT_MEM(img);
  422c06:	462a      	mov	r2, r5
  422c08:	2300      	movs	r3, #0
  422c0a:	4843      	ldr	r0, [pc, #268]	; (422d18 <lv_img_create+0x14c>)
  422c0c:	4943      	ldr	r1, [pc, #268]	; (422d1c <lv_img_create+0x150>)
  422c0e:	4788      	blx	r1
  422c10:	e7fe      	b.n	422c10 <lv_img_create+0x44>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(img);
  422c12:	4628      	mov	r0, r5
  422c14:	4b42      	ldr	r3, [pc, #264]	; (422d20 <lv_img_create+0x154>)
  422c16:	4798      	blx	r3
  422c18:	4b3d      	ldr	r3, [pc, #244]	; (422d10 <lv_img_create+0x144>)
  422c1a:	6018      	str	r0, [r3, #0]
  422c1c:	e7e5      	b.n	422bea <lv_img_create+0x1e>
    if(ext == NULL) {
  422c1e:	2c00      	cmp	r4, #0
  422c20:	d054      	beq.n	422ccc <lv_img_create+0x100>
    ext->src       = NULL;
  422c22:	2600      	movs	r6, #0
  422c24:	6026      	str	r6, [r4, #0]
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
  422c26:	7d23      	ldrb	r3, [r4, #20]
    ext->cf        = LV_IMG_CF_UNKNOWN;
  422c28:	f043 0303 	orr.w	r3, r3, #3
  422c2c:	f366 03c7 	bfi	r3, r6, #3, #5
  422c30:	7523      	strb	r3, [r4, #20]
    ext->w         = lv_obj_get_width(img);
  422c32:	4628      	mov	r0, r5
  422c34:	4b3b      	ldr	r3, [pc, #236]	; (422d24 <lv_img_create+0x158>)
  422c36:	4798      	blx	r3
  422c38:	8120      	strh	r0, [r4, #8]
    ext->h         = lv_obj_get_height(img);
  422c3a:	4628      	mov	r0, r5
  422c3c:	4b3a      	ldr	r3, [pc, #232]	; (422d28 <lv_img_create+0x15c>)
  422c3e:	4798      	blx	r3
  422c40:	8160      	strh	r0, [r4, #10]
    ext->angle = 0;
  422c42:	81a6      	strh	r6, [r4, #12]
    ext->zoom = LV_IMG_ZOOM_NONE;
  422c44:	f44f 7380 	mov.w	r3, #256	; 0x100
  422c48:	8263      	strh	r3, [r4, #18]
    ext->antialias = LV_ANTIALIAS ? 1 : 0;
  422c4a:	7d63      	ldrb	r3, [r4, #21]
  422c4c:	f043 0301 	orr.w	r3, r3, #1
  422c50:	7563      	strb	r3, [r4, #21]
    ext->auto_size = 1;
  422c52:	7d23      	ldrb	r3, [r4, #20]
  422c54:	f043 0304 	orr.w	r3, r3, #4
  422c58:	7523      	strb	r3, [r4, #20]
    ext->offset.x  = 0;
  422c5a:	80a6      	strh	r6, [r4, #4]
    ext->offset.y  = 0;
  422c5c:	80e6      	strh	r6, [r4, #6]
    ext->pivot.x = 0;
  422c5e:	81e6      	strh	r6, [r4, #14]
    ext->pivot.y = 0;
  422c60:	8226      	strh	r6, [r4, #16]
    lv_obj_set_signal_cb(img, lv_img_signal);
  422c62:	4932      	ldr	r1, [pc, #200]	; (422d2c <lv_img_create+0x160>)
  422c64:	4628      	mov	r0, r5
  422c66:	4b32      	ldr	r3, [pc, #200]	; (422d30 <lv_img_create+0x164>)
  422c68:	4798      	blx	r3
    lv_obj_set_design_cb(img, lv_img_design);
  422c6a:	4932      	ldr	r1, [pc, #200]	; (422d34 <lv_img_create+0x168>)
  422c6c:	4628      	mov	r0, r5
  422c6e:	4b32      	ldr	r3, [pc, #200]	; (422d38 <lv_img_create+0x16c>)
  422c70:	4798      	blx	r3
    if(copy == NULL) {
  422c72:	2f00      	cmp	r7, #0
  422c74:	d02f      	beq.n	422cd6 <lv_img_create+0x10a>
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  422c76:	4638      	mov	r0, r7
  422c78:	4b30      	ldr	r3, [pc, #192]	; (422d3c <lv_img_create+0x170>)
  422c7a:	4798      	blx	r3
        ext->auto_size     = copy_ext->auto_size;
  422c7c:	7d03      	ldrb	r3, [r0, #20]
  422c7e:	f3c3 0380 	ubfx	r3, r3, #2, #1
  422c82:	7d22      	ldrb	r2, [r4, #20]
  422c84:	f363 0282 	bfi	r2, r3, #2, #1
  422c88:	7522      	strb	r2, [r4, #20]
        ext->zoom          = copy_ext->zoom;
  422c8a:	8a43      	ldrh	r3, [r0, #18]
  422c8c:	8263      	strh	r3, [r4, #18]
        ext->angle         = copy_ext->angle;
  422c8e:	8983      	ldrh	r3, [r0, #12]
  422c90:	81a3      	strh	r3, [r4, #12]
        ext->antialias     = copy_ext->antialias;
  422c92:	7d42      	ldrb	r2, [r0, #21]
  422c94:	7d63      	ldrb	r3, [r4, #21]
  422c96:	f362 0300 	bfi	r3, r2, #0, #1
  422c9a:	7563      	strb	r3, [r4, #21]
        ext->offset.x     = copy_ext->offset.x;
  422c9c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  422ca0:	80a3      	strh	r3, [r4, #4]
        ext->offset.y     = copy_ext->offset.y;
  422ca2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  422ca6:	80e3      	strh	r3, [r4, #6]
        ext->pivot.x     = copy_ext->pivot.x;
  422ca8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  422cac:	81e3      	strh	r3, [r4, #14]
        ext->pivot.y     = copy_ext->pivot.y;
  422cae:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
  422cb2:	8223      	strh	r3, [r4, #16]
        lv_img_set_src(img, copy_ext->src);
  422cb4:	6801      	ldr	r1, [r0, #0]
  422cb6:	4628      	mov	r0, r5
  422cb8:	4b21      	ldr	r3, [pc, #132]	; (422d40 <lv_img_create+0x174>)
  422cba:	4798      	blx	r3
        lv_obj_refresh_style(img, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  422cbc:	22ff      	movs	r2, #255	; 0xff
  422cbe:	4611      	mov	r1, r2
  422cc0:	4628      	mov	r0, r5
  422cc2:	4b20      	ldr	r3, [pc, #128]	; (422d44 <lv_img_create+0x178>)
  422cc4:	4798      	blx	r3
}
  422cc6:	4628      	mov	r0, r5
  422cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_del(img);
  422ccc:	4628      	mov	r0, r5
  422cce:	4b1e      	ldr	r3, [pc, #120]	; (422d48 <lv_img_create+0x17c>)
  422cd0:	4798      	blx	r3
        return NULL;
  422cd2:	2500      	movs	r5, #0
  422cd4:	e7f7      	b.n	422cc6 <lv_img_create+0xfa>
        lv_theme_apply(img, LV_THEME_IMAGE);
  422cd6:	210f      	movs	r1, #15
  422cd8:	4628      	mov	r0, r5
  422cda:	4b1c      	ldr	r3, [pc, #112]	; (422d4c <lv_img_create+0x180>)
  422cdc:	4798      	blx	r3
        lv_obj_set_click(img, false);
  422cde:	4631      	mov	r1, r6
  422ce0:	4628      	mov	r0, r5
  422ce2:	4b1b      	ldr	r3, [pc, #108]	; (422d50 <lv_img_create+0x184>)
  422ce4:	4798      	blx	r3
        lv_obj_set_adv_hittest(img, true); /*Images have fast hit-testing*/
  422ce6:	2101      	movs	r1, #1
  422ce8:	4628      	mov	r0, r5
  422cea:	4b1a      	ldr	r3, [pc, #104]	; (422d54 <lv_img_create+0x188>)
  422cec:	4798      	blx	r3
        if(par != NULL) {
  422cee:	f1b8 0f00 	cmp.w	r8, #0
  422cf2:	d004      	beq.n	422cfe <lv_img_create+0x132>
            ext->auto_size = 1;
  422cf4:	7d23      	ldrb	r3, [r4, #20]
  422cf6:	f043 0304 	orr.w	r3, r3, #4
  422cfa:	7523      	strb	r3, [r4, #20]
  422cfc:	e7e3      	b.n	422cc6 <lv_img_create+0xfa>
            ext->auto_size = 0;
  422cfe:	7d23      	ldrb	r3, [r4, #20]
  422d00:	f36f 0382 	bfc	r3, #2, #1
  422d04:	7523      	strb	r3, [r4, #20]
  422d06:	e7de      	b.n	422cc6 <lv_img_create+0xfa>
  422d08:	004067bd 	.word	0x004067bd
  422d0c:	00416da9 	.word	0x00416da9
  422d10:	2041485c 	.word	0x2041485c
  422d14:	004058e9 	.word	0x004058e9
  422d18:	0042e54c 	.word	0x0042e54c
  422d1c:	00416db5 	.word	0x00416db5
  422d20:	00407fad 	.word	0x00407fad
  422d24:	00405b29 	.word	0x00405b29
  422d28:	00405b59 	.word	0x00405b59
  422d2c:	00422d59 	.word	0x00422d59
  422d30:	00405885 	.word	0x00405885
  422d34:	00422359 	.word	0x00422359
  422d38:	004058c1 	.word	0x004058c1
  422d3c:	00407ffd 	.word	0x00407ffd
  422d40:	004229ed 	.word	0x004229ed
  422d44:	00407809 	.word	0x00407809
  422d48:	0040815d 	.word	0x0040815d
  422d4c:	004192a5 	.word	0x004192a5
  422d50:	004056c5 	.word	0x004056c5
  422d54:	00405689 	.word	0x00405689

00422d58 <lv_img_signal>:
{
  422d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  422d5c:	b085      	sub	sp, #20
  422d5e:	4607      	mov	r7, r0
  422d60:	460c      	mov	r4, r1
  422d62:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  422d64:	2908      	cmp	r1, #8
  422d66:	d020      	beq.n	422daa <lv_img_signal+0x52>
    res = ancestor_signal(img, sign, param);
  422d68:	4b98      	ldr	r3, [pc, #608]	; (422fcc <lv_img_signal+0x274>)
  422d6a:	681b      	ldr	r3, [r3, #0]
  422d6c:	4798      	blx	r3
  422d6e:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  422d70:	2801      	cmp	r0, #1
  422d72:	d120      	bne.n	422db6 <lv_img_signal+0x5e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  422d74:	2c07      	cmp	r4, #7
  422d76:	d02a      	beq.n	422dce <lv_img_signal+0x76>
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
  422d78:	4638      	mov	r0, r7
  422d7a:	4b95      	ldr	r3, [pc, #596]	; (422fd0 <lv_img_signal+0x278>)
  422d7c:	4798      	blx	r3
  422d7e:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
  422d80:	bb5c      	cbnz	r4, 422dda <lv_img_signal+0x82>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
  422d82:	7d03      	ldrb	r3, [r0, #20]
  422d84:	f003 0303 	and.w	r3, r3, #3
  422d88:	3b01      	subs	r3, #1
  422d8a:	b2db      	uxtb	r3, r3
  422d8c:	2b01      	cmp	r3, #1
  422d8e:	d812      	bhi.n	422db6 <lv_img_signal+0x5e>
            lv_mem_free(ext->src);
  422d90:	6800      	ldr	r0, [r0, #0]
  422d92:	4b90      	ldr	r3, [pc, #576]	; (422fd4 <lv_img_signal+0x27c>)
  422d94:	4798      	blx	r3
            ext->src      = NULL;
  422d96:	2300      	movs	r3, #0
  422d98:	f8c8 3000 	str.w	r3, [r8]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
  422d9c:	f898 3014 	ldrb.w	r3, [r8, #20]
  422da0:	f043 0303 	orr.w	r3, r3, #3
  422da4:	f888 3014 	strb.w	r3, [r8, #20]
  422da8:	e005      	b.n	422db6 <lv_img_signal+0x5e>
        info->result = lv_img_get_style(img, info->part);
  422daa:	7811      	ldrb	r1, [r2, #0]
  422dac:	4b8a      	ldr	r3, [pc, #552]	; (422fd8 <lv_img_signal+0x280>)
  422dae:	4798      	blx	r3
  422db0:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  422db2:	b120      	cbz	r0, 422dbe <lv_img_signal+0x66>
  422db4:	2601      	movs	r6, #1
}
  422db6:	4630      	mov	r0, r6
  422db8:	b005      	add	sp, #20
  422dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else return ancestor_signal(img, sign, param);
  422dbe:	4b83      	ldr	r3, [pc, #524]	; (422fcc <lv_img_signal+0x274>)
  422dc0:	681b      	ldr	r3, [r3, #0]
  422dc2:	462a      	mov	r2, r5
  422dc4:	4621      	mov	r1, r4
  422dc6:	4638      	mov	r0, r7
  422dc8:	4798      	blx	r3
  422dca:	4606      	mov	r6, r0
  422dcc:	e7f3      	b.n	422db6 <lv_img_signal+0x5e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  422dce:	4983      	ldr	r1, [pc, #524]	; (422fdc <lv_img_signal+0x284>)
  422dd0:	4628      	mov	r0, r5
  422dd2:	4b83      	ldr	r3, [pc, #524]	; (422fe0 <lv_img_signal+0x288>)
  422dd4:	4798      	blx	r3
  422dd6:	4606      	mov	r6, r0
  422dd8:	e7ed      	b.n	422db6 <lv_img_signal+0x5e>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  422dda:	2c04      	cmp	r4, #4
  422ddc:	d027      	beq.n	422e2e <lv_img_signal+0xd6>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
  422dde:	2c06      	cmp	r4, #6
  422de0:	d02f      	beq.n	422e42 <lv_img_signal+0xea>
    else if(sign == LV_SIGNAL_HIT_TEST) {
  422de2:	2c0a      	cmp	r4, #10
  422de4:	d1e7      	bne.n	422db6 <lv_img_signal+0x5e>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  422de6:	2207      	movs	r2, #7
  422de8:	2100      	movs	r1, #0
  422dea:	4638      	mov	r0, r7
  422dec:	f8df a200 	ldr.w	sl, [pc, #512]	; 422ff0 <lv_img_signal+0x298>
  422df0:	47d0      	blx	sl
        zoom = (zoom * ext->zoom) >> 8;
  422df2:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  422df6:	fb03 f300 	mul.w	r3, r3, r0
  422dfa:	121c      	asrs	r4, r3, #8
  422dfc:	fa0f f984 	sxth.w	r9, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  422e00:	2206      	movs	r2, #6
  422e02:	2100      	movs	r1, #0
  422e04:	4638      	mov	r0, r7
  422e06:	47d0      	blx	sl
        angle += ext->angle;
  422e08:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  422e0c:	4403      	add	r3, r0
  422e0e:	fa0f fa83 	sxth.w	sl, r3
        if(ext->w == lv_obj_get_width(img) && ext->h == lv_obj_get_height(img) &&
  422e12:	f9b8 b008 	ldrsh.w	fp, [r8, #8]
  422e16:	4638      	mov	r0, r7
  422e18:	4b72      	ldr	r3, [pc, #456]	; (422fe4 <lv_img_signal+0x28c>)
  422e1a:	4798      	blx	r3
  422e1c:	4583      	cmp	fp, r0
  422e1e:	f000 8086 	beq.w	422f2e <lv_img_signal+0x1d6>
            info->result = lv_obj_is_point_on_coords(img, info->point);
  422e22:	6829      	ldr	r1, [r5, #0]
  422e24:	4638      	mov	r0, r7
  422e26:	4b70      	ldr	r3, [pc, #448]	; (422fe8 <lv_img_signal+0x290>)
  422e28:	4798      	blx	r3
  422e2a:	7128      	strb	r0, [r5, #4]
  422e2c:	e7c3      	b.n	422db6 <lv_img_signal+0x5e>
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
  422e2e:	7d03      	ldrb	r3, [r0, #20]
  422e30:	f003 0303 	and.w	r3, r3, #3
  422e34:	2b02      	cmp	r3, #2
  422e36:	d1be      	bne.n	422db6 <lv_img_signal+0x5e>
            lv_img_set_src(img, ext->src);
  422e38:	6801      	ldr	r1, [r0, #0]
  422e3a:	4638      	mov	r0, r7
  422e3c:	4b6b      	ldr	r3, [pc, #428]	; (422fec <lv_img_signal+0x294>)
  422e3e:	4798      	blx	r3
  422e40:	e7b9      	b.n	422db6 <lv_img_signal+0x5e>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  422e42:	2207      	movs	r2, #7
  422e44:	2100      	movs	r1, #0
  422e46:	4638      	mov	r0, r7
  422e48:	4d69      	ldr	r5, [pc, #420]	; (422ff0 <lv_img_signal+0x298>)
  422e4a:	47a8      	blx	r5
        transf_zoom = (transf_zoom * ext->zoom) >> 8;
  422e4c:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  422e50:	fb03 f300 	mul.w	r3, r3, r0
  422e54:	121c      	asrs	r4, r3, #8
  422e56:	fa0f f984 	sxth.w	r9, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  422e5a:	2206      	movs	r2, #6
  422e5c:	2100      	movs	r1, #0
  422e5e:	4638      	mov	r0, r7
  422e60:	47a8      	blx	r5
        transf_angle += ext->angle;
  422e62:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  422e66:	4403      	add	r3, r0
  422e68:	b21d      	sxth	r5, r3
        if(transf_angle || transf_zoom != LV_IMG_ZOOM_NONE) {
  422e6a:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
  422e6e:	bf08      	it	eq
  422e70:	2d00      	cmpeq	r5, #0
  422e72:	d126      	bne.n	422ec2 <lv_img_signal+0x16a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  422e74:	2212      	movs	r2, #18
  422e76:	2100      	movs	r1, #0
  422e78:	4638      	mov	r0, r7
  422e7a:	4d5d      	ldr	r5, [pc, #372]	; (422ff0 <lv_img_signal+0x298>)
  422e7c:	47a8      	blx	r5
  422e7e:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  422e80:	2213      	movs	r2, #19
  422e82:	2100      	movs	r1, #0
  422e84:	4638      	mov	r0, r7
  422e86:	47a8      	blx	r5
  422e88:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  422e8a:	2210      	movs	r2, #16
  422e8c:	2100      	movs	r1, #0
  422e8e:	4638      	mov	r0, r7
  422e90:	47a8      	blx	r5
  422e92:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  422e94:	2211      	movs	r2, #17
  422e96:	2100      	movs	r1, #0
  422e98:	4638      	mov	r0, r7
  422e9a:	47a8      	blx	r5
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, left);
  422e9c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
  422ea0:	454b      	cmp	r3, r9
  422ea2:	bfb8      	it	lt
  422ea4:	464b      	movlt	r3, r9
  422ea6:	b21b      	sxth	r3, r3
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, right);
  422ea8:	4543      	cmp	r3, r8
  422eaa:	bfb8      	it	lt
  422eac:	4643      	movlt	r3, r8
  422eae:	b21b      	sxth	r3, r3
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, top);
  422eb0:	42a3      	cmp	r3, r4
  422eb2:	bfb8      	it	lt
  422eb4:	4623      	movlt	r3, r4
  422eb6:	b21b      	sxth	r3, r3
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, bottom);
  422eb8:	4298      	cmp	r0, r3
  422eba:	bfb8      	it	lt
  422ebc:	4618      	movlt	r0, r3
  422ebe:	8678      	strh	r0, [r7, #50]	; 0x32
  422ec0:	e779      	b.n	422db6 <lv_img_signal+0x5e>
            lv_coord_t w = lv_obj_get_width(img);
  422ec2:	4638      	mov	r0, r7
  422ec4:	4b47      	ldr	r3, [pc, #284]	; (422fe4 <lv_img_signal+0x28c>)
  422ec6:	4798      	blx	r3
  422ec8:	4682      	mov	sl, r0
            lv_coord_t h = lv_obj_get_height(img);
  422eca:	4638      	mov	r0, r7
  422ecc:	4b49      	ldr	r3, [pc, #292]	; (422ff4 <lv_img_signal+0x29c>)
  422ece:	4798      	blx	r3
  422ed0:	4681      	mov	r9, r0
            _lv_img_buf_get_transformed_area(&a, w, h, transf_angle, transf_zoom, &ext->pivot);
  422ed2:	f108 030e 	add.w	r3, r8, #14
  422ed6:	9301      	str	r3, [sp, #4]
  422ed8:	b2a4      	uxth	r4, r4
  422eda:	9400      	str	r4, [sp, #0]
  422edc:	462b      	mov	r3, r5
  422ede:	4602      	mov	r2, r0
  422ee0:	4651      	mov	r1, sl
  422ee2:	a802      	add	r0, sp, #8
  422ee4:	4c44      	ldr	r4, [pc, #272]	; (422ff8 <lv_img_signal+0x2a0>)
  422ee6:	47a0      	blx	r4
            lv_coord_t pad_ori = img->ext_draw_pad;
  422ee8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.x1);
  422eec:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
  422ef0:	1a9a      	subs	r2, r3, r2
  422ef2:	429a      	cmp	r2, r3
  422ef4:	bfb8      	it	lt
  422ef6:	461a      	movlt	r2, r3
  422ef8:	b211      	sxth	r1, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.y1);
  422efa:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
  422efe:	1a9a      	subs	r2, r3, r2
  422f00:	428a      	cmp	r2, r1
  422f02:	bfb8      	it	lt
  422f04:	460a      	movlt	r2, r1
  422f06:	b211      	sxth	r1, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.x2 - w);
  422f08:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
  422f0c:	441a      	add	r2, r3
  422f0e:	eba2 020a 	sub.w	r2, r2, sl
  422f12:	428a      	cmp	r2, r1
  422f14:	bfb8      	it	lt
  422f16:	460a      	movlt	r2, r1
  422f18:	b212      	sxth	r2, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.y2 - h);
  422f1a:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
  422f1e:	440b      	add	r3, r1
  422f20:	eba3 0309 	sub.w	r3, r3, r9
  422f24:	4293      	cmp	r3, r2
  422f26:	bfb8      	it	lt
  422f28:	4613      	movlt	r3, r2
  422f2a:	867b      	strh	r3, [r7, #50]	; 0x32
  422f2c:	e7a2      	b.n	422e74 <lv_img_signal+0x11c>
        if(ext->w == lv_obj_get_width(img) && ext->h == lv_obj_get_height(img) &&
  422f2e:	f9b8 b00a 	ldrsh.w	fp, [r8, #10]
  422f32:	4638      	mov	r0, r7
  422f34:	4b2f      	ldr	r3, [pc, #188]	; (422ff4 <lv_img_signal+0x29c>)
  422f36:	4798      	blx	r3
  422f38:	4583      	cmp	fp, r0
  422f3a:	f47f af72 	bne.w	422e22 <lv_img_signal+0xca>
  422f3e:	f1ba 0f00 	cmp.w	sl, #0
  422f42:	bf08      	it	eq
  422f44:	f5b9 7f80 	cmpeq.w	r9, #256	; 0x100
  422f48:	d108      	bne.n	422f5c <lv_img_signal+0x204>
           (zoom != LV_IMG_ZOOM_NONE || angle != 0 || ext->pivot.x != ext->w / 2 || ext->pivot.y != ext->h / 2)) {
  422f4a:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
  422f4e:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
  422f52:	2102      	movs	r1, #2
  422f54:	fb93 f3f1 	sdiv	r3, r3, r1
  422f58:	429a      	cmp	r2, r3
  422f5a:	d02e      	beq.n	422fba <lv_img_signal+0x262>
            lv_coord_t w = lv_obj_get_width(img);
  422f5c:	4638      	mov	r0, r7
  422f5e:	4b21      	ldr	r3, [pc, #132]	; (422fe4 <lv_img_signal+0x28c>)
  422f60:	4798      	blx	r3
  422f62:	4681      	mov	r9, r0
            lv_coord_t h = lv_obj_get_height(img);
  422f64:	4638      	mov	r0, r7
  422f66:	4b23      	ldr	r3, [pc, #140]	; (422ff4 <lv_img_signal+0x29c>)
  422f68:	4798      	blx	r3
            _lv_img_buf_get_transformed_area(&coords, w, h, angle, zoom, &ext->pivot);
  422f6a:	f108 030e 	add.w	r3, r8, #14
  422f6e:	9301      	str	r3, [sp, #4]
  422f70:	b2a4      	uxth	r4, r4
  422f72:	9400      	str	r4, [sp, #0]
  422f74:	4653      	mov	r3, sl
  422f76:	4602      	mov	r2, r0
  422f78:	4649      	mov	r1, r9
  422f7a:	a802      	add	r0, sp, #8
  422f7c:	4c1e      	ldr	r4, [pc, #120]	; (422ff8 <lv_img_signal+0x2a0>)
  422f7e:	47a0      	blx	r4
            coords.x1 += img->coords.x1;
  422f80:	8a3a      	ldrh	r2, [r7, #16]
  422f82:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  422f86:	4413      	add	r3, r2
  422f88:	f8ad 3008 	strh.w	r3, [sp, #8]
            coords.y1 += img->coords.y1;
  422f8c:	8a7b      	ldrh	r3, [r7, #18]
  422f8e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
  422f92:	4419      	add	r1, r3
  422f94:	f8ad 100a 	strh.w	r1, [sp, #10]
            coords.x2 += img->coords.x1;
  422f98:	f8bd 100c 	ldrh.w	r1, [sp, #12]
  422f9c:	440a      	add	r2, r1
  422f9e:	f8ad 200c 	strh.w	r2, [sp, #12]
            coords.y2 += img->coords.y1;
  422fa2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  422fa6:	4413      	add	r3, r2
  422fa8:	f8ad 300e 	strh.w	r3, [sp, #14]
            info->result = _lv_area_is_point_on(&coords, info->point, 0);
  422fac:	2200      	movs	r2, #0
  422fae:	6829      	ldr	r1, [r5, #0]
  422fb0:	a802      	add	r0, sp, #8
  422fb2:	4b12      	ldr	r3, [pc, #72]	; (422ffc <lv_img_signal+0x2a4>)
  422fb4:	4798      	blx	r3
  422fb6:	7128      	strb	r0, [r5, #4]
           (zoom != LV_IMG_ZOOM_NONE || angle != 0 || ext->pivot.x != ext->w / 2 || ext->pivot.y != ext->h / 2)) {
  422fb8:	e6fd      	b.n	422db6 <lv_img_signal+0x5e>
  422fba:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
  422fbe:	f9b8 300a 	ldrsh.w	r3, [r8, #10]
  422fc2:	fb93 f3f1 	sdiv	r3, r3, r1
  422fc6:	429a      	cmp	r2, r3
  422fc8:	d1c8      	bne.n	422f5c <lv_img_signal+0x204>
  422fca:	e72a      	b.n	422e22 <lv_img_signal+0xca>
  422fcc:	2041485c 	.word	0x2041485c
  422fd0:	00407ffd 	.word	0x00407ffd
  422fd4:	004175b1 	.word	0x004175b1
  422fd8:	0042234d 	.word	0x0042234d
  422fdc:	00431ccc 	.word	0x00431ccc
  422fe0:	00408289 	.word	0x00408289
  422fe4:	00405b29 	.word	0x00405b29
  422fe8:	00408219 	.word	0x00408219
  422fec:	004229ed 	.word	0x004229ed
  422ff0:	004073ed 	.word	0x004073ed
  422ff4:	00405b59 	.word	0x00405b59
  422ff8:	00413799 	.word	0x00413799
  422ffc:	00416585 	.word	0x00416585

00423000 <lv_label_get_dot_tmp>:
 * Get the stored dot_tmp characters
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * label)
{
  423000:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423002:	4b05      	ldr	r3, [pc, #20]	; (423018 <lv_label_get_dot_tmp+0x18>)
  423004:	4798      	blx	r3
    if(ext->dot_tmp_alloc) {
  423006:	7cc3      	ldrb	r3, [r0, #19]
  423008:	f013 0f01 	tst.w	r3, #1
  42300c:	d101      	bne.n	423012 <lv_label_get_dot_tmp+0x12>
        return ext->dot.tmp_ptr;
    }
    else {
        return ext->dot.tmp;
  42300e:	3004      	adds	r0, #4
    }
}
  423010:	bd08      	pop	{r3, pc}
        return ext->dot.tmp_ptr;
  423012:	6840      	ldr	r0, [r0, #4]
  423014:	bd08      	pop	{r3, pc}
  423016:	bf00      	nop
  423018:	00407ffd 	.word	0x00407ffd

0042301c <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
  42301c:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  42301e:	4b09      	ldr	r3, [pc, #36]	; (423044 <lv_label_dot_tmp_free+0x28>)
  423020:	4798      	blx	r3
  423022:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
  423024:	7cc3      	ldrb	r3, [r0, #19]
  423026:	f013 0f01 	tst.w	r3, #1
  42302a:	d003      	beq.n	423034 <lv_label_dot_tmp_free+0x18>
  42302c:	6840      	ldr	r0, [r0, #4]
  42302e:	b108      	cbz	r0, 423034 <lv_label_dot_tmp_free+0x18>
        lv_mem_free(ext->dot.tmp_ptr);
  423030:	4b05      	ldr	r3, [pc, #20]	; (423048 <lv_label_dot_tmp_free+0x2c>)
  423032:	4798      	blx	r3
    }
    ext->dot_tmp_alloc = false;
  423034:	7ce3      	ldrb	r3, [r4, #19]
  423036:	f36f 0300 	bfc	r3, #0, #1
  42303a:	74e3      	strb	r3, [r4, #19]
    ext->dot.tmp_ptr   = NULL;
  42303c:	2300      	movs	r3, #0
  42303e:	6063      	str	r3, [r4, #4]
  423040:	bd10      	pop	{r4, pc}
  423042:	bf00      	nop
  423044:	00407ffd 	.word	0x00407ffd
  423048:	004175b1 	.word	0x004175b1

0042304c <lv_label_revert_dots>:
{
  42304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42304e:	4607      	mov	r7, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423050:	4b16      	ldr	r3, [pc, #88]	; (4230ac <lv_label_revert_dots+0x60>)
  423052:	4798      	blx	r3
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
  423054:	7c83      	ldrb	r3, [r0, #18]
  423056:	f003 0307 	and.w	r3, r3, #7
  42305a:	2b02      	cmp	r3, #2
  42305c:	d000      	beq.n	423060 <lv_label_revert_dots+0x14>
  42305e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  423060:	4604      	mov	r4, r0
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
  423062:	6881      	ldr	r1, [r0, #8]
  423064:	f64f 73ff 	movw	r3, #65535	; 0xffff
  423068:	4299      	cmp	r1, r3
  42306a:	d0f8      	beq.n	42305e <lv_label_revert_dots+0x12>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(ext->text, letter_i);
  42306c:	4b10      	ldr	r3, [pc, #64]	; (4230b0 <lv_label_revert_dots+0x64>)
  42306e:	681b      	ldr	r3, [r3, #0]
  423070:	3903      	subs	r1, #3
  423072:	6800      	ldr	r0, [r0, #0]
  423074:	4798      	blx	r3
  423076:	4606      	mov	r6, r0
    char * dot_tmp = lv_label_get_dot_tmp(label);
  423078:	4638      	mov	r0, r7
  42307a:	4b0e      	ldr	r3, [pc, #56]	; (4230b4 <lv_label_revert_dots+0x68>)
  42307c:	4798      	blx	r3
    uint8_t i      = 0;
  42307e:	2300      	movs	r3, #0
    while(ext->text[byte_i + i] != '\0') {
  423080:	e003      	b.n	42308a <lv_label_revert_dots+0x3e>
        ext->text[byte_i + i] = dot_tmp[i];
  423082:	5cc5      	ldrb	r5, [r0, r3]
  423084:	548d      	strb	r5, [r1, r2]
        i++;
  423086:	3301      	adds	r3, #1
  423088:	b2db      	uxtb	r3, r3
    while(ext->text[byte_i + i] != '\0') {
  42308a:	6821      	ldr	r1, [r4, #0]
  42308c:	18f2      	adds	r2, r6, r3
  42308e:	eb01 0e02 	add.w	lr, r1, r2
  423092:	5c8d      	ldrb	r5, [r1, r2]
  423094:	2d00      	cmp	r5, #0
  423096:	d1f4      	bne.n	423082 <lv_label_revert_dots+0x36>
    ext->text[byte_i + i] = dot_tmp[i];
  423098:	5cc3      	ldrb	r3, [r0, r3]
  42309a:	f88e 3000 	strb.w	r3, [lr]
    lv_label_dot_tmp_free(label);
  42309e:	4638      	mov	r0, r7
  4230a0:	4b05      	ldr	r3, [pc, #20]	; (4230b8 <lv_label_revert_dots+0x6c>)
  4230a2:	4798      	blx	r3
    ext->dot_end = LV_LABEL_DOT_END_INV;
  4230a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4230a8:	60a3      	str	r3, [r4, #8]
  4230aa:	e7d8      	b.n	42305e <lv_label_revert_dots+0x12>
  4230ac:	00407ffd 	.word	0x00407ffd
  4230b0:	204000b0 	.word	0x204000b0
  4230b4:	00423001 	.word	0x00423001
  4230b8:	0042301d 	.word	0x0042301d

004230bc <get_txt_coords>:
}

static void get_txt_coords(const lv_obj_t * label, lv_area_t * area)
{
  4230bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4230c0:	4606      	mov	r6, r0
  4230c2:	460c      	mov	r4, r1
    lv_obj_get_coords(label, area);
  4230c4:	4b12      	ldr	r3, [pc, #72]	; (423110 <get_txt_coords+0x54>)
  4230c6:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4230c8:	2212      	movs	r2, #18
  4230ca:	2100      	movs	r1, #0
  4230cc:	4630      	mov	r0, r6
  4230ce:	4d11      	ldr	r5, [pc, #68]	; (423114 <get_txt_coords+0x58>)
  4230d0:	47a8      	blx	r5
  4230d2:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4230d4:	2213      	movs	r2, #19
  4230d6:	2100      	movs	r1, #0
  4230d8:	4630      	mov	r0, r6
  4230da:	47a8      	blx	r5
  4230dc:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4230de:	2210      	movs	r2, #16
  4230e0:	2100      	movs	r1, #0
  4230e2:	4630      	mov	r0, r6
  4230e4:	47a8      	blx	r5
  4230e6:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4230e8:	2211      	movs	r2, #17
  4230ea:	2100      	movs	r1, #0
  4230ec:	4630      	mov	r0, r6
  4230ee:	47a8      	blx	r5

    lv_coord_t left   = lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
    lv_coord_t right  = lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
    lv_coord_t top    = lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
    area->x1 += left;
  4230f0:	8823      	ldrh	r3, [r4, #0]
  4230f2:	4498      	add	r8, r3
  4230f4:	f8a4 8000 	strh.w	r8, [r4]
    area->x2 -= right;
  4230f8:	88a3      	ldrh	r3, [r4, #4]
  4230fa:	eba3 0309 	sub.w	r3, r3, r9
  4230fe:	80a3      	strh	r3, [r4, #4]
    area->y1 += top;
  423100:	8863      	ldrh	r3, [r4, #2]
  423102:	441f      	add	r7, r3
  423104:	8067      	strh	r7, [r4, #2]
    area->y2 -= bottom;
  423106:	88e3      	ldrh	r3, [r4, #6]
  423108:	1a18      	subs	r0, r3, r0
  42310a:	80e0      	strh	r0, [r4, #6]
  42310c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  423110:	00405a69 	.word	0x00405a69
  423114:	004073ed 	.word	0x004073ed

00423118 <lv_label_set_dot_tmp>:
{
  423118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42311a:	4606      	mov	r6, r0
  42311c:	460f      	mov	r7, r1
  42311e:	4615      	mov	r5, r2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423120:	4b13      	ldr	r3, [pc, #76]	; (423170 <lv_label_set_dot_tmp+0x58>)
  423122:	4798      	blx	r3
  423124:	4604      	mov	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
  423126:	4630      	mov	r0, r6
  423128:	4b12      	ldr	r3, [pc, #72]	; (423174 <lv_label_set_dot_tmp+0x5c>)
  42312a:	4798      	blx	r3
    if(len > sizeof(char *)) {
  42312c:	2d04      	cmp	r5, #4
  42312e:	d911      	bls.n	423154 <lv_label_set_dot_tmp+0x3c>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
  423130:	1c68      	adds	r0, r5, #1
  423132:	4b11      	ldr	r3, [pc, #68]	; (423178 <lv_label_set_dot_tmp+0x60>)
  423134:	4798      	blx	r3
  423136:	6060      	str	r0, [r4, #4]
        if(ext->dot.tmp_ptr == NULL) {
  423138:	b1b8      	cbz	r0, 42316a <lv_label_set_dot_tmp+0x52>
        _lv_memcpy(ext->dot.tmp_ptr, data, len);
  42313a:	462a      	mov	r2, r5
  42313c:	4639      	mov	r1, r7
  42313e:	4b0f      	ldr	r3, [pc, #60]	; (42317c <lv_label_set_dot_tmp+0x64>)
  423140:	4798      	blx	r3
        ext->dot.tmp_ptr[len] = '\0';
  423142:	6863      	ldr	r3, [r4, #4]
  423144:	2200      	movs	r2, #0
  423146:	555a      	strb	r2, [r3, r5]
        ext->dot_tmp_alloc    = true;
  423148:	7ce3      	ldrb	r3, [r4, #19]
  42314a:	f043 0301 	orr.w	r3, r3, #1
  42314e:	74e3      	strb	r3, [r4, #19]
    return true;
  423150:	2001      	movs	r0, #1
  423152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->dot_tmp_alloc = false;
  423154:	7ce3      	ldrb	r3, [r4, #19]
  423156:	f36f 0300 	bfc	r3, #0, #1
  42315a:	74e3      	strb	r3, [r4, #19]
        _lv_memcpy(ext->dot.tmp, data, len);
  42315c:	462a      	mov	r2, r5
  42315e:	4639      	mov	r1, r7
  423160:	1d20      	adds	r0, r4, #4
  423162:	4b06      	ldr	r3, [pc, #24]	; (42317c <lv_label_set_dot_tmp+0x64>)
  423164:	4798      	blx	r3
    return true;
  423166:	2001      	movs	r0, #1
  423168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return false;
  42316a:	2000      	movs	r0, #0
}
  42316c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42316e:	bf00      	nop
  423170:	00407ffd 	.word	0x00407ffd
  423174:	0042301d 	.word	0x0042301d
  423178:	004174ed 	.word	0x004174ed
  42317c:	004176fd 	.word	0x004176fd

00423180 <lv_label_set_offset_y>:
{
  423180:	b538      	push	{r3, r4, r5, lr}
  423182:	4604      	mov	r4, r0
  423184:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423186:	4b03      	ldr	r3, [pc, #12]	; (423194 <lv_label_set_offset_y+0x14>)
  423188:	4798      	blx	r3
    ext->offset.y        = y;
  42318a:	8205      	strh	r5, [r0, #16]
    lv_obj_invalidate(label);
  42318c:	4620      	mov	r0, r4
  42318e:	4b02      	ldr	r3, [pc, #8]	; (423198 <lv_label_set_offset_y+0x18>)
  423190:	4798      	blx	r3
  423192:	bd38      	pop	{r3, r4, r5, pc}
  423194:	00407ffd 	.word	0x00407ffd
  423198:	00405f01 	.word	0x00405f01

0042319c <lv_label_set_offset_x>:
{
  42319c:	b538      	push	{r3, r4, r5, lr}
  42319e:	4604      	mov	r4, r0
  4231a0:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  4231a2:	4b03      	ldr	r3, [pc, #12]	; (4231b0 <lv_label_set_offset_x+0x14>)
  4231a4:	4798      	blx	r3
    ext->offset.x        = x;
  4231a6:	81c5      	strh	r5, [r0, #14]
    lv_obj_invalidate(label);
  4231a8:	4620      	mov	r0, r4
  4231aa:	4b02      	ldr	r3, [pc, #8]	; (4231b4 <lv_label_set_offset_x+0x18>)
  4231ac:	4798      	blx	r3
  4231ae:	bd38      	pop	{r3, r4, r5, pc}
  4231b0:	00407ffd 	.word	0x00407ffd
  4231b4:	00405f01 	.word	0x00405f01

004231b8 <lv_label_set_align>:
{
  4231b8:	b538      	push	{r3, r4, r5, lr}
  4231ba:	4604      	mov	r4, r0
  4231bc:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  4231be:	4b0c      	ldr	r3, [pc, #48]	; (4231f0 <lv_label_set_align+0x38>)
  4231c0:	4798      	blx	r3
  4231c2:	b928      	cbnz	r0, 4231d0 <lv_label_set_align+0x18>
  4231c4:	4622      	mov	r2, r4
  4231c6:	2300      	movs	r3, #0
  4231c8:	480a      	ldr	r0, [pc, #40]	; (4231f4 <lv_label_set_align+0x3c>)
  4231ca:	490b      	ldr	r1, [pc, #44]	; (4231f8 <lv_label_set_align+0x40>)
  4231cc:	4788      	blx	r1
  4231ce:	e7fe      	b.n	4231ce <lv_label_set_align+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  4231d0:	4620      	mov	r0, r4
  4231d2:	4b0a      	ldr	r3, [pc, #40]	; (4231fc <lv_label_set_align+0x44>)
  4231d4:	4798      	blx	r3
    if(ext->align == align) return;
  4231d6:	7c83      	ldrb	r3, [r0, #18]
  4231d8:	f3c3 1301 	ubfx	r3, r3, #4, #2
  4231dc:	42ab      	cmp	r3, r5
  4231de:	d006      	beq.n	4231ee <lv_label_set_align+0x36>
    ext->align = align;
  4231e0:	7c83      	ldrb	r3, [r0, #18]
  4231e2:	f365 1305 	bfi	r3, r5, #4, #2
  4231e6:	7483      	strb	r3, [r0, #18]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
  4231e8:	4620      	mov	r0, r4
  4231ea:	4b05      	ldr	r3, [pc, #20]	; (423200 <lv_label_set_align+0x48>)
  4231ec:	4798      	blx	r3
  4231ee:	bd38      	pop	{r3, r4, r5, pc}
  4231f0:	00416da9 	.word	0x00416da9
  4231f4:	0042e560 	.word	0x0042e560
  4231f8:	00416db5 	.word	0x00416db5
  4231fc:	00407ffd 	.word	0x00407ffd
  423200:	00405f01 	.word	0x00405f01

00423204 <lv_label_get_text>:
{
  423204:	b510      	push	{r4, lr}
  423206:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423208:	4b06      	ldr	r3, [pc, #24]	; (423224 <lv_label_get_text+0x20>)
  42320a:	4798      	blx	r3
  42320c:	b928      	cbnz	r0, 42321a <lv_label_get_text+0x16>
  42320e:	4622      	mov	r2, r4
  423210:	2300      	movs	r3, #0
  423212:	4805      	ldr	r0, [pc, #20]	; (423228 <lv_label_get_text+0x24>)
  423214:	4905      	ldr	r1, [pc, #20]	; (42322c <lv_label_get_text+0x28>)
  423216:	4788      	blx	r1
  423218:	e7fe      	b.n	423218 <lv_label_get_text+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  42321a:	4620      	mov	r0, r4
  42321c:	4b04      	ldr	r3, [pc, #16]	; (423230 <lv_label_get_text+0x2c>)
  42321e:	4798      	blx	r3
}
  423220:	6800      	ldr	r0, [r0, #0]
  423222:	bd10      	pop	{r4, pc}
  423224:	00416da9 	.word	0x00416da9
  423228:	0042e560 	.word	0x0042e560
  42322c:	00416db5 	.word	0x00416db5
  423230:	00407ffd 	.word	0x00407ffd

00423234 <lv_label_get_long_mode>:
{
  423234:	b510      	push	{r4, lr}
  423236:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423238:	4b07      	ldr	r3, [pc, #28]	; (423258 <lv_label_get_long_mode+0x24>)
  42323a:	4798      	blx	r3
  42323c:	b928      	cbnz	r0, 42324a <lv_label_get_long_mode+0x16>
  42323e:	4622      	mov	r2, r4
  423240:	2300      	movs	r3, #0
  423242:	4806      	ldr	r0, [pc, #24]	; (42325c <lv_label_get_long_mode+0x28>)
  423244:	4906      	ldr	r1, [pc, #24]	; (423260 <lv_label_get_long_mode+0x2c>)
  423246:	4788      	blx	r1
  423248:	e7fe      	b.n	423248 <lv_label_get_long_mode+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  42324a:	4620      	mov	r0, r4
  42324c:	4b05      	ldr	r3, [pc, #20]	; (423264 <lv_label_get_long_mode+0x30>)
  42324e:	4798      	blx	r3
    return ext->long_mode;
  423250:	7c80      	ldrb	r0, [r0, #18]
}
  423252:	f000 0007 	and.w	r0, r0, #7
  423256:	bd10      	pop	{r4, pc}
  423258:	00416da9 	.word	0x00416da9
  42325c:	0042e560 	.word	0x0042e560
  423260:	00416db5 	.word	0x00416db5
  423264:	00407ffd 	.word	0x00407ffd

00423268 <lv_label_get_align>:
{
  423268:	b510      	push	{r4, lr}
  42326a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  42326c:	4b09      	ldr	r3, [pc, #36]	; (423294 <lv_label_get_align+0x2c>)
  42326e:	4798      	blx	r3
  423270:	b928      	cbnz	r0, 42327e <lv_label_get_align+0x16>
  423272:	4622      	mov	r2, r4
  423274:	2300      	movs	r3, #0
  423276:	4808      	ldr	r0, [pc, #32]	; (423298 <lv_label_get_align+0x30>)
  423278:	4908      	ldr	r1, [pc, #32]	; (42329c <lv_label_get_align+0x34>)
  42327a:	4788      	blx	r1
  42327c:	e7fe      	b.n	42327c <lv_label_get_align+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  42327e:	4620      	mov	r0, r4
  423280:	4b07      	ldr	r3, [pc, #28]	; (4232a0 <lv_label_get_align+0x38>)
  423282:	4798      	blx	r3
    lv_label_align_t align = ext->align;
  423284:	7c80      	ldrb	r0, [r0, #18]
  423286:	f3c0 1001 	ubfx	r0, r0, #4, #2
    if(align == LV_LABEL_ALIGN_AUTO) {
  42328a:	2803      	cmp	r0, #3
  42328c:	d000      	beq.n	423290 <lv_label_get_align+0x28>
}
  42328e:	bd10      	pop	{r4, pc}
        align = LV_LABEL_ALIGN_LEFT;
  423290:	2000      	movs	r0, #0
  423292:	e7fc      	b.n	42328e <lv_label_get_align+0x26>
  423294:	00416da9 	.word	0x00416da9
  423298:	0042e560 	.word	0x0042e560
  42329c:	00416db5 	.word	0x00416db5
  4232a0:	00407ffd 	.word	0x00407ffd

004232a4 <lv_label_get_recolor>:
{
  4232a4:	b510      	push	{r4, lr}
  4232a6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  4232a8:	4b07      	ldr	r3, [pc, #28]	; (4232c8 <lv_label_get_recolor+0x24>)
  4232aa:	4798      	blx	r3
  4232ac:	b928      	cbnz	r0, 4232ba <lv_label_get_recolor+0x16>
  4232ae:	4622      	mov	r2, r4
  4232b0:	2300      	movs	r3, #0
  4232b2:	4806      	ldr	r0, [pc, #24]	; (4232cc <lv_label_get_recolor+0x28>)
  4232b4:	4906      	ldr	r1, [pc, #24]	; (4232d0 <lv_label_get_recolor+0x2c>)
  4232b6:	4788      	blx	r1
  4232b8:	e7fe      	b.n	4232b8 <lv_label_get_recolor+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  4232ba:	4620      	mov	r0, r4
  4232bc:	4b05      	ldr	r3, [pc, #20]	; (4232d4 <lv_label_get_recolor+0x30>)
  4232be:	4798      	blx	r3
    return ext->recolor == 0 ? false : true;
  4232c0:	7c80      	ldrb	r0, [r0, #18]
}
  4232c2:	f3c0 1080 	ubfx	r0, r0, #6, #1
  4232c6:	bd10      	pop	{r4, pc}
  4232c8:	00416da9 	.word	0x00416da9
  4232cc:	0042e560 	.word	0x0042e560
  4232d0:	00416db5 	.word	0x00416db5
  4232d4:	00407ffd 	.word	0x00407ffd

004232d8 <lv_label_get_letter_on>:
{
  4232d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4232dc:	b08f      	sub	sp, #60	; 0x3c
  4232de:	4604      	mov	r4, r0
  4232e0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  4232e2:	4b91      	ldr	r3, [pc, #580]	; (423528 <lv_label_get_letter_on+0x250>)
  4232e4:	4798      	blx	r3
  4232e6:	b928      	cbnz	r0, 4232f4 <lv_label_get_letter_on+0x1c>
  4232e8:	4622      	mov	r2, r4
  4232ea:	2300      	movs	r3, #0
  4232ec:	488f      	ldr	r0, [pc, #572]	; (42352c <lv_label_get_letter_on+0x254>)
  4232ee:	4990      	ldr	r1, [pc, #576]	; (423530 <lv_label_get_letter_on+0x258>)
  4232f0:	4788      	blx	r1
  4232f2:	e7fe      	b.n	4232f2 <lv_label_get_letter_on+0x1a>
    LV_ASSERT_NULL(pos_in);
  4232f4:	4628      	mov	r0, r5
  4232f6:	4b8c      	ldr	r3, [pc, #560]	; (423528 <lv_label_get_letter_on+0x250>)
  4232f8:	4798      	blx	r3
  4232fa:	b928      	cbnz	r0, 423308 <lv_label_get_letter_on+0x30>
  4232fc:	462a      	mov	r2, r5
  4232fe:	2300      	movs	r3, #0
  423300:	488a      	ldr	r0, [pc, #552]	; (42352c <lv_label_get_letter_on+0x254>)
  423302:	498b      	ldr	r1, [pc, #556]	; (423530 <lv_label_get_letter_on+0x258>)
  423304:	4788      	blx	r1
  423306:	e7fe      	b.n	423306 <lv_label_get_letter_on+0x2e>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
  423308:	882f      	ldrh	r7, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  42330a:	2212      	movs	r2, #18
  42330c:	2100      	movs	r1, #0
  42330e:	4620      	mov	r0, r4
  423310:	4e88      	ldr	r6, [pc, #544]	; (423534 <lv_label_get_letter_on+0x25c>)
  423312:	47b0      	blx	r6
  423314:	b280      	uxth	r0, r0
  423316:	1a3f      	subs	r7, r7, r0
  423318:	b23b      	sxth	r3, r7
  42331a:	9304      	str	r3, [sp, #16]
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
  42331c:	886d      	ldrh	r5, [r5, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  42331e:	2210      	movs	r2, #16
  423320:	2100      	movs	r1, #0
  423322:	4620      	mov	r0, r4
  423324:	47b0      	blx	r6
  423326:	b280      	uxth	r0, r0
  423328:	1a2d      	subs	r5, r5, r0
  42332a:	b22b      	sxth	r3, r5
  42332c:	9305      	str	r3, [sp, #20]
    get_txt_coords(label, &txt_coords);
  42332e:	a90c      	add	r1, sp, #48	; 0x30
  423330:	4620      	mov	r0, r4
  423332:	4b81      	ldr	r3, [pc, #516]	; (423538 <lv_label_get_letter_on+0x260>)
  423334:	4798      	blx	r3
    const char * txt         = lv_label_get_text(label);
  423336:	4620      	mov	r0, r4
  423338:	4b80      	ldr	r3, [pc, #512]	; (42353c <lv_label_get_letter_on+0x264>)
  42333a:	4798      	blx	r3
  42333c:	4680      	mov	r8, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
  42333e:	4620      	mov	r0, r4
  423340:	4b7f      	ldr	r3, [pc, #508]	; (423540 <lv_label_get_letter_on+0x268>)
  423342:	4798      	blx	r3
  423344:	4605      	mov	r5, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  423346:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
  42334a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  42334e:	1a9b      	subs	r3, r3, r2
  423350:	b29b      	uxth	r3, r3
  423352:	3301      	adds	r3, #1
  423354:	b21b      	sxth	r3, r3
  423356:	9307      	str	r3, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  423358:	f248 028e 	movw	r2, #32910	; 0x808e
  42335c:	2100      	movs	r1, #0
  42335e:	4620      	mov	r0, r4
  423360:	4b78      	ldr	r3, [pc, #480]	; (423544 <lv_label_get_letter_on+0x26c>)
  423362:	4798      	blx	r3
  423364:	4607      	mov	r7, r0
  423366:	9002      	str	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  423368:	f248 0281 	movw	r2, #32897	; 0x8081
  42336c:	2100      	movs	r1, #0
  42336e:	4620      	mov	r0, r4
  423370:	47b0      	blx	r6
  423372:	9006      	str	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  423374:	f248 0280 	movw	r2, #32896	; 0x8080
  423378:	2100      	movs	r1, #0
  42337a:	4620      	mov	r0, r4
  42337c:	47b0      	blx	r6
  42337e:	9003      	str	r0, [sp, #12]
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  423380:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  423384:	7cab      	ldrb	r3, [r5, #18]
  423386:	f013 0f40 	tst.w	r3, #64	; 0x40
  42338a:	d133      	bne.n	4233f4 <lv_label_get_letter_on+0x11c>
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
  42338c:	2500      	movs	r5, #0
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  42338e:	f013 0f80 	tst.w	r3, #128	; 0x80
  423392:	d001      	beq.n	423398 <lv_label_get_letter_on+0xc0>
  423394:	f045 0502 	orr.w	r5, r5, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
  423398:	f013 0f07 	tst.w	r3, #7
  42339c:	d101      	bne.n	4233a2 <lv_label_get_letter_on+0xca>
  42339e:	f045 0510 	orr.w	r5, r5, #16
    lv_label_align_t align = lv_label_get_align(label);
  4233a2:	4620      	mov	r0, r4
  4233a4:	4b68      	ldr	r3, [pc, #416]	; (423548 <lv_label_get_letter_on+0x270>)
  4233a6:	4798      	blx	r3
  4233a8:	4681      	mov	r9, r0
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
  4233aa:	2801      	cmp	r0, #1
  4233ac:	d101      	bne.n	4233b2 <lv_label_get_letter_on+0xda>
  4233ae:	f045 0504 	orr.w	r5, r5, #4
    if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
  4233b2:	f1b9 0f02 	cmp.w	r9, #2
  4233b6:	d101      	bne.n	4233bc <lv_label_get_letter_on+0xe4>
  4233b8:	f045 0508 	orr.w	r5, r5, #8
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  4233bc:	2400      	movs	r4, #0
  4233be:	4626      	mov	r6, r4
    while(txt[line_start] != '\0') {
  4233c0:	eb08 0b06 	add.w	fp, r8, r6
  4233c4:	f818 3006 	ldrb.w	r3, [r8, r6]
  4233c8:	2b00      	cmp	r3, #0
  4233ca:	d055      	beq.n	423478 <lv_label_get_letter_on+0x1a0>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
  4233cc:	9500      	str	r5, [sp, #0]
  4233ce:	9b07      	ldr	r3, [sp, #28]
  4233d0:	9a03      	ldr	r2, [sp, #12]
  4233d2:	9902      	ldr	r1, [sp, #8]
  4233d4:	4658      	mov	r0, fp
  4233d6:	4f5d      	ldr	r7, [pc, #372]	; (42354c <lv_label_get_letter_on+0x274>)
  4233d8:	47b8      	blx	r7
  4233da:	4430      	add	r0, r6
        if(pos.y <= y + letter_height) {
  4233dc:	eb04 030a 	add.w	r3, r4, sl
  4233e0:	9a05      	ldr	r2, [sp, #20]
  4233e2:	429a      	cmp	r2, r3
  4233e4:	dd08      	ble.n	4233f8 <lv_label_get_letter_on+0x120>
        y += letter_height + line_space;
  4233e6:	9b06      	ldr	r3, [sp, #24]
  4233e8:	4453      	add	r3, sl
  4233ea:	fa14 f383 	uxtah	r3, r4, r3
  4233ee:	b21c      	sxth	r4, r3
        line_start = new_line_start;
  4233f0:	4606      	mov	r6, r0
  4233f2:	e7e5      	b.n	4233c0 <lv_label_get_letter_on+0xe8>
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  4233f4:	2501      	movs	r5, #1
  4233f6:	e7ca      	b.n	42338e <lv_label_get_letter_on+0xb6>
  4233f8:	4607      	mov	r7, r0
            uint32_t tmp = new_line_start;
  4233fa:	a90e      	add	r1, sp, #56	; 0x38
  4233fc:	f841 0d14 	str.w	r0, [r1, #-20]!
            letter = _lv_txt_encoded_prev(txt, &tmp);
  423400:	4b53      	ldr	r3, [pc, #332]	; (423550 <lv_label_get_letter_on+0x278>)
  423402:	681b      	ldr	r3, [r3, #0]
  423404:	4640      	mov	r0, r8
  423406:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
  423408:	280a      	cmp	r0, #10
  42340a:	d003      	beq.n	423414 <lv_label_get_letter_on+0x13c>
  42340c:	f818 3007 	ldrb.w	r3, [r8, r7]
  423410:	b903      	cbnz	r3, 423414 <lv_label_get_letter_on+0x13c>
  423412:	3701      	adds	r7, #1
    if(align == LV_LABEL_ALIGN_CENTER) {
  423414:	f1b9 0f01 	cmp.w	r9, #1
  423418:	d130      	bne.n	42347c <lv_label_get_letter_on+0x1a4>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
  42341a:	9500      	str	r5, [sp, #0]
  42341c:	9b03      	ldr	r3, [sp, #12]
  42341e:	9a02      	ldr	r2, [sp, #8]
  423420:	1bb9      	subs	r1, r7, r6
  423422:	4658      	mov	r0, fp
  423424:	4c4b      	ldr	r4, [pc, #300]	; (423554 <lv_label_get_letter_on+0x27c>)
  423426:	47a0      	blx	r4
  423428:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
  42342c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  423430:	1a9b      	subs	r3, r3, r2
  423432:	b29b      	uxth	r3, r3
  423434:	3301      	adds	r3, #1
  423436:	b21b      	sxth	r3, r3
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
  423438:	2b00      	cmp	r3, #0
  42343a:	da00      	bge.n	42343e <lv_label_get_letter_on+0x166>
  42343c:	3301      	adds	r3, #1
  42343e:	105c      	asrs	r4, r3, #1
  423440:	4603      	mov	r3, r0
  423442:	2800      	cmp	r0, #0
  423444:	da00      	bge.n	423448 <lv_label_get_letter_on+0x170>
  423446:	1c43      	adds	r3, r0, #1
  423448:	f343 034f 	sbfx	r3, r3, #1, #16
  42344c:	1ae4      	subs	r4, r4, r3
  42344e:	b224      	sxth	r4, r4
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  423450:	2300      	movs	r3, #0
  423452:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint32_t i = 0;
  423456:	930a      	str	r3, [sp, #40]	; 0x28
    if(new_line_start > 0) {
  423458:	2f00      	cmp	r7, #0
  42345a:	d162      	bne.n	423522 <lv_label_get_letter_on+0x24a>
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
  42345c:	4c3e      	ldr	r4, [pc, #248]	; (423558 <lv_label_get_letter_on+0x280>)
  42345e:	6823      	ldr	r3, [r4, #0]
  423460:	990a      	ldr	r1, [sp, #40]	; 0x28
  423462:	4658      	mov	r0, fp
  423464:	4798      	blx	r3
  423466:	4605      	mov	r5, r0
    return logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
  423468:	6823      	ldr	r3, [r4, #0]
  42346a:	4631      	mov	r1, r6
  42346c:	4640      	mov	r0, r8
  42346e:	4798      	blx	r3
}
  423470:	4428      	add	r0, r5
  423472:	b00f      	add	sp, #60	; 0x3c
  423474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  423478:	4637      	mov	r7, r6
  42347a:	e7cb      	b.n	423414 <lv_label_get_letter_on+0x13c>
    else if(align == LV_LABEL_ALIGN_RIGHT) {
  42347c:	f1b9 0f02 	cmp.w	r9, #2
  423480:	d111      	bne.n	4234a6 <lv_label_get_letter_on+0x1ce>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
  423482:	9500      	str	r5, [sp, #0]
  423484:	9b03      	ldr	r3, [sp, #12]
  423486:	9a02      	ldr	r2, [sp, #8]
  423488:	1bb9      	subs	r1, r7, r6
  42348a:	4658      	mov	r0, fp
  42348c:	4c31      	ldr	r4, [pc, #196]	; (423554 <lv_label_get_letter_on+0x27c>)
  42348e:	47a0      	blx	r4
  423490:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
  423494:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  423498:	1a9b      	subs	r3, r3, r2
  42349a:	b29b      	uxth	r3, r3
  42349c:	3301      	adds	r3, #1
  42349e:	b29b      	uxth	r3, r3
        x += lv_area_get_width(&txt_coords) - line_w;
  4234a0:	1a1b      	subs	r3, r3, r0
  4234a2:	b21c      	sxth	r4, r3
  4234a4:	e7d4      	b.n	423450 <lv_label_get_letter_on+0x178>
    lv_coord_t x = 0;
  4234a6:	2400      	movs	r4, #0
  4234a8:	e7d2      	b.n	423450 <lv_label_get_letter_on+0x178>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
  4234aa:	4652      	mov	r2, sl
  4234ac:	9905      	ldr	r1, [sp, #20]
  4234ae:	9802      	ldr	r0, [sp, #8]
  4234b0:	4b2a      	ldr	r3, [pc, #168]	; (42355c <lv_label_get_letter_on+0x284>)
  4234b2:	4798      	blx	r3
            if(pos.x < x + gw || i + line_start == new_line_start || txt[i_act + line_start] == '\0') {
  4234b4:	fa04 f380 	sxtah	r3, r4, r0
  4234b8:	9a04      	ldr	r2, [sp, #16]
  4234ba:	429a      	cmp	r2, r3
  4234bc:	db2e      	blt.n	42351c <lv_label_get_letter_on+0x244>
  4234be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4234c0:	18f2      	adds	r2, r6, r3
  4234c2:	4297      	cmp	r7, r2
  4234c4:	d02a      	beq.n	42351c <lv_label_get_letter_on+0x244>
  4234c6:	eb06 0209 	add.w	r2, r6, r9
  4234ca:	f818 2002 	ldrb.w	r2, [r8, r2]
  4234ce:	b32a      	cbz	r2, 42351c <lv_label_get_letter_on+0x244>
            x += gw;
  4234d0:	4404      	add	r4, r0
            x += letter_space;
  4234d2:	9a03      	ldr	r2, [sp, #12]
  4234d4:	fa12 f484 	uxtah	r4, r2, r4
  4234d8:	b224      	sxth	r4, r4
            i_act = i;
  4234da:	4699      	mov	r9, r3
        while(i + line_start < new_line_start) {
  4234dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4234de:	4433      	add	r3, r6
  4234e0:	429f      	cmp	r7, r3
  4234e2:	d9bb      	bls.n	42345c <lv_label_get_letter_on+0x184>
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
  4234e4:	f8df a07c 	ldr.w	sl, [pc, #124]	; 423564 <lv_label_get_letter_on+0x28c>
  4234e8:	f8da 3000 	ldr.w	r3, [sl]
  4234ec:	a90a      	add	r1, sp, #40	; 0x28
  4234ee:	4658      	mov	r0, fp
  4234f0:	4798      	blx	r3
  4234f2:	9005      	str	r0, [sp, #20]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
  4234f4:	f8da 3000 	ldr.w	r3, [sl]
  4234f8:	2100      	movs	r1, #0
  4234fa:	980a      	ldr	r0, [sp, #40]	; 0x28
  4234fc:	4458      	add	r0, fp
  4234fe:	4798      	blx	r3
  423500:	4682      	mov	sl, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  423502:	f015 0f01 	tst.w	r5, #1
  423506:	d0d0      	beq.n	4234aa <lv_label_get_letter_on+0x1d2>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
  423508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  42350a:	f81b 1003 	ldrb.w	r1, [fp, r3]
  42350e:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
  423512:	4b13      	ldr	r3, [pc, #76]	; (423560 <lv_label_get_letter_on+0x288>)
  423514:	4798      	blx	r3
  423516:	2800      	cmp	r0, #0
  423518:	d1e0      	bne.n	4234dc <lv_label_get_letter_on+0x204>
  42351a:	e7c6      	b.n	4234aa <lv_label_get_letter_on+0x1d2>
                i = i_act;
  42351c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
                break;
  423520:	e79c      	b.n	42345c <lv_label_get_letter_on+0x184>
  423522:	f04f 0900 	mov.w	r9, #0
  423526:	e7d9      	b.n	4234dc <lv_label_get_letter_on+0x204>
  423528:	00416da9 	.word	0x00416da9
  42352c:	0042e560 	.word	0x0042e560
  423530:	00416db5 	.word	0x00416db5
  423534:	004073ed 	.word	0x004073ed
  423538:	004230bd 	.word	0x004230bd
  42353c:	00423205 	.word	0x00423205
  423540:	00407ffd 	.word	0x00407ffd
  423544:	004072e5 	.word	0x004072e5
  423548:	00423269 	.word	0x00423269
  42354c:	00418c29 	.word	0x00418c29
  423550:	204000bc 	.word	0x204000bc
  423554:	00418d09 	.word	0x00418d09
  423558:	204000b4 	.word	0x204000b4
  42355c:	00414a6d 	.word	0x00414a6d
  423560:	00418a75 	.word	0x00418a75
  423564:	204000b8 	.word	0x204000b8

00423568 <lv_label_get_text_sel_start>:
{
  423568:	b510      	push	{r4, lr}
  42356a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  42356c:	4b05      	ldr	r3, [pc, #20]	; (423584 <lv_label_get_text_sel_start+0x1c>)
  42356e:	4798      	blx	r3
  423570:	b110      	cbz	r0, 423578 <lv_label_get_text_sel_start+0x10>
}
  423572:	f64f 70ff 	movw	r0, #65535	; 0xffff
  423576:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423578:	4622      	mov	r2, r4
  42357a:	2300      	movs	r3, #0
  42357c:	4802      	ldr	r0, [pc, #8]	; (423588 <lv_label_get_text_sel_start+0x20>)
  42357e:	4903      	ldr	r1, [pc, #12]	; (42358c <lv_label_get_text_sel_start+0x24>)
  423580:	4788      	blx	r1
  423582:	e7fe      	b.n	423582 <lv_label_get_text_sel_start+0x1a>
  423584:	00416da9 	.word	0x00416da9
  423588:	0042e560 	.word	0x0042e560
  42358c:	00416db5 	.word	0x00416db5

00423590 <lv_label_get_text_sel_end>:
{
  423590:	b510      	push	{r4, lr}
  423592:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423594:	4b05      	ldr	r3, [pc, #20]	; (4235ac <lv_label_get_text_sel_end+0x1c>)
  423596:	4798      	blx	r3
  423598:	b110      	cbz	r0, 4235a0 <lv_label_get_text_sel_end+0x10>
}
  42359a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  42359e:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  4235a0:	4622      	mov	r2, r4
  4235a2:	2300      	movs	r3, #0
  4235a4:	4802      	ldr	r0, [pc, #8]	; (4235b0 <lv_label_get_text_sel_end+0x20>)
  4235a6:	4903      	ldr	r1, [pc, #12]	; (4235b4 <lv_label_get_text_sel_end+0x24>)
  4235a8:	4788      	blx	r1
  4235aa:	e7fe      	b.n	4235aa <lv_label_get_text_sel_end+0x1a>
  4235ac:	00416da9 	.word	0x00416da9
  4235b0:	0042e560 	.word	0x0042e560
  4235b4:	00416db5 	.word	0x00416db5

004235b8 <lv_label_design>:
    if(mode == LV_DESIGN_COVER_CHK)
  4235b8:	2a02      	cmp	r2, #2
  4235ba:	f000 812a 	beq.w	423812 <lv_label_design+0x25a>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  4235be:	b10a      	cbz	r2, 4235c4 <lv_label_design+0xc>
    return LV_DESIGN_RES_OK;
  4235c0:	2000      	movs	r0, #0
  4235c2:	4770      	bx	lr
{
  4235c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4235c8:	b0ab      	sub	sp, #172	; 0xac
  4235ca:	460f      	mov	r7, r1
  4235cc:	4606      	mov	r6, r0
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  4235ce:	4b92      	ldr	r3, [pc, #584]	; (423818 <lv_label_design+0x260>)
  4235d0:	4798      	blx	r3
  4235d2:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  4235d4:	2204      	movs	r2, #4
  4235d6:	2100      	movs	r1, #0
  4235d8:	4630      	mov	r0, r6
  4235da:	4c90      	ldr	r4, [pc, #576]	; (42381c <lv_label_design+0x264>)
  4235dc:	47a0      	blx	r4
  4235de:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  4235e0:	2205      	movs	r2, #5
  4235e2:	2100      	movs	r1, #0
  4235e4:	4630      	mov	r0, r6
  4235e6:	47a0      	blx	r4
        lv_area_copy(&bg_coords, &label->coords);
  4235e8:	f106 0410 	add.w	r4, r6, #16
    uint8_t * d8 = (uint8_t *)dst;
  4235ec:	aa06      	add	r2, sp, #24
  4235ee:	2308      	movs	r3, #8
  4235f0:	e004      	b.n	4235fc <lv_label_design+0x44>
        *d8 = *s8;
  4235f2:	f814 5b01 	ldrb.w	r5, [r4], #1
  4235f6:	f802 5b01 	strb.w	r5, [r2], #1
        len--;
  4235fa:	3b01      	subs	r3, #1
    while(len) {
  4235fc:	2b00      	cmp	r3, #0
  4235fe:	d1f8      	bne.n	4235f2 <lv_label_design+0x3a>
        bg_coords.x1 -= w;
  423600:	fa1f f989 	uxth.w	r9, r9
  423604:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  423608:	eba3 0309 	sub.w	r3, r3, r9
  42360c:	f8ad 3018 	strh.w	r3, [sp, #24]
        bg_coords.x2 += w;
  423610:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  423614:	4499      	add	r9, r3
  423616:	f8ad 901c 	strh.w	r9, [sp, #28]
        bg_coords.y1 -= h;
  42361a:	b280      	uxth	r0, r0
  42361c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  423620:	1a1b      	subs	r3, r3, r0
  423622:	f8ad 301a 	strh.w	r3, [sp, #26]
        bg_coords.y2 += h;
  423626:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  42362a:	4418      	add	r0, r3
  42362c:	f8ad 001e 	strh.w	r0, [sp, #30]
        lv_draw_rect_dsc_init(&draw_rect_dsc);
  423630:	a815      	add	r0, sp, #84	; 0x54
  423632:	4b7b      	ldr	r3, [pc, #492]	; (423820 <lv_label_design+0x268>)
  423634:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(label, LV_LABEL_PART_MAIN, &draw_rect_dsc);
  423636:	aa15      	add	r2, sp, #84	; 0x54
  423638:	2100      	movs	r1, #0
  42363a:	4630      	mov	r0, r6
  42363c:	4b79      	ldr	r3, [pc, #484]	; (423824 <lv_label_design+0x26c>)
  42363e:	4798      	blx	r3
        lv_draw_rect(&bg_coords, clip_area, &draw_rect_dsc);
  423640:	aa15      	add	r2, sp, #84	; 0x54
  423642:	4639      	mov	r1, r7
  423644:	a806      	add	r0, sp, #24
  423646:	4b78      	ldr	r3, [pc, #480]	; (423828 <lv_label_design+0x270>)
  423648:	4798      	blx	r3
        get_txt_coords(label, &txt_coords);
  42364a:	a908      	add	r1, sp, #32
  42364c:	4630      	mov	r0, r6
  42364e:	4b77      	ldr	r3, [pc, #476]	; (42382c <lv_label_design+0x274>)
  423650:	4798      	blx	r3
        bool is_common = _lv_area_intersect(&txt_clip, clip_area, &txt_coords);
  423652:	aa08      	add	r2, sp, #32
  423654:	4639      	mov	r1, r7
  423656:	a80a      	add	r0, sp, #40	; 0x28
  423658:	4b75      	ldr	r3, [pc, #468]	; (423830 <lv_label_design+0x278>)
  42365a:	4798      	blx	r3
        if(!is_common) return LV_DESIGN_RES_OK;
  42365c:	b910      	cbnz	r0, 423664 <lv_label_design+0xac>
}
  42365e:	b02b      	add	sp, #172	; 0xac
  423660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lv_label_align_t align = lv_label_get_align(label);
  423664:	4630      	mov	r0, r6
  423666:	4b73      	ldr	r3, [pc, #460]	; (423834 <lv_label_design+0x27c>)
  423668:	4798      	blx	r3
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  42366a:	f898 3012 	ldrb.w	r3, [r8, #18]
  42366e:	f013 0f40 	tst.w	r3, #64	; 0x40
  423672:	d13f      	bne.n	4236f4 <lv_label_design+0x13c>
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
  423674:	2400      	movs	r4, #0
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  423676:	f013 0f80 	tst.w	r3, #128	; 0x80
  42367a:	d13d      	bne.n	4236f8 <lv_label_design+0x140>
        if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
  42367c:	f013 0f07 	tst.w	r3, #7
  423680:	d101      	bne.n	423686 <lv_label_design+0xce>
  423682:	f044 0410 	orr.w	r4, r4, #16
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
  423686:	2801      	cmp	r0, #1
  423688:	d039      	beq.n	4236fe <lv_label_design+0x146>
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
  42368a:	2802      	cmp	r0, #2
  42368c:	d03a      	beq.n	423704 <lv_label_design+0x14c>
        lv_draw_label_dsc_init(&label_draw_dsc);
  42368e:	a80c      	add	r0, sp, #48	; 0x30
  423690:	4b69      	ldr	r3, [pc, #420]	; (423838 <lv_label_design+0x280>)
  423692:	4798      	blx	r3
        label_draw_dsc.sel_start = lv_label_get_text_sel_start(label);
  423694:	4630      	mov	r0, r6
  423696:	4b69      	ldr	r3, [pc, #420]	; (42383c <lv_label_design+0x284>)
  423698:	4798      	blx	r3
  42369a:	9011      	str	r0, [sp, #68]	; 0x44
        label_draw_dsc.sel_end = lv_label_get_text_sel_end(label);
  42369c:	4630      	mov	r0, r6
  42369e:	4b68      	ldr	r3, [pc, #416]	; (423840 <lv_label_design+0x288>)
  4236a0:	4798      	blx	r3
  4236a2:	9012      	str	r0, [sp, #72]	; 0x48
        label_draw_dsc.ofs_x = ext->offset.x;
  4236a4:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
  4236a8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        label_draw_dsc.ofs_y = ext->offset.y;
  4236ac:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
  4236b0:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        label_draw_dsc.flag = flag;
  4236b4:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
  4236b8:	aa0c      	add	r2, sp, #48	; 0x30
  4236ba:	2100      	movs	r1, #0
  4236bc:	4630      	mov	r0, r6
  4236be:	4b61      	ldr	r3, [pc, #388]	; (423844 <lv_label_design+0x28c>)
  4236c0:	4798      	blx	r3
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
  4236c2:	f898 2012 	ldrb.w	r2, [r8, #18]
  4236c6:	f002 0307 	and.w	r3, r2, #7
  4236ca:	3b03      	subs	r3, #3
  4236cc:	b2db      	uxtb	r3, r3
  4236ce:	2b01      	cmp	r3, #1
  4236d0:	d91b      	bls.n	42370a <lv_label_design+0x152>
        lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
  4236d2:	f8d8 3000 	ldr.w	r3, [r8]
  4236d6:	2200      	movs	r2, #0
  4236d8:	9200      	str	r2, [sp, #0]
  4236da:	aa0c      	add	r2, sp, #48	; 0x30
  4236dc:	a90a      	add	r1, sp, #40	; 0x28
  4236de:	a808      	add	r0, sp, #32
  4236e0:	4d59      	ldr	r5, [pc, #356]	; (423848 <lv_label_design+0x290>)
  4236e2:	47a8      	blx	r5
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
  4236e4:	f898 3012 	ldrb.w	r3, [r8, #18]
  4236e8:	f003 0307 	and.w	r3, r3, #7
  4236ec:	2b04      	cmp	r3, #4
  4236ee:	d034      	beq.n	42375a <lv_label_design+0x1a2>
    return LV_DESIGN_RES_OK;
  4236f0:	2000      	movs	r0, #0
  4236f2:	e7b4      	b.n	42365e <lv_label_design+0xa6>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  4236f4:	2401      	movs	r4, #1
  4236f6:	e7be      	b.n	423676 <lv_label_design+0xbe>
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  4236f8:	f044 0402 	orr.w	r4, r4, #2
  4236fc:	e7be      	b.n	42367c <lv_label_design+0xc4>
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
  4236fe:	f044 0404 	orr.w	r4, r4, #4
  423702:	e7c2      	b.n	42368a <lv_label_design+0xd2>
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
  423704:	f044 0408 	orr.w	r4, r4, #8
  423708:	e7c1      	b.n	42368e <lv_label_design+0xd6>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
  42370a:	f002 0230 	and.w	r2, r2, #48	; 0x30
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
  42370e:	2a20      	cmp	r2, #32
  423710:	bf18      	it	ne
  423712:	2a10      	cmpne	r2, #16
  423714:	d1dd      	bne.n	4236d2 <lv_label_design+0x11a>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
  423716:	f8d8 1000 	ldr.w	r1, [r8]
  42371a:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
  42371e:	9402      	str	r4, [sp, #8]
  423720:	f647 4218 	movw	r2, #31768	; 0x7c18
  423724:	9201      	str	r2, [sp, #4]
  423726:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
  42372a:	9200      	str	r2, [sp, #0]
  42372c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  42372e:	a805      	add	r0, sp, #20
  423730:	4d46      	ldr	r5, [pc, #280]	; (42384c <lv_label_design+0x294>)
  423732:	47a8      	blx	r5
            if(size.x > lv_area_get_width(&txt_coords)) {
  423734:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
  423738:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  42373c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
  423740:	1a5b      	subs	r3, r3, r1
  423742:	b29b      	uxth	r3, r3
  423744:	3301      	adds	r3, #1
  423746:	b21b      	sxth	r3, r3
  423748:	429a      	cmp	r2, r3
  42374a:	ddc2      	ble.n	4236d2 <lv_label_design+0x11a>
                label_draw_dsc.flag &= ~LV_TXT_FLAG_RIGHT;
  42374c:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
                label_draw_dsc.flag &= ~LV_TXT_FLAG_CENTER;
  423750:	f003 03f3 	and.w	r3, r3, #243	; 0xf3
  423754:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  423758:	e7bb      	b.n	4236d2 <lv_label_design+0x11a>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
  42375a:	f8d8 1000 	ldr.w	r1, [r8]
  42375e:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
  423762:	9402      	str	r4, [sp, #8]
  423764:	f647 4218 	movw	r2, #31768	; 0x7c18
  423768:	9201      	str	r2, [sp, #4]
  42376a:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
  42376e:	9200      	str	r2, [sp, #0]
  423770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  423772:	a805      	add	r0, sp, #20
  423774:	4c35      	ldr	r4, [pc, #212]	; (42384c <lv_label_design+0x294>)
  423776:	47a0      	blx	r4
            if(size.x > lv_area_get_width(&txt_coords)) {
  423778:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
  42377c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  423780:	f8bd 1020 	ldrh.w	r1, [sp, #32]
  423784:	1a5b      	subs	r3, r3, r1
  423786:	b29b      	uxth	r3, r3
  423788:	3301      	adds	r3, #1
  42378a:	b21b      	sxth	r3, r3
  42378c:	429a      	cmp	r2, r3
  42378e:	dc23      	bgt.n	4237d8 <lv_label_design+0x220>
            if(size.y > lv_area_get_height(&txt_coords)) {
  423790:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  423794:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
  423798:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  42379c:	1a5b      	subs	r3, r3, r1
  42379e:	b29b      	uxth	r3, r3
  4237a0:	3301      	adds	r3, #1
  4237a2:	b21b      	sxth	r3, r3
  4237a4:	429a      	cmp	r2, r3
  4237a6:	dda3      	ble.n	4236f0 <lv_label_design+0x138>
                label_draw_dsc.ofs_x = ext->offset.x;
  4237a8:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
  4237ac:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
  4237b0:	f8b8 3010 	ldrh.w	r3, [r8, #16]
  4237b4:	fa13 f382 	uxtah	r3, r3, r2
  4237b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4237ba:	8912      	ldrh	r2, [r2, #8]
  4237bc:	fa12 f383 	uxtah	r3, r2, r3
  4237c0:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
  4237c4:	f8d8 3000 	ldr.w	r3, [r8]
  4237c8:	2200      	movs	r2, #0
  4237ca:	9200      	str	r2, [sp, #0]
  4237cc:	aa0c      	add	r2, sp, #48	; 0x30
  4237ce:	a90a      	add	r1, sp, #40	; 0x28
  4237d0:	a808      	add	r0, sp, #32
  4237d2:	4c1d      	ldr	r4, [pc, #116]	; (423848 <lv_label_design+0x290>)
  4237d4:	47a0      	blx	r4
  4237d6:	e78b      	b.n	4236f0 <lv_label_design+0x138>
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
  4237d8:	f8b8 400e 	ldrh.w	r4, [r8, #14]
  4237dc:	fa14 f282 	uxtah	r2, r4, r2
  4237e0:	b294      	uxth	r4, r2
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
  4237e2:	2220      	movs	r2, #32
  4237e4:	4611      	mov	r1, r2
  4237e6:	980e      	ldr	r0, [sp, #56]	; 0x38
  4237e8:	4b19      	ldr	r3, [pc, #100]	; (423850 <lv_label_design+0x298>)
  4237ea:	4798      	blx	r3
  4237ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
  4237f0:	fa14 f480 	uxtah	r4, r4, r0
  4237f4:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
                label_draw_dsc.ofs_y = ext->offset.y;
  4237f8:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
  4237fc:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
  423800:	f8d8 3000 	ldr.w	r3, [r8]
  423804:	2200      	movs	r2, #0
  423806:	9200      	str	r2, [sp, #0]
  423808:	aa0c      	add	r2, sp, #48	; 0x30
  42380a:	a90a      	add	r1, sp, #40	; 0x28
  42380c:	a808      	add	r0, sp, #32
  42380e:	47a8      	blx	r5
  423810:	e7be      	b.n	423790 <lv_label_design+0x1d8>
        return LV_DESIGN_RES_NOT_COVER;
  423812:	2002      	movs	r0, #2
  423814:	4770      	bx	lr
  423816:	bf00      	nop
  423818:	00407ffd 	.word	0x00407ffd
  42381c:	004073ed 	.word	0x004073ed
  423820:	0041338d 	.word	0x0041338d
  423824:	004082a5 	.word	0x004082a5
  423828:	004133d9 	.word	0x004133d9
  42382c:	004230bd 	.word	0x004230bd
  423830:	004164e3 	.word	0x004164e3
  423834:	00423269 	.word	0x00423269
  423838:	0040e919 	.word	0x0040e919
  42383c:	00423569 	.word	0x00423569
  423840:	00423591 	.word	0x00423591
  423844:	004088d5 	.word	0x004088d5
  423848:	0040e961 	.word	0x0040e961
  42384c:	00418db5 	.word	0x00418db5
  423850:	00414a6d 	.word	0x00414a6d

00423854 <lv_label_get_style>:
    switch(type) {
  423854:	b909      	cbnz	r1, 42385a <lv_label_get_style+0x6>
            style_dsc_p = &label->style_list;
  423856:	3028      	adds	r0, #40	; 0x28
            break;
  423858:	4770      	bx	lr
            style_dsc_p = NULL;
  42385a:	2000      	movs	r0, #0
}
  42385c:	4770      	bx	lr
	...

00423860 <lv_label_refr_text>:
{
  423860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  423864:	b09b      	sub	sp, #108	; 0x6c
  423866:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423868:	4b95      	ldr	r3, [pc, #596]	; (423ac0 <lv_label_refr_text+0x260>)
  42386a:	4798      	blx	r3
    if(ext->text == NULL) return;
  42386c:	6803      	ldr	r3, [r0, #0]
  42386e:	2b00      	cmp	r3, #0
  423870:	d049      	beq.n	423906 <lv_label_refr_text+0xa6>
  423872:	4606      	mov	r6, r0
    get_txt_coords(label, &txt_coords);
  423874:	a918      	add	r1, sp, #96	; 0x60
  423876:	4628      	mov	r0, r5
  423878:	4b92      	ldr	r3, [pc, #584]	; (423ac4 <lv_label_refr_text+0x264>)
  42387a:	4798      	blx	r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  42387c:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
  423880:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  423884:	1ae4      	subs	r4, r4, r3
  423886:	b2a4      	uxth	r4, r4
  423888:	3401      	adds	r4, #1
  42388a:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  42388c:	f248 028e 	movw	r2, #32910	; 0x808e
  423890:	2100      	movs	r1, #0
  423892:	4628      	mov	r0, r5
  423894:	4b8c      	ldr	r3, [pc, #560]	; (423ac8 <lv_label_refr_text+0x268>)
  423896:	4798      	blx	r3
  423898:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  42389a:	f248 0281 	movw	r2, #32897	; 0x8081
  42389e:	2100      	movs	r1, #0
  4238a0:	4628      	mov	r0, r5
  4238a2:	4f8a      	ldr	r7, [pc, #552]	; (423acc <lv_label_refr_text+0x26c>)
  4238a4:	47b8      	blx	r7
  4238a6:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  4238a8:	f248 0280 	movw	r2, #32896	; 0x8080
  4238ac:	2100      	movs	r1, #0
  4238ae:	4628      	mov	r0, r5
  4238b0:	47b8      	blx	r7
  4238b2:	4607      	mov	r7, r0
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  4238b4:	7cb3      	ldrb	r3, [r6, #18]
  4238b6:	f013 0f40 	tst.w	r3, #64	; 0x40
  4238ba:	d127      	bne.n	42390c <lv_label_refr_text+0xac>
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
  4238bc:	2200      	movs	r2, #0
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  4238be:	f013 0f80 	tst.w	r3, #128	; 0x80
  4238c2:	d125      	bne.n	423910 <lv_label_refr_text+0xb0>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
  4238c4:	f013 0f07 	tst.w	r3, #7
  4238c8:	d101      	bne.n	4238ce <lv_label_refr_text+0x6e>
  4238ca:	f042 0210 	orr.w	r2, r2, #16
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
  4238ce:	6831      	ldr	r1, [r6, #0]
  4238d0:	9202      	str	r2, [sp, #8]
  4238d2:	9401      	str	r4, [sp, #4]
  4238d4:	f8cd 9000 	str.w	r9, [sp]
  4238d8:	463b      	mov	r3, r7
  4238da:	4642      	mov	r2, r8
  4238dc:	a817      	add	r0, sp, #92	; 0x5c
  4238de:	4c7c      	ldr	r4, [pc, #496]	; (423ad0 <lv_label_refr_text+0x270>)
  4238e0:	47a0      	blx	r4
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
  4238e2:	7cb3      	ldrb	r3, [r6, #18]
  4238e4:	f013 0307 	ands.w	r3, r3, #7
  4238e8:	d015      	beq.n	423916 <lv_label_refr_text+0xb6>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
  4238ea:	2b03      	cmp	r3, #3
  4238ec:	d039      	beq.n	423962 <lv_label_refr_text+0x102>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
  4238ee:	2b04      	cmp	r3, #4
  4238f0:	f000 8104 	beq.w	423afc <lv_label_refr_text+0x29c>
    else if(ext->long_mode == LV_LABEL_LONG_DOT) {
  4238f4:	2b02      	cmp	r3, #2
  4238f6:	f000 8180 	beq.w	423bfa <lv_label_refr_text+0x39a>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
  4238fa:	2b01      	cmp	r3, #1
  4238fc:	f000 821c 	beq.w	423d38 <lv_label_refr_text+0x4d8>
    lv_obj_invalidate(label);
  423900:	4628      	mov	r0, r5
  423902:	4b74      	ldr	r3, [pc, #464]	; (423ad4 <lv_label_refr_text+0x274>)
  423904:	4798      	blx	r3
}
  423906:	b01b      	add	sp, #108	; 0x6c
  423908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  42390c:	2201      	movs	r2, #1
  42390e:	e7d6      	b.n	4238be <lv_label_refr_text+0x5e>
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  423910:	f042 0202 	orr.w	r2, r2, #2
  423914:	e7d6      	b.n	4238c4 <lv_label_refr_text+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  423916:	2212      	movs	r2, #18
  423918:	2100      	movs	r1, #0
  42391a:	4628      	mov	r0, r5
  42391c:	4e6b      	ldr	r6, [pc, #428]	; (423acc <lv_label_refr_text+0x26c>)
  42391e:	47b0      	blx	r6
  423920:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  423922:	2213      	movs	r2, #19
  423924:	2100      	movs	r1, #0
  423926:	4628      	mov	r0, r5
  423928:	47b0      	blx	r6
        size.x += lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
  42392a:	4420      	add	r0, r4
  42392c:	f8bd 405c 	ldrh.w	r4, [sp, #92]	; 0x5c
  423930:	4420      	add	r0, r4
  423932:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  423936:	2210      	movs	r2, #16
  423938:	2100      	movs	r1, #0
  42393a:	4628      	mov	r0, r5
  42393c:	47b0      	blx	r6
  42393e:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  423940:	2211      	movs	r2, #17
  423942:	2100      	movs	r1, #0
  423944:	4628      	mov	r0, r5
  423946:	47b0      	blx	r6
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
  423948:	1822      	adds	r2, r4, r0
  42394a:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
  42394e:	4402      	add	r2, r0
  423950:	b212      	sxth	r2, r2
  423952:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
        lv_obj_set_size(label, size.x, size.y);
  423956:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
  42395a:	4628      	mov	r0, r5
  42395c:	4b5e      	ldr	r3, [pc, #376]	; (423ad8 <lv_label_refr_text+0x278>)
  42395e:	4798      	blx	r3
  423960:	e7ce      	b.n	423900 <lv_label_refr_text+0xa0>
        lv_anim_init(&a);
  423962:	a806      	add	r0, sp, #24
  423964:	4b5d      	ldr	r3, [pc, #372]	; (423adc <lv_label_refr_text+0x27c>)
  423966:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
  423968:	9506      	str	r5, [sp, #24]
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param cnt repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt       = cnt;
  42396a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  42396e:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
  423972:	2220      	movs	r2, #32
  423974:	4611      	mov	r1, r2
  423976:	4640      	mov	r0, r8
  423978:	4b59      	ldr	r3, [pc, #356]	; (423ae0 <lv_label_refr_text+0x280>)
  42397a:	4798      	blx	r3
  42397c:	4438      	add	r0, r7
  42397e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  423982:	fb03 f300 	mul.w	r3, r3, r0
                                        ext->anim_speed) *
  423986:	89b0      	ldrh	r0, [r6, #12]
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
  423988:	fb93 f3f0 	sdiv	r3, r3, r0
  42398c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  423990:	b29b      	uxth	r3, r3
    a->playback_delay = delay;
  423992:	9311      	str	r3, [sp, #68]	; 0x44
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param delay delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint16_t delay)
{
    a->repeat_delay = delay;
  423994:	9313      	str	r3, [sp, #76]	; 0x4c
        if(size.x > lv_area_get_width(&txt_coords)) {
  423996:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
  42399a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  42399e:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
  4239a2:	1a5b      	subs	r3, r3, r1
  4239a4:	b29b      	uxth	r3, r3
  4239a6:	3301      	adds	r3, #1
  4239a8:	b29b      	uxth	r3, r3
  4239aa:	b219      	sxth	r1, r3
  4239ac:	428a      	cmp	r2, r1
  4239ae:	dd49      	ble.n	423a44 <lv_label_refr_text+0x1e4>
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
  4239b0:	b292      	uxth	r2, r2
  4239b2:	1a9b      	subs	r3, r3, r2
  4239b4:	b21a      	sxth	r2, r3
    a->start = start;
  4239b6:	2100      	movs	r1, #0
  4239b8:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  4239ba:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  4239bc:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  4239be:	4c49      	ldr	r4, [pc, #292]	; (423ae4 <lv_label_refr_text+0x284>)
  4239c0:	9407      	str	r4, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  4239c2:	89b0      	ldrh	r0, [r6, #12]
  4239c4:	4b48      	ldr	r3, [pc, #288]	; (423ae8 <lv_label_refr_text+0x288>)
  4239c6:	4798      	blx	r3
    a->time     = duration;
  4239c8:	900f      	str	r0, [sp, #60]	; 0x3c
    a->playback_time = time;
  4239ca:	9012      	str	r0, [sp, #72]	; 0x48
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  4239cc:	4621      	mov	r1, r4
  4239ce:	4628      	mov	r0, r5
  4239d0:	4b46      	ldr	r3, [pc, #280]	; (423aec <lv_label_refr_text+0x28c>)
  4239d2:	4798      	blx	r3
            if(anim_cur) {
  4239d4:	2800      	cmp	r0, #0
  4239d6:	d032      	beq.n	423a3e <lv_label_refr_text+0x1de>
                act_time = anim_cur->act_time;
  4239d8:	6a82      	ldr	r2, [r0, #40]	; 0x28
                playback_now = anim_cur->playback_now;
  4239da:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  4239de:	f003 0301 	and.w	r3, r3, #1
            if(act_time < a.time) {
  4239e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4239e4:	428a      	cmp	r2, r1
  4239e6:	da11      	bge.n	423a0c <lv_label_refr_text+0x1ac>
                a.act_time = act_time;      /*To keep the old position*/
  4239e8:	9210      	str	r2, [sp, #64]	; 0x40
                a.early_apply = 0;
  4239ea:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
  4239ee:	f36f 0200 	bfc	r2, #0, #1
  4239f2:	f88d 2052 	strb.w	r2, [sp, #82]	; 0x52
                if(playback_now) {
  4239f6:	b14b      	cbz	r3, 423a0c <lv_label_refr_text+0x1ac>
                    a.playback_now = 1;
  4239f8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  4239fc:	f043 0301 	orr.w	r3, r3, #1
  423a00:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
                    tmp      = a.start;
  423a04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    a.start = a.end;
  423a06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  423a08:	920c      	str	r2, [sp, #48]	; 0x30
                    a.end   = tmp;
  423a0a:	930e      	str	r3, [sp, #56]	; 0x38
            lv_anim_start(&a);
  423a0c:	a806      	add	r0, sp, #24
  423a0e:	4b38      	ldr	r3, [pc, #224]	; (423af0 <lv_label_refr_text+0x290>)
  423a10:	4798      	blx	r3
            hor_anim = true;
  423a12:	2401      	movs	r4, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  423a14:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  423a18:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  423a1c:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
  423a20:	1a5b      	subs	r3, r3, r1
  423a22:	b29b      	uxth	r3, r3
  423a24:	3301      	adds	r3, #1
  423a26:	b29b      	uxth	r3, r3
  423a28:	b219      	sxth	r1, r3
  423a2a:	428a      	cmp	r2, r1
  423a2c:	dd00      	ble.n	423a30 <lv_label_refr_text+0x1d0>
  423a2e:	b184      	cbz	r4, 423a52 <lv_label_refr_text+0x1f2>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  423a30:	4930      	ldr	r1, [pc, #192]	; (423af4 <lv_label_refr_text+0x294>)
  423a32:	4628      	mov	r0, r5
  423a34:	4b30      	ldr	r3, [pc, #192]	; (423af8 <lv_label_refr_text+0x298>)
  423a36:	4798      	blx	r3
            ext->offset.y = 0;
  423a38:	2300      	movs	r3, #0
  423a3a:	8233      	strh	r3, [r6, #16]
  423a3c:	e760      	b.n	423900 <lv_label_refr_text+0xa0>
            bool playback_now = false;
  423a3e:	2300      	movs	r3, #0
            int32_t act_time = 0;
  423a40:	461a      	mov	r2, r3
  423a42:	e7ce      	b.n	4239e2 <lv_label_refr_text+0x182>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  423a44:	4927      	ldr	r1, [pc, #156]	; (423ae4 <lv_label_refr_text+0x284>)
  423a46:	4628      	mov	r0, r5
  423a48:	4b2b      	ldr	r3, [pc, #172]	; (423af8 <lv_label_refr_text+0x298>)
  423a4a:	4798      	blx	r3
            ext->offset.x = 0;
  423a4c:	2400      	movs	r4, #0
  423a4e:	81f4      	strh	r4, [r6, #14]
  423a50:	e7e0      	b.n	423a14 <lv_label_refr_text+0x1b4>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
  423a52:	b292      	uxth	r2, r2
  423a54:	1a9a      	subs	r2, r3, r2
  423a56:	b292      	uxth	r2, r2
  423a58:	f8b8 3008 	ldrh.w	r3, [r8, #8]
  423a5c:	1ad2      	subs	r2, r2, r3
  423a5e:	b212      	sxth	r2, r2
    a->start = start;
  423a60:	2100      	movs	r1, #0
  423a62:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  423a64:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  423a66:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  423a68:	4f22      	ldr	r7, [pc, #136]	; (423af4 <lv_label_refr_text+0x294>)
  423a6a:	9707      	str	r7, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  423a6c:	89b0      	ldrh	r0, [r6, #12]
  423a6e:	4b1e      	ldr	r3, [pc, #120]	; (423ae8 <lv_label_refr_text+0x288>)
  423a70:	4798      	blx	r3
    a->time     = duration;
  423a72:	900f      	str	r0, [sp, #60]	; 0x3c
    a->playback_time = time;
  423a74:	9012      	str	r0, [sp, #72]	; 0x48
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  423a76:	4639      	mov	r1, r7
  423a78:	4628      	mov	r0, r5
  423a7a:	4b1c      	ldr	r3, [pc, #112]	; (423aec <lv_label_refr_text+0x28c>)
  423a7c:	4798      	blx	r3
            if(anim_cur) {
  423a7e:	b1e8      	cbz	r0, 423abc <lv_label_refr_text+0x25c>
                act_time = anim_cur->act_time;
  423a80:	6a82      	ldr	r2, [r0, #40]	; 0x28
                playback_now = anim_cur->playback_now;
  423a82:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
  423a86:	f004 0401 	and.w	r4, r4, #1
            if(act_time < a.time) {
  423a8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  423a8c:	429a      	cmp	r2, r3
  423a8e:	da11      	bge.n	423ab4 <lv_label_refr_text+0x254>
                a.act_time = act_time;      /*To keep the old position*/
  423a90:	9210      	str	r2, [sp, #64]	; 0x40
                a.early_apply = 0;
  423a92:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
  423a96:	f36f 0300 	bfc	r3, #0, #1
  423a9a:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
                if(playback_now) {
  423a9e:	b14c      	cbz	r4, 423ab4 <lv_label_refr_text+0x254>
                    a.playback_now = 1;
  423aa0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  423aa4:	f043 0301 	orr.w	r3, r3, #1
  423aa8:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
                    tmp      = a.start;
  423aac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    a.start = a.end;
  423aae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  423ab0:	920c      	str	r2, [sp, #48]	; 0x30
                    a.end   = tmp;
  423ab2:	930e      	str	r3, [sp, #56]	; 0x38
            lv_anim_start(&a);
  423ab4:	a806      	add	r0, sp, #24
  423ab6:	4b0e      	ldr	r3, [pc, #56]	; (423af0 <lv_label_refr_text+0x290>)
  423ab8:	4798      	blx	r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  423aba:	e721      	b.n	423900 <lv_label_refr_text+0xa0>
            int32_t act_time = 0;
  423abc:	2200      	movs	r2, #0
  423abe:	e7e4      	b.n	423a8a <lv_label_refr_text+0x22a>
  423ac0:	00407ffd 	.word	0x00407ffd
  423ac4:	004230bd 	.word	0x004230bd
  423ac8:	004072e5 	.word	0x004072e5
  423acc:	004073ed 	.word	0x004073ed
  423ad0:	00418db5 	.word	0x00418db5
  423ad4:	00405f01 	.word	0x00405f01
  423ad8:	00406be1 	.word	0x00406be1
  423adc:	004162bd 	.word	0x004162bd
  423ae0:	00414a6d 	.word	0x00414a6d
  423ae4:	0042319d 	.word	0x0042319d
  423ae8:	00416441 	.word	0x00416441
  423aec:	0041640d 	.word	0x0041640d
  423af0:	00416375 	.word	0x00416375
  423af4:	00423181 	.word	0x00423181
  423af8:	00416309 	.word	0x00416309
        lv_anim_init(&a);
  423afc:	a806      	add	r0, sp, #24
  423afe:	4b99      	ldr	r3, [pc, #612]	; (423d64 <lv_label_refr_text+0x504>)
  423b00:	4798      	blx	r3
    a->var     = var;
  423b02:	9506      	str	r5, [sp, #24]
    a->repeat_cnt       = cnt;
  423b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
  423b08:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        if(size.x > lv_area_get_width(&txt_coords)) {
  423b0c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  423b10:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  423b14:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
  423b18:	1a5b      	subs	r3, r3, r1
  423b1a:	b29b      	uxth	r3, r3
  423b1c:	3301      	adds	r3, #1
  423b1e:	b21b      	sxth	r3, r3
  423b20:	429a      	cmp	r2, r3
  423b22:	dd3e      	ble.n	423ba2 <lv_label_refr_text+0x342>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
  423b24:	2220      	movs	r2, #32
  423b26:	4611      	mov	r1, r2
  423b28:	4640      	mov	r0, r8
  423b2a:	4b8f      	ldr	r3, [pc, #572]	; (423d68 <lv_label_refr_text+0x508>)
  423b2c:	4798      	blx	r3
  423b2e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
  423b32:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
  423b36:	1a82      	subs	r2, r0, r2
  423b38:	b212      	sxth	r2, r2
    a->start = start;
  423b3a:	2100      	movs	r1, #0
  423b3c:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  423b3e:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  423b40:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  423b42:	4c8a      	ldr	r4, [pc, #552]	; (423d6c <lv_label_refr_text+0x50c>)
  423b44:	9407      	str	r4, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  423b46:	89b0      	ldrh	r0, [r6, #12]
  423b48:	4b89      	ldr	r3, [pc, #548]	; (423d70 <lv_label_refr_text+0x510>)
  423b4a:	4798      	blx	r3
    a->time     = duration;
  423b4c:	900f      	str	r0, [sp, #60]	; 0x3c
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  423b4e:	4621      	mov	r1, r4
  423b50:	4628      	mov	r0, r5
  423b52:	4b88      	ldr	r3, [pc, #544]	; (423d74 <lv_label_refr_text+0x514>)
  423b54:	4798      	blx	r3
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  423b56:	b310      	cbz	r0, 423b9e <lv_label_refr_text+0x33e>
  423b58:	6a83      	ldr	r3, [r0, #40]	; 0x28
            if(act_time < a.time) {
  423b5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  423b5c:	4293      	cmp	r3, r2
  423b5e:	da06      	bge.n	423b6e <lv_label_refr_text+0x30e>
                a.act_time = act_time;      /*To keep the old position*/
  423b60:	9310      	str	r3, [sp, #64]	; 0x40
                a.early_apply = 0;
  423b62:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
  423b66:	f36f 0300 	bfc	r3, #0, #1
  423b6a:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
            lv_anim_start(&a);
  423b6e:	a806      	add	r0, sp, #24
  423b70:	4b81      	ldr	r3, [pc, #516]	; (423d78 <lv_label_refr_text+0x518>)
  423b72:	4798      	blx	r3
            hor_anim = true;
  423b74:	2101      	movs	r1, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  423b76:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  423b7a:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  423b7e:	f8bd 0062 	ldrh.w	r0, [sp, #98]	; 0x62
  423b82:	1a1b      	subs	r3, r3, r0
  423b84:	b29b      	uxth	r3, r3
  423b86:	3301      	adds	r3, #1
  423b88:	b21b      	sxth	r3, r3
  423b8a:	429a      	cmp	r2, r3
  423b8c:	dd00      	ble.n	423b90 <lv_label_refr_text+0x330>
  423b8e:	b179      	cbz	r1, 423bb0 <lv_label_refr_text+0x350>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  423b90:	497a      	ldr	r1, [pc, #488]	; (423d7c <lv_label_refr_text+0x51c>)
  423b92:	4628      	mov	r0, r5
  423b94:	4b7a      	ldr	r3, [pc, #488]	; (423d80 <lv_label_refr_text+0x520>)
  423b96:	4798      	blx	r3
            ext->offset.y = 0;
  423b98:	2300      	movs	r3, #0
  423b9a:	8233      	strh	r3, [r6, #16]
  423b9c:	e6b0      	b.n	423900 <lv_label_refr_text+0xa0>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  423b9e:	2300      	movs	r3, #0
  423ba0:	e7db      	b.n	423b5a <lv_label_refr_text+0x2fa>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  423ba2:	4972      	ldr	r1, [pc, #456]	; (423d6c <lv_label_refr_text+0x50c>)
  423ba4:	4628      	mov	r0, r5
  423ba6:	4b76      	ldr	r3, [pc, #472]	; (423d80 <lv_label_refr_text+0x520>)
  423ba8:	4798      	blx	r3
            ext->offset.x = 0;
  423baa:	2100      	movs	r1, #0
  423bac:	81f1      	strh	r1, [r6, #14]
  423bae:	e7e2      	b.n	423b76 <lv_label_refr_text+0x316>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
  423bb0:	b292      	uxth	r2, r2
  423bb2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
  423bb6:	4252      	negs	r2, r2
  423bb8:	1ad2      	subs	r2, r2, r3
  423bba:	b212      	sxth	r2, r2
    a->start = start;
  423bbc:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  423bbe:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  423bc0:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  423bc2:	4c6e      	ldr	r4, [pc, #440]	; (423d7c <lv_label_refr_text+0x51c>)
  423bc4:	9407      	str	r4, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  423bc6:	89b0      	ldrh	r0, [r6, #12]
  423bc8:	4b69      	ldr	r3, [pc, #420]	; (423d70 <lv_label_refr_text+0x510>)
  423bca:	4798      	blx	r3
    a->time     = duration;
  423bcc:	900f      	str	r0, [sp, #60]	; 0x3c
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  423bce:	4621      	mov	r1, r4
  423bd0:	4628      	mov	r0, r5
  423bd2:	4b68      	ldr	r3, [pc, #416]	; (423d74 <lv_label_refr_text+0x514>)
  423bd4:	4798      	blx	r3
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  423bd6:	b170      	cbz	r0, 423bf6 <lv_label_refr_text+0x396>
  423bd8:	6a83      	ldr	r3, [r0, #40]	; 0x28
            if(act_time < a.time) {
  423bda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  423bdc:	4293      	cmp	r3, r2
  423bde:	da06      	bge.n	423bee <lv_label_refr_text+0x38e>
                a.act_time = act_time;      /*To keep the old position*/
  423be0:	9310      	str	r3, [sp, #64]	; 0x40
                a.early_apply = 0;
  423be2:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
  423be6:	f36f 0300 	bfc	r3, #0, #1
  423bea:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
            lv_anim_start(&a);
  423bee:	a806      	add	r0, sp, #24
  423bf0:	4b61      	ldr	r3, [pc, #388]	; (423d78 <lv_label_refr_text+0x518>)
  423bf2:	4798      	blx	r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  423bf4:	e684      	b.n	423900 <lv_label_refr_text+0xa0>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  423bf6:	2300      	movs	r3, #0
  423bf8:	e7ef      	b.n	423bda <lv_label_refr_text+0x37a>
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
  423bfa:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
  423bfe:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  423c02:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
  423c06:	1a5b      	subs	r3, r3, r1
  423c08:	b29b      	uxth	r3, r3
  423c0a:	3301      	adds	r3, #1
  423c0c:	b21b      	sxth	r3, r3
  423c0e:	429a      	cmp	r2, r3
  423c10:	dc03      	bgt.n	423c1a <lv_label_refr_text+0x3ba>
            ext->dot_end = LV_LABEL_DOT_END_INV;
  423c12:	f64f 73ff 	movw	r3, #65535	; 0xffff
  423c16:	60b3      	str	r3, [r6, #8]
  423c18:	e672      	b.n	423900 <lv_label_refr_text+0xa0>
        else if(_lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
  423c1a:	4b5a      	ldr	r3, [pc, #360]	; (423d84 <lv_label_refr_text+0x524>)
  423c1c:	681b      	ldr	r3, [r3, #0]
  423c1e:	6830      	ldr	r0, [r6, #0]
  423c20:	4798      	blx	r3
  423c22:	2803      	cmp	r0, #3
  423c24:	d803      	bhi.n	423c2e <lv_label_refr_text+0x3ce>
            ext->dot_end = LV_LABEL_DOT_END_INV;
  423c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
  423c2a:	60b3      	str	r3, [r6, #8]
  423c2c:	e668      	b.n	423900 <lv_label_refr_text+0xa0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  423c2e:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
  423c32:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  423c36:	1ae4      	subs	r4, r4, r3
  423c38:	b2a4      	uxth	r4, r4
  423c3a:	3401      	adds	r4, #1
  423c3c:	b2a4      	uxth	r4, r4
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
  423c3e:	222e      	movs	r2, #46	; 0x2e
  423c40:	4611      	mov	r1, r2
  423c42:	4640      	mov	r0, r8
  423c44:	4b48      	ldr	r3, [pc, #288]	; (423d68 <lv_label_refr_text+0x508>)
  423c46:	4798      	blx	r3
  423c48:	4438      	add	r0, r7
            p.x = lv_area_get_width(&txt_coords) -
  423c4a:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
  423c4e:	4420      	add	r0, r4
  423c50:	f8ad 0014 	strh.w	r0, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  423c54:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  423c58:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
  423c5c:	1a9b      	subs	r3, r3, r2
  423c5e:	b29b      	uxth	r3, r3
  423c60:	3301      	adds	r3, #1
  423c62:	b29b      	uxth	r3, r3
  423c64:	b218      	sxth	r0, r3
            p.y = lv_area_get_height(&txt_coords);
  423c66:	f8ad 0016 	strh.w	r0, [sp, #22]
  423c6a:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
  423c6e:	eb09 0401 	add.w	r4, r9, r1
            y_overed = p.y %
  423c72:	fb90 f2f4 	sdiv	r2, r0, r4
  423c76:	fb04 0212 	mls	r2, r4, r2, r0
  423c7a:	b210      	sxth	r0, r2
            if(y_overed >= lv_font_get_line_height(font)) {
  423c7c:	4288      	cmp	r0, r1
  423c7e:	db16      	blt.n	423cae <lv_label_refr_text+0x44e>
                p.y -= y_overed;
  423c80:	1a9b      	subs	r3, r3, r2
                p.y += lv_font_get_line_height(font);
  423c82:	b289      	uxth	r1, r1
  423c84:	fa11 f383 	uxtah	r3, r1, r3
  423c88:	f8ad 3016 	strh.w	r3, [sp, #22]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
  423c8c:	a905      	add	r1, sp, #20
  423c8e:	4628      	mov	r0, r5
  423c90:	4b3d      	ldr	r3, [pc, #244]	; (423d88 <lv_label_refr_text+0x528>)
  423c92:	4798      	blx	r3
  423c94:	4607      	mov	r7, r0
            size_t txt_len = strlen(ext->text);
  423c96:	6834      	ldr	r4, [r6, #0]
  423c98:	4620      	mov	r0, r4
  423c9a:	4b3c      	ldr	r3, [pc, #240]	; (423d8c <lv_label_refr_text+0x52c>)
  423c9c:	4798      	blx	r3
  423c9e:	4681      	mov	r9, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
  423ca0:	4b3b      	ldr	r3, [pc, #236]	; (423d90 <lv_label_refr_text+0x530>)
  423ca2:	681b      	ldr	r3, [r3, #0]
  423ca4:	4639      	mov	r1, r7
  423ca6:	4620      	mov	r0, r4
  423ca8:	4798      	blx	r3
  423caa:	9006      	str	r0, [sp, #24]
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
  423cac:	e00c      	b.n	423cc8 <lv_label_refr_text+0x468>
                p.y -= y_overed;
  423cae:	1a9b      	subs	r3, r3, r2
  423cb0:	b29b      	uxth	r3, r3
                p.y -= line_space;
  423cb2:	eba3 0909 	sub.w	r9, r3, r9
  423cb6:	f8ad 9016 	strh.w	r9, [sp, #22]
  423cba:	e7e7      	b.n	423c8c <lv_label_refr_text+0x42c>
                _lv_txt_encoded_prev(ext->text, &byte_id);
  423cbc:	4b35      	ldr	r3, [pc, #212]	; (423d94 <lv_label_refr_text+0x534>)
  423cbe:	681b      	ldr	r3, [r3, #0]
  423cc0:	a906      	add	r1, sp, #24
  423cc2:	6830      	ldr	r0, [r6, #0]
  423cc4:	4798      	blx	r3
                letter_id--;
  423cc6:	3f01      	subs	r7, #1
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
  423cc8:	9c06      	ldr	r4, [sp, #24]
  423cca:	f104 0803 	add.w	r8, r4, #3
  423cce:	45c1      	cmp	r9, r8
  423cd0:	d3f4      	bcc.n	423cbc <lv_label_refr_text+0x45c>
  423cd2:	f04f 0900 	mov.w	r9, #0
  423cd6:	46cb      	mov	fp, r9
  423cd8:	e012      	b.n	423d00 <lv_label_refr_text+0x4a0>
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
  423cda:	6830      	ldr	r0, [r6, #0]
  423cdc:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  423ce0:	f85a 2d50 	ldr.w	r2, [sl, #-80]!
  423ce4:	4b2c      	ldr	r3, [pc, #176]	; (423d98 <lv_label_refr_text+0x538>)
  423ce6:	681b      	ldr	r3, [r3, #0]
  423ce8:	4410      	add	r0, r2
  423cea:	4798      	blx	r3
  423cec:	4481      	add	r9, r0
  423cee:	fa5f f989 	uxtb.w	r9, r9
                _lv_txt_encoded_next(ext->text, &byte_id);
  423cf2:	4b2a      	ldr	r3, [pc, #168]	; (423d9c <lv_label_refr_text+0x53c>)
  423cf4:	681b      	ldr	r3, [r3, #0]
  423cf6:	4651      	mov	r1, sl
  423cf8:	6830      	ldr	r0, [r6, #0]
  423cfa:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
  423cfc:	f10b 0b01 	add.w	fp, fp, #1
  423d00:	f1bb 0f03 	cmp.w	fp, #3
  423d04:	d9e9      	bls.n	423cda <lv_label_refr_text+0x47a>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
  423d06:	6831      	ldr	r1, [r6, #0]
  423d08:	464a      	mov	r2, r9
  423d0a:	4421      	add	r1, r4
  423d0c:	4628      	mov	r0, r5
  423d0e:	4b24      	ldr	r3, [pc, #144]	; (423da0 <lv_label_refr_text+0x540>)
  423d10:	4798      	blx	r3
  423d12:	2800      	cmp	r0, #0
  423d14:	f43f adf4 	beq.w	423900 <lv_label_refr_text+0xa0>
  423d18:	2300      	movs	r3, #0
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
  423d1a:	2b02      	cmp	r3, #2
  423d1c:	d805      	bhi.n	423d2a <lv_label_refr_text+0x4ca>
                    ext->text[byte_id_ori + i] = '.';
  423d1e:	6831      	ldr	r1, [r6, #0]
  423d20:	191a      	adds	r2, r3, r4
  423d22:	202e      	movs	r0, #46	; 0x2e
  423d24:	5488      	strb	r0, [r1, r2]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
  423d26:	3301      	adds	r3, #1
  423d28:	e7f7      	b.n	423d1a <lv_label_refr_text+0x4ba>
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
  423d2a:	6833      	ldr	r3, [r6, #0]
  423d2c:	2200      	movs	r2, #0
  423d2e:	f803 2008 	strb.w	r2, [r3, r8]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
  423d32:	3703      	adds	r7, #3
  423d34:	60b7      	str	r7, [r6, #8]
  423d36:	e5e3      	b.n	423900 <lv_label_refr_text+0xa0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  423d38:	2210      	movs	r2, #16
  423d3a:	2100      	movs	r1, #0
  423d3c:	4628      	mov	r0, r5
  423d3e:	4e19      	ldr	r6, [pc, #100]	; (423da4 <lv_label_refr_text+0x544>)
  423d40:	47b0      	blx	r6
  423d42:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  423d44:	2211      	movs	r2, #17
  423d46:	2100      	movs	r1, #0
  423d48:	4628      	mov	r0, r5
  423d4a:	47b0      	blx	r6
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
  423d4c:	1821      	adds	r1, r4, r0
  423d4e:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
  423d52:	4401      	add	r1, r0
  423d54:	b209      	sxth	r1, r1
  423d56:	f8ad 105e 	strh.w	r1, [sp, #94]	; 0x5e
        lv_obj_set_height(label, size.y);
  423d5a:	4628      	mov	r0, r5
  423d5c:	4b12      	ldr	r3, [pc, #72]	; (423da8 <lv_label_refr_text+0x548>)
  423d5e:	4798      	blx	r3
  423d60:	e5ce      	b.n	423900 <lv_label_refr_text+0xa0>
  423d62:	bf00      	nop
  423d64:	004162bd 	.word	0x004162bd
  423d68:	00414a6d 	.word	0x00414a6d
  423d6c:	0042319d 	.word	0x0042319d
  423d70:	00416441 	.word	0x00416441
  423d74:	0041640d 	.word	0x0041640d
  423d78:	00416375 	.word	0x00416375
  423d7c:	00423181 	.word	0x00423181
  423d80:	00416309 	.word	0x00416309
  423d84:	204000c4 	.word	0x204000c4
  423d88:	004232d9 	.word	0x004232d9
  423d8c:	00428dc1 	.word	0x00428dc1
  423d90:	204000b0 	.word	0x204000b0
  423d94:	204000bc 	.word	0x204000bc
  423d98:	204000c0 	.word	0x204000c0
  423d9c:	204000b8 	.word	0x204000b8
  423da0:	00423119 	.word	0x00423119
  423da4:	004073ed 	.word	0x004073ed
  423da8:	00406d15 	.word	0x00406d15

00423dac <lv_label_signal>:
{
  423dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  423db0:	4607      	mov	r7, r0
  423db2:	460c      	mov	r4, r1
  423db4:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  423db6:	2908      	cmp	r1, #8
  423db8:	d014      	beq.n	423de4 <lv_label_signal+0x38>
    res = ancestor_signal(label, sign, param);
  423dba:	4b31      	ldr	r3, [pc, #196]	; (423e80 <lv_label_signal+0xd4>)
  423dbc:	681b      	ldr	r3, [r3, #0]
  423dbe:	4798      	blx	r3
  423dc0:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  423dc2:	2801      	cmp	r0, #1
  423dc4:	d114      	bne.n	423df0 <lv_label_signal+0x44>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  423dc6:	2c07      	cmp	r4, #7
  423dc8:	d01d      	beq.n	423e06 <lv_label_signal+0x5a>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423dca:	4638      	mov	r0, r7
  423dcc:	4b2d      	ldr	r3, [pc, #180]	; (423e84 <lv_label_signal+0xd8>)
  423dce:	4798      	blx	r3
  423dd0:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
  423dd2:	bb2c      	cbnz	r4, 423e20 <lv_label_signal+0x74>
        if(ext->static_txt == 0) {
  423dd4:	7c83      	ldrb	r3, [r0, #18]
  423dd6:	f013 0f08 	tst.w	r3, #8
  423dda:	d01a      	beq.n	423e12 <lv_label_signal+0x66>
        lv_label_dot_tmp_free(label);
  423ddc:	4638      	mov	r0, r7
  423dde:	4b2a      	ldr	r3, [pc, #168]	; (423e88 <lv_label_signal+0xdc>)
  423de0:	4798      	blx	r3
  423de2:	e005      	b.n	423df0 <lv_label_signal+0x44>
        info->result = lv_label_get_style(label, info->part);
  423de4:	7811      	ldrb	r1, [r2, #0]
  423de6:	4b29      	ldr	r3, [pc, #164]	; (423e8c <lv_label_signal+0xe0>)
  423de8:	4798      	blx	r3
  423dea:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  423dec:	b118      	cbz	r0, 423df6 <lv_label_signal+0x4a>
  423dee:	2601      	movs	r6, #1
}
  423df0:	4630      	mov	r0, r6
  423df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else return ancestor_signal(label, sign, param);
  423df6:	4b22      	ldr	r3, [pc, #136]	; (423e80 <lv_label_signal+0xd4>)
  423df8:	681b      	ldr	r3, [r3, #0]
  423dfa:	462a      	mov	r2, r5
  423dfc:	4621      	mov	r1, r4
  423dfe:	4638      	mov	r0, r7
  423e00:	4798      	blx	r3
  423e02:	4606      	mov	r6, r0
  423e04:	e7f4      	b.n	423df0 <lv_label_signal+0x44>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  423e06:	4922      	ldr	r1, [pc, #136]	; (423e90 <lv_label_signal+0xe4>)
  423e08:	4628      	mov	r0, r5
  423e0a:	4b22      	ldr	r3, [pc, #136]	; (423e94 <lv_label_signal+0xe8>)
  423e0c:	4798      	blx	r3
  423e0e:	4606      	mov	r6, r0
  423e10:	e7ee      	b.n	423df0 <lv_label_signal+0x44>
            lv_mem_free(ext->text);
  423e12:	6800      	ldr	r0, [r0, #0]
  423e14:	4b20      	ldr	r3, [pc, #128]	; (423e98 <lv_label_signal+0xec>)
  423e16:	4798      	blx	r3
            ext->text = NULL;
  423e18:	2300      	movs	r3, #0
  423e1a:	f8c8 3000 	str.w	r3, [r8]
  423e1e:	e7dd      	b.n	423ddc <lv_label_signal+0x30>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  423e20:	2c04      	cmp	r4, #4
  423e22:	d016      	beq.n	423e52 <lv_label_signal+0xa6>
    else if(sign == LV_SIGNAL_COORD_CHG) {
  423e24:	2c02      	cmp	r4, #2
  423e26:	d1e3      	bne.n	423df0 <lv_label_signal+0x44>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  423e28:	8abb      	ldrh	r3, [r7, #20]
  423e2a:	8a3a      	ldrh	r2, [r7, #16]
  423e2c:	1a9b      	subs	r3, r3, r2
  423e2e:	b29b      	uxth	r3, r3
  423e30:	3301      	adds	r3, #1
  423e32:	b29b      	uxth	r3, r3
  423e34:	88aa      	ldrh	r2, [r5, #4]
  423e36:	8829      	ldrh	r1, [r5, #0]
  423e38:	1a52      	subs	r2, r2, r1
  423e3a:	b292      	uxth	r2, r2
  423e3c:	3201      	adds	r2, #1
  423e3e:	b292      	uxth	r2, r2
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
  423e40:	429a      	cmp	r2, r3
  423e42:	d00d      	beq.n	423e60 <lv_label_signal+0xb4>
            lv_label_revert_dots(label);
  423e44:	4638      	mov	r0, r7
  423e46:	4b15      	ldr	r3, [pc, #84]	; (423e9c <lv_label_signal+0xf0>)
  423e48:	4798      	blx	r3
            lv_label_refr_text(label);
  423e4a:	4638      	mov	r0, r7
  423e4c:	4b14      	ldr	r3, [pc, #80]	; (423ea0 <lv_label_signal+0xf4>)
  423e4e:	4798      	blx	r3
  423e50:	e7ce      	b.n	423df0 <lv_label_signal+0x44>
        lv_label_revert_dots(label);
  423e52:	4638      	mov	r0, r7
  423e54:	4b11      	ldr	r3, [pc, #68]	; (423e9c <lv_label_signal+0xf0>)
  423e56:	4798      	blx	r3
        lv_label_refr_text(label);
  423e58:	4638      	mov	r0, r7
  423e5a:	4b11      	ldr	r3, [pc, #68]	; (423ea0 <lv_label_signal+0xf4>)
  423e5c:	4798      	blx	r3
  423e5e:	e7c7      	b.n	423df0 <lv_label_signal+0x44>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  423e60:	8afb      	ldrh	r3, [r7, #22]
  423e62:	8a7a      	ldrh	r2, [r7, #18]
  423e64:	1a9b      	subs	r3, r3, r2
  423e66:	b29b      	uxth	r3, r3
  423e68:	3301      	adds	r3, #1
  423e6a:	b29b      	uxth	r3, r3
  423e6c:	88ea      	ldrh	r2, [r5, #6]
  423e6e:	8869      	ldrh	r1, [r5, #2]
  423e70:	1a52      	subs	r2, r2, r1
  423e72:	b292      	uxth	r2, r2
  423e74:	3201      	adds	r2, #1
  423e76:	b292      	uxth	r2, r2
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
  423e78:	429a      	cmp	r2, r3
  423e7a:	d1e3      	bne.n	423e44 <lv_label_signal+0x98>
  423e7c:	e7b8      	b.n	423df0 <lv_label_signal+0x44>
  423e7e:	bf00      	nop
  423e80:	20414860 	.word	0x20414860
  423e84:	00407ffd 	.word	0x00407ffd
  423e88:	0042301d 	.word	0x0042301d
  423e8c:	00423855 	.word	0x00423855
  423e90:	00431cdc 	.word	0x00431cdc
  423e94:	00408289 	.word	0x00408289
  423e98:	004175b1 	.word	0x004175b1
  423e9c:	0042304d 	.word	0x0042304d
  423ea0:	00423861 	.word	0x00423861

00423ea4 <lv_label_set_text>:
{
  423ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  423ea6:	4607      	mov	r7, r0
  423ea8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423eaa:	4b31      	ldr	r3, [pc, #196]	; (423f70 <lv_label_set_text+0xcc>)
  423eac:	4798      	blx	r3
  423eae:	b928      	cbnz	r0, 423ebc <lv_label_set_text+0x18>
  423eb0:	463a      	mov	r2, r7
  423eb2:	2300      	movs	r3, #0
  423eb4:	482f      	ldr	r0, [pc, #188]	; (423f74 <lv_label_set_text+0xd0>)
  423eb6:	4930      	ldr	r1, [pc, #192]	; (423f78 <lv_label_set_text+0xd4>)
  423eb8:	4788      	blx	r1
  423eba:	e7fe      	b.n	423eba <lv_label_set_text+0x16>
    lv_obj_invalidate(label);
  423ebc:	4638      	mov	r0, r7
  423ebe:	4b2f      	ldr	r3, [pc, #188]	; (423f7c <lv_label_set_text+0xd8>)
  423ec0:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423ec2:	4638      	mov	r0, r7
  423ec4:	4b2e      	ldr	r3, [pc, #184]	; (423f80 <lv_label_set_text+0xdc>)
  423ec6:	4798      	blx	r3
  423ec8:	4604      	mov	r4, r0
    if(text == NULL) text = ext->text;
  423eca:	b31d      	cbz	r5, 423f14 <lv_label_set_text+0x70>
    LV_ASSERT_STR(text);
  423ecc:	4628      	mov	r0, r5
  423ece:	4b28      	ldr	r3, [pc, #160]	; (423f70 <lv_label_set_text+0xcc>)
  423ed0:	4798      	blx	r3
  423ed2:	b308      	cbz	r0, 423f18 <lv_label_set_text+0x74>
    if(ext->text == text && ext->static_txt == 0) {
  423ed4:	6826      	ldr	r6, [r4, #0]
  423ed6:	42b5      	cmp	r5, r6
  423ed8:	d024      	beq.n	423f24 <lv_label_set_text+0x80>
        if(ext->text != NULL && ext->static_txt == 0) {
  423eda:	b11e      	cbz	r6, 423ee4 <lv_label_set_text+0x40>
  423edc:	7ca3      	ldrb	r3, [r4, #18]
  423ede:	f013 0f08 	tst.w	r3, #8
  423ee2:	d038      	beq.n	423f56 <lv_label_set_text+0xb2>
        size_t len = strlen(text) + 1;
  423ee4:	4628      	mov	r0, r5
  423ee6:	4b27      	ldr	r3, [pc, #156]	; (423f84 <lv_label_set_text+0xe0>)
  423ee8:	4798      	blx	r3
        ext->text = lv_mem_alloc(len);
  423eea:	3001      	adds	r0, #1
  423eec:	4b26      	ldr	r3, [pc, #152]	; (423f88 <lv_label_set_text+0xe4>)
  423eee:	4798      	blx	r3
  423ef0:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
  423ef2:	4b1f      	ldr	r3, [pc, #124]	; (423f70 <lv_label_set_text+0xcc>)
  423ef4:	4798      	blx	r3
  423ef6:	2800      	cmp	r0, #0
  423ef8:	d033      	beq.n	423f62 <lv_label_set_text+0xbe>
        if(ext->text == NULL) return;
  423efa:	6820      	ldr	r0, [r4, #0]
  423efc:	b148      	cbz	r0, 423f12 <lv_label_set_text+0x6e>
        strcpy(ext->text, text);
  423efe:	4629      	mov	r1, r5
  423f00:	4b22      	ldr	r3, [pc, #136]	; (423f8c <lv_label_set_text+0xe8>)
  423f02:	4798      	blx	r3
        ext->static_txt = 0;
  423f04:	7ca3      	ldrb	r3, [r4, #18]
  423f06:	f36f 03c3 	bfc	r3, #3, #1
  423f0a:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
  423f0c:	4638      	mov	r0, r7
  423f0e:	4b20      	ldr	r3, [pc, #128]	; (423f90 <lv_label_set_text+0xec>)
  423f10:	4798      	blx	r3
  423f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(text == NULL) text = ext->text;
  423f14:	6805      	ldr	r5, [r0, #0]
  423f16:	e7d9      	b.n	423ecc <lv_label_set_text+0x28>
    LV_ASSERT_STR(text);
  423f18:	462a      	mov	r2, r5
  423f1a:	2300      	movs	r3, #0
  423f1c:	4815      	ldr	r0, [pc, #84]	; (423f74 <lv_label_set_text+0xd0>)
  423f1e:	4916      	ldr	r1, [pc, #88]	; (423f78 <lv_label_set_text+0xd4>)
  423f20:	4788      	blx	r1
  423f22:	e7fe      	b.n	423f22 <lv_label_set_text+0x7e>
    if(ext->text == text && ext->static_txt == 0) {
  423f24:	7ca3      	ldrb	r3, [r4, #18]
  423f26:	f013 0f08 	tst.w	r3, #8
  423f2a:	d1d6      	bne.n	423eda <lv_label_set_text+0x36>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
  423f2c:	4630      	mov	r0, r6
  423f2e:	4b15      	ldr	r3, [pc, #84]	; (423f84 <lv_label_set_text+0xe0>)
  423f30:	4798      	blx	r3
  423f32:	1c41      	adds	r1, r0, #1
  423f34:	4630      	mov	r0, r6
  423f36:	4b17      	ldr	r3, [pc, #92]	; (423f94 <lv_label_set_text+0xf0>)
  423f38:	4798      	blx	r3
  423f3a:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
  423f3c:	4b0c      	ldr	r3, [pc, #48]	; (423f70 <lv_label_set_text+0xcc>)
  423f3e:	4798      	blx	r3
  423f40:	b928      	cbnz	r0, 423f4e <lv_label_set_text+0xaa>
  423f42:	6822      	ldr	r2, [r4, #0]
  423f44:	2300      	movs	r3, #0
  423f46:	4814      	ldr	r0, [pc, #80]	; (423f98 <lv_label_set_text+0xf4>)
  423f48:	490b      	ldr	r1, [pc, #44]	; (423f78 <lv_label_set_text+0xd4>)
  423f4a:	4788      	blx	r1
  423f4c:	e7fe      	b.n	423f4c <lv_label_set_text+0xa8>
        if(ext->text == NULL) return;
  423f4e:	6823      	ldr	r3, [r4, #0]
  423f50:	2b00      	cmp	r3, #0
  423f52:	d1db      	bne.n	423f0c <lv_label_set_text+0x68>
  423f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_mem_free(ext->text);
  423f56:	4630      	mov	r0, r6
  423f58:	4b10      	ldr	r3, [pc, #64]	; (423f9c <lv_label_set_text+0xf8>)
  423f5a:	4798      	blx	r3
            ext->text = NULL;
  423f5c:	2300      	movs	r3, #0
  423f5e:	6023      	str	r3, [r4, #0]
  423f60:	e7c0      	b.n	423ee4 <lv_label_set_text+0x40>
        LV_ASSERT_MEM(ext->text);
  423f62:	6822      	ldr	r2, [r4, #0]
  423f64:	2300      	movs	r3, #0
  423f66:	480c      	ldr	r0, [pc, #48]	; (423f98 <lv_label_set_text+0xf4>)
  423f68:	4903      	ldr	r1, [pc, #12]	; (423f78 <lv_label_set_text+0xd4>)
  423f6a:	4788      	blx	r1
  423f6c:	e7fe      	b.n	423f6c <lv_label_set_text+0xc8>
  423f6e:	bf00      	nop
  423f70:	00416da9 	.word	0x00416da9
  423f74:	0042e560 	.word	0x0042e560
  423f78:	00416db5 	.word	0x00416db5
  423f7c:	00405f01 	.word	0x00405f01
  423f80:	00407ffd 	.word	0x00407ffd
  423f84:	00428dc1 	.word	0x00428dc1
  423f88:	004174ed 	.word	0x004174ed
  423f8c:	00428cdd 	.word	0x00428cdd
  423f90:	00423861 	.word	0x00423861
  423f94:	0041781d 	.word	0x0041781d
  423f98:	0042e54c 	.word	0x0042e54c
  423f9c:	004175b1 	.word	0x004175b1

00423fa0 <lv_label_set_text_fmt>:
{
  423fa0:	b40e      	push	{r1, r2, r3}
  423fa2:	b570      	push	{r4, r5, r6, lr}
  423fa4:	b083      	sub	sp, #12
  423fa6:	4605      	mov	r5, r0
  423fa8:	9e07      	ldr	r6, [sp, #28]
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423faa:	4b1d      	ldr	r3, [pc, #116]	; (424020 <lv_label_set_text_fmt+0x80>)
  423fac:	4798      	blx	r3
  423fae:	b928      	cbnz	r0, 423fbc <lv_label_set_text_fmt+0x1c>
  423fb0:	462a      	mov	r2, r5
  423fb2:	2300      	movs	r3, #0
  423fb4:	481b      	ldr	r0, [pc, #108]	; (424024 <lv_label_set_text_fmt+0x84>)
  423fb6:	491c      	ldr	r1, [pc, #112]	; (424028 <lv_label_set_text_fmt+0x88>)
  423fb8:	4788      	blx	r1
  423fba:	e7fe      	b.n	423fba <lv_label_set_text_fmt+0x1a>
    LV_ASSERT_STR(fmt);
  423fbc:	4630      	mov	r0, r6
  423fbe:	4b18      	ldr	r3, [pc, #96]	; (424020 <lv_label_set_text_fmt+0x80>)
  423fc0:	4798      	blx	r3
  423fc2:	b928      	cbnz	r0, 423fd0 <lv_label_set_text_fmt+0x30>
  423fc4:	4632      	mov	r2, r6
  423fc6:	2300      	movs	r3, #0
  423fc8:	4816      	ldr	r0, [pc, #88]	; (424024 <lv_label_set_text_fmt+0x84>)
  423fca:	4917      	ldr	r1, [pc, #92]	; (424028 <lv_label_set_text_fmt+0x88>)
  423fcc:	4788      	blx	r1
  423fce:	e7fe      	b.n	423fce <lv_label_set_text_fmt+0x2e>
    lv_obj_invalidate(label);
  423fd0:	4628      	mov	r0, r5
  423fd2:	4b16      	ldr	r3, [pc, #88]	; (42402c <lv_label_set_text_fmt+0x8c>)
  423fd4:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423fd6:	4628      	mov	r0, r5
  423fd8:	4b15      	ldr	r3, [pc, #84]	; (424030 <lv_label_set_text_fmt+0x90>)
  423fda:	4798      	blx	r3
  423fdc:	4604      	mov	r4, r0
    if(fmt == NULL) {
  423fde:	b93e      	cbnz	r6, 423ff0 <lv_label_set_text_fmt+0x50>
        lv_label_refr_text(label);
  423fe0:	4628      	mov	r0, r5
  423fe2:	4b14      	ldr	r3, [pc, #80]	; (424034 <lv_label_set_text_fmt+0x94>)
  423fe4:	4798      	blx	r3
}
  423fe6:	b003      	add	sp, #12
  423fe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  423fec:	b003      	add	sp, #12
  423fee:	4770      	bx	lr
    if(ext->text != NULL && ext->static_txt == 0) {
  423ff0:	6800      	ldr	r0, [r0, #0]
  423ff2:	b138      	cbz	r0, 424004 <lv_label_set_text_fmt+0x64>
  423ff4:	7ca3      	ldrb	r3, [r4, #18]
  423ff6:	f013 0f08 	tst.w	r3, #8
  423ffa:	d103      	bne.n	424004 <lv_label_set_text_fmt+0x64>
        lv_mem_free(ext->text);
  423ffc:	4b0e      	ldr	r3, [pc, #56]	; (424038 <lv_label_set_text_fmt+0x98>)
  423ffe:	4798      	blx	r3
        ext->text = NULL;
  424000:	2300      	movs	r3, #0
  424002:	6023      	str	r3, [r4, #0]
    va_start(args, fmt);
  424004:	a908      	add	r1, sp, #32
  424006:	9101      	str	r1, [sp, #4]
    ext->text = _lv_txt_set_text_vfmt(fmt, args);
  424008:	4630      	mov	r0, r6
  42400a:	4b0c      	ldr	r3, [pc, #48]	; (42403c <lv_label_set_text_fmt+0x9c>)
  42400c:	4798      	blx	r3
  42400e:	6020      	str	r0, [r4, #0]
    ext->static_txt = 0; /*Now the text is dynamically allocated*/
  424010:	7ca3      	ldrb	r3, [r4, #18]
  424012:	f36f 03c3 	bfc	r3, #3, #1
  424016:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
  424018:	4628      	mov	r0, r5
  42401a:	4b06      	ldr	r3, [pc, #24]	; (424034 <lv_label_set_text_fmt+0x94>)
  42401c:	4798      	blx	r3
  42401e:	e7e2      	b.n	423fe6 <lv_label_set_text_fmt+0x46>
  424020:	00416da9 	.word	0x00416da9
  424024:	0042e560 	.word	0x0042e560
  424028:	00416db5 	.word	0x00416db5
  42402c:	00405f01 	.word	0x00405f01
  424030:	00407ffd 	.word	0x00407ffd
  424034:	00423861 	.word	0x00423861
  424038:	004175b1 	.word	0x004175b1
  42403c:	00418e85 	.word	0x00418e85

00424040 <lv_label_set_text_static>:
{
  424040:	b570      	push	{r4, r5, r6, lr}
  424042:	4605      	mov	r5, r0
  424044:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  424046:	4b10      	ldr	r3, [pc, #64]	; (424088 <lv_label_set_text_static+0x48>)
  424048:	4798      	blx	r3
  42404a:	b928      	cbnz	r0, 424058 <lv_label_set_text_static+0x18>
  42404c:	462a      	mov	r2, r5
  42404e:	2300      	movs	r3, #0
  424050:	480e      	ldr	r0, [pc, #56]	; (42408c <lv_label_set_text_static+0x4c>)
  424052:	490f      	ldr	r1, [pc, #60]	; (424090 <lv_label_set_text_static+0x50>)
  424054:	4788      	blx	r1
  424056:	e7fe      	b.n	424056 <lv_label_set_text_static+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  424058:	4628      	mov	r0, r5
  42405a:	4b0e      	ldr	r3, [pc, #56]	; (424094 <lv_label_set_text_static+0x54>)
  42405c:	4798      	blx	r3
  42405e:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
  424060:	7c83      	ldrb	r3, [r0, #18]
  424062:	f013 0f08 	tst.w	r3, #8
  424066:	d105      	bne.n	424074 <lv_label_set_text_static+0x34>
  424068:	6800      	ldr	r0, [r0, #0]
  42406a:	b118      	cbz	r0, 424074 <lv_label_set_text_static+0x34>
        lv_mem_free(ext->text);
  42406c:	4b0a      	ldr	r3, [pc, #40]	; (424098 <lv_label_set_text_static+0x58>)
  42406e:	4798      	blx	r3
        ext->text = NULL;
  424070:	2300      	movs	r3, #0
  424072:	6023      	str	r3, [r4, #0]
    if(text != NULL) {
  424074:	b126      	cbz	r6, 424080 <lv_label_set_text_static+0x40>
        ext->static_txt = 1;
  424076:	7ca3      	ldrb	r3, [r4, #18]
  424078:	f043 0308 	orr.w	r3, r3, #8
  42407c:	74a3      	strb	r3, [r4, #18]
        ext->text       = (char *)text;
  42407e:	6026      	str	r6, [r4, #0]
    lv_label_refr_text(label);
  424080:	4628      	mov	r0, r5
  424082:	4b06      	ldr	r3, [pc, #24]	; (42409c <lv_label_set_text_static+0x5c>)
  424084:	4798      	blx	r3
  424086:	bd70      	pop	{r4, r5, r6, pc}
  424088:	00416da9 	.word	0x00416da9
  42408c:	0042e560 	.word	0x0042e560
  424090:	00416db5 	.word	0x00416db5
  424094:	00407ffd 	.word	0x00407ffd
  424098:	004175b1 	.word	0x004175b1
  42409c:	00423861 	.word	0x00423861

004240a0 <lv_label_set_long_mode>:
{
  4240a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4240a2:	4605      	mov	r5, r0
  4240a4:	460f      	mov	r7, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  4240a6:	4b20      	ldr	r3, [pc, #128]	; (424128 <lv_label_set_long_mode+0x88>)
  4240a8:	4798      	blx	r3
  4240aa:	b928      	cbnz	r0, 4240b8 <lv_label_set_long_mode+0x18>
  4240ac:	462a      	mov	r2, r5
  4240ae:	2300      	movs	r3, #0
  4240b0:	481e      	ldr	r0, [pc, #120]	; (42412c <lv_label_set_long_mode+0x8c>)
  4240b2:	491f      	ldr	r1, [pc, #124]	; (424130 <lv_label_set_long_mode+0x90>)
  4240b4:	4788      	blx	r1
  4240b6:	e7fe      	b.n	4240b6 <lv_label_set_long_mode+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  4240b8:	4628      	mov	r0, r5
  4240ba:	4b1e      	ldr	r3, [pc, #120]	; (424134 <lv_label_set_long_mode+0x94>)
  4240bc:	4798      	blx	r3
  4240be:	4604      	mov	r4, r0
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
  4240c0:	491d      	ldr	r1, [pc, #116]	; (424138 <lv_label_set_long_mode+0x98>)
  4240c2:	4628      	mov	r0, r5
  4240c4:	4e1d      	ldr	r6, [pc, #116]	; (42413c <lv_label_set_long_mode+0x9c>)
  4240c6:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
  4240c8:	491d      	ldr	r1, [pc, #116]	; (424140 <lv_label_set_long_mode+0xa0>)
  4240ca:	4628      	mov	r0, r5
  4240cc:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  4240ce:	491d      	ldr	r1, [pc, #116]	; (424144 <lv_label_set_long_mode+0xa4>)
  4240d0:	4628      	mov	r0, r5
  4240d2:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  4240d4:	491c      	ldr	r1, [pc, #112]	; (424148 <lv_label_set_long_mode+0xa8>)
  4240d6:	4628      	mov	r0, r5
  4240d8:	47b0      	blx	r6
    ext->offset.x = 0;
  4240da:	2300      	movs	r3, #0
  4240dc:	81e3      	strh	r3, [r4, #14]
    ext->offset.y = 0;
  4240de:	8223      	strh	r3, [r4, #16]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
  4240e0:	1efb      	subs	r3, r7, #3
  4240e2:	b2db      	uxtb	r3, r3
  4240e4:	2b02      	cmp	r3, #2
  4240e6:	d810      	bhi.n	42410a <lv_label_set_long_mode+0x6a>
        ext->expand = 1;
  4240e8:	7ca3      	ldrb	r3, [r4, #18]
  4240ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4240ee:	74a3      	strb	r3, [r4, #18]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
  4240f0:	7ca3      	ldrb	r3, [r4, #18]
  4240f2:	f003 0307 	and.w	r3, r3, #7
  4240f6:	2b02      	cmp	r3, #2
  4240f8:	d00c      	beq.n	424114 <lv_label_set_long_mode+0x74>
    ext->long_mode = long_mode;
  4240fa:	7ca3      	ldrb	r3, [r4, #18]
  4240fc:	f367 0302 	bfi	r3, r7, #0, #3
  424100:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
  424102:	4628      	mov	r0, r5
  424104:	4b11      	ldr	r3, [pc, #68]	; (42414c <lv_label_set_long_mode+0xac>)
  424106:	4798      	blx	r3
  424108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->expand = 0;
  42410a:	7ca3      	ldrb	r3, [r4, #18]
  42410c:	f36f 13c7 	bfc	r3, #7, #1
  424110:	74a3      	strb	r3, [r4, #18]
  424112:	e7ed      	b.n	4240f0 <lv_label_set_long_mode+0x50>
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
  424114:	68a2      	ldr	r2, [r4, #8]
  424116:	f64f 73ff 	movw	r3, #65535	; 0xffff
  42411a:	429a      	cmp	r2, r3
  42411c:	d0ed      	beq.n	4240fa <lv_label_set_long_mode+0x5a>
        lv_label_revert_dots(label);
  42411e:	4628      	mov	r0, r5
  424120:	4b0b      	ldr	r3, [pc, #44]	; (424150 <lv_label_set_long_mode+0xb0>)
  424122:	4798      	blx	r3
  424124:	e7e9      	b.n	4240fa <lv_label_set_long_mode+0x5a>
  424126:	bf00      	nop
  424128:	00416da9 	.word	0x00416da9
  42412c:	0042e560 	.word	0x0042e560
  424130:	00416db5 	.word	0x00416db5
  424134:	00407ffd 	.word	0x00407ffd
  424138:	0040609d 	.word	0x0040609d
  42413c:	00416309 	.word	0x00416309
  424140:	004060dd 	.word	0x004060dd
  424144:	0042319d 	.word	0x0042319d
  424148:	00423181 	.word	0x00423181
  42414c:	00423861 	.word	0x00423861
  424150:	0042304d 	.word	0x0042304d

00424154 <lv_label_set_recolor>:
{
  424154:	b538      	push	{r3, r4, r5, lr}
  424156:	4604      	mov	r4, r0
  424158:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  42415a:	4b0e      	ldr	r3, [pc, #56]	; (424194 <lv_label_set_recolor+0x40>)
  42415c:	4798      	blx	r3
  42415e:	b928      	cbnz	r0, 42416c <lv_label_set_recolor+0x18>
  424160:	4622      	mov	r2, r4
  424162:	2300      	movs	r3, #0
  424164:	480c      	ldr	r0, [pc, #48]	; (424198 <lv_label_set_recolor+0x44>)
  424166:	490d      	ldr	r1, [pc, #52]	; (42419c <lv_label_set_recolor+0x48>)
  424168:	4788      	blx	r1
  42416a:	e7fe      	b.n	42416a <lv_label_set_recolor+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  42416c:	4620      	mov	r0, r4
  42416e:	4b0c      	ldr	r3, [pc, #48]	; (4241a0 <lv_label_set_recolor+0x4c>)
  424170:	4798      	blx	r3
    if(ext->recolor == en) return;
  424172:	7c83      	ldrb	r3, [r0, #18]
  424174:	f3c3 1380 	ubfx	r3, r3, #6, #1
  424178:	42ab      	cmp	r3, r5
  42417a:	d008      	beq.n	42418e <lv_label_set_recolor+0x3a>
    ext->recolor = en == false ? 0 : 1;
  42417c:	b945      	cbnz	r5, 424190 <lv_label_set_recolor+0x3c>
  42417e:	2200      	movs	r2, #0
  424180:	7c83      	ldrb	r3, [r0, #18]
  424182:	f362 1386 	bfi	r3, r2, #6, #1
  424186:	7483      	strb	r3, [r0, #18]
    lv_label_refr_text(label); /*Refresh the text because the potential color codes in text needs to
  424188:	4620      	mov	r0, r4
  42418a:	4b06      	ldr	r3, [pc, #24]	; (4241a4 <lv_label_set_recolor+0x50>)
  42418c:	4798      	blx	r3
  42418e:	bd38      	pop	{r3, r4, r5, pc}
    ext->recolor = en == false ? 0 : 1;
  424190:	2201      	movs	r2, #1
  424192:	e7f5      	b.n	424180 <lv_label_set_recolor+0x2c>
  424194:	00416da9 	.word	0x00416da9
  424198:	0042e560 	.word	0x0042e560
  42419c:	00416db5 	.word	0x00416db5
  4241a0:	00407ffd 	.word	0x00407ffd
  4241a4:	00423861 	.word	0x00423861

004241a8 <lv_label_create>:
{
  4241a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4241ac:	460f      	mov	r7, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
  4241ae:	4b6b      	ldr	r3, [pc, #428]	; (42435c <lv_label_create+0x1b4>)
  4241b0:	4798      	blx	r3
  4241b2:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_label);
  4241b4:	4b6a      	ldr	r3, [pc, #424]	; (424360 <lv_label_create+0x1b8>)
  4241b6:	4798      	blx	r3
  4241b8:	b1b0      	cbz	r0, 4241e8 <lv_label_create+0x40>
    if(new_label == NULL) return NULL;
  4241ba:	2c00      	cmp	r4, #0
  4241bc:	f000 8085 	beq.w	4242ca <lv_label_create+0x122>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
  4241c0:	4b68      	ldr	r3, [pc, #416]	; (424364 <lv_label_create+0x1bc>)
  4241c2:	681b      	ldr	r3, [r3, #0]
  4241c4:	b1b3      	cbz	r3, 4241f4 <lv_label_create+0x4c>
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
  4241c6:	2114      	movs	r1, #20
  4241c8:	4620      	mov	r0, r4
  4241ca:	4b67      	ldr	r3, [pc, #412]	; (424368 <lv_label_create+0x1c0>)
  4241cc:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
  4241ce:	4620      	mov	r0, r4
  4241d0:	4b66      	ldr	r3, [pc, #408]	; (42436c <lv_label_create+0x1c4>)
  4241d2:	4798      	blx	r3
  4241d4:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
  4241d6:	4b62      	ldr	r3, [pc, #392]	; (424360 <lv_label_create+0x1b8>)
  4241d8:	4798      	blx	r3
  4241da:	b988      	cbnz	r0, 424200 <lv_label_create+0x58>
  4241dc:	462a      	mov	r2, r5
  4241de:	2300      	movs	r3, #0
  4241e0:	4863      	ldr	r0, [pc, #396]	; (424370 <lv_label_create+0x1c8>)
  4241e2:	4964      	ldr	r1, [pc, #400]	; (424374 <lv_label_create+0x1cc>)
  4241e4:	4788      	blx	r1
  4241e6:	e7fe      	b.n	4241e6 <lv_label_create+0x3e>
    LV_ASSERT_MEM(new_label);
  4241e8:	4622      	mov	r2, r4
  4241ea:	2300      	movs	r3, #0
  4241ec:	4860      	ldr	r0, [pc, #384]	; (424370 <lv_label_create+0x1c8>)
  4241ee:	4961      	ldr	r1, [pc, #388]	; (424374 <lv_label_create+0x1cc>)
  4241f0:	4788      	blx	r1
  4241f2:	e7fe      	b.n	4241f2 <lv_label_create+0x4a>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
  4241f4:	4620      	mov	r0, r4
  4241f6:	4b60      	ldr	r3, [pc, #384]	; (424378 <lv_label_create+0x1d0>)
  4241f8:	4798      	blx	r3
  4241fa:	4b5a      	ldr	r3, [pc, #360]	; (424364 <lv_label_create+0x1bc>)
  4241fc:	6018      	str	r0, [r3, #0]
  4241fe:	e7e2      	b.n	4241c6 <lv_label_create+0x1e>
    if(ext == NULL) {
  424200:	2d00      	cmp	r5, #0
  424202:	d065      	beq.n	4242d0 <lv_label_create+0x128>
    ext->text       = NULL;
  424204:	2300      	movs	r3, #0
  424206:	602b      	str	r3, [r5, #0]
    ext->static_txt = 0;
  424208:	7caa      	ldrb	r2, [r5, #18]
    ext->align      = LV_LABEL_ALIGN_AUTO;
  42420a:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
    ext->dot_end    = LV_LABEL_DOT_END_INV;
  42420e:	f64f 71ff 	movw	r1, #65535	; 0xffff
  424212:	60a9      	str	r1, [r5, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
  424214:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  424218:	f363 0202 	bfi	r2, r3, #0, #3
  42421c:	74aa      	strb	r2, [r5, #18]
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
  42421e:	2219      	movs	r2, #25
  424220:	81aa      	strh	r2, [r5, #12]
    ext->offset.x = 0;
  424222:	81eb      	strh	r3, [r5, #14]
    ext->offset.y = 0;
  424224:	822b      	strh	r3, [r5, #16]
    ext->dot.tmp_ptr   = NULL;
  424226:	606b      	str	r3, [r5, #4]
    ext->dot_tmp_alloc = 0;
  424228:	7cea      	ldrb	r2, [r5, #19]
  42422a:	f363 0200 	bfi	r2, r3, #0, #1
  42422e:	74ea      	strb	r2, [r5, #19]
    lv_obj_set_design_cb(new_label, lv_label_design);
  424230:	4952      	ldr	r1, [pc, #328]	; (42437c <lv_label_create+0x1d4>)
  424232:	4620      	mov	r0, r4
  424234:	4b52      	ldr	r3, [pc, #328]	; (424380 <lv_label_create+0x1d8>)
  424236:	4798      	blx	r3
    lv_obj_set_signal_cb(new_label, lv_label_signal);
  424238:	4952      	ldr	r1, [pc, #328]	; (424384 <lv_label_create+0x1dc>)
  42423a:	4620      	mov	r0, r4
  42423c:	4b52      	ldr	r3, [pc, #328]	; (424388 <lv_label_create+0x1e0>)
  42423e:	4798      	blx	r3
    if(copy == NULL) {
  424240:	2f00      	cmp	r7, #0
  424242:	d04a      	beq.n	4242da <lv_label_create+0x132>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  424244:	4638      	mov	r0, r7
  424246:	4b49      	ldr	r3, [pc, #292]	; (42436c <lv_label_create+0x1c4>)
  424248:	4798      	blx	r3
  42424a:	4606      	mov	r6, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
  42424c:	4638      	mov	r0, r7
  42424e:	4b4f      	ldr	r3, [pc, #316]	; (42438c <lv_label_create+0x1e4>)
  424250:	4798      	blx	r3
  424252:	4601      	mov	r1, r0
  424254:	4620      	mov	r0, r4
  424256:	4b4e      	ldr	r3, [pc, #312]	; (424390 <lv_label_create+0x1e8>)
  424258:	4798      	blx	r3
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
  42425a:	4638      	mov	r0, r7
  42425c:	4b4d      	ldr	r3, [pc, #308]	; (424394 <lv_label_create+0x1ec>)
  42425e:	4798      	blx	r3
  424260:	4601      	mov	r1, r0
  424262:	4620      	mov	r0, r4
  424264:	4b4c      	ldr	r3, [pc, #304]	; (424398 <lv_label_create+0x1f0>)
  424266:	4798      	blx	r3
        lv_label_set_align(new_label, lv_label_get_align(copy));
  424268:	4638      	mov	r0, r7
  42426a:	4b4c      	ldr	r3, [pc, #304]	; (42439c <lv_label_create+0x1f4>)
  42426c:	4798      	blx	r3
  42426e:	4601      	mov	r1, r0
  424270:	4620      	mov	r0, r4
  424272:	4b4b      	ldr	r3, [pc, #300]	; (4243a0 <lv_label_create+0x1f8>)
  424274:	4798      	blx	r3
        if(copy_ext->static_txt == 0)
  424276:	7cb3      	ldrb	r3, [r6, #18]
  424278:	f013 0f08 	tst.w	r3, #8
  42427c:	d13e      	bne.n	4242fc <lv_label_create+0x154>
            lv_label_set_text(new_label, lv_label_get_text(copy));
  42427e:	4638      	mov	r0, r7
  424280:	4b48      	ldr	r3, [pc, #288]	; (4243a4 <lv_label_create+0x1fc>)
  424282:	4798      	blx	r3
  424284:	4601      	mov	r1, r0
  424286:	4620      	mov	r0, r4
  424288:	4b47      	ldr	r3, [pc, #284]	; (4243a8 <lv_label_create+0x200>)
  42428a:	4798      	blx	r3
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
  42428c:	7cb3      	ldrb	r3, [r6, #18]
  42428e:	f003 0307 	and.w	r3, r3, #7
  424292:	2b02      	cmp	r3, #2
  424294:	d03a      	beq.n	42430c <lv_label_create+0x164>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
  424296:	7cf3      	ldrb	r3, [r6, #19]
  424298:	f013 0f01 	tst.w	r3, #1
  42429c:	d055      	beq.n	42434a <lv_label_create+0x1a2>
  42429e:	6870      	ldr	r0, [r6, #4]
  4242a0:	2800      	cmp	r0, #0
  4242a2:	d052      	beq.n	42434a <lv_label_create+0x1a2>
            uint32_t len = (uint32_t)strlen(copy_ext->dot.tmp_ptr);
  4242a4:	4b41      	ldr	r3, [pc, #260]	; (4243ac <lv_label_create+0x204>)
  4242a6:	4798      	blx	r3
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
  4242a8:	4602      	mov	r2, r0
  4242aa:	6869      	ldr	r1, [r5, #4]
  4242ac:	4620      	mov	r0, r4
  4242ae:	4b40      	ldr	r3, [pc, #256]	; (4243b0 <lv_label_create+0x208>)
  4242b0:	4798      	blx	r3
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
  4242b2:	7cf2      	ldrb	r2, [r6, #19]
  4242b4:	7ceb      	ldrb	r3, [r5, #19]
  4242b6:	f362 0300 	bfi	r3, r2, #0, #1
  4242ba:	74eb      	strb	r3, [r5, #19]
        ext->dot_end       = copy_ext->dot_end;
  4242bc:	68b3      	ldr	r3, [r6, #8]
  4242be:	60ab      	str	r3, [r5, #8]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  4242c0:	22ff      	movs	r2, #255	; 0xff
  4242c2:	4611      	mov	r1, r2
  4242c4:	4620      	mov	r0, r4
  4242c6:	4b3b      	ldr	r3, [pc, #236]	; (4243b4 <lv_label_create+0x20c>)
  4242c8:	4798      	blx	r3
}
  4242ca:	4620      	mov	r0, r4
  4242cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_del(new_label);
  4242d0:	4620      	mov	r0, r4
  4242d2:	4b39      	ldr	r3, [pc, #228]	; (4243b8 <lv_label_create+0x210>)
  4242d4:	4798      	blx	r3
        return NULL;
  4242d6:	2400      	movs	r4, #0
  4242d8:	e7f7      	b.n	4242ca <lv_label_create+0x122>
        lv_theme_apply(new_label, LV_THEME_LABEL);
  4242da:	2112      	movs	r1, #18
  4242dc:	4620      	mov	r0, r4
  4242de:	4b37      	ldr	r3, [pc, #220]	; (4243bc <lv_label_create+0x214>)
  4242e0:	4798      	blx	r3
        lv_obj_set_click(new_label, false);
  4242e2:	2100      	movs	r1, #0
  4242e4:	4620      	mov	r0, r4
  4242e6:	4b36      	ldr	r3, [pc, #216]	; (4243c0 <lv_label_create+0x218>)
  4242e8:	4798      	blx	r3
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
  4242ea:	2100      	movs	r1, #0
  4242ec:	4620      	mov	r0, r4
  4242ee:	4b28      	ldr	r3, [pc, #160]	; (424390 <lv_label_create+0x1e8>)
  4242f0:	4798      	blx	r3
        lv_label_set_text(new_label, "Text");
  4242f2:	4934      	ldr	r1, [pc, #208]	; (4243c4 <lv_label_create+0x21c>)
  4242f4:	4620      	mov	r0, r4
  4242f6:	4b2c      	ldr	r3, [pc, #176]	; (4243a8 <lv_label_create+0x200>)
  4242f8:	4798      	blx	r3
  4242fa:	e7e6      	b.n	4242ca <lv_label_create+0x122>
            lv_label_set_text_static(new_label, lv_label_get_text(copy));
  4242fc:	4638      	mov	r0, r7
  4242fe:	4b29      	ldr	r3, [pc, #164]	; (4243a4 <lv_label_create+0x1fc>)
  424300:	4798      	blx	r3
  424302:	4601      	mov	r1, r0
  424304:	4620      	mov	r0, r4
  424306:	4b30      	ldr	r3, [pc, #192]	; (4243c8 <lv_label_create+0x220>)
  424308:	4798      	blx	r3
  42430a:	e7bf      	b.n	42428c <lv_label_create+0xe4>
            ext->text = lv_mem_realloc(ext->text, _lv_mem_get_size(copy_ext->text));
  42430c:	682f      	ldr	r7, [r5, #0]
  42430e:	6830      	ldr	r0, [r6, #0]
  424310:	4b2e      	ldr	r3, [pc, #184]	; (4243cc <lv_label_create+0x224>)
  424312:	4798      	blx	r3
  424314:	4601      	mov	r1, r0
  424316:	4638      	mov	r0, r7
  424318:	4b2d      	ldr	r3, [pc, #180]	; (4243d0 <lv_label_create+0x228>)
  42431a:	4798      	blx	r3
  42431c:	6028      	str	r0, [r5, #0]
            LV_ASSERT_MEM(ext->text);
  42431e:	4b10      	ldr	r3, [pc, #64]	; (424360 <lv_label_create+0x1b8>)
  424320:	4798      	blx	r3
  424322:	b928      	cbnz	r0, 424330 <lv_label_create+0x188>
  424324:	682a      	ldr	r2, [r5, #0]
  424326:	2300      	movs	r3, #0
  424328:	4811      	ldr	r0, [pc, #68]	; (424370 <lv_label_create+0x1c8>)
  42432a:	4912      	ldr	r1, [pc, #72]	; (424374 <lv_label_create+0x1cc>)
  42432c:	4788      	blx	r1
  42432e:	e7fe      	b.n	42432e <lv_label_create+0x186>
            if(ext->text == NULL) return NULL;
  424330:	682f      	ldr	r7, [r5, #0]
  424332:	b187      	cbz	r7, 424356 <lv_label_create+0x1ae>
            _lv_memcpy(ext->text, copy_ext->text, _lv_mem_get_size(copy_ext->text));
  424334:	f8d6 8000 	ldr.w	r8, [r6]
  424338:	4640      	mov	r0, r8
  42433a:	4b24      	ldr	r3, [pc, #144]	; (4243cc <lv_label_create+0x224>)
  42433c:	4798      	blx	r3
  42433e:	4602      	mov	r2, r0
  424340:	4641      	mov	r1, r8
  424342:	4638      	mov	r0, r7
  424344:	4b23      	ldr	r3, [pc, #140]	; (4243d4 <lv_label_create+0x22c>)
  424346:	4798      	blx	r3
  424348:	e7a5      	b.n	424296 <lv_label_create+0xee>
            _lv_memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
  42434a:	2204      	movs	r2, #4
  42434c:	18b1      	adds	r1, r6, r2
  42434e:	18a8      	adds	r0, r5, r2
  424350:	4b20      	ldr	r3, [pc, #128]	; (4243d4 <lv_label_create+0x22c>)
  424352:	4798      	blx	r3
  424354:	e7ad      	b.n	4242b2 <lv_label_create+0x10a>
            if(ext->text == NULL) return NULL;
  424356:	2400      	movs	r4, #0
  424358:	e7b7      	b.n	4242ca <lv_label_create+0x122>
  42435a:	bf00      	nop
  42435c:	004067bd 	.word	0x004067bd
  424360:	00416da9 	.word	0x00416da9
  424364:	20414860 	.word	0x20414860
  424368:	004058e9 	.word	0x004058e9
  42436c:	00407ffd 	.word	0x00407ffd
  424370:	0042e54c 	.word	0x0042e54c
  424374:	00416db5 	.word	0x00416db5
  424378:	00407fad 	.word	0x00407fad
  42437c:	004235b9 	.word	0x004235b9
  424380:	004058c1 	.word	0x004058c1
  424384:	00423dad 	.word	0x00423dad
  424388:	00405885 	.word	0x00405885
  42438c:	00423235 	.word	0x00423235
  424390:	004240a1 	.word	0x004240a1
  424394:	004232a5 	.word	0x004232a5
  424398:	00424155 	.word	0x00424155
  42439c:	00423269 	.word	0x00423269
  4243a0:	004231b9 	.word	0x004231b9
  4243a4:	00423205 	.word	0x00423205
  4243a8:	00423ea5 	.word	0x00423ea5
  4243ac:	00428dc1 	.word	0x00428dc1
  4243b0:	00423119 	.word	0x00423119
  4243b4:	00407809 	.word	0x00407809
  4243b8:	0040815d 	.word	0x0040815d
  4243bc:	004192a5 	.word	0x004192a5
  4243c0:	004056c5 	.word	0x004056c5
  4243c4:	00431cd4 	.word	0x00431cd4
  4243c8:	00424041 	.word	0x00424041
  4243cc:	00417625 	.word	0x00417625
  4243d0:	0041781d 	.word	0x0041781d
  4243d4:	004176fd 	.word	0x004176fd

004243d8 <lv_linemeter_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_linemeter_signal(lv_obj_t * lmeter, lv_signal_t sign, void * param)
{
  4243d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4243da:	4606      	mov	r6, r0
  4243dc:	460d      	mov	r5, r1
  4243de:	4617      	mov	r7, r2
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(lmeter, sign, param);
  4243e0:	4b0d      	ldr	r3, [pc, #52]	; (424418 <lv_linemeter_signal+0x40>)
  4243e2:	681b      	ldr	r3, [r3, #0]
  4243e4:	4798      	blx	r3
  4243e6:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
  4243e8:	2801      	cmp	r0, #1
  4243ea:	d001      	beq.n	4243f0 <lv_linemeter_signal+0x18>
        lv_obj_refresh_ext_draw_pad(lmeter);
        lv_obj_invalidate(lmeter);
    }

    return res;
}
  4243ec:	4620      	mov	r0, r4
  4243ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  4243f0:	2d07      	cmp	r5, #7
  4243f2:	d00a      	beq.n	42440a <lv_linemeter_signal+0x32>
    if(sign == LV_SIGNAL_CLEANUP) {
  4243f4:	2d00      	cmp	r5, #0
  4243f6:	d0f9      	beq.n	4243ec <lv_linemeter_signal+0x14>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  4243f8:	2d04      	cmp	r5, #4
  4243fa:	d1f7      	bne.n	4243ec <lv_linemeter_signal+0x14>
        lv_obj_refresh_ext_draw_pad(lmeter);
  4243fc:	4630      	mov	r0, r6
  4243fe:	4b07      	ldr	r3, [pc, #28]	; (42441c <lv_linemeter_signal+0x44>)
  424400:	4798      	blx	r3
        lv_obj_invalidate(lmeter);
  424402:	4630      	mov	r0, r6
  424404:	4b06      	ldr	r3, [pc, #24]	; (424420 <lv_linemeter_signal+0x48>)
  424406:	4798      	blx	r3
  424408:	e7f0      	b.n	4243ec <lv_linemeter_signal+0x14>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  42440a:	4906      	ldr	r1, [pc, #24]	; (424424 <lv_linemeter_signal+0x4c>)
  42440c:	4638      	mov	r0, r7
  42440e:	4b06      	ldr	r3, [pc, #24]	; (424428 <lv_linemeter_signal+0x50>)
  424410:	4798      	blx	r3
  424412:	4604      	mov	r4, r0
  424414:	e7ea      	b.n	4243ec <lv_linemeter_signal+0x14>
  424416:	bf00      	nop
  424418:	20414864 	.word	0x20414864
  42441c:	00405925 	.word	0x00405925
  424420:	00405f01 	.word	0x00405f01
  424424:	00431ce8 	.word	0x00431ce8
  424428:	00408289 	.word	0x00408289

0042442c <lv_linemeter_create>:
{
  42442c:	b570      	push	{r4, r5, r6, lr}
  42442e:	460e      	mov	r6, r1
    lv_obj_t * linemeter = lv_obj_create(par, copy);
  424430:	4b30      	ldr	r3, [pc, #192]	; (4244f4 <lv_linemeter_create+0xc8>)
  424432:	4798      	blx	r3
  424434:	4605      	mov	r5, r0
    LV_ASSERT_MEM(linemeter);
  424436:	4b30      	ldr	r3, [pc, #192]	; (4244f8 <lv_linemeter_create+0xcc>)
  424438:	4798      	blx	r3
  42443a:	b190      	cbz	r0, 424462 <lv_linemeter_create+0x36>
    if(linemeter == NULL) return NULL;
  42443c:	2d00      	cmp	r5, #0
  42443e:	d047      	beq.n	4244d0 <lv_linemeter_create+0xa4>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(linemeter);
  424440:	4b2e      	ldr	r3, [pc, #184]	; (4244fc <lv_linemeter_create+0xd0>)
  424442:	681b      	ldr	r3, [r3, #0]
  424444:	b19b      	cbz	r3, 42446e <lv_linemeter_create+0x42>
    lv_linemeter_ext_t * ext = lv_obj_allocate_ext_attr(linemeter, sizeof(lv_linemeter_ext_t));
  424446:	2118      	movs	r1, #24
  424448:	4628      	mov	r0, r5
  42444a:	4b2d      	ldr	r3, [pc, #180]	; (424500 <lv_linemeter_create+0xd4>)
  42444c:	4798      	blx	r3
  42444e:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ext);
  424450:	4b29      	ldr	r3, [pc, #164]	; (4244f8 <lv_linemeter_create+0xcc>)
  424452:	4798      	blx	r3
  424454:	b988      	cbnz	r0, 42447a <lv_linemeter_create+0x4e>
  424456:	4622      	mov	r2, r4
  424458:	2300      	movs	r3, #0
  42445a:	482a      	ldr	r0, [pc, #168]	; (424504 <lv_linemeter_create+0xd8>)
  42445c:	492a      	ldr	r1, [pc, #168]	; (424508 <lv_linemeter_create+0xdc>)
  42445e:	4788      	blx	r1
  424460:	e7fe      	b.n	424460 <lv_linemeter_create+0x34>
    LV_ASSERT_MEM(linemeter);
  424462:	462a      	mov	r2, r5
  424464:	2300      	movs	r3, #0
  424466:	4827      	ldr	r0, [pc, #156]	; (424504 <lv_linemeter_create+0xd8>)
  424468:	4927      	ldr	r1, [pc, #156]	; (424508 <lv_linemeter_create+0xdc>)
  42446a:	4788      	blx	r1
  42446c:	e7fe      	b.n	42446c <lv_linemeter_create+0x40>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(linemeter);
  42446e:	4628      	mov	r0, r5
  424470:	4b26      	ldr	r3, [pc, #152]	; (42450c <lv_linemeter_create+0xe0>)
  424472:	4798      	blx	r3
  424474:	4b21      	ldr	r3, [pc, #132]	; (4244fc <lv_linemeter_create+0xd0>)
  424476:	6018      	str	r0, [r3, #0]
  424478:	e7e5      	b.n	424446 <lv_linemeter_create+0x1a>
    if(ext == NULL) {
  42447a:	2c00      	cmp	r4, #0
  42447c:	d02a      	beq.n	4244d4 <lv_linemeter_create+0xa8>
    ext->min_value   = 0;
  42447e:	2300      	movs	r3, #0
  424480:	60e3      	str	r3, [r4, #12]
    ext->max_value   = 100;
  424482:	2264      	movs	r2, #100	; 0x64
  424484:	6122      	str	r2, [r4, #16]
    ext->cur_value   = 0;
  424486:	60a3      	str	r3, [r4, #8]
    ext->line_cnt    = 18;
  424488:	2212      	movs	r2, #18
  42448a:	80a2      	strh	r2, [r4, #4]
    ext->scale_angle = 240;
  42448c:	22f0      	movs	r2, #240	; 0xf0
  42448e:	8022      	strh	r2, [r4, #0]
    ext->angle_ofs = 0;
  424490:	8063      	strh	r3, [r4, #2]
    ext->mirrored = 0;
  424492:	7d22      	ldrb	r2, [r4, #20]
  424494:	f363 0200 	bfi	r2, r3, #0, #1
  424498:	7522      	strb	r2, [r4, #20]
    lv_obj_set_signal_cb(linemeter, lv_linemeter_signal);
  42449a:	491d      	ldr	r1, [pc, #116]	; (424510 <lv_linemeter_create+0xe4>)
  42449c:	4628      	mov	r0, r5
  42449e:	4b1d      	ldr	r3, [pc, #116]	; (424514 <lv_linemeter_create+0xe8>)
  4244a0:	4798      	blx	r3
    lv_obj_set_design_cb(linemeter, lv_linemeter_design);
  4244a2:	491d      	ldr	r1, [pc, #116]	; (424518 <lv_linemeter_create+0xec>)
  4244a4:	4628      	mov	r0, r5
  4244a6:	4b1d      	ldr	r3, [pc, #116]	; (42451c <lv_linemeter_create+0xf0>)
  4244a8:	4798      	blx	r3
    if(copy == NULL) {
  4244aa:	b1c6      	cbz	r6, 4244de <lv_linemeter_create+0xb2>
        lv_linemeter_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  4244ac:	4630      	mov	r0, r6
  4244ae:	4b1c      	ldr	r3, [pc, #112]	; (424520 <lv_linemeter_create+0xf4>)
  4244b0:	4798      	blx	r3
        ext->scale_angle           = copy_ext->scale_angle;
  4244b2:	8803      	ldrh	r3, [r0, #0]
  4244b4:	8023      	strh	r3, [r4, #0]
        ext->line_cnt              = copy_ext->line_cnt;
  4244b6:	8883      	ldrh	r3, [r0, #4]
  4244b8:	80a3      	strh	r3, [r4, #4]
        ext->min_value             = copy_ext->min_value;
  4244ba:	68c3      	ldr	r3, [r0, #12]
  4244bc:	60e3      	str	r3, [r4, #12]
        ext->max_value             = copy_ext->max_value;
  4244be:	6903      	ldr	r3, [r0, #16]
  4244c0:	6123      	str	r3, [r4, #16]
        ext->cur_value             = copy_ext->cur_value;
  4244c2:	6883      	ldr	r3, [r0, #8]
  4244c4:	60a3      	str	r3, [r4, #8]
        lv_obj_refresh_style(linemeter, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  4244c6:	22ff      	movs	r2, #255	; 0xff
  4244c8:	4611      	mov	r1, r2
  4244ca:	4628      	mov	r0, r5
  4244cc:	4b15      	ldr	r3, [pc, #84]	; (424524 <lv_linemeter_create+0xf8>)
  4244ce:	4798      	blx	r3
}
  4244d0:	4628      	mov	r0, r5
  4244d2:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_del(linemeter);
  4244d4:	4628      	mov	r0, r5
  4244d6:	4b14      	ldr	r3, [pc, #80]	; (424528 <lv_linemeter_create+0xfc>)
  4244d8:	4798      	blx	r3
        return NULL;
  4244da:	2500      	movs	r5, #0
  4244dc:	e7f8      	b.n	4244d0 <lv_linemeter_create+0xa4>
        lv_obj_set_size(linemeter, 3 * LV_DPI / 2, 3 * LV_DPI / 2);
  4244de:	22de      	movs	r2, #222	; 0xde
  4244e0:	4611      	mov	r1, r2
  4244e2:	4628      	mov	r0, r5
  4244e4:	4b11      	ldr	r3, [pc, #68]	; (42452c <lv_linemeter_create+0x100>)
  4244e6:	4798      	blx	r3
        lv_theme_apply(linemeter, LV_THEME_LINEMETER);
  4244e8:	2117      	movs	r1, #23
  4244ea:	4628      	mov	r0, r5
  4244ec:	4b10      	ldr	r3, [pc, #64]	; (424530 <lv_linemeter_create+0x104>)
  4244ee:	4798      	blx	r3
  4244f0:	e7ee      	b.n	4244d0 <lv_linemeter_create+0xa4>
  4244f2:	bf00      	nop
  4244f4:	004067bd 	.word	0x004067bd
  4244f8:	00416da9 	.word	0x00416da9
  4244fc:	20414864 	.word	0x20414864
  424500:	004058e9 	.word	0x004058e9
  424504:	0042e54c 	.word	0x0042e54c
  424508:	00416db5 	.word	0x00416db5
  42450c:	00407fad 	.word	0x00407fad
  424510:	004243d9 	.word	0x004243d9
  424514:	00405885 	.word	0x00405885
  424518:	00424be5 	.word	0x00424be5
  42451c:	004058c1 	.word	0x004058c1
  424520:	00407ffd 	.word	0x00407ffd
  424524:	00407809 	.word	0x00407809
  424528:	0040815d 	.word	0x0040815d
  42452c:	00406be1 	.word	0x00406be1
  424530:	004192a5 	.word	0x004192a5

00424534 <lv_linemeter_set_value>:
{
  424534:	b538      	push	{r3, r4, r5, lr}
  424536:	4605      	mov	r5, r0
  424538:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(lmeter, LV_OBJX_NAME);
  42453a:	4b17      	ldr	r3, [pc, #92]	; (424598 <lv_linemeter_set_value+0x64>)
  42453c:	4798      	blx	r3
  42453e:	b928      	cbnz	r0, 42454c <lv_linemeter_set_value+0x18>
  424540:	462a      	mov	r2, r5
  424542:	2300      	movs	r3, #0
  424544:	4815      	ldr	r0, [pc, #84]	; (42459c <lv_linemeter_set_value+0x68>)
  424546:	4916      	ldr	r1, [pc, #88]	; (4245a0 <lv_linemeter_set_value+0x6c>)
  424548:	4788      	blx	r1
  42454a:	e7fe      	b.n	42454a <lv_linemeter_set_value+0x16>
    lv_linemeter_ext_t * ext = lv_obj_get_ext_attr(lmeter);
  42454c:	4628      	mov	r0, r5
  42454e:	4b15      	ldr	r3, [pc, #84]	; (4245a4 <lv_linemeter_set_value+0x70>)
  424550:	4798      	blx	r3
    if(ext->cur_value == value) return;
  424552:	6882      	ldr	r2, [r0, #8]
  424554:	42a2      	cmp	r2, r4
  424556:	d01d      	beq.n	424594 <lv_linemeter_set_value+0x60>
    ext->cur_value = value > ext->max_value ? ext->max_value : value;
  424558:	6901      	ldr	r1, [r0, #16]
  42455a:	4623      	mov	r3, r4
  42455c:	428c      	cmp	r4, r1
  42455e:	bfa8      	it	ge
  424560:	460b      	movge	r3, r1
    ext->cur_value = ext->cur_value < ext->min_value ? ext->min_value : ext->cur_value;
  424562:	68c4      	ldr	r4, [r0, #12]
  424564:	42a3      	cmp	r3, r4
  424566:	bfb8      	it	lt
  424568:	4623      	movlt	r3, r4
  42456a:	6083      	str	r3, [r0, #8]
        (int32_t)((int32_t)(old_value - ext->min_value) * (ext->line_cnt - 1)) / (ext->max_value - ext->min_value);
  42456c:	1b12      	subs	r2, r2, r4
  42456e:	8880      	ldrh	r0, [r0, #4]
  424570:	3801      	subs	r0, #1
  424572:	fb00 f202 	mul.w	r2, r0, r2
  424576:	1b09      	subs	r1, r1, r4
  424578:	fb92 f2f1 	sdiv	r2, r2, r1
    int16_t level_old =
  42457c:	b212      	sxth	r2, r2
        (int32_t)((int32_t)(ext->cur_value - ext->min_value) * (ext->line_cnt - 1)) / (ext->max_value - ext->min_value);
  42457e:	1b1b      	subs	r3, r3, r4
  424580:	fb03 f300 	mul.w	r3, r3, r0
  424584:	fb93 f3f1 	sdiv	r3, r3, r1
    int16_t level_new =
  424588:	b21b      	sxth	r3, r3
    if(level_new == level_old) return;
  42458a:	429a      	cmp	r2, r3
  42458c:	d002      	beq.n	424594 <lv_linemeter_set_value+0x60>
    lv_obj_invalidate(lmeter);
  42458e:	4628      	mov	r0, r5
  424590:	4b05      	ldr	r3, [pc, #20]	; (4245a8 <lv_linemeter_set_value+0x74>)
  424592:	4798      	blx	r3
  424594:	bd38      	pop	{r3, r4, r5, pc}
  424596:	bf00      	nop
  424598:	00416da9 	.word	0x00416da9
  42459c:	0042e560 	.word	0x0042e560
  4245a0:	00416db5 	.word	0x00416db5
  4245a4:	00407ffd 	.word	0x00407ffd
  4245a8:	00405f01 	.word	0x00405f01

004245ac <lv_linemeter_set_range>:
{
  4245ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4245ae:	4605      	mov	r5, r0
  4245b0:	460e      	mov	r6, r1
  4245b2:	4617      	mov	r7, r2
    LV_ASSERT_OBJ(lmeter, LV_OBJX_NAME);
  4245b4:	4b15      	ldr	r3, [pc, #84]	; (42460c <lv_linemeter_set_range+0x60>)
  4245b6:	4798      	blx	r3
  4245b8:	b928      	cbnz	r0, 4245c6 <lv_linemeter_set_range+0x1a>
  4245ba:	462a      	mov	r2, r5
  4245bc:	2300      	movs	r3, #0
  4245be:	4814      	ldr	r0, [pc, #80]	; (424610 <lv_linemeter_set_range+0x64>)
  4245c0:	4914      	ldr	r1, [pc, #80]	; (424614 <lv_linemeter_set_range+0x68>)
  4245c2:	4788      	blx	r1
  4245c4:	e7fe      	b.n	4245c4 <lv_linemeter_set_range+0x18>
    lv_linemeter_ext_t * ext = lv_obj_get_ext_attr(lmeter);
  4245c6:	4628      	mov	r0, r5
  4245c8:	4b13      	ldr	r3, [pc, #76]	; (424618 <lv_linemeter_set_range+0x6c>)
  4245ca:	4798      	blx	r3
  4245cc:	4604      	mov	r4, r0
    if(ext->min_value == min && ext->max_value == max) return;
  4245ce:	68c3      	ldr	r3, [r0, #12]
  4245d0:	42b3      	cmp	r3, r6
  4245d2:	d00b      	beq.n	4245ec <lv_linemeter_set_range+0x40>
    ext->max_value = max;
  4245d4:	6127      	str	r7, [r4, #16]
    ext->min_value = min;
  4245d6:	60e6      	str	r6, [r4, #12]
    if(ext->cur_value > max) {
  4245d8:	68a3      	ldr	r3, [r4, #8]
  4245da:	429f      	cmp	r7, r3
  4245dc:	db0a      	blt.n	4245f4 <lv_linemeter_set_range+0x48>
    if(ext->cur_value < min) {
  4245de:	68a3      	ldr	r3, [r4, #8]
  4245e0:	429e      	cmp	r6, r3
  4245e2:	dc0d      	bgt.n	424600 <lv_linemeter_set_range+0x54>
    lv_obj_invalidate(lmeter);
  4245e4:	4628      	mov	r0, r5
  4245e6:	4b0d      	ldr	r3, [pc, #52]	; (42461c <lv_linemeter_set_range+0x70>)
  4245e8:	4798      	blx	r3
  4245ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ext->min_value == min && ext->max_value == max) return;
  4245ec:	6903      	ldr	r3, [r0, #16]
  4245ee:	42bb      	cmp	r3, r7
  4245f0:	d1f0      	bne.n	4245d4 <lv_linemeter_set_range+0x28>
  4245f2:	e7fa      	b.n	4245ea <lv_linemeter_set_range+0x3e>
        ext->cur_value = max;
  4245f4:	60a7      	str	r7, [r4, #8]
        lv_linemeter_set_value(lmeter, ext->cur_value);
  4245f6:	4639      	mov	r1, r7
  4245f8:	4628      	mov	r0, r5
  4245fa:	4b09      	ldr	r3, [pc, #36]	; (424620 <lv_linemeter_set_range+0x74>)
  4245fc:	4798      	blx	r3
  4245fe:	e7ee      	b.n	4245de <lv_linemeter_set_range+0x32>
        ext->cur_value = min;
  424600:	60a6      	str	r6, [r4, #8]
        lv_linemeter_set_value(lmeter, ext->cur_value);
  424602:	4631      	mov	r1, r6
  424604:	4628      	mov	r0, r5
  424606:	4b06      	ldr	r3, [pc, #24]	; (424620 <lv_linemeter_set_range+0x74>)
  424608:	4798      	blx	r3
  42460a:	e7eb      	b.n	4245e4 <lv_linemeter_set_range+0x38>
  42460c:	00416da9 	.word	0x00416da9
  424610:	0042e560 	.word	0x0042e560
  424614:	00416db5 	.word	0x00416db5
  424618:	00407ffd 	.word	0x00407ffd
  42461c:	00405f01 	.word	0x00405f01
  424620:	00424535 	.word	0x00424535

00424624 <lv_linemeter_set_scale>:
{
  424624:	b570      	push	{r4, r5, r6, lr}
  424626:	4604      	mov	r4, r0
  424628:	460e      	mov	r6, r1
  42462a:	4615      	mov	r5, r2
    LV_ASSERT_OBJ(lmeter, LV_OBJX_NAME);
  42462c:	4b0c      	ldr	r3, [pc, #48]	; (424660 <lv_linemeter_set_scale+0x3c>)
  42462e:	4798      	blx	r3
  424630:	b928      	cbnz	r0, 42463e <lv_linemeter_set_scale+0x1a>
  424632:	4622      	mov	r2, r4
  424634:	2300      	movs	r3, #0
  424636:	480b      	ldr	r0, [pc, #44]	; (424664 <lv_linemeter_set_scale+0x40>)
  424638:	490b      	ldr	r1, [pc, #44]	; (424668 <lv_linemeter_set_scale+0x44>)
  42463a:	4788      	blx	r1
  42463c:	e7fe      	b.n	42463c <lv_linemeter_set_scale+0x18>
    lv_linemeter_ext_t * ext = lv_obj_get_ext_attr(lmeter);
  42463e:	4620      	mov	r0, r4
  424640:	4b0a      	ldr	r3, [pc, #40]	; (42466c <lv_linemeter_set_scale+0x48>)
  424642:	4798      	blx	r3
    if(ext->scale_angle == angle && ext->line_cnt == line_cnt) return;
  424644:	8803      	ldrh	r3, [r0, #0]
  424646:	42b3      	cmp	r3, r6
  424648:	d005      	beq.n	424656 <lv_linemeter_set_scale+0x32>
    ext->scale_angle = angle;
  42464a:	8006      	strh	r6, [r0, #0]
    ext->line_cnt    = line_cnt;
  42464c:	8085      	strh	r5, [r0, #4]
    lv_obj_invalidate(lmeter);
  42464e:	4620      	mov	r0, r4
  424650:	4b07      	ldr	r3, [pc, #28]	; (424670 <lv_linemeter_set_scale+0x4c>)
  424652:	4798      	blx	r3
  424654:	bd70      	pop	{r4, r5, r6, pc}
    if(ext->scale_angle == angle && ext->line_cnt == line_cnt) return;
  424656:	8883      	ldrh	r3, [r0, #4]
  424658:	42ab      	cmp	r3, r5
  42465a:	d1f6      	bne.n	42464a <lv_linemeter_set_scale+0x26>
  42465c:	e7fa      	b.n	424654 <lv_linemeter_set_scale+0x30>
  42465e:	bf00      	nop
  424660:	00416da9 	.word	0x00416da9
  424664:	0042e560 	.word	0x0042e560
  424668:	00416db5 	.word	0x00416db5
  42466c:	00407ffd 	.word	0x00407ffd
  424670:	00405f01 	.word	0x00405f01

00424674 <lv_linemeter_get_min_value>:
{
  424674:	b510      	push	{r4, lr}
  424676:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(lmeter, LV_OBJX_NAME);
  424678:	4b06      	ldr	r3, [pc, #24]	; (424694 <lv_linemeter_get_min_value+0x20>)
  42467a:	4798      	blx	r3
  42467c:	b928      	cbnz	r0, 42468a <lv_linemeter_get_min_value+0x16>
  42467e:	4622      	mov	r2, r4
  424680:	2300      	movs	r3, #0
  424682:	4805      	ldr	r0, [pc, #20]	; (424698 <lv_linemeter_get_min_value+0x24>)
  424684:	4905      	ldr	r1, [pc, #20]	; (42469c <lv_linemeter_get_min_value+0x28>)
  424686:	4788      	blx	r1
  424688:	e7fe      	b.n	424688 <lv_linemeter_get_min_value+0x14>
    lv_linemeter_ext_t * ext = lv_obj_get_ext_attr(lmeter);
  42468a:	4620      	mov	r0, r4
  42468c:	4b04      	ldr	r3, [pc, #16]	; (4246a0 <lv_linemeter_get_min_value+0x2c>)
  42468e:	4798      	blx	r3
}
  424690:	68c0      	ldr	r0, [r0, #12]
  424692:	bd10      	pop	{r4, pc}
  424694:	00416da9 	.word	0x00416da9
  424698:	0042e560 	.word	0x0042e560
  42469c:	00416db5 	.word	0x00416db5
  4246a0:	00407ffd 	.word	0x00407ffd

004246a4 <lv_linemeter_get_max_value>:
{
  4246a4:	b510      	push	{r4, lr}
  4246a6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(lmeter, LV_OBJX_NAME);
  4246a8:	4b06      	ldr	r3, [pc, #24]	; (4246c4 <lv_linemeter_get_max_value+0x20>)
  4246aa:	4798      	blx	r3
  4246ac:	b928      	cbnz	r0, 4246ba <lv_linemeter_get_max_value+0x16>
  4246ae:	4622      	mov	r2, r4
  4246b0:	2300      	movs	r3, #0
  4246b2:	4805      	ldr	r0, [pc, #20]	; (4246c8 <lv_linemeter_get_max_value+0x24>)
  4246b4:	4905      	ldr	r1, [pc, #20]	; (4246cc <lv_linemeter_get_max_value+0x28>)
  4246b6:	4788      	blx	r1
  4246b8:	e7fe      	b.n	4246b8 <lv_linemeter_get_max_value+0x14>
    lv_linemeter_ext_t * ext = lv_obj_get_ext_attr(lmeter);
  4246ba:	4620      	mov	r0, r4
  4246bc:	4b04      	ldr	r3, [pc, #16]	; (4246d0 <lv_linemeter_get_max_value+0x2c>)
  4246be:	4798      	blx	r3
}
  4246c0:	6900      	ldr	r0, [r0, #16]
  4246c2:	bd10      	pop	{r4, pc}
  4246c4:	00416da9 	.word	0x00416da9
  4246c8:	0042e560 	.word	0x0042e560
  4246cc:	00416db5 	.word	0x00416db5
  4246d0:	00407ffd 	.word	0x00407ffd

004246d4 <lv_linemeter_get_scale_angle>:
{
  4246d4:	b510      	push	{r4, lr}
  4246d6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(lmeter, LV_OBJX_NAME);
  4246d8:	4b06      	ldr	r3, [pc, #24]	; (4246f4 <lv_linemeter_get_scale_angle+0x20>)
  4246da:	4798      	blx	r3
  4246dc:	b928      	cbnz	r0, 4246ea <lv_linemeter_get_scale_angle+0x16>
  4246de:	4622      	mov	r2, r4
  4246e0:	2300      	movs	r3, #0
  4246e2:	4805      	ldr	r0, [pc, #20]	; (4246f8 <lv_linemeter_get_scale_angle+0x24>)
  4246e4:	4905      	ldr	r1, [pc, #20]	; (4246fc <lv_linemeter_get_scale_angle+0x28>)
  4246e6:	4788      	blx	r1
  4246e8:	e7fe      	b.n	4246e8 <lv_linemeter_get_scale_angle+0x14>
    lv_linemeter_ext_t * ext = lv_obj_get_ext_attr(lmeter);
  4246ea:	4620      	mov	r0, r4
  4246ec:	4b04      	ldr	r3, [pc, #16]	; (424700 <lv_linemeter_get_scale_angle+0x2c>)
  4246ee:	4798      	blx	r3
}
  4246f0:	8800      	ldrh	r0, [r0, #0]
  4246f2:	bd10      	pop	{r4, pc}
  4246f4:	00416da9 	.word	0x00416da9
  4246f8:	0042e560 	.word	0x0042e560
  4246fc:	00416db5 	.word	0x00416db5
  424700:	00407ffd 	.word	0x00407ffd

00424704 <lv_linemeter_get_angle_offset>:
{
  424704:	b508      	push	{r3, lr}
    lv_linemeter_ext_t * ext = lv_obj_get_ext_attr(lmeter);
  424706:	4b02      	ldr	r3, [pc, #8]	; (424710 <lv_linemeter_get_angle_offset+0xc>)
  424708:	4798      	blx	r3
}
  42470a:	8840      	ldrh	r0, [r0, #2]
  42470c:	bd08      	pop	{r3, pc}
  42470e:	bf00      	nop
  424710:	00407ffd 	.word	0x00407ffd

00424714 <lv_linemeter_draw_scale>:
{
  424714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  424718:	b0ab      	sub	sp, #172	; 0xac
  42471a:	4607      	mov	r7, r0
  42471c:	9010      	str	r0, [sp, #64]	; 0x40
  42471e:	910e      	str	r1, [sp, #56]	; 0x38
  424720:	9211      	str	r2, [sp, #68]	; 0x44
    lv_linemeter_ext_t * ext    = lv_obj_get_ext_attr(lmeter);
  424722:	4b5d      	ldr	r3, [pc, #372]	; (424898 <lv_linemeter_draw_scale+0x184>)
  424724:	4798      	blx	r3
  424726:	9007      	str	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  424728:	2212      	movs	r2, #18
  42472a:	2100      	movs	r1, #0
  42472c:	4638      	mov	r0, r7
  42472e:	4c5b      	ldr	r4, [pc, #364]	; (42489c <lv_linemeter_draw_scale+0x188>)
  424730:	47a0      	blx	r4
  424732:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  424734:	2213      	movs	r2, #19
  424736:	2100      	movs	r1, #0
  424738:	4638      	mov	r0, r7
  42473a:	47a0      	blx	r4
  42473c:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  42473e:	2210      	movs	r2, #16
  424740:	2100      	movs	r1, #0
  424742:	4638      	mov	r0, r7
  424744:	47a0      	blx	r4
  424746:	4604      	mov	r4, r0
    lv_coord_t r_out = (lv_obj_get_width(lmeter) - left - right) / 2 ;
  424748:	4638      	mov	r0, r7
  42474a:	4b55      	ldr	r3, [pc, #340]	; (4248a0 <lv_linemeter_draw_scale+0x18c>)
  42474c:	4798      	blx	r3
  42474e:	1b80      	subs	r0, r0, r6
  424750:	1b40      	subs	r0, r0, r5
  424752:	f100 8085 	bmi.w	424860 <lv_linemeter_draw_scale+0x14c>
  424756:	1040      	asrs	r0, r0, #1
  424758:	b203      	sxth	r3, r0
  42475a:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t r_in  = r_out - lv_obj_get_style_scale_width(lmeter, part);
  42475c:	b283      	uxth	r3, r0
  42475e:	461d      	mov	r5, r3
  424760:	9315      	str	r3, [sp, #84]	; 0x54
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  424762:	22c0      	movs	r2, #192	; 0xc0
  424764:	9911      	ldr	r1, [sp, #68]	; 0x44
  424766:	9810      	ldr	r0, [sp, #64]	; 0x40
  424768:	4b4c      	ldr	r3, [pc, #304]	; (42489c <lv_linemeter_draw_scale+0x188>)
  42476a:	4798      	blx	r3
  42476c:	b280      	uxth	r0, r0
  42476e:	1a28      	subs	r0, r5, r0
  424770:	b203      	sxth	r3, r0
  424772:	930a      	str	r3, [sp, #40]	; 0x28
    if(r_in < 1) r_in = 1;
  424774:	2b00      	cmp	r3, #0
  424776:	dd75      	ble.n	424864 <lv_linemeter_draw_scale+0x150>
    lv_coord_t x_ofs  = lmeter->coords.x1 + r_out + left;
  424778:	9a10      	ldr	r2, [sp, #64]	; 0x40
  42477a:	8a15      	ldrh	r5, [r2, #16]
  42477c:	9915      	ldr	r1, [sp, #84]	; 0x54
  42477e:	440d      	add	r5, r1
  424780:	fa16 f585 	uxtah	r5, r6, r5
  424784:	b2ad      	uxth	r5, r5
  424786:	b22b      	sxth	r3, r5
  424788:	9308      	str	r3, [sp, #32]
    lv_coord_t y_ofs  = lmeter->coords.y1 + r_out + top;
  42478a:	8a56      	ldrh	r6, [r2, #18]
  42478c:	440e      	add	r6, r1
  42478e:	fa14 f686 	uxtah	r6, r4, r6
  424792:	b2b6      	uxth	r6, r6
  424794:	b233      	sxth	r3, r6
  424796:	9306      	str	r3, [sp, #24]
    int16_t angle_ofs = ext->angle_ofs + 90 + (360 - ext->scale_angle) / 2;
  424798:	9a07      	ldr	r2, [sp, #28]
  42479a:	8853      	ldrh	r3, [r2, #2]
  42479c:	8812      	ldrh	r2, [r2, #0]
  42479e:	f5d2 72b4 	rsbs	r2, r2, #360	; 0x168
  4247a2:	d462      	bmi.n	42486a <lv_linemeter_draw_scale+0x156>
  4247a4:	eb03 0362 	add.w	r3, r3, r2, asr #1
  4247a8:	335a      	adds	r3, #90	; 0x5a
  4247aa:	b29b      	uxth	r3, r3
  4247ac:	930d      	str	r3, [sp, #52]	; 0x34
  4247ae:	b21b      	sxth	r3, r3
  4247b0:	9317      	str	r3, [sp, #92]	; 0x5c
    int16_t level = ext->mirrored ?
  4247b2:	9807      	ldr	r0, [sp, #28]
  4247b4:	7d03      	ldrb	r3, [r0, #20]
  4247b6:	f013 0f01 	tst.w	r3, #1
  4247ba:	d058      	beq.n	42486e <lv_linemeter_draw_scale+0x15a>
                    (int32_t)((int32_t)(ext->max_value - ext->cur_value) * (ext->line_cnt - 1)) / (ext->max_value - ext->min_value) :
  4247bc:	6902      	ldr	r2, [r0, #16]
  4247be:	6883      	ldr	r3, [r0, #8]
  4247c0:	1ad1      	subs	r1, r2, r3
  4247c2:	8883      	ldrh	r3, [r0, #4]
  4247c4:	3b01      	subs	r3, #1
  4247c6:	fb03 f301 	mul.w	r3, r3, r1
  4247ca:	68c1      	ldr	r1, [r0, #12]
  4247cc:	1a52      	subs	r2, r2, r1
  4247ce:	fb93 f3f2 	sdiv	r3, r3, r2
    int16_t level = ext->mirrored ?
  4247d2:	b21b      	sxth	r3, r3
  4247d4:	930f      	str	r3, [sp, #60]	; 0x3c
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  4247d6:	2299      	movs	r2, #153	; 0x99
  4247d8:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
  4247dc:	4641      	mov	r1, r8
  4247de:	9f10      	ldr	r7, [sp, #64]	; 0x40
  4247e0:	4638      	mov	r0, r7
  4247e2:	4c30      	ldr	r4, [pc, #192]	; (4248a4 <lv_linemeter_draw_scale+0x190>)
  4247e4:	47a0      	blx	r4
  4247e6:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  4247ea:	22c9      	movs	r2, #201	; 0xc9
  4247ec:	4641      	mov	r1, r8
  4247ee:	4638      	mov	r0, r7
  4247f0:	47a0      	blx	r4
  4247f2:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  4247f6:	22ca      	movs	r2, #202	; 0xca
  4247f8:	4641      	mov	r1, r8
  4247fa:	4638      	mov	r0, r7
  4247fc:	47a0      	blx	r4
  4247fe:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
    lv_draw_line_dsc_init(&line_dsc);
  424802:	a827      	add	r0, sp, #156	; 0x9c
  424804:	4b28      	ldr	r3, [pc, #160]	; (4248a8 <lv_linemeter_draw_scale+0x194>)
  424806:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(lmeter, part, &line_dsc);
  424808:	aa27      	add	r2, sp, #156	; 0x9c
  42480a:	4641      	mov	r1, r8
  42480c:	4638      	mov	r0, r7
  42480e:	4b27      	ldr	r3, [pc, #156]	; (4248ac <lv_linemeter_draw_scale+0x198>)
  424810:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  424812:	22c3      	movs	r2, #195	; 0xc3
  424814:	4641      	mov	r1, r8
  424816:	4638      	mov	r0, r7
  424818:	4b20      	ldr	r3, [pc, #128]	; (42489c <lv_linemeter_draw_scale+0x188>)
  42481a:	4798      	blx	r3
  42481c:	9014      	str	r0, [sp, #80]	; 0x50
    mask_area.x1 = x_ofs - r_in;
  42481e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  424822:	1aea      	subs	r2, r5, r3
  424824:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
    mask_area.x2 = x_ofs + r_in - 1;
  424828:	441d      	add	r5, r3
  42482a:	b2ad      	uxth	r5, r5
  42482c:	3d01      	subs	r5, #1
  42482e:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
    mask_area.y1 = y_ofs - r_in;
  424832:	1af2      	subs	r2, r6, r3
  424834:	f8ad 2096 	strh.w	r2, [sp, #150]	; 0x96
    mask_area.y2 = y_ofs + r_in - 1;
  424838:	441e      	add	r6, r3
  42483a:	b2b6      	uxth	r6, r6
  42483c:	3e01      	subs	r6, #1
  42483e:	f8ad 609a 	strh.w	r6, [sp, #154]	; 0x9a
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
  424842:	2301      	movs	r3, #1
  424844:	f647 72ff 	movw	r2, #32767	; 0x7fff
  424848:	a925      	add	r1, sp, #148	; 0x94
  42484a:	a81e      	add	r0, sp, #120	; 0x78
  42484c:	4c18      	ldr	r4, [pc, #96]	; (4248b0 <lv_linemeter_draw_scale+0x19c>)
  42484e:	47a0      	blx	r4
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, 0);
  424850:	2100      	movs	r1, #0
  424852:	a81e      	add	r0, sp, #120	; 0x78
  424854:	4b17      	ldr	r3, [pc, #92]	; (4248b4 <lv_linemeter_draw_scale+0x1a0>)
  424856:	4798      	blx	r3
  424858:	9016      	str	r0, [sp, #88]	; 0x58
    for(i = 0; i < ext->line_cnt; i++) {
  42485a:	2300      	movs	r3, #0
  42485c:	9305      	str	r3, [sp, #20]
  42485e:	e084      	b.n	42496a <lv_linemeter_draw_scale+0x256>
    lv_coord_t r_out = (lv_obj_get_width(lmeter) - left - right) / 2 ;
  424860:	3001      	adds	r0, #1
  424862:	e778      	b.n	424756 <lv_linemeter_draw_scale+0x42>
    if(r_in < 1) r_in = 1;
  424864:	2301      	movs	r3, #1
  424866:	930a      	str	r3, [sp, #40]	; 0x28
  424868:	e786      	b.n	424778 <lv_linemeter_draw_scale+0x64>
    int16_t angle_ofs = ext->angle_ofs + 90 + (360 - ext->scale_angle) / 2;
  42486a:	3201      	adds	r2, #1
  42486c:	e79a      	b.n	4247a4 <lv_linemeter_draw_scale+0x90>
                    (int32_t)((int32_t)(ext->cur_value - ext->min_value) * (ext->line_cnt - 1)) / (ext->max_value - ext->min_value);
  42486e:	9c07      	ldr	r4, [sp, #28]
  424870:	68a3      	ldr	r3, [r4, #8]
  424872:	68e1      	ldr	r1, [r4, #12]
  424874:	1a5a      	subs	r2, r3, r1
  424876:	88a3      	ldrh	r3, [r4, #4]
  424878:	3b01      	subs	r3, #1
  42487a:	fb03 f302 	mul.w	r3, r3, r2
  42487e:	6922      	ldr	r2, [r4, #16]
  424880:	1a52      	subs	r2, r2, r1
  424882:	fb93 f3f2 	sdiv	r3, r3, r2
    int16_t level = ext->mirrored ?
  424886:	b21b      	sxth	r3, r3
  424888:	930f      	str	r3, [sp, #60]	; 0x3c
  42488a:	e7a4      	b.n	4247d6 <lv_linemeter_draw_scale+0xc2>
        else x_out_extra = (x_out_extra - 127) >> 8;
  42488c:	3c7f      	subs	r4, #127	; 0x7f
  42488e:	1224      	asrs	r4, r4, #8
  424890:	e0b2      	b.n	4249f8 <lv_linemeter_draw_scale+0x2e4>
        else y_out_extra = (y_out_extra - 127) >> 8;
  424892:	3d7f      	subs	r5, #127	; 0x7f
  424894:	122d      	asrs	r5, r5, #8
  424896:	e0b4      	b.n	424a02 <lv_linemeter_draw_scale+0x2ee>
  424898:	00407ffd 	.word	0x00407ffd
  42489c:	004073ed 	.word	0x004073ed
  4248a0:	00405b29 	.word	0x00405b29
  4248a4:	00406dd9 	.word	0x00406dd9
  4248a8:	0040f769 	.word	0x0040f769
  4248ac:	00408a4d 	.word	0x00408a4d
  4248b0:	00410d5d 	.word	0x00410d5d
  4248b4:	004109a5 	.word	0x004109a5
            line_dsc.color = lv_color_mix(grad_color, main_color, (255 * i) / ext->line_cnt);
  4248b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4248ba:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
  4248be:	9a07      	ldr	r2, [sp, #28]
  4248c0:	8892      	ldrh	r2, [r2, #4]
  4248c2:	fb93 f3f2 	sdiv	r3, r3, r2
  4248c6:	b2db      	uxtb	r3, r3
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4248c8:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
  4248cc:	f3c6 02c4 	ubfx	r2, r6, #3, #5
  4248d0:	f8bd 504a 	ldrh.w	r5, [sp, #74]	; 0x4a
  4248d4:	f3c5 00c4 	ubfx	r0, r5, #3, #5
  4248d8:	f1c3 01ff 	rsb	r1, r3, #255	; 0xff
  4248dc:	fb01 f000 	mul.w	r0, r1, r0
  4248e0:	fb03 0202 	mla	r2, r3, r2, r0
  4248e4:	3280      	adds	r2, #128	; 0x80
  4248e6:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  4248ea:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  4248ee:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  4248f2:	f362 0bc7 	bfi	fp, r2, #3, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4248f6:	f006 0207 	and.w	r2, r6, #7
  4248fa:	f3c6 3042 	ubfx	r0, r6, #13, #3
  4248fe:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  424902:	f005 0007 	and.w	r0, r5, #7
  424906:	f3c5 3442 	ubfx	r4, r5, #13, #3
  42490a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
  42490e:	fb00 f001 	mul.w	r0, r0, r1
  424912:	fb02 0203 	mla	r2, r2, r3, r0
  424916:	3280      	adds	r2, #128	; 0x80
  424918:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  42491c:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  424920:	f3c2 6082 	ubfx	r0, r2, #26, #3
  424924:	f360 0b02 	bfi	fp, r0, #0, #3
  424928:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  42492c:	f362 3b4f 	bfi	fp, r2, #13, #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  424930:	f3c6 2004 	ubfx	r0, r6, #8, #5
  424934:	f3c5 2204 	ubfx	r2, r5, #8, #5
  424938:	fb02 f101 	mul.w	r1, r2, r1
  42493c:	fb00 1303 	mla	r3, r0, r3, r1
  424940:	3380      	adds	r3, #128	; 0x80
  424942:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  424946:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  42494a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  42494e:	f363 2b0c 	bfi	fp, r3, #8, #5
  424952:	f8ad b09c 	strh.w	fp, [sp, #156]	; 0x9c
        lv_draw_line(&p1, &p2, &clip_sub, &line_dsc);
  424956:	ab27      	add	r3, sp, #156	; 0x9c
  424958:	aa1b      	add	r2, sp, #108	; 0x6c
  42495a:	a91a      	add	r1, sp, #104	; 0x68
  42495c:	a819      	add	r0, sp, #100	; 0x64
  42495e:	4c98      	ldr	r4, [pc, #608]	; (424bc0 <lv_linemeter_draw_scale+0x4ac>)
  424960:	47a0      	blx	r4
    for(i = 0; i < ext->line_cnt; i++) {
  424962:	9b05      	ldr	r3, [sp, #20]
  424964:	3301      	adds	r3, #1
  424966:	b2db      	uxtb	r3, r3
  424968:	9305      	str	r3, [sp, #20]
  42496a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  42496e:	9b07      	ldr	r3, [sp, #28]
  424970:	889b      	ldrh	r3, [r3, #4]
  424972:	429a      	cmp	r2, r3
  424974:	f080 80b8 	bcs.w	424ae8 <lv_linemeter_draw_scale+0x3d4>
        int32_t angle_upscale = (i * ext->scale_angle * 256) / (ext->line_cnt - 1);
  424978:	9a05      	ldr	r2, [sp, #20]
  42497a:	920c      	str	r2, [sp, #48]	; 0x30
  42497c:	9907      	ldr	r1, [sp, #28]
  42497e:	880e      	ldrh	r6, [r1, #0]
  424980:	fb06 f602 	mul.w	r6, r6, r2
  424984:	0236      	lsls	r6, r6, #8
  424986:	3b01      	subs	r3, #1
  424988:	fb96 f6f3 	sdiv	r6, r6, r3
        int32_t angle_normal = angle_upscale >> 8;
  42498c:	1237      	asrs	r7, r6, #8
        int32_t angle_high = angle_low + 1;
  42498e:	f107 0801 	add.w	r8, r7, #1
        int32_t angle_rem = angle_upscale & 0xFF;
  424992:	b2f6      	uxtb	r6, r6
        int32_t sin_low = _lv_trigo_sin(angle_low + angle_ofs);
  424994:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  424996:	4427      	add	r7, r4
  424998:	b2bf      	uxth	r7, r7
  42499a:	fa0f fa87 	sxth.w	sl, r7
  42499e:	4650      	mov	r0, sl
  4249a0:	f8df 923c 	ldr.w	r9, [pc, #572]	; 424be0 <lv_linemeter_draw_scale+0x4cc>
  4249a4:	47c8      	blx	r9
  4249a6:	4605      	mov	r5, r0
        int32_t sin_high = _lv_trigo_sin(angle_high + angle_ofs);
  4249a8:	44a0      	add	r8, r4
  4249aa:	fa1f f888 	uxth.w	r8, r8
  4249ae:	fa0f f088 	sxth.w	r0, r8
  4249b2:	47c8      	blx	r9
        int32_t sin_mid = (sin_low * (256 - angle_rem) + sin_high * angle_rem) >> 8;
  4249b4:	f5c6 7480 	rsb	r4, r6, #256	; 0x100
  4249b8:	fb00 f006 	mul.w	r0, r0, r6
  4249bc:	fb04 0505 	mla	r5, r4, r5, r0
  4249c0:	122d      	asrs	r5, r5, #8
        int32_t cos_low = _lv_trigo_sin(angle_low + 90 + angle_ofs);
  4249c2:	375a      	adds	r7, #90	; 0x5a
  4249c4:	b23f      	sxth	r7, r7
  4249c6:	4638      	mov	r0, r7
  4249c8:	47c8      	blx	r9
  4249ca:	900b      	str	r0, [sp, #44]	; 0x2c
        int32_t cos_high = _lv_trigo_sin(angle_high + 90 + angle_ofs);
  4249cc:	f108 005a 	add.w	r0, r8, #90	; 0x5a
  4249d0:	b200      	sxth	r0, r0
  4249d2:	47c8      	blx	r9
        int32_t cos_mid = (cos_low * (256 - angle_rem) + cos_high * angle_rem) >> 8;
  4249d4:	fb00 f006 	mul.w	r0, r0, r6
  4249d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4249da:	fb03 0404 	mla	r4, r3, r4, r0
  4249de:	1224      	asrs	r4, r4, #8
        int32_t y_out_extra = (int32_t)((int32_t)sin_mid * r_out_extra) >> (LV_TRIGO_SHIFT - 8);
  4249e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4249e2:	fb03 f505 	mul.w	r5, r3, r5
  4249e6:	11ed      	asrs	r5, r5, #7
        int32_t x_out_extra = (int32_t)((int32_t)cos_mid * r_out_extra) >> (LV_TRIGO_SHIFT - 8);
  4249e8:	fb03 f404 	mul.w	r4, r3, r4
  4249ec:	11e4      	asrs	r4, r4, #7
        if(x_out_extra > 0) x_out_extra = (x_out_extra + 127) >> 8;
  4249ee:	2c00      	cmp	r4, #0
  4249f0:	f77f af4c 	ble.w	42488c <lv_linemeter_draw_scale+0x178>
  4249f4:	347f      	adds	r4, #127	; 0x7f
  4249f6:	1224      	asrs	r4, r4, #8
        if(y_out_extra > 0) y_out_extra = (y_out_extra + 127) >> 8;
  4249f8:	2d00      	cmp	r5, #0
  4249fa:	f77f af4a 	ble.w	424892 <lv_linemeter_draw_scale+0x17e>
  4249fe:	357f      	adds	r5, #127	; 0x7f
  424a00:	122d      	asrs	r5, r5, #8
        x_out_extra += x_ofs;
  424a02:	9b08      	ldr	r3, [sp, #32]
  424a04:	441c      	add	r4, r3
        y_out_extra += y_ofs;
  424a06:	9906      	ldr	r1, [sp, #24]
  424a08:	440d      	add	r5, r1
        int32_t y_in  = (int32_t)((int32_t)_lv_trigo_sin(angle_normal + angle_ofs) * r_in) >> LV_TRIGO_SHIFT;
  424a0a:	4650      	mov	r0, sl
  424a0c:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 424be0 <lv_linemeter_draw_scale+0x4cc>
  424a10:	47c8      	blx	r9
  424a12:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  424a14:	fb06 f600 	mul.w	r6, r6, r0
  424a18:	13f6      	asrs	r6, r6, #15
        int32_t x_in  = (int32_t)((int32_t)_lv_trigo_sin(angle_normal + 90 + angle_ofs) * r_in) >> LV_TRIGO_SHIFT;
  424a1a:	4638      	mov	r0, r7
  424a1c:	47c8      	blx	r9
  424a1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  424a20:	fb00 f002 	mul.w	r0, r0, r2
        x_in += x_ofs;
  424a24:	9a08      	ldr	r2, [sp, #32]
  424a26:	eb02 38e0 	add.w	r8, r2, r0, asr #15
        y_in += y_ofs;
  424a2a:	9b06      	ldr	r3, [sp, #24]
  424a2c:	441e      	add	r6, r3
        int32_t y_out  = (int32_t)((int32_t)_lv_trigo_sin(angle_normal + angle_ofs) * r_out) >> LV_TRIGO_SHIFT;
  424a2e:	4650      	mov	r0, sl
  424a30:	47c8      	blx	r9
  424a32:	9909      	ldr	r1, [sp, #36]	; 0x24
  424a34:	fb00 f001 	mul.w	r0, r0, r1
  424a38:	ea4f 3ae0 	mov.w	sl, r0, asr #15
        int32_t x_out  = (int32_t)((int32_t)_lv_trigo_sin(angle_normal + 90 + angle_ofs) * r_out) >> LV_TRIGO_SHIFT;
  424a3c:	4638      	mov	r0, r7
  424a3e:	47c8      	blx	r9
  424a40:	9909      	ldr	r1, [sp, #36]	; 0x24
  424a42:	fb00 f001 	mul.w	r0, r0, r1
        x_out += x_ofs;
  424a46:	9f08      	ldr	r7, [sp, #32]
  424a48:	eb07 30e0 	add.w	r0, r7, r0, asr #15
        y_out += y_ofs;
  424a4c:	9a06      	ldr	r2, [sp, #24]
  424a4e:	4492      	add	sl, r2
        clip_sub.x1 = LV_MATH_MIN(x_in, x_out) - line_dsc.width;
  424a50:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
  424a54:	4580      	cmp	r8, r0
  424a56:	bfd4      	ite	le
  424a58:	ebc3 0208 	rsble	r2, r3, r8
  424a5c:	ebc3 0200 	rsbgt	r2, r3, r0
  424a60:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
        clip_sub.x2 = LV_MATH_MAX(x_in, x_out) + line_dsc.width;
  424a64:	4580      	cmp	r8, r0
  424a66:	bfac      	ite	ge
  424a68:	4498      	addge	r8, r3
  424a6a:	eb03 0800 	addlt.w	r8, r3, r0
  424a6e:	f8ad 8070 	strh.w	r8, [sp, #112]	; 0x70
        clip_sub.y1 = LV_MATH_MIN(y_in, y_out) - line_dsc.width;
  424a72:	4556      	cmp	r6, sl
  424a74:	bfd4      	ite	le
  424a76:	ebc3 0206 	rsble	r2, r3, r6
  424a7a:	ebc3 020a 	rsbgt	r2, r3, sl
  424a7e:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
        clip_sub.y2 = LV_MATH_MAX(y_in, y_out) + line_dsc.width;
  424a82:	4556      	cmp	r6, sl
  424a84:	bfac      	ite	ge
  424a86:	199e      	addge	r6, r3, r6
  424a88:	eb03 060a 	addlt.w	r6, r3, sl
  424a8c:	f8ad 6072 	strh.w	r6, [sp, #114]	; 0x72
        if(_lv_area_intersect(&clip_sub, &clip_sub, clip_area) == false) continue;
  424a90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  424a92:	a91b      	add	r1, sp, #108	; 0x6c
  424a94:	4608      	mov	r0, r1
  424a96:	4b4b      	ldr	r3, [pc, #300]	; (424bc4 <lv_linemeter_draw_scale+0x4b0>)
  424a98:	4798      	blx	r3
  424a9a:	2800      	cmp	r0, #0
  424a9c:	f43f af61 	beq.w	424962 <lv_linemeter_draw_scale+0x24e>
        p2.x = x_in_extra;
  424aa0:	f8ad 7068 	strh.w	r7, [sp, #104]	; 0x68
        p2.y = y_in_extra;
  424aa4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  424aa8:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        p1.x = x_out_extra;
  424aac:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
        p1.y = y_out_extra;
  424ab0:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
        if((!ext->mirrored && i >= level) || (ext->mirrored && i <= level)) {
  424ab4:	9b07      	ldr	r3, [sp, #28]
  424ab6:	7d1b      	ldrb	r3, [r3, #20]
  424ab8:	f013 0301 	ands.w	r3, r3, #1
  424abc:	d103      	bne.n	424ac6 <lv_linemeter_draw_scale+0x3b2>
  424abe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  424ac0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  424ac2:	428a      	cmp	r2, r1
  424ac4:	da07      	bge.n	424ad6 <lv_linemeter_draw_scale+0x3c2>
  424ac6:	2b00      	cmp	r3, #0
  424ac8:	f43f aef6 	beq.w	4248b8 <lv_linemeter_draw_scale+0x1a4>
  424acc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  424ace:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  424ad0:	4293      	cmp	r3, r2
  424ad2:	f73f aef1 	bgt.w	4248b8 <lv_linemeter_draw_scale+0x1a4>
            line_dsc.color = end_color;
  424ad6:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  424ada:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            line_dsc.width = end_line_width;
  424ade:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  424ae2:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
  424ae6:	e736      	b.n	424956 <lv_linemeter_draw_scale+0x242>
    lv_draw_mask_remove_id(mask_in_id);
  424ae8:	9816      	ldr	r0, [sp, #88]	; 0x58
  424aea:	4b37      	ldr	r3, [pc, #220]	; (424bc8 <lv_linemeter_draw_scale+0x4b4>)
  424aec:	4798      	blx	r3
    if(part == LV_LINEMETER_PART_MAIN && level < ext->line_cnt - 1) {
  424aee:	9b11      	ldr	r3, [sp, #68]	; 0x44
  424af0:	b933      	cbnz	r3, 424b00 <lv_linemeter_draw_scale+0x3ec>
  424af2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  424af4:	4616      	mov	r6, r2
  424af6:	9b07      	ldr	r3, [sp, #28]
  424af8:	889b      	ldrh	r3, [r3, #4]
  424afa:	3b01      	subs	r3, #1
  424afc:	429a      	cmp	r2, r3
  424afe:	db02      	blt.n	424b06 <lv_linemeter_draw_scale+0x3f2>
}
  424b00:	b02b      	add	sp, #172	; 0xac
  424b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
  424b06:	22c1      	movs	r2, #193	; 0xc1
  424b08:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
  424b0c:	4641      	mov	r1, r8
  424b0e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  424b10:	4638      	mov	r0, r7
  424b12:	4c2e      	ldr	r4, [pc, #184]	; (424bcc <lv_linemeter_draw_scale+0x4b8>)
  424b14:	47a0      	blx	r4
  424b16:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
  424b18:	22c2      	movs	r2, #194	; 0xc2
  424b1a:	4641      	mov	r1, r8
  424b1c:	4638      	mov	r0, r7
  424b1e:	47a0      	blx	r4
        if(border_width || end_border_width) {
  424b20:	4607      	mov	r7, r0
  424b22:	2800      	cmp	r0, #0
  424b24:	bf08      	it	eq
  424b26:	2d00      	cmpeq	r5, #0
  424b28:	d0ea      	beq.n	424b00 <lv_linemeter_draw_scale+0x3ec>
            int16_t end_angle = ((level) * ext->scale_angle) / (ext->line_cnt - 1) + angle_ofs;
  424b2a:	9a07      	ldr	r2, [sp, #28]
  424b2c:	8814      	ldrh	r4, [r2, #0]
  424b2e:	fb04 f406 	mul.w	r4, r4, r6
  424b32:	8893      	ldrh	r3, [r2, #4]
  424b34:	3b01      	subs	r3, #1
  424b36:	fb94 f4f3 	sdiv	r4, r4, r3
  424b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  424b3c:	441c      	add	r4, r3
  424b3e:	b2a4      	uxth	r4, r4
            lv_draw_line_dsc_init(&arc_dsc);
  424b40:	a81b      	add	r0, sp, #108	; 0x6c
  424b42:	4b23      	ldr	r3, [pc, #140]	; (424bd0 <lv_linemeter_draw_scale+0x4bc>)
  424b44:	4798      	blx	r3
            lv_obj_init_draw_line_dsc(lmeter, part, &arc_dsc);
  424b46:	aa1b      	add	r2, sp, #108	; 0x6c
  424b48:	9911      	ldr	r1, [sp, #68]	; 0x44
  424b4a:	9810      	ldr	r0, [sp, #64]	; 0x40
  424b4c:	4b21      	ldr	r3, [pc, #132]	; (424bd4 <lv_linemeter_draw_scale+0x4c0>)
  424b4e:	4798      	blx	r3
            if(border_width) {
  424b50:	bb25      	cbnz	r5, 424b9c <lv_linemeter_draw_scale+0x488>
            if(end_border_width) {
  424b52:	2f00      	cmp	r7, #0
  424b54:	d0d4      	beq.n	424b00 <lv_linemeter_draw_scale+0x3ec>
                arc_dsc.width = end_border_width;
  424b56:	f8ad 706e 	strh.w	r7, [sp, #110]	; 0x6e
                arc_dsc.color = end_color;
  424b5a:	a82a      	add	r0, sp, #168	; 0xa8
  424b5c:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  424b60:	f820 3d3c 	strh.w	r3, [r0, #-60]!
                lv_draw_arc(x_ofs, y_ofs, r_out, end_angle, (angle_ofs + ext->scale_angle) % 360, clip_area, &arc_dsc);
  424b64:	9b07      	ldr	r3, [sp, #28]
  424b66:	881b      	ldrh	r3, [r3, #0]
  424b68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  424b6a:	441a      	add	r2, r3
  424b6c:	4613      	mov	r3, r2
  424b6e:	4a1a      	ldr	r2, [pc, #104]	; (424bd8 <lv_linemeter_draw_scale+0x4c4>)
  424b70:	fb82 1203 	smull	r1, r2, r2, r3
  424b74:	18d1      	adds	r1, r2, r3
  424b76:	17da      	asrs	r2, r3, #31
  424b78:	ebc2 2221 	rsb	r2, r2, r1, asr #8
  424b7c:	f44f 71b4 	mov.w	r1, #360	; 0x168
  424b80:	fb01 3212 	mls	r2, r1, r2, r3
  424b84:	9002      	str	r0, [sp, #8]
  424b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  424b88:	9301      	str	r3, [sp, #4]
  424b8a:	b292      	uxth	r2, r2
  424b8c:	9200      	str	r2, [sp, #0]
  424b8e:	4623      	mov	r3, r4
  424b90:	9a15      	ldr	r2, [sp, #84]	; 0x54
  424b92:	9906      	ldr	r1, [sp, #24]
  424b94:	9808      	ldr	r0, [sp, #32]
  424b96:	4c11      	ldr	r4, [pc, #68]	; (424bdc <lv_linemeter_draw_scale+0x4c8>)
  424b98:	47a0      	blx	r4
}
  424b9a:	e7b1      	b.n	424b00 <lv_linemeter_draw_scale+0x3ec>
                arc_dsc.width = border_width;
  424b9c:	f8ad 506e 	strh.w	r5, [sp, #110]	; 0x6e
                arc_dsc.color = main_color;
  424ba0:	ab2a      	add	r3, sp, #168	; 0xa8
  424ba2:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
  424ba6:	f823 2d3c 	strh.w	r2, [r3, #-60]!
                lv_draw_arc(x_ofs, y_ofs, r_out, angle_ofs, end_angle, clip_area, &arc_dsc);
  424baa:	9302      	str	r3, [sp, #8]
  424bac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  424bae:	9301      	str	r3, [sp, #4]
  424bb0:	9400      	str	r4, [sp, #0]
  424bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  424bb4:	9a15      	ldr	r2, [sp, #84]	; 0x54
  424bb6:	9906      	ldr	r1, [sp, #24]
  424bb8:	9808      	ldr	r0, [sp, #32]
  424bba:	4d08      	ldr	r5, [pc, #32]	; (424bdc <lv_linemeter_draw_scale+0x4c8>)
  424bbc:	47a8      	blx	r5
  424bbe:	e7c8      	b.n	424b52 <lv_linemeter_draw_scale+0x43e>
  424bc0:	0040f785 	.word	0x0040f785
  424bc4:	004164e3 	.word	0x004164e3
  424bc8:	00410a29 	.word	0x00410a29
  424bcc:	004073ed 	.word	0x004073ed
  424bd0:	0040f769 	.word	0x0040f769
  424bd4:	00408a4d 	.word	0x00408a4d
  424bd8:	b60b60b7 	.word	0xb60b60b7
  424bdc:	0040b9c9 	.word	0x0040b9c9
  424be0:	0041737d 	.word	0x0041737d

00424be4 <lv_linemeter_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
  424be4:	2a02      	cmp	r2, #2
  424be6:	d01c      	beq.n	424c22 <lv_linemeter_design+0x3e>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  424be8:	b10a      	cbz	r2, 424bee <lv_linemeter_design+0xa>
    return LV_DESIGN_RES_OK;
  424bea:	2000      	movs	r0, #0
  424bec:	4770      	bx	lr
{
  424bee:	b530      	push	{r4, r5, lr}
  424bf0:	b097      	sub	sp, #92	; 0x5c
  424bf2:	460d      	mov	r5, r1
  424bf4:	4604      	mov	r4, r0
        lv_draw_rect_dsc_init(&bg_dsc);
  424bf6:	a801      	add	r0, sp, #4
  424bf8:	4b0b      	ldr	r3, [pc, #44]	; (424c28 <lv_linemeter_design+0x44>)
  424bfa:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(lmeter, LV_LINEMETER_PART_MAIN, &bg_dsc);
  424bfc:	aa01      	add	r2, sp, #4
  424bfe:	2100      	movs	r1, #0
  424c00:	4620      	mov	r0, r4
  424c02:	4b0a      	ldr	r3, [pc, #40]	; (424c2c <lv_linemeter_design+0x48>)
  424c04:	4798      	blx	r3
        lv_draw_rect(&lmeter->coords, clip_area, &bg_dsc);
  424c06:	aa01      	add	r2, sp, #4
  424c08:	4629      	mov	r1, r5
  424c0a:	f104 0010 	add.w	r0, r4, #16
  424c0e:	4b08      	ldr	r3, [pc, #32]	; (424c30 <lv_linemeter_design+0x4c>)
  424c10:	4798      	blx	r3
        lv_linemeter_draw_scale(lmeter, clip_area, LV_LINEMETER_PART_MAIN);
  424c12:	2200      	movs	r2, #0
  424c14:	4629      	mov	r1, r5
  424c16:	4620      	mov	r0, r4
  424c18:	4b06      	ldr	r3, [pc, #24]	; (424c34 <lv_linemeter_design+0x50>)
  424c1a:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  424c1c:	2000      	movs	r0, #0
}
  424c1e:	b017      	add	sp, #92	; 0x5c
  424c20:	bd30      	pop	{r4, r5, pc}
        return LV_DESIGN_RES_NOT_COVER;
  424c22:	2002      	movs	r0, #2
  424c24:	4770      	bx	lr
  424c26:	bf00      	nop
  424c28:	0041338d 	.word	0x0041338d
  424c2c:	004082a5 	.word	0x004082a5
  424c30:	004133d9 	.word	0x004133d9
  424c34:	00424715 	.word	0x00424715

00424c38 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  424c38:	b508      	push	{r3, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  424c3a:	4810      	ldr	r0, [pc, #64]	; (424c7c <sysclk_init+0x44>)
  424c3c:	4b10      	ldr	r3, [pc, #64]	; (424c80 <sysclk_init+0x48>)
  424c3e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  424c40:	213e      	movs	r1, #62	; 0x3e
  424c42:	2000      	movs	r0, #0
  424c44:	4b0f      	ldr	r3, [pc, #60]	; (424c84 <sysclk_init+0x4c>)
  424c46:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  424c48:	4b0f      	ldr	r3, [pc, #60]	; (424c88 <sysclk_init+0x50>)
  424c4a:	4798      	blx	r3
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  424c4c:	2800      	cmp	r0, #0
  424c4e:	d0fb      	beq.n	424c48 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  424c50:	4b0e      	ldr	r3, [pc, #56]	; (424c8c <sysclk_init+0x54>)
  424c52:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  424c54:	4a0e      	ldr	r2, [pc, #56]	; (424c90 <sysclk_init+0x58>)
  424c56:	4b0f      	ldr	r3, [pc, #60]	; (424c94 <sysclk_init+0x5c>)
  424c58:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  424c5a:	4b0f      	ldr	r3, [pc, #60]	; (424c98 <sysclk_init+0x60>)
  424c5c:	4798      	blx	r3
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  424c5e:	2800      	cmp	r0, #0
  424c60:	d0fb      	beq.n	424c5a <sysclk_init+0x22>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  424c62:	2002      	movs	r0, #2
  424c64:	4b0d      	ldr	r3, [pc, #52]	; (424c9c <sysclk_init+0x64>)
  424c66:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  424c68:	2000      	movs	r0, #0
  424c6a:	4b0d      	ldr	r3, [pc, #52]	; (424ca0 <sysclk_init+0x68>)
  424c6c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  424c6e:	4b0d      	ldr	r3, [pc, #52]	; (424ca4 <sysclk_init+0x6c>)
  424c70:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  424c72:	480d      	ldr	r0, [pc, #52]	; (424ca8 <sysclk_init+0x70>)
  424c74:	4b02      	ldr	r3, [pc, #8]	; (424c80 <sysclk_init+0x48>)
  424c76:	4798      	blx	r3
  424c78:	bd08      	pop	{r3, pc}
  424c7a:	bf00      	nop
  424c7c:	07270e00 	.word	0x07270e00
  424c80:	00425a71 	.word	0x00425a71
  424c84:	00425531 	.word	0x00425531
  424c88:	00425585 	.word	0x00425585
  424c8c:	00425595 	.word	0x00425595
  424c90:	20183f01 	.word	0x20183f01
  424c94:	400e0600 	.word	0x400e0600
  424c98:	004255a5 	.word	0x004255a5
  424c9c:	004254a1 	.word	0x004254a1
  424ca0:	004254dd 	.word	0x004254dd
  424ca4:	00425961 	.word	0x00425961
  424ca8:	11e1a300 	.word	0x11e1a300

00424cac <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  424cac:	b510      	push	{r4, lr}
  424cae:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  424cb0:	4b10      	ldr	r3, [pc, #64]	; (424cf4 <spi_master_init+0x48>)
  424cb2:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
  424cb4:	2380      	movs	r3, #128	; 0x80
  424cb6:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  424cb8:	6863      	ldr	r3, [r4, #4]
  424cba:	f043 0301 	orr.w	r3, r3, #1
  424cbe:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  424cc0:	6863      	ldr	r3, [r4, #4]
  424cc2:	f043 0310 	orr.w	r3, r3, #16
  424cc6:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  424cc8:	6863      	ldr	r3, [r4, #4]
  424cca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  424cce:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  424cd0:	2100      	movs	r1, #0
  424cd2:	4620      	mov	r0, r4
  424cd4:	4b08      	ldr	r3, [pc, #32]	; (424cf8 <spi_master_init+0x4c>)
  424cd6:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  424cd8:	6863      	ldr	r3, [r4, #4]
  424cda:	f023 0302 	bic.w	r3, r3, #2
  424cde:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  424ce0:	6863      	ldr	r3, [r4, #4]
  424ce2:	f023 0304 	bic.w	r3, r3, #4
  424ce6:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  424ce8:	2100      	movs	r1, #0
  424cea:	4620      	mov	r0, r4
  424cec:	4b03      	ldr	r3, [pc, #12]	; (424cfc <spi_master_init+0x50>)
  424cee:	4798      	blx	r3
  424cf0:	bd10      	pop	{r4, pc}
  424cf2:	bf00      	nop
  424cf4:	004255d5 	.word	0x004255d5
  424cf8:	00425601 	.word	0x00425601
  424cfc:	00425617 	.word	0x00425617

00424d00 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  424d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  424d04:	4604      	mov	r4, r0
  424d06:	460d      	mov	r5, r1
  424d08:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  424d0a:	4915      	ldr	r1, [pc, #84]	; (424d60 <spi_master_setup_device+0x60>)
  424d0c:	4618      	mov	r0, r3
  424d0e:	4b15      	ldr	r3, [pc, #84]	; (424d64 <spi_master_setup_device+0x64>)
  424d10:	4798      	blx	r3
  424d12:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  424d14:	2300      	movs	r3, #0
  424d16:	461a      	mov	r2, r3
  424d18:	6829      	ldr	r1, [r5, #0]
  424d1a:	4620      	mov	r0, r4
  424d1c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 424d7c <spi_master_setup_device+0x7c>
  424d20:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  424d22:	2208      	movs	r2, #8
  424d24:	6829      	ldr	r1, [r5, #0]
  424d26:	4620      	mov	r0, r4
  424d28:	4b0f      	ldr	r3, [pc, #60]	; (424d68 <spi_master_setup_device+0x68>)
  424d2a:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  424d2c:	b2fa      	uxtb	r2, r7
  424d2e:	6829      	ldr	r1, [r5, #0]
  424d30:	4620      	mov	r0, r4
  424d32:	4b0e      	ldr	r3, [pc, #56]	; (424d6c <spi_master_setup_device+0x6c>)
  424d34:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  424d36:	2208      	movs	r2, #8
  424d38:	6829      	ldr	r1, [r5, #0]
  424d3a:	4620      	mov	r0, r4
  424d3c:	4b0c      	ldr	r3, [pc, #48]	; (424d70 <spi_master_setup_device+0x70>)
  424d3e:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  424d40:	0872      	lsrs	r2, r6, #1
  424d42:	6829      	ldr	r1, [r5, #0]
  424d44:	4620      	mov	r0, r4
  424d46:	4b0b      	ldr	r3, [pc, #44]	; (424d74 <spi_master_setup_device+0x74>)
  424d48:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  424d4a:	f086 0201 	eor.w	r2, r6, #1
  424d4e:	f002 0201 	and.w	r2, r2, #1
  424d52:	6829      	ldr	r1, [r5, #0]
  424d54:	4620      	mov	r0, r4
  424d56:	4b08      	ldr	r3, [pc, #32]	; (424d78 <spi_master_setup_device+0x78>)
  424d58:	4798      	blx	r3
  424d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  424d5e:	bf00      	nop
  424d60:	08f0d180 	.word	0x08f0d180
  424d64:	004256db 	.word	0x004256db
  424d68:	004256c1 	.word	0x004256c1
  424d6c:	004256f3 	.word	0x004256f3
  424d70:	0042566d 	.word	0x0042566d
  424d74:	00425629 	.word	0x00425629
  424d78:	0042564b 	.word	0x0042564b
  424d7c:	00425721 	.word	0x00425721

00424d80 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  424d80:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  424d82:	6843      	ldr	r3, [r0, #4]
  424d84:	f013 0f04 	tst.w	r3, #4
  424d88:	d005      	beq.n	424d96 <spi_select_device+0x16>
		return 1;
  424d8a:	2301      	movs	r3, #1
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  424d8c:	b143      	cbz	r3, 424da0 <spi_select_device+0x20>
		if (device->id < MAX_NUM_WITH_DECODER) {
  424d8e:	6809      	ldr	r1, [r1, #0]
  424d90:	290f      	cmp	r1, #15
  424d92:	d902      	bls.n	424d9a <spi_select_device+0x1a>
  424d94:	bd08      	pop	{r3, pc}
		return 0;
  424d96:	2300      	movs	r3, #0
  424d98:	e7f8      	b.n	424d8c <spi_select_device+0xc>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  424d9a:	4b06      	ldr	r3, [pc, #24]	; (424db4 <spi_select_device+0x34>)
  424d9c:	4798      	blx	r3
  424d9e:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  424da0:	6809      	ldr	r1, [r1, #0]
  424da2:	2903      	cmp	r1, #3
  424da4:	d8f6      	bhi.n	424d94 <spi_select_device+0x14>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  424da6:	2301      	movs	r3, #1
  424da8:	fa03 f101 	lsl.w	r1, r3, r1
  424dac:	43c9      	mvns	r1, r1
  424dae:	4b01      	ldr	r3, [pc, #4]	; (424db4 <spi_select_device+0x34>)
  424db0:	4798      	blx	r3
		}
	}
}
  424db2:	e7ef      	b.n	424d94 <spi_select_device+0x14>
  424db4:	00425601 	.word	0x00425601

00424db8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  424db8:	b570      	push	{r4, r5, r6, lr}
  424dba:	460d      	mov	r5, r1
  424dbc:	4614      	mov	r4, r2
	int nChars = 0;

	if (file != 0) {
  424dbe:	4606      	mov	r6, r0
  424dc0:	b158      	cbz	r0, 424dda <_read+0x22>
		return -1;
  424dc2:	f04f 36ff 	mov.w	r6, #4294967295
  424dc6:	e00a      	b.n	424dde <_read+0x26>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  424dc8:	4b06      	ldr	r3, [pc, #24]	; (424de4 <_read+0x2c>)
  424dca:	6818      	ldr	r0, [r3, #0]
  424dcc:	4b06      	ldr	r3, [pc, #24]	; (424de8 <_read+0x30>)
  424dce:	681b      	ldr	r3, [r3, #0]
  424dd0:	4629      	mov	r1, r5
  424dd2:	4798      	blx	r3
		ptr++;
  424dd4:	3501      	adds	r5, #1
		nChars++;
  424dd6:	3601      	adds	r6, #1
	for (; len > 0; --len) {
  424dd8:	3c01      	subs	r4, #1
  424dda:	2c00      	cmp	r4, #0
  424ddc:	dcf4      	bgt.n	424dc8 <_read+0x10>
	}
	return nChars;
}
  424dde:	4630      	mov	r0, r6
  424de0:	bd70      	pop	{r4, r5, r6, pc}
  424de2:	bf00      	nop
  424de4:	2043a3d8 	.word	0x2043a3d8
  424de8:	2043a3d0 	.word	0x2043a3d0

00424dec <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  424dec:	b570      	push	{r4, r5, r6, lr}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  424dee:	3801      	subs	r0, #1
  424df0:	2802      	cmp	r0, #2
  424df2:	d80f      	bhi.n	424e14 <_write+0x28>
  424df4:	4614      	mov	r4, r2
  424df6:	2500      	movs	r5, #0
		return -1;
	}

	for (; len != 0; --len) {
  424df8:	b18c      	cbz	r4, 424e1e <_write+0x32>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  424dfa:	4b0a      	ldr	r3, [pc, #40]	; (424e24 <_write+0x38>)
  424dfc:	6818      	ldr	r0, [r3, #0]
  424dfe:	1c4e      	adds	r6, r1, #1
  424e00:	4b09      	ldr	r3, [pc, #36]	; (424e28 <_write+0x3c>)
  424e02:	681b      	ldr	r3, [r3, #0]
  424e04:	7809      	ldrb	r1, [r1, #0]
  424e06:	4798      	blx	r3
  424e08:	2800      	cmp	r0, #0
  424e0a:	db06      	blt.n	424e1a <_write+0x2e>
			return -1;
		}
		++nChars;
  424e0c:	3501      	adds	r5, #1
	for (; len != 0; --len) {
  424e0e:	3c01      	subs	r4, #1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  424e10:	4631      	mov	r1, r6
  424e12:	e7f1      	b.n	424df8 <_write+0xc>
		return -1;
  424e14:	f04f 35ff 	mov.w	r5, #4294967295
  424e18:	e001      	b.n	424e1e <_write+0x32>
			return -1;
  424e1a:	f04f 35ff 	mov.w	r5, #4294967295
	}
	return nChars;
}
  424e1e:	4628      	mov	r0, r5
  424e20:	bd70      	pop	{r4, r5, r6, pc}
  424e22:	bf00      	nop
  424e24:	2043a3d8 	.word	0x2043a3d8
  424e28:	2043a3d4 	.word	0x2043a3d4

00424e2c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  424e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  424e30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  424e34:	4b9a      	ldr	r3, [pc, #616]	; (4250a0 <board_init+0x274>)
  424e36:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  424e38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  424e3c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  424e40:	4b98      	ldr	r3, [pc, #608]	; (4250a4 <board_init+0x278>)
  424e42:	2200      	movs	r2, #0
  424e44:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  424e48:	695a      	ldr	r2, [r3, #20]
  424e4a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  424e4e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  424e50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  424e54:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  424e58:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  424e5c:	f3c6 304e 	ubfx	r0, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  424e60:	f006 0507 	and.w	r5, r6, #7
  424e64:	3504      	adds	r5, #4
    ways    = CCSIDR_WAYS(ccsidr);
  424e66:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  424e6a:	fab6 f486 	clz	r4, r6
    wshift  = __CLZ(ways) & 0x1f;
  424e6e:	f004 041f 	and.w	r4, r4, #31
  __ASM volatile ("dsb");
  424e72:	f3bf 8f4f 	dsb	sy
  424e76:	e00e      	b.n	424e96 <board_init+0x6a>
    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
            } while(tmpways--);
  424e78:	4613      	mov	r3, r2
              sw = ((tmpways << wshift) | (sets << sshift));
  424e7a:	fa03 f204 	lsl.w	r2, r3, r4
  424e7e:	fa00 f105 	lsl.w	r1, r0, r5
  424e82:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  424e84:	4987      	ldr	r1, [pc, #540]	; (4250a4 <board_init+0x278>)
  424e86:	f8c1 2260 	str.w	r2, [r1, #608]	; 0x260
            } while(tmpways--);
  424e8a:	1e5a      	subs	r2, r3, #1
  424e8c:	2b00      	cmp	r3, #0
  424e8e:	d1f3      	bne.n	424e78 <board_init+0x4c>
        } while(sets--);
  424e90:	1e43      	subs	r3, r0, #1
  424e92:	b110      	cbz	r0, 424e9a <board_init+0x6e>
  424e94:	4618      	mov	r0, r3
         int32_t tmpways = ways;
  424e96:	4633      	mov	r3, r6
  424e98:	e7ef      	b.n	424e7a <board_init+0x4e>
  424e9a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  424e9e:	460b      	mov	r3, r1
  424ea0:	694a      	ldr	r2, [r1, #20]
  424ea2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  424ea6:	614a      	str	r2, [r1, #20]
  424ea8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  424eac:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  424eb0:	4a7d      	ldr	r2, [pc, #500]	; (4250a8 <board_init+0x27c>)
  424eb2:	497e      	ldr	r1, [pc, #504]	; (4250ac <board_init+0x280>)
  424eb4:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  424eb6:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  424eba:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  424ebc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  424ec0:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  424ec4:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  424ec8:	f022 0201 	bic.w	r2, r2, #1
  424ecc:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  424ed0:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  424ed4:	f022 0201 	bic.w	r2, r2, #1
  424ed8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  424edc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  424ee0:	f3bf 8f6f 	isb	sy
  424ee4:	200a      	movs	r0, #10
  424ee6:	4c72      	ldr	r4, [pc, #456]	; (4250b0 <board_init+0x284>)
  424ee8:	47a0      	blx	r4
  424eea:	200b      	movs	r0, #11
  424eec:	47a0      	blx	r4
  424eee:	200c      	movs	r0, #12
  424ef0:	47a0      	blx	r4
  424ef2:	2010      	movs	r0, #16
  424ef4:	47a0      	blx	r4
  424ef6:	2011      	movs	r0, #17
  424ef8:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  424efa:	4e6e      	ldr	r6, [pc, #440]	; (4250b4 <board_init+0x288>)
  424efc:	f44f 7880 	mov.w	r8, #256	; 0x100
  424f00:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  424f04:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  424f08:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  424f0c:	4c6a      	ldr	r4, [pc, #424]	; (4250b8 <board_init+0x28c>)
  424f0e:	f44f 6500 	mov.w	r5, #2048	; 0x800
  424f12:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  424f14:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  424f18:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  424f1a:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  424f1e:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  424f20:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  424f22:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  424f26:	6f23      	ldr	r3, [r4, #112]	; 0x70
  424f28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  424f2c:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  424f2e:	6f63      	ldr	r3, [r4, #116]	; 0x74
  424f30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  424f34:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  424f36:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  424f3a:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  424f3e:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  424f42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  424f46:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  424f48:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  424f4c:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  424f4e:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  424f50:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  424f54:	6f22      	ldr	r2, [r4, #112]	; 0x70
  424f56:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  424f5a:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  424f5c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  424f5e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  424f62:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  424f64:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  424f66:	4a55      	ldr	r2, [pc, #340]	; (4250bc <board_init+0x290>)
  424f68:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  424f6c:	f043 0310 	orr.w	r3, r3, #16
  424f70:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  424f74:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  424f78:	2310      	movs	r3, #16
  424f7a:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  424f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  424f80:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  424f82:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  424f84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  424f88:	6f11      	ldr	r1, [r2, #112]	; 0x70
  424f8a:	4319      	orrs	r1, r3
  424f8c:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  424f8e:	6f51      	ldr	r1, [r2, #116]	; 0x74
  424f90:	4319      	orrs	r1, r3
  424f92:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  424f94:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  424f96:	2208      	movs	r2, #8
  424f98:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  424f9a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  424f9e:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  424fa0:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  424fa2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  424fa6:	6f21      	ldr	r1, [r4, #112]	; 0x70
  424fa8:	f021 0108 	bic.w	r1, r1, #8
  424fac:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  424fae:	6f61      	ldr	r1, [r4, #116]	; 0x74
  424fb0:	f021 0108 	bic.w	r1, r1, #8
  424fb4:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  424fb6:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  424fb8:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  424fba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  424fbe:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  424fc0:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  424fc2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  424fc6:	6f22      	ldr	r2, [r4, #112]	; 0x70
  424fc8:	f022 0210 	bic.w	r2, r2, #16
  424fcc:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  424fce:	6f62      	ldr	r2, [r4, #116]	; 0x74
  424fd0:	f022 0210 	bic.w	r2, r2, #16
  424fd4:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  424fd6:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  424fd8:	2300      	movs	r3, #0
  424fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  424fde:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  424fe2:	4630      	mov	r0, r6
  424fe4:	4f36      	ldr	r7, [pc, #216]	; (4250c0 <board_init+0x294>)
  424fe6:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  424fe8:	2300      	movs	r3, #0
  424fea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  424fee:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  424ff2:	4630      	mov	r0, r6
  424ff4:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  424ff6:	2301      	movs	r3, #1
  424ff8:	22ff      	movs	r2, #255	; 0xff
  424ffa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  424ffe:	4630      	mov	r0, r6
  425000:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  425002:	2301      	movs	r3, #1
  425004:	223f      	movs	r2, #63	; 0x3f
  425006:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  42500a:	482e      	ldr	r0, [pc, #184]	; (4250c4 <board_init+0x298>)
  42500c:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  42500e:	2301      	movs	r3, #1
  425010:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  425014:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  425018:	4620      	mov	r0, r4
  42501a:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  42501c:	2301      	movs	r3, #1
  42501e:	4642      	mov	r2, r8
  425020:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  425024:	4630      	mov	r0, r6
  425026:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  425028:	2301      	movs	r3, #1
  42502a:	462a      	mov	r2, r5
  42502c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  425030:	4630      	mov	r0, r6
  425032:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  425034:	2301      	movs	r3, #1
  425036:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  42503a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  42503e:	4822      	ldr	r0, [pc, #136]	; (4250c8 <board_init+0x29c>)
  425040:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  425042:	2300      	movs	r3, #0
  425044:	f44f 7200 	mov.w	r2, #512	; 0x200
  425048:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  42504c:	4630      	mov	r0, r6
  42504e:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  425050:	f44f 7100 	mov.w	r1, #512	; 0x200
  425054:	4630      	mov	r0, r6
  425056:	4b1d      	ldr	r3, [pc, #116]	; (4250cc <board_init+0x2a0>)
  425058:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  42505a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  42505e:	2074      	movs	r0, #116	; 0x74
  425060:	4c1b      	ldr	r4, [pc, #108]	; (4250d0 <board_init+0x2a4>)
  425062:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  425064:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  425068:	2075      	movs	r0, #117	; 0x75
  42506a:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  42506c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  425070:	2076      	movs	r0, #118	; 0x76
  425072:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  425074:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  425078:	207b      	movs	r0, #123	; 0x7b
  42507a:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  42507c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  425080:	2018      	movs	r0, #24
  425082:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  425084:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  425088:	2006      	movs	r0, #6
  42508a:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  42508c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  425090:	2053      	movs	r0, #83	; 0x53
  425092:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  425094:	2053      	movs	r0, #83	; 0x53
  425096:	4b0f      	ldr	r3, [pc, #60]	; (4250d4 <board_init+0x2a8>)
  425098:	4798      	blx	r3
  42509a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42509e:	bf00      	nop
  4250a0:	400e1850 	.word	0x400e1850
  4250a4:	e000ed00 	.word	0xe000ed00
  4250a8:	400e0c00 	.word	0x400e0c00
  4250ac:	5a00080c 	.word	0x5a00080c
  4250b0:	004255b5 	.word	0x004255b5
  4250b4:	400e1200 	.word	0x400e1200
  4250b8:	400e0e00 	.word	0x400e0e00
  4250bc:	40088000 	.word	0x40088000
  4250c0:	004251fd 	.word	0x004251fd
  4250c4:	400e1600 	.word	0x400e1600
  4250c8:	400e1400 	.word	0x400e1400
  4250cc:	004250e3 	.word	0x004250e3
  4250d0:	004252bd 	.word	0x004252bd
  4250d4:	004252a5 	.word	0x004252a5

004250d8 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4250d8:	b90a      	cbnz	r2, 4250de <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4250da:	6601      	str	r1, [r0, #96]	; 0x60
  4250dc:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4250de:	6641      	str	r1, [r0, #100]	; 0x64
  4250e0:	4770      	bx	lr

004250e2 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4250e2:	6301      	str	r1, [r0, #48]	; 0x30
  4250e4:	4770      	bx	lr

004250e6 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4250e6:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4250e8:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4250ec:	d039      	beq.n	425162 <pio_set_peripheral+0x7c>
  4250ee:	d813      	bhi.n	425118 <pio_set_peripheral+0x32>
  4250f0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4250f4:	d025      	beq.n	425142 <pio_set_peripheral+0x5c>
  4250f6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4250fa:	d10a      	bne.n	425112 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4250fc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4250fe:	4313      	orrs	r3, r2
  425100:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  425102:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  425104:	6f43      	ldr	r3, [r0, #116]	; 0x74
  425106:	ea21 0102 	bic.w	r1, r1, r2
  42510a:	400b      	ands	r3, r1
  42510c:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  42510e:	6042      	str	r2, [r0, #4]
  425110:	4770      	bx	lr
	switch (ul_type) {
  425112:	2900      	cmp	r1, #0
  425114:	d1fb      	bne.n	42510e <pio_set_peripheral+0x28>
  425116:	4770      	bx	lr
  425118:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  42511c:	d020      	beq.n	425160 <pio_set_peripheral+0x7a>
  42511e:	d809      	bhi.n	425134 <pio_set_peripheral+0x4e>
  425120:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  425124:	d1f3      	bne.n	42510e <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  425126:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  425128:	4313      	orrs	r3, r2
  42512a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  42512c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  42512e:	4313      	orrs	r3, r2
  425130:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  425132:	e7ec      	b.n	42510e <pio_set_peripheral+0x28>
	switch (ul_type) {
  425134:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  425138:	d012      	beq.n	425160 <pio_set_peripheral+0x7a>
  42513a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  42513e:	d00f      	beq.n	425160 <pio_set_peripheral+0x7a>
  425140:	e7e5      	b.n	42510e <pio_set_peripheral+0x28>
{
  425142:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  425144:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  425146:	6f01      	ldr	r1, [r0, #112]	; 0x70
  425148:	43d3      	mvns	r3, r2
  42514a:	401c      	ands	r4, r3
  42514c:	4021      	ands	r1, r4
  42514e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  425150:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  425152:	6f41      	ldr	r1, [r0, #116]	; 0x74
  425154:	4023      	ands	r3, r4
  425156:	400b      	ands	r3, r1
  425158:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  42515a:	6042      	str	r2, [r0, #4]
}
  42515c:	f85d 4b04 	ldr.w	r4, [sp], #4
  425160:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  425162:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  425164:	6f03      	ldr	r3, [r0, #112]	; 0x70
  425166:	ea21 0102 	bic.w	r1, r1, r2
  42516a:	400b      	ands	r3, r1
  42516c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  42516e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  425170:	4313      	orrs	r3, r2
  425172:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  425174:	e7cb      	b.n	42510e <pio_set_peripheral+0x28>

00425176 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  425176:	6441      	str	r1, [r0, #68]	; 0x44
  425178:	4770      	bx	lr
	...

0042517c <pio_set_input>:
{
  42517c:	b570      	push	{r4, r5, r6, lr}
  42517e:	4604      	mov	r4, r0
  425180:	460d      	mov	r5, r1
  425182:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
  425184:	4b0d      	ldr	r3, [pc, #52]	; (4251bc <pio_set_input+0x40>)
  425186:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  425188:	f006 0201 	and.w	r2, r6, #1
  42518c:	4629      	mov	r1, r5
  42518e:	4620      	mov	r0, r4
  425190:	4b0b      	ldr	r3, [pc, #44]	; (4251c0 <pio_set_input+0x44>)
  425192:	4798      	blx	r3
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  425194:	f016 0f0a 	tst.w	r6, #10
  425198:	d009      	beq.n	4251ae <pio_set_input+0x32>
		p_pio->PIO_IFER = ul_mask;
  42519a:	6225      	str	r5, [r4, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  42519c:	f016 0f02 	tst.w	r6, #2
  4251a0:	d107      	bne.n	4251b2 <pio_set_input+0x36>
		if (ul_attribute & PIO_DEBOUNCE) {
  4251a2:	f016 0f08 	tst.w	r6, #8
  4251a6:	d006      	beq.n	4251b6 <pio_set_input+0x3a>
			p_pio->PIO_IFSCER = ul_mask;
  4251a8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  4251ac:	e003      	b.n	4251b6 <pio_set_input+0x3a>
		p_pio->PIO_IFDR = ul_mask;
  4251ae:	6265      	str	r5, [r4, #36]	; 0x24
  4251b0:	e7f4      	b.n	42519c <pio_set_input+0x20>
		p_pio->PIO_IFSCDR = ul_mask;
  4251b2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4251b6:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
  4251b8:	6025      	str	r5, [r4, #0]
  4251ba:	bd70      	pop	{r4, r5, r6, pc}
  4251bc:	00425177 	.word	0x00425177
  4251c0:	004250d9 	.word	0x004250d9

004251c4 <pio_set_output>:
{
  4251c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4251c6:	4604      	mov	r4, r0
  4251c8:	460d      	mov	r5, r1
  4251ca:	4616      	mov	r6, r2
  4251cc:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
  4251ce:	4b09      	ldr	r3, [pc, #36]	; (4251f4 <pio_set_output+0x30>)
  4251d0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4251d2:	9a06      	ldr	r2, [sp, #24]
  4251d4:	4629      	mov	r1, r5
  4251d6:	4620      	mov	r0, r4
  4251d8:	4b07      	ldr	r3, [pc, #28]	; (4251f8 <pio_set_output+0x34>)
  4251da:	4798      	blx	r3
	if (ul_multidrive_enable) {
  4251dc:	b12f      	cbz	r7, 4251ea <pio_set_output+0x26>
		p_pio->PIO_MDER = ul_mask;
  4251de:	6525      	str	r5, [r4, #80]	; 0x50
	if (ul_default_level) {
  4251e0:	b92e      	cbnz	r6, 4251ee <pio_set_output+0x2a>
		p_pio->PIO_CODR = ul_mask;
  4251e2:	6365      	str	r5, [r4, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4251e4:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
  4251e6:	6025      	str	r5, [r4, #0]
  4251e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p_pio->PIO_MDDR = ul_mask;
  4251ea:	6565      	str	r5, [r4, #84]	; 0x54
  4251ec:	e7f8      	b.n	4251e0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4251ee:	6325      	str	r5, [r4, #48]	; 0x30
  4251f0:	e7f8      	b.n	4251e4 <pio_set_output+0x20>
  4251f2:	bf00      	nop
  4251f4:	00425177 	.word	0x00425177
  4251f8:	004250d9 	.word	0x004250d9

004251fc <pio_configure>:
{
  4251fc:	b570      	push	{r4, r5, r6, lr}
  4251fe:	b082      	sub	sp, #8
  425200:	4604      	mov	r4, r0
  425202:	4615      	mov	r5, r2
  425204:	461e      	mov	r6, r3
	switch (ul_type) {
  425206:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  42520a:	d014      	beq.n	425236 <pio_configure+0x3a>
  42520c:	d90a      	bls.n	425224 <pio_configure+0x28>
  42520e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  425212:	d023      	beq.n	42525c <pio_configure+0x60>
  425214:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  425218:	d020      	beq.n	42525c <pio_configure+0x60>
  42521a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  42521e:	d017      	beq.n	425250 <pio_configure+0x54>
		return 0;
  425220:	2000      	movs	r0, #0
  425222:	e013      	b.n	42524c <pio_configure+0x50>
	switch (ul_type) {
  425224:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  425228:	d005      	beq.n	425236 <pio_configure+0x3a>
  42522a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  42522e:	d002      	beq.n	425236 <pio_configure+0x3a>
  425230:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  425234:	d1f4      	bne.n	425220 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  425236:	462a      	mov	r2, r5
  425238:	4620      	mov	r0, r4
  42523a:	4b10      	ldr	r3, [pc, #64]	; (42527c <pio_configure+0x80>)
  42523c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  42523e:	f006 0201 	and.w	r2, r6, #1
  425242:	4629      	mov	r1, r5
  425244:	4620      	mov	r0, r4
  425246:	4b0e      	ldr	r3, [pc, #56]	; (425280 <pio_configure+0x84>)
  425248:	4798      	blx	r3
	return 1;
  42524a:	2001      	movs	r0, #1
}
  42524c:	b002      	add	sp, #8
  42524e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_attribute);
  425250:	461a      	mov	r2, r3
  425252:	4629      	mov	r1, r5
  425254:	4b0b      	ldr	r3, [pc, #44]	; (425284 <pio_configure+0x88>)
  425256:	4798      	blx	r3
	return 1;
  425258:	2001      	movs	r0, #1
		break;
  42525a:	e7f7      	b.n	42524c <pio_configure+0x50>
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  42525c:	f006 0301 	and.w	r3, r6, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  425260:	9300      	str	r3, [sp, #0]
  425262:	f3c6 0380 	ubfx	r3, r6, #2, #1
  425266:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  42526a:	bf14      	ite	ne
  42526c:	2200      	movne	r2, #0
  42526e:	2201      	moveq	r2, #1
  425270:	4629      	mov	r1, r5
  425272:	4620      	mov	r0, r4
  425274:	4c04      	ldr	r4, [pc, #16]	; (425288 <pio_configure+0x8c>)
  425276:	47a0      	blx	r4
	return 1;
  425278:	2001      	movs	r0, #1
		break;
  42527a:	e7e7      	b.n	42524c <pio_configure+0x50>
  42527c:	004250e7 	.word	0x004250e7
  425280:	004250d9 	.word	0x004250d9
  425284:	0042517d 	.word	0x0042517d
  425288:	004251c5 	.word	0x004251c5

0042528c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  42528c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  42528e:	4770      	bx	lr

00425290 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  425290:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  425292:	4770      	bx	lr

00425294 <pio_get_pin_group>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  425294:	4b02      	ldr	r3, [pc, #8]	; (4252a0 <pio_get_pin_group+0xc>)
  425296:	eb03 1050 	add.w	r0, r3, r0, lsr #5
#endif
	return p_pio;
}
  42529a:	0240      	lsls	r0, r0, #9
  42529c:	4770      	bx	lr
  42529e:	bf00      	nop
  4252a0:	00200707 	.word	0x00200707

004252a4 <pio_set_pin_high>:
{
  4252a4:	b510      	push	{r4, lr}
  4252a6:	4604      	mov	r4, r0
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4252a8:	4b03      	ldr	r3, [pc, #12]	; (4252b8 <pio_set_pin_high+0x14>)
  4252aa:	4798      	blx	r3
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4252ac:	f004 041f 	and.w	r4, r4, #31
  4252b0:	2301      	movs	r3, #1
  4252b2:	40a3      	lsls	r3, r4
  4252b4:	6303      	str	r3, [r0, #48]	; 0x30
  4252b6:	bd10      	pop	{r4, pc}
  4252b8:	00425295 	.word	0x00425295

004252bc <pio_configure_pin>:
{
  4252bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4252be:	b083      	sub	sp, #12
  4252c0:	4604      	mov	r4, r0
  4252c2:	460d      	mov	r5, r1
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4252c4:	4b42      	ldr	r3, [pc, #264]	; (4253d0 <pio_configure_pin+0x114>)
  4252c6:	4798      	blx	r3
  4252c8:	4606      	mov	r6, r0
	switch (ul_flags & PIO_TYPE_Msk) {
  4252ca:	f005 43f0 	and.w	r3, r5, #2013265920	; 0x78000000
  4252ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4252d2:	d055      	beq.n	425380 <pio_configure_pin+0xc4>
  4252d4:	d80a      	bhi.n	4252ec <pio_configure_pin+0x30>
  4252d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4252da:	d02d      	beq.n	425338 <pio_configure_pin+0x7c>
  4252dc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4252e0:	d03c      	beq.n	42535c <pio_configure_pin+0xa0>
  4252e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4252e6:	d014      	beq.n	425312 <pio_configure_pin+0x56>
		return 0;
  4252e8:	2000      	movs	r0, #0
  4252ea:	e023      	b.n	425334 <pio_configure_pin+0x78>
	switch (ul_flags & PIO_TYPE_Msk) {
  4252ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4252f0:	d058      	beq.n	4253a4 <pio_configure_pin+0xe8>
  4252f2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4252f6:	d055      	beq.n	4253a4 <pio_configure_pin+0xe8>
  4252f8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4252fc:	d1f4      	bne.n	4252e8 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4252fe:	f004 011f 	and.w	r1, r4, #31
  425302:	2401      	movs	r4, #1
  425304:	462a      	mov	r2, r5
  425306:	fa04 f101 	lsl.w	r1, r4, r1
  42530a:	4b32      	ldr	r3, [pc, #200]	; (4253d4 <pio_configure_pin+0x118>)
  42530c:	4798      	blx	r3
	return 1;
  42530e:	4620      	mov	r0, r4
		break;
  425310:	e010      	b.n	425334 <pio_configure_pin+0x78>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  425312:	f004 041f 	and.w	r4, r4, #31
  425316:	2701      	movs	r7, #1
  425318:	fa07 f404 	lsl.w	r4, r7, r4
  42531c:	4622      	mov	r2, r4
  42531e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  425322:	4b2d      	ldr	r3, [pc, #180]	; (4253d8 <pio_configure_pin+0x11c>)
  425324:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  425326:	ea05 0207 	and.w	r2, r5, r7
  42532a:	4621      	mov	r1, r4
  42532c:	4630      	mov	r0, r6
  42532e:	4b2b      	ldr	r3, [pc, #172]	; (4253dc <pio_configure_pin+0x120>)
  425330:	4798      	blx	r3
	return 1;
  425332:	4638      	mov	r0, r7
}
  425334:	b003      	add	sp, #12
  425336:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  425338:	f004 041f 	and.w	r4, r4, #31
  42533c:	2701      	movs	r7, #1
  42533e:	fa07 f404 	lsl.w	r4, r7, r4
  425342:	4622      	mov	r2, r4
  425344:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  425348:	4b23      	ldr	r3, [pc, #140]	; (4253d8 <pio_configure_pin+0x11c>)
  42534a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  42534c:	ea05 0207 	and.w	r2, r5, r7
  425350:	4621      	mov	r1, r4
  425352:	4630      	mov	r0, r6
  425354:	4b21      	ldr	r3, [pc, #132]	; (4253dc <pio_configure_pin+0x120>)
  425356:	4798      	blx	r3
	return 1;
  425358:	4638      	mov	r0, r7
		break;
  42535a:	e7eb      	b.n	425334 <pio_configure_pin+0x78>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  42535c:	f004 041f 	and.w	r4, r4, #31
  425360:	2701      	movs	r7, #1
  425362:	fa07 f404 	lsl.w	r4, r7, r4
  425366:	4622      	mov	r2, r4
  425368:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  42536c:	4b1a      	ldr	r3, [pc, #104]	; (4253d8 <pio_configure_pin+0x11c>)
  42536e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  425370:	ea05 0207 	and.w	r2, r5, r7
  425374:	4621      	mov	r1, r4
  425376:	4630      	mov	r0, r6
  425378:	4b18      	ldr	r3, [pc, #96]	; (4253dc <pio_configure_pin+0x120>)
  42537a:	4798      	blx	r3
	return 1;
  42537c:	4638      	mov	r0, r7
		break;
  42537e:	e7d9      	b.n	425334 <pio_configure_pin+0x78>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  425380:	f004 041f 	and.w	r4, r4, #31
  425384:	2701      	movs	r7, #1
  425386:	fa07 f404 	lsl.w	r4, r7, r4
  42538a:	4622      	mov	r2, r4
  42538c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  425390:	4b11      	ldr	r3, [pc, #68]	; (4253d8 <pio_configure_pin+0x11c>)
  425392:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  425394:	ea05 0207 	and.w	r2, r5, r7
  425398:	4621      	mov	r1, r4
  42539a:	4630      	mov	r0, r6
  42539c:	4b0f      	ldr	r3, [pc, #60]	; (4253dc <pio_configure_pin+0x120>)
  42539e:	4798      	blx	r3
	return 1;
  4253a0:	4638      	mov	r0, r7
		break;
  4253a2:	e7c7      	b.n	425334 <pio_configure_pin+0x78>
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4253a4:	f004 011f 	and.w	r1, r4, #31
  4253a8:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4253aa:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4253ae:	ea05 0304 	and.w	r3, r5, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4253b2:	9300      	str	r3, [sp, #0]
  4253b4:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4253b8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4253bc:	bf14      	ite	ne
  4253be:	2200      	movne	r2, #0
  4253c0:	2201      	moveq	r2, #1
  4253c2:	fa04 f101 	lsl.w	r1, r4, r1
  4253c6:	4630      	mov	r0, r6
  4253c8:	4d05      	ldr	r5, [pc, #20]	; (4253e0 <pio_configure_pin+0x124>)
  4253ca:	47a8      	blx	r5
	return 1;
  4253cc:	4620      	mov	r0, r4
		break;
  4253ce:	e7b1      	b.n	425334 <pio_configure_pin+0x78>
  4253d0:	00425295 	.word	0x00425295
  4253d4:	0042517d 	.word	0x0042517d
  4253d8:	004250e7 	.word	0x004250e7
  4253dc:	004250d9 	.word	0x004250d9
  4253e0:	004251c5 	.word	0x004251c5

004253e4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4253e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4253e6:	4604      	mov	r4, r0
  4253e8:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4253ea:	4b11      	ldr	r3, [pc, #68]	; (425430 <pio_handler_process+0x4c>)
  4253ec:	4798      	blx	r3
  4253ee:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4253f0:	4620      	mov	r0, r4
  4253f2:	4b10      	ldr	r3, [pc, #64]	; (425434 <pio_handler_process+0x50>)
  4253f4:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4253f6:	4005      	ands	r5, r0
  4253f8:	d001      	beq.n	4253fe <pio_handler_process+0x1a>
  4253fa:	2400      	movs	r4, #0
  4253fc:	e003      	b.n	425406 <pio_handler_process+0x22>
  4253fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
  425400:	3401      	adds	r4, #1
			if (i >= MAX_INTERRUPT_SOURCES) {
  425402:	2c06      	cmp	r4, #6
  425404:	d811      	bhi.n	42542a <pio_handler_process+0x46>
		while (status != 0) {
  425406:	b18d      	cbz	r5, 42542c <pio_handler_process+0x48>
			if (gs_interrupt_sources[i].id == ul_id) {
  425408:	0123      	lsls	r3, r4, #4
  42540a:	4a0b      	ldr	r2, [pc, #44]	; (425438 <pio_handler_process+0x54>)
  42540c:	58d0      	ldr	r0, [r2, r3]
  42540e:	42b0      	cmp	r0, r6
  425410:	d1f6      	bne.n	425400 <pio_handler_process+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  425412:	eb02 1304 	add.w	r3, r2, r4, lsl #4
  425416:	6859      	ldr	r1, [r3, #4]
  425418:	420d      	tst	r5, r1
  42541a:	d0f1      	beq.n	425400 <pio_handler_process+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  42541c:	461f      	mov	r7, r3
  42541e:	68db      	ldr	r3, [r3, #12]
  425420:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  425422:	687b      	ldr	r3, [r7, #4]
  425424:	ea25 0503 	bic.w	r5, r5, r3
  425428:	e7ea      	b.n	425400 <pio_handler_process+0x1c>
  42542a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42542c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42542e:	bf00      	nop
  425430:	0042528d 	.word	0x0042528d
  425434:	00425291 	.word	0x00425291
  425438:	20414868 	.word	0x20414868

0042543c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  42543c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  42543e:	210a      	movs	r1, #10
  425440:	4801      	ldr	r0, [pc, #4]	; (425448 <PIOA_Handler+0xc>)
  425442:	4b02      	ldr	r3, [pc, #8]	; (42544c <PIOA_Handler+0x10>)
  425444:	4798      	blx	r3
  425446:	bd08      	pop	{r3, pc}
  425448:	400e0e00 	.word	0x400e0e00
  42544c:	004253e5 	.word	0x004253e5

00425450 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  425450:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  425452:	210b      	movs	r1, #11
  425454:	4801      	ldr	r0, [pc, #4]	; (42545c <PIOB_Handler+0xc>)
  425456:	4b02      	ldr	r3, [pc, #8]	; (425460 <PIOB_Handler+0x10>)
  425458:	4798      	blx	r3
  42545a:	bd08      	pop	{r3, pc}
  42545c:	400e1000 	.word	0x400e1000
  425460:	004253e5 	.word	0x004253e5

00425464 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  425464:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  425466:	210c      	movs	r1, #12
  425468:	4801      	ldr	r0, [pc, #4]	; (425470 <PIOC_Handler+0xc>)
  42546a:	4b02      	ldr	r3, [pc, #8]	; (425474 <PIOC_Handler+0x10>)
  42546c:	4798      	blx	r3
  42546e:	bd08      	pop	{r3, pc}
  425470:	400e1200 	.word	0x400e1200
  425474:	004253e5 	.word	0x004253e5

00425478 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  425478:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  42547a:	2110      	movs	r1, #16
  42547c:	4801      	ldr	r0, [pc, #4]	; (425484 <PIOD_Handler+0xc>)
  42547e:	4b02      	ldr	r3, [pc, #8]	; (425488 <PIOD_Handler+0x10>)
  425480:	4798      	blx	r3
  425482:	bd08      	pop	{r3, pc}
  425484:	400e1400 	.word	0x400e1400
  425488:	004253e5 	.word	0x004253e5

0042548c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  42548c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  42548e:	2111      	movs	r1, #17
  425490:	4801      	ldr	r0, [pc, #4]	; (425498 <PIOE_Handler+0xc>)
  425492:	4b02      	ldr	r3, [pc, #8]	; (42549c <PIOE_Handler+0x10>)
  425494:	4798      	blx	r3
  425496:	bd08      	pop	{r3, pc}
  425498:	400e1600 	.word	0x400e1600
  42549c:	004253e5 	.word	0x004253e5

004254a0 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4254a0:	2803      	cmp	r0, #3
  4254a2:	d010      	beq.n	4254c6 <pmc_mck_set_division+0x26>
  4254a4:	2804      	cmp	r0, #4
  4254a6:	d011      	beq.n	4254cc <pmc_mck_set_division+0x2c>
  4254a8:	2802      	cmp	r0, #2
  4254aa:	d012      	beq.n	4254d2 <pmc_mck_set_division+0x32>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4254ac:	2300      	movs	r3, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4254ae:	490a      	ldr	r1, [pc, #40]	; (4254d8 <pmc_mck_set_division+0x38>)
  4254b0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4254b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  4254b6:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  4254b8:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4254ba:	4b07      	ldr	r3, [pc, #28]	; (4254d8 <pmc_mck_set_division+0x38>)
  4254bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4254be:	f013 0f08 	tst.w	r3, #8
  4254c2:	d0fa      	beq.n	4254ba <pmc_mck_set_division+0x1a>
}
  4254c4:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4254c6:	f44f 7340 	mov.w	r3, #768	; 0x300
			break;
  4254ca:	e7f0      	b.n	4254ae <pmc_mck_set_division+0xe>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4254cc:	f44f 7300 	mov.w	r3, #512	; 0x200
			break;
  4254d0:	e7ed      	b.n	4254ae <pmc_mck_set_division+0xe>
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  4254d2:	f44f 7380 	mov.w	r3, #256	; 0x100
  4254d6:	e7ea      	b.n	4254ae <pmc_mck_set_division+0xe>
  4254d8:	400e0600 	.word	0x400e0600

004254dc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4254dc:	4a13      	ldr	r2, [pc, #76]	; (42552c <pmc_switch_mck_to_pllack+0x50>)
  4254de:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4254e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4254e4:	4318      	orrs	r0, r3
  4254e6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4254e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4254ec:	4a0f      	ldr	r2, [pc, #60]	; (42552c <pmc_switch_mck_to_pllack+0x50>)
  4254ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
  4254f0:	f012 0f08 	tst.w	r2, #8
  4254f4:	d102      	bne.n	4254fc <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4254f6:	b1a3      	cbz	r3, 425522 <pmc_switch_mck_to_pllack+0x46>
			--ul_timeout) {
  4254f8:	3b01      	subs	r3, #1
  4254fa:	e7f7      	b.n	4254ec <pmc_switch_mck_to_pllack+0x10>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4254fc:	4a0b      	ldr	r2, [pc, #44]	; (42552c <pmc_switch_mck_to_pllack+0x50>)
  4254fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  425500:	f023 0303 	bic.w	r3, r3, #3
  425504:	f043 0302 	orr.w	r3, r3, #2
  425508:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  42550a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  42550e:	4a07      	ldr	r2, [pc, #28]	; (42552c <pmc_switch_mck_to_pllack+0x50>)
  425510:	6e92      	ldr	r2, [r2, #104]	; 0x68
  425512:	f012 0f08 	tst.w	r2, #8
  425516:	d102      	bne.n	42551e <pmc_switch_mck_to_pllack+0x42>
			--ul_timeout) {
		if (ul_timeout == 0) {
  425518:	b12b      	cbz	r3, 425526 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
  42551a:	3b01      	subs	r3, #1
  42551c:	e7f7      	b.n	42550e <pmc_switch_mck_to_pllack+0x32>
			return 1;
		}
	}

	return 0;
  42551e:	2000      	movs	r0, #0
  425520:	4770      	bx	lr
			return 1;
  425522:	2001      	movs	r0, #1
  425524:	4770      	bx	lr
			return 1;
  425526:	2001      	movs	r0, #1
}
  425528:	4770      	bx	lr
  42552a:	bf00      	nop
  42552c:	400e0600 	.word	0x400e0600

00425530 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  425530:	b9a0      	cbnz	r0, 42555c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  425532:	4a0e      	ldr	r2, [pc, #56]	; (42556c <pmc_switch_mainck_to_xtal+0x3c>)
  425534:	6a10      	ldr	r0, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  425536:	4b0e      	ldr	r3, [pc, #56]	; (425570 <pmc_switch_mainck_to_xtal+0x40>)
  425538:	4003      	ands	r3, r0
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  42553a:	0209      	lsls	r1, r1, #8
  42553c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  42553e:	4319      	orrs	r1, r3
  425540:	4b0c      	ldr	r3, [pc, #48]	; (425574 <pmc_switch_mainck_to_xtal+0x44>)
  425542:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  425544:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  425546:	4b09      	ldr	r3, [pc, #36]	; (42556c <pmc_switch_mainck_to_xtal+0x3c>)
  425548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  42554a:	f013 0f01 	tst.w	r3, #1
  42554e:	d0fa      	beq.n	425546 <pmc_switch_mainck_to_xtal+0x16>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  425550:	4a06      	ldr	r2, [pc, #24]	; (42556c <pmc_switch_mainck_to_xtal+0x3c>)
  425552:	6a11      	ldr	r1, [r2, #32]
  425554:	4b08      	ldr	r3, [pc, #32]	; (425578 <pmc_switch_mainck_to_xtal+0x48>)
  425556:	430b      	orrs	r3, r1
  425558:	6213      	str	r3, [r2, #32]
  42555a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  42555c:	4903      	ldr	r1, [pc, #12]	; (42556c <pmc_switch_mainck_to_xtal+0x3c>)
  42555e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  425560:	4a06      	ldr	r2, [pc, #24]	; (42557c <pmc_switch_mainck_to_xtal+0x4c>)
  425562:	401a      	ands	r2, r3
  425564:	4b06      	ldr	r3, [pc, #24]	; (425580 <pmc_switch_mainck_to_xtal+0x50>)
  425566:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  425568:	620b      	str	r3, [r1, #32]
  42556a:	4770      	bx	lr
  42556c:	400e0600 	.word	0x400e0600
  425570:	ffc8fffc 	.word	0xffc8fffc
  425574:	00370001 	.word	0x00370001
  425578:	01370000 	.word	0x01370000
  42557c:	fec8fffc 	.word	0xfec8fffc
  425580:	01370002 	.word	0x01370002

00425584 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  425584:	4b02      	ldr	r3, [pc, #8]	; (425590 <pmc_osc_is_ready_mainck+0xc>)
  425586:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  425588:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  42558c:	4770      	bx	lr
  42558e:	bf00      	nop
  425590:	400e0600 	.word	0x400e0600

00425594 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  425594:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  425598:	4b01      	ldr	r3, [pc, #4]	; (4255a0 <pmc_disable_pllack+0xc>)
  42559a:	629a      	str	r2, [r3, #40]	; 0x28
  42559c:	4770      	bx	lr
  42559e:	bf00      	nop
  4255a0:	400e0600 	.word	0x400e0600

004255a4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4255a4:	4b02      	ldr	r3, [pc, #8]	; (4255b0 <pmc_is_locked_pllack+0xc>)
  4255a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4255a8:	f000 0002 	and.w	r0, r0, #2
  4255ac:	4770      	bx	lr
  4255ae:	bf00      	nop
  4255b0:	400e0600 	.word	0x400e0600

004255b4 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  4255b4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4255b8:	4b05      	ldr	r3, [pc, #20]	; (4255d0 <pmc_enable_periph_clk+0x1c>)
  4255ba:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  4255be:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4255c2:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  4255c6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4255ca:	2000      	movs	r0, #0
  4255cc:	4770      	bx	lr
  4255ce:	bf00      	nop
  4255d0:	400e0600 	.word	0x400e0600

004255d4 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4255d4:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4255d6:	4b07      	ldr	r3, [pc, #28]	; (4255f4 <spi_enable_clock+0x20>)
  4255d8:	4298      	cmp	r0, r3
  4255da:	d003      	beq.n	4255e4 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4255dc:	4b06      	ldr	r3, [pc, #24]	; (4255f8 <spi_enable_clock+0x24>)
  4255de:	4298      	cmp	r0, r3
  4255e0:	d004      	beq.n	4255ec <spi_enable_clock+0x18>
  4255e2:	bd08      	pop	{r3, pc}
  4255e4:	2015      	movs	r0, #21
  4255e6:	4b05      	ldr	r3, [pc, #20]	; (4255fc <spi_enable_clock+0x28>)
  4255e8:	4798      	blx	r3
  4255ea:	bd08      	pop	{r3, pc}
  4255ec:	202a      	movs	r0, #42	; 0x2a
  4255ee:	4b03      	ldr	r3, [pc, #12]	; (4255fc <spi_enable_clock+0x28>)
  4255f0:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4255f2:	e7f6      	b.n	4255e2 <spi_enable_clock+0xe>
  4255f4:	40008000 	.word	0x40008000
  4255f8:	40058000 	.word	0x40058000
  4255fc:	004255b5 	.word	0x004255b5

00425600 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  425600:	6843      	ldr	r3, [r0, #4]
  425602:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  425606:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  425608:	6843      	ldr	r3, [r0, #4]
  42560a:	0409      	lsls	r1, r1, #16
  42560c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  425610:	430b      	orrs	r3, r1
  425612:	6043      	str	r3, [r0, #4]
  425614:	4770      	bx	lr

00425616 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  425616:	6843      	ldr	r3, [r0, #4]
  425618:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  42561c:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  42561e:	6843      	ldr	r3, [r0, #4]
  425620:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  425624:	6041      	str	r1, [r0, #4]
  425626:	4770      	bx	lr

00425628 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  425628:	b93a      	cbnz	r2, 42563a <spi_set_clock_polarity+0x12>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  42562a:	310c      	adds	r1, #12
  42562c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  425630:	f023 0301 	bic.w	r3, r3, #1
  425634:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  425638:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  42563a:	310c      	adds	r1, #12
  42563c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  425640:	f043 0301 	orr.w	r3, r3, #1
  425644:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  425648:	4770      	bx	lr

0042564a <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  42564a:	b93a      	cbnz	r2, 42565c <spi_set_clock_phase+0x12>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  42564c:	310c      	adds	r1, #12
  42564e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  425652:	f023 0302 	bic.w	r3, r3, #2
  425656:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  42565a:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  42565c:	310c      	adds	r1, #12
  42565e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  425662:	f043 0302 	orr.w	r3, r3, #2
  425666:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  42566a:	4770      	bx	lr

0042566c <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  42566c:	2a04      	cmp	r2, #4
  42566e:	d003      	beq.n	425678 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  425670:	b182      	cbz	r2, 425694 <spi_configure_cs_behavior+0x28>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  425672:	2a08      	cmp	r2, #8
  425674:	d01c      	beq.n	4256b0 <spi_configure_cs_behavior+0x44>
  425676:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  425678:	310c      	adds	r1, #12
  42567a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42567e:	f023 0308 	bic.w	r3, r3, #8
  425682:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  425686:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42568a:	f043 0304 	orr.w	r3, r3, #4
  42568e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  425692:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  425694:	310c      	adds	r1, #12
  425696:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42569a:	f023 0308 	bic.w	r3, r3, #8
  42569e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4256a2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4256a6:	f023 0304 	bic.w	r3, r3, #4
  4256aa:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4256ae:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4256b0:	310c      	adds	r1, #12
  4256b2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4256b6:	f043 0308 	orr.w	r3, r3, #8
  4256ba:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	}
}
  4256be:	e7da      	b.n	425676 <spi_configure_cs_behavior+0xa>

004256c0 <spi_set_bits_per_transfer>:
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4256c0:	310c      	adds	r1, #12
  4256c2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4256c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4256ca:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4256ce:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4256d2:	431a      	orrs	r2, r3
  4256d4:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  4256d8:	4770      	bx	lr

004256da <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4256da:	4401      	add	r1, r0
  4256dc:	3901      	subs	r1, #1
  4256de:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4256e2:	1e43      	subs	r3, r0, #1
  4256e4:	2bfe      	cmp	r3, #254	; 0xfe
  4256e6:	d801      	bhi.n	4256ec <spi_calc_baudrate_div+0x12>
		return -1;
	}

	return baud_div;
  4256e8:	b200      	sxth	r0, r0
  4256ea:	4770      	bx	lr
		return -1;
  4256ec:	f04f 30ff 	mov.w	r0, #4294967295
}
  4256f0:	4770      	bx	lr

004256f2 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  4256f2:	b192      	cbz	r2, 42571a <spi_set_baudrate_div+0x28>
{
  4256f4:	b410      	push	{r4}
  4256f6:	4614      	mov	r4, r2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4256f8:	310c      	adds	r1, #12
  4256fa:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4256fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  425702:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  425706:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
  42570a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  42570e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    return 0;
  425712:	2000      	movs	r0, #0
}
  425714:	f85d 4b04 	ldr.w	r4, [sp], #4
  425718:	4770      	bx	lr
        return -1;
  42571a:	f04f 30ff 	mov.w	r0, #4294967295
  42571e:	4770      	bx	lr

00425720 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  425720:	b410      	push	{r4}
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  425722:	310c      	adds	r1, #12
  425724:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  425728:	b2a4      	uxth	r4, r4
  42572a:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  42572e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
  425732:	061b      	lsls	r3, r3, #24
  425734:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  425738:	4314      	orrs	r4, r2
  42573a:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
  42573e:	f85d 4b04 	ldr.w	r4, [sp], #4
  425742:	4770      	bx	lr

00425744 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  425744:	6943      	ldr	r3, [r0, #20]
  425746:	f013 0f02 	tst.w	r3, #2
  42574a:	d002      	beq.n	425752 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  42574c:	61c1      	str	r1, [r0, #28]
	return 0;
  42574e:	2000      	movs	r0, #0
  425750:	4770      	bx	lr
		return 1;
  425752:	2001      	movs	r0, #1
}
  425754:	4770      	bx	lr

00425756 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  425756:	6943      	ldr	r3, [r0, #20]
  425758:	f013 0f01 	tst.w	r3, #1
  42575c:	d003      	beq.n	425766 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  42575e:	6983      	ldr	r3, [r0, #24]
  425760:	700b      	strb	r3, [r1, #0]
	return 0;
  425762:	2000      	movs	r0, #0
  425764:	4770      	bx	lr
		return 1;
  425766:	2001      	movs	r0, #1
}
  425768:	4770      	bx	lr

0042576a <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  42576a:	b430      	push	{r4, r5}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  42576c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
  425770:	d317      	bcc.n	4257a2 <usart_set_async_baudrate+0x38>
		over = HIGH_FRQ_SAMPLE_DIV;
  425772:	2410      	movs	r4, #16
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  425774:	fb01 f104 	mul.w	r1, r1, r4
  425778:	084b      	lsrs	r3, r1, #1
  42577a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  42577e:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  425782:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  425784:	1e5d      	subs	r5, r3, #1
  425786:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  42578a:	428d      	cmp	r5, r1
  42578c:	d810      	bhi.n	4257b0 <usart_set_async_baudrate+0x46>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  42578e:	2c08      	cmp	r4, #8
  425790:	d009      	beq.n	4257a6 <usart_set_async_baudrate+0x3c>
		p_usart->US_MR |= US_MR_OVER;
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  425792:	0412      	lsls	r2, r2, #16
  425794:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  425798:	431a      	orrs	r2, r3
  42579a:	6202      	str	r2, [r0, #32]

	return 0;
  42579c:	2000      	movs	r0, #0
}
  42579e:	bc30      	pop	{r4, r5}
  4257a0:	4770      	bx	lr
		over = LOW_FRQ_SAMPLE_DIV;
  4257a2:	2408      	movs	r4, #8
  4257a4:	e7e6      	b.n	425774 <usart_set_async_baudrate+0xa>
		p_usart->US_MR |= US_MR_OVER;
  4257a6:	6841      	ldr	r1, [r0, #4]
  4257a8:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4257ac:	6041      	str	r1, [r0, #4]
  4257ae:	e7f0      	b.n	425792 <usart_set_async_baudrate+0x28>
		return 1;
  4257b0:	2001      	movs	r0, #1
  4257b2:	e7f4      	b.n	42579e <usart_set_async_baudrate+0x34>

004257b4 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  4257b4:	2340      	movs	r3, #64	; 0x40
  4257b6:	6003      	str	r3, [r0, #0]
  4257b8:	4770      	bx	lr

004257ba <usart_reset_tx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4257ba:	2388      	movs	r3, #136	; 0x88
  4257bc:	6003      	str	r3, [r0, #0]
  4257be:	4770      	bx	lr

004257c0 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  4257c0:	2310      	movs	r3, #16
  4257c2:	6003      	str	r3, [r0, #0]
  4257c4:	4770      	bx	lr

004257c6 <usart_reset_rx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4257c6:	2324      	movs	r3, #36	; 0x24
  4257c8:	6003      	str	r3, [r0, #0]
  4257ca:	4770      	bx	lr

004257cc <usart_reset_status>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  4257cc:	f44f 7380 	mov.w	r3, #256	; 0x100
  4257d0:	6003      	str	r3, [r0, #0]
  4257d2:	4770      	bx	lr

004257d4 <usart_drive_RTS_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  4257d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4257d8:	6003      	str	r3, [r0, #0]
  4257da:	4770      	bx	lr

004257dc <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4257dc:	6943      	ldr	r3, [r0, #20]
  4257de:	f013 0f02 	tst.w	r3, #2
  4257e2:	d004      	beq.n	4257ee <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4257e4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4257e8:	61c1      	str	r1, [r0, #28]
	return 0;
  4257ea:	2000      	movs	r0, #0
  4257ec:	4770      	bx	lr
		return 1;
  4257ee:	2001      	movs	r0, #1
}
  4257f0:	4770      	bx	lr

004257f2 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4257f2:	6943      	ldr	r3, [r0, #20]
  4257f4:	f013 0f01 	tst.w	r3, #1
  4257f8:	d005      	beq.n	425806 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4257fa:	6983      	ldr	r3, [r0, #24]
  4257fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
  425800:	600b      	str	r3, [r1, #0]

	return 0;
  425802:	2000      	movs	r0, #0
  425804:	4770      	bx	lr
		return 1;
  425806:	2001      	movs	r0, #1
}
  425808:	4770      	bx	lr
	...

0042580c <usart_disable_writeprotect>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  42580c:	4b01      	ldr	r3, [pc, #4]	; (425814 <usart_disable_writeprotect+0x8>)
  42580e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  425812:	4770      	bx	lr
  425814:	55534100 	.word	0x55534100

00425818 <usart_reset>:
{
  425818:	b510      	push	{r4, lr}
  42581a:	4604      	mov	r4, r0
	usart_disable_writeprotect(p_usart);
  42581c:	4b09      	ldr	r3, [pc, #36]	; (425844 <usart_reset+0x2c>)
  42581e:	4798      	blx	r3
	p_usart->US_MR = 0;
  425820:	2300      	movs	r3, #0
  425822:	6063      	str	r3, [r4, #4]
	p_usart->US_RTOR = 0;
  425824:	6263      	str	r3, [r4, #36]	; 0x24
	p_usart->US_TTGR = 0;
  425826:	62a3      	str	r3, [r4, #40]	; 0x28
	usart_reset_tx(p_usart);
  425828:	4620      	mov	r0, r4
  42582a:	4b07      	ldr	r3, [pc, #28]	; (425848 <usart_reset+0x30>)
  42582c:	4798      	blx	r3
	usart_reset_rx(p_usart);
  42582e:	4620      	mov	r0, r4
  425830:	4b06      	ldr	r3, [pc, #24]	; (42584c <usart_reset+0x34>)
  425832:	4798      	blx	r3
	usart_reset_status(p_usart);
  425834:	4620      	mov	r0, r4
  425836:	4b06      	ldr	r3, [pc, #24]	; (425850 <usart_reset+0x38>)
  425838:	4798      	blx	r3
	usart_drive_RTS_pin_high(p_usart);
  42583a:	4620      	mov	r0, r4
  42583c:	4b05      	ldr	r3, [pc, #20]	; (425854 <usart_reset+0x3c>)
  42583e:	4798      	blx	r3
  425840:	bd10      	pop	{r4, pc}
  425842:	bf00      	nop
  425844:	0042580d 	.word	0x0042580d
  425848:	004257bb 	.word	0x004257bb
  42584c:	004257c7 	.word	0x004257c7
  425850:	004257cd 	.word	0x004257cd
  425854:	004257d5 	.word	0x004257d5

00425858 <usart_init_rs232>:
{
  425858:	b570      	push	{r4, r5, r6, lr}
  42585a:	4605      	mov	r5, r0
  42585c:	460c      	mov	r4, r1
  42585e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  425860:	4b10      	ldr	r3, [pc, #64]	; (4258a4 <usart_init_rs232+0x4c>)
  425862:	4798      	blx	r3
	ul_reg_val = 0;
  425864:	2200      	movs	r2, #0
  425866:	4b10      	ldr	r3, [pc, #64]	; (4258a8 <usart_init_rs232+0x50>)
  425868:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  42586a:	b1b4      	cbz	r4, 42589a <usart_init_rs232+0x42>
  42586c:	4632      	mov	r2, r6
  42586e:	6821      	ldr	r1, [r4, #0]
  425870:	4628      	mov	r0, r5
  425872:	4b0e      	ldr	r3, [pc, #56]	; (4258ac <usart_init_rs232+0x54>)
  425874:	4798      	blx	r3
  425876:	4602      	mov	r2, r0
  425878:	b988      	cbnz	r0, 42589e <usart_init_rs232+0x46>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  42587a:	6863      	ldr	r3, [r4, #4]
  42587c:	68a1      	ldr	r1, [r4, #8]
  42587e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  425880:	6921      	ldr	r1, [r4, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  425882:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  425884:	68e1      	ldr	r1, [r4, #12]
  425886:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  425888:	4907      	ldr	r1, [pc, #28]	; (4258a8 <usart_init_rs232+0x50>)
  42588a:	6808      	ldr	r0, [r1, #0]
  42588c:	4303      	orrs	r3, r0
  42588e:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  425890:	6869      	ldr	r1, [r5, #4]
  425892:	430b      	orrs	r3, r1
  425894:	606b      	str	r3, [r5, #4]
}
  425896:	4610      	mov	r0, r2
  425898:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  42589a:	2201      	movs	r2, #1
  42589c:	e7fb      	b.n	425896 <usart_init_rs232+0x3e>
  42589e:	2201      	movs	r2, #1
  4258a0:	e7f9      	b.n	425896 <usart_init_rs232+0x3e>
  4258a2:	bf00      	nop
  4258a4:	00425819 	.word	0x00425819
  4258a8:	204148d8 	.word	0x204148d8
  4258ac:	0042576b 	.word	0x0042576b

004258b0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4258b0:	e7fe      	b.n	4258b0 <Dummy_Handler>
	...

004258b4 <Reset_Handler>:
{
  4258b4:	b500      	push	{lr}
  4258b6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4258b8:	4b1e      	ldr	r3, [pc, #120]	; (425934 <Reset_Handler+0x80>)
  4258ba:	4a1f      	ldr	r2, [pc, #124]	; (425938 <Reset_Handler+0x84>)
  4258bc:	429a      	cmp	r2, r3
  4258be:	d009      	beq.n	4258d4 <Reset_Handler+0x20>
  4258c0:	4b1c      	ldr	r3, [pc, #112]	; (425934 <Reset_Handler+0x80>)
  4258c2:	4a1d      	ldr	r2, [pc, #116]	; (425938 <Reset_Handler+0x84>)
  4258c4:	e003      	b.n	4258ce <Reset_Handler+0x1a>
                        *pDest++ = *pSrc++;
  4258c6:	6811      	ldr	r1, [r2, #0]
  4258c8:	6019      	str	r1, [r3, #0]
  4258ca:	3304      	adds	r3, #4
  4258cc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4258ce:	491b      	ldr	r1, [pc, #108]	; (42593c <Reset_Handler+0x88>)
  4258d0:	428b      	cmp	r3, r1
  4258d2:	d3f8      	bcc.n	4258c6 <Reset_Handler+0x12>
                        *pDest++ = *pSrc++;
  4258d4:	4b1a      	ldr	r3, [pc, #104]	; (425940 <Reset_Handler+0x8c>)
  4258d6:	e002      	b.n	4258de <Reset_Handler+0x2a>
                *pDest++ = 0;
  4258d8:	2200      	movs	r2, #0
  4258da:	601a      	str	r2, [r3, #0]
  4258dc:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4258de:	4a19      	ldr	r2, [pc, #100]	; (425944 <Reset_Handler+0x90>)
  4258e0:	4293      	cmp	r3, r2
  4258e2:	d3f9      	bcc.n	4258d8 <Reset_Handler+0x24>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4258e4:	4a18      	ldr	r2, [pc, #96]	; (425948 <Reset_Handler+0x94>)
  4258e6:	4b19      	ldr	r3, [pc, #100]	; (42594c <Reset_Handler+0x98>)
  4258e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4258ec:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4258ee:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4258f2:	fab3 f383 	clz	r3, r3
  4258f6:	095b      	lsrs	r3, r3, #5
  4258f8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4258fa:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4258fc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  425900:	2200      	movs	r2, #0
  425902:	4b13      	ldr	r3, [pc, #76]	; (425950 <Reset_Handler+0x9c>)
  425904:	701a      	strb	r2, [r3, #0]
	return flags;
  425906:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  425908:	4a12      	ldr	r2, [pc, #72]	; (425954 <Reset_Handler+0xa0>)
  42590a:	6813      	ldr	r3, [r2, #0]
  42590c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  425910:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  425912:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  425916:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  42591a:	b129      	cbz	r1, 425928 <Reset_Handler+0x74>
		cpu_irq_enable();
  42591c:	2201      	movs	r2, #1
  42591e:	4b0c      	ldr	r3, [pc, #48]	; (425950 <Reset_Handler+0x9c>)
  425920:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  425922:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  425926:	b662      	cpsie	i
        __libc_init_array();
  425928:	4b0b      	ldr	r3, [pc, #44]	; (425958 <Reset_Handler+0xa4>)
  42592a:	4798      	blx	r3
        main();
  42592c:	4b0b      	ldr	r3, [pc, #44]	; (42595c <Reset_Handler+0xa8>)
  42592e:	4798      	blx	r3
  425930:	e7fe      	b.n	425930 <Reset_Handler+0x7c>
  425932:	bf00      	nop
  425934:	20400000 	.word	0x20400000
  425938:	00433f10 	.word	0x00433f10
  42593c:	20400a80 	.word	0x20400a80
  425940:	20400a80 	.word	0x20400a80
  425944:	2043ac18 	.word	0x2043ac18
  425948:	e000ed00 	.word	0xe000ed00
  42594c:	00400000 	.word	0x00400000
  425950:	204000c8 	.word	0x204000c8
  425954:	e000ed88 	.word	0xe000ed88
  425958:	00427fb9 	.word	0x00427fb9
  42595c:	004271ad 	.word	0x004271ad

00425960 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  425960:	4b3c      	ldr	r3, [pc, #240]	; (425a54 <SystemCoreClockUpdate+0xf4>)
  425962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  425964:	f003 0303 	and.w	r3, r3, #3
  425968:	2b01      	cmp	r3, #1
  42596a:	d020      	beq.n	4259ae <SystemCoreClockUpdate+0x4e>
  42596c:	b183      	cbz	r3, 425990 <SystemCoreClockUpdate+0x30>
  42596e:	2b02      	cmp	r3, #2
  425970:	d039      	beq.n	4259e6 <SystemCoreClockUpdate+0x86>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  425972:	4b38      	ldr	r3, [pc, #224]	; (425a54 <SystemCoreClockUpdate+0xf4>)
  425974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  425976:	f003 0370 	and.w	r3, r3, #112	; 0x70
  42597a:	2b70      	cmp	r3, #112	; 0x70
  42597c:	d062      	beq.n	425a44 <SystemCoreClockUpdate+0xe4>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  42597e:	4b35      	ldr	r3, [pc, #212]	; (425a54 <SystemCoreClockUpdate+0xf4>)
  425980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  425982:	f3c2 1202 	ubfx	r2, r2, #4, #3
  425986:	4934      	ldr	r1, [pc, #208]	; (425a58 <SystemCoreClockUpdate+0xf8>)
  425988:	680b      	ldr	r3, [r1, #0]
  42598a:	40d3      	lsrs	r3, r2
  42598c:	600b      	str	r3, [r1, #0]
  42598e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  425990:	4b32      	ldr	r3, [pc, #200]	; (425a5c <SystemCoreClockUpdate+0xfc>)
  425992:	695b      	ldr	r3, [r3, #20]
  425994:	f013 0f80 	tst.w	r3, #128	; 0x80
  425998:	d004      	beq.n	4259a4 <SystemCoreClockUpdate+0x44>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  42599a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  42599e:	4b2e      	ldr	r3, [pc, #184]	; (425a58 <SystemCoreClockUpdate+0xf8>)
  4259a0:	601a      	str	r2, [r3, #0]
  4259a2:	e7e6      	b.n	425972 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4259a4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4259a8:	4b2b      	ldr	r3, [pc, #172]	; (425a58 <SystemCoreClockUpdate+0xf8>)
  4259aa:	601a      	str	r2, [r3, #0]
  4259ac:	e7e1      	b.n	425972 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4259ae:	4b29      	ldr	r3, [pc, #164]	; (425a54 <SystemCoreClockUpdate+0xf4>)
  4259b0:	6a1b      	ldr	r3, [r3, #32]
  4259b2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4259b6:	d003      	beq.n	4259c0 <SystemCoreClockUpdate+0x60>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4259b8:	4a29      	ldr	r2, [pc, #164]	; (425a60 <SystemCoreClockUpdate+0x100>)
  4259ba:	4b27      	ldr	r3, [pc, #156]	; (425a58 <SystemCoreClockUpdate+0xf8>)
  4259bc:	601a      	str	r2, [r3, #0]
  4259be:	e7d8      	b.n	425972 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4259c0:	4a28      	ldr	r2, [pc, #160]	; (425a64 <SystemCoreClockUpdate+0x104>)
  4259c2:	4b25      	ldr	r3, [pc, #148]	; (425a58 <SystemCoreClockUpdate+0xf8>)
  4259c4:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4259c6:	4b23      	ldr	r3, [pc, #140]	; (425a54 <SystemCoreClockUpdate+0xf4>)
  4259c8:	6a1b      	ldr	r3, [r3, #32]
  4259ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4259ce:	2b10      	cmp	r3, #16
  4259d0:	d005      	beq.n	4259de <SystemCoreClockUpdate+0x7e>
  4259d2:	2b20      	cmp	r3, #32
  4259d4:	d1cd      	bne.n	425972 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4259d6:	4a22      	ldr	r2, [pc, #136]	; (425a60 <SystemCoreClockUpdate+0x100>)
  4259d8:	4b1f      	ldr	r3, [pc, #124]	; (425a58 <SystemCoreClockUpdate+0xf8>)
  4259da:	601a      	str	r2, [r3, #0]
          break;
  4259dc:	e7c9      	b.n	425972 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4259de:	4a22      	ldr	r2, [pc, #136]	; (425a68 <SystemCoreClockUpdate+0x108>)
  4259e0:	4b1d      	ldr	r3, [pc, #116]	; (425a58 <SystemCoreClockUpdate+0xf8>)
  4259e2:	601a      	str	r2, [r3, #0]
          break;
  4259e4:	e7c5      	b.n	425972 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4259e6:	4b1b      	ldr	r3, [pc, #108]	; (425a54 <SystemCoreClockUpdate+0xf4>)
  4259e8:	6a1b      	ldr	r3, [r3, #32]
  4259ea:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4259ee:	d016      	beq.n	425a1e <SystemCoreClockUpdate+0xbe>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4259f0:	4a1b      	ldr	r2, [pc, #108]	; (425a60 <SystemCoreClockUpdate+0x100>)
  4259f2:	4b19      	ldr	r3, [pc, #100]	; (425a58 <SystemCoreClockUpdate+0xf8>)
  4259f4:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4259f6:	4b17      	ldr	r3, [pc, #92]	; (425a54 <SystemCoreClockUpdate+0xf4>)
  4259f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4259fa:	f003 0303 	and.w	r3, r3, #3
  4259fe:	2b02      	cmp	r3, #2
  425a00:	d1b7      	bne.n	425972 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  425a02:	4814      	ldr	r0, [pc, #80]	; (425a54 <SystemCoreClockUpdate+0xf4>)
  425a04:	6a82      	ldr	r2, [r0, #40]	; 0x28
  425a06:	f3c2 420a 	ubfx	r2, r2, #16, #11
  425a0a:	4913      	ldr	r1, [pc, #76]	; (425a58 <SystemCoreClockUpdate+0xf8>)
  425a0c:	680b      	ldr	r3, [r1, #0]
  425a0e:	fb02 3303 	mla	r3, r2, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  425a12:	6a82      	ldr	r2, [r0, #40]	; 0x28
  425a14:	b2d2      	uxtb	r2, r2
  425a16:	fbb3 f3f2 	udiv	r3, r3, r2
  425a1a:	600b      	str	r3, [r1, #0]
  425a1c:	e7a9      	b.n	425972 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  425a1e:	4a11      	ldr	r2, [pc, #68]	; (425a64 <SystemCoreClockUpdate+0x104>)
  425a20:	4b0d      	ldr	r3, [pc, #52]	; (425a58 <SystemCoreClockUpdate+0xf8>)
  425a22:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  425a24:	4b0b      	ldr	r3, [pc, #44]	; (425a54 <SystemCoreClockUpdate+0xf4>)
  425a26:	6a1b      	ldr	r3, [r3, #32]
  425a28:	f003 0370 	and.w	r3, r3, #112	; 0x70
  425a2c:	2b10      	cmp	r3, #16
  425a2e:	d005      	beq.n	425a3c <SystemCoreClockUpdate+0xdc>
  425a30:	2b20      	cmp	r3, #32
  425a32:	d1e0      	bne.n	4259f6 <SystemCoreClockUpdate+0x96>
            SystemCoreClock *= 3U;
  425a34:	4a0a      	ldr	r2, [pc, #40]	; (425a60 <SystemCoreClockUpdate+0x100>)
  425a36:	4b08      	ldr	r3, [pc, #32]	; (425a58 <SystemCoreClockUpdate+0xf8>)
  425a38:	601a      	str	r2, [r3, #0]
          break;
  425a3a:	e7dc      	b.n	4259f6 <SystemCoreClockUpdate+0x96>
            SystemCoreClock *= 2U;
  425a3c:	4a0a      	ldr	r2, [pc, #40]	; (425a68 <SystemCoreClockUpdate+0x108>)
  425a3e:	4b06      	ldr	r3, [pc, #24]	; (425a58 <SystemCoreClockUpdate+0xf8>)
  425a40:	601a      	str	r2, [r3, #0]
          break;
  425a42:	e7d8      	b.n	4259f6 <SystemCoreClockUpdate+0x96>
    SystemCoreClock /= 3U;
  425a44:	4a04      	ldr	r2, [pc, #16]	; (425a58 <SystemCoreClockUpdate+0xf8>)
  425a46:	6813      	ldr	r3, [r2, #0]
  425a48:	4908      	ldr	r1, [pc, #32]	; (425a6c <SystemCoreClockUpdate+0x10c>)
  425a4a:	fba1 1303 	umull	r1, r3, r1, r3
  425a4e:	085b      	lsrs	r3, r3, #1
  425a50:	6013      	str	r3, [r2, #0]
  425a52:	4770      	bx	lr
  425a54:	400e0600 	.word	0x400e0600
  425a58:	204000cc 	.word	0x204000cc
  425a5c:	400e1810 	.word	0x400e1810
  425a60:	00b71b00 	.word	0x00b71b00
  425a64:	003d0900 	.word	0x003d0900
  425a68:	007a1200 	.word	0x007a1200
  425a6c:	aaaaaaab 	.word	0xaaaaaaab

00425a70 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  425a70:	4b17      	ldr	r3, [pc, #92]	; (425ad0 <system_init_flash+0x60>)
  425a72:	4298      	cmp	r0, r3
  425a74:	d912      	bls.n	425a9c <system_init_flash+0x2c>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  425a76:	4b17      	ldr	r3, [pc, #92]	; (425ad4 <system_init_flash+0x64>)
  425a78:	4298      	cmp	r0, r3
  425a7a:	d914      	bls.n	425aa6 <system_init_flash+0x36>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  425a7c:	4b16      	ldr	r3, [pc, #88]	; (425ad8 <system_init_flash+0x68>)
  425a7e:	4298      	cmp	r0, r3
  425a80:	d915      	bls.n	425aae <system_init_flash+0x3e>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  425a82:	4b16      	ldr	r3, [pc, #88]	; (425adc <system_init_flash+0x6c>)
  425a84:	4298      	cmp	r0, r3
  425a86:	d916      	bls.n	425ab6 <system_init_flash+0x46>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  425a88:	4b15      	ldr	r3, [pc, #84]	; (425ae0 <system_init_flash+0x70>)
  425a8a:	4298      	cmp	r0, r3
  425a8c:	d917      	bls.n	425abe <system_init_flash+0x4e>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  425a8e:	4b15      	ldr	r3, [pc, #84]	; (425ae4 <system_init_flash+0x74>)
  425a90:	4298      	cmp	r0, r3
  425a92:	d919      	bls.n	425ac8 <system_init_flash+0x58>
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  425a94:	4a14      	ldr	r2, [pc, #80]	; (425ae8 <system_init_flash+0x78>)
  425a96:	4b15      	ldr	r3, [pc, #84]	; (425aec <system_init_flash+0x7c>)
  425a98:	601a      	str	r2, [r3, #0]
  425a9a:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  425a9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  425aa0:	4b12      	ldr	r3, [pc, #72]	; (425aec <system_init_flash+0x7c>)
  425aa2:	601a      	str	r2, [r3, #0]
  425aa4:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  425aa6:	4a12      	ldr	r2, [pc, #72]	; (425af0 <system_init_flash+0x80>)
  425aa8:	4b10      	ldr	r3, [pc, #64]	; (425aec <system_init_flash+0x7c>)
  425aaa:	601a      	str	r2, [r3, #0]
  425aac:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  425aae:	4a11      	ldr	r2, [pc, #68]	; (425af4 <system_init_flash+0x84>)
  425ab0:	4b0e      	ldr	r3, [pc, #56]	; (425aec <system_init_flash+0x7c>)
  425ab2:	601a      	str	r2, [r3, #0]
  425ab4:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  425ab6:	4a10      	ldr	r2, [pc, #64]	; (425af8 <system_init_flash+0x88>)
  425ab8:	4b0c      	ldr	r3, [pc, #48]	; (425aec <system_init_flash+0x7c>)
  425aba:	601a      	str	r2, [r3, #0]
  425abc:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  425abe:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  425ac2:	4b0a      	ldr	r3, [pc, #40]	; (425aec <system_init_flash+0x7c>)
  425ac4:	601a      	str	r2, [r3, #0]
  425ac6:	4770      	bx	lr
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  425ac8:	4a0c      	ldr	r2, [pc, #48]	; (425afc <system_init_flash+0x8c>)
  425aca:	4b08      	ldr	r3, [pc, #32]	; (425aec <system_init_flash+0x7c>)
  425acc:	601a      	str	r2, [r3, #0]
  425ace:	4770      	bx	lr
  425ad0:	015ef3bf 	.word	0x015ef3bf
  425ad4:	02bde77f 	.word	0x02bde77f
  425ad8:	041cdb3f 	.word	0x041cdb3f
  425adc:	057bceff 	.word	0x057bceff
  425ae0:	06dac2bf 	.word	0x06dac2bf
  425ae4:	0839b67f 	.word	0x0839b67f
  425ae8:	04000600 	.word	0x04000600
  425aec:	400e0c00 	.word	0x400e0c00
  425af0:	04000100 	.word	0x04000100
  425af4:	04000200 	.word	0x04000200
  425af8:	04000300 	.word	0x04000300
  425afc:	04000500 	.word	0x04000500

00425b00 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  425b00:	4b0a      	ldr	r3, [pc, #40]	; (425b2c <_sbrk+0x2c>)
  425b02:	681b      	ldr	r3, [r3, #0]
  425b04:	b153      	cbz	r3, 425b1c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  425b06:	4b09      	ldr	r3, [pc, #36]	; (425b2c <_sbrk+0x2c>)
  425b08:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  425b0a:	181a      	adds	r2, r3, r0
  425b0c:	4908      	ldr	r1, [pc, #32]	; (425b30 <_sbrk+0x30>)
  425b0e:	4291      	cmp	r1, r2
  425b10:	db08      	blt.n	425b24 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  425b12:	4610      	mov	r0, r2
  425b14:	4a05      	ldr	r2, [pc, #20]	; (425b2c <_sbrk+0x2c>)
  425b16:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  425b18:	4618      	mov	r0, r3
  425b1a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  425b1c:	4a05      	ldr	r2, [pc, #20]	; (425b34 <_sbrk+0x34>)
  425b1e:	4b03      	ldr	r3, [pc, #12]	; (425b2c <_sbrk+0x2c>)
  425b20:	601a      	str	r2, [r3, #0]
  425b22:	e7f0      	b.n	425b06 <_sbrk+0x6>
		return (caddr_t) -1;	
  425b24:	f04f 30ff 	mov.w	r0, #4294967295
}
  425b28:	4770      	bx	lr
  425b2a:	bf00      	nop
  425b2c:	204148dc 	.word	0x204148dc
  425b30:	2045fffc 	.word	0x2045fffc
  425b34:	2043ce18 	.word	0x2043ce18

00425b38 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  425b38:	f04f 30ff 	mov.w	r0, #4294967295
  425b3c:	4770      	bx	lr

00425b3e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  425b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  425b42:	604b      	str	r3, [r1, #4]

	return 0;
}
  425b44:	2000      	movs	r0, #0
  425b46:	4770      	bx	lr

00425b48 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  425b48:	2001      	movs	r0, #1
  425b4a:	4770      	bx	lr

00425b4c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  425b4c:	2000      	movs	r0, #0
  425b4e:	4770      	bx	lr

00425b50 <alarm_handler>:
		xSemaphoreGiveFromISR(xSemaphoreChangeGraph, &xHigherPriorityTaskWoken);
	}
}

static void alarm_handler(lv_obj_t * obj, lv_event_t event) {
	if(event == LV_EVENT_VALUE_CHANGED) {
  425b50:	2910      	cmp	r1, #16
  425b52:	d000      	beq.n	425b56 <alarm_handler+0x6>
  425b54:	4770      	bx	lr
static void alarm_handler(lv_obj_t * obj, lv_event_t event) {
  425b56:	b508      	push	{r3, lr}
		printf("Toggled\n");
  425b58:	4801      	ldr	r0, [pc, #4]	; (425b60 <alarm_handler+0x10>)
  425b5a:	4b02      	ldr	r3, [pc, #8]	; (425b64 <alarm_handler+0x14>)
  425b5c:	4798      	blx	r3
  425b5e:	bd08      	pop	{r3, pc}
  425b60:	00431d28 	.word	0x00431d28
  425b64:	00428009 	.word	0x00428009

00425b68 <down_handler>:
	}
}

static void down_handler(lv_obj_t * obj, lv_event_t event) {
	if(event == LV_EVENT_CLICKED) {
  425b68:	2906      	cmp	r1, #6
  425b6a:	d000      	beq.n	425b6e <down_handler+0x6>
  425b6c:	4770      	bx	lr
static void down_handler(lv_obj_t * obj, lv_event_t event) {
  425b6e:	b500      	push	{lr}
  425b70:	b083      	sub	sp, #12
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  425b72:	a902      	add	r1, sp, #8
  425b74:	2300      	movs	r3, #0
  425b76:	f841 3d04 	str.w	r3, [r1, #-4]!
		xSemaphoreGiveFromISR(xSemaphoreDown, &xHigherPriorityTaskWoken);
  425b7a:	4b03      	ldr	r3, [pc, #12]	; (425b88 <down_handler+0x20>)
  425b7c:	6818      	ldr	r0, [r3, #0]
  425b7e:	4b03      	ldr	r3, [pc, #12]	; (425b8c <down_handler+0x24>)
  425b80:	4798      	blx	r3
	}
}
  425b82:	b003      	add	sp, #12
  425b84:	f85d fb04 	ldr.w	pc, [sp], #4
  425b88:	2043a3e0 	.word	0x2043a3e0
  425b8c:	004021d9 	.word	0x004021d9

00425b90 <up_handler>:
		xSemaphoreGiveFromISR(xSemaphoreMinus, &xHigherPriorityTaskWoken);
	}
}

static void up_handler(lv_obj_t * obj, lv_event_t event) {
	if(event == LV_EVENT_CLICKED) {
  425b90:	2906      	cmp	r1, #6
  425b92:	d000      	beq.n	425b96 <up_handler+0x6>
  425b94:	4770      	bx	lr
static void up_handler(lv_obj_t * obj, lv_event_t event) {
  425b96:	b500      	push	{lr}
  425b98:	b083      	sub	sp, #12
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  425b9a:	a902      	add	r1, sp, #8
  425b9c:	2300      	movs	r3, #0
  425b9e:	f841 3d04 	str.w	r3, [r1, #-4]!
		xSemaphoreGiveFromISR(xSemaphoreUp, &xHigherPriorityTaskWoken);
  425ba2:	4b03      	ldr	r3, [pc, #12]	; (425bb0 <up_handler+0x20>)
  425ba4:	6818      	ldr	r0, [r3, #0]
  425ba6:	4b03      	ldr	r3, [pc, #12]	; (425bb4 <up_handler+0x24>)
  425ba8:	4798      	blx	r3
	}
}
  425baa:	b003      	add	sp, #12
  425bac:	f85d fb04 	ldr.w	pc, [sp], #4
  425bb0:	2043a400 	.word	0x2043a400
  425bb4:	004021d9 	.word	0x004021d9

00425bb8 <minus_handler>:
	if(event == LV_EVENT_CLICKED) {
  425bb8:	2906      	cmp	r1, #6
  425bba:	d000      	beq.n	425bbe <minus_handler+0x6>
  425bbc:	4770      	bx	lr
static void minus_handler(lv_obj_t * obj, lv_event_t event) {
  425bbe:	b500      	push	{lr}
  425bc0:	b083      	sub	sp, #12
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  425bc2:	a902      	add	r1, sp, #8
  425bc4:	2300      	movs	r3, #0
  425bc6:	f841 3d04 	str.w	r3, [r1, #-4]!
		xSemaphoreGiveFromISR(xSemaphoreMinus, &xHigherPriorityTaskWoken);
  425bca:	4b03      	ldr	r3, [pc, #12]	; (425bd8 <minus_handler+0x20>)
  425bcc:	6818      	ldr	r0, [r3, #0]
  425bce:	4b03      	ldr	r3, [pc, #12]	; (425bdc <minus_handler+0x24>)
  425bd0:	4798      	blx	r3
}
  425bd2:	b003      	add	sp, #12
  425bd4:	f85d fb04 	ldr.w	pc, [sp], #4
  425bd8:	2043a3f4 	.word	0x2043a3f4
  425bdc:	004021d9 	.word	0x004021d9

00425be0 <plus_handler>:
	if(event == LV_EVENT_CLICKED) {
  425be0:	2906      	cmp	r1, #6
  425be2:	d000      	beq.n	425be6 <plus_handler+0x6>
  425be4:	4770      	bx	lr
static void plus_handler(lv_obj_t * obj, lv_event_t event) {
  425be6:	b500      	push	{lr}
  425be8:	b083      	sub	sp, #12
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  425bea:	a902      	add	r1, sp, #8
  425bec:	2300      	movs	r3, #0
  425bee:	f841 3d04 	str.w	r3, [r1, #-4]!
		xSemaphoreGiveFromISR(xSemaphorePlus, &xHigherPriorityTaskWoken);
  425bf2:	4b03      	ldr	r3, [pc, #12]	; (425c00 <plus_handler+0x20>)
  425bf4:	6818      	ldr	r0, [r3, #0]
  425bf6:	4b03      	ldr	r3, [pc, #12]	; (425c04 <plus_handler+0x24>)
  425bf8:	4798      	blx	r3
}
  425bfa:	b003      	add	sp, #12
  425bfc:	f85d fb04 	ldr.w	pc, [sp], #4
  425c00:	2043abec 	.word	0x2043abec
  425c04:	004021d9 	.word	0x004021d9

00425c08 <bpm_handler>:
	if(event == LV_EVENT_CLICKED) {
  425c08:	2906      	cmp	r1, #6
  425c0a:	d000      	beq.n	425c0e <bpm_handler+0x6>
  425c0c:	4770      	bx	lr
static void bpm_handler(lv_obj_t * obj, lv_event_t event) {
  425c0e:	b500      	push	{lr}
  425c10:	b083      	sub	sp, #12
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  425c12:	a902      	add	r1, sp, #8
  425c14:	2300      	movs	r3, #0
  425c16:	f841 3d04 	str.w	r3, [r1, #-4]!
		xSemaphoreGiveFromISR(xSemaphoreSaveBpm, &xHigherPriorityTaskWoken);
  425c1a:	4b03      	ldr	r3, [pc, #12]	; (425c28 <bpm_handler+0x20>)
  425c1c:	6818      	ldr	r0, [r3, #0]
  425c1e:	4b03      	ldr	r3, [pc, #12]	; (425c2c <bpm_handler+0x24>)
  425c20:	4798      	blx	r3
}
  425c22:	b003      	add	sp, #12
  425c24:	f85d fb04 	ldr.w	pc, [sp], #4
  425c28:	2043a3f0 	.word	0x2043a3f0
  425c2c:	004021d9 	.word	0x004021d9

00425c30 <change_handler>:
	if(event == LV_EVENT_CLICKED) {
  425c30:	2906      	cmp	r1, #6
  425c32:	d000      	beq.n	425c36 <change_handler+0x6>
  425c34:	4770      	bx	lr
static void change_handler(lv_obj_t * obj, lv_event_t event) {
  425c36:	b500      	push	{lr}
  425c38:	b083      	sub	sp, #12
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  425c3a:	a902      	add	r1, sp, #8
  425c3c:	2300      	movs	r3, #0
  425c3e:	f841 3d04 	str.w	r3, [r1, #-4]!
		xSemaphoreGiveFromISR(xSemaphoreChangeGraph, &xHigherPriorityTaskWoken);
  425c42:	4b03      	ldr	r3, [pc, #12]	; (425c50 <change_handler+0x20>)
  425c44:	6818      	ldr	r0, [r3, #0]
  425c46:	4b03      	ldr	r3, [pc, #12]	; (425c54 <change_handler+0x24>)
  425c48:	4798      	blx	r3
}
  425c4a:	b003      	add	sp, #12
  425c4c:	f85d fb04 	ldr.w	pc, [sp], #4
  425c50:	2043a408 	.word	0x2043a408
  425c54:	004021d9 	.word	0x004021d9

00425c58 <ox_handler>:
	if(event == LV_EVENT_CLICKED) {
  425c58:	2906      	cmp	r1, #6
  425c5a:	d000      	beq.n	425c5e <ox_handler+0x6>
  425c5c:	4770      	bx	lr
static void ox_handler(lv_obj_t * obj, lv_event_t event) {
  425c5e:	b500      	push	{lr}
  425c60:	b083      	sub	sp, #12
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  425c62:	a902      	add	r1, sp, #8
  425c64:	2300      	movs	r3, #0
  425c66:	f841 3d04 	str.w	r3, [r1, #-4]!
		xSemaphoreGiveFromISR(xSemaphoreSave, &xHigherPriorityTaskWoken);
  425c6a:	4b03      	ldr	r3, [pc, #12]	; (425c78 <ox_handler+0x20>)
  425c6c:	6818      	ldr	r0, [r3, #0]
  425c6e:	4b03      	ldr	r3, [pc, #12]	; (425c7c <ox_handler+0x24>)
  425c70:	4798      	blx	r3
}
  425c72:	b003      	add	sp, #12
  425c74:	f85d fb04 	ldr.w	pc, [sp], #4
  425c78:	2043a404 	.word	0x2043a404
  425c7c:	004021d9 	.word	0x004021d9

00425c80 <my_flush_cb>:

/************************************************************************/
/* Port lvgl                                                            */
/************************************************************************/

void my_flush_cb(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p) {
  425c80:	b570      	push	{r4, r5, r6, lr}
  425c82:	4605      	mov	r5, r0
  425c84:	460c      	mov	r4, r1
  425c86:	4616      	mov	r6, r2
  ili9341_set_top_left_limit(area->x1, area->y1);   ili9341_set_bottom_right_limit(area->x2, area->y2);
  425c88:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
  425c8c:	f9b4 0000 	ldrsh.w	r0, [r4]
  425c90:	4b0d      	ldr	r3, [pc, #52]	; (425cc8 <my_flush_cb+0x48>)
  425c92:	4798      	blx	r3
  425c94:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  425c98:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
  425c9c:	4b0b      	ldr	r3, [pc, #44]	; (425ccc <my_flush_cb+0x4c>)
  425c9e:	4798      	blx	r3
  ili9341_copy_pixels_to_screen(color_p,  (area->x2 - area->x1) * (area->y2 - area->y1));
  425ca0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  425ca4:	f9b4 1000 	ldrsh.w	r1, [r4]
  425ca8:	1a5b      	subs	r3, r3, r1
  425caa:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  425cae:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  425cb2:	1a89      	subs	r1, r1, r2
  425cb4:	fb01 f103 	mul.w	r1, r1, r3
  425cb8:	4630      	mov	r0, r6
  425cba:	4b05      	ldr	r3, [pc, #20]	; (425cd0 <my_flush_cb+0x50>)
  425cbc:	4798      	blx	r3
  
  /* IMPORTANT!!!
  * Inform the graphics library that you are ready with the flushing*/
  lv_disp_flush_ready(disp_drv);
  425cbe:	4628      	mov	r0, r5
  425cc0:	4b04      	ldr	r3, [pc, #16]	; (425cd4 <my_flush_cb+0x54>)
  425cc2:	4798      	blx	r3
  425cc4:	bd70      	pop	{r4, r5, r6, pc}
  425cc6:	bf00      	nop
  425cc8:	00400ee9 	.word	0x00400ee9
  425ccc:	00400f09 	.word	0x00400f09
  425cd0:	00400f59 	.word	0x00400f59
  425cd4:	00415cf5 	.word	0x00415cf5

00425cd8 <my_input_read>:
}

bool my_input_read(lv_indev_drv_t * drv, lv_indev_data_t*data) {
  425cd8:	b510      	push	{r4, lr}
  425cda:	b082      	sub	sp, #8
  425cdc:	460c      	mov	r4, r1
  int px, py, pressed;
  
  if (readPoint(&px, &py)) {
  425cde:	4669      	mov	r1, sp
  425ce0:	a801      	add	r0, sp, #4
  425ce2:	4b07      	ldr	r3, [pc, #28]	; (425d00 <my_input_read+0x28>)
  425ce4:	4798      	blx	r3
  425ce6:	b940      	cbnz	r0, 425cfa <my_input_read+0x22>
    data->state = LV_INDEV_STATE_PR;
  }
  else {
    data->state = LV_INDEV_STATE_REL;
  425ce8:	2300      	movs	r3, #0
  425cea:	73a3      	strb	r3, [r4, #14]
  }
  
  data->point.x = px;
  425cec:	9b01      	ldr	r3, [sp, #4]
  425cee:	8023      	strh	r3, [r4, #0]
  data->point.y = py;
  425cf0:	9b00      	ldr	r3, [sp, #0]
  425cf2:	8063      	strh	r3, [r4, #2]
  return false; /*No buffering now so no more data read*/
}
  425cf4:	2000      	movs	r0, #0
  425cf6:	b002      	add	sp, #8
  425cf8:	bd10      	pop	{r4, pc}
    data->state = LV_INDEV_STATE_PR;
  425cfa:	2301      	movs	r3, #1
  425cfc:	73a3      	strb	r3, [r4, #14]
  425cfe:	e7f5      	b.n	425cec <my_input_read+0x14>
  425d00:	00400c45 	.word	0x00400c45

00425d04 <AFEC_pot_CallbackY>:
static void AFEC_pot_CallbackY(void){
  425d04:	b510      	push	{r4, lr}
  425d06:	b082      	sub	sp, #8
	afec->AFEC_CSELR = afec_ch;
  425d08:	4b08      	ldr	r3, [pc, #32]	; (425d2c <AFEC_pot_CallbackY+0x28>)
  425d0a:	2206      	movs	r2, #6
  425d0c:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  425d0e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	g_ul_valueECG = afec_channel_get_value(AFEC_POTY, AFEC_POT_CHANNELY);
  425d10:	4b07      	ldr	r3, [pc, #28]	; (425d30 <AFEC_pot_CallbackY+0x2c>)
  425d12:	601a      	str	r2, [r3, #0]
	ecgRead.value = g_ul_valueECG;
  425d14:	681b      	ldr	r3, [r3, #0]
  425d16:	a902      	add	r1, sp, #8
  425d18:	f841 3d04 	str.w	r3, [r1, #-4]!
	xQueueSendFromISR(xQueueECG, &ecgRead, 0);
  425d1c:	2300      	movs	r3, #0
  425d1e:	461a      	mov	r2, r3
  425d20:	4804      	ldr	r0, [pc, #16]	; (425d34 <AFEC_pot_CallbackY+0x30>)
  425d22:	6800      	ldr	r0, [r0, #0]
  425d24:	4c04      	ldr	r4, [pc, #16]	; (425d38 <AFEC_pot_CallbackY+0x34>)
  425d26:	47a0      	blx	r4
}
  425d28:	b002      	add	sp, #8
  425d2a:	bd10      	pop	{r4, pc}
  425d2c:	40064000 	.word	0x40064000
  425d30:	2043a118 	.word	0x2043a118
  425d34:	2043a3dc 	.word	0x2043a3dc
  425d38:	004020c9 	.word	0x004020c9

00425d3c <config_AFEC_pot>:
static void config_AFEC_pot(Afec *afec, uint32_t afec_id, uint32_t afec_channel, afec_callback_t callback){
  425d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  425d40:	b08a      	sub	sp, #40	; 0x28
  425d42:	4604      	mov	r4, r0
  425d44:	460d      	mov	r5, r1
  425d46:	4616      	mov	r6, r2
  425d48:	4698      	mov	r8, r3
  afec_enable(afec);
  425d4a:	4b21      	ldr	r3, [pc, #132]	; (425dd0 <config_AFEC_pot+0x94>)
  425d4c:	4798      	blx	r3
  afec_get_config_defaults(&afec_cfg);
  425d4e:	a804      	add	r0, sp, #16
  425d50:	4b20      	ldr	r3, [pc, #128]	; (425dd4 <config_AFEC_pot+0x98>)
  425d52:	4798      	blx	r3
  afec_init(afec, &afec_cfg);
  425d54:	a904      	add	r1, sp, #16
  425d56:	4620      	mov	r0, r4
  425d58:	4b1f      	ldr	r3, [pc, #124]	; (425dd8 <config_AFEC_pot+0x9c>)
  425d5a:	4798      	blx	r3
	reg = afec->AFEC_MR;
  425d5c:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  425d5e:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  425d62:	6063      	str	r3, [r4, #4]
  afec_ch_get_config_defaults(&afec_ch_cfg);
  425d64:	a803      	add	r0, sp, #12
  425d66:	4b1d      	ldr	r3, [pc, #116]	; (425ddc <config_AFEC_pot+0xa0>)
  425d68:	4798      	blx	r3
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  425d6a:	2300      	movs	r3, #0
  425d6c:	f88d 300d 	strb.w	r3, [sp, #13]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  425d70:	b2b7      	uxth	r7, r6
  425d72:	aa03      	add	r2, sp, #12
  425d74:	4639      	mov	r1, r7
  425d76:	4620      	mov	r0, r4
  425d78:	4b19      	ldr	r3, [pc, #100]	; (425de0 <config_AFEC_pot+0xa4>)
  425d7a:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  425d7c:	6667      	str	r7, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  425d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
  425d82:	66e3      	str	r3, [r4, #108]	; 0x6c
  afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  425d84:	a801      	add	r0, sp, #4
  425d86:	4b17      	ldr	r3, [pc, #92]	; (425de4 <config_AFEC_pot+0xa8>)
  425d88:	4798      	blx	r3
  afec_temp_sensor_set_config(afec, &afec_temp_sensor_cfg);
  425d8a:	a901      	add	r1, sp, #4
  425d8c:	4620      	mov	r0, r4
  425d8e:	4b16      	ldr	r3, [pc, #88]	; (425de8 <config_AFEC_pot+0xac>)
  425d90:	4798      	blx	r3
  afec_set_callback(afec, afec_channel,	callback, 1);
  425d92:	2301      	movs	r3, #1
  425d94:	4642      	mov	r2, r8
  425d96:	4631      	mov	r1, r6
  425d98:	4620      	mov	r0, r4
  425d9a:	4c14      	ldr	r4, [pc, #80]	; (425dec <config_AFEC_pot+0xb0>)
  425d9c:	47a0      	blx	r4
  NVIC_SetPriority(afec_id, 4);
  425d9e:	b26b      	sxtb	r3, r5
  if(IRQn < 0) {
  425da0:	2b00      	cmp	r3, #0
  425da2:	db0e      	blt.n	425dc2 <config_AFEC_pot+0x86>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  425da4:	4a12      	ldr	r2, [pc, #72]	; (425df0 <config_AFEC_pot+0xb4>)
  425da6:	2180      	movs	r1, #128	; 0x80
  425da8:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  425daa:	095b      	lsrs	r3, r3, #5
  425dac:	f005 051f 	and.w	r5, r5, #31
  425db0:	2201      	movs	r2, #1
  425db2:	fa02 f505 	lsl.w	r5, r2, r5
  425db6:	4a0f      	ldr	r2, [pc, #60]	; (425df4 <config_AFEC_pot+0xb8>)
  425db8:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
}
  425dbc:	b00a      	add	sp, #40	; 0x28
  425dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  425dc2:	f005 010f 	and.w	r1, r5, #15
  425dc6:	4a0c      	ldr	r2, [pc, #48]	; (425df8 <config_AFEC_pot+0xbc>)
  425dc8:	440a      	add	r2, r1
  425dca:	2180      	movs	r1, #128	; 0x80
  425dcc:	7611      	strb	r1, [r2, #24]
  425dce:	e7ec      	b.n	425daa <config_AFEC_pot+0x6e>
  425dd0:	00401731 	.word	0x00401731
  425dd4:	004015a9 	.word	0x004015a9
  425dd8:	004015f9 	.word	0x004015f9
  425ddc:	004015d9 	.word	0x004015d9
  425de0:	00401559 	.word	0x00401559
  425de4:	004015e3 	.word	0x004015e3
  425de8:	0040158b 	.word	0x0040158b
  425dec:	004016a5 	.word	0x004016a5
  425df0:	e000e400 	.word	0xe000e400
  425df4:	e000e100 	.word	0xe000e100
  425df8:	e000ecfc 	.word	0xe000ecfc

00425dfc <RTT_init>:
{
  425dfc:	b570      	push	{r4, r5, r6, lr}
  425dfe:	4606      	mov	r6, r0
  425e00:	460d      	mov	r5, r1
	rtt_sel_source(RTT, false);
  425e02:	4c10      	ldr	r4, [pc, #64]	; (425e44 <RTT_init+0x48>)
  425e04:	2100      	movs	r1, #0
  425e06:	4620      	mov	r0, r4
  425e08:	4b0f      	ldr	r3, [pc, #60]	; (425e48 <RTT_init+0x4c>)
  425e0a:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  425e0c:	4631      	mov	r1, r6
  425e0e:	4620      	mov	r0, r4
  425e10:	4b0e      	ldr	r3, [pc, #56]	; (425e4c <RTT_init+0x50>)
  425e12:	4798      	blx	r3
	ul_previous_time = rtt_read_timer_value(RTT);
  425e14:	4620      	mov	r0, r4
  425e16:	4b0e      	ldr	r3, [pc, #56]	; (425e50 <RTT_init+0x54>)
  425e18:	4798      	blx	r3
	rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  425e1a:	1941      	adds	r1, r0, r5
  425e1c:	4620      	mov	r0, r4
  425e1e:	4b0d      	ldr	r3, [pc, #52]	; (425e54 <RTT_init+0x58>)
  425e20:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  425e22:	4b0d      	ldr	r3, [pc, #52]	; (425e58 <RTT_init+0x5c>)
  425e24:	2208      	movs	r2, #8
  425e26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  425e2a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  425e2e:	2180      	movs	r1, #128	; 0x80
  425e30:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  425e34:	601a      	str	r2, [r3, #0]
	rtt_enable_interrupt(RTT, RTT_MR_ALMIEN | RTT_MR_RTTINCIEN);
  425e36:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  425e3a:	4620      	mov	r0, r4
  425e3c:	4b07      	ldr	r3, [pc, #28]	; (425e5c <RTT_init+0x60>)
  425e3e:	4798      	blx	r3
  425e40:	bd70      	pop	{r4, r5, r6, pc}
  425e42:	bf00      	nop
  425e44:	400e1830 	.word	0x400e1830
  425e48:	00400711 	.word	0x00400711
  425e4c:	004006fd 	.word	0x004006fd
  425e50:	00400765 	.word	0x00400765
  425e54:	00400779 	.word	0x00400779
  425e58:	e000e100 	.word	0xe000e100
  425e5c:	0040073d 	.word	0x0040073d

00425e60 <task_process>:
static void task_process(void *pvParameters) {
  425e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  425e64:	b084      	sub	sp, #16
	config_AFEC_pot(AFEC_POTY, AFEC_POT_IDY, AFEC_POT_CHANNELY, AFEC_pot_CallbackY);
  425e66:	4c23      	ldr	r4, [pc, #140]	; (425ef4 <task_process+0x94>)
  425e68:	4b23      	ldr	r3, [pc, #140]	; (425ef8 <task_process+0x98>)
  425e6a:	2206      	movs	r2, #6
  425e6c:	2128      	movs	r1, #40	; 0x28
  425e6e:	4620      	mov	r0, r4
  425e70:	4d22      	ldr	r5, [pc, #136]	; (425efc <task_process+0x9c>)
  425e72:	47a8      	blx	r5
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  425e74:	2340      	movs	r3, #64	; 0x40
  425e76:	6163      	str	r3, [r4, #20]
	afec->AFEC_CR = AFEC_CR_START;
  425e78:	2302      	movs	r3, #2
  425e7a:	6023      	str	r3, [r4, #0]
	uint32_t bpm = 99;
  425e7c:	2763      	movs	r7, #99	; 0x63
	Bool down = false;
  425e7e:	2600      	movs	r6, #0
	Bool pico = false;
  425e80:	4635      	mov	r5, r6
  425e82:	e017      	b.n	425eb4 <task_process+0x54>
				if (pico == true && down == false) {
  425e84:	f086 0201 	eor.w	r2, r6, #1
  425e88:	4215      	tst	r5, r2
  425e8a:	d000      	beq.n	425e8e <task_process+0x2e>
					down = true;
  425e8c:	2601      	movs	r6, #1
			send.ecg = ecgRead.value;
  425e8e:	9301      	str	r3, [sp, #4]
			send.bpm = bpm;
  425e90:	9702      	str	r7, [sp, #8]
			xQueueSend(xQueueEcgInfo, &send, 0);
  425e92:	2300      	movs	r3, #0
  425e94:	461a      	mov	r2, r3
  425e96:	a901      	add	r1, sp, #4
  425e98:	4819      	ldr	r0, [pc, #100]	; (425f00 <task_process+0xa0>)
  425e9a:	6800      	ldr	r0, [r0, #0]
  425e9c:	4c19      	ldr	r4, [pc, #100]	; (425f04 <task_process+0xa4>)
  425e9e:	47a0      	blx	r4
		if (f_rtt_alarme) {
  425ea0:	4b19      	ldr	r3, [pc, #100]	; (425f08 <task_process+0xa8>)
  425ea2:	781b      	ldrb	r3, [r3, #0]
  425ea4:	b133      	cbz	r3, 425eb4 <task_process+0x54>
			RTT_init(pllPreScale, irqRTTvalue);
  425ea6:	2101      	movs	r1, #1
  425ea8:	2020      	movs	r0, #32
  425eaa:	4b18      	ldr	r3, [pc, #96]	; (425f0c <task_process+0xac>)
  425eac:	4798      	blx	r3
			f_rtt_alarme = false;
  425eae:	2200      	movs	r2, #0
  425eb0:	4b15      	ldr	r3, [pc, #84]	; (425f08 <task_process+0xa8>)
  425eb2:	701a      	strb	r2, [r3, #0]
		if ( xQueueReceive( xQueueECG, &(ecgRead), 0 )) {
  425eb4:	2300      	movs	r3, #0
  425eb6:	461a      	mov	r2, r3
  425eb8:	a903      	add	r1, sp, #12
  425eba:	4815      	ldr	r0, [pc, #84]	; (425f10 <task_process+0xb0>)
  425ebc:	6800      	ldr	r0, [r0, #0]
  425ebe:	4c15      	ldr	r4, [pc, #84]	; (425f14 <task_process+0xb4>)
  425ec0:	47a0      	blx	r4
  425ec2:	2800      	cmp	r0, #0
  425ec4:	d0ec      	beq.n	425ea0 <task_process+0x40>
			if (ecgRead.value > 3280) {
  425ec6:	9b03      	ldr	r3, [sp, #12]
  425ec8:	f5b3 6f4d 	cmp.w	r3, #3280	; 0xcd0
  425ecc:	d9da      	bls.n	425e84 <task_process+0x24>
				if (pico == false) {
  425ece:	b91d      	cbnz	r5, 425ed8 <task_process+0x78>
					now = count;
  425ed0:	4a11      	ldr	r2, [pc, #68]	; (425f18 <task_process+0xb8>)
  425ed2:	f8d2 8000 	ldr.w	r8, [r2]
					pico = true;
  425ed6:	2501      	movs	r5, #1
				if (down && pico) {
  425ed8:	422e      	tst	r6, r5
  425eda:	d0d8      	beq.n	425e8e <task_process+0x2e>
					now = count - now;
  425edc:	4a0e      	ldr	r2, [pc, #56]	; (425f18 <task_process+0xb8>)
  425ede:	6812      	ldr	r2, [r2, #0]
  425ee0:	eba2 0808 	sub.w	r8, r2, r8
					dT = 60000/now;
  425ee4:	f64e 2760 	movw	r7, #60000	; 0xea60
  425ee8:	fb97 f7f8 	sdiv	r7, r7, r8
					down = false;
  425eec:	2600      	movs	r6, #0
					pico = false;
  425eee:	4635      	mov	r5, r6
  425ef0:	e7cd      	b.n	425e8e <task_process+0x2e>
  425ef2:	bf00      	nop
  425ef4:	40064000 	.word	0x40064000
  425ef8:	00425d05 	.word	0x00425d05
  425efc:	00425d3d 	.word	0x00425d3d
  425f00:	2043a3e4 	.word	0x2043a3e4
  425f04:	00401ee5 	.word	0x00401ee5
  425f08:	204000d0 	.word	0x204000d0
  425f0c:	00425dfd 	.word	0x00425dfd
  425f10:	2043a3dc 	.word	0x2043a3dc
  425f14:	004022cd 	.word	0x004022cd
  425f18:	2043a0e4 	.word	0x2043a0e4

00425f1c <task_alarm>:
static void task_alarm( void *pvParameters) {
  425f1c:	b570      	push	{r4, r5, r6, lr}
  425f1e:	b082      	sub	sp, #8
	xSemaphoreAlarm = xSemaphoreCreateBinary();
  425f20:	2203      	movs	r2, #3
  425f22:	2100      	movs	r1, #0
  425f24:	2001      	movs	r0, #1
  425f26:	4b2f      	ldr	r3, [pc, #188]	; (425fe4 <task_alarm+0xc8>)
  425f28:	4798      	blx	r3
  425f2a:	4b2f      	ldr	r3, [pc, #188]	; (425fe8 <task_alarm+0xcc>)
  425f2c:	6018      	str	r0, [r3, #0]
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
  425f2e:	4b2f      	ldr	r3, [pc, #188]	; (425fec <task_alarm+0xd0>)
  425f30:	4798      	blx	r3
  425f32:	4b2f      	ldr	r3, [pc, #188]	; (425ff0 <task_alarm+0xd4>)
  425f34:	4798      	blx	r3
	lv_obj_t * btnAlarm = lv_btn_create(lv_scr_act(), NULL);
  425f36:	2100      	movs	r1, #0
  425f38:	4b2e      	ldr	r3, [pc, #184]	; (425ff4 <task_alarm+0xd8>)
  425f3a:	4798      	blx	r3
  425f3c:	4605      	mov	r5, r0
	lv_obj_set_event_cb(btnAlarm, alarm_handler);
  425f3e:	492e      	ldr	r1, [pc, #184]	; (425ff8 <task_alarm+0xdc>)
  425f40:	4b2e      	ldr	r3, [pc, #184]	; (425ffc <task_alarm+0xe0>)
  425f42:	4798      	blx	r3
	lv_obj_set_width(btnAlarm, 50);  lv_obj_set_height(btnAlarm, 30);
  425f44:	2132      	movs	r1, #50	; 0x32
  425f46:	4628      	mov	r0, r5
  425f48:	4b2d      	ldr	r3, [pc, #180]	; (426000 <task_alarm+0xe4>)
  425f4a:	4798      	blx	r3
  425f4c:	211e      	movs	r1, #30
  425f4e:	4628      	mov	r0, r5
  425f50:	4b2c      	ldr	r3, [pc, #176]	; (426004 <task_alarm+0xe8>)
  425f52:	4798      	blx	r3
	lv_obj_align(btnAlarm, NULL, LV_ALIGN_IN_TOP_LEFT, 60, 3);
  425f54:	2303      	movs	r3, #3
  425f56:	9300      	str	r3, [sp, #0]
  425f58:	233c      	movs	r3, #60	; 0x3c
  425f5a:	2201      	movs	r2, #1
  425f5c:	2100      	movs	r1, #0
  425f5e:	4628      	mov	r0, r5
  425f60:	4c29      	ldr	r4, [pc, #164]	; (426008 <task_alarm+0xec>)
  425f62:	47a0      	blx	r4
	lv_btn_set_checkable(btnAlarm, true);
  425f64:	2101      	movs	r1, #1
  425f66:	4628      	mov	r0, r5
  425f68:	4b28      	ldr	r3, [pc, #160]	; (42600c <task_alarm+0xf0>)
  425f6a:	4798      	blx	r3
	lv_btn_toggle(btnAlarm);
  425f6c:	4628      	mov	r0, r5
  425f6e:	4b28      	ldr	r3, [pc, #160]	; (426010 <task_alarm+0xf4>)
  425f70:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  425f72:	f04f 03f8 	mov.w	r3, #248	; 0xf8
  425f76:	2229      	movs	r2, #41	; 0x29
  425f78:	2100      	movs	r1, #0
  425f7a:	4628      	mov	r0, r5
  425f7c:	4c25      	ldr	r4, [pc, #148]	; (426014 <task_alarm+0xf8>)
  425f7e:	47a0      	blx	r4
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  425f80:	f04f 03f8 	mov.w	r3, #248	; 0xf8
  425f84:	2239      	movs	r2, #57	; 0x39
  425f86:	2100      	movs	r1, #0
  425f88:	4628      	mov	r0, r5
  425f8a:	47a0      	blx	r4
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  425f8c:	2300      	movs	r3, #0
  425f8e:	2230      	movs	r2, #48	; 0x30
  425f90:	4619      	mov	r1, r3
  425f92:	4628      	mov	r0, r5
  425f94:	4e20      	ldr	r6, [pc, #128]	; (426018 <task_alarm+0xfc>)
  425f96:	47b0      	blx	r6
	lv_obj_t * labelAlarm = lv_label_create(btnAlarm, NULL);
  425f98:	2100      	movs	r1, #0
  425f9a:	4628      	mov	r0, r5
  425f9c:	4b1f      	ldr	r3, [pc, #124]	; (42601c <task_alarm+0x100>)
  425f9e:	4798      	blx	r3
  425fa0:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  425fa2:	4b1f      	ldr	r3, [pc, #124]	; (426020 <task_alarm+0x104>)
  425fa4:	881b      	ldrh	r3, [r3, #0]
  425fa6:	f248 0289 	movw	r2, #32905	; 0x8089
  425faa:	2100      	movs	r1, #0
  425fac:	47a0      	blx	r4
	lv_label_set_text_fmt(labelAlarm," ALARM ");
  425fae:	491d      	ldr	r1, [pc, #116]	; (426024 <task_alarm+0x108>)
  425fb0:	4630      	mov	r0, r6
  425fb2:	4b1d      	ldr	r3, [pc, #116]	; (426028 <task_alarm+0x10c>)
  425fb4:	4798      	blx	r3
  425fb6:	e002      	b.n	425fbe <task_alarm+0xa2>
		vTaskDelay(25);
  425fb8:	2019      	movs	r0, #25
  425fba:	4b1c      	ldr	r3, [pc, #112]	; (42602c <task_alarm+0x110>)
  425fbc:	4798      	blx	r3
		if( xSemaphoreTake(xSemaphoreAlarm, ( TickType_t ) 500 / portTICK_PERIOD_MS) == pdTRUE ) {
  425fbe:	2300      	movs	r3, #0
  425fc0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  425fc4:	4619      	mov	r1, r3
  425fc6:	4808      	ldr	r0, [pc, #32]	; (425fe8 <task_alarm+0xcc>)
  425fc8:	6800      	ldr	r0, [r0, #0]
  425fca:	4c19      	ldr	r4, [pc, #100]	; (426030 <task_alarm+0x114>)
  425fcc:	47a0      	blx	r4
  425fce:	2801      	cmp	r0, #1
  425fd0:	d1f2      	bne.n	425fb8 <task_alarm+0x9c>
			if (lv_btn_get_state(btnAlarm) != LV_BTN_STATE_DISABLED) {
  425fd2:	4628      	mov	r0, r5
  425fd4:	4b17      	ldr	r3, [pc, #92]	; (426034 <task_alarm+0x118>)
  425fd6:	4798      	blx	r3
  425fd8:	2802      	cmp	r0, #2
  425fda:	d0ed      	beq.n	425fb8 <task_alarm+0x9c>
				lv_btn_toggle(btnAlarm);
  425fdc:	4628      	mov	r0, r5
  425fde:	4b0c      	ldr	r3, [pc, #48]	; (426010 <task_alarm+0xf4>)
  425fe0:	4798      	blx	r3
  425fe2:	e7e9      	b.n	425fb8 <task_alarm+0x9c>
  425fe4:	00401e65 	.word	0x00401e65
  425fe8:	2043a3ec 	.word	0x2043a3ec
  425fec:	00415c15 	.word	0x00415c15
  425ff0:	00403659 	.word	0x00403659
  425ff4:	0041ea21 	.word	0x0041ea21
  425ff8:	00425b51 	.word	0x00425b51
  425ffc:	0040575d 	.word	0x0040575d
  426000:	00406cd5 	.word	0x00406cd5
  426004:	00406d15 	.word	0x00406d15
  426008:	004061a9 	.word	0x004061a9
  42600c:	0041eb3d 	.word	0x0041eb3d
  426010:	0041ec15 	.word	0x0041ec15
  426014:	00407969 	.word	0x00407969
  426018:	00407929 	.word	0x00407929
  42601c:	004241a9 	.word	0x004241a9
  426020:	00431cf8 	.word	0x00431cf8
  426024:	004334e0 	.word	0x004334e0
  426028:	00423fa1 	.word	0x00423fa1
  42602c:	00402b15 	.word	0x00402b15
  426030:	004022cd 	.word	0x004022cd
  426034:	0041ec65 	.word	0x0041ec65

00426038 <task_ox>:
static void task_ox(void *pvParameters) {
  426038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42603c:	b08b      	sub	sp, #44	; 0x2c
	xSemaphoreSave = xSemaphoreCreateBinary();
  42603e:	2203      	movs	r2, #3
  426040:	2100      	movs	r1, #0
  426042:	2001      	movs	r0, #1
  426044:	4ca4      	ldr	r4, [pc, #656]	; (4262d8 <task_ox+0x2a0>)
  426046:	47a0      	blx	r4
  426048:	4ba4      	ldr	r3, [pc, #656]	; (4262dc <task_ox+0x2a4>)
  42604a:	6018      	str	r0, [r3, #0]
	xSemaphoreSaveBpm = xSemaphoreCreateBinary();
  42604c:	2203      	movs	r2, #3
  42604e:	2100      	movs	r1, #0
  426050:	2001      	movs	r0, #1
  426052:	47a0      	blx	r4
  426054:	4ba2      	ldr	r3, [pc, #648]	; (4262e0 <task_ox+0x2a8>)
  426056:	6018      	str	r0, [r3, #0]
	xSemaphoreChangeGraph = xSemaphoreCreateBinary();
  426058:	2203      	movs	r2, #3
  42605a:	2100      	movs	r1, #0
  42605c:	2001      	movs	r0, #1
  42605e:	47a0      	blx	r4
  426060:	4ba0      	ldr	r3, [pc, #640]	; (4262e4 <task_ox+0x2ac>)
  426062:	6018      	str	r0, [r3, #0]
	xSemaphorePlus = xSemaphoreCreateBinary();
  426064:	2203      	movs	r2, #3
  426066:	2100      	movs	r1, #0
  426068:	2001      	movs	r0, #1
  42606a:	47a0      	blx	r4
  42606c:	4b9e      	ldr	r3, [pc, #632]	; (4262e8 <task_ox+0x2b0>)
  42606e:	6018      	str	r0, [r3, #0]
	xSemaphoreMinus = xSemaphoreCreateBinary();
  426070:	2203      	movs	r2, #3
  426072:	2100      	movs	r1, #0
  426074:	2001      	movs	r0, #1
  426076:	47a0      	blx	r4
  426078:	4b9c      	ldr	r3, [pc, #624]	; (4262ec <task_ox+0x2b4>)
  42607a:	6018      	str	r0, [r3, #0]
	needle_colors[0] = LV_COLOR_LIME;
  42607c:	4c9c      	ldr	r4, [pc, #624]	; (4262f0 <task_ox+0x2b8>)
  42607e:	7823      	ldrb	r3, [r4, #0]
  426080:	f043 0307 	orr.w	r3, r3, #7
  426084:	f36f 03c7 	bfc	r3, #3, #5
  426088:	7023      	strb	r3, [r4, #0]
  42608a:	23e0      	movs	r3, #224	; 0xe0
  42608c:	7063      	strb	r3, [r4, #1]
  42608e:	4b99      	ldr	r3, [pc, #612]	; (4262f4 <task_ox+0x2bc>)
  426090:	4798      	blx	r3
  426092:	4b99      	ldr	r3, [pc, #612]	; (4262f8 <task_ox+0x2c0>)
  426094:	4798      	blx	r3
	lv_obj_t * gaugeOx = lv_gauge_create(lv_scr_act(), NULL);
  426096:	2100      	movs	r1, #0
  426098:	4b98      	ldr	r3, [pc, #608]	; (4262fc <task_ox+0x2c4>)
  42609a:	4798      	blx	r3
  42609c:	4605      	mov	r5, r0
  42609e:	9004      	str	r0, [sp, #16]
	lv_gauge_set_needle_count(gaugeOx, 1, needle_colors);
  4260a0:	4622      	mov	r2, r4
  4260a2:	2101      	movs	r1, #1
  4260a4:	4b96      	ldr	r3, [pc, #600]	; (426300 <task_ox+0x2c8>)
  4260a6:	4798      	blx	r3
	lv_obj_set_size(gaugeOx, 160, 160);
  4260a8:	22a0      	movs	r2, #160	; 0xa0
  4260aa:	4611      	mov	r1, r2
  4260ac:	4628      	mov	r0, r5
  4260ae:	4b95      	ldr	r3, [pc, #596]	; (426304 <task_ox+0x2cc>)
  4260b0:	4798      	blx	r3
	lv_obj_align(gaugeOx, NULL, LV_ALIGN_CENTER, -80, 25);
  4260b2:	2419      	movs	r4, #25
  4260b4:	9400      	str	r4, [sp, #0]
  4260b6:	f06f 034f 	mvn.w	r3, #79	; 0x4f
  4260ba:	2200      	movs	r2, #0
  4260bc:	4611      	mov	r1, r2
  4260be:	4628      	mov	r0, r5
  4260c0:	4f91      	ldr	r7, [pc, #580]	; (426308 <task_ox+0x2d0>)
  4260c2:	47b8      	blx	r7
    lv_linemeter_set_range(gauge, min, max);
  4260c4:	2264      	movs	r2, #100	; 0x64
  4260c6:	2155      	movs	r1, #85	; 0x55
  4260c8:	4628      	mov	r0, r5
  4260ca:	4b90      	ldr	r3, [pc, #576]	; (42630c <task_ox+0x2d4>)
  4260cc:	4798      	blx	r3
    lv_linemeter_set_value(gauge, value);
  4260ce:	215a      	movs	r1, #90	; 0x5a
  4260d0:	4628      	mov	r0, r5
  4260d2:	4b8f      	ldr	r3, [pc, #572]	; (426310 <task_ox+0x2d8>)
  4260d4:	4798      	blx	r3
  4260d6:	4b87      	ldr	r3, [pc, #540]	; (4262f4 <task_ox+0x2bc>)
  4260d8:	4798      	blx	r3
  4260da:	4b87      	ldr	r3, [pc, #540]	; (4262f8 <task_ox+0x2c0>)
  4260dc:	4798      	blx	r3
	lv_obj_t * btnOx = lv_btn_create(lv_scr_act(), NULL);
  4260de:	2100      	movs	r1, #0
  4260e0:	4b8c      	ldr	r3, [pc, #560]	; (426314 <task_ox+0x2dc>)
  4260e2:	4798      	blx	r3
  4260e4:	4607      	mov	r7, r0
	lv_obj_set_event_cb(btnOx, ox_handler);
  4260e6:	498c      	ldr	r1, [pc, #560]	; (426318 <task_ox+0x2e0>)
  4260e8:	4b8c      	ldr	r3, [pc, #560]	; (42631c <task_ox+0x2e4>)
  4260ea:	4798      	blx	r3
	lv_obj_set_width(btnOx, 60);  lv_obj_set_height(btnOx, 60);
  4260ec:	213c      	movs	r1, #60	; 0x3c
  4260ee:	4638      	mov	r0, r7
  4260f0:	4b8b      	ldr	r3, [pc, #556]	; (426320 <task_ox+0x2e8>)
  4260f2:	4798      	blx	r3
  4260f4:	213c      	movs	r1, #60	; 0x3c
  4260f6:	4638      	mov	r0, r7
  4260f8:	4b8a      	ldr	r3, [pc, #552]	; (426324 <task_ox+0x2ec>)
  4260fa:	4798      	blx	r3
	lv_obj_align(btnOx, NULL, LV_ALIGN_CENTER, -80, 25);
  4260fc:	9400      	str	r4, [sp, #0]
  4260fe:	f06f 034f 	mvn.w	r3, #79	; 0x4f
  426102:	2200      	movs	r2, #0
  426104:	4611      	mov	r1, r2
  426106:	4638      	mov	r0, r7
  426108:	4c7f      	ldr	r4, [pc, #508]	; (426308 <task_ox+0x2d0>)
  42610a:	47a0      	blx	r4
	lv_obj_set_style_local_bg_color(btnOx, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_WHITE );
  42610c:	4b86      	ldr	r3, [pc, #536]	; (426328 <task_ox+0x2f0>)
  42610e:	881b      	ldrh	r3, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  426110:	f8ad 3016 	strh.w	r3, [sp, #22]
  426114:	2229      	movs	r2, #41	; 0x29
  426116:	2100      	movs	r1, #0
  426118:	4638      	mov	r0, r7
  42611a:	f8df a25c 	ldr.w	sl, [pc, #604]	; 426378 <task_ox+0x340>
  42611e:	47d0      	blx	sl
	lv_obj_set_style_local_border_color(btnOx, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_BLACK );
  426120:	2400      	movs	r4, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  426122:	4623      	mov	r3, r4
  426124:	2239      	movs	r2, #57	; 0x39
  426126:	4621      	mov	r1, r4
  426128:	4638      	mov	r0, r7
  42612a:	47d0      	blx	sl
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  42612c:	4623      	mov	r3, r4
  42612e:	2230      	movs	r2, #48	; 0x30
  426130:	4621      	mov	r1, r4
  426132:	4638      	mov	r0, r7
  426134:	4d7d      	ldr	r5, [pc, #500]	; (42632c <task_ox+0x2f4>)
  426136:	47a8      	blx	r5
	labelOx = lv_label_create(btnOx, NULL);
  426138:	4621      	mov	r1, r4
  42613a:	4638      	mov	r0, r7
  42613c:	4a7c      	ldr	r2, [pc, #496]	; (426330 <task_ox+0x2f8>)
  42613e:	4790      	blx	r2
  426140:	4b7c      	ldr	r3, [pc, #496]	; (426334 <task_ox+0x2fc>)
  426142:	6018      	str	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  426144:	4b7c      	ldr	r3, [pc, #496]	; (426338 <task_ox+0x300>)
  426146:	f248 028e 	movw	r2, #32910	; 0x808e
  42614a:	4621      	mov	r1, r4
  42614c:	4d7b      	ldr	r5, [pc, #492]	; (42633c <task_ox+0x304>)
  42614e:	47a8      	blx	r5
  426150:	4a68      	ldr	r2, [pc, #416]	; (4262f4 <task_ox+0x2bc>)
  426152:	4790      	blx	r2
  426154:	4a68      	ldr	r2, [pc, #416]	; (4262f8 <task_ox+0x2c0>)
  426156:	4790      	blx	r2
	labelOxo2 = lv_label_create(lv_scr_act(), NULL);
  426158:	4621      	mov	r1, r4
  42615a:	4a75      	ldr	r2, [pc, #468]	; (426330 <task_ox+0x2f8>)
  42615c:	4790      	blx	r2
  42615e:	4f78      	ldr	r7, [pc, #480]	; (426340 <task_ox+0x308>)
  426160:	6038      	str	r0, [r7, #0]
	lv_obj_align(labelOxo2, NULL, LV_ALIGN_CENTER, -75, 66);
  426162:	2342      	movs	r3, #66	; 0x42
  426164:	9300      	str	r3, [sp, #0]
  426166:	f06f 034a 	mvn.w	r3, #74	; 0x4a
  42616a:	4622      	mov	r2, r4
  42616c:	4621      	mov	r1, r4
  42616e:	4d66      	ldr	r5, [pc, #408]	; (426308 <task_ox+0x2d0>)
  426170:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  426172:	4623      	mov	r3, r4
  426174:	f248 0289 	movw	r2, #32905	; 0x8089
  426178:	4621      	mov	r1, r4
  42617a:	6838      	ldr	r0, [r7, #0]
  42617c:	47d0      	blx	sl
	lv_label_set_text_fmt(labelOxo2, "O2");
  42617e:	4971      	ldr	r1, [pc, #452]	; (426344 <task_ox+0x30c>)
  426180:	6838      	ldr	r0, [r7, #0]
  426182:	4a71      	ldr	r2, [pc, #452]	; (426348 <task_ox+0x310>)
  426184:	4790      	blx	r2
  426186:	4a5b      	ldr	r2, [pc, #364]	; (4262f4 <task_ox+0x2bc>)
  426188:	4790      	blx	r2
  42618a:	4a5b      	ldr	r2, [pc, #364]	; (4262f8 <task_ox+0x2c0>)
  42618c:	4790      	blx	r2
	labelOxSaved = lv_label_create(lv_scr_act(), NULL);
  42618e:	4621      	mov	r1, r4
  426190:	4a67      	ldr	r2, [pc, #412]	; (426330 <task_ox+0x2f8>)
  426192:	4790      	blx	r2
  426194:	4f6d      	ldr	r7, [pc, #436]	; (42634c <task_ox+0x314>)
  426196:	6038      	str	r0, [r7, #0]
	lv_obj_align(labelOxSaved, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 5);
  426198:	2305      	movs	r3, #5
  42619a:	9300      	str	r3, [sp, #0]
  42619c:	4623      	mov	r3, r4
  42619e:	2201      	movs	r2, #1
  4261a0:	4621      	mov	r1, r4
  4261a2:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  4261a4:	4b64      	ldr	r3, [pc, #400]	; (426338 <task_ox+0x300>)
  4261a6:	f248 028e 	movw	r2, #32910	; 0x808e
  4261aa:	4621      	mov	r1, r4
  4261ac:	6838      	ldr	r0, [r7, #0]
  4261ae:	4d63      	ldr	r5, [pc, #396]	; (42633c <task_ox+0x304>)
  4261b0:	47a8      	blx	r5
	lv_label_set_text_fmt(labelOxSaved, "%s", "--");
  4261b2:	4a67      	ldr	r2, [pc, #412]	; (426350 <task_ox+0x318>)
  4261b4:	4967      	ldr	r1, [pc, #412]	; (426354 <task_ox+0x31c>)
  4261b6:	6838      	ldr	r0, [r7, #0]
  4261b8:	4d63      	ldr	r5, [pc, #396]	; (426348 <task_ox+0x310>)
  4261ba:	47a8      	blx	r5
  4261bc:	4a4d      	ldr	r2, [pc, #308]	; (4262f4 <task_ox+0x2bc>)
  4261be:	4790      	blx	r2
  4261c0:	4a4d      	ldr	r2, [pc, #308]	; (4262f8 <task_ox+0x2c0>)
  4261c2:	4790      	blx	r2
	lv_obj_t * btnGraf = lv_btn_create(lv_scr_act(), NULL);
  4261c4:	4621      	mov	r1, r4
  4261c6:	4a53      	ldr	r2, [pc, #332]	; (426314 <task_ox+0x2dc>)
  4261c8:	4790      	blx	r2
  4261ca:	4607      	mov	r7, r0
	lv_obj_set_event_cb(btnGraf, change_handler);
  4261cc:	4962      	ldr	r1, [pc, #392]	; (426358 <task_ox+0x320>)
  4261ce:	4a53      	ldr	r2, [pc, #332]	; (42631c <task_ox+0x2e4>)
  4261d0:	4790      	blx	r2
	lv_obj_set_width(btnGraf, 30);  lv_obj_set_height(btnGraf, 30);
  4261d2:	211e      	movs	r1, #30
  4261d4:	4638      	mov	r0, r7
  4261d6:	4a52      	ldr	r2, [pc, #328]	; (426320 <task_ox+0x2e8>)
  4261d8:	4790      	blx	r2
  4261da:	211e      	movs	r1, #30
  4261dc:	4638      	mov	r0, r7
  4261de:	4a51      	ldr	r2, [pc, #324]	; (426324 <task_ox+0x2ec>)
  4261e0:	4790      	blx	r2
	lv_obj_align(btnGraf, NULL, LV_ALIGN_CENTER, 20, -50);
  4261e2:	f06f 0331 	mvn.w	r3, #49	; 0x31
  4261e6:	9300      	str	r3, [sp, #0]
  4261e8:	2314      	movs	r3, #20
  4261ea:	4622      	mov	r2, r4
  4261ec:	4621      	mov	r1, r4
  4261ee:	4638      	mov	r0, r7
  4261f0:	4d45      	ldr	r5, [pc, #276]	; (426308 <task_ox+0x2d0>)
  4261f2:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4261f4:	4623      	mov	r3, r4
  4261f6:	2229      	movs	r2, #41	; 0x29
  4261f8:	4621      	mov	r1, r4
  4261fa:	4638      	mov	r0, r7
  4261fc:	47d0      	blx	sl
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  4261fe:	4623      	mov	r3, r4
  426200:	2239      	movs	r2, #57	; 0x39
  426202:	4621      	mov	r1, r4
  426204:	4638      	mov	r0, r7
  426206:	47d0      	blx	sl
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  426208:	4623      	mov	r3, r4
  42620a:	2230      	movs	r2, #48	; 0x30
  42620c:	4621      	mov	r1, r4
  42620e:	4638      	mov	r0, r7
  426210:	4d46      	ldr	r5, [pc, #280]	; (42632c <task_ox+0x2f4>)
  426212:	47a8      	blx	r5
	Changegraph = lv_label_create(btnGraf, NULL);
  426214:	4621      	mov	r1, r4
  426216:	4638      	mov	r0, r7
  426218:	4a45      	ldr	r2, [pc, #276]	; (426330 <task_ox+0x2f8>)
  42621a:	4790      	blx	r2
  42621c:	4f4f      	ldr	r7, [pc, #316]	; (42635c <task_ox+0x324>)
  42621e:	6038      	str	r0, [r7, #0]
	lv_label_set_recolor(Changegraph, true);
  426220:	2101      	movs	r1, #1
  426222:	4a4f      	ldr	r2, [pc, #316]	; (426360 <task_ox+0x328>)
  426224:	4790      	blx	r2
	lv_label_set_text(Changegraph, "#ffffff  " LV_SYMBOL_SHUFFLE " #");
  426226:	494f      	ldr	r1, [pc, #316]	; (426364 <task_ox+0x32c>)
  426228:	6838      	ldr	r0, [r7, #0]
  42622a:	4a4f      	ldr	r2, [pc, #316]	; (426368 <task_ox+0x330>)
  42622c:	4790      	blx	r2
  42622e:	4a31      	ldr	r2, [pc, #196]	; (4262f4 <task_ox+0x2bc>)
  426230:	4790      	blx	r2
  426232:	4a31      	ldr	r2, [pc, #196]	; (4262f8 <task_ox+0x2c0>)
  426234:	4790      	blx	r2
	lv_obj_t * btnBpm = lv_btn_create(lv_scr_act(), NULL);
  426236:	4621      	mov	r1, r4
  426238:	4a36      	ldr	r2, [pc, #216]	; (426314 <task_ox+0x2dc>)
  42623a:	4790      	blx	r2
  42623c:	4607      	mov	r7, r0
	lv_obj_set_event_cb(btnBpm, bpm_handler);
  42623e:	494b      	ldr	r1, [pc, #300]	; (42636c <task_ox+0x334>)
  426240:	4a36      	ldr	r2, [pc, #216]	; (42631c <task_ox+0x2e4>)
  426242:	4790      	blx	r2
	lv_obj_set_width(btnBpm, 70);  lv_obj_set_height(btnBpm, 70);
  426244:	2146      	movs	r1, #70	; 0x46
  426246:	4638      	mov	r0, r7
  426248:	4a35      	ldr	r2, [pc, #212]	; (426320 <task_ox+0x2e8>)
  42624a:	4790      	blx	r2
  42624c:	2146      	movs	r1, #70	; 0x46
  42624e:	4638      	mov	r0, r7
  426250:	4a34      	ldr	r2, [pc, #208]	; (426324 <task_ox+0x2ec>)
  426252:	4790      	blx	r2
	lv_obj_align(btnBpm, NULL, LV_ALIGN_CENTER, 120, 104);
  426254:	2368      	movs	r3, #104	; 0x68
  426256:	9300      	str	r3, [sp, #0]
  426258:	2378      	movs	r3, #120	; 0x78
  42625a:	4622      	mov	r2, r4
  42625c:	4621      	mov	r1, r4
  42625e:	4638      	mov	r0, r7
  426260:	4d29      	ldr	r5, [pc, #164]	; (426308 <task_ox+0x2d0>)
  426262:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  426264:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  426268:	2229      	movs	r2, #41	; 0x29
  42626a:	4621      	mov	r1, r4
  42626c:	4638      	mov	r0, r7
  42626e:	47d0      	blx	sl
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  426270:	4623      	mov	r3, r4
  426272:	2239      	movs	r2, #57	; 0x39
  426274:	4621      	mov	r1, r4
  426276:	4638      	mov	r0, r7
  426278:	47d0      	blx	sl
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  42627a:	4623      	mov	r3, r4
  42627c:	2230      	movs	r2, #48	; 0x30
  42627e:	4621      	mov	r1, r4
  426280:	4638      	mov	r0, r7
  426282:	4d2a      	ldr	r5, [pc, #168]	; (42632c <task_ox+0x2f4>)
  426284:	47a8      	blx	r5
  426286:	4b1b      	ldr	r3, [pc, #108]	; (4262f4 <task_ox+0x2bc>)
  426288:	4798      	blx	r3
  42628a:	4b1b      	ldr	r3, [pc, #108]	; (4262f8 <task_ox+0x2c0>)
  42628c:	4798      	blx	r3
	labelBpm = lv_label_create(lv_scr_act(), NULL);
  42628e:	4621      	mov	r1, r4
  426290:	4b27      	ldr	r3, [pc, #156]	; (426330 <task_ox+0x2f8>)
  426292:	4798      	blx	r3
  426294:	4f36      	ldr	r7, [pc, #216]	; (426370 <task_ox+0x338>)
  426296:	6038      	str	r0, [r7, #0]
	lv_obj_align(labelBpm, NULL, LV_ALIGN_CENTER, 100, 86);
  426298:	2356      	movs	r3, #86	; 0x56
  42629a:	9300      	str	r3, [sp, #0]
  42629c:	2364      	movs	r3, #100	; 0x64
  42629e:	4622      	mov	r2, r4
  4262a0:	4621      	mov	r1, r4
  4262a2:	4d19      	ldr	r5, [pc, #100]	; (426308 <task_ox+0x2d0>)
  4262a4:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  4262a6:	4b33      	ldr	r3, [pc, #204]	; (426374 <task_ox+0x33c>)
  4262a8:	f248 028e 	movw	r2, #32910	; 0x808e
  4262ac:	4621      	mov	r1, r4
  4262ae:	6838      	ldr	r0, [r7, #0]
  4262b0:	4d22      	ldr	r5, [pc, #136]	; (42633c <task_ox+0x304>)
  4262b2:	47a8      	blx	r5
	lv_label_set_text_fmt(labelBpm, "%s", "--");
  4262b4:	4a26      	ldr	r2, [pc, #152]	; (426350 <task_ox+0x318>)
  4262b6:	4927      	ldr	r1, [pc, #156]	; (426354 <task_ox+0x31c>)
  4262b8:	6838      	ldr	r0, [r7, #0]
  4262ba:	4b23      	ldr	r3, [pc, #140]	; (426348 <task_ox+0x310>)
  4262bc:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  4262be:	4623      	mov	r3, r4
  4262c0:	f248 0289 	movw	r2, #32905	; 0x8089
  4262c4:	4621      	mov	r1, r4
  4262c6:	6838      	ldr	r0, [r7, #0]
  4262c8:	47d0      	blx	sl
  4262ca:	4b0a      	ldr	r3, [pc, #40]	; (4262f4 <task_ox+0x2bc>)
  4262cc:	4798      	blx	r3
  4262ce:	4b0a      	ldr	r3, [pc, #40]	; (4262f8 <task_ox+0x2c0>)
  4262d0:	4798      	blx	r3
	labelBpmText = lv_label_create(lv_scr_act(), NULL);
  4262d2:	4621      	mov	r1, r4
  4262d4:	e052      	b.n	42637c <task_ox+0x344>
  4262d6:	bf00      	nop
  4262d8:	00401e65 	.word	0x00401e65
  4262dc:	2043a404 	.word	0x2043a404
  4262e0:	2043a3f0 	.word	0x2043a3f0
  4262e4:	2043a408 	.word	0x2043a408
  4262e8:	2043abec 	.word	0x2043abec
  4262ec:	2043a3f4 	.word	0x2043a3f4
  4262f0:	2043a148 	.word	0x2043a148
  4262f4:	00415c15 	.word	0x00415c15
  4262f8:	00403659 	.word	0x00403659
  4262fc:	004221b9 	.word	0x004221b9
  426300:	00421e55 	.word	0x00421e55
  426304:	00406be1 	.word	0x00406be1
  426308:	004061a9 	.word	0x004061a9
  42630c:	004245ad 	.word	0x004245ad
  426310:	00424535 	.word	0x00424535
  426314:	0041ea21 	.word	0x0041ea21
  426318:	00425c59 	.word	0x00425c59
  42631c:	0040575d 	.word	0x0040575d
  426320:	00406cd5 	.word	0x00406cd5
  426324:	00406d15 	.word	0x00406d15
  426328:	00431cf8 	.word	0x00431cf8
  42632c:	00407929 	.word	0x00407929
  426330:	004241a9 	.word	0x004241a9
  426334:	2043a134 	.word	0x2043a134
  426338:	2040000c 	.word	0x2040000c
  42633c:	004079a9 	.word	0x004079a9
  426340:	2043a13c 	.word	0x2043a13c
  426344:	004334e8 	.word	0x004334e8
  426348:	00423fa1 	.word	0x00423fa1
  42634c:	2043a138 	.word	0x2043a138
  426350:	004334ec 	.word	0x004334ec
  426354:	004334f0 	.word	0x004334f0
  426358:	00425c31 	.word	0x00425c31
  42635c:	204148e0 	.word	0x204148e0
  426360:	00424155 	.word	0x00424155
  426364:	004334f4 	.word	0x004334f4
  426368:	00423ea5 	.word	0x00423ea5
  42636c:	00425c09 	.word	0x00425c09
  426370:	2043a11c 	.word	0x2043a11c
  426374:	2040003c 	.word	0x2040003c
  426378:	00407969 	.word	0x00407969
  42637c:	4b91      	ldr	r3, [pc, #580]	; (4265c4 <task_ox+0x58c>)
  42637e:	4798      	blx	r3
  426380:	4f91      	ldr	r7, [pc, #580]	; (4265c8 <task_ox+0x590>)
  426382:	6038      	str	r0, [r7, #0]
	lv_obj_align(labelBpmText, NULL, LV_ALIGN_CENTER, 60, 112);
  426384:	2370      	movs	r3, #112	; 0x70
  426386:	9300      	str	r3, [sp, #0]
  426388:	233c      	movs	r3, #60	; 0x3c
  42638a:	4622      	mov	r2, r4
  42638c:	4621      	mov	r1, r4
  42638e:	4d8f      	ldr	r5, [pc, #572]	; (4265cc <task_ox+0x594>)
  426390:	47a8      	blx	r5
	lv_label_set_text_fmt(labelBpmText, "BPM:");
  426392:	498f      	ldr	r1, [pc, #572]	; (4265d0 <task_ox+0x598>)
  426394:	6838      	ldr	r0, [r7, #0]
  426396:	4b8f      	ldr	r3, [pc, #572]	; (4265d4 <task_ox+0x59c>)
  426398:	4798      	blx	r3
  42639a:	4623      	mov	r3, r4
  42639c:	f248 0289 	movw	r2, #32905	; 0x8089
  4263a0:	4621      	mov	r1, r4
  4263a2:	6838      	ldr	r0, [r7, #0]
  4263a4:	47d0      	blx	sl
  4263a6:	4b8c      	ldr	r3, [pc, #560]	; (4265d8 <task_ox+0x5a0>)
  4263a8:	4798      	blx	r3
  4263aa:	4b8c      	ldr	r3, [pc, #560]	; (4265dc <task_ox+0x5a4>)
  4263ac:	4798      	blx	r3
	labelBpmSaved = lv_label_create(lv_scr_act(), NULL);
  4263ae:	4621      	mov	r1, r4
  4263b0:	4b84      	ldr	r3, [pc, #528]	; (4265c4 <task_ox+0x58c>)
  4263b2:	4798      	blx	r3
  4263b4:	4f8a      	ldr	r7, [pc, #552]	; (4265e0 <task_ox+0x5a8>)
  4263b6:	6038      	str	r0, [r7, #0]
	lv_obj_align(labelBpmSaved, NULL, LV_ALIGN_CENTER, 120, 40);
  4263b8:	2328      	movs	r3, #40	; 0x28
  4263ba:	9300      	str	r3, [sp, #0]
  4263bc:	2378      	movs	r3, #120	; 0x78
  4263be:	4622      	mov	r2, r4
  4263c0:	4621      	mov	r1, r4
  4263c2:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  4263c4:	4b87      	ldr	r3, [pc, #540]	; (4265e4 <task_ox+0x5ac>)
  4263c6:	f248 028e 	movw	r2, #32910	; 0x808e
  4263ca:	4621      	mov	r1, r4
  4263cc:	6838      	ldr	r0, [r7, #0]
  4263ce:	4d86      	ldr	r5, [pc, #536]	; (4265e8 <task_ox+0x5b0>)
  4263d0:	47a8      	blx	r5
	lv_label_set_text_fmt(labelBpmSaved, "%s", "--");
  4263d2:	4a86      	ldr	r2, [pc, #536]	; (4265ec <task_ox+0x5b4>)
  4263d4:	4986      	ldr	r1, [pc, #536]	; (4265f0 <task_ox+0x5b8>)
  4263d6:	6838      	ldr	r0, [r7, #0]
  4263d8:	4b7e      	ldr	r3, [pc, #504]	; (4265d4 <task_ox+0x59c>)
  4263da:	4798      	blx	r3
	lv_obj_set_style_local_text_color(labelBpmSaved, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_RED);
  4263dc:	f04f 0300 	mov.w	r3, #0
  4263e0:	f364 0302 	bfi	r3, r4, #0, #3
  4263e4:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
  4263e8:	f364 230c 	bfi	r3, r4, #8, #5
  4263ec:	f364 334f 	bfi	r3, r4, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  4263f0:	f248 0289 	movw	r2, #32905	; 0x8089
  4263f4:	4621      	mov	r1, r4
  4263f6:	6838      	ldr	r0, [r7, #0]
  4263f8:	47d0      	blx	sl
  4263fa:	4b77      	ldr	r3, [pc, #476]	; (4265d8 <task_ox+0x5a0>)
  4263fc:	4798      	blx	r3
  4263fe:	4b77      	ldr	r3, [pc, #476]	; (4265dc <task_ox+0x5a4>)
  426400:	4798      	blx	r3
	lv_obj_t * btnPlus = lv_btn_create(lv_scr_act(), NULL);
  426402:	4621      	mov	r1, r4
  426404:	4b7b      	ldr	r3, [pc, #492]	; (4265f4 <task_ox+0x5bc>)
  426406:	4798      	blx	r3
  426408:	4607      	mov	r7, r0
	lv_obj_set_event_cb(btnPlus, plus_handler);
  42640a:	497b      	ldr	r1, [pc, #492]	; (4265f8 <task_ox+0x5c0>)
  42640c:	4b7b      	ldr	r3, [pc, #492]	; (4265fc <task_ox+0x5c4>)
  42640e:	4798      	blx	r3
	lv_obj_set_width(btnPlus, 30);  lv_obj_set_height(btnPlus, 30);
  426410:	211e      	movs	r1, #30
  426412:	4638      	mov	r0, r7
  426414:	4b7a      	ldr	r3, [pc, #488]	; (426600 <task_ox+0x5c8>)
  426416:	4798      	blx	r3
  426418:	211e      	movs	r1, #30
  42641a:	4638      	mov	r0, r7
  42641c:	4b79      	ldr	r3, [pc, #484]	; (426604 <task_ox+0x5cc>)
  42641e:	4798      	blx	r3
	lv_obj_align(btnPlus, NULL, LV_ALIGN_CENTER, -20, 100);
  426420:	2364      	movs	r3, #100	; 0x64
  426422:	9300      	str	r3, [sp, #0]
  426424:	f06f 0313 	mvn.w	r3, #19
  426428:	4622      	mov	r2, r4
  42642a:	4621      	mov	r1, r4
  42642c:	4638      	mov	r0, r7
  42642e:	4d67      	ldr	r5, [pc, #412]	; (4265cc <task_ox+0x594>)
  426430:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  426432:	4623      	mov	r3, r4
  426434:	2229      	movs	r2, #41	; 0x29
  426436:	4621      	mov	r1, r4
  426438:	4638      	mov	r0, r7
  42643a:	47d0      	blx	sl
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  42643c:	4623      	mov	r3, r4
  42643e:	2239      	movs	r2, #57	; 0x39
  426440:	4621      	mov	r1, r4
  426442:	4638      	mov	r0, r7
  426444:	47d0      	blx	sl
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  426446:	4623      	mov	r3, r4
  426448:	2230      	movs	r2, #48	; 0x30
  42644a:	4621      	mov	r1, r4
  42644c:	4638      	mov	r0, r7
  42644e:	4d6e      	ldr	r5, [pc, #440]	; (426608 <task_ox+0x5d0>)
  426450:	47a8      	blx	r5
	labelPlus = lv_label_create(btnPlus, NULL);
  426452:	4621      	mov	r1, r4
  426454:	4638      	mov	r0, r7
  426456:	4b5b      	ldr	r3, [pc, #364]	; (4265c4 <task_ox+0x58c>)
  426458:	4798      	blx	r3
  42645a:	4f6c      	ldr	r7, [pc, #432]	; (42660c <task_ox+0x5d4>)
  42645c:	6038      	str	r0, [r7, #0]
	lv_label_set_recolor(labelPlus, true);
  42645e:	2101      	movs	r1, #1
  426460:	4b6b      	ldr	r3, [pc, #428]	; (426610 <task_ox+0x5d8>)
  426462:	4798      	blx	r3
	lv_label_set_text(labelPlus, "#ffffff  " LV_SYMBOL_PLUS " #");
  426464:	496b      	ldr	r1, [pc, #428]	; (426614 <task_ox+0x5dc>)
  426466:	6838      	ldr	r0, [r7, #0]
  426468:	4b6b      	ldr	r3, [pc, #428]	; (426618 <task_ox+0x5e0>)
  42646a:	4798      	blx	r3
  42646c:	4b5a      	ldr	r3, [pc, #360]	; (4265d8 <task_ox+0x5a0>)
  42646e:	4798      	blx	r3
  426470:	4b5a      	ldr	r3, [pc, #360]	; (4265dc <task_ox+0x5a4>)
  426472:	4798      	blx	r3
	lv_obj_t * btnMinus = lv_btn_create(lv_scr_act(), NULL);
  426474:	4621      	mov	r1, r4
  426476:	4b5f      	ldr	r3, [pc, #380]	; (4265f4 <task_ox+0x5bc>)
  426478:	4798      	blx	r3
  42647a:	4607      	mov	r7, r0
	lv_obj_set_event_cb(btnMinus, minus_handler);
  42647c:	4967      	ldr	r1, [pc, #412]	; (42661c <task_ox+0x5e4>)
  42647e:	4b5f      	ldr	r3, [pc, #380]	; (4265fc <task_ox+0x5c4>)
  426480:	4798      	blx	r3
	lv_obj_set_width(btnMinus, 30);  lv_obj_set_height(btnMinus, 30);
  426482:	211e      	movs	r1, #30
  426484:	4638      	mov	r0, r7
  426486:	4b5e      	ldr	r3, [pc, #376]	; (426600 <task_ox+0x5c8>)
  426488:	4798      	blx	r3
  42648a:	211e      	movs	r1, #30
  42648c:	4638      	mov	r0, r7
  42648e:	4b5d      	ldr	r3, [pc, #372]	; (426604 <task_ox+0x5cc>)
  426490:	4798      	blx	r3
	lv_obj_align(btnMinus, NULL, LV_ALIGN_CENTER, -140, 100);
  426492:	2364      	movs	r3, #100	; 0x64
  426494:	9300      	str	r3, [sp, #0]
  426496:	f06f 038b 	mvn.w	r3, #139	; 0x8b
  42649a:	4622      	mov	r2, r4
  42649c:	4621      	mov	r1, r4
  42649e:	4638      	mov	r0, r7
  4264a0:	4d4a      	ldr	r5, [pc, #296]	; (4265cc <task_ox+0x594>)
  4264a2:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4264a4:	4623      	mov	r3, r4
  4264a6:	2229      	movs	r2, #41	; 0x29
  4264a8:	4621      	mov	r1, r4
  4264aa:	4638      	mov	r0, r7
  4264ac:	47d0      	blx	sl
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  4264ae:	4623      	mov	r3, r4
  4264b0:	2239      	movs	r2, #57	; 0x39
  4264b2:	4621      	mov	r1, r4
  4264b4:	4638      	mov	r0, r7
  4264b6:	47d0      	blx	sl
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  4264b8:	4623      	mov	r3, r4
  4264ba:	2230      	movs	r2, #48	; 0x30
  4264bc:	4621      	mov	r1, r4
  4264be:	4638      	mov	r0, r7
  4264c0:	4d51      	ldr	r5, [pc, #324]	; (426608 <task_ox+0x5d0>)
  4264c2:	47a8      	blx	r5
	labelMinus = lv_label_create(btnMinus, NULL);
  4264c4:	4621      	mov	r1, r4
  4264c6:	4638      	mov	r0, r7
  4264c8:	4b3e      	ldr	r3, [pc, #248]	; (4265c4 <task_ox+0x58c>)
  4264ca:	4798      	blx	r3
  4264cc:	4f54      	ldr	r7, [pc, #336]	; (426620 <task_ox+0x5e8>)
  4264ce:	6038      	str	r0, [r7, #0]
	lv_label_set_recolor(labelMinus, true);
  4264d0:	2101      	movs	r1, #1
  4264d2:	4b4f      	ldr	r3, [pc, #316]	; (426610 <task_ox+0x5d8>)
  4264d4:	4798      	blx	r3
	lv_label_set_text(labelMinus, "#ffffff  " LV_SYMBOL_MINUS " #");
  4264d6:	4953      	ldr	r1, [pc, #332]	; (426624 <task_ox+0x5ec>)
  4264d8:	6838      	ldr	r0, [r7, #0]
  4264da:	4b4f      	ldr	r3, [pc, #316]	; (426618 <task_ox+0x5e0>)
  4264dc:	4798      	blx	r3
  4264de:	4b3e      	ldr	r3, [pc, #248]	; (4265d8 <task_ox+0x5a0>)
  4264e0:	4798      	blx	r3
  4264e2:	4b3e      	ldr	r3, [pc, #248]	; (4265dc <task_ox+0x5a4>)
  4264e4:	4798      	blx	r3
	lv_obj_t * btnUp = lv_btn_create(lv_scr_act(), NULL);
  4264e6:	4621      	mov	r1, r4
  4264e8:	4b42      	ldr	r3, [pc, #264]	; (4265f4 <task_ox+0x5bc>)
  4264ea:	4798      	blx	r3
  4264ec:	4607      	mov	r7, r0
	lv_obj_set_event_cb(btnUp, up_handler);
  4264ee:	494e      	ldr	r1, [pc, #312]	; (426628 <task_ox+0x5f0>)
  4264f0:	4b42      	ldr	r3, [pc, #264]	; (4265fc <task_ox+0x5c4>)
  4264f2:	4798      	blx	r3
	lv_obj_set_width(btnUp, 30);  lv_obj_set_height(btnUp, 30);
  4264f4:	211e      	movs	r1, #30
  4264f6:	4638      	mov	r0, r7
  4264f8:	4b41      	ldr	r3, [pc, #260]	; (426600 <task_ox+0x5c8>)
  4264fa:	4798      	blx	r3
  4264fc:	211e      	movs	r1, #30
  4264fe:	4638      	mov	r0, r7
  426500:	4b40      	ldr	r3, [pc, #256]	; (426604 <task_ox+0x5cc>)
  426502:	4798      	blx	r3
	lv_obj_align(btnUp, NULL, LV_ALIGN_CENTER, 30, 50);
  426504:	2332      	movs	r3, #50	; 0x32
  426506:	9300      	str	r3, [sp, #0]
  426508:	231e      	movs	r3, #30
  42650a:	4622      	mov	r2, r4
  42650c:	4621      	mov	r1, r4
  42650e:	4638      	mov	r0, r7
  426510:	4d2e      	ldr	r5, [pc, #184]	; (4265cc <task_ox+0x594>)
  426512:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  426514:	4623      	mov	r3, r4
  426516:	2229      	movs	r2, #41	; 0x29
  426518:	4621      	mov	r1, r4
  42651a:	4638      	mov	r0, r7
  42651c:	47d0      	blx	sl
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  42651e:	4623      	mov	r3, r4
  426520:	2239      	movs	r2, #57	; 0x39
  426522:	4621      	mov	r1, r4
  426524:	4638      	mov	r0, r7
  426526:	47d0      	blx	sl
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  426528:	4623      	mov	r3, r4
  42652a:	2230      	movs	r2, #48	; 0x30
  42652c:	4621      	mov	r1, r4
  42652e:	4638      	mov	r0, r7
  426530:	4d35      	ldr	r5, [pc, #212]	; (426608 <task_ox+0x5d0>)
  426532:	47a8      	blx	r5
	labelUp = lv_label_create(btnUp, NULL);
  426534:	4621      	mov	r1, r4
  426536:	4638      	mov	r0, r7
  426538:	4b22      	ldr	r3, [pc, #136]	; (4265c4 <task_ox+0x58c>)
  42653a:	4798      	blx	r3
  42653c:	4f3b      	ldr	r7, [pc, #236]	; (42662c <task_ox+0x5f4>)
  42653e:	6038      	str	r0, [r7, #0]
	lv_label_set_recolor(labelUp, true);
  426540:	2101      	movs	r1, #1
  426542:	4b33      	ldr	r3, [pc, #204]	; (426610 <task_ox+0x5d8>)
  426544:	4798      	blx	r3
	lv_label_set_text(labelUp, "#ffffff  " LV_SYMBOL_UP " #");
  426546:	493a      	ldr	r1, [pc, #232]	; (426630 <task_ox+0x5f8>)
  426548:	6838      	ldr	r0, [r7, #0]
  42654a:	4b33      	ldr	r3, [pc, #204]	; (426618 <task_ox+0x5e0>)
  42654c:	4798      	blx	r3
  42654e:	4b22      	ldr	r3, [pc, #136]	; (4265d8 <task_ox+0x5a0>)
  426550:	4798      	blx	r3
  426552:	4b22      	ldr	r3, [pc, #136]	; (4265dc <task_ox+0x5a4>)
  426554:	4798      	blx	r3
	lv_obj_t * btnDown = lv_btn_create(lv_scr_act(), NULL);
  426556:	4621      	mov	r1, r4
  426558:	4b26      	ldr	r3, [pc, #152]	; (4265f4 <task_ox+0x5bc>)
  42655a:	4798      	blx	r3
  42655c:	4607      	mov	r7, r0
	lv_obj_set_event_cb(btnDown, down_handler);
  42655e:	4935      	ldr	r1, [pc, #212]	; (426634 <task_ox+0x5fc>)
  426560:	4b26      	ldr	r3, [pc, #152]	; (4265fc <task_ox+0x5c4>)
  426562:	4798      	blx	r3
	lv_obj_set_width(btnDown, 30);  lv_obj_set_height(btnDown, 30);
  426564:	211e      	movs	r1, #30
  426566:	4638      	mov	r0, r7
  426568:	4b25      	ldr	r3, [pc, #148]	; (426600 <task_ox+0x5c8>)
  42656a:	4798      	blx	r3
  42656c:	211e      	movs	r1, #30
  42656e:	4638      	mov	r0, r7
  426570:	4b24      	ldr	r3, [pc, #144]	; (426604 <task_ox+0x5cc>)
  426572:	4798      	blx	r3
	lv_obj_align(btnDown, NULL, LV_ALIGN_CENTER, 30, 90);
  426574:	235a      	movs	r3, #90	; 0x5a
  426576:	9300      	str	r3, [sp, #0]
  426578:	231e      	movs	r3, #30
  42657a:	4622      	mov	r2, r4
  42657c:	4621      	mov	r1, r4
  42657e:	4638      	mov	r0, r7
  426580:	4d12      	ldr	r5, [pc, #72]	; (4265cc <task_ox+0x594>)
  426582:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  426584:	4623      	mov	r3, r4
  426586:	2229      	movs	r2, #41	; 0x29
  426588:	4621      	mov	r1, r4
  42658a:	4638      	mov	r0, r7
  42658c:	47d0      	blx	sl
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  42658e:	4623      	mov	r3, r4
  426590:	2239      	movs	r2, #57	; 0x39
  426592:	4621      	mov	r1, r4
  426594:	4638      	mov	r0, r7
  426596:	47d0      	blx	sl
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  426598:	4623      	mov	r3, r4
  42659a:	2230      	movs	r2, #48	; 0x30
  42659c:	4621      	mov	r1, r4
  42659e:	4638      	mov	r0, r7
  4265a0:	4d19      	ldr	r5, [pc, #100]	; (426608 <task_ox+0x5d0>)
  4265a2:	47a8      	blx	r5
	labelDown = lv_label_create(btnDown, NULL);
  4265a4:	4621      	mov	r1, r4
  4265a6:	4638      	mov	r0, r7
  4265a8:	4b06      	ldr	r3, [pc, #24]	; (4265c4 <task_ox+0x58c>)
  4265aa:	4798      	blx	r3
  4265ac:	4c22      	ldr	r4, [pc, #136]	; (426638 <task_ox+0x600>)
  4265ae:	6020      	str	r0, [r4, #0]
	lv_label_set_recolor(labelDown, true);
  4265b0:	2101      	movs	r1, #1
  4265b2:	4b17      	ldr	r3, [pc, #92]	; (426610 <task_ox+0x5d8>)
  4265b4:	4798      	blx	r3
	lv_label_set_text(labelDown, "#ffffff  " LV_SYMBOL_DOWN " #");
  4265b6:	4921      	ldr	r1, [pc, #132]	; (42663c <task_ox+0x604>)
  4265b8:	6820      	ldr	r0, [r4, #0]
  4265ba:	4b17      	ldr	r3, [pc, #92]	; (426618 <task_ox+0x5e0>)
  4265bc:	4798      	blx	r3
	int graf = 1;
  4265be:	2701      	movs	r7, #1
	int limit = 90;
  4265c0:	245a      	movs	r4, #90	; 0x5a
  4265c2:	e0f8      	b.n	4267b6 <task_ox+0x77e>
  4265c4:	004241a9 	.word	0x004241a9
  4265c8:	2043a124 	.word	0x2043a124
  4265cc:	004061a9 	.word	0x004061a9
  4265d0:	00433504 	.word	0x00433504
  4265d4:	00423fa1 	.word	0x00423fa1
  4265d8:	00415c15 	.word	0x00415c15
  4265dc:	00403659 	.word	0x00403659
  4265e0:	2043a120 	.word	0x2043a120
  4265e4:	2040000c 	.word	0x2040000c
  4265e8:	004079a9 	.word	0x004079a9
  4265ec:	004334ec 	.word	0x004334ec
  4265f0:	004334f0 	.word	0x004334f0
  4265f4:	0041ea21 	.word	0x0041ea21
  4265f8:	00425be1 	.word	0x00425be1
  4265fc:	0040575d 	.word	0x0040575d
  426600:	00406cd5 	.word	0x00406cd5
  426604:	00406d15 	.word	0x00406d15
  426608:	00407929 	.word	0x00407929
  42660c:	2043a140 	.word	0x2043a140
  426610:	00424155 	.word	0x00424155
  426614:	0043350c 	.word	0x0043350c
  426618:	00423ea5 	.word	0x00423ea5
  42661c:	00425bb9 	.word	0x00425bb9
  426620:	2043a130 	.word	0x2043a130
  426624:	0043351c 	.word	0x0043351c
  426628:	00425b91 	.word	0x00425b91
  42662c:	2043a144 	.word	0x2043a144
  426630:	0043352c 	.word	0x0043352c
  426634:	00425b69 	.word	0x00425b69
  426638:	2043a12c 	.word	0x2043a12c
  42663c:	0043353c 	.word	0x0043353c
					lv_chart_set_next(chart, ser1, receive.ecg);
  426640:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
  426644:	4b94      	ldr	r3, [pc, #592]	; (426898 <task_ox+0x860>)
  426646:	6819      	ldr	r1, [r3, #0]
  426648:	4b94      	ldr	r3, [pc, #592]	; (42689c <task_ox+0x864>)
  42664a:	6818      	ldr	r0, [r3, #0]
  42664c:	4b94      	ldr	r3, [pc, #592]	; (4268a0 <task_ox+0x868>)
  42664e:	4798      	blx	r3
			lv_chart_refresh(chart);
  426650:	4b92      	ldr	r3, [pc, #584]	; (42689c <task_ox+0x864>)
  426652:	6818      	ldr	r0, [r3, #0]
  426654:	4b93      	ldr	r3, [pc, #588]	; (4268a4 <task_ox+0x86c>)
  426656:	4798      	blx	r3
			lv_label_set_text_fmt(labelBpm, "%d", receive.bpm);
  426658:	9a08      	ldr	r2, [sp, #32]
  42665a:	4993      	ldr	r1, [pc, #588]	; (4268a8 <task_ox+0x870>)
  42665c:	4b93      	ldr	r3, [pc, #588]	; (4268ac <task_ox+0x874>)
  42665e:	6818      	ldr	r0, [r3, #0]
  426660:	4b93      	ldr	r3, [pc, #588]	; (4268b0 <task_ox+0x878>)
  426662:	4798      	blx	r3
		if ( xQueueReceive( xQueueOx, &ox, 0 )) {
  426664:	2300      	movs	r3, #0
  426666:	461a      	mov	r2, r3
  426668:	f10d 0127 	add.w	r1, sp, #39	; 0x27
  42666c:	4891      	ldr	r0, [pc, #580]	; (4268b4 <task_ox+0x87c>)
  42666e:	6800      	ldr	r0, [r0, #0]
  426670:	f8df a284 	ldr.w	sl, [pc, #644]	; 4268f8 <task_ox+0x8c0>
  426674:	47d0      	blx	sl
  426676:	2800      	cmp	r0, #0
  426678:	d068      	beq.n	42674c <task_ox+0x714>
			if (ox < limit) {
  42667a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
  42667e:	4294      	cmp	r4, r2
  426680:	dd39      	ble.n	4266f6 <task_ox+0x6be>
				needle_colors[0] = LV_COLOR_RED;
  426682:	498d      	ldr	r1, [pc, #564]	; (4268b8 <task_ox+0x880>)
  426684:	23f8      	movs	r3, #248	; 0xf8
  426686:	700b      	strb	r3, [r1, #0]
  426688:	784b      	ldrb	r3, [r1, #1]
  42668a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  42668e:	f36f 1347 	bfc	r3, #5, #3
  426692:	704b      	strb	r3, [r1, #1]
				lv_gauge_set_value(gaugeOx, 0, ox);
  426694:	2100      	movs	r1, #0
  426696:	9804      	ldr	r0, [sp, #16]
  426698:	4b88      	ldr	r3, [pc, #544]	; (4268bc <task_ox+0x884>)
  42669a:	4798      	blx	r3
				lv_obj_set_style_local_text_color(labelOx, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_RED);
  42669c:	f8df a25c 	ldr.w	sl, [pc, #604]	; 4268fc <task_ox+0x8c4>
  4266a0:	f36f 0602 	bfc	r6, #0, #3
  4266a4:	f046 06f8 	orr.w	r6, r6, #248	; 0xf8
  4266a8:	f36f 260c 	bfc	r6, #8, #5
  4266ac:	f36f 364f 	bfc	r6, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  4266b0:	4633      	mov	r3, r6
  4266b2:	f248 0289 	movw	r2, #32905	; 0x8089
  4266b6:	2100      	movs	r1, #0
  4266b8:	f8da 0000 	ldr.w	r0, [sl]
  4266bc:	4d80      	ldr	r5, [pc, #512]	; (4268c0 <task_ox+0x888>)
  4266be:	47a8      	blx	r5
				lv_label_set_text_fmt(labelOx, "%d", ox);
  4266c0:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
  4266c4:	4978      	ldr	r1, [pc, #480]	; (4268a8 <task_ox+0x870>)
  4266c6:	f8da 0000 	ldr.w	r0, [sl]
  4266ca:	4b79      	ldr	r3, [pc, #484]	; (4268b0 <task_ox+0x878>)
  4266cc:	4798      	blx	r3
				if (last_ox >= limit) {
  4266ce:	45a3      	cmp	fp, r4
  4266d0:	db3a      	blt.n	426748 <task_ox+0x710>
					BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  4266d2:	a90a      	add	r1, sp, #40	; 0x28
  4266d4:	2300      	movs	r3, #0
  4266d6:	f841 3d10 	str.w	r3, [r1, #-16]!
					xSemaphoreGiveFromISR(xSemaphoreAlarm, &xHigherPriorityTaskWoken);
  4266da:	4b7a      	ldr	r3, [pc, #488]	; (4268c4 <task_ox+0x88c>)
  4266dc:	6818      	ldr	r0, [r3, #0]
  4266de:	4b7a      	ldr	r3, [pc, #488]	; (4268c8 <task_ox+0x890>)
  4266e0:	4798      	blx	r3
  4266e2:	e031      	b.n	426748 <task_ox+0x710>
					lv_chart_set_next(chart, ser1, ox);
  4266e4:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
  4266e8:	4b6b      	ldr	r3, [pc, #428]	; (426898 <task_ox+0x860>)
  4266ea:	6819      	ldr	r1, [r3, #0]
  4266ec:	4b6b      	ldr	r3, [pc, #428]	; (42689c <task_ox+0x864>)
  4266ee:	6818      	ldr	r0, [r3, #0]
  4266f0:	4b6b      	ldr	r3, [pc, #428]	; (4268a0 <task_ox+0x868>)
  4266f2:	4798      	blx	r3
					break;
  4266f4:	e7ac      	b.n	426650 <task_ox+0x618>
				needle_colors[0] = LV_COLOR_LIME;
  4266f6:	4970      	ldr	r1, [pc, #448]	; (4268b8 <task_ox+0x880>)
  4266f8:	780b      	ldrb	r3, [r1, #0]
  4266fa:	f043 0307 	orr.w	r3, r3, #7
  4266fe:	f36f 03c7 	bfc	r3, #3, #5
  426702:	700b      	strb	r3, [r1, #0]
  426704:	23e0      	movs	r3, #224	; 0xe0
  426706:	704b      	strb	r3, [r1, #1]
				lv_gauge_set_value(gaugeOx, 0, ox);
  426708:	2100      	movs	r1, #0
  42670a:	9804      	ldr	r0, [sp, #16]
  42670c:	4b6b      	ldr	r3, [pc, #428]	; (4268bc <task_ox+0x884>)
  42670e:	4798      	blx	r3
				lv_obj_set_style_local_text_color(labelOx, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_LIME);
  426710:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 4268fc <task_ox+0x8c4>
  426714:	9b02      	ldr	r3, [sp, #8]
  426716:	f043 0307 	orr.w	r3, r3, #7
  42671a:	f36f 03c7 	bfc	r3, #3, #5
  42671e:	f36f 230c 	bfc	r3, #8, #5
  426722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
  426726:	f8ad 3008 	strh.w	r3, [sp, #8]
  42672a:	f248 0289 	movw	r2, #32905	; 0x8089
  42672e:	2100      	movs	r1, #0
  426730:	f8da 0000 	ldr.w	r0, [sl]
  426734:	f8df b188 	ldr.w	fp, [pc, #392]	; 4268c0 <task_ox+0x888>
  426738:	47d8      	blx	fp
				lv_label_set_text_fmt(labelOx, "%d", ox);
  42673a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
  42673e:	495a      	ldr	r1, [pc, #360]	; (4268a8 <task_ox+0x870>)
  426740:	f8da 0000 	ldr.w	r0, [sl]
  426744:	4b5a      	ldr	r3, [pc, #360]	; (4268b0 <task_ox+0x878>)
  426746:	4798      	blx	r3
			last_ox = ox;
  426748:	f89d b027 	ldrb.w	fp, [sp, #39]	; 0x27
		if( xSemaphoreTake(xSemaphoreSave, ( TickType_t ) 10 / portTICK_PERIOD_MS) == pdTRUE ) {
  42674c:	2300      	movs	r3, #0
  42674e:	220a      	movs	r2, #10
  426750:	4619      	mov	r1, r3
  426752:	485e      	ldr	r0, [pc, #376]	; (4268cc <task_ox+0x894>)
  426754:	6800      	ldr	r0, [r0, #0]
  426756:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 4268f8 <task_ox+0x8c0>
  42675a:	47d0      	blx	sl
  42675c:	2801      	cmp	r0, #1
  42675e:	d03e      	beq.n	4267de <task_ox+0x7a6>
		if( xSemaphoreTake(xSemaphoreSaveBpm, ( TickType_t ) 10 / portTICK_PERIOD_MS) == pdTRUE ) {
  426760:	2300      	movs	r3, #0
  426762:	220a      	movs	r2, #10
  426764:	4619      	mov	r1, r3
  426766:	485a      	ldr	r0, [pc, #360]	; (4268d0 <task_ox+0x898>)
  426768:	6800      	ldr	r0, [r0, #0]
  42676a:	f8df a18c 	ldr.w	sl, [pc, #396]	; 4268f8 <task_ox+0x8c0>
  42676e:	47d0      	blx	sl
  426770:	2801      	cmp	r0, #1
  426772:	d06c      	beq.n	42684e <task_ox+0x816>
		if( xSemaphoreTake(xSemaphoreChangeGraph, ( TickType_t ) 10 / portTICK_PERIOD_MS) == pdTRUE ) {
  426774:	2300      	movs	r3, #0
  426776:	220a      	movs	r2, #10
  426778:	4619      	mov	r1, r3
  42677a:	4856      	ldr	r0, [pc, #344]	; (4268d4 <task_ox+0x89c>)
  42677c:	6800      	ldr	r0, [r0, #0]
  42677e:	f8df a178 	ldr.w	sl, [pc, #376]	; 4268f8 <task_ox+0x8c0>
  426782:	47d0      	blx	sl
  426784:	2801      	cmp	r0, #1
  426786:	d069      	beq.n	42685c <task_ox+0x824>
		if( xSemaphoreTake(xSemaphorePlus, ( TickType_t ) 10 / portTICK_PERIOD_MS) == pdTRUE ) {
  426788:	2300      	movs	r3, #0
  42678a:	220a      	movs	r2, #10
  42678c:	4619      	mov	r1, r3
  42678e:	4852      	ldr	r0, [pc, #328]	; (4268d8 <task_ox+0x8a0>)
  426790:	6800      	ldr	r0, [r0, #0]
  426792:	f8df a164 	ldr.w	sl, [pc, #356]	; 4268f8 <task_ox+0x8c0>
  426796:	47d0      	blx	sl
  426798:	2801      	cmp	r0, #1
  42679a:	d074      	beq.n	426886 <task_ox+0x84e>
		if( xSemaphoreTake(xSemaphoreMinus, ( TickType_t ) 10 / portTICK_PERIOD_MS) == pdTRUE ) {
  42679c:	2300      	movs	r3, #0
  42679e:	220a      	movs	r2, #10
  4267a0:	4619      	mov	r1, r3
  4267a2:	484e      	ldr	r0, [pc, #312]	; (4268dc <task_ox+0x8a4>)
  4267a4:	6800      	ldr	r0, [r0, #0]
  4267a6:	f8df a150 	ldr.w	sl, [pc, #336]	; 4268f8 <task_ox+0x8c0>
  4267aa:	47d0      	blx	sl
  4267ac:	2801      	cmp	r0, #1
  4267ae:	d06e      	beq.n	42688e <task_ox+0x856>
		vTaskDelay(25);
  4267b0:	2019      	movs	r0, #25
  4267b2:	4b4b      	ldr	r3, [pc, #300]	; (4268e0 <task_ox+0x8a8>)
  4267b4:	4798      	blx	r3
		if ( xQueueReceive( xQueueEcgInfo , &(receive), 0 )) {
  4267b6:	2300      	movs	r3, #0
  4267b8:	461a      	mov	r2, r3
  4267ba:	a907      	add	r1, sp, #28
  4267bc:	4849      	ldr	r0, [pc, #292]	; (4268e4 <task_ox+0x8ac>)
  4267be:	6800      	ldr	r0, [r0, #0]
  4267c0:	f8df a134 	ldr.w	sl, [pc, #308]	; 4268f8 <task_ox+0x8c0>
  4267c4:	47d0      	blx	sl
  4267c6:	2800      	cmp	r0, #0
  4267c8:	f43f af4c 	beq.w	426664 <task_ox+0x62c>
			switch(graf) {
  4267cc:	2f01      	cmp	r7, #1
  4267ce:	f43f af37 	beq.w	426640 <task_ox+0x608>
  4267d2:	2f02      	cmp	r7, #2
  4267d4:	d086      	beq.n	4266e4 <task_ox+0x6ac>
					printf("Graph error!");
  4267d6:	4844      	ldr	r0, [pc, #272]	; (4268e8 <task_ox+0x8b0>)
  4267d8:	4b44      	ldr	r3, [pc, #272]	; (4268ec <task_ox+0x8b4>)
  4267da:	4798      	blx	r3
					break;
  4267dc:	e738      	b.n	426650 <task_ox+0x618>
			if (ox < limit) {
  4267de:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
  4267e2:	429c      	cmp	r4, r3
  4267e4:	dd19      	ble.n	42681a <task_ox+0x7e2>
				lv_obj_set_style_local_text_color(labelOxSaved, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_RED);
  4267e6:	f8df a118 	ldr.w	sl, [pc, #280]	; 426900 <task_ox+0x8c8>
  4267ea:	f36f 0902 	bfc	r9, #0, #3
  4267ee:	f049 09f8 	orr.w	r9, r9, #248	; 0xf8
  4267f2:	f36f 290c 	bfc	r9, #8, #5
  4267f6:	f36f 394f 	bfc	r9, #13, #3
  4267fa:	464b      	mov	r3, r9
  4267fc:	f248 0289 	movw	r2, #32905	; 0x8089
  426800:	2100      	movs	r1, #0
  426802:	f8da 0000 	ldr.w	r0, [sl]
  426806:	4d2e      	ldr	r5, [pc, #184]	; (4268c0 <task_ox+0x888>)
  426808:	47a8      	blx	r5
				lv_label_set_text_fmt(labelOxSaved, "%d", ox);
  42680a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
  42680e:	4926      	ldr	r1, [pc, #152]	; (4268a8 <task_ox+0x870>)
  426810:	f8da 0000 	ldr.w	r0, [sl]
  426814:	4b26      	ldr	r3, [pc, #152]	; (4268b0 <task_ox+0x878>)
  426816:	4798      	blx	r3
  426818:	e7a2      	b.n	426760 <task_ox+0x728>
				lv_obj_set_style_local_text_color(labelOxSaved, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_LIME);
  42681a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 426900 <task_ox+0x8c8>
  42681e:	f048 0807 	orr.w	r8, r8, #7
  426822:	f36f 08c7 	bfc	r8, #3, #5
  426826:	f36f 280c 	bfc	r8, #8, #5
  42682a:	f448 4360 	orr.w	r3, r8, #57344	; 0xe000
  42682e:	4698      	mov	r8, r3
  426830:	f248 0289 	movw	r2, #32905	; 0x8089
  426834:	2100      	movs	r1, #0
  426836:	f8da 0000 	ldr.w	r0, [sl]
  42683a:	4d21      	ldr	r5, [pc, #132]	; (4268c0 <task_ox+0x888>)
  42683c:	47a8      	blx	r5
				lv_label_set_text_fmt(labelOxSaved, "%d", ox);
  42683e:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
  426842:	4919      	ldr	r1, [pc, #100]	; (4268a8 <task_ox+0x870>)
  426844:	f8da 0000 	ldr.w	r0, [sl]
  426848:	4b19      	ldr	r3, [pc, #100]	; (4268b0 <task_ox+0x878>)
  42684a:	4798      	blx	r3
  42684c:	e788      	b.n	426760 <task_ox+0x728>
			lv_label_set_text_fmt(labelBpmSaved, "%d", receive.bpm);
  42684e:	9a08      	ldr	r2, [sp, #32]
  426850:	4915      	ldr	r1, [pc, #84]	; (4268a8 <task_ox+0x870>)
  426852:	4b27      	ldr	r3, [pc, #156]	; (4268f0 <task_ox+0x8b8>)
  426854:	6818      	ldr	r0, [r3, #0]
  426856:	4b16      	ldr	r3, [pc, #88]	; (4268b0 <task_ox+0x878>)
  426858:	4798      	blx	r3
  42685a:	e78b      	b.n	426774 <task_ox+0x73c>
			if (graf == 1) {
  42685c:	2f01      	cmp	r7, #1
  42685e:	d009      	beq.n	426874 <task_ox+0x83c>
#endif

#if LV_USE_CHART
static inline void lv_chart_set_range(lv_obj_t * chart, lv_coord_t ymin, lv_coord_t ymax)
{
    lv_chart_set_y_range(chart, LV_CHART_AXIS_PRIMARY_Y, ymin,  ymax);
  426860:	f640 73ff 	movw	r3, #4095	; 0xfff
  426864:	2200      	movs	r2, #0
  426866:	4611      	mov	r1, r2
  426868:	480c      	ldr	r0, [pc, #48]	; (42689c <task_ox+0x864>)
  42686a:	6800      	ldr	r0, [r0, #0]
  42686c:	4f21      	ldr	r7, [pc, #132]	; (4268f4 <task_ox+0x8bc>)
  42686e:	47b8      	blx	r7
				graf = 1;
  426870:	2701      	movs	r7, #1
  426872:	e789      	b.n	426788 <task_ox+0x750>
  426874:	2364      	movs	r3, #100	; 0x64
  426876:	2250      	movs	r2, #80	; 0x50
  426878:	2100      	movs	r1, #0
  42687a:	4808      	ldr	r0, [pc, #32]	; (42689c <task_ox+0x864>)
  42687c:	6800      	ldr	r0, [r0, #0]
  42687e:	4f1d      	ldr	r7, [pc, #116]	; (4268f4 <task_ox+0x8bc>)
  426880:	47b8      	blx	r7
				graf = 2;
  426882:	2702      	movs	r7, #2
  426884:	e780      	b.n	426788 <task_ox+0x750>
			if (limit < 95) {
  426886:	2c5e      	cmp	r4, #94	; 0x5e
  426888:	dc88      	bgt.n	42679c <task_ox+0x764>
				limit += 5;
  42688a:	3405      	adds	r4, #5
  42688c:	e786      	b.n	42679c <task_ox+0x764>
			if (limit > 85) {
  42688e:	2c55      	cmp	r4, #85	; 0x55
  426890:	dd8e      	ble.n	4267b0 <task_ox+0x778>
				limit -= 5;
  426892:	3c05      	subs	r4, #5
  426894:	e78c      	b.n	4267b0 <task_ox+0x778>
  426896:	bf00      	nop
  426898:	2043a3fc 	.word	0x2043a3fc
  42689c:	2043a418 	.word	0x2043a418
  4268a0:	00420831 	.word	0x00420831
  4268a4:	004205e9 	.word	0x004205e9
  4268a8:	0043355c 	.word	0x0043355c
  4268ac:	2043a11c 	.word	0x2043a11c
  4268b0:	00423fa1 	.word	0x00423fa1
  4268b4:	2043a414 	.word	0x2043a414
  4268b8:	2043a148 	.word	0x2043a148
  4268bc:	00421ef9 	.word	0x00421ef9
  4268c0:	00407969 	.word	0x00407969
  4268c4:	2043a3ec 	.word	0x2043a3ec
  4268c8:	004021d9 	.word	0x004021d9
  4268cc:	2043a404 	.word	0x2043a404
  4268d0:	2043a3f0 	.word	0x2043a3f0
  4268d4:	2043a408 	.word	0x2043a408
  4268d8:	2043abec 	.word	0x2043abec
  4268dc:	2043a3f4 	.word	0x2043a3f4
  4268e0:	00402b15 	.word	0x00402b15
  4268e4:	2043a3e4 	.word	0x2043a3e4
  4268e8:	0043354c 	.word	0x0043354c
  4268ec:	00428009 	.word	0x00428009
  4268f0:	2043a120 	.word	0x2043a120
  4268f4:	00420619 	.word	0x00420619
  4268f8:	004022cd 	.word	0x004022cd
  4268fc:	2043a134 	.word	0x2043a134
  426900:	2043a138 	.word	0x2043a138

00426904 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  426904:	b530      	push	{r4, r5, lr}
  426906:	b083      	sub	sp, #12
  426908:	4604      	mov	r4, r0
  42690a:	460d      	mov	r5, r1
	uint32_t val = 0;
  42690c:	2300      	movs	r3, #0
  42690e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  426910:	4b28      	ldr	r3, [pc, #160]	; (4269b4 <usart_serial_getchar+0xb0>)
  426912:	4298      	cmp	r0, r3
  426914:	d013      	beq.n	42693e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  426916:	4b28      	ldr	r3, [pc, #160]	; (4269b8 <usart_serial_getchar+0xb4>)
  426918:	429c      	cmp	r4, r3
  42691a:	d017      	beq.n	42694c <usart_serial_getchar+0x48>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  42691c:	4b27      	ldr	r3, [pc, #156]	; (4269bc <usart_serial_getchar+0xb8>)
  42691e:	429c      	cmp	r4, r3
  426920:	d01b      	beq.n	42695a <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  426922:	4b27      	ldr	r3, [pc, #156]	; (4269c0 <usart_serial_getchar+0xbc>)
  426924:	429c      	cmp	r4, r3
  426926:	d01f      	beq.n	426968 <usart_serial_getchar+0x64>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  426928:	4b26      	ldr	r3, [pc, #152]	; (4269c4 <usart_serial_getchar+0xc0>)
  42692a:	429c      	cmp	r4, r3
  42692c:	d023      	beq.n	426976 <usart_serial_getchar+0x72>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  42692e:	4b26      	ldr	r3, [pc, #152]	; (4269c8 <usart_serial_getchar+0xc4>)
  426930:	429c      	cmp	r4, r3
  426932:	d02a      	beq.n	42698a <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  426934:	4b25      	ldr	r3, [pc, #148]	; (4269cc <usart_serial_getchar+0xc8>)
  426936:	429c      	cmp	r4, r3
  426938:	d031      	beq.n	42699e <usart_serial_getchar+0x9a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  42693a:	b003      	add	sp, #12
  42693c:	bd30      	pop	{r4, r5, pc}
		while (uart_read((Uart*)p_usart, data));
  42693e:	4629      	mov	r1, r5
  426940:	4620      	mov	r0, r4
  426942:	4b23      	ldr	r3, [pc, #140]	; (4269d0 <usart_serial_getchar+0xcc>)
  426944:	4798      	blx	r3
  426946:	2800      	cmp	r0, #0
  426948:	d1f9      	bne.n	42693e <usart_serial_getchar+0x3a>
  42694a:	e7e4      	b.n	426916 <usart_serial_getchar+0x12>
		while (uart_read((Uart*)p_usart, data));
  42694c:	4629      	mov	r1, r5
  42694e:	4620      	mov	r0, r4
  426950:	4b1f      	ldr	r3, [pc, #124]	; (4269d0 <usart_serial_getchar+0xcc>)
  426952:	4798      	blx	r3
  426954:	2800      	cmp	r0, #0
  426956:	d1f9      	bne.n	42694c <usart_serial_getchar+0x48>
  426958:	e7e0      	b.n	42691c <usart_serial_getchar+0x18>
		while (uart_read((Uart*)p_usart, data));
  42695a:	4629      	mov	r1, r5
  42695c:	4620      	mov	r0, r4
  42695e:	4b1c      	ldr	r3, [pc, #112]	; (4269d0 <usart_serial_getchar+0xcc>)
  426960:	4798      	blx	r3
  426962:	2800      	cmp	r0, #0
  426964:	d1f9      	bne.n	42695a <usart_serial_getchar+0x56>
  426966:	e7dc      	b.n	426922 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  426968:	4629      	mov	r1, r5
  42696a:	4620      	mov	r0, r4
  42696c:	4b18      	ldr	r3, [pc, #96]	; (4269d0 <usart_serial_getchar+0xcc>)
  42696e:	4798      	blx	r3
  426970:	2800      	cmp	r0, #0
  426972:	d1f9      	bne.n	426968 <usart_serial_getchar+0x64>
  426974:	e7d8      	b.n	426928 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  426976:	a901      	add	r1, sp, #4
  426978:	4620      	mov	r0, r4
  42697a:	4b16      	ldr	r3, [pc, #88]	; (4269d4 <usart_serial_getchar+0xd0>)
  42697c:	4798      	blx	r3
  42697e:	2800      	cmp	r0, #0
  426980:	d1f9      	bne.n	426976 <usart_serial_getchar+0x72>
		*data = (uint8_t)(val & 0xFF);
  426982:	f89d 3004 	ldrb.w	r3, [sp, #4]
  426986:	702b      	strb	r3, [r5, #0]
  426988:	e7d1      	b.n	42692e <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
  42698a:	a901      	add	r1, sp, #4
  42698c:	4620      	mov	r0, r4
  42698e:	4b11      	ldr	r3, [pc, #68]	; (4269d4 <usart_serial_getchar+0xd0>)
  426990:	4798      	blx	r3
  426992:	2800      	cmp	r0, #0
  426994:	d1f9      	bne.n	42698a <usart_serial_getchar+0x86>
		*data = (uint8_t)(val & 0xFF);
  426996:	f89d 3004 	ldrb.w	r3, [sp, #4]
  42699a:	702b      	strb	r3, [r5, #0]
  42699c:	e7ca      	b.n	426934 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  42699e:	a901      	add	r1, sp, #4
  4269a0:	4620      	mov	r0, r4
  4269a2:	4b0c      	ldr	r3, [pc, #48]	; (4269d4 <usart_serial_getchar+0xd0>)
  4269a4:	4798      	blx	r3
  4269a6:	2800      	cmp	r0, #0
  4269a8:	d1f9      	bne.n	42699e <usart_serial_getchar+0x9a>
		*data = (uint8_t)(val & 0xFF);
  4269aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4269ae:	702b      	strb	r3, [r5, #0]
}
  4269b0:	e7c3      	b.n	42693a <usart_serial_getchar+0x36>
  4269b2:	bf00      	nop
  4269b4:	400e0800 	.word	0x400e0800
  4269b8:	400e0a00 	.word	0x400e0a00
  4269bc:	400e1a00 	.word	0x400e1a00
  4269c0:	400e1c00 	.word	0x400e1c00
  4269c4:	40024000 	.word	0x40024000
  4269c8:	40028000 	.word	0x40028000
  4269cc:	4002c000 	.word	0x4002c000
  4269d0:	00425757 	.word	0x00425757
  4269d4:	004257f3 	.word	0x004257f3

004269d8 <usart_serial_putchar>:
{
  4269d8:	b538      	push	{r3, r4, r5, lr}
  4269da:	4604      	mov	r4, r0
  4269dc:	460d      	mov	r5, r1
	if (UART0 == (Uart*)p_usart) {
  4269de:	4b27      	ldr	r3, [pc, #156]	; (426a7c <usart_serial_putchar+0xa4>)
  4269e0:	4298      	cmp	r0, r3
  4269e2:	d013      	beq.n	426a0c <usart_serial_putchar+0x34>
	if (UART1 == (Uart*)p_usart) {
  4269e4:	4b26      	ldr	r3, [pc, #152]	; (426a80 <usart_serial_putchar+0xa8>)
  4269e6:	4298      	cmp	r0, r3
  4269e8:	d018      	beq.n	426a1c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4269ea:	4b26      	ldr	r3, [pc, #152]	; (426a84 <usart_serial_putchar+0xac>)
  4269ec:	4298      	cmp	r0, r3
  4269ee:	d01d      	beq.n	426a2c <usart_serial_putchar+0x54>
	if (UART3 == (Uart*)p_usart) {
  4269f0:	4b25      	ldr	r3, [pc, #148]	; (426a88 <usart_serial_putchar+0xb0>)
  4269f2:	4298      	cmp	r0, r3
  4269f4:	d022      	beq.n	426a3c <usart_serial_putchar+0x64>
	if (USART0 == p_usart) {
  4269f6:	4b25      	ldr	r3, [pc, #148]	; (426a8c <usart_serial_putchar+0xb4>)
  4269f8:	4298      	cmp	r0, r3
  4269fa:	d027      	beq.n	426a4c <usart_serial_putchar+0x74>
	if (USART1 == p_usart) {
  4269fc:	4b24      	ldr	r3, [pc, #144]	; (426a90 <usart_serial_putchar+0xb8>)
  4269fe:	4298      	cmp	r0, r3
  426a00:	d02c      	beq.n	426a5c <usart_serial_putchar+0x84>
	if (USART2 == p_usart) {
  426a02:	4b24      	ldr	r3, [pc, #144]	; (426a94 <usart_serial_putchar+0xbc>)
  426a04:	4298      	cmp	r0, r3
  426a06:	d031      	beq.n	426a6c <usart_serial_putchar+0x94>
	return 0;
  426a08:	2000      	movs	r0, #0
}
  426a0a:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  426a0c:	4629      	mov	r1, r5
  426a0e:	4620      	mov	r0, r4
  426a10:	4b21      	ldr	r3, [pc, #132]	; (426a98 <usart_serial_putchar+0xc0>)
  426a12:	4798      	blx	r3
  426a14:	2800      	cmp	r0, #0
  426a16:	d1f9      	bne.n	426a0c <usart_serial_putchar+0x34>
		return 1;
  426a18:	2001      	movs	r0, #1
  426a1a:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  426a1c:	4629      	mov	r1, r5
  426a1e:	4620      	mov	r0, r4
  426a20:	4b1d      	ldr	r3, [pc, #116]	; (426a98 <usart_serial_putchar+0xc0>)
  426a22:	4798      	blx	r3
  426a24:	2800      	cmp	r0, #0
  426a26:	d1f9      	bne.n	426a1c <usart_serial_putchar+0x44>
		return 1;
  426a28:	2001      	movs	r0, #1
  426a2a:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  426a2c:	4629      	mov	r1, r5
  426a2e:	4620      	mov	r0, r4
  426a30:	4b19      	ldr	r3, [pc, #100]	; (426a98 <usart_serial_putchar+0xc0>)
  426a32:	4798      	blx	r3
  426a34:	2800      	cmp	r0, #0
  426a36:	d1f9      	bne.n	426a2c <usart_serial_putchar+0x54>
		return 1;
  426a38:	2001      	movs	r0, #1
  426a3a:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  426a3c:	4629      	mov	r1, r5
  426a3e:	4620      	mov	r0, r4
  426a40:	4b15      	ldr	r3, [pc, #84]	; (426a98 <usart_serial_putchar+0xc0>)
  426a42:	4798      	blx	r3
  426a44:	2800      	cmp	r0, #0
  426a46:	d1f9      	bne.n	426a3c <usart_serial_putchar+0x64>
		return 1;
  426a48:	2001      	movs	r0, #1
  426a4a:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  426a4c:	4629      	mov	r1, r5
  426a4e:	4620      	mov	r0, r4
  426a50:	4b12      	ldr	r3, [pc, #72]	; (426a9c <usart_serial_putchar+0xc4>)
  426a52:	4798      	blx	r3
  426a54:	2800      	cmp	r0, #0
  426a56:	d1f9      	bne.n	426a4c <usart_serial_putchar+0x74>
		return 1;
  426a58:	2001      	movs	r0, #1
  426a5a:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  426a5c:	4629      	mov	r1, r5
  426a5e:	4620      	mov	r0, r4
  426a60:	4b0e      	ldr	r3, [pc, #56]	; (426a9c <usart_serial_putchar+0xc4>)
  426a62:	4798      	blx	r3
  426a64:	2800      	cmp	r0, #0
  426a66:	d1f9      	bne.n	426a5c <usart_serial_putchar+0x84>
		return 1;
  426a68:	2001      	movs	r0, #1
  426a6a:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  426a6c:	4629      	mov	r1, r5
  426a6e:	4620      	mov	r0, r4
  426a70:	4b0a      	ldr	r3, [pc, #40]	; (426a9c <usart_serial_putchar+0xc4>)
  426a72:	4798      	blx	r3
  426a74:	2800      	cmp	r0, #0
  426a76:	d1f9      	bne.n	426a6c <usart_serial_putchar+0x94>
		return 1;
  426a78:	2001      	movs	r0, #1
  426a7a:	bd38      	pop	{r3, r4, r5, pc}
  426a7c:	400e0800 	.word	0x400e0800
  426a80:	400e0a00 	.word	0x400e0a00
  426a84:	400e1a00 	.word	0x400e1a00
  426a88:	400e1c00 	.word	0x400e1c00
  426a8c:	40024000 	.word	0x40024000
  426a90:	40028000 	.word	0x40028000
  426a94:	4002c000 	.word	0x4002c000
  426a98:	00425745 	.word	0x00425745
  426a9c:	004257dd 	.word	0x004257dd

00426aa0 <configure_lcd>:
static void configure_lcd(void) {
  426aa0:	b510      	push	{r4, lr}
  pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);  //
  426aa2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  426aa6:	2074      	movs	r0, #116	; 0x74
  426aa8:	4c0b      	ldr	r4, [pc, #44]	; (426ad8 <configure_lcd+0x38>)
  426aaa:	47a0      	blx	r4
  pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  426aac:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  426ab0:	2075      	movs	r0, #117	; 0x75
  426ab2:	47a0      	blx	r4
  pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  426ab4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  426ab8:	2076      	movs	r0, #118	; 0x76
  426aba:	47a0      	blx	r4
  pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  426abc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  426ac0:	207b      	movs	r0, #123	; 0x7b
  426ac2:	47a0      	blx	r4
  pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  426ac4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  426ac8:	2018      	movs	r0, #24
  426aca:	47a0      	blx	r4
  pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  426acc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  426ad0:	2006      	movs	r0, #6
  426ad2:	47a0      	blx	r4
  426ad4:	bd10      	pop	{r4, pc}
  426ad6:	bf00      	nop
  426ad8:	004252bd 	.word	0x004252bd

00426adc <configure_console>:
static void configure_console(void) {
  426adc:	b570      	push	{r4, r5, r6, lr}
  426ade:	b08a      	sub	sp, #40	; 0x28
  const usart_serial_options_t uart_serial_options = {
  426ae0:	4b1a      	ldr	r3, [pc, #104]	; (426b4c <configure_console+0x70>)
  426ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  426ae4:	ac0a      	add	r4, sp, #40	; 0x28
  426ae6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  426aea:	4d19      	ldr	r5, [pc, #100]	; (426b50 <configure_console+0x74>)
  426aec:	4b19      	ldr	r3, [pc, #100]	; (426b54 <configure_console+0x78>)
  426aee:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  426af0:	4a19      	ldr	r2, [pc, #100]	; (426b58 <configure_console+0x7c>)
  426af2:	4b1a      	ldr	r3, [pc, #104]	; (426b5c <configure_console+0x80>)
  426af4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  426af6:	4a1a      	ldr	r2, [pc, #104]	; (426b60 <configure_console+0x84>)
  426af8:	4b1a      	ldr	r3, [pc, #104]	; (426b64 <configure_console+0x88>)
  426afa:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  426afc:	9b06      	ldr	r3, [sp, #24]
  426afe:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  426b00:	9b07      	ldr	r3, [sp, #28]
  426b02:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  426b04:	9b08      	ldr	r3, [sp, #32]
  426b06:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  426b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
  426b0a:	9303      	str	r3, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  426b0c:	2400      	movs	r4, #0
  426b0e:	9404      	str	r4, [sp, #16]
  426b10:	200e      	movs	r0, #14
  426b12:	4b15      	ldr	r3, [pc, #84]	; (426b68 <configure_console+0x8c>)
  426b14:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  426b16:	4a15      	ldr	r2, [pc, #84]	; (426b6c <configure_console+0x90>)
  426b18:	4669      	mov	r1, sp
  426b1a:	4628      	mov	r0, r5
  426b1c:	4b14      	ldr	r3, [pc, #80]	; (426b70 <configure_console+0x94>)
  426b1e:	4798      	blx	r3
		usart_enable_tx(p_usart);
  426b20:	4628      	mov	r0, r5
  426b22:	4b14      	ldr	r3, [pc, #80]	; (426b74 <configure_console+0x98>)
  426b24:	4798      	blx	r3
		usart_enable_rx(p_usart);
  426b26:	4628      	mov	r0, r5
  426b28:	4b13      	ldr	r3, [pc, #76]	; (426b78 <configure_console+0x9c>)
  426b2a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  426b2c:	4e13      	ldr	r6, [pc, #76]	; (426b7c <configure_console+0xa0>)
  426b2e:	6833      	ldr	r3, [r6, #0]
  426b30:	4621      	mov	r1, r4
  426b32:	6898      	ldr	r0, [r3, #8]
  426b34:	4d12      	ldr	r5, [pc, #72]	; (426b80 <configure_console+0xa4>)
  426b36:	47a8      	blx	r5
	setbuf(stdin, NULL);
  426b38:	6833      	ldr	r3, [r6, #0]
  426b3a:	4621      	mov	r1, r4
  426b3c:	6858      	ldr	r0, [r3, #4]
  426b3e:	47a8      	blx	r5
  setbuf(stdout, NULL);
  426b40:	6833      	ldr	r3, [r6, #0]
  426b42:	4621      	mov	r1, r4
  426b44:	6898      	ldr	r0, [r3, #8]
  426b46:	47a8      	blx	r5
}
  426b48:	b00a      	add	sp, #40	; 0x28
  426b4a:	bd70      	pop	{r4, r5, r6, pc}
  426b4c:	00431cfc 	.word	0x00431cfc
  426b50:	40028000 	.word	0x40028000
  426b54:	2043a3d8 	.word	0x2043a3d8
  426b58:	004269d9 	.word	0x004269d9
  426b5c:	2043a3d4 	.word	0x2043a3d4
  426b60:	00426905 	.word	0x00426905
  426b64:	2043a3d0 	.word	0x2043a3d0
  426b68:	004255b5 	.word	0x004255b5
  426b6c:	08f0d180 	.word	0x08f0d180
  426b70:	00425859 	.word	0x00425859
  426b74:	004257b5 	.word	0x004257b5
  426b78:	004257c1 	.word	0x004257c1
  426b7c:	204000d4 	.word	0x204000d4
  426b80:	0042884d 	.word	0x0042884d

00426b84 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  426b84:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  426b86:	460a      	mov	r2, r1
  426b88:	4601      	mov	r1, r0
  426b8a:	4802      	ldr	r0, [pc, #8]	; (426b94 <vApplicationStackOverflowHook+0x10>)
  426b8c:	4b02      	ldr	r3, [pc, #8]	; (426b98 <vApplicationStackOverflowHook+0x14>)
  426b8e:	4798      	blx	r3
  426b90:	e7fe      	b.n	426b90 <vApplicationStackOverflowHook+0xc>
  426b92:	bf00      	nop
  426b94:	00433560 	.word	0x00433560
  426b98:	00428009 	.word	0x00428009

00426b9c <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  426b9c:	4770      	bx	lr

00426b9e <vApplicationMallocFailedHook>:
  426b9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  426ba2:	b672      	cpsid	i
  426ba4:	f383 8811 	msr	BASEPRI, r3
  426ba8:	f3bf 8f6f 	isb	sy
  426bac:	f3bf 8f4f 	dsb	sy
  426bb0:	b662      	cpsie	i
  426bb2:	e7fe      	b.n	426bb2 <vApplicationMallocFailedHook+0x14>

00426bb4 <TC3_Handler>:
{
  426bb4:	b500      	push	{lr}
  426bb6:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC1, 0);
  426bb8:	2100      	movs	r1, #0
  426bba:	4806      	ldr	r0, [pc, #24]	; (426bd4 <TC3_Handler+0x20>)
  426bbc:	4b06      	ldr	r3, [pc, #24]	; (426bd8 <TC3_Handler+0x24>)
  426bbe:	4798      	blx	r3
  426bc0:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
  426bc2:	9b01      	ldr	r3, [sp, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  426bc4:	4b05      	ldr	r3, [pc, #20]	; (426bdc <TC3_Handler+0x28>)
  426bc6:	2240      	movs	r2, #64	; 0x40
  426bc8:	615a      	str	r2, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  426bca:	2202      	movs	r2, #2
  426bcc:	601a      	str	r2, [r3, #0]
}
  426bce:	b003      	add	sp, #12
  426bd0:	f85d fb04 	ldr.w	pc, [sp], #4
  426bd4:	40010000 	.word	0x40010000
  426bd8:	004007ef 	.word	0x004007ef
  426bdc:	40064000 	.word	0x40064000

00426be0 <RTT_Handler>:
{
  426be0:	b508      	push	{r3, lr}
	ul_status = rtt_get_status(RTT);
  426be2:	4805      	ldr	r0, [pc, #20]	; (426bf8 <RTT_Handler+0x18>)
  426be4:	4b05      	ldr	r3, [pc, #20]	; (426bfc <RTT_Handler+0x1c>)
  426be6:	4798      	blx	r3
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {
  426be8:	f010 0f02 	tst.w	r0, #2
  426bec:	d003      	beq.n	426bf6 <RTT_Handler+0x16>
		count++;
  426bee:	4a04      	ldr	r2, [pc, #16]	; (426c00 <RTT_Handler+0x20>)
  426bf0:	6813      	ldr	r3, [r2, #0]
  426bf2:	3301      	adds	r3, #1
  426bf4:	6013      	str	r3, [r2, #0]
  426bf6:	bd08      	pop	{r3, pc}
  426bf8:	400e1830 	.word	0x400e1830
  426bfc:	00400775 	.word	0x00400775
  426c00:	2043a0e4 	.word	0x2043a0e4

00426c04 <RTC_Handler>:
{
  426c04:	b530      	push	{r4, r5, lr}
  426c06:	b083      	sub	sp, #12
	uint32_t ul_status = rtc_get_status(RTC);
  426c08:	4812      	ldr	r0, [pc, #72]	; (426c54 <RTC_Handler+0x50>)
  426c0a:	4b13      	ldr	r3, [pc, #76]	; (426c58 <RTC_Handler+0x54>)
  426c0c:	4798      	blx	r3
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  426c0e:	f010 0f04 	tst.w	r0, #4
  426c12:	d115      	bne.n	426c40 <RTC_Handler+0x3c>
	rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  426c14:	4d0f      	ldr	r5, [pc, #60]	; (426c54 <RTC_Handler+0x50>)
  426c16:	2104      	movs	r1, #4
  426c18:	4628      	mov	r0, r5
  426c1a:	4c10      	ldr	r4, [pc, #64]	; (426c5c <RTC_Handler+0x58>)
  426c1c:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  426c1e:	2102      	movs	r1, #2
  426c20:	4628      	mov	r0, r5
  426c22:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  426c24:	2101      	movs	r1, #1
  426c26:	4628      	mov	r0, r5
  426c28:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  426c2a:	2108      	movs	r1, #8
  426c2c:	4628      	mov	r0, r5
  426c2e:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  426c30:	2110      	movs	r1, #16
  426c32:	4628      	mov	r0, r5
  426c34:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  426c36:	2120      	movs	r1, #32
  426c38:	4628      	mov	r0, r5
  426c3a:	47a0      	blx	r4
}
  426c3c:	b003      	add	sp, #12
  426c3e:	bd30      	pop	{r4, r5, pc}
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  426c40:	a902      	add	r1, sp, #8
  426c42:	2300      	movs	r3, #0
  426c44:	f841 3d04 	str.w	r3, [r1, #-4]!
		xSemaphoreGiveFromISR(xSemaphoreClock, &xHigherPriorityTaskWoken);
  426c48:	4b05      	ldr	r3, [pc, #20]	; (426c60 <RTC_Handler+0x5c>)
  426c4a:	6818      	ldr	r0, [r3, #0]
  426c4c:	4b05      	ldr	r3, [pc, #20]	; (426c64 <RTC_Handler+0x60>)
  426c4e:	4798      	blx	r3
  426c50:	e7e0      	b.n	426c14 <RTC_Handler+0x10>
  426c52:	bf00      	nop
  426c54:	400e1860 	.word	0x400e1860
  426c58:	004006f5 	.word	0x004006f5
  426c5c:	004006f9 	.word	0x004006f9
  426c60:	2043a40c 	.word	0x2043a40c
  426c64:	004021d9 	.word	0x004021d9

00426c68 <lv_logo>:
void lv_logo(void) {
  426c68:	b510      	push	{r4, lr}
  426c6a:	b082      	sub	sp, #8
  426c6c:	4b0a      	ldr	r3, [pc, #40]	; (426c98 <lv_logo+0x30>)
  426c6e:	4798      	blx	r3
  426c70:	4b0a      	ldr	r3, [pc, #40]	; (426c9c <lv_logo+0x34>)
  426c72:	4798      	blx	r3
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
  426c74:	2100      	movs	r1, #0
  426c76:	4b0a      	ldr	r3, [pc, #40]	; (426ca0 <lv_logo+0x38>)
  426c78:	4798      	blx	r3
  426c7a:	4604      	mov	r4, r0
	lv_img_set_src(img1, &doctian);
  426c7c:	4909      	ldr	r1, [pc, #36]	; (426ca4 <lv_logo+0x3c>)
  426c7e:	4b0a      	ldr	r3, [pc, #40]	; (426ca8 <lv_logo+0x40>)
  426c80:	4798      	blx	r3
	lv_obj_align(img1, NULL, LV_ALIGN_IN_TOP_MID, 0, -10);
  426c82:	f06f 0309 	mvn.w	r3, #9
  426c86:	9300      	str	r3, [sp, #0]
  426c88:	2300      	movs	r3, #0
  426c8a:	2202      	movs	r2, #2
  426c8c:	4619      	mov	r1, r3
  426c8e:	4620      	mov	r0, r4
  426c90:	4c06      	ldr	r4, [pc, #24]	; (426cac <lv_logo+0x44>)
  426c92:	47a0      	blx	r4
}
  426c94:	b002      	add	sp, #8
  426c96:	bd10      	pop	{r4, pc}
  426c98:	00415c15 	.word	0x00415c15
  426c9c:	00403659 	.word	0x00403659
  426ca0:	00422bcd 	.word	0x00422bcd
  426ca4:	0042b0ec 	.word	0x0042b0ec
  426ca8:	004229ed 	.word	0x004229ed
  426cac:	004061a9 	.word	0x004061a9

00426cb0 <lv_main>:
void lv_main(void) {
  426cb0:	b510      	push	{r4, lr}
  426cb2:	4b06      	ldr	r3, [pc, #24]	; (426ccc <lv_main+0x1c>)
  426cb4:	4798      	blx	r3
  426cb6:	4b06      	ldr	r3, [pc, #24]	; (426cd0 <lv_main+0x20>)
  426cb8:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  426cba:	4b06      	ldr	r3, [pc, #24]	; (426cd4 <lv_main+0x24>)
  426cbc:	881b      	ldrh	r3, [r3, #0]
  426cbe:	2229      	movs	r2, #41	; 0x29
  426cc0:	2100      	movs	r1, #0
  426cc2:	4c05      	ldr	r4, [pc, #20]	; (426cd8 <lv_main+0x28>)
  426cc4:	47a0      	blx	r4
	lv_logo();
  426cc6:	4b05      	ldr	r3, [pc, #20]	; (426cdc <lv_main+0x2c>)
  426cc8:	4798      	blx	r3
  426cca:	bd10      	pop	{r4, pc}
  426ccc:	00415c15 	.word	0x00415c15
  426cd0:	00403659 	.word	0x00403659
  426cd4:	00431cf8 	.word	0x00431cf8
  426cd8:	00407969 	.word	0x00407969
  426cdc:	00426c69 	.word	0x00426c69

00426ce0 <lv_screen_chart>:
void lv_screen_chart(void) {
  426ce0:	b530      	push	{r4, r5, lr}
  426ce2:	b083      	sub	sp, #12
  426ce4:	4b23      	ldr	r3, [pc, #140]	; (426d74 <lv_screen_chart+0x94>)
  426ce6:	4798      	blx	r3
  426ce8:	4b23      	ldr	r3, [pc, #140]	; (426d78 <lv_screen_chart+0x98>)
  426cea:	4798      	blx	r3
	chart = lv_chart_create(lv_scr_act(), NULL);
  426cec:	2100      	movs	r1, #0
  426cee:	4b23      	ldr	r3, [pc, #140]	; (426d7c <lv_screen_chart+0x9c>)
  426cf0:	4798      	blx	r3
  426cf2:	4c23      	ldr	r4, [pc, #140]	; (426d80 <lv_screen_chart+0xa0>)
  426cf4:	6020      	str	r0, [r4, #0]
	lv_obj_set_size(chart, 150, 95);
  426cf6:	225f      	movs	r2, #95	; 0x5f
  426cf8:	2196      	movs	r1, #150	; 0x96
  426cfa:	4b22      	ldr	r3, [pc, #136]	; (426d84 <lv_screen_chart+0xa4>)
  426cfc:	4798      	blx	r3
	lv_obj_align(chart, NULL, LV_ALIGN_CENTER, 80, -20);
  426cfe:	f06f 0313 	mvn.w	r3, #19
  426d02:	9300      	str	r3, [sp, #0]
  426d04:	2350      	movs	r3, #80	; 0x50
  426d06:	2200      	movs	r2, #0
  426d08:	4611      	mov	r1, r2
  426d0a:	6820      	ldr	r0, [r4, #0]
  426d0c:	4d1e      	ldr	r5, [pc, #120]	; (426d88 <lv_screen_chart+0xa8>)
  426d0e:	47a8      	blx	r5
	lv_chart_set_type(chart, LV_CHART_TYPE_LINE);
  426d10:	2101      	movs	r1, #1
  426d12:	6820      	ldr	r0, [r4, #0]
  426d14:	4b1d      	ldr	r3, [pc, #116]	; (426d8c <lv_screen_chart+0xac>)
  426d16:	4798      	blx	r3
  426d18:	f640 73ff 	movw	r3, #4095	; 0xfff
  426d1c:	2200      	movs	r2, #0
  426d1e:	4611      	mov	r1, r2
  426d20:	6820      	ldr	r0, [r4, #0]
  426d22:	4d1b      	ldr	r5, [pc, #108]	; (426d90 <lv_screen_chart+0xb0>)
  426d24:	47a8      	blx	r5
	lv_chart_set_point_count(chart, CHAR_DATA_LEN);
  426d26:	21fa      	movs	r1, #250	; 0xfa
  426d28:	6820      	ldr	r0, [r4, #0]
  426d2a:	4b1a      	ldr	r3, [pc, #104]	; (426d94 <lv_screen_chart+0xb4>)
  426d2c:	4798      	blx	r3
	lv_chart_set_div_line_count(chart, 0, 0);
  426d2e:	2200      	movs	r2, #0
  426d30:	4611      	mov	r1, r2
  426d32:	6820      	ldr	r0, [r4, #0]
  426d34:	4b18      	ldr	r3, [pc, #96]	; (426d98 <lv_screen_chart+0xb8>)
  426d36:	4798      	blx	r3
	lv_chart_set_update_mode(chart, LV_CHART_UPDATE_MODE_SHIFT);
  426d38:	2100      	movs	r1, #0
  426d3a:	6820      	ldr	r0, [r4, #0]
  426d3c:	4b17      	ldr	r3, [pc, #92]	; (426d9c <lv_screen_chart+0xbc>)
  426d3e:	4798      	blx	r3
	ser1 = lv_chart_add_series(chart, LV_COLOR_BLUE);
  426d40:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
  426d44:	6820      	ldr	r0, [r4, #0]
  426d46:	4b16      	ldr	r3, [pc, #88]	; (426da0 <lv_screen_chart+0xc0>)
  426d48:	4798      	blx	r3
  426d4a:	4601      	mov	r1, r0
  426d4c:	4b15      	ldr	r3, [pc, #84]	; (426da4 <lv_screen_chart+0xc4>)
  426d4e:	6018      	str	r0, [r3, #0]
	lv_chart_set_ext_array(chart, ser1, ser1_data, CHAR_DATA_LEN);
  426d50:	23fa      	movs	r3, #250	; 0xfa
  426d52:	4a15      	ldr	r2, [pc, #84]	; (426da8 <lv_screen_chart+0xc8>)
  426d54:	6820      	ldr	r0, [r4, #0]
  426d56:	4d15      	ldr	r5, [pc, #84]	; (426dac <lv_screen_chart+0xcc>)
  426d58:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  426d5a:	2301      	movs	r3, #1
  426d5c:	2290      	movs	r2, #144	; 0x90
  426d5e:	2102      	movs	r1, #2
  426d60:	6820      	ldr	r0, [r4, #0]
  426d62:	4d13      	ldr	r5, [pc, #76]	; (426db0 <lv_screen_chart+0xd0>)
  426d64:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  426d66:	2300      	movs	r3, #0
  426d68:	2203      	movs	r2, #3
  426d6a:	2102      	movs	r1, #2
  426d6c:	6820      	ldr	r0, [r4, #0]
  426d6e:	47a8      	blx	r5
}
  426d70:	b003      	add	sp, #12
  426d72:	bd30      	pop	{r4, r5, pc}
  426d74:	00415c15 	.word	0x00415c15
  426d78:	00403659 	.word	0x00403659
  426d7c:	0041fefd 	.word	0x0041fefd
  426d80:	2043a418 	.word	0x2043a418
  426d84:	00406be1 	.word	0x00406be1
  426d88:	004061a9 	.word	0x004061a9
  426d8c:	00420691 	.word	0x00420691
  426d90:	00420619 	.word	0x00420619
  426d94:	004206d9 	.word	0x004206d9
  426d98:	00420201 	.word	0x00420201
  426d9c:	00420259 	.word	0x00420259
  426da0:	00420145 	.word	0x00420145
  426da4:	2043a3fc 	.word	0x2043a3fc
  426da8:	2043a804 	.word	0x2043a804
  426dac:	004202ad 	.word	0x004202ad
  426db0:	00407929 	.word	0x00407929

00426db4 <lv_screen_chart_extra>:
void lv_screen_chart_extra(void) {
  426db4:	b570      	push	{r4, r5, r6, lr}
  426db6:	b082      	sub	sp, #8
  426db8:	4b27      	ldr	r3, [pc, #156]	; (426e58 <lv_screen_chart_extra+0xa4>)
  426dba:	4798      	blx	r3
  426dbc:	4b27      	ldr	r3, [pc, #156]	; (426e5c <lv_screen_chart_extra+0xa8>)
  426dbe:	4798      	blx	r3
	chart2 = lv_chart_create(lv_scr_act(), NULL);
  426dc0:	2100      	movs	r1, #0
  426dc2:	4b27      	ldr	r3, [pc, #156]	; (426e60 <lv_screen_chart_extra+0xac>)
  426dc4:	4798      	blx	r3
  426dc6:	4d27      	ldr	r5, [pc, #156]	; (426e64 <lv_screen_chart_extra+0xb0>)
  426dc8:	6028      	str	r0, [r5, #0]
	lv_obj_set_size(chart2, 320, 194);
  426dca:	22c2      	movs	r2, #194	; 0xc2
  426dcc:	f44f 71a0 	mov.w	r1, #320	; 0x140
  426dd0:	4b25      	ldr	r3, [pc, #148]	; (426e68 <lv_screen_chart_extra+0xb4>)
  426dd2:	4798      	blx	r3
	lv_obj_align(chart2, NULL, LV_ALIGN_IN_BOTTOM_MID, 0, 0);
  426dd4:	2400      	movs	r4, #0
  426dd6:	9400      	str	r4, [sp, #0]
  426dd8:	4623      	mov	r3, r4
  426dda:	2205      	movs	r2, #5
  426ddc:	4621      	mov	r1, r4
  426dde:	6828      	ldr	r0, [r5, #0]
  426de0:	4e22      	ldr	r6, [pc, #136]	; (426e6c <lv_screen_chart_extra+0xb8>)
  426de2:	47b0      	blx	r6
	lv_chart_set_type(chart2, LV_CHART_TYPE_LINE);
  426de4:	2101      	movs	r1, #1
  426de6:	6828      	ldr	r0, [r5, #0]
  426de8:	4b21      	ldr	r3, [pc, #132]	; (426e70 <lv_screen_chart_extra+0xbc>)
  426dea:	4798      	blx	r3
  426dec:	f640 73ff 	movw	r3, #4095	; 0xfff
  426df0:	4622      	mov	r2, r4
  426df2:	4621      	mov	r1, r4
  426df4:	6828      	ldr	r0, [r5, #0]
  426df6:	4e1f      	ldr	r6, [pc, #124]	; (426e74 <lv_screen_chart_extra+0xc0>)
  426df8:	47b0      	blx	r6
	lv_chart_set_point_count(chart2, CHAR_DATA_LEN);
  426dfa:	21fa      	movs	r1, #250	; 0xfa
  426dfc:	6828      	ldr	r0, [r5, #0]
  426dfe:	4b1e      	ldr	r3, [pc, #120]	; (426e78 <lv_screen_chart_extra+0xc4>)
  426e00:	4798      	blx	r3
	lv_chart_set_div_line_count(chart2, 0, 0);
  426e02:	4622      	mov	r2, r4
  426e04:	4621      	mov	r1, r4
  426e06:	6828      	ldr	r0, [r5, #0]
  426e08:	4b1c      	ldr	r3, [pc, #112]	; (426e7c <lv_screen_chart_extra+0xc8>)
  426e0a:	4798      	blx	r3
	lv_chart_set_update_mode(chart2, LV_CHART_UPDATE_MODE_SHIFT);
  426e0c:	4621      	mov	r1, r4
  426e0e:	6828      	ldr	r0, [r5, #0]
  426e10:	4b1b      	ldr	r3, [pc, #108]	; (426e80 <lv_screen_chart_extra+0xcc>)
  426e12:	4798      	blx	r3
	ser21 = lv_chart_add_series(chart2, LV_COLOR_BLUE);
  426e14:	f04f 0100 	mov.w	r1, #0
  426e18:	f364 0102 	bfi	r1, r4, #0, #3
  426e1c:	f364 01c7 	bfi	r1, r4, #3, #5
  426e20:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
  426e24:	f364 314f 	bfi	r1, r4, #13, #3
  426e28:	6828      	ldr	r0, [r5, #0]
  426e2a:	4b16      	ldr	r3, [pc, #88]	; (426e84 <lv_screen_chart_extra+0xd0>)
  426e2c:	4798      	blx	r3
  426e2e:	4601      	mov	r1, r0
  426e30:	4b15      	ldr	r3, [pc, #84]	; (426e88 <lv_screen_chart_extra+0xd4>)
  426e32:	6018      	str	r0, [r3, #0]
	lv_chart_set_ext_array(chart2, ser21, ser21_data, CHAR_DATA_LEN);
  426e34:	23fa      	movs	r3, #250	; 0xfa
  426e36:	4a15      	ldr	r2, [pc, #84]	; (426e8c <lv_screen_chart_extra+0xd8>)
  426e38:	6828      	ldr	r0, [r5, #0]
  426e3a:	4e15      	ldr	r6, [pc, #84]	; (426e90 <lv_screen_chart_extra+0xdc>)
  426e3c:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  426e3e:	2301      	movs	r3, #1
  426e40:	2290      	movs	r2, #144	; 0x90
  426e42:	2102      	movs	r1, #2
  426e44:	6828      	ldr	r0, [r5, #0]
  426e46:	4e13      	ldr	r6, [pc, #76]	; (426e94 <lv_screen_chart_extra+0xe0>)
  426e48:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  426e4a:	4623      	mov	r3, r4
  426e4c:	2203      	movs	r2, #3
  426e4e:	2102      	movs	r1, #2
  426e50:	6828      	ldr	r0, [r5, #0]
  426e52:	47b0      	blx	r6
}
  426e54:	b002      	add	sp, #8
  426e56:	bd70      	pop	{r4, r5, r6, pc}
  426e58:	00415c15 	.word	0x00415c15
  426e5c:	00403659 	.word	0x00403659
  426e60:	0041fefd 	.word	0x0041fefd
  426e64:	2043a3f8 	.word	0x2043a3f8
  426e68:	00406be1 	.word	0x00406be1
  426e6c:	004061a9 	.word	0x004061a9
  426e70:	00420691 	.word	0x00420691
  426e74:	00420619 	.word	0x00420619
  426e78:	004206d9 	.word	0x004206d9
  426e7c:	00420201 	.word	0x00420201
  426e80:	00420259 	.word	0x00420259
  426e84:	00420145 	.word	0x00420145
  426e88:	2043a3e8 	.word	0x2043a3e8
  426e8c:	2043a41c 	.word	0x2043a41c
  426e90:	004202ad 	.word	0x004202ad
  426e94:	00407929 	.word	0x00407929

00426e98 <task_lcd>:
static void task_lcd(void *pvParameters) {
  426e98:	b508      	push	{r3, lr}
  lv_screen_chart_extra();
  426e9a:	4b07      	ldr	r3, [pc, #28]	; (426eb8 <task_lcd+0x20>)
  426e9c:	4798      	blx	r3
  lv_screen_chart();
  426e9e:	4b07      	ldr	r3, [pc, #28]	; (426ebc <task_lcd+0x24>)
  426ea0:	4798      	blx	r3
  lv_main();
  426ea2:	4b07      	ldr	r3, [pc, #28]	; (426ec0 <task_lcd+0x28>)
  426ea4:	4798      	blx	r3
    lv_tick_inc(50);
  426ea6:	2032      	movs	r0, #50	; 0x32
  426ea8:	4b06      	ldr	r3, [pc, #24]	; (426ec4 <task_lcd+0x2c>)
  426eaa:	4798      	blx	r3
    lv_task_handler();
  426eac:	4b06      	ldr	r3, [pc, #24]	; (426ec8 <task_lcd+0x30>)
  426eae:	4798      	blx	r3
    vTaskDelay(50);
  426eb0:	2032      	movs	r0, #50	; 0x32
  426eb2:	4b06      	ldr	r3, [pc, #24]	; (426ecc <task_lcd+0x34>)
  426eb4:	4798      	blx	r3
  426eb6:	e7f6      	b.n	426ea6 <task_lcd+0xe>
  426eb8:	00426db5 	.word	0x00426db5
  426ebc:	00426ce1 	.word	0x00426ce1
  426ec0:	00426cb1 	.word	0x00426cb1
  426ec4:	00416015 	.word	0x00416015
  426ec8:	004185f1 	.word	0x004185f1
  426ecc:	00402b15 	.word	0x00402b15

00426ed0 <RTC_init>:
void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type){
  426ed0:	b082      	sub	sp, #8
  426ed2:	b570      	push	{r4, r5, r6, lr}
  426ed4:	b082      	sub	sp, #8
  426ed6:	4605      	mov	r5, r0
  426ed8:	460c      	mov	r4, r1
  426eda:	a906      	add	r1, sp, #24
  426edc:	e881 000c 	stmia.w	r1, {r2, r3}
	pmc_enable_periph_clk(ID_RTC);
  426ee0:	2002      	movs	r0, #2
  426ee2:	4b1e      	ldr	r3, [pc, #120]	; (426f5c <RTC_init+0x8c>)
  426ee4:	4798      	blx	r3
	rtc_set_hour_mode(rtc, 0);
  426ee6:	2100      	movs	r1, #0
  426ee8:	4628      	mov	r0, r5
  426eea:	4b1d      	ldr	r3, [pc, #116]	; (426f60 <RTC_init+0x90>)
  426eec:	4798      	blx	r3
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  426eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  426ef0:	9300      	str	r3, [sp, #0]
  426ef2:	9b08      	ldr	r3, [sp, #32]
  426ef4:	9a07      	ldr	r2, [sp, #28]
  426ef6:	9906      	ldr	r1, [sp, #24]
  426ef8:	4628      	mov	r0, r5
  426efa:	4e1a      	ldr	r6, [pc, #104]	; (426f64 <RTC_init+0x94>)
  426efc:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  426efe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  426f00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  426f02:	990a      	ldr	r1, [sp, #40]	; 0x28
  426f04:	4628      	mov	r0, r5
  426f06:	4e18      	ldr	r6, [pc, #96]	; (426f68 <RTC_init+0x98>)
  426f08:	47b0      	blx	r6
	NVIC_DisableIRQ(id_rtc);
  426f0a:	b261      	sxtb	r1, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  426f0c:	094a      	lsrs	r2, r1, #5
  426f0e:	b2e4      	uxtb	r4, r4
  426f10:	f004 001f 	and.w	r0, r4, #31
  426f14:	2301      	movs	r3, #1
  426f16:	4083      	lsls	r3, r0
  426f18:	4814      	ldr	r0, [pc, #80]	; (426f6c <RTC_init+0x9c>)
  426f1a:	f102 0620 	add.w	r6, r2, #32
  426f1e:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  426f22:	f102 0660 	add.w	r6, r2, #96	; 0x60
  426f26:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
  if(IRQn < 0) {
  426f2a:	2900      	cmp	r1, #0
  426f2c:	db10      	blt.n	426f50 <RTC_init+0x80>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  426f2e:	480f      	ldr	r0, [pc, #60]	; (426f6c <RTC_init+0x9c>)
  426f30:	4408      	add	r0, r1
  426f32:	2180      	movs	r1, #128	; 0x80
  426f34:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  426f38:	490c      	ldr	r1, [pc, #48]	; (426f6c <RTC_init+0x9c>)
  426f3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	rtc_enable_interrupt(rtc,  irq_type);
  426f3e:	990d      	ldr	r1, [sp, #52]	; 0x34
  426f40:	4628      	mov	r0, r5
  426f42:	4b0b      	ldr	r3, [pc, #44]	; (426f70 <RTC_init+0xa0>)
  426f44:	4798      	blx	r3
}
  426f46:	b002      	add	sp, #8
  426f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  426f4c:	b002      	add	sp, #8
  426f4e:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  426f50:	f004 040f 	and.w	r4, r4, #15
  426f54:	4907      	ldr	r1, [pc, #28]	; (426f74 <RTC_init+0xa4>)
  426f56:	2080      	movs	r0, #128	; 0x80
  426f58:	5508      	strb	r0, [r1, r4]
  426f5a:	e7ed      	b.n	426f38 <RTC_init+0x68>
  426f5c:	004255b5 	.word	0x004255b5
  426f60:	00400529 	.word	0x00400529
  426f64:	00400635 	.word	0x00400635
  426f68:	004005a1 	.word	0x004005a1
  426f6c:	e000e100 	.word	0xe000e100
  426f70:	0040053f 	.word	0x0040053f
  426f74:	e000ed14 	.word	0xe000ed14

00426f78 <task_RTC>:
void task_RTC(void *pvParameters) {
  426f78:	b530      	push	{r4, r5, lr}
  426f7a:	b08f      	sub	sp, #60	; 0x3c
	xSemaphoreClock = xSemaphoreCreateBinary();
  426f7c:	2203      	movs	r2, #3
  426f7e:	2100      	movs	r1, #0
  426f80:	2001      	movs	r0, #1
  426f82:	4c47      	ldr	r4, [pc, #284]	; (4270a0 <task_RTC+0x128>)
  426f84:	47a0      	blx	r4
  426f86:	4b47      	ldr	r3, [pc, #284]	; (4270a4 <task_RTC+0x12c>)
  426f88:	6018      	str	r0, [r3, #0]
	xSemaphoreUp = xSemaphoreCreateBinary();
  426f8a:	2203      	movs	r2, #3
  426f8c:	2100      	movs	r1, #0
  426f8e:	2001      	movs	r0, #1
  426f90:	47a0      	blx	r4
  426f92:	4b45      	ldr	r3, [pc, #276]	; (4270a8 <task_RTC+0x130>)
  426f94:	6018      	str	r0, [r3, #0]
	xSemaphoreDown = xSemaphoreCreateBinary();
  426f96:	2203      	movs	r2, #3
  426f98:	2100      	movs	r1, #0
  426f9a:	2001      	movs	r0, #1
  426f9c:	47a0      	blx	r4
  426f9e:	4b43      	ldr	r3, [pc, #268]	; (4270ac <task_RTC+0x134>)
  426fa0:	6018      	str	r0, [r3, #0]
	calendar rtc_initial = {2021, 4, 19, 12, 13, 39 ,1};
  426fa2:	ac07      	add	r4, sp, #28
  426fa4:	4d42      	ldr	r5, [pc, #264]	; (4270b0 <task_RTC+0x138>)
  426fa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  426fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  426faa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  426fae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_ALREN | RTC_IER_SECEN);
  426fb2:	2306      	movs	r3, #6
  426fb4:	9305      	str	r3, [sp, #20]
  426fb6:	466c      	mov	r4, sp
  426fb8:	ad09      	add	r5, sp, #36	; 0x24
  426fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  426fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  426fbe:	682b      	ldr	r3, [r5, #0]
  426fc0:	6023      	str	r3, [r4, #0]
  426fc2:	ab07      	add	r3, sp, #28
  426fc4:	cb0c      	ldmia	r3, {r2, r3}
  426fc6:	2102      	movs	r1, #2
  426fc8:	483a      	ldr	r0, [pc, #232]	; (4270b4 <task_RTC+0x13c>)
  426fca:	4c3b      	ldr	r4, [pc, #236]	; (4270b8 <task_RTC+0x140>)
  426fcc:	47a0      	blx	r4
  426fce:	4b3b      	ldr	r3, [pc, #236]	; (4270bc <task_RTC+0x144>)
  426fd0:	4798      	blx	r3
  426fd2:	4b3b      	ldr	r3, [pc, #236]	; (4270c0 <task_RTC+0x148>)
  426fd4:	4798      	blx	r3
	labelClock = lv_label_create(lv_scr_act(), NULL);
  426fd6:	2100      	movs	r1, #0
  426fd8:	4b3a      	ldr	r3, [pc, #232]	; (4270c4 <task_RTC+0x14c>)
  426fda:	4798      	blx	r3
  426fdc:	4c3a      	ldr	r4, [pc, #232]	; (4270c8 <task_RTC+0x150>)
  426fde:	6020      	str	r0, [r4, #0]
	lv_obj_align(labelClock, NULL, LV_ALIGN_IN_TOP_RIGHT, -90, 5);
  426fe0:	2305      	movs	r3, #5
  426fe2:	9300      	str	r3, [sp, #0]
  426fe4:	f06f 0359 	mvn.w	r3, #89	; 0x59
  426fe8:	2203      	movs	r2, #3
  426fea:	2100      	movs	r1, #0
  426fec:	4d37      	ldr	r5, [pc, #220]	; (4270cc <task_RTC+0x154>)
  426fee:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  426ff0:	4b37      	ldr	r3, [pc, #220]	; (4270d0 <task_RTC+0x158>)
  426ff2:	f248 028e 	movw	r2, #32910	; 0x808e
  426ff6:	2100      	movs	r1, #0
  426ff8:	6820      	ldr	r0, [r4, #0]
  426ffa:	4d36      	ldr	r5, [pc, #216]	; (4270d4 <task_RTC+0x15c>)
  426ffc:	47a8      	blx	r5
	lv_obj_set_style_local_text_color(labelClock, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_GREEN);
  426ffe:	f04f 0300 	mov.w	r3, #0
  427002:	2204      	movs	r2, #4
  427004:	f362 0302 	bfi	r3, r2, #0, #3
  427008:	f36f 03c7 	bfc	r3, #3, #5
  42700c:	f36f 230c 	bfc	r3, #8, #5
  427010:	f36f 334f 	bfc	r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  427014:	f248 0289 	movw	r2, #32905	; 0x8089
  427018:	2100      	movs	r1, #0
  42701a:	6820      	ldr	r0, [r4, #0]
  42701c:	4c2e      	ldr	r4, [pc, #184]	; (4270d8 <task_RTC+0x160>)
  42701e:	47a0      	blx	r4
  427020:	e016      	b.n	427050 <task_RTC+0xd8>
			rtc_get_time(RTC, &rtc_initial.hour, &rtc_initial.minute, &rtc_initial.second);
  427022:	ab0d      	add	r3, sp, #52	; 0x34
  427024:	aa0c      	add	r2, sp, #48	; 0x30
  427026:	a90b      	add	r1, sp, #44	; 0x2c
  427028:	4822      	ldr	r0, [pc, #136]	; (4270b4 <task_RTC+0x13c>)
  42702a:	4c2c      	ldr	r4, [pc, #176]	; (4270dc <task_RTC+0x164>)
  42702c:	47a0      	blx	r4
			lv_label_set_text_fmt(labelClock, "%02u : %02u", rtc_initial.hour, rtc_initial.minute);
  42702e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  427030:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  427032:	492b      	ldr	r1, [pc, #172]	; (4270e0 <task_RTC+0x168>)
  427034:	4824      	ldr	r0, [pc, #144]	; (4270c8 <task_RTC+0x150>)
  427036:	6800      	ldr	r0, [r0, #0]
  427038:	4c2a      	ldr	r4, [pc, #168]	; (4270e4 <task_RTC+0x16c>)
  42703a:	47a0      	blx	r4
  42703c:	e011      	b.n	427062 <task_RTC+0xea>
		if( xSemaphoreTake(xSemaphoreDown, ( TickType_t ) 10 / portTICK_PERIOD_MS) == pdTRUE ) {
  42703e:	2300      	movs	r3, #0
  427040:	220a      	movs	r2, #10
  427042:	4619      	mov	r1, r3
  427044:	4819      	ldr	r0, [pc, #100]	; (4270ac <task_RTC+0x134>)
  427046:	6800      	ldr	r0, [r0, #0]
  427048:	4c27      	ldr	r4, [pc, #156]	; (4270e8 <task_RTC+0x170>)
  42704a:	47a0      	blx	r4
  42704c:	2801      	cmp	r0, #1
  42704e:	d01e      	beq.n	42708e <task_RTC+0x116>
		if( xSemaphoreTake(xSemaphoreClock, ( TickType_t ) 10 / portTICK_PERIOD_MS) == pdTRUE ) {
  427050:	2300      	movs	r3, #0
  427052:	220a      	movs	r2, #10
  427054:	4619      	mov	r1, r3
  427056:	4813      	ldr	r0, [pc, #76]	; (4270a4 <task_RTC+0x12c>)
  427058:	6800      	ldr	r0, [r0, #0]
  42705a:	4c23      	ldr	r4, [pc, #140]	; (4270e8 <task_RTC+0x170>)
  42705c:	47a0      	blx	r4
  42705e:	2801      	cmp	r0, #1
  427060:	d0df      	beq.n	427022 <task_RTC+0xaa>
		if( xSemaphoreTake(xSemaphoreUp, ( TickType_t ) 10 / portTICK_PERIOD_MS) == pdTRUE ) {
  427062:	2300      	movs	r3, #0
  427064:	220a      	movs	r2, #10
  427066:	4619      	mov	r1, r3
  427068:	480f      	ldr	r0, [pc, #60]	; (4270a8 <task_RTC+0x130>)
  42706a:	6800      	ldr	r0, [r0, #0]
  42706c:	4c1e      	ldr	r4, [pc, #120]	; (4270e8 <task_RTC+0x170>)
  42706e:	47a0      	blx	r4
  427070:	2801      	cmp	r0, #1
  427072:	d1e4      	bne.n	42703e <task_RTC+0xc6>
			rtc_initial.minute++;
  427074:	990c      	ldr	r1, [sp, #48]	; 0x30
  427076:	3101      	adds	r1, #1
  427078:	910c      	str	r1, [sp, #48]	; 0x30
			printf("%d", rtc_initial.minute);
  42707a:	481c      	ldr	r0, [pc, #112]	; (4270ec <task_RTC+0x174>)
  42707c:	4b1c      	ldr	r3, [pc, #112]	; (4270f0 <task_RTC+0x178>)
  42707e:	4798      	blx	r3
			rtc_set_time(RTC, rtc_initial.hour, rtc_initial.minute, rtc_initial.second);
  427080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  427082:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  427084:	990b      	ldr	r1, [sp, #44]	; 0x2c
  427086:	480b      	ldr	r0, [pc, #44]	; (4270b4 <task_RTC+0x13c>)
  427088:	4c1a      	ldr	r4, [pc, #104]	; (4270f4 <task_RTC+0x17c>)
  42708a:	47a0      	blx	r4
  42708c:	e7d7      	b.n	42703e <task_RTC+0xc6>
			rtc_initial.minute--;
  42708e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  427090:	3a01      	subs	r2, #1
  427092:	920c      	str	r2, [sp, #48]	; 0x30
			rtc_set_time(RTC, rtc_initial.hour, rtc_initial.minute, rtc_initial.second);
  427094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  427096:	990b      	ldr	r1, [sp, #44]	; 0x2c
  427098:	4806      	ldr	r0, [pc, #24]	; (4270b4 <task_RTC+0x13c>)
  42709a:	4c16      	ldr	r4, [pc, #88]	; (4270f4 <task_RTC+0x17c>)
  42709c:	47a0      	blx	r4
  42709e:	e7d7      	b.n	427050 <task_RTC+0xd8>
  4270a0:	00401e65 	.word	0x00401e65
  4270a4:	2043a40c 	.word	0x2043a40c
  4270a8:	2043a400 	.word	0x2043a400
  4270ac:	2043a3e0 	.word	0x2043a3e0
  4270b0:	00431d0c 	.word	0x00431d0c
  4270b4:	400e1860 	.word	0x400e1860
  4270b8:	00426ed1 	.word	0x00426ed1
  4270bc:	00415c15 	.word	0x00415c15
  4270c0:	00403659 	.word	0x00403659
  4270c4:	004241a9 	.word	0x004241a9
  4270c8:	2043a128 	.word	0x2043a128
  4270cc:	004061a9 	.word	0x004061a9
  4270d0:	2040000c 	.word	0x2040000c
  4270d4:	004079a9 	.word	0x004079a9
  4270d8:	00407969 	.word	0x00407969
  4270dc:	00400543 	.word	0x00400543
  4270e0:	004334d4 	.word	0x004334d4
  4270e4:	00423fa1 	.word	0x00423fa1
  4270e8:	004022cd 	.word	0x004022cd
  4270ec:	0043355c 	.word	0x0043355c
  4270f0:	00428009 	.word	0x00428009
  4270f4:	004005a1 	.word	0x004005a1

004270f8 <TC_init>:
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  4270f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4270fc:	b085      	sub	sp, #20
  4270fe:	4606      	mov	r6, r0
  427100:	460c      	mov	r4, r1
  427102:	4617      	mov	r7, r2
  427104:	4698      	mov	r8, r3
	pmc_enable_periph_clk(ID_TC);
  427106:	4608      	mov	r0, r1
  427108:	4b1e      	ldr	r3, [pc, #120]	; (427184 <TC_init+0x8c>)
  42710a:	4798      	blx	r3
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  42710c:	4d1e      	ldr	r5, [pc, #120]	; (427188 <TC_init+0x90>)
  42710e:	9500      	str	r5, [sp, #0]
  427110:	ab02      	add	r3, sp, #8
  427112:	aa03      	add	r2, sp, #12
  427114:	4629      	mov	r1, r5
  427116:	4640      	mov	r0, r8
  427118:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4271a8 <TC_init+0xb0>
  42711c:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  42711e:	9a02      	ldr	r2, [sp, #8]
  427120:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  427124:	4639      	mov	r1, r7
  427126:	4630      	mov	r0, r6
  427128:	4b18      	ldr	r3, [pc, #96]	; (42718c <TC_init+0x94>)
  42712a:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  42712c:	9a03      	ldr	r2, [sp, #12]
  42712e:	fbb5 f2f2 	udiv	r2, r5, r2
  427132:	fbb2 f2f8 	udiv	r2, r2, r8
  427136:	4639      	mov	r1, r7
  427138:	4630      	mov	r0, r6
  42713a:	4b15      	ldr	r3, [pc, #84]	; (427190 <TC_init+0x98>)
  42713c:	4798      	blx	r3
	NVIC_SetPriority(ID_TC, 4);
  42713e:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  427140:	2b00      	cmp	r3, #0
  427142:	db17      	blt.n	427174 <TC_init+0x7c>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  427144:	4a13      	ldr	r2, [pc, #76]	; (427194 <TC_init+0x9c>)
  427146:	2180      	movs	r1, #128	; 0x80
  427148:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  42714a:	095b      	lsrs	r3, r3, #5
  42714c:	f004 041f 	and.w	r4, r4, #31
  427150:	2201      	movs	r2, #1
  427152:	fa02 f404 	lsl.w	r4, r2, r4
  427156:	4a10      	ldr	r2, [pc, #64]	; (427198 <TC_init+0xa0>)
  427158:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  42715c:	2210      	movs	r2, #16
  42715e:	4639      	mov	r1, r7
  427160:	4630      	mov	r0, r6
  427162:	4b0e      	ldr	r3, [pc, #56]	; (42719c <TC_init+0xa4>)
  427164:	4798      	blx	r3
	tc_start(TC, TC_CHANNEL);
  427166:	4639      	mov	r1, r7
  427168:	4630      	mov	r0, r6
  42716a:	4b0d      	ldr	r3, [pc, #52]	; (4271a0 <TC_init+0xa8>)
  42716c:	4798      	blx	r3
}
  42716e:	b005      	add	sp, #20
  427170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  427174:	f004 010f 	and.w	r1, r4, #15
  427178:	4a0a      	ldr	r2, [pc, #40]	; (4271a4 <TC_init+0xac>)
  42717a:	440a      	add	r2, r1
  42717c:	2180      	movs	r1, #128	; 0x80
  42717e:	7611      	strb	r1, [r2, #24]
  427180:	e7e3      	b.n	42714a <TC_init+0x52>
  427182:	bf00      	nop
  427184:	004255b5 	.word	0x004255b5
  427188:	11e1a300 	.word	0x11e1a300
  42718c:	004007bd 	.word	0x004007bd
  427190:	004007df 	.word	0x004007df
  427194:	e000e400 	.word	0xe000e400
  427198:	e000e100 	.word	0xe000e100
  42719c:	004007e7 	.word	0x004007e7
  4271a0:	004007d7 	.word	0x004007d7
  4271a4:	e000ecfc 	.word	0xe000ecfc
  4271a8:	004007f7 	.word	0x004007f7

004271ac <main>:

/************************************************************************/
/* main                                                                 */
/************************************************************************/
int main(void) {
  4271ac:	b530      	push	{r4, r5, lr}
  4271ae:	b099      	sub	sp, #100	; 0x64
  /* board and sys init */
  board_init();
  4271b0:	4b54      	ldr	r3, [pc, #336]	; (427304 <main+0x158>)
  4271b2:	4798      	blx	r3
  sysclk_init();
  4271b4:	4b54      	ldr	r3, [pc, #336]	; (427308 <main+0x15c>)
  4271b6:	4798      	blx	r3
  configure_console();
  4271b8:	4b54      	ldr	r3, [pc, #336]	; (42730c <main+0x160>)
  4271ba:	4798      	blx	r3

  /* LCd int */
  configure_lcd();
  4271bc:	4b54      	ldr	r3, [pc, #336]	; (427310 <main+0x164>)
  4271be:	4798      	blx	r3
  ili9341_init();
  4271c0:	4b54      	ldr	r3, [pc, #336]	; (427314 <main+0x168>)
  4271c2:	4798      	blx	r3
  configure_touch();
  4271c4:	4b54      	ldr	r3, [pc, #336]	; (427318 <main+0x16c>)
  4271c6:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4271c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4271cc:	4b53      	ldr	r3, [pc, #332]	; (42731c <main+0x170>)
  4271ce:	631a      	str	r2, [r3, #48]	; 0x30
  ili9341_backlight_on();
  
  /*LittlevGL init*/
  lv_init();
  4271d0:	4b53      	ldr	r3, [pc, #332]	; (427320 <main+0x174>)
  4271d2:	4798      	blx	r3
  lv_disp_drv_t disp_drv;                 /*A variable to hold the drivers. Can be local variable*/
  lv_disp_drv_init(&disp_drv);            /*Basic initialization*/
  4271d4:	a80b      	add	r0, sp, #44	; 0x2c
  4271d6:	4b53      	ldr	r3, [pc, #332]	; (427324 <main+0x178>)
  4271d8:	4798      	blx	r3
  lv_disp_buf_init(&disp_buf, buf_1, NULL, LV_HOR_RES_MAX * LV_VER_RES_MAX);  /*Initialize `disp_buf` with the buffer(s) */
  4271da:	4c53      	ldr	r4, [pc, #332]	; (427328 <main+0x17c>)
  4271dc:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
  4271e0:	2200      	movs	r2, #0
  4271e2:	4952      	ldr	r1, [pc, #328]	; (42732c <main+0x180>)
  4271e4:	4620      	mov	r0, r4
  4271e6:	4d52      	ldr	r5, [pc, #328]	; (427330 <main+0x184>)
  4271e8:	47a8      	blx	r5
  disp_drv.buffer = &disp_buf;            /*Set an initialized buffer*/
  4271ea:	940c      	str	r4, [sp, #48]	; 0x30
  disp_drv.flush_cb = my_flush_cb;        /*Set a flush callback to draw to the display*/
  4271ec:	4b51      	ldr	r3, [pc, #324]	; (427334 <main+0x188>)
  4271ee:	930e      	str	r3, [sp, #56]	; 0x38
  lv_disp_t * disp;
  disp = lv_disp_drv_register(&disp_drv); /*Register the driver and save the created display objects*/
  4271f0:	a80b      	add	r0, sp, #44	; 0x2c
  4271f2:	4b51      	ldr	r3, [pc, #324]	; (427338 <main+0x18c>)
  4271f4:	4798      	blx	r3
  
  /* Init input on LVGL */
  lv_indev_drv_t indev_drv;
  lv_indev_drv_init(&indev_drv);      /*Basic initialization*/
  4271f6:	a804      	add	r0, sp, #16
  4271f8:	4b50      	ldr	r3, [pc, #320]	; (42733c <main+0x190>)
  4271fa:	4798      	blx	r3
  indev_drv.type = LV_INDEV_TYPE_POINTER;
  4271fc:	2401      	movs	r4, #1
  4271fe:	f88d 4010 	strb.w	r4, [sp, #16]
  indev_drv.read_cb = my_input_read;
  427202:	4b4f      	ldr	r3, [pc, #316]	; (427340 <main+0x194>)
  427204:	9305      	str	r3, [sp, #20]
  /*Register the driver in LVGL and save the created input device object*/
  lv_indev_t * my_indev = lv_indev_drv_register(&indev_drv);
  427206:	a804      	add	r0, sp, #16
  427208:	4b4e      	ldr	r3, [pc, #312]	; (427344 <main+0x198>)
  42720a:	4798      	blx	r3
  
  xQueueOx = xQueueCreate(32, sizeof(char));
  42720c:	2200      	movs	r2, #0
  42720e:	4621      	mov	r1, r4
  427210:	2020      	movs	r0, #32
  427212:	4c4d      	ldr	r4, [pc, #308]	; (427348 <main+0x19c>)
  427214:	47a0      	blx	r4
  427216:	4b4d      	ldr	r3, [pc, #308]	; (42734c <main+0x1a0>)
  427218:	6018      	str	r0, [r3, #0]
  
  /** Configura timer TC1, canal 3 */
  TC_init(TC1, ID_TC3, 0, 250);// 250HZ
  42721a:	23fa      	movs	r3, #250	; 0xfa
  42721c:	2200      	movs	r2, #0
  42721e:	211a      	movs	r1, #26
  427220:	484b      	ldr	r0, [pc, #300]	; (427350 <main+0x1a4>)
  427222:	4d4c      	ldr	r5, [pc, #304]	; (427354 <main+0x1a8>)
  427224:	47a8      	blx	r5
  
  xQueueECG = xQueueCreate(250, sizeof(adcData));
  427226:	2200      	movs	r2, #0
  427228:	2104      	movs	r1, #4
  42722a:	20fa      	movs	r0, #250	; 0xfa
  42722c:	47a0      	blx	r4
  42722e:	4b4a      	ldr	r3, [pc, #296]	; (427358 <main+0x1ac>)
  427230:	6018      	str	r0, [r3, #0]
  
  xQueueEcgInfo = xQueueCreate(32, sizeof(ecgInfo));
  427232:	2200      	movs	r2, #0
  427234:	2108      	movs	r1, #8
  427236:	2020      	movs	r0, #32
  427238:	47a0      	blx	r4
  42723a:	4b48      	ldr	r3, [pc, #288]	; (42735c <main+0x1b0>)
  42723c:	6018      	str	r0, [r3, #0]

  if (xTaskCreate(task_lcd, "LCD", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_PRIORITY, NULL) != pdPASS) {
  42723e:	2300      	movs	r3, #0
  427240:	9303      	str	r3, [sp, #12]
  427242:	9302      	str	r3, [sp, #8]
  427244:	9301      	str	r3, [sp, #4]
  427246:	9300      	str	r3, [sp, #0]
  427248:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  42724c:	4944      	ldr	r1, [pc, #272]	; (427360 <main+0x1b4>)
  42724e:	4845      	ldr	r0, [pc, #276]	; (427364 <main+0x1b8>)
  427250:	4c45      	ldr	r4, [pc, #276]	; (427368 <main+0x1bc>)
  427252:	47a0      	blx	r4
  427254:	2801      	cmp	r0, #1
  427256:	d002      	beq.n	42725e <main+0xb2>
    printf("Failed to create lcd task\r\n");
  427258:	4844      	ldr	r0, [pc, #272]	; (42736c <main+0x1c0>)
  42725a:	4b45      	ldr	r3, [pc, #276]	; (427370 <main+0x1c4>)
  42725c:	4798      	blx	r3
  }
  
  if (xTaskCreate(task_aps2, "APS2", TASK_APS2_STACK_SIZE, NULL, TASK_APS2_PRIORITY, NULL) != pdPASS) {
  42725e:	2300      	movs	r3, #0
  427260:	9303      	str	r3, [sp, #12]
  427262:	9302      	str	r3, [sp, #8]
  427264:	9301      	str	r3, [sp, #4]
  427266:	9300      	str	r3, [sp, #0]
  427268:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  42726c:	4941      	ldr	r1, [pc, #260]	; (427374 <main+0x1c8>)
  42726e:	4842      	ldr	r0, [pc, #264]	; (427378 <main+0x1cc>)
  427270:	4c3d      	ldr	r4, [pc, #244]	; (427368 <main+0x1bc>)
  427272:	47a0      	blx	r4
  427274:	2801      	cmp	r0, #1
  427276:	d002      	beq.n	42727e <main+0xd2>
    printf("Failed to create APS task\r\n");
  427278:	4840      	ldr	r0, [pc, #256]	; (42737c <main+0x1d0>)
  42727a:	4b3d      	ldr	r3, [pc, #244]	; (427370 <main+0x1c4>)
  42727c:	4798      	blx	r3
  }
  
  if (xTaskCreate(task_ox, "ox", TASK_MAIN_STACK_SIZE, NULL, TASK_MAIN_PRIORITY, NULL) != pdPASS) {
  42727e:	2300      	movs	r3, #0
  427280:	9303      	str	r3, [sp, #12]
  427282:	9302      	str	r3, [sp, #8]
  427284:	9301      	str	r3, [sp, #4]
  427286:	9300      	str	r3, [sp, #0]
  427288:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  42728c:	493c      	ldr	r1, [pc, #240]	; (427380 <main+0x1d4>)
  42728e:	483d      	ldr	r0, [pc, #244]	; (427384 <main+0x1d8>)
  427290:	4c35      	ldr	r4, [pc, #212]	; (427368 <main+0x1bc>)
  427292:	47a0      	blx	r4
  427294:	2801      	cmp	r0, #1
  427296:	d002      	beq.n	42729e <main+0xf2>
    printf("Failed to create ox task\r\n");
  427298:	483b      	ldr	r0, [pc, #236]	; (427388 <main+0x1dc>)
  42729a:	4b35      	ldr	r3, [pc, #212]	; (427370 <main+0x1c4>)
  42729c:	4798      	blx	r3
  }
  
  if (xTaskCreate(task_RTC, "RTC", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_PRIORITY, NULL) != pdPASS) {
  42729e:	2300      	movs	r3, #0
  4272a0:	9303      	str	r3, [sp, #12]
  4272a2:	9302      	str	r3, [sp, #8]
  4272a4:	9301      	str	r3, [sp, #4]
  4272a6:	9300      	str	r3, [sp, #0]
  4272a8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4272ac:	4937      	ldr	r1, [pc, #220]	; (42738c <main+0x1e0>)
  4272ae:	4838      	ldr	r0, [pc, #224]	; (427390 <main+0x1e4>)
  4272b0:	4c2d      	ldr	r4, [pc, #180]	; (427368 <main+0x1bc>)
  4272b2:	47a0      	blx	r4
  4272b4:	2801      	cmp	r0, #1
  4272b6:	d002      	beq.n	4272be <main+0x112>
	  printf("Failed to create RTC task\r\n");
  4272b8:	4836      	ldr	r0, [pc, #216]	; (427394 <main+0x1e8>)
  4272ba:	4b2d      	ldr	r3, [pc, #180]	; (427370 <main+0x1c4>)
  4272bc:	4798      	blx	r3
  }
  
  if (xTaskCreate(task_alarm, "alarm", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_PRIORITY, NULL) != pdPASS) {
  4272be:	2300      	movs	r3, #0
  4272c0:	9303      	str	r3, [sp, #12]
  4272c2:	9302      	str	r3, [sp, #8]
  4272c4:	9301      	str	r3, [sp, #4]
  4272c6:	9300      	str	r3, [sp, #0]
  4272c8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4272cc:	4932      	ldr	r1, [pc, #200]	; (427398 <main+0x1ec>)
  4272ce:	4833      	ldr	r0, [pc, #204]	; (42739c <main+0x1f0>)
  4272d0:	4c25      	ldr	r4, [pc, #148]	; (427368 <main+0x1bc>)
  4272d2:	47a0      	blx	r4
  4272d4:	2801      	cmp	r0, #1
  4272d6:	d002      	beq.n	4272de <main+0x132>
	  printf("Failed to create alarm task\r\n");
  4272d8:	4831      	ldr	r0, [pc, #196]	; (4273a0 <main+0x1f4>)
  4272da:	4b25      	ldr	r3, [pc, #148]	; (427370 <main+0x1c4>)
  4272dc:	4798      	blx	r3
  }
  
  if (xTaskCreate(task_process, "process", TASK_MAIN_STACK_SIZE, NULL, TASK_MAIN_PRIORITY, NULL) != pdPASS) {
  4272de:	2300      	movs	r3, #0
  4272e0:	9303      	str	r3, [sp, #12]
  4272e2:	9302      	str	r3, [sp, #8]
  4272e4:	9301      	str	r3, [sp, #4]
  4272e6:	9300      	str	r3, [sp, #0]
  4272e8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4272ec:	492d      	ldr	r1, [pc, #180]	; (4273a4 <main+0x1f8>)
  4272ee:	482e      	ldr	r0, [pc, #184]	; (4273a8 <main+0x1fc>)
  4272f0:	4c1d      	ldr	r4, [pc, #116]	; (427368 <main+0x1bc>)
  4272f2:	47a0      	blx	r4
  4272f4:	2801      	cmp	r0, #1
  4272f6:	d002      	beq.n	4272fe <main+0x152>
	  printf("Failed to create Process task\r\n");
  4272f8:	482c      	ldr	r0, [pc, #176]	; (4273ac <main+0x200>)
  4272fa:	4b1d      	ldr	r3, [pc, #116]	; (427370 <main+0x1c4>)
  4272fc:	4798      	blx	r3
  }
  
  /* Start the scheduler. */
  vTaskStartScheduler();
  4272fe:	4b2c      	ldr	r3, [pc, #176]	; (4273b0 <main+0x204>)
  427300:	4798      	blx	r3
  427302:	e7fe      	b.n	427302 <main+0x156>
  427304:	00424e2d 	.word	0x00424e2d
  427308:	00424c39 	.word	0x00424c39
  42730c:	00426add 	.word	0x00426add
  427310:	00426aa1 	.word	0x00426aa1
  427314:	0040140d 	.word	0x0040140d
  427318:	004008f9 	.word	0x004008f9
  42731c:	400e1200 	.word	0x400e1200
  427320:	004055b9 	.word	0x004055b9
  427324:	00415b9d 	.word	0x00415b9d
  427328:	2043a0e8 	.word	0x2043a0e8
  42732c:	204148e4 	.word	0x204148e4
  427330:	00415bf5 	.word	0x00415bf5
  427334:	00425c81 	.word	0x00425c81
  427338:	00415da5 	.word	0x00415da5
  42733c:	00415edd 	.word	0x00415edd
  427340:	00425cd9 	.word	0x00425cd9
  427344:	00415f09 	.word	0x00415f09
  427348:	00401e65 	.word	0x00401e65
  42734c:	2043a414 	.word	0x2043a414
  427350:	40010000 	.word	0x40010000
  427354:	004270f9 	.word	0x004270f9
  427358:	2043a3dc 	.word	0x2043a3dc
  42735c:	2043a3e4 	.word	0x2043a3e4
  427360:	00433400 	.word	0x00433400
  427364:	00426e99 	.word	0x00426e99
  427368:	004026bd 	.word	0x004026bd
  42736c:	00433404 	.word	0x00433404
  427370:	00428009 	.word	0x00428009
  427374:	00433420 	.word	0x00433420
  427378:	00400389 	.word	0x00400389
  42737c:	00433428 	.word	0x00433428
  427380:	00433444 	.word	0x00433444
  427384:	00426039 	.word	0x00426039
  427388:	00433448 	.word	0x00433448
  42738c:	00433464 	.word	0x00433464
  427390:	00426f79 	.word	0x00426f79
  427394:	00433468 	.word	0x00433468
  427398:	00433484 	.word	0x00433484
  42739c:	00425f1d 	.word	0x00425f1d
  4273a0:	0043348c 	.word	0x0043348c
  4273a4:	004334ac 	.word	0x004334ac
  4273a8:	00425e61 	.word	0x00425e61
  4273ac:	004334b4 	.word	0x004334b4
  4273b0:	00402815 	.word	0x00402815

004273b4 <arm_sin_f32>:
  4273b4:	ee06 0a90 	vmov	s13, r0
  4273b8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 427428 <arm_sin_f32+0x74>
  4273bc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  4273c0:	ee26 7a87 	vmul.f32	s14, s13, s14
  4273c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4273c8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
  4273cc:	d504      	bpl.n	4273d8 <arm_sin_f32+0x24>
  4273ce:	ee17 3a90 	vmov	r3, s15
  4273d2:	3b01      	subs	r3, #1
  4273d4:	ee07 3a90 	vmov	s15, r3
  4273d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4273dc:	eddf 6a13 	vldr	s13, [pc, #76]	; 42742c <arm_sin_f32+0x78>
  4273e0:	ee77 7a67 	vsub.f32	s15, s14, s15
  4273e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
  4273e8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
  4273ec:	ee17 3a10 	vmov	r3, s14
  4273f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4273f4:	ee07 3a10 	vmov	s14, r3
  4273f8:	eef8 6a47 	vcvt.f32.u32	s13, s14
  4273fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  427400:	ee77 7ae6 	vsub.f32	s15, s15, s13
  427404:	4a0a      	ldr	r2, [pc, #40]	; (427430 <arm_sin_f32+0x7c>)
  427406:	ee37 7a67 	vsub.f32	s14, s14, s15
  42740a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  42740e:	ed91 6a00 	vldr	s12, [r1]
  427412:	edd1 6a01 	vldr	s13, [r1, #4]
  427416:	ee27 7a06 	vmul.f32	s14, s14, s12
  42741a:	ee67 7aa6 	vmul.f32	s15, s15, s13
  42741e:	ee77 7a27 	vadd.f32	s15, s14, s15
  427422:	ee17 0a90 	vmov	r0, s15
  427426:	4770      	bx	lr
  427428:	3e22f983 	.word	0x3e22f983
  42742c:	44000000 	.word	0x44000000
  427430:	00433578 	.word	0x00433578

00427434 <__aeabi_drsub>:
  427434:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  427438:	e002      	b.n	427440 <__adddf3>
  42743a:	bf00      	nop

0042743c <__aeabi_dsub>:
  42743c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00427440 <__adddf3>:
  427440:	b530      	push	{r4, r5, lr}
  427442:	ea4f 0441 	mov.w	r4, r1, lsl #1
  427446:	ea4f 0543 	mov.w	r5, r3, lsl #1
  42744a:	ea94 0f05 	teq	r4, r5
  42744e:	bf08      	it	eq
  427450:	ea90 0f02 	teqeq	r0, r2
  427454:	bf1f      	itttt	ne
  427456:	ea54 0c00 	orrsne.w	ip, r4, r0
  42745a:	ea55 0c02 	orrsne.w	ip, r5, r2
  42745e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  427462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  427466:	f000 80e2 	beq.w	42762e <__adddf3+0x1ee>
  42746a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  42746e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  427472:	bfb8      	it	lt
  427474:	426d      	neglt	r5, r5
  427476:	dd0c      	ble.n	427492 <__adddf3+0x52>
  427478:	442c      	add	r4, r5
  42747a:	ea80 0202 	eor.w	r2, r0, r2
  42747e:	ea81 0303 	eor.w	r3, r1, r3
  427482:	ea82 0000 	eor.w	r0, r2, r0
  427486:	ea83 0101 	eor.w	r1, r3, r1
  42748a:	ea80 0202 	eor.w	r2, r0, r2
  42748e:	ea81 0303 	eor.w	r3, r1, r3
  427492:	2d36      	cmp	r5, #54	; 0x36
  427494:	bf88      	it	hi
  427496:	bd30      	pophi	{r4, r5, pc}
  427498:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  42749c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4274a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4274a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4274a8:	d002      	beq.n	4274b0 <__adddf3+0x70>
  4274aa:	4240      	negs	r0, r0
  4274ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4274b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4274b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4274b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4274bc:	d002      	beq.n	4274c4 <__adddf3+0x84>
  4274be:	4252      	negs	r2, r2
  4274c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4274c4:	ea94 0f05 	teq	r4, r5
  4274c8:	f000 80a7 	beq.w	42761a <__adddf3+0x1da>
  4274cc:	f1a4 0401 	sub.w	r4, r4, #1
  4274d0:	f1d5 0e20 	rsbs	lr, r5, #32
  4274d4:	db0d      	blt.n	4274f2 <__adddf3+0xb2>
  4274d6:	fa02 fc0e 	lsl.w	ip, r2, lr
  4274da:	fa22 f205 	lsr.w	r2, r2, r5
  4274de:	1880      	adds	r0, r0, r2
  4274e0:	f141 0100 	adc.w	r1, r1, #0
  4274e4:	fa03 f20e 	lsl.w	r2, r3, lr
  4274e8:	1880      	adds	r0, r0, r2
  4274ea:	fa43 f305 	asr.w	r3, r3, r5
  4274ee:	4159      	adcs	r1, r3
  4274f0:	e00e      	b.n	427510 <__adddf3+0xd0>
  4274f2:	f1a5 0520 	sub.w	r5, r5, #32
  4274f6:	f10e 0e20 	add.w	lr, lr, #32
  4274fa:	2a01      	cmp	r2, #1
  4274fc:	fa03 fc0e 	lsl.w	ip, r3, lr
  427500:	bf28      	it	cs
  427502:	f04c 0c02 	orrcs.w	ip, ip, #2
  427506:	fa43 f305 	asr.w	r3, r3, r5
  42750a:	18c0      	adds	r0, r0, r3
  42750c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  427510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  427514:	d507      	bpl.n	427526 <__adddf3+0xe6>
  427516:	f04f 0e00 	mov.w	lr, #0
  42751a:	f1dc 0c00 	rsbs	ip, ip, #0
  42751e:	eb7e 0000 	sbcs.w	r0, lr, r0
  427522:	eb6e 0101 	sbc.w	r1, lr, r1
  427526:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  42752a:	d31b      	bcc.n	427564 <__adddf3+0x124>
  42752c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  427530:	d30c      	bcc.n	42754c <__adddf3+0x10c>
  427532:	0849      	lsrs	r1, r1, #1
  427534:	ea5f 0030 	movs.w	r0, r0, rrx
  427538:	ea4f 0c3c 	mov.w	ip, ip, rrx
  42753c:	f104 0401 	add.w	r4, r4, #1
  427540:	ea4f 5244 	mov.w	r2, r4, lsl #21
  427544:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  427548:	f080 809a 	bcs.w	427680 <__adddf3+0x240>
  42754c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  427550:	bf08      	it	eq
  427552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  427556:	f150 0000 	adcs.w	r0, r0, #0
  42755a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  42755e:	ea41 0105 	orr.w	r1, r1, r5
  427562:	bd30      	pop	{r4, r5, pc}
  427564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  427568:	4140      	adcs	r0, r0
  42756a:	eb41 0101 	adc.w	r1, r1, r1
  42756e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  427572:	f1a4 0401 	sub.w	r4, r4, #1
  427576:	d1e9      	bne.n	42754c <__adddf3+0x10c>
  427578:	f091 0f00 	teq	r1, #0
  42757c:	bf04      	itt	eq
  42757e:	4601      	moveq	r1, r0
  427580:	2000      	moveq	r0, #0
  427582:	fab1 f381 	clz	r3, r1
  427586:	bf08      	it	eq
  427588:	3320      	addeq	r3, #32
  42758a:	f1a3 030b 	sub.w	r3, r3, #11
  42758e:	f1b3 0220 	subs.w	r2, r3, #32
  427592:	da0c      	bge.n	4275ae <__adddf3+0x16e>
  427594:	320c      	adds	r2, #12
  427596:	dd08      	ble.n	4275aa <__adddf3+0x16a>
  427598:	f102 0c14 	add.w	ip, r2, #20
  42759c:	f1c2 020c 	rsb	r2, r2, #12
  4275a0:	fa01 f00c 	lsl.w	r0, r1, ip
  4275a4:	fa21 f102 	lsr.w	r1, r1, r2
  4275a8:	e00c      	b.n	4275c4 <__adddf3+0x184>
  4275aa:	f102 0214 	add.w	r2, r2, #20
  4275ae:	bfd8      	it	le
  4275b0:	f1c2 0c20 	rsble	ip, r2, #32
  4275b4:	fa01 f102 	lsl.w	r1, r1, r2
  4275b8:	fa20 fc0c 	lsr.w	ip, r0, ip
  4275bc:	bfdc      	itt	le
  4275be:	ea41 010c 	orrle.w	r1, r1, ip
  4275c2:	4090      	lslle	r0, r2
  4275c4:	1ae4      	subs	r4, r4, r3
  4275c6:	bfa2      	ittt	ge
  4275c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4275cc:	4329      	orrge	r1, r5
  4275ce:	bd30      	popge	{r4, r5, pc}
  4275d0:	ea6f 0404 	mvn.w	r4, r4
  4275d4:	3c1f      	subs	r4, #31
  4275d6:	da1c      	bge.n	427612 <__adddf3+0x1d2>
  4275d8:	340c      	adds	r4, #12
  4275da:	dc0e      	bgt.n	4275fa <__adddf3+0x1ba>
  4275dc:	f104 0414 	add.w	r4, r4, #20
  4275e0:	f1c4 0220 	rsb	r2, r4, #32
  4275e4:	fa20 f004 	lsr.w	r0, r0, r4
  4275e8:	fa01 f302 	lsl.w	r3, r1, r2
  4275ec:	ea40 0003 	orr.w	r0, r0, r3
  4275f0:	fa21 f304 	lsr.w	r3, r1, r4
  4275f4:	ea45 0103 	orr.w	r1, r5, r3
  4275f8:	bd30      	pop	{r4, r5, pc}
  4275fa:	f1c4 040c 	rsb	r4, r4, #12
  4275fe:	f1c4 0220 	rsb	r2, r4, #32
  427602:	fa20 f002 	lsr.w	r0, r0, r2
  427606:	fa01 f304 	lsl.w	r3, r1, r4
  42760a:	ea40 0003 	orr.w	r0, r0, r3
  42760e:	4629      	mov	r1, r5
  427610:	bd30      	pop	{r4, r5, pc}
  427612:	fa21 f004 	lsr.w	r0, r1, r4
  427616:	4629      	mov	r1, r5
  427618:	bd30      	pop	{r4, r5, pc}
  42761a:	f094 0f00 	teq	r4, #0
  42761e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  427622:	bf06      	itte	eq
  427624:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  427628:	3401      	addeq	r4, #1
  42762a:	3d01      	subne	r5, #1
  42762c:	e74e      	b.n	4274cc <__adddf3+0x8c>
  42762e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  427632:	bf18      	it	ne
  427634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  427638:	d029      	beq.n	42768e <__adddf3+0x24e>
  42763a:	ea94 0f05 	teq	r4, r5
  42763e:	bf08      	it	eq
  427640:	ea90 0f02 	teqeq	r0, r2
  427644:	d005      	beq.n	427652 <__adddf3+0x212>
  427646:	ea54 0c00 	orrs.w	ip, r4, r0
  42764a:	bf04      	itt	eq
  42764c:	4619      	moveq	r1, r3
  42764e:	4610      	moveq	r0, r2
  427650:	bd30      	pop	{r4, r5, pc}
  427652:	ea91 0f03 	teq	r1, r3
  427656:	bf1e      	ittt	ne
  427658:	2100      	movne	r1, #0
  42765a:	2000      	movne	r0, #0
  42765c:	bd30      	popne	{r4, r5, pc}
  42765e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  427662:	d105      	bne.n	427670 <__adddf3+0x230>
  427664:	0040      	lsls	r0, r0, #1
  427666:	4149      	adcs	r1, r1
  427668:	bf28      	it	cs
  42766a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  42766e:	bd30      	pop	{r4, r5, pc}
  427670:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  427674:	bf3c      	itt	cc
  427676:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  42767a:	bd30      	popcc	{r4, r5, pc}
  42767c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  427680:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  427684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  427688:	f04f 0000 	mov.w	r0, #0
  42768c:	bd30      	pop	{r4, r5, pc}
  42768e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  427692:	bf1a      	itte	ne
  427694:	4619      	movne	r1, r3
  427696:	4610      	movne	r0, r2
  427698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  42769c:	bf1c      	itt	ne
  42769e:	460b      	movne	r3, r1
  4276a0:	4602      	movne	r2, r0
  4276a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4276a6:	bf06      	itte	eq
  4276a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4276ac:	ea91 0f03 	teqeq	r1, r3
  4276b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4276b4:	bd30      	pop	{r4, r5, pc}
  4276b6:	bf00      	nop

004276b8 <__aeabi_ui2d>:
  4276b8:	f090 0f00 	teq	r0, #0
  4276bc:	bf04      	itt	eq
  4276be:	2100      	moveq	r1, #0
  4276c0:	4770      	bxeq	lr
  4276c2:	b530      	push	{r4, r5, lr}
  4276c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4276c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4276cc:	f04f 0500 	mov.w	r5, #0
  4276d0:	f04f 0100 	mov.w	r1, #0
  4276d4:	e750      	b.n	427578 <__adddf3+0x138>
  4276d6:	bf00      	nop

004276d8 <__aeabi_i2d>:
  4276d8:	f090 0f00 	teq	r0, #0
  4276dc:	bf04      	itt	eq
  4276de:	2100      	moveq	r1, #0
  4276e0:	4770      	bxeq	lr
  4276e2:	b530      	push	{r4, r5, lr}
  4276e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4276e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4276ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4276f0:	bf48      	it	mi
  4276f2:	4240      	negmi	r0, r0
  4276f4:	f04f 0100 	mov.w	r1, #0
  4276f8:	e73e      	b.n	427578 <__adddf3+0x138>
  4276fa:	bf00      	nop

004276fc <__aeabi_f2d>:
  4276fc:	0042      	lsls	r2, r0, #1
  4276fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
  427702:	ea4f 0131 	mov.w	r1, r1, rrx
  427706:	ea4f 7002 	mov.w	r0, r2, lsl #28
  42770a:	bf1f      	itttt	ne
  42770c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  427710:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  427714:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  427718:	4770      	bxne	lr
  42771a:	f092 0f00 	teq	r2, #0
  42771e:	bf14      	ite	ne
  427720:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  427724:	4770      	bxeq	lr
  427726:	b530      	push	{r4, r5, lr}
  427728:	f44f 7460 	mov.w	r4, #896	; 0x380
  42772c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  427730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  427734:	e720      	b.n	427578 <__adddf3+0x138>
  427736:	bf00      	nop

00427738 <__aeabi_ul2d>:
  427738:	ea50 0201 	orrs.w	r2, r0, r1
  42773c:	bf08      	it	eq
  42773e:	4770      	bxeq	lr
  427740:	b530      	push	{r4, r5, lr}
  427742:	f04f 0500 	mov.w	r5, #0
  427746:	e00a      	b.n	42775e <__aeabi_l2d+0x16>

00427748 <__aeabi_l2d>:
  427748:	ea50 0201 	orrs.w	r2, r0, r1
  42774c:	bf08      	it	eq
  42774e:	4770      	bxeq	lr
  427750:	b530      	push	{r4, r5, lr}
  427752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  427756:	d502      	bpl.n	42775e <__aeabi_l2d+0x16>
  427758:	4240      	negs	r0, r0
  42775a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  42775e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  427762:	f104 0432 	add.w	r4, r4, #50	; 0x32
  427766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  42776a:	f43f aedc 	beq.w	427526 <__adddf3+0xe6>
  42776e:	f04f 0203 	mov.w	r2, #3
  427772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  427776:	bf18      	it	ne
  427778:	3203      	addne	r2, #3
  42777a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  42777e:	bf18      	it	ne
  427780:	3203      	addne	r2, #3
  427782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  427786:	f1c2 0320 	rsb	r3, r2, #32
  42778a:	fa00 fc03 	lsl.w	ip, r0, r3
  42778e:	fa20 f002 	lsr.w	r0, r0, r2
  427792:	fa01 fe03 	lsl.w	lr, r1, r3
  427796:	ea40 000e 	orr.w	r0, r0, lr
  42779a:	fa21 f102 	lsr.w	r1, r1, r2
  42779e:	4414      	add	r4, r2
  4277a0:	e6c1      	b.n	427526 <__adddf3+0xe6>
  4277a2:	bf00      	nop

004277a4 <__aeabi_dmul>:
  4277a4:	b570      	push	{r4, r5, r6, lr}
  4277a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4277aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4277ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4277b2:	bf1d      	ittte	ne
  4277b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4277b8:	ea94 0f0c 	teqne	r4, ip
  4277bc:	ea95 0f0c 	teqne	r5, ip
  4277c0:	f000 f8de 	bleq	427980 <__aeabi_dmul+0x1dc>
  4277c4:	442c      	add	r4, r5
  4277c6:	ea81 0603 	eor.w	r6, r1, r3
  4277ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4277ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4277d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4277d6:	bf18      	it	ne
  4277d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4277dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4277e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4277e4:	d038      	beq.n	427858 <__aeabi_dmul+0xb4>
  4277e6:	fba0 ce02 	umull	ip, lr, r0, r2
  4277ea:	f04f 0500 	mov.w	r5, #0
  4277ee:	fbe1 e502 	umlal	lr, r5, r1, r2
  4277f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4277f6:	fbe0 e503 	umlal	lr, r5, r0, r3
  4277fa:	f04f 0600 	mov.w	r6, #0
  4277fe:	fbe1 5603 	umlal	r5, r6, r1, r3
  427802:	f09c 0f00 	teq	ip, #0
  427806:	bf18      	it	ne
  427808:	f04e 0e01 	orrne.w	lr, lr, #1
  42780c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  427810:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  427814:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  427818:	d204      	bcs.n	427824 <__aeabi_dmul+0x80>
  42781a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  42781e:	416d      	adcs	r5, r5
  427820:	eb46 0606 	adc.w	r6, r6, r6
  427824:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  427828:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  42782c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  427830:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  427834:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  427838:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  42783c:	bf88      	it	hi
  42783e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  427842:	d81e      	bhi.n	427882 <__aeabi_dmul+0xde>
  427844:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  427848:	bf08      	it	eq
  42784a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  42784e:	f150 0000 	adcs.w	r0, r0, #0
  427852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  427856:	bd70      	pop	{r4, r5, r6, pc}
  427858:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  42785c:	ea46 0101 	orr.w	r1, r6, r1
  427860:	ea40 0002 	orr.w	r0, r0, r2
  427864:	ea81 0103 	eor.w	r1, r1, r3
  427868:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  42786c:	bfc2      	ittt	gt
  42786e:	ebd4 050c 	rsbsgt	r5, r4, ip
  427872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  427876:	bd70      	popgt	{r4, r5, r6, pc}
  427878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  42787c:	f04f 0e00 	mov.w	lr, #0
  427880:	3c01      	subs	r4, #1
  427882:	f300 80ab 	bgt.w	4279dc <__aeabi_dmul+0x238>
  427886:	f114 0f36 	cmn.w	r4, #54	; 0x36
  42788a:	bfde      	ittt	le
  42788c:	2000      	movle	r0, #0
  42788e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  427892:	bd70      	pople	{r4, r5, r6, pc}
  427894:	f1c4 0400 	rsb	r4, r4, #0
  427898:	3c20      	subs	r4, #32
  42789a:	da35      	bge.n	427908 <__aeabi_dmul+0x164>
  42789c:	340c      	adds	r4, #12
  42789e:	dc1b      	bgt.n	4278d8 <__aeabi_dmul+0x134>
  4278a0:	f104 0414 	add.w	r4, r4, #20
  4278a4:	f1c4 0520 	rsb	r5, r4, #32
  4278a8:	fa00 f305 	lsl.w	r3, r0, r5
  4278ac:	fa20 f004 	lsr.w	r0, r0, r4
  4278b0:	fa01 f205 	lsl.w	r2, r1, r5
  4278b4:	ea40 0002 	orr.w	r0, r0, r2
  4278b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4278bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4278c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4278c4:	fa21 f604 	lsr.w	r6, r1, r4
  4278c8:	eb42 0106 	adc.w	r1, r2, r6
  4278cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4278d0:	bf08      	it	eq
  4278d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4278d6:	bd70      	pop	{r4, r5, r6, pc}
  4278d8:	f1c4 040c 	rsb	r4, r4, #12
  4278dc:	f1c4 0520 	rsb	r5, r4, #32
  4278e0:	fa00 f304 	lsl.w	r3, r0, r4
  4278e4:	fa20 f005 	lsr.w	r0, r0, r5
  4278e8:	fa01 f204 	lsl.w	r2, r1, r4
  4278ec:	ea40 0002 	orr.w	r0, r0, r2
  4278f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4278f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4278f8:	f141 0100 	adc.w	r1, r1, #0
  4278fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  427900:	bf08      	it	eq
  427902:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  427906:	bd70      	pop	{r4, r5, r6, pc}
  427908:	f1c4 0520 	rsb	r5, r4, #32
  42790c:	fa00 f205 	lsl.w	r2, r0, r5
  427910:	ea4e 0e02 	orr.w	lr, lr, r2
  427914:	fa20 f304 	lsr.w	r3, r0, r4
  427918:	fa01 f205 	lsl.w	r2, r1, r5
  42791c:	ea43 0302 	orr.w	r3, r3, r2
  427920:	fa21 f004 	lsr.w	r0, r1, r4
  427924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  427928:	fa21 f204 	lsr.w	r2, r1, r4
  42792c:	ea20 0002 	bic.w	r0, r0, r2
  427930:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  427934:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  427938:	bf08      	it	eq
  42793a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  42793e:	bd70      	pop	{r4, r5, r6, pc}
  427940:	f094 0f00 	teq	r4, #0
  427944:	d10f      	bne.n	427966 <__aeabi_dmul+0x1c2>
  427946:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  42794a:	0040      	lsls	r0, r0, #1
  42794c:	eb41 0101 	adc.w	r1, r1, r1
  427950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  427954:	bf08      	it	eq
  427956:	3c01      	subeq	r4, #1
  427958:	d0f7      	beq.n	42794a <__aeabi_dmul+0x1a6>
  42795a:	ea41 0106 	orr.w	r1, r1, r6
  42795e:	f095 0f00 	teq	r5, #0
  427962:	bf18      	it	ne
  427964:	4770      	bxne	lr
  427966:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  42796a:	0052      	lsls	r2, r2, #1
  42796c:	eb43 0303 	adc.w	r3, r3, r3
  427970:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  427974:	bf08      	it	eq
  427976:	3d01      	subeq	r5, #1
  427978:	d0f7      	beq.n	42796a <__aeabi_dmul+0x1c6>
  42797a:	ea43 0306 	orr.w	r3, r3, r6
  42797e:	4770      	bx	lr
  427980:	ea94 0f0c 	teq	r4, ip
  427984:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  427988:	bf18      	it	ne
  42798a:	ea95 0f0c 	teqne	r5, ip
  42798e:	d00c      	beq.n	4279aa <__aeabi_dmul+0x206>
  427990:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  427994:	bf18      	it	ne
  427996:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  42799a:	d1d1      	bne.n	427940 <__aeabi_dmul+0x19c>
  42799c:	ea81 0103 	eor.w	r1, r1, r3
  4279a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4279a4:	f04f 0000 	mov.w	r0, #0
  4279a8:	bd70      	pop	{r4, r5, r6, pc}
  4279aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4279ae:	bf06      	itte	eq
  4279b0:	4610      	moveq	r0, r2
  4279b2:	4619      	moveq	r1, r3
  4279b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4279b8:	d019      	beq.n	4279ee <__aeabi_dmul+0x24a>
  4279ba:	ea94 0f0c 	teq	r4, ip
  4279be:	d102      	bne.n	4279c6 <__aeabi_dmul+0x222>
  4279c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4279c4:	d113      	bne.n	4279ee <__aeabi_dmul+0x24a>
  4279c6:	ea95 0f0c 	teq	r5, ip
  4279ca:	d105      	bne.n	4279d8 <__aeabi_dmul+0x234>
  4279cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4279d0:	bf1c      	itt	ne
  4279d2:	4610      	movne	r0, r2
  4279d4:	4619      	movne	r1, r3
  4279d6:	d10a      	bne.n	4279ee <__aeabi_dmul+0x24a>
  4279d8:	ea81 0103 	eor.w	r1, r1, r3
  4279dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4279e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4279e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4279e8:	f04f 0000 	mov.w	r0, #0
  4279ec:	bd70      	pop	{r4, r5, r6, pc}
  4279ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4279f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4279f6:	bd70      	pop	{r4, r5, r6, pc}

004279f8 <__aeabi_ddiv>:
  4279f8:	b570      	push	{r4, r5, r6, lr}
  4279fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4279fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  427a02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  427a06:	bf1d      	ittte	ne
  427a08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  427a0c:	ea94 0f0c 	teqne	r4, ip
  427a10:	ea95 0f0c 	teqne	r5, ip
  427a14:	f000 f8a7 	bleq	427b66 <__aeabi_ddiv+0x16e>
  427a18:	eba4 0405 	sub.w	r4, r4, r5
  427a1c:	ea81 0e03 	eor.w	lr, r1, r3
  427a20:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  427a24:	ea4f 3101 	mov.w	r1, r1, lsl #12
  427a28:	f000 8088 	beq.w	427b3c <__aeabi_ddiv+0x144>
  427a2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  427a30:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  427a34:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  427a38:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  427a3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  427a40:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  427a44:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  427a48:	ea4f 2600 	mov.w	r6, r0, lsl #8
  427a4c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  427a50:	429d      	cmp	r5, r3
  427a52:	bf08      	it	eq
  427a54:	4296      	cmpeq	r6, r2
  427a56:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  427a5a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  427a5e:	d202      	bcs.n	427a66 <__aeabi_ddiv+0x6e>
  427a60:	085b      	lsrs	r3, r3, #1
  427a62:	ea4f 0232 	mov.w	r2, r2, rrx
  427a66:	1ab6      	subs	r6, r6, r2
  427a68:	eb65 0503 	sbc.w	r5, r5, r3
  427a6c:	085b      	lsrs	r3, r3, #1
  427a6e:	ea4f 0232 	mov.w	r2, r2, rrx
  427a72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  427a76:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  427a7a:	ebb6 0e02 	subs.w	lr, r6, r2
  427a7e:	eb75 0e03 	sbcs.w	lr, r5, r3
  427a82:	bf22      	ittt	cs
  427a84:	1ab6      	subcs	r6, r6, r2
  427a86:	4675      	movcs	r5, lr
  427a88:	ea40 000c 	orrcs.w	r0, r0, ip
  427a8c:	085b      	lsrs	r3, r3, #1
  427a8e:	ea4f 0232 	mov.w	r2, r2, rrx
  427a92:	ebb6 0e02 	subs.w	lr, r6, r2
  427a96:	eb75 0e03 	sbcs.w	lr, r5, r3
  427a9a:	bf22      	ittt	cs
  427a9c:	1ab6      	subcs	r6, r6, r2
  427a9e:	4675      	movcs	r5, lr
  427aa0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  427aa4:	085b      	lsrs	r3, r3, #1
  427aa6:	ea4f 0232 	mov.w	r2, r2, rrx
  427aaa:	ebb6 0e02 	subs.w	lr, r6, r2
  427aae:	eb75 0e03 	sbcs.w	lr, r5, r3
  427ab2:	bf22      	ittt	cs
  427ab4:	1ab6      	subcs	r6, r6, r2
  427ab6:	4675      	movcs	r5, lr
  427ab8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  427abc:	085b      	lsrs	r3, r3, #1
  427abe:	ea4f 0232 	mov.w	r2, r2, rrx
  427ac2:	ebb6 0e02 	subs.w	lr, r6, r2
  427ac6:	eb75 0e03 	sbcs.w	lr, r5, r3
  427aca:	bf22      	ittt	cs
  427acc:	1ab6      	subcs	r6, r6, r2
  427ace:	4675      	movcs	r5, lr
  427ad0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  427ad4:	ea55 0e06 	orrs.w	lr, r5, r6
  427ad8:	d018      	beq.n	427b0c <__aeabi_ddiv+0x114>
  427ada:	ea4f 1505 	mov.w	r5, r5, lsl #4
  427ade:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  427ae2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  427ae6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  427aea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  427aee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  427af2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  427af6:	d1c0      	bne.n	427a7a <__aeabi_ddiv+0x82>
  427af8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  427afc:	d10b      	bne.n	427b16 <__aeabi_ddiv+0x11e>
  427afe:	ea41 0100 	orr.w	r1, r1, r0
  427b02:	f04f 0000 	mov.w	r0, #0
  427b06:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  427b0a:	e7b6      	b.n	427a7a <__aeabi_ddiv+0x82>
  427b0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  427b10:	bf04      	itt	eq
  427b12:	4301      	orreq	r1, r0
  427b14:	2000      	moveq	r0, #0
  427b16:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  427b1a:	bf88      	it	hi
  427b1c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  427b20:	f63f aeaf 	bhi.w	427882 <__aeabi_dmul+0xde>
  427b24:	ebb5 0c03 	subs.w	ip, r5, r3
  427b28:	bf04      	itt	eq
  427b2a:	ebb6 0c02 	subseq.w	ip, r6, r2
  427b2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  427b32:	f150 0000 	adcs.w	r0, r0, #0
  427b36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  427b3a:	bd70      	pop	{r4, r5, r6, pc}
  427b3c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  427b40:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  427b44:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  427b48:	bfc2      	ittt	gt
  427b4a:	ebd4 050c 	rsbsgt	r5, r4, ip
  427b4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  427b52:	bd70      	popgt	{r4, r5, r6, pc}
  427b54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  427b58:	f04f 0e00 	mov.w	lr, #0
  427b5c:	3c01      	subs	r4, #1
  427b5e:	e690      	b.n	427882 <__aeabi_dmul+0xde>
  427b60:	ea45 0e06 	orr.w	lr, r5, r6
  427b64:	e68d      	b.n	427882 <__aeabi_dmul+0xde>
  427b66:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  427b6a:	ea94 0f0c 	teq	r4, ip
  427b6e:	bf08      	it	eq
  427b70:	ea95 0f0c 	teqeq	r5, ip
  427b74:	f43f af3b 	beq.w	4279ee <__aeabi_dmul+0x24a>
  427b78:	ea94 0f0c 	teq	r4, ip
  427b7c:	d10a      	bne.n	427b94 <__aeabi_ddiv+0x19c>
  427b7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  427b82:	f47f af34 	bne.w	4279ee <__aeabi_dmul+0x24a>
  427b86:	ea95 0f0c 	teq	r5, ip
  427b8a:	f47f af25 	bne.w	4279d8 <__aeabi_dmul+0x234>
  427b8e:	4610      	mov	r0, r2
  427b90:	4619      	mov	r1, r3
  427b92:	e72c      	b.n	4279ee <__aeabi_dmul+0x24a>
  427b94:	ea95 0f0c 	teq	r5, ip
  427b98:	d106      	bne.n	427ba8 <__aeabi_ddiv+0x1b0>
  427b9a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  427b9e:	f43f aefd 	beq.w	42799c <__aeabi_dmul+0x1f8>
  427ba2:	4610      	mov	r0, r2
  427ba4:	4619      	mov	r1, r3
  427ba6:	e722      	b.n	4279ee <__aeabi_dmul+0x24a>
  427ba8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  427bac:	bf18      	it	ne
  427bae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  427bb2:	f47f aec5 	bne.w	427940 <__aeabi_dmul+0x19c>
  427bb6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  427bba:	f47f af0d 	bne.w	4279d8 <__aeabi_dmul+0x234>
  427bbe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  427bc2:	f47f aeeb 	bne.w	42799c <__aeabi_dmul+0x1f8>
  427bc6:	e712      	b.n	4279ee <__aeabi_dmul+0x24a>

00427bc8 <__aeabi_d2uiz>:
  427bc8:	004a      	lsls	r2, r1, #1
  427bca:	d211      	bcs.n	427bf0 <__aeabi_d2uiz+0x28>
  427bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  427bd0:	d211      	bcs.n	427bf6 <__aeabi_d2uiz+0x2e>
  427bd2:	d50d      	bpl.n	427bf0 <__aeabi_d2uiz+0x28>
  427bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  427bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  427bdc:	d40e      	bmi.n	427bfc <__aeabi_d2uiz+0x34>
  427bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  427be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  427be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  427bea:	fa23 f002 	lsr.w	r0, r3, r2
  427bee:	4770      	bx	lr
  427bf0:	f04f 0000 	mov.w	r0, #0
  427bf4:	4770      	bx	lr
  427bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  427bfa:	d102      	bne.n	427c02 <__aeabi_d2uiz+0x3a>
  427bfc:	f04f 30ff 	mov.w	r0, #4294967295
  427c00:	4770      	bx	lr
  427c02:	f04f 0000 	mov.w	r0, #0
  427c06:	4770      	bx	lr

00427c08 <__aeabi_d2f>:
  427c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
  427c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  427c10:	bf24      	itt	cs
  427c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  427c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  427c1a:	d90d      	bls.n	427c38 <__aeabi_d2f+0x30>
  427c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  427c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  427c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  427c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  427c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  427c30:	bf08      	it	eq
  427c32:	f020 0001 	biceq.w	r0, r0, #1
  427c36:	4770      	bx	lr
  427c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  427c3c:	d121      	bne.n	427c82 <__aeabi_d2f+0x7a>
  427c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  427c42:	bfbc      	itt	lt
  427c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  427c48:	4770      	bxlt	lr
  427c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  427c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
  427c52:	f1c2 0218 	rsb	r2, r2, #24
  427c56:	f1c2 0c20 	rsb	ip, r2, #32
  427c5a:	fa10 f30c 	lsls.w	r3, r0, ip
  427c5e:	fa20 f002 	lsr.w	r0, r0, r2
  427c62:	bf18      	it	ne
  427c64:	f040 0001 	orrne.w	r0, r0, #1
  427c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  427c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  427c70:	fa03 fc0c 	lsl.w	ip, r3, ip
  427c74:	ea40 000c 	orr.w	r0, r0, ip
  427c78:	fa23 f302 	lsr.w	r3, r3, r2
  427c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
  427c80:	e7cc      	b.n	427c1c <__aeabi_d2f+0x14>
  427c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
  427c86:	d107      	bne.n	427c98 <__aeabi_d2f+0x90>
  427c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  427c8c:	bf1e      	ittt	ne
  427c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  427c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  427c96:	4770      	bxne	lr
  427c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  427c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  427ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  427ca4:	4770      	bx	lr
  427ca6:	bf00      	nop

00427ca8 <__aeabi_uldivmod>:
  427ca8:	b953      	cbnz	r3, 427cc0 <__aeabi_uldivmod+0x18>
  427caa:	b94a      	cbnz	r2, 427cc0 <__aeabi_uldivmod+0x18>
  427cac:	2900      	cmp	r1, #0
  427cae:	bf08      	it	eq
  427cb0:	2800      	cmpeq	r0, #0
  427cb2:	bf1c      	itt	ne
  427cb4:	f04f 31ff 	movne.w	r1, #4294967295
  427cb8:	f04f 30ff 	movne.w	r0, #4294967295
  427cbc:	f000 b97a 	b.w	427fb4 <__aeabi_idiv0>
  427cc0:	f1ad 0c08 	sub.w	ip, sp, #8
  427cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  427cc8:	f000 f806 	bl	427cd8 <__udivmoddi4>
  427ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
  427cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  427cd4:	b004      	add	sp, #16
  427cd6:	4770      	bx	lr

00427cd8 <__udivmoddi4>:
  427cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  427cdc:	468c      	mov	ip, r1
  427cde:	460d      	mov	r5, r1
  427ce0:	4604      	mov	r4, r0
  427ce2:	9e08      	ldr	r6, [sp, #32]
  427ce4:	2b00      	cmp	r3, #0
  427ce6:	d151      	bne.n	427d8c <__udivmoddi4+0xb4>
  427ce8:	428a      	cmp	r2, r1
  427cea:	4617      	mov	r7, r2
  427cec:	d96d      	bls.n	427dca <__udivmoddi4+0xf2>
  427cee:	fab2 fe82 	clz	lr, r2
  427cf2:	f1be 0f00 	cmp.w	lr, #0
  427cf6:	d00b      	beq.n	427d10 <__udivmoddi4+0x38>
  427cf8:	f1ce 0c20 	rsb	ip, lr, #32
  427cfc:	fa01 f50e 	lsl.w	r5, r1, lr
  427d00:	fa20 fc0c 	lsr.w	ip, r0, ip
  427d04:	fa02 f70e 	lsl.w	r7, r2, lr
  427d08:	ea4c 0c05 	orr.w	ip, ip, r5
  427d0c:	fa00 f40e 	lsl.w	r4, r0, lr
  427d10:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  427d14:	0c25      	lsrs	r5, r4, #16
  427d16:	fbbc f8fa 	udiv	r8, ip, sl
  427d1a:	fa1f f987 	uxth.w	r9, r7
  427d1e:	fb0a cc18 	mls	ip, sl, r8, ip
  427d22:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  427d26:	fb08 f309 	mul.w	r3, r8, r9
  427d2a:	42ab      	cmp	r3, r5
  427d2c:	d90a      	bls.n	427d44 <__udivmoddi4+0x6c>
  427d2e:	19ed      	adds	r5, r5, r7
  427d30:	f108 32ff 	add.w	r2, r8, #4294967295
  427d34:	f080 8123 	bcs.w	427f7e <__udivmoddi4+0x2a6>
  427d38:	42ab      	cmp	r3, r5
  427d3a:	f240 8120 	bls.w	427f7e <__udivmoddi4+0x2a6>
  427d3e:	f1a8 0802 	sub.w	r8, r8, #2
  427d42:	443d      	add	r5, r7
  427d44:	1aed      	subs	r5, r5, r3
  427d46:	b2a4      	uxth	r4, r4
  427d48:	fbb5 f0fa 	udiv	r0, r5, sl
  427d4c:	fb0a 5510 	mls	r5, sl, r0, r5
  427d50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  427d54:	fb00 f909 	mul.w	r9, r0, r9
  427d58:	45a1      	cmp	r9, r4
  427d5a:	d909      	bls.n	427d70 <__udivmoddi4+0x98>
  427d5c:	19e4      	adds	r4, r4, r7
  427d5e:	f100 33ff 	add.w	r3, r0, #4294967295
  427d62:	f080 810a 	bcs.w	427f7a <__udivmoddi4+0x2a2>
  427d66:	45a1      	cmp	r9, r4
  427d68:	f240 8107 	bls.w	427f7a <__udivmoddi4+0x2a2>
  427d6c:	3802      	subs	r0, #2
  427d6e:	443c      	add	r4, r7
  427d70:	eba4 0409 	sub.w	r4, r4, r9
  427d74:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  427d78:	2100      	movs	r1, #0
  427d7a:	2e00      	cmp	r6, #0
  427d7c:	d061      	beq.n	427e42 <__udivmoddi4+0x16a>
  427d7e:	fa24 f40e 	lsr.w	r4, r4, lr
  427d82:	2300      	movs	r3, #0
  427d84:	6034      	str	r4, [r6, #0]
  427d86:	6073      	str	r3, [r6, #4]
  427d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  427d8c:	428b      	cmp	r3, r1
  427d8e:	d907      	bls.n	427da0 <__udivmoddi4+0xc8>
  427d90:	2e00      	cmp	r6, #0
  427d92:	d054      	beq.n	427e3e <__udivmoddi4+0x166>
  427d94:	2100      	movs	r1, #0
  427d96:	e886 0021 	stmia.w	r6, {r0, r5}
  427d9a:	4608      	mov	r0, r1
  427d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  427da0:	fab3 f183 	clz	r1, r3
  427da4:	2900      	cmp	r1, #0
  427da6:	f040 808e 	bne.w	427ec6 <__udivmoddi4+0x1ee>
  427daa:	42ab      	cmp	r3, r5
  427dac:	d302      	bcc.n	427db4 <__udivmoddi4+0xdc>
  427dae:	4282      	cmp	r2, r0
  427db0:	f200 80fa 	bhi.w	427fa8 <__udivmoddi4+0x2d0>
  427db4:	1a84      	subs	r4, r0, r2
  427db6:	eb65 0503 	sbc.w	r5, r5, r3
  427dba:	2001      	movs	r0, #1
  427dbc:	46ac      	mov	ip, r5
  427dbe:	2e00      	cmp	r6, #0
  427dc0:	d03f      	beq.n	427e42 <__udivmoddi4+0x16a>
  427dc2:	e886 1010 	stmia.w	r6, {r4, ip}
  427dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  427dca:	b912      	cbnz	r2, 427dd2 <__udivmoddi4+0xfa>
  427dcc:	2701      	movs	r7, #1
  427dce:	fbb7 f7f2 	udiv	r7, r7, r2
  427dd2:	fab7 fe87 	clz	lr, r7
  427dd6:	f1be 0f00 	cmp.w	lr, #0
  427dda:	d134      	bne.n	427e46 <__udivmoddi4+0x16e>
  427ddc:	1beb      	subs	r3, r5, r7
  427dde:	0c3a      	lsrs	r2, r7, #16
  427de0:	fa1f fc87 	uxth.w	ip, r7
  427de4:	2101      	movs	r1, #1
  427de6:	fbb3 f8f2 	udiv	r8, r3, r2
  427dea:	0c25      	lsrs	r5, r4, #16
  427dec:	fb02 3318 	mls	r3, r2, r8, r3
  427df0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  427df4:	fb0c f308 	mul.w	r3, ip, r8
  427df8:	42ab      	cmp	r3, r5
  427dfa:	d907      	bls.n	427e0c <__udivmoddi4+0x134>
  427dfc:	19ed      	adds	r5, r5, r7
  427dfe:	f108 30ff 	add.w	r0, r8, #4294967295
  427e02:	d202      	bcs.n	427e0a <__udivmoddi4+0x132>
  427e04:	42ab      	cmp	r3, r5
  427e06:	f200 80d1 	bhi.w	427fac <__udivmoddi4+0x2d4>
  427e0a:	4680      	mov	r8, r0
  427e0c:	1aed      	subs	r5, r5, r3
  427e0e:	b2a3      	uxth	r3, r4
  427e10:	fbb5 f0f2 	udiv	r0, r5, r2
  427e14:	fb02 5510 	mls	r5, r2, r0, r5
  427e18:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  427e1c:	fb0c fc00 	mul.w	ip, ip, r0
  427e20:	45a4      	cmp	ip, r4
  427e22:	d907      	bls.n	427e34 <__udivmoddi4+0x15c>
  427e24:	19e4      	adds	r4, r4, r7
  427e26:	f100 33ff 	add.w	r3, r0, #4294967295
  427e2a:	d202      	bcs.n	427e32 <__udivmoddi4+0x15a>
  427e2c:	45a4      	cmp	ip, r4
  427e2e:	f200 80b8 	bhi.w	427fa2 <__udivmoddi4+0x2ca>
  427e32:	4618      	mov	r0, r3
  427e34:	eba4 040c 	sub.w	r4, r4, ip
  427e38:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  427e3c:	e79d      	b.n	427d7a <__udivmoddi4+0xa2>
  427e3e:	4631      	mov	r1, r6
  427e40:	4630      	mov	r0, r6
  427e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  427e46:	f1ce 0420 	rsb	r4, lr, #32
  427e4a:	fa05 f30e 	lsl.w	r3, r5, lr
  427e4e:	fa07 f70e 	lsl.w	r7, r7, lr
  427e52:	fa20 f804 	lsr.w	r8, r0, r4
  427e56:	0c3a      	lsrs	r2, r7, #16
  427e58:	fa25 f404 	lsr.w	r4, r5, r4
  427e5c:	ea48 0803 	orr.w	r8, r8, r3
  427e60:	fbb4 f1f2 	udiv	r1, r4, r2
  427e64:	ea4f 4518 	mov.w	r5, r8, lsr #16
  427e68:	fb02 4411 	mls	r4, r2, r1, r4
  427e6c:	fa1f fc87 	uxth.w	ip, r7
  427e70:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  427e74:	fb01 f30c 	mul.w	r3, r1, ip
  427e78:	42ab      	cmp	r3, r5
  427e7a:	fa00 f40e 	lsl.w	r4, r0, lr
  427e7e:	d909      	bls.n	427e94 <__udivmoddi4+0x1bc>
  427e80:	19ed      	adds	r5, r5, r7
  427e82:	f101 30ff 	add.w	r0, r1, #4294967295
  427e86:	f080 808a 	bcs.w	427f9e <__udivmoddi4+0x2c6>
  427e8a:	42ab      	cmp	r3, r5
  427e8c:	f240 8087 	bls.w	427f9e <__udivmoddi4+0x2c6>
  427e90:	3902      	subs	r1, #2
  427e92:	443d      	add	r5, r7
  427e94:	1aeb      	subs	r3, r5, r3
  427e96:	fa1f f588 	uxth.w	r5, r8
  427e9a:	fbb3 f0f2 	udiv	r0, r3, r2
  427e9e:	fb02 3310 	mls	r3, r2, r0, r3
  427ea2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  427ea6:	fb00 f30c 	mul.w	r3, r0, ip
  427eaa:	42ab      	cmp	r3, r5
  427eac:	d907      	bls.n	427ebe <__udivmoddi4+0x1e6>
  427eae:	19ed      	adds	r5, r5, r7
  427eb0:	f100 38ff 	add.w	r8, r0, #4294967295
  427eb4:	d26f      	bcs.n	427f96 <__udivmoddi4+0x2be>
  427eb6:	42ab      	cmp	r3, r5
  427eb8:	d96d      	bls.n	427f96 <__udivmoddi4+0x2be>
  427eba:	3802      	subs	r0, #2
  427ebc:	443d      	add	r5, r7
  427ebe:	1aeb      	subs	r3, r5, r3
  427ec0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  427ec4:	e78f      	b.n	427de6 <__udivmoddi4+0x10e>
  427ec6:	f1c1 0720 	rsb	r7, r1, #32
  427eca:	fa22 f807 	lsr.w	r8, r2, r7
  427ece:	408b      	lsls	r3, r1
  427ed0:	fa05 f401 	lsl.w	r4, r5, r1
  427ed4:	ea48 0303 	orr.w	r3, r8, r3
  427ed8:	fa20 fe07 	lsr.w	lr, r0, r7
  427edc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  427ee0:	40fd      	lsrs	r5, r7
  427ee2:	ea4e 0e04 	orr.w	lr, lr, r4
  427ee6:	fbb5 f9fc 	udiv	r9, r5, ip
  427eea:	ea4f 441e 	mov.w	r4, lr, lsr #16
  427eee:	fb0c 5519 	mls	r5, ip, r9, r5
  427ef2:	fa1f f883 	uxth.w	r8, r3
  427ef6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  427efa:	fb09 f408 	mul.w	r4, r9, r8
  427efe:	42ac      	cmp	r4, r5
  427f00:	fa02 f201 	lsl.w	r2, r2, r1
  427f04:	fa00 fa01 	lsl.w	sl, r0, r1
  427f08:	d908      	bls.n	427f1c <__udivmoddi4+0x244>
  427f0a:	18ed      	adds	r5, r5, r3
  427f0c:	f109 30ff 	add.w	r0, r9, #4294967295
  427f10:	d243      	bcs.n	427f9a <__udivmoddi4+0x2c2>
  427f12:	42ac      	cmp	r4, r5
  427f14:	d941      	bls.n	427f9a <__udivmoddi4+0x2c2>
  427f16:	f1a9 0902 	sub.w	r9, r9, #2
  427f1a:	441d      	add	r5, r3
  427f1c:	1b2d      	subs	r5, r5, r4
  427f1e:	fa1f fe8e 	uxth.w	lr, lr
  427f22:	fbb5 f0fc 	udiv	r0, r5, ip
  427f26:	fb0c 5510 	mls	r5, ip, r0, r5
  427f2a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  427f2e:	fb00 f808 	mul.w	r8, r0, r8
  427f32:	45a0      	cmp	r8, r4
  427f34:	d907      	bls.n	427f46 <__udivmoddi4+0x26e>
  427f36:	18e4      	adds	r4, r4, r3
  427f38:	f100 35ff 	add.w	r5, r0, #4294967295
  427f3c:	d229      	bcs.n	427f92 <__udivmoddi4+0x2ba>
  427f3e:	45a0      	cmp	r8, r4
  427f40:	d927      	bls.n	427f92 <__udivmoddi4+0x2ba>
  427f42:	3802      	subs	r0, #2
  427f44:	441c      	add	r4, r3
  427f46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  427f4a:	eba4 0408 	sub.w	r4, r4, r8
  427f4e:	fba0 8902 	umull	r8, r9, r0, r2
  427f52:	454c      	cmp	r4, r9
  427f54:	46c6      	mov	lr, r8
  427f56:	464d      	mov	r5, r9
  427f58:	d315      	bcc.n	427f86 <__udivmoddi4+0x2ae>
  427f5a:	d012      	beq.n	427f82 <__udivmoddi4+0x2aa>
  427f5c:	b156      	cbz	r6, 427f74 <__udivmoddi4+0x29c>
  427f5e:	ebba 030e 	subs.w	r3, sl, lr
  427f62:	eb64 0405 	sbc.w	r4, r4, r5
  427f66:	fa04 f707 	lsl.w	r7, r4, r7
  427f6a:	40cb      	lsrs	r3, r1
  427f6c:	431f      	orrs	r7, r3
  427f6e:	40cc      	lsrs	r4, r1
  427f70:	6037      	str	r7, [r6, #0]
  427f72:	6074      	str	r4, [r6, #4]
  427f74:	2100      	movs	r1, #0
  427f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  427f7a:	4618      	mov	r0, r3
  427f7c:	e6f8      	b.n	427d70 <__udivmoddi4+0x98>
  427f7e:	4690      	mov	r8, r2
  427f80:	e6e0      	b.n	427d44 <__udivmoddi4+0x6c>
  427f82:	45c2      	cmp	sl, r8
  427f84:	d2ea      	bcs.n	427f5c <__udivmoddi4+0x284>
  427f86:	ebb8 0e02 	subs.w	lr, r8, r2
  427f8a:	eb69 0503 	sbc.w	r5, r9, r3
  427f8e:	3801      	subs	r0, #1
  427f90:	e7e4      	b.n	427f5c <__udivmoddi4+0x284>
  427f92:	4628      	mov	r0, r5
  427f94:	e7d7      	b.n	427f46 <__udivmoddi4+0x26e>
  427f96:	4640      	mov	r0, r8
  427f98:	e791      	b.n	427ebe <__udivmoddi4+0x1e6>
  427f9a:	4681      	mov	r9, r0
  427f9c:	e7be      	b.n	427f1c <__udivmoddi4+0x244>
  427f9e:	4601      	mov	r1, r0
  427fa0:	e778      	b.n	427e94 <__udivmoddi4+0x1bc>
  427fa2:	3802      	subs	r0, #2
  427fa4:	443c      	add	r4, r7
  427fa6:	e745      	b.n	427e34 <__udivmoddi4+0x15c>
  427fa8:	4608      	mov	r0, r1
  427faa:	e708      	b.n	427dbe <__udivmoddi4+0xe6>
  427fac:	f1a8 0802 	sub.w	r8, r8, #2
  427fb0:	443d      	add	r5, r7
  427fb2:	e72b      	b.n	427e0c <__udivmoddi4+0x134>

00427fb4 <__aeabi_idiv0>:
  427fb4:	4770      	bx	lr
  427fb6:	bf00      	nop

00427fb8 <__libc_init_array>:
  427fb8:	b570      	push	{r4, r5, r6, lr}
  427fba:	4e0f      	ldr	r6, [pc, #60]	; (427ff8 <__libc_init_array+0x40>)
  427fbc:	4d0f      	ldr	r5, [pc, #60]	; (427ffc <__libc_init_array+0x44>)
  427fbe:	1b76      	subs	r6, r6, r5
  427fc0:	10b6      	asrs	r6, r6, #2
  427fc2:	bf18      	it	ne
  427fc4:	2400      	movne	r4, #0
  427fc6:	d005      	beq.n	427fd4 <__libc_init_array+0x1c>
  427fc8:	3401      	adds	r4, #1
  427fca:	f855 3b04 	ldr.w	r3, [r5], #4
  427fce:	4798      	blx	r3
  427fd0:	42a6      	cmp	r6, r4
  427fd2:	d1f9      	bne.n	427fc8 <__libc_init_array+0x10>
  427fd4:	4e0a      	ldr	r6, [pc, #40]	; (428000 <__libc_init_array+0x48>)
  427fd6:	4d0b      	ldr	r5, [pc, #44]	; (428004 <__libc_init_array+0x4c>)
  427fd8:	1b76      	subs	r6, r6, r5
  427fda:	f00b ff83 	bl	433ee4 <_init>
  427fde:	10b6      	asrs	r6, r6, #2
  427fe0:	bf18      	it	ne
  427fe2:	2400      	movne	r4, #0
  427fe4:	d006      	beq.n	427ff4 <__libc_init_array+0x3c>
  427fe6:	3401      	adds	r4, #1
  427fe8:	f855 3b04 	ldr.w	r3, [r5], #4
  427fec:	4798      	blx	r3
  427fee:	42a6      	cmp	r6, r4
  427ff0:	d1f9      	bne.n	427fe6 <__libc_init_array+0x2e>
  427ff2:	bd70      	pop	{r4, r5, r6, pc}
  427ff4:	bd70      	pop	{r4, r5, r6, pc}
  427ff6:	bf00      	nop
  427ff8:	00433ef0 	.word	0x00433ef0
  427ffc:	00433ef0 	.word	0x00433ef0
  428000:	00433ef8 	.word	0x00433ef8
  428004:	00433ef0 	.word	0x00433ef0

00428008 <iprintf>:
  428008:	b40f      	push	{r0, r1, r2, r3}
  42800a:	b500      	push	{lr}
  42800c:	4907      	ldr	r1, [pc, #28]	; (42802c <iprintf+0x24>)
  42800e:	b083      	sub	sp, #12
  428010:	ab04      	add	r3, sp, #16
  428012:	6808      	ldr	r0, [r1, #0]
  428014:	f853 2b04 	ldr.w	r2, [r3], #4
  428018:	6881      	ldr	r1, [r0, #8]
  42801a:	9301      	str	r3, [sp, #4]
  42801c:	f000 ffb0 	bl	428f80 <_vfiprintf_r>
  428020:	b003      	add	sp, #12
  428022:	f85d eb04 	ldr.w	lr, [sp], #4
  428026:	b004      	add	sp, #16
  428028:	4770      	bx	lr
  42802a:	bf00      	nop
  42802c:	204000d4 	.word	0x204000d4

00428030 <malloc>:
  428030:	4b02      	ldr	r3, [pc, #8]	; (42803c <malloc+0xc>)
  428032:	4601      	mov	r1, r0
  428034:	6818      	ldr	r0, [r3, #0]
  428036:	f000 b803 	b.w	428040 <_malloc_r>
  42803a:	bf00      	nop
  42803c:	204000d4 	.word	0x204000d4

00428040 <_malloc_r>:
  428040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  428044:	f101 060b 	add.w	r6, r1, #11
  428048:	2e16      	cmp	r6, #22
  42804a:	b083      	sub	sp, #12
  42804c:	4605      	mov	r5, r0
  42804e:	f240 809e 	bls.w	42818e <_malloc_r+0x14e>
  428052:	f036 0607 	bics.w	r6, r6, #7
  428056:	f100 80bd 	bmi.w	4281d4 <_malloc_r+0x194>
  42805a:	42b1      	cmp	r1, r6
  42805c:	f200 80ba 	bhi.w	4281d4 <_malloc_r+0x194>
  428060:	f000 fbb6 	bl	4287d0 <__malloc_lock>
  428064:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  428068:	f0c0 8293 	bcc.w	428592 <_malloc_r+0x552>
  42806c:	0a73      	lsrs	r3, r6, #9
  42806e:	f000 80b8 	beq.w	4281e2 <_malloc_r+0x1a2>
  428072:	2b04      	cmp	r3, #4
  428074:	f200 8179 	bhi.w	42836a <_malloc_r+0x32a>
  428078:	09b3      	lsrs	r3, r6, #6
  42807a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  42807e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  428082:	00c3      	lsls	r3, r0, #3
  428084:	4fbf      	ldr	r7, [pc, #764]	; (428384 <_malloc_r+0x344>)
  428086:	443b      	add	r3, r7
  428088:	f1a3 0108 	sub.w	r1, r3, #8
  42808c:	685c      	ldr	r4, [r3, #4]
  42808e:	42a1      	cmp	r1, r4
  428090:	d106      	bne.n	4280a0 <_malloc_r+0x60>
  428092:	e00c      	b.n	4280ae <_malloc_r+0x6e>
  428094:	2a00      	cmp	r2, #0
  428096:	f280 80aa 	bge.w	4281ee <_malloc_r+0x1ae>
  42809a:	68e4      	ldr	r4, [r4, #12]
  42809c:	42a1      	cmp	r1, r4
  42809e:	d006      	beq.n	4280ae <_malloc_r+0x6e>
  4280a0:	6863      	ldr	r3, [r4, #4]
  4280a2:	f023 0303 	bic.w	r3, r3, #3
  4280a6:	1b9a      	subs	r2, r3, r6
  4280a8:	2a0f      	cmp	r2, #15
  4280aa:	ddf3      	ble.n	428094 <_malloc_r+0x54>
  4280ac:	4670      	mov	r0, lr
  4280ae:	693c      	ldr	r4, [r7, #16]
  4280b0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 428398 <_malloc_r+0x358>
  4280b4:	4574      	cmp	r4, lr
  4280b6:	f000 81ab 	beq.w	428410 <_malloc_r+0x3d0>
  4280ba:	6863      	ldr	r3, [r4, #4]
  4280bc:	f023 0303 	bic.w	r3, r3, #3
  4280c0:	1b9a      	subs	r2, r3, r6
  4280c2:	2a0f      	cmp	r2, #15
  4280c4:	f300 8190 	bgt.w	4283e8 <_malloc_r+0x3a8>
  4280c8:	2a00      	cmp	r2, #0
  4280ca:	f8c7 e014 	str.w	lr, [r7, #20]
  4280ce:	f8c7 e010 	str.w	lr, [r7, #16]
  4280d2:	f280 809d 	bge.w	428210 <_malloc_r+0x1d0>
  4280d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4280da:	f080 8161 	bcs.w	4283a0 <_malloc_r+0x360>
  4280de:	08db      	lsrs	r3, r3, #3
  4280e0:	f103 0c01 	add.w	ip, r3, #1
  4280e4:	1099      	asrs	r1, r3, #2
  4280e6:	687a      	ldr	r2, [r7, #4]
  4280e8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4280ec:	f8c4 8008 	str.w	r8, [r4, #8]
  4280f0:	2301      	movs	r3, #1
  4280f2:	408b      	lsls	r3, r1
  4280f4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4280f8:	4313      	orrs	r3, r2
  4280fa:	3908      	subs	r1, #8
  4280fc:	60e1      	str	r1, [r4, #12]
  4280fe:	607b      	str	r3, [r7, #4]
  428100:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  428104:	f8c8 400c 	str.w	r4, [r8, #12]
  428108:	1082      	asrs	r2, r0, #2
  42810a:	2401      	movs	r4, #1
  42810c:	4094      	lsls	r4, r2
  42810e:	429c      	cmp	r4, r3
  428110:	f200 808b 	bhi.w	42822a <_malloc_r+0x1ea>
  428114:	421c      	tst	r4, r3
  428116:	d106      	bne.n	428126 <_malloc_r+0xe6>
  428118:	f020 0003 	bic.w	r0, r0, #3
  42811c:	0064      	lsls	r4, r4, #1
  42811e:	421c      	tst	r4, r3
  428120:	f100 0004 	add.w	r0, r0, #4
  428124:	d0fa      	beq.n	42811c <_malloc_r+0xdc>
  428126:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  42812a:	46cc      	mov	ip, r9
  42812c:	4680      	mov	r8, r0
  42812e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  428132:	459c      	cmp	ip, r3
  428134:	d107      	bne.n	428146 <_malloc_r+0x106>
  428136:	e16d      	b.n	428414 <_malloc_r+0x3d4>
  428138:	2a00      	cmp	r2, #0
  42813a:	f280 817b 	bge.w	428434 <_malloc_r+0x3f4>
  42813e:	68db      	ldr	r3, [r3, #12]
  428140:	459c      	cmp	ip, r3
  428142:	f000 8167 	beq.w	428414 <_malloc_r+0x3d4>
  428146:	6859      	ldr	r1, [r3, #4]
  428148:	f021 0103 	bic.w	r1, r1, #3
  42814c:	1b8a      	subs	r2, r1, r6
  42814e:	2a0f      	cmp	r2, #15
  428150:	ddf2      	ble.n	428138 <_malloc_r+0xf8>
  428152:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  428156:	f8d3 8008 	ldr.w	r8, [r3, #8]
  42815a:	9300      	str	r3, [sp, #0]
  42815c:	199c      	adds	r4, r3, r6
  42815e:	4628      	mov	r0, r5
  428160:	f046 0601 	orr.w	r6, r6, #1
  428164:	f042 0501 	orr.w	r5, r2, #1
  428168:	605e      	str	r6, [r3, #4]
  42816a:	f8c8 c00c 	str.w	ip, [r8, #12]
  42816e:	f8cc 8008 	str.w	r8, [ip, #8]
  428172:	617c      	str	r4, [r7, #20]
  428174:	613c      	str	r4, [r7, #16]
  428176:	f8c4 e00c 	str.w	lr, [r4, #12]
  42817a:	f8c4 e008 	str.w	lr, [r4, #8]
  42817e:	6065      	str	r5, [r4, #4]
  428180:	505a      	str	r2, [r3, r1]
  428182:	f000 fb2b 	bl	4287dc <__malloc_unlock>
  428186:	9b00      	ldr	r3, [sp, #0]
  428188:	f103 0408 	add.w	r4, r3, #8
  42818c:	e01e      	b.n	4281cc <_malloc_r+0x18c>
  42818e:	2910      	cmp	r1, #16
  428190:	d820      	bhi.n	4281d4 <_malloc_r+0x194>
  428192:	f000 fb1d 	bl	4287d0 <__malloc_lock>
  428196:	2610      	movs	r6, #16
  428198:	2318      	movs	r3, #24
  42819a:	2002      	movs	r0, #2
  42819c:	4f79      	ldr	r7, [pc, #484]	; (428384 <_malloc_r+0x344>)
  42819e:	443b      	add	r3, r7
  4281a0:	f1a3 0208 	sub.w	r2, r3, #8
  4281a4:	685c      	ldr	r4, [r3, #4]
  4281a6:	4294      	cmp	r4, r2
  4281a8:	f000 813d 	beq.w	428426 <_malloc_r+0x3e6>
  4281ac:	6863      	ldr	r3, [r4, #4]
  4281ae:	68e1      	ldr	r1, [r4, #12]
  4281b0:	68a6      	ldr	r6, [r4, #8]
  4281b2:	f023 0303 	bic.w	r3, r3, #3
  4281b6:	4423      	add	r3, r4
  4281b8:	4628      	mov	r0, r5
  4281ba:	685a      	ldr	r2, [r3, #4]
  4281bc:	60f1      	str	r1, [r6, #12]
  4281be:	f042 0201 	orr.w	r2, r2, #1
  4281c2:	608e      	str	r6, [r1, #8]
  4281c4:	605a      	str	r2, [r3, #4]
  4281c6:	f000 fb09 	bl	4287dc <__malloc_unlock>
  4281ca:	3408      	adds	r4, #8
  4281cc:	4620      	mov	r0, r4
  4281ce:	b003      	add	sp, #12
  4281d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4281d4:	2400      	movs	r4, #0
  4281d6:	230c      	movs	r3, #12
  4281d8:	4620      	mov	r0, r4
  4281da:	602b      	str	r3, [r5, #0]
  4281dc:	b003      	add	sp, #12
  4281de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4281e2:	2040      	movs	r0, #64	; 0x40
  4281e4:	f44f 7300 	mov.w	r3, #512	; 0x200
  4281e8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4281ec:	e74a      	b.n	428084 <_malloc_r+0x44>
  4281ee:	4423      	add	r3, r4
  4281f0:	68e1      	ldr	r1, [r4, #12]
  4281f2:	685a      	ldr	r2, [r3, #4]
  4281f4:	68a6      	ldr	r6, [r4, #8]
  4281f6:	f042 0201 	orr.w	r2, r2, #1
  4281fa:	60f1      	str	r1, [r6, #12]
  4281fc:	4628      	mov	r0, r5
  4281fe:	608e      	str	r6, [r1, #8]
  428200:	605a      	str	r2, [r3, #4]
  428202:	f000 faeb 	bl	4287dc <__malloc_unlock>
  428206:	3408      	adds	r4, #8
  428208:	4620      	mov	r0, r4
  42820a:	b003      	add	sp, #12
  42820c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  428210:	4423      	add	r3, r4
  428212:	4628      	mov	r0, r5
  428214:	685a      	ldr	r2, [r3, #4]
  428216:	f042 0201 	orr.w	r2, r2, #1
  42821a:	605a      	str	r2, [r3, #4]
  42821c:	f000 fade 	bl	4287dc <__malloc_unlock>
  428220:	3408      	adds	r4, #8
  428222:	4620      	mov	r0, r4
  428224:	b003      	add	sp, #12
  428226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42822a:	68bc      	ldr	r4, [r7, #8]
  42822c:	6863      	ldr	r3, [r4, #4]
  42822e:	f023 0803 	bic.w	r8, r3, #3
  428232:	45b0      	cmp	r8, r6
  428234:	d304      	bcc.n	428240 <_malloc_r+0x200>
  428236:	eba8 0306 	sub.w	r3, r8, r6
  42823a:	2b0f      	cmp	r3, #15
  42823c:	f300 8085 	bgt.w	42834a <_malloc_r+0x30a>
  428240:	f8df 9158 	ldr.w	r9, [pc, #344]	; 42839c <_malloc_r+0x35c>
  428244:	4b50      	ldr	r3, [pc, #320]	; (428388 <_malloc_r+0x348>)
  428246:	f8d9 2000 	ldr.w	r2, [r9]
  42824a:	681b      	ldr	r3, [r3, #0]
  42824c:	3201      	adds	r2, #1
  42824e:	4433      	add	r3, r6
  428250:	eb04 0a08 	add.w	sl, r4, r8
  428254:	f000 8155 	beq.w	428502 <_malloc_r+0x4c2>
  428258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  42825c:	330f      	adds	r3, #15
  42825e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  428262:	f02b 0b0f 	bic.w	fp, fp, #15
  428266:	4659      	mov	r1, fp
  428268:	4628      	mov	r0, r5
  42826a:	f000 fadd 	bl	428828 <_sbrk_r>
  42826e:	1c41      	adds	r1, r0, #1
  428270:	4602      	mov	r2, r0
  428272:	f000 80fc 	beq.w	42846e <_malloc_r+0x42e>
  428276:	4582      	cmp	sl, r0
  428278:	f200 80f7 	bhi.w	42846a <_malloc_r+0x42a>
  42827c:	4b43      	ldr	r3, [pc, #268]	; (42838c <_malloc_r+0x34c>)
  42827e:	6819      	ldr	r1, [r3, #0]
  428280:	4459      	add	r1, fp
  428282:	6019      	str	r1, [r3, #0]
  428284:	f000 814d 	beq.w	428522 <_malloc_r+0x4e2>
  428288:	f8d9 0000 	ldr.w	r0, [r9]
  42828c:	3001      	adds	r0, #1
  42828e:	bf1b      	ittet	ne
  428290:	eba2 0a0a 	subne.w	sl, r2, sl
  428294:	4451      	addne	r1, sl
  428296:	f8c9 2000 	streq.w	r2, [r9]
  42829a:	6019      	strne	r1, [r3, #0]
  42829c:	f012 0107 	ands.w	r1, r2, #7
  4282a0:	f000 8115 	beq.w	4284ce <_malloc_r+0x48e>
  4282a4:	f1c1 0008 	rsb	r0, r1, #8
  4282a8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4282ac:	4402      	add	r2, r0
  4282ae:	3108      	adds	r1, #8
  4282b0:	eb02 090b 	add.w	r9, r2, fp
  4282b4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4282b8:	eba1 0909 	sub.w	r9, r1, r9
  4282bc:	4649      	mov	r1, r9
  4282be:	4628      	mov	r0, r5
  4282c0:	9301      	str	r3, [sp, #4]
  4282c2:	9200      	str	r2, [sp, #0]
  4282c4:	f000 fab0 	bl	428828 <_sbrk_r>
  4282c8:	1c43      	adds	r3, r0, #1
  4282ca:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4282ce:	f000 8143 	beq.w	428558 <_malloc_r+0x518>
  4282d2:	1a80      	subs	r0, r0, r2
  4282d4:	4448      	add	r0, r9
  4282d6:	f040 0001 	orr.w	r0, r0, #1
  4282da:	6819      	ldr	r1, [r3, #0]
  4282dc:	60ba      	str	r2, [r7, #8]
  4282de:	4449      	add	r1, r9
  4282e0:	42bc      	cmp	r4, r7
  4282e2:	6050      	str	r0, [r2, #4]
  4282e4:	6019      	str	r1, [r3, #0]
  4282e6:	d017      	beq.n	428318 <_malloc_r+0x2d8>
  4282e8:	f1b8 0f0f 	cmp.w	r8, #15
  4282ec:	f240 80fb 	bls.w	4284e6 <_malloc_r+0x4a6>
  4282f0:	6860      	ldr	r0, [r4, #4]
  4282f2:	f1a8 020c 	sub.w	r2, r8, #12
  4282f6:	f022 0207 	bic.w	r2, r2, #7
  4282fa:	eb04 0e02 	add.w	lr, r4, r2
  4282fe:	f000 0001 	and.w	r0, r0, #1
  428302:	f04f 0c05 	mov.w	ip, #5
  428306:	4310      	orrs	r0, r2
  428308:	2a0f      	cmp	r2, #15
  42830a:	6060      	str	r0, [r4, #4]
  42830c:	f8ce c004 	str.w	ip, [lr, #4]
  428310:	f8ce c008 	str.w	ip, [lr, #8]
  428314:	f200 8117 	bhi.w	428546 <_malloc_r+0x506>
  428318:	4b1d      	ldr	r3, [pc, #116]	; (428390 <_malloc_r+0x350>)
  42831a:	68bc      	ldr	r4, [r7, #8]
  42831c:	681a      	ldr	r2, [r3, #0]
  42831e:	4291      	cmp	r1, r2
  428320:	bf88      	it	hi
  428322:	6019      	strhi	r1, [r3, #0]
  428324:	4b1b      	ldr	r3, [pc, #108]	; (428394 <_malloc_r+0x354>)
  428326:	681a      	ldr	r2, [r3, #0]
  428328:	4291      	cmp	r1, r2
  42832a:	6862      	ldr	r2, [r4, #4]
  42832c:	bf88      	it	hi
  42832e:	6019      	strhi	r1, [r3, #0]
  428330:	f022 0203 	bic.w	r2, r2, #3
  428334:	4296      	cmp	r6, r2
  428336:	eba2 0306 	sub.w	r3, r2, r6
  42833a:	d801      	bhi.n	428340 <_malloc_r+0x300>
  42833c:	2b0f      	cmp	r3, #15
  42833e:	dc04      	bgt.n	42834a <_malloc_r+0x30a>
  428340:	4628      	mov	r0, r5
  428342:	f000 fa4b 	bl	4287dc <__malloc_unlock>
  428346:	2400      	movs	r4, #0
  428348:	e740      	b.n	4281cc <_malloc_r+0x18c>
  42834a:	19a2      	adds	r2, r4, r6
  42834c:	f043 0301 	orr.w	r3, r3, #1
  428350:	f046 0601 	orr.w	r6, r6, #1
  428354:	6066      	str	r6, [r4, #4]
  428356:	4628      	mov	r0, r5
  428358:	60ba      	str	r2, [r7, #8]
  42835a:	6053      	str	r3, [r2, #4]
  42835c:	f000 fa3e 	bl	4287dc <__malloc_unlock>
  428360:	3408      	adds	r4, #8
  428362:	4620      	mov	r0, r4
  428364:	b003      	add	sp, #12
  428366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42836a:	2b14      	cmp	r3, #20
  42836c:	d971      	bls.n	428452 <_malloc_r+0x412>
  42836e:	2b54      	cmp	r3, #84	; 0x54
  428370:	f200 80a3 	bhi.w	4284ba <_malloc_r+0x47a>
  428374:	0b33      	lsrs	r3, r6, #12
  428376:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  42837a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  42837e:	00c3      	lsls	r3, r0, #3
  428380:	e680      	b.n	428084 <_malloc_r+0x44>
  428382:	bf00      	nop
  428384:	20400500 	.word	0x20400500
  428388:	2043a17c 	.word	0x2043a17c
  42838c:	2043a14c 	.word	0x2043a14c
  428390:	2043a174 	.word	0x2043a174
  428394:	2043a178 	.word	0x2043a178
  428398:	20400508 	.word	0x20400508
  42839c:	20400908 	.word	0x20400908
  4283a0:	0a5a      	lsrs	r2, r3, #9
  4283a2:	2a04      	cmp	r2, #4
  4283a4:	d95b      	bls.n	42845e <_malloc_r+0x41e>
  4283a6:	2a14      	cmp	r2, #20
  4283a8:	f200 80ae 	bhi.w	428508 <_malloc_r+0x4c8>
  4283ac:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4283b0:	00c9      	lsls	r1, r1, #3
  4283b2:	325b      	adds	r2, #91	; 0x5b
  4283b4:	eb07 0c01 	add.w	ip, r7, r1
  4283b8:	5879      	ldr	r1, [r7, r1]
  4283ba:	f1ac 0c08 	sub.w	ip, ip, #8
  4283be:	458c      	cmp	ip, r1
  4283c0:	f000 8088 	beq.w	4284d4 <_malloc_r+0x494>
  4283c4:	684a      	ldr	r2, [r1, #4]
  4283c6:	f022 0203 	bic.w	r2, r2, #3
  4283ca:	4293      	cmp	r3, r2
  4283cc:	d273      	bcs.n	4284b6 <_malloc_r+0x476>
  4283ce:	6889      	ldr	r1, [r1, #8]
  4283d0:	458c      	cmp	ip, r1
  4283d2:	d1f7      	bne.n	4283c4 <_malloc_r+0x384>
  4283d4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4283d8:	687b      	ldr	r3, [r7, #4]
  4283da:	60e2      	str	r2, [r4, #12]
  4283dc:	f8c4 c008 	str.w	ip, [r4, #8]
  4283e0:	6094      	str	r4, [r2, #8]
  4283e2:	f8cc 400c 	str.w	r4, [ip, #12]
  4283e6:	e68f      	b.n	428108 <_malloc_r+0xc8>
  4283e8:	19a1      	adds	r1, r4, r6
  4283ea:	f046 0c01 	orr.w	ip, r6, #1
  4283ee:	f042 0601 	orr.w	r6, r2, #1
  4283f2:	f8c4 c004 	str.w	ip, [r4, #4]
  4283f6:	4628      	mov	r0, r5
  4283f8:	6179      	str	r1, [r7, #20]
  4283fa:	6139      	str	r1, [r7, #16]
  4283fc:	f8c1 e00c 	str.w	lr, [r1, #12]
  428400:	f8c1 e008 	str.w	lr, [r1, #8]
  428404:	604e      	str	r6, [r1, #4]
  428406:	50e2      	str	r2, [r4, r3]
  428408:	f000 f9e8 	bl	4287dc <__malloc_unlock>
  42840c:	3408      	adds	r4, #8
  42840e:	e6dd      	b.n	4281cc <_malloc_r+0x18c>
  428410:	687b      	ldr	r3, [r7, #4]
  428412:	e679      	b.n	428108 <_malloc_r+0xc8>
  428414:	f108 0801 	add.w	r8, r8, #1
  428418:	f018 0f03 	tst.w	r8, #3
  42841c:	f10c 0c08 	add.w	ip, ip, #8
  428420:	f47f ae85 	bne.w	42812e <_malloc_r+0xee>
  428424:	e02d      	b.n	428482 <_malloc_r+0x442>
  428426:	68dc      	ldr	r4, [r3, #12]
  428428:	42a3      	cmp	r3, r4
  42842a:	bf08      	it	eq
  42842c:	3002      	addeq	r0, #2
  42842e:	f43f ae3e 	beq.w	4280ae <_malloc_r+0x6e>
  428432:	e6bb      	b.n	4281ac <_malloc_r+0x16c>
  428434:	4419      	add	r1, r3
  428436:	461c      	mov	r4, r3
  428438:	684a      	ldr	r2, [r1, #4]
  42843a:	68db      	ldr	r3, [r3, #12]
  42843c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  428440:	f042 0201 	orr.w	r2, r2, #1
  428444:	604a      	str	r2, [r1, #4]
  428446:	4628      	mov	r0, r5
  428448:	60f3      	str	r3, [r6, #12]
  42844a:	609e      	str	r6, [r3, #8]
  42844c:	f000 f9c6 	bl	4287dc <__malloc_unlock>
  428450:	e6bc      	b.n	4281cc <_malloc_r+0x18c>
  428452:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  428456:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  42845a:	00c3      	lsls	r3, r0, #3
  42845c:	e612      	b.n	428084 <_malloc_r+0x44>
  42845e:	099a      	lsrs	r2, r3, #6
  428460:	f102 0139 	add.w	r1, r2, #57	; 0x39
  428464:	00c9      	lsls	r1, r1, #3
  428466:	3238      	adds	r2, #56	; 0x38
  428468:	e7a4      	b.n	4283b4 <_malloc_r+0x374>
  42846a:	42bc      	cmp	r4, r7
  42846c:	d054      	beq.n	428518 <_malloc_r+0x4d8>
  42846e:	68bc      	ldr	r4, [r7, #8]
  428470:	6862      	ldr	r2, [r4, #4]
  428472:	f022 0203 	bic.w	r2, r2, #3
  428476:	e75d      	b.n	428334 <_malloc_r+0x2f4>
  428478:	f859 3908 	ldr.w	r3, [r9], #-8
  42847c:	4599      	cmp	r9, r3
  42847e:	f040 8086 	bne.w	42858e <_malloc_r+0x54e>
  428482:	f010 0f03 	tst.w	r0, #3
  428486:	f100 30ff 	add.w	r0, r0, #4294967295
  42848a:	d1f5      	bne.n	428478 <_malloc_r+0x438>
  42848c:	687b      	ldr	r3, [r7, #4]
  42848e:	ea23 0304 	bic.w	r3, r3, r4
  428492:	607b      	str	r3, [r7, #4]
  428494:	0064      	lsls	r4, r4, #1
  428496:	429c      	cmp	r4, r3
  428498:	f63f aec7 	bhi.w	42822a <_malloc_r+0x1ea>
  42849c:	2c00      	cmp	r4, #0
  42849e:	f43f aec4 	beq.w	42822a <_malloc_r+0x1ea>
  4284a2:	421c      	tst	r4, r3
  4284a4:	4640      	mov	r0, r8
  4284a6:	f47f ae3e 	bne.w	428126 <_malloc_r+0xe6>
  4284aa:	0064      	lsls	r4, r4, #1
  4284ac:	421c      	tst	r4, r3
  4284ae:	f100 0004 	add.w	r0, r0, #4
  4284b2:	d0fa      	beq.n	4284aa <_malloc_r+0x46a>
  4284b4:	e637      	b.n	428126 <_malloc_r+0xe6>
  4284b6:	468c      	mov	ip, r1
  4284b8:	e78c      	b.n	4283d4 <_malloc_r+0x394>
  4284ba:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4284be:	d815      	bhi.n	4284ec <_malloc_r+0x4ac>
  4284c0:	0bf3      	lsrs	r3, r6, #15
  4284c2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4284c6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4284ca:	00c3      	lsls	r3, r0, #3
  4284cc:	e5da      	b.n	428084 <_malloc_r+0x44>
  4284ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4284d2:	e6ed      	b.n	4282b0 <_malloc_r+0x270>
  4284d4:	687b      	ldr	r3, [r7, #4]
  4284d6:	1092      	asrs	r2, r2, #2
  4284d8:	2101      	movs	r1, #1
  4284da:	fa01 f202 	lsl.w	r2, r1, r2
  4284de:	4313      	orrs	r3, r2
  4284e0:	607b      	str	r3, [r7, #4]
  4284e2:	4662      	mov	r2, ip
  4284e4:	e779      	b.n	4283da <_malloc_r+0x39a>
  4284e6:	2301      	movs	r3, #1
  4284e8:	6053      	str	r3, [r2, #4]
  4284ea:	e729      	b.n	428340 <_malloc_r+0x300>
  4284ec:	f240 5254 	movw	r2, #1364	; 0x554
  4284f0:	4293      	cmp	r3, r2
  4284f2:	d822      	bhi.n	42853a <_malloc_r+0x4fa>
  4284f4:	0cb3      	lsrs	r3, r6, #18
  4284f6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4284fa:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4284fe:	00c3      	lsls	r3, r0, #3
  428500:	e5c0      	b.n	428084 <_malloc_r+0x44>
  428502:	f103 0b10 	add.w	fp, r3, #16
  428506:	e6ae      	b.n	428266 <_malloc_r+0x226>
  428508:	2a54      	cmp	r2, #84	; 0x54
  42850a:	d829      	bhi.n	428560 <_malloc_r+0x520>
  42850c:	0b1a      	lsrs	r2, r3, #12
  42850e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  428512:	00c9      	lsls	r1, r1, #3
  428514:	326e      	adds	r2, #110	; 0x6e
  428516:	e74d      	b.n	4283b4 <_malloc_r+0x374>
  428518:	4b20      	ldr	r3, [pc, #128]	; (42859c <_malloc_r+0x55c>)
  42851a:	6819      	ldr	r1, [r3, #0]
  42851c:	4459      	add	r1, fp
  42851e:	6019      	str	r1, [r3, #0]
  428520:	e6b2      	b.n	428288 <_malloc_r+0x248>
  428522:	f3ca 000b 	ubfx	r0, sl, #0, #12
  428526:	2800      	cmp	r0, #0
  428528:	f47f aeae 	bne.w	428288 <_malloc_r+0x248>
  42852c:	eb08 030b 	add.w	r3, r8, fp
  428530:	68ba      	ldr	r2, [r7, #8]
  428532:	f043 0301 	orr.w	r3, r3, #1
  428536:	6053      	str	r3, [r2, #4]
  428538:	e6ee      	b.n	428318 <_malloc_r+0x2d8>
  42853a:	207f      	movs	r0, #127	; 0x7f
  42853c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  428540:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  428544:	e59e      	b.n	428084 <_malloc_r+0x44>
  428546:	f104 0108 	add.w	r1, r4, #8
  42854a:	4628      	mov	r0, r5
  42854c:	9300      	str	r3, [sp, #0]
  42854e:	f001 fe33 	bl	42a1b8 <_free_r>
  428552:	9b00      	ldr	r3, [sp, #0]
  428554:	6819      	ldr	r1, [r3, #0]
  428556:	e6df      	b.n	428318 <_malloc_r+0x2d8>
  428558:	2001      	movs	r0, #1
  42855a:	f04f 0900 	mov.w	r9, #0
  42855e:	e6bc      	b.n	4282da <_malloc_r+0x29a>
  428560:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  428564:	d805      	bhi.n	428572 <_malloc_r+0x532>
  428566:	0bda      	lsrs	r2, r3, #15
  428568:	f102 0178 	add.w	r1, r2, #120	; 0x78
  42856c:	00c9      	lsls	r1, r1, #3
  42856e:	3277      	adds	r2, #119	; 0x77
  428570:	e720      	b.n	4283b4 <_malloc_r+0x374>
  428572:	f240 5154 	movw	r1, #1364	; 0x554
  428576:	428a      	cmp	r2, r1
  428578:	d805      	bhi.n	428586 <_malloc_r+0x546>
  42857a:	0c9a      	lsrs	r2, r3, #18
  42857c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  428580:	00c9      	lsls	r1, r1, #3
  428582:	327c      	adds	r2, #124	; 0x7c
  428584:	e716      	b.n	4283b4 <_malloc_r+0x374>
  428586:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  42858a:	227e      	movs	r2, #126	; 0x7e
  42858c:	e712      	b.n	4283b4 <_malloc_r+0x374>
  42858e:	687b      	ldr	r3, [r7, #4]
  428590:	e780      	b.n	428494 <_malloc_r+0x454>
  428592:	08f0      	lsrs	r0, r6, #3
  428594:	f106 0308 	add.w	r3, r6, #8
  428598:	e600      	b.n	42819c <_malloc_r+0x15c>
  42859a:	bf00      	nop
  42859c:	2043a14c 	.word	0x2043a14c

004285a0 <memcmp>:
  4285a0:	2a03      	cmp	r2, #3
  4285a2:	b470      	push	{r4, r5, r6}
  4285a4:	d922      	bls.n	4285ec <memcmp+0x4c>
  4285a6:	ea40 0301 	orr.w	r3, r0, r1
  4285aa:	079b      	lsls	r3, r3, #30
  4285ac:	d011      	beq.n	4285d2 <memcmp+0x32>
  4285ae:	7803      	ldrb	r3, [r0, #0]
  4285b0:	780c      	ldrb	r4, [r1, #0]
  4285b2:	42a3      	cmp	r3, r4
  4285b4:	d11d      	bne.n	4285f2 <memcmp+0x52>
  4285b6:	440a      	add	r2, r1
  4285b8:	3101      	adds	r1, #1
  4285ba:	e005      	b.n	4285c8 <memcmp+0x28>
  4285bc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4285c0:	f811 4b01 	ldrb.w	r4, [r1], #1
  4285c4:	42a3      	cmp	r3, r4
  4285c6:	d114      	bne.n	4285f2 <memcmp+0x52>
  4285c8:	4291      	cmp	r1, r2
  4285ca:	d1f7      	bne.n	4285bc <memcmp+0x1c>
  4285cc:	2000      	movs	r0, #0
  4285ce:	bc70      	pop	{r4, r5, r6}
  4285d0:	4770      	bx	lr
  4285d2:	680d      	ldr	r5, [r1, #0]
  4285d4:	6806      	ldr	r6, [r0, #0]
  4285d6:	42ae      	cmp	r6, r5
  4285d8:	460c      	mov	r4, r1
  4285da:	4603      	mov	r3, r0
  4285dc:	f101 0104 	add.w	r1, r1, #4
  4285e0:	f100 0004 	add.w	r0, r0, #4
  4285e4:	d108      	bne.n	4285f8 <memcmp+0x58>
  4285e6:	3a04      	subs	r2, #4
  4285e8:	2a03      	cmp	r2, #3
  4285ea:	d8f2      	bhi.n	4285d2 <memcmp+0x32>
  4285ec:	2a00      	cmp	r2, #0
  4285ee:	d1de      	bne.n	4285ae <memcmp+0xe>
  4285f0:	e7ec      	b.n	4285cc <memcmp+0x2c>
  4285f2:	1b18      	subs	r0, r3, r4
  4285f4:	bc70      	pop	{r4, r5, r6}
  4285f6:	4770      	bx	lr
  4285f8:	4621      	mov	r1, r4
  4285fa:	4618      	mov	r0, r3
  4285fc:	e7d7      	b.n	4285ae <memcmp+0xe>
  4285fe:	bf00      	nop

00428600 <memcpy>:
  428600:	4684      	mov	ip, r0
  428602:	ea41 0300 	orr.w	r3, r1, r0
  428606:	f013 0303 	ands.w	r3, r3, #3
  42860a:	d16d      	bne.n	4286e8 <memcpy+0xe8>
  42860c:	3a40      	subs	r2, #64	; 0x40
  42860e:	d341      	bcc.n	428694 <memcpy+0x94>
  428610:	f851 3b04 	ldr.w	r3, [r1], #4
  428614:	f840 3b04 	str.w	r3, [r0], #4
  428618:	f851 3b04 	ldr.w	r3, [r1], #4
  42861c:	f840 3b04 	str.w	r3, [r0], #4
  428620:	f851 3b04 	ldr.w	r3, [r1], #4
  428624:	f840 3b04 	str.w	r3, [r0], #4
  428628:	f851 3b04 	ldr.w	r3, [r1], #4
  42862c:	f840 3b04 	str.w	r3, [r0], #4
  428630:	f851 3b04 	ldr.w	r3, [r1], #4
  428634:	f840 3b04 	str.w	r3, [r0], #4
  428638:	f851 3b04 	ldr.w	r3, [r1], #4
  42863c:	f840 3b04 	str.w	r3, [r0], #4
  428640:	f851 3b04 	ldr.w	r3, [r1], #4
  428644:	f840 3b04 	str.w	r3, [r0], #4
  428648:	f851 3b04 	ldr.w	r3, [r1], #4
  42864c:	f840 3b04 	str.w	r3, [r0], #4
  428650:	f851 3b04 	ldr.w	r3, [r1], #4
  428654:	f840 3b04 	str.w	r3, [r0], #4
  428658:	f851 3b04 	ldr.w	r3, [r1], #4
  42865c:	f840 3b04 	str.w	r3, [r0], #4
  428660:	f851 3b04 	ldr.w	r3, [r1], #4
  428664:	f840 3b04 	str.w	r3, [r0], #4
  428668:	f851 3b04 	ldr.w	r3, [r1], #4
  42866c:	f840 3b04 	str.w	r3, [r0], #4
  428670:	f851 3b04 	ldr.w	r3, [r1], #4
  428674:	f840 3b04 	str.w	r3, [r0], #4
  428678:	f851 3b04 	ldr.w	r3, [r1], #4
  42867c:	f840 3b04 	str.w	r3, [r0], #4
  428680:	f851 3b04 	ldr.w	r3, [r1], #4
  428684:	f840 3b04 	str.w	r3, [r0], #4
  428688:	f851 3b04 	ldr.w	r3, [r1], #4
  42868c:	f840 3b04 	str.w	r3, [r0], #4
  428690:	3a40      	subs	r2, #64	; 0x40
  428692:	d2bd      	bcs.n	428610 <memcpy+0x10>
  428694:	3230      	adds	r2, #48	; 0x30
  428696:	d311      	bcc.n	4286bc <memcpy+0xbc>
  428698:	f851 3b04 	ldr.w	r3, [r1], #4
  42869c:	f840 3b04 	str.w	r3, [r0], #4
  4286a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4286a4:	f840 3b04 	str.w	r3, [r0], #4
  4286a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4286ac:	f840 3b04 	str.w	r3, [r0], #4
  4286b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4286b4:	f840 3b04 	str.w	r3, [r0], #4
  4286b8:	3a10      	subs	r2, #16
  4286ba:	d2ed      	bcs.n	428698 <memcpy+0x98>
  4286bc:	320c      	adds	r2, #12
  4286be:	d305      	bcc.n	4286cc <memcpy+0xcc>
  4286c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4286c4:	f840 3b04 	str.w	r3, [r0], #4
  4286c8:	3a04      	subs	r2, #4
  4286ca:	d2f9      	bcs.n	4286c0 <memcpy+0xc0>
  4286cc:	3204      	adds	r2, #4
  4286ce:	d008      	beq.n	4286e2 <memcpy+0xe2>
  4286d0:	07d2      	lsls	r2, r2, #31
  4286d2:	bf1c      	itt	ne
  4286d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4286d8:	f800 3b01 	strbne.w	r3, [r0], #1
  4286dc:	d301      	bcc.n	4286e2 <memcpy+0xe2>
  4286de:	880b      	ldrh	r3, [r1, #0]
  4286e0:	8003      	strh	r3, [r0, #0]
  4286e2:	4660      	mov	r0, ip
  4286e4:	4770      	bx	lr
  4286e6:	bf00      	nop
  4286e8:	2a08      	cmp	r2, #8
  4286ea:	d313      	bcc.n	428714 <memcpy+0x114>
  4286ec:	078b      	lsls	r3, r1, #30
  4286ee:	d08d      	beq.n	42860c <memcpy+0xc>
  4286f0:	f010 0303 	ands.w	r3, r0, #3
  4286f4:	d08a      	beq.n	42860c <memcpy+0xc>
  4286f6:	f1c3 0304 	rsb	r3, r3, #4
  4286fa:	1ad2      	subs	r2, r2, r3
  4286fc:	07db      	lsls	r3, r3, #31
  4286fe:	bf1c      	itt	ne
  428700:	f811 3b01 	ldrbne.w	r3, [r1], #1
  428704:	f800 3b01 	strbne.w	r3, [r0], #1
  428708:	d380      	bcc.n	42860c <memcpy+0xc>
  42870a:	f831 3b02 	ldrh.w	r3, [r1], #2
  42870e:	f820 3b02 	strh.w	r3, [r0], #2
  428712:	e77b      	b.n	42860c <memcpy+0xc>
  428714:	3a04      	subs	r2, #4
  428716:	d3d9      	bcc.n	4286cc <memcpy+0xcc>
  428718:	3a01      	subs	r2, #1
  42871a:	f811 3b01 	ldrb.w	r3, [r1], #1
  42871e:	f800 3b01 	strb.w	r3, [r0], #1
  428722:	d2f9      	bcs.n	428718 <memcpy+0x118>
  428724:	780b      	ldrb	r3, [r1, #0]
  428726:	7003      	strb	r3, [r0, #0]
  428728:	784b      	ldrb	r3, [r1, #1]
  42872a:	7043      	strb	r3, [r0, #1]
  42872c:	788b      	ldrb	r3, [r1, #2]
  42872e:	7083      	strb	r3, [r0, #2]
  428730:	4660      	mov	r0, ip
  428732:	4770      	bx	lr

00428734 <memset>:
  428734:	b470      	push	{r4, r5, r6}
  428736:	0786      	lsls	r6, r0, #30
  428738:	d046      	beq.n	4287c8 <memset+0x94>
  42873a:	1e54      	subs	r4, r2, #1
  42873c:	2a00      	cmp	r2, #0
  42873e:	d041      	beq.n	4287c4 <memset+0x90>
  428740:	b2ca      	uxtb	r2, r1
  428742:	4603      	mov	r3, r0
  428744:	e002      	b.n	42874c <memset+0x18>
  428746:	f114 34ff 	adds.w	r4, r4, #4294967295
  42874a:	d33b      	bcc.n	4287c4 <memset+0x90>
  42874c:	f803 2b01 	strb.w	r2, [r3], #1
  428750:	079d      	lsls	r5, r3, #30
  428752:	d1f8      	bne.n	428746 <memset+0x12>
  428754:	2c03      	cmp	r4, #3
  428756:	d92e      	bls.n	4287b6 <memset+0x82>
  428758:	b2cd      	uxtb	r5, r1
  42875a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  42875e:	2c0f      	cmp	r4, #15
  428760:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  428764:	d919      	bls.n	42879a <memset+0x66>
  428766:	f103 0210 	add.w	r2, r3, #16
  42876a:	4626      	mov	r6, r4
  42876c:	3e10      	subs	r6, #16
  42876e:	2e0f      	cmp	r6, #15
  428770:	f842 5c10 	str.w	r5, [r2, #-16]
  428774:	f842 5c0c 	str.w	r5, [r2, #-12]
  428778:	f842 5c08 	str.w	r5, [r2, #-8]
  42877c:	f842 5c04 	str.w	r5, [r2, #-4]
  428780:	f102 0210 	add.w	r2, r2, #16
  428784:	d8f2      	bhi.n	42876c <memset+0x38>
  428786:	f1a4 0210 	sub.w	r2, r4, #16
  42878a:	f022 020f 	bic.w	r2, r2, #15
  42878e:	f004 040f 	and.w	r4, r4, #15
  428792:	3210      	adds	r2, #16
  428794:	2c03      	cmp	r4, #3
  428796:	4413      	add	r3, r2
  428798:	d90d      	bls.n	4287b6 <memset+0x82>
  42879a:	461e      	mov	r6, r3
  42879c:	4622      	mov	r2, r4
  42879e:	3a04      	subs	r2, #4
  4287a0:	2a03      	cmp	r2, #3
  4287a2:	f846 5b04 	str.w	r5, [r6], #4
  4287a6:	d8fa      	bhi.n	42879e <memset+0x6a>
  4287a8:	1f22      	subs	r2, r4, #4
  4287aa:	f022 0203 	bic.w	r2, r2, #3
  4287ae:	3204      	adds	r2, #4
  4287b0:	4413      	add	r3, r2
  4287b2:	f004 0403 	and.w	r4, r4, #3
  4287b6:	b12c      	cbz	r4, 4287c4 <memset+0x90>
  4287b8:	b2c9      	uxtb	r1, r1
  4287ba:	441c      	add	r4, r3
  4287bc:	f803 1b01 	strb.w	r1, [r3], #1
  4287c0:	429c      	cmp	r4, r3
  4287c2:	d1fb      	bne.n	4287bc <memset+0x88>
  4287c4:	bc70      	pop	{r4, r5, r6}
  4287c6:	4770      	bx	lr
  4287c8:	4614      	mov	r4, r2
  4287ca:	4603      	mov	r3, r0
  4287cc:	e7c2      	b.n	428754 <memset+0x20>
  4287ce:	bf00      	nop

004287d0 <__malloc_lock>:
  4287d0:	4801      	ldr	r0, [pc, #4]	; (4287d8 <__malloc_lock+0x8>)
  4287d2:	f001 bf8b 	b.w	42a6ec <__retarget_lock_acquire_recursive>
  4287d6:	bf00      	nop
  4287d8:	2043ac00 	.word	0x2043ac00

004287dc <__malloc_unlock>:
  4287dc:	4801      	ldr	r0, [pc, #4]	; (4287e4 <__malloc_unlock+0x8>)
  4287de:	f001 bf87 	b.w	42a6f0 <__retarget_lock_release_recursive>
  4287e2:	bf00      	nop
  4287e4:	2043ac00 	.word	0x2043ac00

004287e8 <rand>:
  4287e8:	b410      	push	{r4}
  4287ea:	4b0c      	ldr	r3, [pc, #48]	; (42881c <rand+0x34>)
  4287ec:	480c      	ldr	r0, [pc, #48]	; (428820 <rand+0x38>)
  4287ee:	6819      	ldr	r1, [r3, #0]
  4287f0:	4c0c      	ldr	r4, [pc, #48]	; (428824 <rand+0x3c>)
  4287f2:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
  4287f6:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
  4287fa:	fb00 f002 	mul.w	r0, r0, r2
  4287fe:	fb04 0003 	mla	r0, r4, r3, r0
  428802:	fba2 2304 	umull	r2, r3, r2, r4
  428806:	4403      	add	r3, r0
  428808:	3201      	adds	r2, #1
  42880a:	f143 0300 	adc.w	r3, r3, #0
  42880e:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
  428812:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
  428816:	bc10      	pop	{r4}
  428818:	4770      	bx	lr
  42881a:	bf00      	nop
  42881c:	204000d4 	.word	0x204000d4
  428820:	5851f42d 	.word	0x5851f42d
  428824:	4c957f2d 	.word	0x4c957f2d

00428828 <_sbrk_r>:
  428828:	b538      	push	{r3, r4, r5, lr}
  42882a:	4c07      	ldr	r4, [pc, #28]	; (428848 <_sbrk_r+0x20>)
  42882c:	2300      	movs	r3, #0
  42882e:	4605      	mov	r5, r0
  428830:	4608      	mov	r0, r1
  428832:	6023      	str	r3, [r4, #0]
  428834:	f7fd f964 	bl	425b00 <_sbrk>
  428838:	1c43      	adds	r3, r0, #1
  42883a:	d000      	beq.n	42883e <_sbrk_r+0x16>
  42883c:	bd38      	pop	{r3, r4, r5, pc}
  42883e:	6823      	ldr	r3, [r4, #0]
  428840:	2b00      	cmp	r3, #0
  428842:	d0fb      	beq.n	42883c <_sbrk_r+0x14>
  428844:	602b      	str	r3, [r5, #0]
  428846:	bd38      	pop	{r3, r4, r5, pc}
  428848:	2043ac14 	.word	0x2043ac14

0042884c <setbuf>:
  42884c:	2900      	cmp	r1, #0
  42884e:	bf0c      	ite	eq
  428850:	2202      	moveq	r2, #2
  428852:	2200      	movne	r2, #0
  428854:	f44f 6380 	mov.w	r3, #1024	; 0x400
  428858:	f000 b800 	b.w	42885c <setvbuf>

0042885c <setvbuf>:
  42885c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  428860:	4c61      	ldr	r4, [pc, #388]	; (4289e8 <setvbuf+0x18c>)
  428862:	6825      	ldr	r5, [r4, #0]
  428864:	b083      	sub	sp, #12
  428866:	4604      	mov	r4, r0
  428868:	460f      	mov	r7, r1
  42886a:	4690      	mov	r8, r2
  42886c:	461e      	mov	r6, r3
  42886e:	b115      	cbz	r5, 428876 <setvbuf+0x1a>
  428870:	6bab      	ldr	r3, [r5, #56]	; 0x38
  428872:	2b00      	cmp	r3, #0
  428874:	d064      	beq.n	428940 <setvbuf+0xe4>
  428876:	f1b8 0f02 	cmp.w	r8, #2
  42887a:	d006      	beq.n	42888a <setvbuf+0x2e>
  42887c:	f1b8 0f01 	cmp.w	r8, #1
  428880:	f200 809f 	bhi.w	4289c2 <setvbuf+0x166>
  428884:	2e00      	cmp	r6, #0
  428886:	f2c0 809c 	blt.w	4289c2 <setvbuf+0x166>
  42888a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  42888c:	07d8      	lsls	r0, r3, #31
  42888e:	d534      	bpl.n	4288fa <setvbuf+0x9e>
  428890:	4621      	mov	r1, r4
  428892:	4628      	mov	r0, r5
  428894:	f001 fb12 	bl	429ebc <_fflush_r>
  428898:	6b21      	ldr	r1, [r4, #48]	; 0x30
  42889a:	b141      	cbz	r1, 4288ae <setvbuf+0x52>
  42889c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4288a0:	4299      	cmp	r1, r3
  4288a2:	d002      	beq.n	4288aa <setvbuf+0x4e>
  4288a4:	4628      	mov	r0, r5
  4288a6:	f001 fc87 	bl	42a1b8 <_free_r>
  4288aa:	2300      	movs	r3, #0
  4288ac:	6323      	str	r3, [r4, #48]	; 0x30
  4288ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4288b2:	2200      	movs	r2, #0
  4288b4:	61a2      	str	r2, [r4, #24]
  4288b6:	6062      	str	r2, [r4, #4]
  4288b8:	061a      	lsls	r2, r3, #24
  4288ba:	d43a      	bmi.n	428932 <setvbuf+0xd6>
  4288bc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4288c0:	f023 0303 	bic.w	r3, r3, #3
  4288c4:	f1b8 0f02 	cmp.w	r8, #2
  4288c8:	81a3      	strh	r3, [r4, #12]
  4288ca:	d01d      	beq.n	428908 <setvbuf+0xac>
  4288cc:	ab01      	add	r3, sp, #4
  4288ce:	466a      	mov	r2, sp
  4288d0:	4621      	mov	r1, r4
  4288d2:	4628      	mov	r0, r5
  4288d4:	f001 ff0e 	bl	42a6f4 <__swhatbuf_r>
  4288d8:	89a3      	ldrh	r3, [r4, #12]
  4288da:	4318      	orrs	r0, r3
  4288dc:	81a0      	strh	r0, [r4, #12]
  4288de:	2e00      	cmp	r6, #0
  4288e0:	d132      	bne.n	428948 <setvbuf+0xec>
  4288e2:	9e00      	ldr	r6, [sp, #0]
  4288e4:	4630      	mov	r0, r6
  4288e6:	f7ff fba3 	bl	428030 <malloc>
  4288ea:	4607      	mov	r7, r0
  4288ec:	2800      	cmp	r0, #0
  4288ee:	d06b      	beq.n	4289c8 <setvbuf+0x16c>
  4288f0:	89a3      	ldrh	r3, [r4, #12]
  4288f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4288f6:	81a3      	strh	r3, [r4, #12]
  4288f8:	e028      	b.n	42894c <setvbuf+0xf0>
  4288fa:	89a3      	ldrh	r3, [r4, #12]
  4288fc:	0599      	lsls	r1, r3, #22
  4288fe:	d4c7      	bmi.n	428890 <setvbuf+0x34>
  428900:	6da0      	ldr	r0, [r4, #88]	; 0x58
  428902:	f001 fef3 	bl	42a6ec <__retarget_lock_acquire_recursive>
  428906:	e7c3      	b.n	428890 <setvbuf+0x34>
  428908:	2500      	movs	r5, #0
  42890a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  42890c:	2600      	movs	r6, #0
  42890e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  428912:	f043 0302 	orr.w	r3, r3, #2
  428916:	2001      	movs	r0, #1
  428918:	60a6      	str	r6, [r4, #8]
  42891a:	07ce      	lsls	r6, r1, #31
  42891c:	81a3      	strh	r3, [r4, #12]
  42891e:	6022      	str	r2, [r4, #0]
  428920:	6122      	str	r2, [r4, #16]
  428922:	6160      	str	r0, [r4, #20]
  428924:	d401      	bmi.n	42892a <setvbuf+0xce>
  428926:	0598      	lsls	r0, r3, #22
  428928:	d53e      	bpl.n	4289a8 <setvbuf+0x14c>
  42892a:	4628      	mov	r0, r5
  42892c:	b003      	add	sp, #12
  42892e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  428932:	6921      	ldr	r1, [r4, #16]
  428934:	4628      	mov	r0, r5
  428936:	f001 fc3f 	bl	42a1b8 <_free_r>
  42893a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42893e:	e7bd      	b.n	4288bc <setvbuf+0x60>
  428940:	4628      	mov	r0, r5
  428942:	f001 fb13 	bl	429f6c <__sinit>
  428946:	e796      	b.n	428876 <setvbuf+0x1a>
  428948:	2f00      	cmp	r7, #0
  42894a:	d0cb      	beq.n	4288e4 <setvbuf+0x88>
  42894c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  42894e:	2b00      	cmp	r3, #0
  428950:	d033      	beq.n	4289ba <setvbuf+0x15e>
  428952:	9b00      	ldr	r3, [sp, #0]
  428954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  428958:	6027      	str	r7, [r4, #0]
  42895a:	429e      	cmp	r6, r3
  42895c:	bf1c      	itt	ne
  42895e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  428962:	81a2      	strhne	r2, [r4, #12]
  428964:	f1b8 0f01 	cmp.w	r8, #1
  428968:	bf04      	itt	eq
  42896a:	f042 0201 	orreq.w	r2, r2, #1
  42896e:	81a2      	strheq	r2, [r4, #12]
  428970:	b292      	uxth	r2, r2
  428972:	f012 0308 	ands.w	r3, r2, #8
  428976:	6127      	str	r7, [r4, #16]
  428978:	6166      	str	r6, [r4, #20]
  42897a:	d00e      	beq.n	42899a <setvbuf+0x13e>
  42897c:	07d1      	lsls	r1, r2, #31
  42897e:	d51a      	bpl.n	4289b6 <setvbuf+0x15a>
  428980:	6e65      	ldr	r5, [r4, #100]	; 0x64
  428982:	4276      	negs	r6, r6
  428984:	2300      	movs	r3, #0
  428986:	f015 0501 	ands.w	r5, r5, #1
  42898a:	61a6      	str	r6, [r4, #24]
  42898c:	60a3      	str	r3, [r4, #8]
  42898e:	d009      	beq.n	4289a4 <setvbuf+0x148>
  428990:	2500      	movs	r5, #0
  428992:	4628      	mov	r0, r5
  428994:	b003      	add	sp, #12
  428996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  42899a:	60a3      	str	r3, [r4, #8]
  42899c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  42899e:	f015 0501 	ands.w	r5, r5, #1
  4289a2:	d1f5      	bne.n	428990 <setvbuf+0x134>
  4289a4:	0593      	lsls	r3, r2, #22
  4289a6:	d4c0      	bmi.n	42892a <setvbuf+0xce>
  4289a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4289aa:	f001 fea1 	bl	42a6f0 <__retarget_lock_release_recursive>
  4289ae:	4628      	mov	r0, r5
  4289b0:	b003      	add	sp, #12
  4289b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4289b6:	60a6      	str	r6, [r4, #8]
  4289b8:	e7f0      	b.n	42899c <setvbuf+0x140>
  4289ba:	4628      	mov	r0, r5
  4289bc:	f001 fad6 	bl	429f6c <__sinit>
  4289c0:	e7c7      	b.n	428952 <setvbuf+0xf6>
  4289c2:	f04f 35ff 	mov.w	r5, #4294967295
  4289c6:	e7b0      	b.n	42892a <setvbuf+0xce>
  4289c8:	f8dd 9000 	ldr.w	r9, [sp]
  4289cc:	45b1      	cmp	r9, r6
  4289ce:	d004      	beq.n	4289da <setvbuf+0x17e>
  4289d0:	4648      	mov	r0, r9
  4289d2:	f7ff fb2d 	bl	428030 <malloc>
  4289d6:	4607      	mov	r7, r0
  4289d8:	b920      	cbnz	r0, 4289e4 <setvbuf+0x188>
  4289da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4289de:	f04f 35ff 	mov.w	r5, #4294967295
  4289e2:	e792      	b.n	42890a <setvbuf+0xae>
  4289e4:	464e      	mov	r6, r9
  4289e6:	e783      	b.n	4288f0 <setvbuf+0x94>
  4289e8:	204000d4 	.word	0x204000d4
	...
  428a00:	eba2 0003 	sub.w	r0, r2, r3
  428a04:	4770      	bx	lr
  428a06:	bf00      	nop

00428a08 <strcmp>:
  428a08:	7802      	ldrb	r2, [r0, #0]
  428a0a:	780b      	ldrb	r3, [r1, #0]
  428a0c:	2a01      	cmp	r2, #1
  428a0e:	bf28      	it	cs
  428a10:	429a      	cmpcs	r2, r3
  428a12:	d1f5      	bne.n	428a00 <setvbuf+0x1a4>
  428a14:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  428a18:	ea40 0401 	orr.w	r4, r0, r1
  428a1c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  428a20:	f06f 0c00 	mvn.w	ip, #0
  428a24:	ea4f 7244 	mov.w	r2, r4, lsl #29
  428a28:	b312      	cbz	r2, 428a70 <strcmp+0x68>
  428a2a:	ea80 0401 	eor.w	r4, r0, r1
  428a2e:	f014 0f07 	tst.w	r4, #7
  428a32:	d16a      	bne.n	428b0a <strcmp+0x102>
  428a34:	f000 0407 	and.w	r4, r0, #7
  428a38:	f020 0007 	bic.w	r0, r0, #7
  428a3c:	f004 0503 	and.w	r5, r4, #3
  428a40:	f021 0107 	bic.w	r1, r1, #7
  428a44:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  428a48:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  428a4c:	f014 0f04 	tst.w	r4, #4
  428a50:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  428a54:	fa0c f405 	lsl.w	r4, ip, r5
  428a58:	ea62 0204 	orn	r2, r2, r4
  428a5c:	ea66 0604 	orn	r6, r6, r4
  428a60:	d00a      	beq.n	428a78 <strcmp+0x70>
  428a62:	ea63 0304 	orn	r3, r3, r4
  428a66:	4662      	mov	r2, ip
  428a68:	ea67 0704 	orn	r7, r7, r4
  428a6c:	4666      	mov	r6, ip
  428a6e:	e003      	b.n	428a78 <strcmp+0x70>
  428a70:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  428a74:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  428a78:	fa82 f54c 	uadd8	r5, r2, ip
  428a7c:	ea82 0406 	eor.w	r4, r2, r6
  428a80:	faa4 f48c 	sel	r4, r4, ip
  428a84:	bb6c      	cbnz	r4, 428ae2 <strcmp+0xda>
  428a86:	fa83 f54c 	uadd8	r5, r3, ip
  428a8a:	ea83 0507 	eor.w	r5, r3, r7
  428a8e:	faa5 f58c 	sel	r5, r5, ip
  428a92:	b995      	cbnz	r5, 428aba <strcmp+0xb2>
  428a94:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  428a98:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  428a9c:	fa82 f54c 	uadd8	r5, r2, ip
  428aa0:	ea82 0406 	eor.w	r4, r2, r6
  428aa4:	faa4 f48c 	sel	r4, r4, ip
  428aa8:	fa83 f54c 	uadd8	r5, r3, ip
  428aac:	ea83 0507 	eor.w	r5, r3, r7
  428ab0:	faa5 f58c 	sel	r5, r5, ip
  428ab4:	4325      	orrs	r5, r4
  428ab6:	d0db      	beq.n	428a70 <strcmp+0x68>
  428ab8:	b99c      	cbnz	r4, 428ae2 <strcmp+0xda>
  428aba:	ba2d      	rev	r5, r5
  428abc:	fab5 f485 	clz	r4, r5
  428ac0:	f024 0407 	bic.w	r4, r4, #7
  428ac4:	fa27 f104 	lsr.w	r1, r7, r4
  428ac8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  428acc:	fa23 f304 	lsr.w	r3, r3, r4
  428ad0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  428ad4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  428ad8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  428adc:	eba0 0001 	sub.w	r0, r0, r1
  428ae0:	4770      	bx	lr
  428ae2:	ba24      	rev	r4, r4
  428ae4:	fab4 f484 	clz	r4, r4
  428ae8:	f024 0407 	bic.w	r4, r4, #7
  428aec:	fa26 f104 	lsr.w	r1, r6, r4
  428af0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  428af4:	fa22 f204 	lsr.w	r2, r2, r4
  428af8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  428afc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  428b00:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  428b04:	eba0 0001 	sub.w	r0, r0, r1
  428b08:	4770      	bx	lr
  428b0a:	f014 0f03 	tst.w	r4, #3
  428b0e:	d13c      	bne.n	428b8a <strcmp+0x182>
  428b10:	f010 0403 	ands.w	r4, r0, #3
  428b14:	d128      	bne.n	428b68 <strcmp+0x160>
  428b16:	f850 2b08 	ldr.w	r2, [r0], #8
  428b1a:	f851 3b08 	ldr.w	r3, [r1], #8
  428b1e:	fa82 f54c 	uadd8	r5, r2, ip
  428b22:	ea82 0503 	eor.w	r5, r2, r3
  428b26:	faa5 f58c 	sel	r5, r5, ip
  428b2a:	b95d      	cbnz	r5, 428b44 <strcmp+0x13c>
  428b2c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  428b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
  428b34:	fa82 f54c 	uadd8	r5, r2, ip
  428b38:	ea82 0503 	eor.w	r5, r2, r3
  428b3c:	faa5 f58c 	sel	r5, r5, ip
  428b40:	2d00      	cmp	r5, #0
  428b42:	d0e8      	beq.n	428b16 <strcmp+0x10e>
  428b44:	ba2d      	rev	r5, r5
  428b46:	fab5 f485 	clz	r4, r5
  428b4a:	f024 0407 	bic.w	r4, r4, #7
  428b4e:	fa23 f104 	lsr.w	r1, r3, r4
  428b52:	fa22 f204 	lsr.w	r2, r2, r4
  428b56:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  428b5a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  428b5e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  428b62:	eba0 0001 	sub.w	r0, r0, r1
  428b66:	4770      	bx	lr
  428b68:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  428b6c:	f020 0003 	bic.w	r0, r0, #3
  428b70:	f850 2b08 	ldr.w	r2, [r0], #8
  428b74:	f021 0103 	bic.w	r1, r1, #3
  428b78:	f851 3b08 	ldr.w	r3, [r1], #8
  428b7c:	fa0c f404 	lsl.w	r4, ip, r4
  428b80:	ea62 0204 	orn	r2, r2, r4
  428b84:	ea63 0304 	orn	r3, r3, r4
  428b88:	e7c9      	b.n	428b1e <strcmp+0x116>
  428b8a:	f010 0403 	ands.w	r4, r0, #3
  428b8e:	d01a      	beq.n	428bc6 <strcmp+0x1be>
  428b90:	eba1 0104 	sub.w	r1, r1, r4
  428b94:	f020 0003 	bic.w	r0, r0, #3
  428b98:	07e4      	lsls	r4, r4, #31
  428b9a:	f850 2b04 	ldr.w	r2, [r0], #4
  428b9e:	d006      	beq.n	428bae <strcmp+0x1a6>
  428ba0:	d20f      	bcs.n	428bc2 <strcmp+0x1ba>
  428ba2:	788b      	ldrb	r3, [r1, #2]
  428ba4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  428ba8:	1ae4      	subs	r4, r4, r3
  428baa:	d106      	bne.n	428bba <strcmp+0x1b2>
  428bac:	b12b      	cbz	r3, 428bba <strcmp+0x1b2>
  428bae:	78cb      	ldrb	r3, [r1, #3]
  428bb0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  428bb4:	1ae4      	subs	r4, r4, r3
  428bb6:	d100      	bne.n	428bba <strcmp+0x1b2>
  428bb8:	b91b      	cbnz	r3, 428bc2 <strcmp+0x1ba>
  428bba:	4620      	mov	r0, r4
  428bbc:	f85d 4b10 	ldr.w	r4, [sp], #16
  428bc0:	4770      	bx	lr
  428bc2:	f101 0104 	add.w	r1, r1, #4
  428bc6:	f850 2b04 	ldr.w	r2, [r0], #4
  428bca:	07cc      	lsls	r4, r1, #31
  428bcc:	f021 0103 	bic.w	r1, r1, #3
  428bd0:	f851 3b04 	ldr.w	r3, [r1], #4
  428bd4:	d848      	bhi.n	428c68 <strcmp+0x260>
  428bd6:	d224      	bcs.n	428c22 <strcmp+0x21a>
  428bd8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  428bdc:	fa82 f54c 	uadd8	r5, r2, ip
  428be0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  428be4:	faa5 f58c 	sel	r5, r5, ip
  428be8:	d10a      	bne.n	428c00 <strcmp+0x1f8>
  428bea:	b965      	cbnz	r5, 428c06 <strcmp+0x1fe>
  428bec:	f851 3b04 	ldr.w	r3, [r1], #4
  428bf0:	ea84 0402 	eor.w	r4, r4, r2
  428bf4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  428bf8:	d10e      	bne.n	428c18 <strcmp+0x210>
  428bfa:	f850 2b04 	ldr.w	r2, [r0], #4
  428bfe:	e7eb      	b.n	428bd8 <strcmp+0x1d0>
  428c00:	ea4f 2313 	mov.w	r3, r3, lsr #8
  428c04:	e055      	b.n	428cb2 <strcmp+0x2aa>
  428c06:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  428c0a:	d14d      	bne.n	428ca8 <strcmp+0x2a0>
  428c0c:	7808      	ldrb	r0, [r1, #0]
  428c0e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  428c12:	f1c0 0000 	rsb	r0, r0, #0
  428c16:	4770      	bx	lr
  428c18:	ea4f 6212 	mov.w	r2, r2, lsr #24
  428c1c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  428c20:	e047      	b.n	428cb2 <strcmp+0x2aa>
  428c22:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  428c26:	fa82 f54c 	uadd8	r5, r2, ip
  428c2a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  428c2e:	faa5 f58c 	sel	r5, r5, ip
  428c32:	d10a      	bne.n	428c4a <strcmp+0x242>
  428c34:	b965      	cbnz	r5, 428c50 <strcmp+0x248>
  428c36:	f851 3b04 	ldr.w	r3, [r1], #4
  428c3a:	ea84 0402 	eor.w	r4, r4, r2
  428c3e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  428c42:	d10c      	bne.n	428c5e <strcmp+0x256>
  428c44:	f850 2b04 	ldr.w	r2, [r0], #4
  428c48:	e7eb      	b.n	428c22 <strcmp+0x21a>
  428c4a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  428c4e:	e030      	b.n	428cb2 <strcmp+0x2aa>
  428c50:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  428c54:	d128      	bne.n	428ca8 <strcmp+0x2a0>
  428c56:	880b      	ldrh	r3, [r1, #0]
  428c58:	ea4f 4212 	mov.w	r2, r2, lsr #16
  428c5c:	e029      	b.n	428cb2 <strcmp+0x2aa>
  428c5e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  428c62:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  428c66:	e024      	b.n	428cb2 <strcmp+0x2aa>
  428c68:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  428c6c:	fa82 f54c 	uadd8	r5, r2, ip
  428c70:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  428c74:	faa5 f58c 	sel	r5, r5, ip
  428c78:	d10a      	bne.n	428c90 <strcmp+0x288>
  428c7a:	b965      	cbnz	r5, 428c96 <strcmp+0x28e>
  428c7c:	f851 3b04 	ldr.w	r3, [r1], #4
  428c80:	ea84 0402 	eor.w	r4, r4, r2
  428c84:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  428c88:	d109      	bne.n	428c9e <strcmp+0x296>
  428c8a:	f850 2b04 	ldr.w	r2, [r0], #4
  428c8e:	e7eb      	b.n	428c68 <strcmp+0x260>
  428c90:	ea4f 6313 	mov.w	r3, r3, lsr #24
  428c94:	e00d      	b.n	428cb2 <strcmp+0x2aa>
  428c96:	f015 0fff 	tst.w	r5, #255	; 0xff
  428c9a:	d105      	bne.n	428ca8 <strcmp+0x2a0>
  428c9c:	680b      	ldr	r3, [r1, #0]
  428c9e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  428ca2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  428ca6:	e004      	b.n	428cb2 <strcmp+0x2aa>
  428ca8:	f04f 0000 	mov.w	r0, #0
  428cac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  428cb0:	4770      	bx	lr
  428cb2:	ba12      	rev	r2, r2
  428cb4:	ba1b      	rev	r3, r3
  428cb6:	fa82 f44c 	uadd8	r4, r2, ip
  428cba:	ea82 0403 	eor.w	r4, r2, r3
  428cbe:	faa4 f58c 	sel	r5, r4, ip
  428cc2:	fab5 f485 	clz	r4, r5
  428cc6:	fa02 f204 	lsl.w	r2, r2, r4
  428cca:	fa03 f304 	lsl.w	r3, r3, r4
  428cce:	ea4f 6012 	mov.w	r0, r2, lsr #24
  428cd2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  428cd6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  428cda:	4770      	bx	lr

00428cdc <strcpy>:
  428cdc:	ea80 0201 	eor.w	r2, r0, r1
  428ce0:	4684      	mov	ip, r0
  428ce2:	f012 0f03 	tst.w	r2, #3
  428ce6:	d14f      	bne.n	428d88 <strcpy+0xac>
  428ce8:	f011 0f03 	tst.w	r1, #3
  428cec:	d132      	bne.n	428d54 <strcpy+0x78>
  428cee:	f84d 4d04 	str.w	r4, [sp, #-4]!
  428cf2:	f011 0f04 	tst.w	r1, #4
  428cf6:	f851 3b04 	ldr.w	r3, [r1], #4
  428cfa:	d00b      	beq.n	428d14 <strcpy+0x38>
  428cfc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  428d00:	439a      	bics	r2, r3
  428d02:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  428d06:	bf04      	itt	eq
  428d08:	f84c 3b04 	streq.w	r3, [ip], #4
  428d0c:	f851 3b04 	ldreq.w	r3, [r1], #4
  428d10:	d116      	bne.n	428d40 <strcpy+0x64>
  428d12:	bf00      	nop
  428d14:	f851 4b04 	ldr.w	r4, [r1], #4
  428d18:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  428d1c:	439a      	bics	r2, r3
  428d1e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  428d22:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  428d26:	d10b      	bne.n	428d40 <strcpy+0x64>
  428d28:	f84c 3b04 	str.w	r3, [ip], #4
  428d2c:	43a2      	bics	r2, r4
  428d2e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  428d32:	bf04      	itt	eq
  428d34:	f851 3b04 	ldreq.w	r3, [r1], #4
  428d38:	f84c 4b04 	streq.w	r4, [ip], #4
  428d3c:	d0ea      	beq.n	428d14 <strcpy+0x38>
  428d3e:	4623      	mov	r3, r4
  428d40:	f80c 3b01 	strb.w	r3, [ip], #1
  428d44:	f013 0fff 	tst.w	r3, #255	; 0xff
  428d48:	ea4f 2333 	mov.w	r3, r3, ror #8
  428d4c:	d1f8      	bne.n	428d40 <strcpy+0x64>
  428d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
  428d52:	4770      	bx	lr
  428d54:	f011 0f01 	tst.w	r1, #1
  428d58:	d006      	beq.n	428d68 <strcpy+0x8c>
  428d5a:	f811 2b01 	ldrb.w	r2, [r1], #1
  428d5e:	f80c 2b01 	strb.w	r2, [ip], #1
  428d62:	2a00      	cmp	r2, #0
  428d64:	bf08      	it	eq
  428d66:	4770      	bxeq	lr
  428d68:	f011 0f02 	tst.w	r1, #2
  428d6c:	d0bf      	beq.n	428cee <strcpy+0x12>
  428d6e:	f831 2b02 	ldrh.w	r2, [r1], #2
  428d72:	f012 0fff 	tst.w	r2, #255	; 0xff
  428d76:	bf16      	itet	ne
  428d78:	f82c 2b02 	strhne.w	r2, [ip], #2
  428d7c:	f88c 2000 	strbeq.w	r2, [ip]
  428d80:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  428d84:	d1b3      	bne.n	428cee <strcpy+0x12>
  428d86:	4770      	bx	lr
  428d88:	f811 2b01 	ldrb.w	r2, [r1], #1
  428d8c:	f80c 2b01 	strb.w	r2, [ip], #1
  428d90:	2a00      	cmp	r2, #0
  428d92:	d1f9      	bne.n	428d88 <strcpy+0xac>
  428d94:	4770      	bx	lr
  428d96:	bf00      	nop
	...

00428dc0 <strlen>:
  428dc0:	f890 f000 	pld	[r0]
  428dc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  428dc8:	f020 0107 	bic.w	r1, r0, #7
  428dcc:	f06f 0c00 	mvn.w	ip, #0
  428dd0:	f010 0407 	ands.w	r4, r0, #7
  428dd4:	f891 f020 	pld	[r1, #32]
  428dd8:	f040 8049 	bne.w	428e6e <strlen+0xae>
  428ddc:	f04f 0400 	mov.w	r4, #0
  428de0:	f06f 0007 	mvn.w	r0, #7
  428de4:	e9d1 2300 	ldrd	r2, r3, [r1]
  428de8:	f891 f040 	pld	[r1, #64]	; 0x40
  428dec:	f100 0008 	add.w	r0, r0, #8
  428df0:	fa82 f24c 	uadd8	r2, r2, ip
  428df4:	faa4 f28c 	sel	r2, r4, ip
  428df8:	fa83 f34c 	uadd8	r3, r3, ip
  428dfc:	faa2 f38c 	sel	r3, r2, ip
  428e00:	bb4b      	cbnz	r3, 428e56 <strlen+0x96>
  428e02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  428e06:	fa82 f24c 	uadd8	r2, r2, ip
  428e0a:	f100 0008 	add.w	r0, r0, #8
  428e0e:	faa4 f28c 	sel	r2, r4, ip
  428e12:	fa83 f34c 	uadd8	r3, r3, ip
  428e16:	faa2 f38c 	sel	r3, r2, ip
  428e1a:	b9e3      	cbnz	r3, 428e56 <strlen+0x96>
  428e1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  428e20:	fa82 f24c 	uadd8	r2, r2, ip
  428e24:	f100 0008 	add.w	r0, r0, #8
  428e28:	faa4 f28c 	sel	r2, r4, ip
  428e2c:	fa83 f34c 	uadd8	r3, r3, ip
  428e30:	faa2 f38c 	sel	r3, r2, ip
  428e34:	b97b      	cbnz	r3, 428e56 <strlen+0x96>
  428e36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  428e3a:	f101 0120 	add.w	r1, r1, #32
  428e3e:	fa82 f24c 	uadd8	r2, r2, ip
  428e42:	f100 0008 	add.w	r0, r0, #8
  428e46:	faa4 f28c 	sel	r2, r4, ip
  428e4a:	fa83 f34c 	uadd8	r3, r3, ip
  428e4e:	faa2 f38c 	sel	r3, r2, ip
  428e52:	2b00      	cmp	r3, #0
  428e54:	d0c6      	beq.n	428de4 <strlen+0x24>
  428e56:	2a00      	cmp	r2, #0
  428e58:	bf04      	itt	eq
  428e5a:	3004      	addeq	r0, #4
  428e5c:	461a      	moveq	r2, r3
  428e5e:	ba12      	rev	r2, r2
  428e60:	fab2 f282 	clz	r2, r2
  428e64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  428e68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  428e6c:	4770      	bx	lr
  428e6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  428e72:	f004 0503 	and.w	r5, r4, #3
  428e76:	f1c4 0000 	rsb	r0, r4, #0
  428e7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  428e7e:	f014 0f04 	tst.w	r4, #4
  428e82:	f891 f040 	pld	[r1, #64]	; 0x40
  428e86:	fa0c f505 	lsl.w	r5, ip, r5
  428e8a:	ea62 0205 	orn	r2, r2, r5
  428e8e:	bf1c      	itt	ne
  428e90:	ea63 0305 	ornne	r3, r3, r5
  428e94:	4662      	movne	r2, ip
  428e96:	f04f 0400 	mov.w	r4, #0
  428e9a:	e7a9      	b.n	428df0 <strlen+0x30>

00428e9c <strncpy>:
  428e9c:	ea40 0301 	orr.w	r3, r0, r1
  428ea0:	f013 0f03 	tst.w	r3, #3
  428ea4:	b470      	push	{r4, r5, r6}
  428ea6:	4603      	mov	r3, r0
  428ea8:	d024      	beq.n	428ef4 <strncpy+0x58>
  428eaa:	b1a2      	cbz	r2, 428ed6 <strncpy+0x3a>
  428eac:	780c      	ldrb	r4, [r1, #0]
  428eae:	701c      	strb	r4, [r3, #0]
  428eb0:	3a01      	subs	r2, #1
  428eb2:	3301      	adds	r3, #1
  428eb4:	3101      	adds	r1, #1
  428eb6:	b13c      	cbz	r4, 428ec8 <strncpy+0x2c>
  428eb8:	b16a      	cbz	r2, 428ed6 <strncpy+0x3a>
  428eba:	f811 4b01 	ldrb.w	r4, [r1], #1
  428ebe:	f803 4b01 	strb.w	r4, [r3], #1
  428ec2:	3a01      	subs	r2, #1
  428ec4:	2c00      	cmp	r4, #0
  428ec6:	d1f7      	bne.n	428eb8 <strncpy+0x1c>
  428ec8:	b12a      	cbz	r2, 428ed6 <strncpy+0x3a>
  428eca:	441a      	add	r2, r3
  428ecc:	2100      	movs	r1, #0
  428ece:	f803 1b01 	strb.w	r1, [r3], #1
  428ed2:	429a      	cmp	r2, r3
  428ed4:	d1fb      	bne.n	428ece <strncpy+0x32>
  428ed6:	bc70      	pop	{r4, r5, r6}
  428ed8:	4770      	bx	lr
  428eda:	460e      	mov	r6, r1
  428edc:	f851 5b04 	ldr.w	r5, [r1], #4
  428ee0:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  428ee4:	ea24 0405 	bic.w	r4, r4, r5
  428ee8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  428eec:	d105      	bne.n	428efa <strncpy+0x5e>
  428eee:	f843 5b04 	str.w	r5, [r3], #4
  428ef2:	3a04      	subs	r2, #4
  428ef4:	2a03      	cmp	r2, #3
  428ef6:	d8f0      	bhi.n	428eda <strncpy+0x3e>
  428ef8:	e7d7      	b.n	428eaa <strncpy+0xe>
  428efa:	4631      	mov	r1, r6
  428efc:	e7d6      	b.n	428eac <strncpy+0x10>
  428efe:	bf00      	nop

00428f00 <__sprint_r.part.0>:
  428f00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  428f04:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  428f06:	049c      	lsls	r4, r3, #18
  428f08:	4693      	mov	fp, r2
  428f0a:	d52f      	bpl.n	428f6c <__sprint_r.part.0+0x6c>
  428f0c:	6893      	ldr	r3, [r2, #8]
  428f0e:	6812      	ldr	r2, [r2, #0]
  428f10:	b353      	cbz	r3, 428f68 <__sprint_r.part.0+0x68>
  428f12:	460e      	mov	r6, r1
  428f14:	4607      	mov	r7, r0
  428f16:	f102 0908 	add.w	r9, r2, #8
  428f1a:	e919 0420 	ldmdb	r9, {r5, sl}
  428f1e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  428f22:	d017      	beq.n	428f54 <__sprint_r.part.0+0x54>
  428f24:	3d04      	subs	r5, #4
  428f26:	2400      	movs	r4, #0
  428f28:	e001      	b.n	428f2e <__sprint_r.part.0+0x2e>
  428f2a:	45a0      	cmp	r8, r4
  428f2c:	d010      	beq.n	428f50 <__sprint_r.part.0+0x50>
  428f2e:	4632      	mov	r2, r6
  428f30:	f855 1f04 	ldr.w	r1, [r5, #4]!
  428f34:	4638      	mov	r0, r7
  428f36:	f001 f8bb 	bl	42a0b0 <_fputwc_r>
  428f3a:	1c43      	adds	r3, r0, #1
  428f3c:	f104 0401 	add.w	r4, r4, #1
  428f40:	d1f3      	bne.n	428f2a <__sprint_r.part.0+0x2a>
  428f42:	2300      	movs	r3, #0
  428f44:	f8cb 3008 	str.w	r3, [fp, #8]
  428f48:	f8cb 3004 	str.w	r3, [fp, #4]
  428f4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  428f50:	f8db 3008 	ldr.w	r3, [fp, #8]
  428f54:	f02a 0a03 	bic.w	sl, sl, #3
  428f58:	eba3 030a 	sub.w	r3, r3, sl
  428f5c:	f8cb 3008 	str.w	r3, [fp, #8]
  428f60:	f109 0908 	add.w	r9, r9, #8
  428f64:	2b00      	cmp	r3, #0
  428f66:	d1d8      	bne.n	428f1a <__sprint_r.part.0+0x1a>
  428f68:	2000      	movs	r0, #0
  428f6a:	e7ea      	b.n	428f42 <__sprint_r.part.0+0x42>
  428f6c:	f001 fa0a 	bl	42a384 <__sfvwrite_r>
  428f70:	2300      	movs	r3, #0
  428f72:	f8cb 3008 	str.w	r3, [fp, #8]
  428f76:	f8cb 3004 	str.w	r3, [fp, #4]
  428f7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  428f7e:	bf00      	nop

00428f80 <_vfiprintf_r>:
  428f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  428f84:	b0ad      	sub	sp, #180	; 0xb4
  428f86:	461d      	mov	r5, r3
  428f88:	468b      	mov	fp, r1
  428f8a:	4690      	mov	r8, r2
  428f8c:	9307      	str	r3, [sp, #28]
  428f8e:	9006      	str	r0, [sp, #24]
  428f90:	b118      	cbz	r0, 428f9a <_vfiprintf_r+0x1a>
  428f92:	6b83      	ldr	r3, [r0, #56]	; 0x38
  428f94:	2b00      	cmp	r3, #0
  428f96:	f000 80f3 	beq.w	429180 <_vfiprintf_r+0x200>
  428f9a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  428f9e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  428fa2:	07df      	lsls	r7, r3, #31
  428fa4:	b281      	uxth	r1, r0
  428fa6:	d402      	bmi.n	428fae <_vfiprintf_r+0x2e>
  428fa8:	058e      	lsls	r6, r1, #22
  428faa:	f140 80fc 	bpl.w	4291a6 <_vfiprintf_r+0x226>
  428fae:	048c      	lsls	r4, r1, #18
  428fb0:	d40a      	bmi.n	428fc8 <_vfiprintf_r+0x48>
  428fb2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  428fb6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  428fba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  428fbe:	f8ab 100c 	strh.w	r1, [fp, #12]
  428fc2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  428fc6:	b289      	uxth	r1, r1
  428fc8:	0708      	lsls	r0, r1, #28
  428fca:	f140 80b3 	bpl.w	429134 <_vfiprintf_r+0x1b4>
  428fce:	f8db 3010 	ldr.w	r3, [fp, #16]
  428fd2:	2b00      	cmp	r3, #0
  428fd4:	f000 80ae 	beq.w	429134 <_vfiprintf_r+0x1b4>
  428fd8:	f001 031a 	and.w	r3, r1, #26
  428fdc:	2b0a      	cmp	r3, #10
  428fde:	f000 80b5 	beq.w	42914c <_vfiprintf_r+0x1cc>
  428fe2:	2300      	movs	r3, #0
  428fe4:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  428fe8:	930b      	str	r3, [sp, #44]	; 0x2c
  428fea:	9311      	str	r3, [sp, #68]	; 0x44
  428fec:	9310      	str	r3, [sp, #64]	; 0x40
  428fee:	9303      	str	r3, [sp, #12]
  428ff0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  428ff4:	46ca      	mov	sl, r9
  428ff6:	f8cd b010 	str.w	fp, [sp, #16]
  428ffa:	f898 3000 	ldrb.w	r3, [r8]
  428ffe:	4644      	mov	r4, r8
  429000:	b1fb      	cbz	r3, 429042 <_vfiprintf_r+0xc2>
  429002:	2b25      	cmp	r3, #37	; 0x25
  429004:	d102      	bne.n	42900c <_vfiprintf_r+0x8c>
  429006:	e01c      	b.n	429042 <_vfiprintf_r+0xc2>
  429008:	2b25      	cmp	r3, #37	; 0x25
  42900a:	d003      	beq.n	429014 <_vfiprintf_r+0x94>
  42900c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  429010:	2b00      	cmp	r3, #0
  429012:	d1f9      	bne.n	429008 <_vfiprintf_r+0x88>
  429014:	eba4 0508 	sub.w	r5, r4, r8
  429018:	b19d      	cbz	r5, 429042 <_vfiprintf_r+0xc2>
  42901a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  42901c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  42901e:	f8ca 8000 	str.w	r8, [sl]
  429022:	3301      	adds	r3, #1
  429024:	442a      	add	r2, r5
  429026:	2b07      	cmp	r3, #7
  429028:	f8ca 5004 	str.w	r5, [sl, #4]
  42902c:	9211      	str	r2, [sp, #68]	; 0x44
  42902e:	9310      	str	r3, [sp, #64]	; 0x40
  429030:	dd7a      	ble.n	429128 <_vfiprintf_r+0x1a8>
  429032:	2a00      	cmp	r2, #0
  429034:	f040 84b0 	bne.w	429998 <_vfiprintf_r+0xa18>
  429038:	9b03      	ldr	r3, [sp, #12]
  42903a:	9210      	str	r2, [sp, #64]	; 0x40
  42903c:	442b      	add	r3, r5
  42903e:	46ca      	mov	sl, r9
  429040:	9303      	str	r3, [sp, #12]
  429042:	7823      	ldrb	r3, [r4, #0]
  429044:	2b00      	cmp	r3, #0
  429046:	f000 83e0 	beq.w	42980a <_vfiprintf_r+0x88a>
  42904a:	2000      	movs	r0, #0
  42904c:	f04f 0300 	mov.w	r3, #0
  429050:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  429054:	f104 0801 	add.w	r8, r4, #1
  429058:	7862      	ldrb	r2, [r4, #1]
  42905a:	4605      	mov	r5, r0
  42905c:	4606      	mov	r6, r0
  42905e:	4603      	mov	r3, r0
  429060:	f04f 34ff 	mov.w	r4, #4294967295
  429064:	f108 0801 	add.w	r8, r8, #1
  429068:	f1a2 0120 	sub.w	r1, r2, #32
  42906c:	2958      	cmp	r1, #88	; 0x58
  42906e:	f200 82de 	bhi.w	42962e <_vfiprintf_r+0x6ae>
  429072:	e8df f011 	tbh	[pc, r1, lsl #1]
  429076:	0221      	.short	0x0221
  429078:	02dc02dc 	.word	0x02dc02dc
  42907c:	02dc0229 	.word	0x02dc0229
  429080:	02dc02dc 	.word	0x02dc02dc
  429084:	02dc02dc 	.word	0x02dc02dc
  429088:	028902dc 	.word	0x028902dc
  42908c:	02dc0295 	.word	0x02dc0295
  429090:	02bd00a2 	.word	0x02bd00a2
  429094:	019f02dc 	.word	0x019f02dc
  429098:	01a401a4 	.word	0x01a401a4
  42909c:	01a401a4 	.word	0x01a401a4
  4290a0:	01a401a4 	.word	0x01a401a4
  4290a4:	01a401a4 	.word	0x01a401a4
  4290a8:	02dc01a4 	.word	0x02dc01a4
  4290ac:	02dc02dc 	.word	0x02dc02dc
  4290b0:	02dc02dc 	.word	0x02dc02dc
  4290b4:	02dc02dc 	.word	0x02dc02dc
  4290b8:	02dc02dc 	.word	0x02dc02dc
  4290bc:	01b202dc 	.word	0x01b202dc
  4290c0:	02dc02dc 	.word	0x02dc02dc
  4290c4:	02dc02dc 	.word	0x02dc02dc
  4290c8:	02dc02dc 	.word	0x02dc02dc
  4290cc:	02dc02dc 	.word	0x02dc02dc
  4290d0:	02dc02dc 	.word	0x02dc02dc
  4290d4:	02dc0197 	.word	0x02dc0197
  4290d8:	02dc02dc 	.word	0x02dc02dc
  4290dc:	02dc02dc 	.word	0x02dc02dc
  4290e0:	02dc019b 	.word	0x02dc019b
  4290e4:	025302dc 	.word	0x025302dc
  4290e8:	02dc02dc 	.word	0x02dc02dc
  4290ec:	02dc02dc 	.word	0x02dc02dc
  4290f0:	02dc02dc 	.word	0x02dc02dc
  4290f4:	02dc02dc 	.word	0x02dc02dc
  4290f8:	02dc02dc 	.word	0x02dc02dc
  4290fc:	021b025a 	.word	0x021b025a
  429100:	02dc02dc 	.word	0x02dc02dc
  429104:	026e02dc 	.word	0x026e02dc
  429108:	02dc021b 	.word	0x02dc021b
  42910c:	027302dc 	.word	0x027302dc
  429110:	01f502dc 	.word	0x01f502dc
  429114:	02090182 	.word	0x02090182
  429118:	02dc02d7 	.word	0x02dc02d7
  42911c:	02dc029a 	.word	0x02dc029a
  429120:	02dc00a7 	.word	0x02dc00a7
  429124:	022e02dc 	.word	0x022e02dc
  429128:	f10a 0a08 	add.w	sl, sl, #8
  42912c:	9b03      	ldr	r3, [sp, #12]
  42912e:	442b      	add	r3, r5
  429130:	9303      	str	r3, [sp, #12]
  429132:	e786      	b.n	429042 <_vfiprintf_r+0xc2>
  429134:	4659      	mov	r1, fp
  429136:	9806      	ldr	r0, [sp, #24]
  429138:	f000 fdac 	bl	429c94 <__swsetup_r>
  42913c:	bb18      	cbnz	r0, 429186 <_vfiprintf_r+0x206>
  42913e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  429142:	f001 031a 	and.w	r3, r1, #26
  429146:	2b0a      	cmp	r3, #10
  429148:	f47f af4b 	bne.w	428fe2 <_vfiprintf_r+0x62>
  42914c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  429150:	2b00      	cmp	r3, #0
  429152:	f6ff af46 	blt.w	428fe2 <_vfiprintf_r+0x62>
  429156:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  42915a:	07db      	lsls	r3, r3, #31
  42915c:	d405      	bmi.n	42916a <_vfiprintf_r+0x1ea>
  42915e:	058f      	lsls	r7, r1, #22
  429160:	d403      	bmi.n	42916a <_vfiprintf_r+0x1ea>
  429162:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  429166:	f001 fac3 	bl	42a6f0 <__retarget_lock_release_recursive>
  42916a:	462b      	mov	r3, r5
  42916c:	4642      	mov	r2, r8
  42916e:	4659      	mov	r1, fp
  429170:	9806      	ldr	r0, [sp, #24]
  429172:	f000 fd4d 	bl	429c10 <__sbprintf>
  429176:	9003      	str	r0, [sp, #12]
  429178:	9803      	ldr	r0, [sp, #12]
  42917a:	b02d      	add	sp, #180	; 0xb4
  42917c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  429180:	f000 fef4 	bl	429f6c <__sinit>
  429184:	e709      	b.n	428f9a <_vfiprintf_r+0x1a>
  429186:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  42918a:	07d9      	lsls	r1, r3, #31
  42918c:	d404      	bmi.n	429198 <_vfiprintf_r+0x218>
  42918e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  429192:	059a      	lsls	r2, r3, #22
  429194:	f140 84aa 	bpl.w	429aec <_vfiprintf_r+0xb6c>
  429198:	f04f 33ff 	mov.w	r3, #4294967295
  42919c:	9303      	str	r3, [sp, #12]
  42919e:	9803      	ldr	r0, [sp, #12]
  4291a0:	b02d      	add	sp, #180	; 0xb4
  4291a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4291a6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4291aa:	f001 fa9f 	bl	42a6ec <__retarget_lock_acquire_recursive>
  4291ae:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4291b2:	b281      	uxth	r1, r0
  4291b4:	e6fb      	b.n	428fae <_vfiprintf_r+0x2e>
  4291b6:	4276      	negs	r6, r6
  4291b8:	9207      	str	r2, [sp, #28]
  4291ba:	f043 0304 	orr.w	r3, r3, #4
  4291be:	f898 2000 	ldrb.w	r2, [r8]
  4291c2:	e74f      	b.n	429064 <_vfiprintf_r+0xe4>
  4291c4:	9608      	str	r6, [sp, #32]
  4291c6:	069e      	lsls	r6, r3, #26
  4291c8:	f100 8450 	bmi.w	429a6c <_vfiprintf_r+0xaec>
  4291cc:	9907      	ldr	r1, [sp, #28]
  4291ce:	06dd      	lsls	r5, r3, #27
  4291d0:	460a      	mov	r2, r1
  4291d2:	f100 83ef 	bmi.w	4299b4 <_vfiprintf_r+0xa34>
  4291d6:	0658      	lsls	r0, r3, #25
  4291d8:	f140 83ec 	bpl.w	4299b4 <_vfiprintf_r+0xa34>
  4291dc:	880e      	ldrh	r6, [r1, #0]
  4291de:	3104      	adds	r1, #4
  4291e0:	2700      	movs	r7, #0
  4291e2:	2201      	movs	r2, #1
  4291e4:	9107      	str	r1, [sp, #28]
  4291e6:	f04f 0100 	mov.w	r1, #0
  4291ea:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4291ee:	2500      	movs	r5, #0
  4291f0:	1c61      	adds	r1, r4, #1
  4291f2:	f000 8116 	beq.w	429422 <_vfiprintf_r+0x4a2>
  4291f6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4291fa:	9102      	str	r1, [sp, #8]
  4291fc:	ea56 0107 	orrs.w	r1, r6, r7
  429200:	f040 8114 	bne.w	42942c <_vfiprintf_r+0x4ac>
  429204:	2c00      	cmp	r4, #0
  429206:	f040 835c 	bne.w	4298c2 <_vfiprintf_r+0x942>
  42920a:	2a00      	cmp	r2, #0
  42920c:	f040 83b7 	bne.w	42997e <_vfiprintf_r+0x9fe>
  429210:	f013 0301 	ands.w	r3, r3, #1
  429214:	9305      	str	r3, [sp, #20]
  429216:	f000 8457 	beq.w	429ac8 <_vfiprintf_r+0xb48>
  42921a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  42921e:	2330      	movs	r3, #48	; 0x30
  429220:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  429224:	9b05      	ldr	r3, [sp, #20]
  429226:	42a3      	cmp	r3, r4
  429228:	bfb8      	it	lt
  42922a:	4623      	movlt	r3, r4
  42922c:	9301      	str	r3, [sp, #4]
  42922e:	b10d      	cbz	r5, 429234 <_vfiprintf_r+0x2b4>
  429230:	3301      	adds	r3, #1
  429232:	9301      	str	r3, [sp, #4]
  429234:	9b02      	ldr	r3, [sp, #8]
  429236:	f013 0302 	ands.w	r3, r3, #2
  42923a:	9309      	str	r3, [sp, #36]	; 0x24
  42923c:	d002      	beq.n	429244 <_vfiprintf_r+0x2c4>
  42923e:	9b01      	ldr	r3, [sp, #4]
  429240:	3302      	adds	r3, #2
  429242:	9301      	str	r3, [sp, #4]
  429244:	9b02      	ldr	r3, [sp, #8]
  429246:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  42924a:	930a      	str	r3, [sp, #40]	; 0x28
  42924c:	f040 8217 	bne.w	42967e <_vfiprintf_r+0x6fe>
  429250:	9b08      	ldr	r3, [sp, #32]
  429252:	9a01      	ldr	r2, [sp, #4]
  429254:	1a9d      	subs	r5, r3, r2
  429256:	2d00      	cmp	r5, #0
  429258:	f340 8211 	ble.w	42967e <_vfiprintf_r+0x6fe>
  42925c:	2d10      	cmp	r5, #16
  42925e:	f340 8490 	ble.w	429b82 <_vfiprintf_r+0xc02>
  429262:	9b10      	ldr	r3, [sp, #64]	; 0x40
  429264:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429266:	4ec4      	ldr	r6, [pc, #784]	; (429578 <_vfiprintf_r+0x5f8>)
  429268:	46d6      	mov	lr, sl
  42926a:	2710      	movs	r7, #16
  42926c:	46a2      	mov	sl, r4
  42926e:	4619      	mov	r1, r3
  429270:	9c06      	ldr	r4, [sp, #24]
  429272:	e007      	b.n	429284 <_vfiprintf_r+0x304>
  429274:	f101 0c02 	add.w	ip, r1, #2
  429278:	f10e 0e08 	add.w	lr, lr, #8
  42927c:	4601      	mov	r1, r0
  42927e:	3d10      	subs	r5, #16
  429280:	2d10      	cmp	r5, #16
  429282:	dd11      	ble.n	4292a8 <_vfiprintf_r+0x328>
  429284:	1c48      	adds	r0, r1, #1
  429286:	3210      	adds	r2, #16
  429288:	2807      	cmp	r0, #7
  42928a:	9211      	str	r2, [sp, #68]	; 0x44
  42928c:	e88e 00c0 	stmia.w	lr, {r6, r7}
  429290:	9010      	str	r0, [sp, #64]	; 0x40
  429292:	ddef      	ble.n	429274 <_vfiprintf_r+0x2f4>
  429294:	2a00      	cmp	r2, #0
  429296:	f040 81e4 	bne.w	429662 <_vfiprintf_r+0x6e2>
  42929a:	3d10      	subs	r5, #16
  42929c:	2d10      	cmp	r5, #16
  42929e:	4611      	mov	r1, r2
  4292a0:	f04f 0c01 	mov.w	ip, #1
  4292a4:	46ce      	mov	lr, r9
  4292a6:	dced      	bgt.n	429284 <_vfiprintf_r+0x304>
  4292a8:	4654      	mov	r4, sl
  4292aa:	4661      	mov	r1, ip
  4292ac:	46f2      	mov	sl, lr
  4292ae:	442a      	add	r2, r5
  4292b0:	2907      	cmp	r1, #7
  4292b2:	9211      	str	r2, [sp, #68]	; 0x44
  4292b4:	f8ca 6000 	str.w	r6, [sl]
  4292b8:	f8ca 5004 	str.w	r5, [sl, #4]
  4292bc:	9110      	str	r1, [sp, #64]	; 0x40
  4292be:	f300 82ec 	bgt.w	42989a <_vfiprintf_r+0x91a>
  4292c2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4292c6:	f10a 0a08 	add.w	sl, sl, #8
  4292ca:	1c48      	adds	r0, r1, #1
  4292cc:	2d00      	cmp	r5, #0
  4292ce:	f040 81de 	bne.w	42968e <_vfiprintf_r+0x70e>
  4292d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4292d4:	2b00      	cmp	r3, #0
  4292d6:	f000 81f8 	beq.w	4296ca <_vfiprintf_r+0x74a>
  4292da:	3202      	adds	r2, #2
  4292dc:	a90e      	add	r1, sp, #56	; 0x38
  4292de:	2302      	movs	r3, #2
  4292e0:	2807      	cmp	r0, #7
  4292e2:	9211      	str	r2, [sp, #68]	; 0x44
  4292e4:	9010      	str	r0, [sp, #64]	; 0x40
  4292e6:	e88a 000a 	stmia.w	sl, {r1, r3}
  4292ea:	f340 81ea 	ble.w	4296c2 <_vfiprintf_r+0x742>
  4292ee:	2a00      	cmp	r2, #0
  4292f0:	f040 838c 	bne.w	429a0c <_vfiprintf_r+0xa8c>
  4292f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4292f6:	2b80      	cmp	r3, #128	; 0x80
  4292f8:	f04f 0001 	mov.w	r0, #1
  4292fc:	4611      	mov	r1, r2
  4292fe:	46ca      	mov	sl, r9
  429300:	f040 81e7 	bne.w	4296d2 <_vfiprintf_r+0x752>
  429304:	9b08      	ldr	r3, [sp, #32]
  429306:	9d01      	ldr	r5, [sp, #4]
  429308:	1b5e      	subs	r6, r3, r5
  42930a:	2e00      	cmp	r6, #0
  42930c:	f340 81e1 	ble.w	4296d2 <_vfiprintf_r+0x752>
  429310:	2e10      	cmp	r6, #16
  429312:	4d9a      	ldr	r5, [pc, #616]	; (42957c <_vfiprintf_r+0x5fc>)
  429314:	f340 8450 	ble.w	429bb8 <_vfiprintf_r+0xc38>
  429318:	46d4      	mov	ip, sl
  42931a:	2710      	movs	r7, #16
  42931c:	46a2      	mov	sl, r4
  42931e:	9c06      	ldr	r4, [sp, #24]
  429320:	e007      	b.n	429332 <_vfiprintf_r+0x3b2>
  429322:	f101 0e02 	add.w	lr, r1, #2
  429326:	f10c 0c08 	add.w	ip, ip, #8
  42932a:	4601      	mov	r1, r0
  42932c:	3e10      	subs	r6, #16
  42932e:	2e10      	cmp	r6, #16
  429330:	dd11      	ble.n	429356 <_vfiprintf_r+0x3d6>
  429332:	1c48      	adds	r0, r1, #1
  429334:	3210      	adds	r2, #16
  429336:	2807      	cmp	r0, #7
  429338:	9211      	str	r2, [sp, #68]	; 0x44
  42933a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  42933e:	9010      	str	r0, [sp, #64]	; 0x40
  429340:	ddef      	ble.n	429322 <_vfiprintf_r+0x3a2>
  429342:	2a00      	cmp	r2, #0
  429344:	f040 829d 	bne.w	429882 <_vfiprintf_r+0x902>
  429348:	3e10      	subs	r6, #16
  42934a:	2e10      	cmp	r6, #16
  42934c:	f04f 0e01 	mov.w	lr, #1
  429350:	4611      	mov	r1, r2
  429352:	46cc      	mov	ip, r9
  429354:	dced      	bgt.n	429332 <_vfiprintf_r+0x3b2>
  429356:	4654      	mov	r4, sl
  429358:	46e2      	mov	sl, ip
  42935a:	4432      	add	r2, r6
  42935c:	f1be 0f07 	cmp.w	lr, #7
  429360:	9211      	str	r2, [sp, #68]	; 0x44
  429362:	e88a 0060 	stmia.w	sl, {r5, r6}
  429366:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  42936a:	f300 8369 	bgt.w	429a40 <_vfiprintf_r+0xac0>
  42936e:	f10a 0a08 	add.w	sl, sl, #8
  429372:	f10e 0001 	add.w	r0, lr, #1
  429376:	4671      	mov	r1, lr
  429378:	e1ab      	b.n	4296d2 <_vfiprintf_r+0x752>
  42937a:	9608      	str	r6, [sp, #32]
  42937c:	f013 0220 	ands.w	r2, r3, #32
  429380:	f040 838c 	bne.w	429a9c <_vfiprintf_r+0xb1c>
  429384:	f013 0110 	ands.w	r1, r3, #16
  429388:	f040 831a 	bne.w	4299c0 <_vfiprintf_r+0xa40>
  42938c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  429390:	f000 8316 	beq.w	4299c0 <_vfiprintf_r+0xa40>
  429394:	9807      	ldr	r0, [sp, #28]
  429396:	460a      	mov	r2, r1
  429398:	4601      	mov	r1, r0
  42939a:	3104      	adds	r1, #4
  42939c:	8806      	ldrh	r6, [r0, #0]
  42939e:	9107      	str	r1, [sp, #28]
  4293a0:	2700      	movs	r7, #0
  4293a2:	e720      	b.n	4291e6 <_vfiprintf_r+0x266>
  4293a4:	9608      	str	r6, [sp, #32]
  4293a6:	f043 0310 	orr.w	r3, r3, #16
  4293aa:	e7e7      	b.n	42937c <_vfiprintf_r+0x3fc>
  4293ac:	9608      	str	r6, [sp, #32]
  4293ae:	f043 0310 	orr.w	r3, r3, #16
  4293b2:	e708      	b.n	4291c6 <_vfiprintf_r+0x246>
  4293b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4293b8:	f898 2000 	ldrb.w	r2, [r8]
  4293bc:	e652      	b.n	429064 <_vfiprintf_r+0xe4>
  4293be:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4293c2:	2600      	movs	r6, #0
  4293c4:	f818 2b01 	ldrb.w	r2, [r8], #1
  4293c8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4293cc:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4293d0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4293d4:	2909      	cmp	r1, #9
  4293d6:	d9f5      	bls.n	4293c4 <_vfiprintf_r+0x444>
  4293d8:	e646      	b.n	429068 <_vfiprintf_r+0xe8>
  4293da:	9608      	str	r6, [sp, #32]
  4293dc:	2800      	cmp	r0, #0
  4293de:	f040 8408 	bne.w	429bf2 <_vfiprintf_r+0xc72>
  4293e2:	f043 0310 	orr.w	r3, r3, #16
  4293e6:	069e      	lsls	r6, r3, #26
  4293e8:	f100 834c 	bmi.w	429a84 <_vfiprintf_r+0xb04>
  4293ec:	06dd      	lsls	r5, r3, #27
  4293ee:	f100 82f3 	bmi.w	4299d8 <_vfiprintf_r+0xa58>
  4293f2:	0658      	lsls	r0, r3, #25
  4293f4:	f140 82f0 	bpl.w	4299d8 <_vfiprintf_r+0xa58>
  4293f8:	9d07      	ldr	r5, [sp, #28]
  4293fa:	f9b5 6000 	ldrsh.w	r6, [r5]
  4293fe:	462a      	mov	r2, r5
  429400:	17f7      	asrs	r7, r6, #31
  429402:	3204      	adds	r2, #4
  429404:	4630      	mov	r0, r6
  429406:	4639      	mov	r1, r7
  429408:	9207      	str	r2, [sp, #28]
  42940a:	2800      	cmp	r0, #0
  42940c:	f171 0200 	sbcs.w	r2, r1, #0
  429410:	f2c0 835d 	blt.w	429ace <_vfiprintf_r+0xb4e>
  429414:	1c61      	adds	r1, r4, #1
  429416:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  42941a:	f04f 0201 	mov.w	r2, #1
  42941e:	f47f aeea 	bne.w	4291f6 <_vfiprintf_r+0x276>
  429422:	ea56 0107 	orrs.w	r1, r6, r7
  429426:	f000 824d 	beq.w	4298c4 <_vfiprintf_r+0x944>
  42942a:	9302      	str	r3, [sp, #8]
  42942c:	2a01      	cmp	r2, #1
  42942e:	f000 828c 	beq.w	42994a <_vfiprintf_r+0x9ca>
  429432:	2a02      	cmp	r2, #2
  429434:	f040 825c 	bne.w	4298f0 <_vfiprintf_r+0x970>
  429438:	980b      	ldr	r0, [sp, #44]	; 0x2c
  42943a:	46cb      	mov	fp, r9
  42943c:	0933      	lsrs	r3, r6, #4
  42943e:	f006 010f 	and.w	r1, r6, #15
  429442:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  429446:	093a      	lsrs	r2, r7, #4
  429448:	461e      	mov	r6, r3
  42944a:	4617      	mov	r7, r2
  42944c:	5c43      	ldrb	r3, [r0, r1]
  42944e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  429452:	ea56 0307 	orrs.w	r3, r6, r7
  429456:	d1f1      	bne.n	42943c <_vfiprintf_r+0x4bc>
  429458:	eba9 030b 	sub.w	r3, r9, fp
  42945c:	9305      	str	r3, [sp, #20]
  42945e:	e6e1      	b.n	429224 <_vfiprintf_r+0x2a4>
  429460:	2800      	cmp	r0, #0
  429462:	f040 83c0 	bne.w	429be6 <_vfiprintf_r+0xc66>
  429466:	0699      	lsls	r1, r3, #26
  429468:	f100 8367 	bmi.w	429b3a <_vfiprintf_r+0xbba>
  42946c:	06da      	lsls	r2, r3, #27
  42946e:	f100 80f1 	bmi.w	429654 <_vfiprintf_r+0x6d4>
  429472:	065b      	lsls	r3, r3, #25
  429474:	f140 80ee 	bpl.w	429654 <_vfiprintf_r+0x6d4>
  429478:	9a07      	ldr	r2, [sp, #28]
  42947a:	6813      	ldr	r3, [r2, #0]
  42947c:	3204      	adds	r2, #4
  42947e:	9207      	str	r2, [sp, #28]
  429480:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  429484:	801a      	strh	r2, [r3, #0]
  429486:	e5b8      	b.n	428ffa <_vfiprintf_r+0x7a>
  429488:	9807      	ldr	r0, [sp, #28]
  42948a:	4a3d      	ldr	r2, [pc, #244]	; (429580 <_vfiprintf_r+0x600>)
  42948c:	9608      	str	r6, [sp, #32]
  42948e:	920b      	str	r2, [sp, #44]	; 0x2c
  429490:	6806      	ldr	r6, [r0, #0]
  429492:	2278      	movs	r2, #120	; 0x78
  429494:	2130      	movs	r1, #48	; 0x30
  429496:	3004      	adds	r0, #4
  429498:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  42949c:	f043 0302 	orr.w	r3, r3, #2
  4294a0:	9007      	str	r0, [sp, #28]
  4294a2:	2700      	movs	r7, #0
  4294a4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4294a8:	2202      	movs	r2, #2
  4294aa:	e69c      	b.n	4291e6 <_vfiprintf_r+0x266>
  4294ac:	9608      	str	r6, [sp, #32]
  4294ae:	2800      	cmp	r0, #0
  4294b0:	d099      	beq.n	4293e6 <_vfiprintf_r+0x466>
  4294b2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4294b6:	e796      	b.n	4293e6 <_vfiprintf_r+0x466>
  4294b8:	f898 2000 	ldrb.w	r2, [r8]
  4294bc:	2d00      	cmp	r5, #0
  4294be:	f47f add1 	bne.w	429064 <_vfiprintf_r+0xe4>
  4294c2:	2001      	movs	r0, #1
  4294c4:	2520      	movs	r5, #32
  4294c6:	e5cd      	b.n	429064 <_vfiprintf_r+0xe4>
  4294c8:	f043 0301 	orr.w	r3, r3, #1
  4294cc:	f898 2000 	ldrb.w	r2, [r8]
  4294d0:	e5c8      	b.n	429064 <_vfiprintf_r+0xe4>
  4294d2:	9608      	str	r6, [sp, #32]
  4294d4:	2800      	cmp	r0, #0
  4294d6:	f040 8393 	bne.w	429c00 <_vfiprintf_r+0xc80>
  4294da:	4929      	ldr	r1, [pc, #164]	; (429580 <_vfiprintf_r+0x600>)
  4294dc:	910b      	str	r1, [sp, #44]	; 0x2c
  4294de:	069f      	lsls	r7, r3, #26
  4294e0:	f100 82e8 	bmi.w	429ab4 <_vfiprintf_r+0xb34>
  4294e4:	9807      	ldr	r0, [sp, #28]
  4294e6:	06de      	lsls	r6, r3, #27
  4294e8:	4601      	mov	r1, r0
  4294ea:	f100 8270 	bmi.w	4299ce <_vfiprintf_r+0xa4e>
  4294ee:	065d      	lsls	r5, r3, #25
  4294f0:	f140 826d 	bpl.w	4299ce <_vfiprintf_r+0xa4e>
  4294f4:	3104      	adds	r1, #4
  4294f6:	8806      	ldrh	r6, [r0, #0]
  4294f8:	9107      	str	r1, [sp, #28]
  4294fa:	2700      	movs	r7, #0
  4294fc:	07d8      	lsls	r0, r3, #31
  4294fe:	f140 8222 	bpl.w	429946 <_vfiprintf_r+0x9c6>
  429502:	ea56 0107 	orrs.w	r1, r6, r7
  429506:	f000 821e 	beq.w	429946 <_vfiprintf_r+0x9c6>
  42950a:	2130      	movs	r1, #48	; 0x30
  42950c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  429510:	f043 0302 	orr.w	r3, r3, #2
  429514:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  429518:	2202      	movs	r2, #2
  42951a:	e664      	b.n	4291e6 <_vfiprintf_r+0x266>
  42951c:	9608      	str	r6, [sp, #32]
  42951e:	2800      	cmp	r0, #0
  429520:	f040 836b 	bne.w	429bfa <_vfiprintf_r+0xc7a>
  429524:	4917      	ldr	r1, [pc, #92]	; (429584 <_vfiprintf_r+0x604>)
  429526:	910b      	str	r1, [sp, #44]	; 0x2c
  429528:	e7d9      	b.n	4294de <_vfiprintf_r+0x55e>
  42952a:	9907      	ldr	r1, [sp, #28]
  42952c:	9608      	str	r6, [sp, #32]
  42952e:	680a      	ldr	r2, [r1, #0]
  429530:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  429534:	f04f 0000 	mov.w	r0, #0
  429538:	460a      	mov	r2, r1
  42953a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  42953e:	3204      	adds	r2, #4
  429540:	2001      	movs	r0, #1
  429542:	9001      	str	r0, [sp, #4]
  429544:	9207      	str	r2, [sp, #28]
  429546:	9005      	str	r0, [sp, #20]
  429548:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  42954c:	9302      	str	r3, [sp, #8]
  42954e:	2400      	movs	r4, #0
  429550:	e670      	b.n	429234 <_vfiprintf_r+0x2b4>
  429552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  429556:	f898 2000 	ldrb.w	r2, [r8]
  42955a:	e583      	b.n	429064 <_vfiprintf_r+0xe4>
  42955c:	f898 2000 	ldrb.w	r2, [r8]
  429560:	2a6c      	cmp	r2, #108	; 0x6c
  429562:	bf03      	ittte	eq
  429564:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  429568:	f043 0320 	orreq.w	r3, r3, #32
  42956c:	f108 0801 	addeq.w	r8, r8, #1
  429570:	f043 0310 	orrne.w	r3, r3, #16
  429574:	e576      	b.n	429064 <_vfiprintf_r+0xe4>
  429576:	bf00      	nop
  429578:	00433db0 	.word	0x00433db0
  42957c:	00433dc0 	.word	0x00433dc0
  429580:	00433d94 	.word	0x00433d94
  429584:	00433d80 	.word	0x00433d80
  429588:	9907      	ldr	r1, [sp, #28]
  42958a:	680e      	ldr	r6, [r1, #0]
  42958c:	460a      	mov	r2, r1
  42958e:	2e00      	cmp	r6, #0
  429590:	f102 0204 	add.w	r2, r2, #4
  429594:	f6ff ae0f 	blt.w	4291b6 <_vfiprintf_r+0x236>
  429598:	9207      	str	r2, [sp, #28]
  42959a:	f898 2000 	ldrb.w	r2, [r8]
  42959e:	e561      	b.n	429064 <_vfiprintf_r+0xe4>
  4295a0:	f898 2000 	ldrb.w	r2, [r8]
  4295a4:	2001      	movs	r0, #1
  4295a6:	252b      	movs	r5, #43	; 0x2b
  4295a8:	e55c      	b.n	429064 <_vfiprintf_r+0xe4>
  4295aa:	9907      	ldr	r1, [sp, #28]
  4295ac:	9608      	str	r6, [sp, #32]
  4295ae:	f8d1 b000 	ldr.w	fp, [r1]
  4295b2:	f04f 0200 	mov.w	r2, #0
  4295b6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4295ba:	1d0e      	adds	r6, r1, #4
  4295bc:	f1bb 0f00 	cmp.w	fp, #0
  4295c0:	f000 82e5 	beq.w	429b8e <_vfiprintf_r+0xc0e>
  4295c4:	1c67      	adds	r7, r4, #1
  4295c6:	f000 82c4 	beq.w	429b52 <_vfiprintf_r+0xbd2>
  4295ca:	4622      	mov	r2, r4
  4295cc:	2100      	movs	r1, #0
  4295ce:	4658      	mov	r0, fp
  4295d0:	9301      	str	r3, [sp, #4]
  4295d2:	f001 f91d 	bl	42a810 <memchr>
  4295d6:	9b01      	ldr	r3, [sp, #4]
  4295d8:	2800      	cmp	r0, #0
  4295da:	f000 82e5 	beq.w	429ba8 <_vfiprintf_r+0xc28>
  4295de:	eba0 020b 	sub.w	r2, r0, fp
  4295e2:	9205      	str	r2, [sp, #20]
  4295e4:	9607      	str	r6, [sp, #28]
  4295e6:	9302      	str	r3, [sp, #8]
  4295e8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4295ec:	2400      	movs	r4, #0
  4295ee:	e619      	b.n	429224 <_vfiprintf_r+0x2a4>
  4295f0:	f898 2000 	ldrb.w	r2, [r8]
  4295f4:	2a2a      	cmp	r2, #42	; 0x2a
  4295f6:	f108 0701 	add.w	r7, r8, #1
  4295fa:	f000 82e9 	beq.w	429bd0 <_vfiprintf_r+0xc50>
  4295fe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  429602:	2909      	cmp	r1, #9
  429604:	46b8      	mov	r8, r7
  429606:	f04f 0400 	mov.w	r4, #0
  42960a:	f63f ad2d 	bhi.w	429068 <_vfiprintf_r+0xe8>
  42960e:	f818 2b01 	ldrb.w	r2, [r8], #1
  429612:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  429616:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  42961a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  42961e:	2909      	cmp	r1, #9
  429620:	d9f5      	bls.n	42960e <_vfiprintf_r+0x68e>
  429622:	e521      	b.n	429068 <_vfiprintf_r+0xe8>
  429624:	f043 0320 	orr.w	r3, r3, #32
  429628:	f898 2000 	ldrb.w	r2, [r8]
  42962c:	e51a      	b.n	429064 <_vfiprintf_r+0xe4>
  42962e:	9608      	str	r6, [sp, #32]
  429630:	2800      	cmp	r0, #0
  429632:	f040 82db 	bne.w	429bec <_vfiprintf_r+0xc6c>
  429636:	2a00      	cmp	r2, #0
  429638:	f000 80e7 	beq.w	42980a <_vfiprintf_r+0x88a>
  42963c:	2101      	movs	r1, #1
  42963e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  429642:	f04f 0200 	mov.w	r2, #0
  429646:	9101      	str	r1, [sp, #4]
  429648:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  42964c:	9105      	str	r1, [sp, #20]
  42964e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  429652:	e77b      	b.n	42954c <_vfiprintf_r+0x5cc>
  429654:	9a07      	ldr	r2, [sp, #28]
  429656:	6813      	ldr	r3, [r2, #0]
  429658:	3204      	adds	r2, #4
  42965a:	9207      	str	r2, [sp, #28]
  42965c:	9a03      	ldr	r2, [sp, #12]
  42965e:	601a      	str	r2, [r3, #0]
  429660:	e4cb      	b.n	428ffa <_vfiprintf_r+0x7a>
  429662:	aa0f      	add	r2, sp, #60	; 0x3c
  429664:	9904      	ldr	r1, [sp, #16]
  429666:	4620      	mov	r0, r4
  429668:	f7ff fc4a 	bl	428f00 <__sprint_r.part.0>
  42966c:	2800      	cmp	r0, #0
  42966e:	f040 8139 	bne.w	4298e4 <_vfiprintf_r+0x964>
  429672:	9910      	ldr	r1, [sp, #64]	; 0x40
  429674:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429676:	f101 0c01 	add.w	ip, r1, #1
  42967a:	46ce      	mov	lr, r9
  42967c:	e5ff      	b.n	42927e <_vfiprintf_r+0x2fe>
  42967e:	9910      	ldr	r1, [sp, #64]	; 0x40
  429680:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429682:	1c48      	adds	r0, r1, #1
  429684:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  429688:	2d00      	cmp	r5, #0
  42968a:	f43f ae22 	beq.w	4292d2 <_vfiprintf_r+0x352>
  42968e:	3201      	adds	r2, #1
  429690:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  429694:	2101      	movs	r1, #1
  429696:	2807      	cmp	r0, #7
  429698:	9211      	str	r2, [sp, #68]	; 0x44
  42969a:	9010      	str	r0, [sp, #64]	; 0x40
  42969c:	f8ca 5000 	str.w	r5, [sl]
  4296a0:	f8ca 1004 	str.w	r1, [sl, #4]
  4296a4:	f340 8108 	ble.w	4298b8 <_vfiprintf_r+0x938>
  4296a8:	2a00      	cmp	r2, #0
  4296aa:	f040 81bc 	bne.w	429a26 <_vfiprintf_r+0xaa6>
  4296ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4296b0:	2b00      	cmp	r3, #0
  4296b2:	f43f ae1f 	beq.w	4292f4 <_vfiprintf_r+0x374>
  4296b6:	ab0e      	add	r3, sp, #56	; 0x38
  4296b8:	2202      	movs	r2, #2
  4296ba:	4608      	mov	r0, r1
  4296bc:	931c      	str	r3, [sp, #112]	; 0x70
  4296be:	921d      	str	r2, [sp, #116]	; 0x74
  4296c0:	46ca      	mov	sl, r9
  4296c2:	4601      	mov	r1, r0
  4296c4:	f10a 0a08 	add.w	sl, sl, #8
  4296c8:	3001      	adds	r0, #1
  4296ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4296cc:	2b80      	cmp	r3, #128	; 0x80
  4296ce:	f43f ae19 	beq.w	429304 <_vfiprintf_r+0x384>
  4296d2:	9b05      	ldr	r3, [sp, #20]
  4296d4:	1ae4      	subs	r4, r4, r3
  4296d6:	2c00      	cmp	r4, #0
  4296d8:	dd2e      	ble.n	429738 <_vfiprintf_r+0x7b8>
  4296da:	2c10      	cmp	r4, #16
  4296dc:	4db3      	ldr	r5, [pc, #716]	; (4299ac <_vfiprintf_r+0xa2c>)
  4296de:	dd1e      	ble.n	42971e <_vfiprintf_r+0x79e>
  4296e0:	46d6      	mov	lr, sl
  4296e2:	2610      	movs	r6, #16
  4296e4:	9f06      	ldr	r7, [sp, #24]
  4296e6:	f8dd a010 	ldr.w	sl, [sp, #16]
  4296ea:	e006      	b.n	4296fa <_vfiprintf_r+0x77a>
  4296ec:	1c88      	adds	r0, r1, #2
  4296ee:	f10e 0e08 	add.w	lr, lr, #8
  4296f2:	4619      	mov	r1, r3
  4296f4:	3c10      	subs	r4, #16
  4296f6:	2c10      	cmp	r4, #16
  4296f8:	dd10      	ble.n	42971c <_vfiprintf_r+0x79c>
  4296fa:	1c4b      	adds	r3, r1, #1
  4296fc:	3210      	adds	r2, #16
  4296fe:	2b07      	cmp	r3, #7
  429700:	9211      	str	r2, [sp, #68]	; 0x44
  429702:	e88e 0060 	stmia.w	lr, {r5, r6}
  429706:	9310      	str	r3, [sp, #64]	; 0x40
  429708:	ddf0      	ble.n	4296ec <_vfiprintf_r+0x76c>
  42970a:	2a00      	cmp	r2, #0
  42970c:	d165      	bne.n	4297da <_vfiprintf_r+0x85a>
  42970e:	3c10      	subs	r4, #16
  429710:	2c10      	cmp	r4, #16
  429712:	f04f 0001 	mov.w	r0, #1
  429716:	4611      	mov	r1, r2
  429718:	46ce      	mov	lr, r9
  42971a:	dcee      	bgt.n	4296fa <_vfiprintf_r+0x77a>
  42971c:	46f2      	mov	sl, lr
  42971e:	4422      	add	r2, r4
  429720:	2807      	cmp	r0, #7
  429722:	9211      	str	r2, [sp, #68]	; 0x44
  429724:	f8ca 5000 	str.w	r5, [sl]
  429728:	f8ca 4004 	str.w	r4, [sl, #4]
  42972c:	9010      	str	r0, [sp, #64]	; 0x40
  42972e:	f300 8085 	bgt.w	42983c <_vfiprintf_r+0x8bc>
  429732:	f10a 0a08 	add.w	sl, sl, #8
  429736:	3001      	adds	r0, #1
  429738:	9905      	ldr	r1, [sp, #20]
  42973a:	f8ca b000 	str.w	fp, [sl]
  42973e:	440a      	add	r2, r1
  429740:	2807      	cmp	r0, #7
  429742:	9211      	str	r2, [sp, #68]	; 0x44
  429744:	f8ca 1004 	str.w	r1, [sl, #4]
  429748:	9010      	str	r0, [sp, #64]	; 0x40
  42974a:	f340 8082 	ble.w	429852 <_vfiprintf_r+0x8d2>
  42974e:	2a00      	cmp	r2, #0
  429750:	f040 8118 	bne.w	429984 <_vfiprintf_r+0xa04>
  429754:	9b02      	ldr	r3, [sp, #8]
  429756:	9210      	str	r2, [sp, #64]	; 0x40
  429758:	0758      	lsls	r0, r3, #29
  42975a:	d535      	bpl.n	4297c8 <_vfiprintf_r+0x848>
  42975c:	9b08      	ldr	r3, [sp, #32]
  42975e:	9901      	ldr	r1, [sp, #4]
  429760:	1a5c      	subs	r4, r3, r1
  429762:	2c00      	cmp	r4, #0
  429764:	f340 80e7 	ble.w	429936 <_vfiprintf_r+0x9b6>
  429768:	46ca      	mov	sl, r9
  42976a:	2c10      	cmp	r4, #16
  42976c:	f340 8218 	ble.w	429ba0 <_vfiprintf_r+0xc20>
  429770:	9910      	ldr	r1, [sp, #64]	; 0x40
  429772:	4e8f      	ldr	r6, [pc, #572]	; (4299b0 <_vfiprintf_r+0xa30>)
  429774:	9f06      	ldr	r7, [sp, #24]
  429776:	f8dd b010 	ldr.w	fp, [sp, #16]
  42977a:	2510      	movs	r5, #16
  42977c:	e006      	b.n	42978c <_vfiprintf_r+0x80c>
  42977e:	1c88      	adds	r0, r1, #2
  429780:	f10a 0a08 	add.w	sl, sl, #8
  429784:	4619      	mov	r1, r3
  429786:	3c10      	subs	r4, #16
  429788:	2c10      	cmp	r4, #16
  42978a:	dd11      	ble.n	4297b0 <_vfiprintf_r+0x830>
  42978c:	1c4b      	adds	r3, r1, #1
  42978e:	3210      	adds	r2, #16
  429790:	2b07      	cmp	r3, #7
  429792:	9211      	str	r2, [sp, #68]	; 0x44
  429794:	f8ca 6000 	str.w	r6, [sl]
  429798:	f8ca 5004 	str.w	r5, [sl, #4]
  42979c:	9310      	str	r3, [sp, #64]	; 0x40
  42979e:	ddee      	ble.n	42977e <_vfiprintf_r+0x7fe>
  4297a0:	bb42      	cbnz	r2, 4297f4 <_vfiprintf_r+0x874>
  4297a2:	3c10      	subs	r4, #16
  4297a4:	2c10      	cmp	r4, #16
  4297a6:	f04f 0001 	mov.w	r0, #1
  4297aa:	4611      	mov	r1, r2
  4297ac:	46ca      	mov	sl, r9
  4297ae:	dced      	bgt.n	42978c <_vfiprintf_r+0x80c>
  4297b0:	4422      	add	r2, r4
  4297b2:	2807      	cmp	r0, #7
  4297b4:	9211      	str	r2, [sp, #68]	; 0x44
  4297b6:	f8ca 6000 	str.w	r6, [sl]
  4297ba:	f8ca 4004 	str.w	r4, [sl, #4]
  4297be:	9010      	str	r0, [sp, #64]	; 0x40
  4297c0:	dd51      	ble.n	429866 <_vfiprintf_r+0x8e6>
  4297c2:	2a00      	cmp	r2, #0
  4297c4:	f040 819b 	bne.w	429afe <_vfiprintf_r+0xb7e>
  4297c8:	9b03      	ldr	r3, [sp, #12]
  4297ca:	9a08      	ldr	r2, [sp, #32]
  4297cc:	9901      	ldr	r1, [sp, #4]
  4297ce:	428a      	cmp	r2, r1
  4297d0:	bfac      	ite	ge
  4297d2:	189b      	addge	r3, r3, r2
  4297d4:	185b      	addlt	r3, r3, r1
  4297d6:	9303      	str	r3, [sp, #12]
  4297d8:	e04e      	b.n	429878 <_vfiprintf_r+0x8f8>
  4297da:	aa0f      	add	r2, sp, #60	; 0x3c
  4297dc:	4651      	mov	r1, sl
  4297de:	4638      	mov	r0, r7
  4297e0:	f7ff fb8e 	bl	428f00 <__sprint_r.part.0>
  4297e4:	2800      	cmp	r0, #0
  4297e6:	f040 813f 	bne.w	429a68 <_vfiprintf_r+0xae8>
  4297ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4297ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4297ee:	1c48      	adds	r0, r1, #1
  4297f0:	46ce      	mov	lr, r9
  4297f2:	e77f      	b.n	4296f4 <_vfiprintf_r+0x774>
  4297f4:	aa0f      	add	r2, sp, #60	; 0x3c
  4297f6:	4659      	mov	r1, fp
  4297f8:	4638      	mov	r0, r7
  4297fa:	f7ff fb81 	bl	428f00 <__sprint_r.part.0>
  4297fe:	b960      	cbnz	r0, 42981a <_vfiprintf_r+0x89a>
  429800:	9910      	ldr	r1, [sp, #64]	; 0x40
  429802:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429804:	1c48      	adds	r0, r1, #1
  429806:	46ca      	mov	sl, r9
  429808:	e7bd      	b.n	429786 <_vfiprintf_r+0x806>
  42980a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  42980c:	f8dd b010 	ldr.w	fp, [sp, #16]
  429810:	2b00      	cmp	r3, #0
  429812:	f040 81d4 	bne.w	429bbe <_vfiprintf_r+0xc3e>
  429816:	2300      	movs	r3, #0
  429818:	9310      	str	r3, [sp, #64]	; 0x40
  42981a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  42981e:	f013 0f01 	tst.w	r3, #1
  429822:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  429826:	d102      	bne.n	42982e <_vfiprintf_r+0x8ae>
  429828:	059a      	lsls	r2, r3, #22
  42982a:	f140 80de 	bpl.w	4299ea <_vfiprintf_r+0xa6a>
  42982e:	065b      	lsls	r3, r3, #25
  429830:	f53f acb2 	bmi.w	429198 <_vfiprintf_r+0x218>
  429834:	9803      	ldr	r0, [sp, #12]
  429836:	b02d      	add	sp, #180	; 0xb4
  429838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42983c:	2a00      	cmp	r2, #0
  42983e:	f040 8106 	bne.w	429a4e <_vfiprintf_r+0xace>
  429842:	9a05      	ldr	r2, [sp, #20]
  429844:	921d      	str	r2, [sp, #116]	; 0x74
  429846:	2301      	movs	r3, #1
  429848:	9211      	str	r2, [sp, #68]	; 0x44
  42984a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  42984e:	9310      	str	r3, [sp, #64]	; 0x40
  429850:	46ca      	mov	sl, r9
  429852:	f10a 0a08 	add.w	sl, sl, #8
  429856:	9b02      	ldr	r3, [sp, #8]
  429858:	0759      	lsls	r1, r3, #29
  42985a:	d504      	bpl.n	429866 <_vfiprintf_r+0x8e6>
  42985c:	9b08      	ldr	r3, [sp, #32]
  42985e:	9901      	ldr	r1, [sp, #4]
  429860:	1a5c      	subs	r4, r3, r1
  429862:	2c00      	cmp	r4, #0
  429864:	dc81      	bgt.n	42976a <_vfiprintf_r+0x7ea>
  429866:	9b03      	ldr	r3, [sp, #12]
  429868:	9908      	ldr	r1, [sp, #32]
  42986a:	9801      	ldr	r0, [sp, #4]
  42986c:	4281      	cmp	r1, r0
  42986e:	bfac      	ite	ge
  429870:	185b      	addge	r3, r3, r1
  429872:	181b      	addlt	r3, r3, r0
  429874:	9303      	str	r3, [sp, #12]
  429876:	bb72      	cbnz	r2, 4298d6 <_vfiprintf_r+0x956>
  429878:	2300      	movs	r3, #0
  42987a:	9310      	str	r3, [sp, #64]	; 0x40
  42987c:	46ca      	mov	sl, r9
  42987e:	f7ff bbbc 	b.w	428ffa <_vfiprintf_r+0x7a>
  429882:	aa0f      	add	r2, sp, #60	; 0x3c
  429884:	9904      	ldr	r1, [sp, #16]
  429886:	4620      	mov	r0, r4
  429888:	f7ff fb3a 	bl	428f00 <__sprint_r.part.0>
  42988c:	bb50      	cbnz	r0, 4298e4 <_vfiprintf_r+0x964>
  42988e:	9910      	ldr	r1, [sp, #64]	; 0x40
  429890:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429892:	f101 0e01 	add.w	lr, r1, #1
  429896:	46cc      	mov	ip, r9
  429898:	e548      	b.n	42932c <_vfiprintf_r+0x3ac>
  42989a:	2a00      	cmp	r2, #0
  42989c:	f040 8140 	bne.w	429b20 <_vfiprintf_r+0xba0>
  4298a0:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4298a4:	2900      	cmp	r1, #0
  4298a6:	f000 811b 	beq.w	429ae0 <_vfiprintf_r+0xb60>
  4298aa:	2201      	movs	r2, #1
  4298ac:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4298b0:	4610      	mov	r0, r2
  4298b2:	921d      	str	r2, [sp, #116]	; 0x74
  4298b4:	911c      	str	r1, [sp, #112]	; 0x70
  4298b6:	46ca      	mov	sl, r9
  4298b8:	4601      	mov	r1, r0
  4298ba:	f10a 0a08 	add.w	sl, sl, #8
  4298be:	3001      	adds	r0, #1
  4298c0:	e507      	b.n	4292d2 <_vfiprintf_r+0x352>
  4298c2:	9b02      	ldr	r3, [sp, #8]
  4298c4:	2a01      	cmp	r2, #1
  4298c6:	f000 8098 	beq.w	4299fa <_vfiprintf_r+0xa7a>
  4298ca:	2a02      	cmp	r2, #2
  4298cc:	d10d      	bne.n	4298ea <_vfiprintf_r+0x96a>
  4298ce:	9302      	str	r3, [sp, #8]
  4298d0:	2600      	movs	r6, #0
  4298d2:	2700      	movs	r7, #0
  4298d4:	e5b0      	b.n	429438 <_vfiprintf_r+0x4b8>
  4298d6:	aa0f      	add	r2, sp, #60	; 0x3c
  4298d8:	9904      	ldr	r1, [sp, #16]
  4298da:	9806      	ldr	r0, [sp, #24]
  4298dc:	f7ff fb10 	bl	428f00 <__sprint_r.part.0>
  4298e0:	2800      	cmp	r0, #0
  4298e2:	d0c9      	beq.n	429878 <_vfiprintf_r+0x8f8>
  4298e4:	f8dd b010 	ldr.w	fp, [sp, #16]
  4298e8:	e797      	b.n	42981a <_vfiprintf_r+0x89a>
  4298ea:	9302      	str	r3, [sp, #8]
  4298ec:	2600      	movs	r6, #0
  4298ee:	2700      	movs	r7, #0
  4298f0:	4649      	mov	r1, r9
  4298f2:	e000      	b.n	4298f6 <_vfiprintf_r+0x976>
  4298f4:	4659      	mov	r1, fp
  4298f6:	08f2      	lsrs	r2, r6, #3
  4298f8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4298fc:	08f8      	lsrs	r0, r7, #3
  4298fe:	f006 0307 	and.w	r3, r6, #7
  429902:	4607      	mov	r7, r0
  429904:	4616      	mov	r6, r2
  429906:	3330      	adds	r3, #48	; 0x30
  429908:	ea56 0207 	orrs.w	r2, r6, r7
  42990c:	f801 3c01 	strb.w	r3, [r1, #-1]
  429910:	f101 3bff 	add.w	fp, r1, #4294967295
  429914:	d1ee      	bne.n	4298f4 <_vfiprintf_r+0x974>
  429916:	9a02      	ldr	r2, [sp, #8]
  429918:	07d6      	lsls	r6, r2, #31
  42991a:	f57f ad9d 	bpl.w	429458 <_vfiprintf_r+0x4d8>
  42991e:	2b30      	cmp	r3, #48	; 0x30
  429920:	f43f ad9a 	beq.w	429458 <_vfiprintf_r+0x4d8>
  429924:	3902      	subs	r1, #2
  429926:	2330      	movs	r3, #48	; 0x30
  429928:	f80b 3c01 	strb.w	r3, [fp, #-1]
  42992c:	eba9 0301 	sub.w	r3, r9, r1
  429930:	9305      	str	r3, [sp, #20]
  429932:	468b      	mov	fp, r1
  429934:	e476      	b.n	429224 <_vfiprintf_r+0x2a4>
  429936:	9b03      	ldr	r3, [sp, #12]
  429938:	9a08      	ldr	r2, [sp, #32]
  42993a:	428a      	cmp	r2, r1
  42993c:	bfac      	ite	ge
  42993e:	189b      	addge	r3, r3, r2
  429940:	185b      	addlt	r3, r3, r1
  429942:	9303      	str	r3, [sp, #12]
  429944:	e798      	b.n	429878 <_vfiprintf_r+0x8f8>
  429946:	2202      	movs	r2, #2
  429948:	e44d      	b.n	4291e6 <_vfiprintf_r+0x266>
  42994a:	2f00      	cmp	r7, #0
  42994c:	bf08      	it	eq
  42994e:	2e0a      	cmpeq	r6, #10
  429950:	d352      	bcc.n	4299f8 <_vfiprintf_r+0xa78>
  429952:	46cb      	mov	fp, r9
  429954:	4630      	mov	r0, r6
  429956:	4639      	mov	r1, r7
  429958:	220a      	movs	r2, #10
  42995a:	2300      	movs	r3, #0
  42995c:	f7fe f9a4 	bl	427ca8 <__aeabi_uldivmod>
  429960:	3230      	adds	r2, #48	; 0x30
  429962:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  429966:	4630      	mov	r0, r6
  429968:	4639      	mov	r1, r7
  42996a:	2300      	movs	r3, #0
  42996c:	220a      	movs	r2, #10
  42996e:	f7fe f99b 	bl	427ca8 <__aeabi_uldivmod>
  429972:	4606      	mov	r6, r0
  429974:	460f      	mov	r7, r1
  429976:	ea56 0307 	orrs.w	r3, r6, r7
  42997a:	d1eb      	bne.n	429954 <_vfiprintf_r+0x9d4>
  42997c:	e56c      	b.n	429458 <_vfiprintf_r+0x4d8>
  42997e:	9405      	str	r4, [sp, #20]
  429980:	46cb      	mov	fp, r9
  429982:	e44f      	b.n	429224 <_vfiprintf_r+0x2a4>
  429984:	aa0f      	add	r2, sp, #60	; 0x3c
  429986:	9904      	ldr	r1, [sp, #16]
  429988:	9806      	ldr	r0, [sp, #24]
  42998a:	f7ff fab9 	bl	428f00 <__sprint_r.part.0>
  42998e:	2800      	cmp	r0, #0
  429990:	d1a8      	bne.n	4298e4 <_vfiprintf_r+0x964>
  429992:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429994:	46ca      	mov	sl, r9
  429996:	e75e      	b.n	429856 <_vfiprintf_r+0x8d6>
  429998:	aa0f      	add	r2, sp, #60	; 0x3c
  42999a:	9904      	ldr	r1, [sp, #16]
  42999c:	9806      	ldr	r0, [sp, #24]
  42999e:	f7ff faaf 	bl	428f00 <__sprint_r.part.0>
  4299a2:	2800      	cmp	r0, #0
  4299a4:	d19e      	bne.n	4298e4 <_vfiprintf_r+0x964>
  4299a6:	46ca      	mov	sl, r9
  4299a8:	f7ff bbc0 	b.w	42912c <_vfiprintf_r+0x1ac>
  4299ac:	00433dc0 	.word	0x00433dc0
  4299b0:	00433db0 	.word	0x00433db0
  4299b4:	3104      	adds	r1, #4
  4299b6:	6816      	ldr	r6, [r2, #0]
  4299b8:	9107      	str	r1, [sp, #28]
  4299ba:	2201      	movs	r2, #1
  4299bc:	2700      	movs	r7, #0
  4299be:	e412      	b.n	4291e6 <_vfiprintf_r+0x266>
  4299c0:	9807      	ldr	r0, [sp, #28]
  4299c2:	4601      	mov	r1, r0
  4299c4:	3104      	adds	r1, #4
  4299c6:	6806      	ldr	r6, [r0, #0]
  4299c8:	9107      	str	r1, [sp, #28]
  4299ca:	2700      	movs	r7, #0
  4299cc:	e40b      	b.n	4291e6 <_vfiprintf_r+0x266>
  4299ce:	680e      	ldr	r6, [r1, #0]
  4299d0:	3104      	adds	r1, #4
  4299d2:	9107      	str	r1, [sp, #28]
  4299d4:	2700      	movs	r7, #0
  4299d6:	e591      	b.n	4294fc <_vfiprintf_r+0x57c>
  4299d8:	9907      	ldr	r1, [sp, #28]
  4299da:	680e      	ldr	r6, [r1, #0]
  4299dc:	460a      	mov	r2, r1
  4299de:	17f7      	asrs	r7, r6, #31
  4299e0:	3204      	adds	r2, #4
  4299e2:	9207      	str	r2, [sp, #28]
  4299e4:	4630      	mov	r0, r6
  4299e6:	4639      	mov	r1, r7
  4299e8:	e50f      	b.n	42940a <_vfiprintf_r+0x48a>
  4299ea:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4299ee:	f000 fe7f 	bl	42a6f0 <__retarget_lock_release_recursive>
  4299f2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4299f6:	e71a      	b.n	42982e <_vfiprintf_r+0x8ae>
  4299f8:	9b02      	ldr	r3, [sp, #8]
  4299fa:	9302      	str	r3, [sp, #8]
  4299fc:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  429a00:	3630      	adds	r6, #48	; 0x30
  429a02:	2301      	movs	r3, #1
  429a04:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  429a08:	9305      	str	r3, [sp, #20]
  429a0a:	e40b      	b.n	429224 <_vfiprintf_r+0x2a4>
  429a0c:	aa0f      	add	r2, sp, #60	; 0x3c
  429a0e:	9904      	ldr	r1, [sp, #16]
  429a10:	9806      	ldr	r0, [sp, #24]
  429a12:	f7ff fa75 	bl	428f00 <__sprint_r.part.0>
  429a16:	2800      	cmp	r0, #0
  429a18:	f47f af64 	bne.w	4298e4 <_vfiprintf_r+0x964>
  429a1c:	9910      	ldr	r1, [sp, #64]	; 0x40
  429a1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429a20:	1c48      	adds	r0, r1, #1
  429a22:	46ca      	mov	sl, r9
  429a24:	e651      	b.n	4296ca <_vfiprintf_r+0x74a>
  429a26:	aa0f      	add	r2, sp, #60	; 0x3c
  429a28:	9904      	ldr	r1, [sp, #16]
  429a2a:	9806      	ldr	r0, [sp, #24]
  429a2c:	f7ff fa68 	bl	428f00 <__sprint_r.part.0>
  429a30:	2800      	cmp	r0, #0
  429a32:	f47f af57 	bne.w	4298e4 <_vfiprintf_r+0x964>
  429a36:	9910      	ldr	r1, [sp, #64]	; 0x40
  429a38:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429a3a:	1c48      	adds	r0, r1, #1
  429a3c:	46ca      	mov	sl, r9
  429a3e:	e448      	b.n	4292d2 <_vfiprintf_r+0x352>
  429a40:	2a00      	cmp	r2, #0
  429a42:	f040 8091 	bne.w	429b68 <_vfiprintf_r+0xbe8>
  429a46:	2001      	movs	r0, #1
  429a48:	4611      	mov	r1, r2
  429a4a:	46ca      	mov	sl, r9
  429a4c:	e641      	b.n	4296d2 <_vfiprintf_r+0x752>
  429a4e:	aa0f      	add	r2, sp, #60	; 0x3c
  429a50:	9904      	ldr	r1, [sp, #16]
  429a52:	9806      	ldr	r0, [sp, #24]
  429a54:	f7ff fa54 	bl	428f00 <__sprint_r.part.0>
  429a58:	2800      	cmp	r0, #0
  429a5a:	f47f af43 	bne.w	4298e4 <_vfiprintf_r+0x964>
  429a5e:	9810      	ldr	r0, [sp, #64]	; 0x40
  429a60:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429a62:	3001      	adds	r0, #1
  429a64:	46ca      	mov	sl, r9
  429a66:	e667      	b.n	429738 <_vfiprintf_r+0x7b8>
  429a68:	46d3      	mov	fp, sl
  429a6a:	e6d6      	b.n	42981a <_vfiprintf_r+0x89a>
  429a6c:	9e07      	ldr	r6, [sp, #28]
  429a6e:	3607      	adds	r6, #7
  429a70:	f026 0207 	bic.w	r2, r6, #7
  429a74:	f102 0108 	add.w	r1, r2, #8
  429a78:	e9d2 6700 	ldrd	r6, r7, [r2]
  429a7c:	9107      	str	r1, [sp, #28]
  429a7e:	2201      	movs	r2, #1
  429a80:	f7ff bbb1 	b.w	4291e6 <_vfiprintf_r+0x266>
  429a84:	9e07      	ldr	r6, [sp, #28]
  429a86:	3607      	adds	r6, #7
  429a88:	f026 0607 	bic.w	r6, r6, #7
  429a8c:	e9d6 0100 	ldrd	r0, r1, [r6]
  429a90:	f106 0208 	add.w	r2, r6, #8
  429a94:	9207      	str	r2, [sp, #28]
  429a96:	4606      	mov	r6, r0
  429a98:	460f      	mov	r7, r1
  429a9a:	e4b6      	b.n	42940a <_vfiprintf_r+0x48a>
  429a9c:	9e07      	ldr	r6, [sp, #28]
  429a9e:	3607      	adds	r6, #7
  429aa0:	f026 0207 	bic.w	r2, r6, #7
  429aa4:	f102 0108 	add.w	r1, r2, #8
  429aa8:	e9d2 6700 	ldrd	r6, r7, [r2]
  429aac:	9107      	str	r1, [sp, #28]
  429aae:	2200      	movs	r2, #0
  429ab0:	f7ff bb99 	b.w	4291e6 <_vfiprintf_r+0x266>
  429ab4:	9e07      	ldr	r6, [sp, #28]
  429ab6:	3607      	adds	r6, #7
  429ab8:	f026 0107 	bic.w	r1, r6, #7
  429abc:	f101 0008 	add.w	r0, r1, #8
  429ac0:	9007      	str	r0, [sp, #28]
  429ac2:	e9d1 6700 	ldrd	r6, r7, [r1]
  429ac6:	e519      	b.n	4294fc <_vfiprintf_r+0x57c>
  429ac8:	46cb      	mov	fp, r9
  429aca:	f7ff bbab 	b.w	429224 <_vfiprintf_r+0x2a4>
  429ace:	252d      	movs	r5, #45	; 0x2d
  429ad0:	4276      	negs	r6, r6
  429ad2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  429ad6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  429ada:	2201      	movs	r2, #1
  429adc:	f7ff bb88 	b.w	4291f0 <_vfiprintf_r+0x270>
  429ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  429ae2:	b9b3      	cbnz	r3, 429b12 <_vfiprintf_r+0xb92>
  429ae4:	4611      	mov	r1, r2
  429ae6:	2001      	movs	r0, #1
  429ae8:	46ca      	mov	sl, r9
  429aea:	e5f2      	b.n	4296d2 <_vfiprintf_r+0x752>
  429aec:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  429af0:	f000 fdfe 	bl	42a6f0 <__retarget_lock_release_recursive>
  429af4:	f04f 33ff 	mov.w	r3, #4294967295
  429af8:	9303      	str	r3, [sp, #12]
  429afa:	f7ff bb50 	b.w	42919e <_vfiprintf_r+0x21e>
  429afe:	aa0f      	add	r2, sp, #60	; 0x3c
  429b00:	9904      	ldr	r1, [sp, #16]
  429b02:	9806      	ldr	r0, [sp, #24]
  429b04:	f7ff f9fc 	bl	428f00 <__sprint_r.part.0>
  429b08:	2800      	cmp	r0, #0
  429b0a:	f47f aeeb 	bne.w	4298e4 <_vfiprintf_r+0x964>
  429b0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429b10:	e6a9      	b.n	429866 <_vfiprintf_r+0x8e6>
  429b12:	ab0e      	add	r3, sp, #56	; 0x38
  429b14:	2202      	movs	r2, #2
  429b16:	931c      	str	r3, [sp, #112]	; 0x70
  429b18:	921d      	str	r2, [sp, #116]	; 0x74
  429b1a:	2001      	movs	r0, #1
  429b1c:	46ca      	mov	sl, r9
  429b1e:	e5d0      	b.n	4296c2 <_vfiprintf_r+0x742>
  429b20:	aa0f      	add	r2, sp, #60	; 0x3c
  429b22:	9904      	ldr	r1, [sp, #16]
  429b24:	9806      	ldr	r0, [sp, #24]
  429b26:	f7ff f9eb 	bl	428f00 <__sprint_r.part.0>
  429b2a:	2800      	cmp	r0, #0
  429b2c:	f47f aeda 	bne.w	4298e4 <_vfiprintf_r+0x964>
  429b30:	9910      	ldr	r1, [sp, #64]	; 0x40
  429b32:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429b34:	1c48      	adds	r0, r1, #1
  429b36:	46ca      	mov	sl, r9
  429b38:	e5a4      	b.n	429684 <_vfiprintf_r+0x704>
  429b3a:	9a07      	ldr	r2, [sp, #28]
  429b3c:	9903      	ldr	r1, [sp, #12]
  429b3e:	6813      	ldr	r3, [r2, #0]
  429b40:	17cd      	asrs	r5, r1, #31
  429b42:	4608      	mov	r0, r1
  429b44:	3204      	adds	r2, #4
  429b46:	4629      	mov	r1, r5
  429b48:	9207      	str	r2, [sp, #28]
  429b4a:	e9c3 0100 	strd	r0, r1, [r3]
  429b4e:	f7ff ba54 	b.w	428ffa <_vfiprintf_r+0x7a>
  429b52:	4658      	mov	r0, fp
  429b54:	9607      	str	r6, [sp, #28]
  429b56:	9302      	str	r3, [sp, #8]
  429b58:	f7ff f932 	bl	428dc0 <strlen>
  429b5c:	2400      	movs	r4, #0
  429b5e:	9005      	str	r0, [sp, #20]
  429b60:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  429b64:	f7ff bb5e 	b.w	429224 <_vfiprintf_r+0x2a4>
  429b68:	aa0f      	add	r2, sp, #60	; 0x3c
  429b6a:	9904      	ldr	r1, [sp, #16]
  429b6c:	9806      	ldr	r0, [sp, #24]
  429b6e:	f7ff f9c7 	bl	428f00 <__sprint_r.part.0>
  429b72:	2800      	cmp	r0, #0
  429b74:	f47f aeb6 	bne.w	4298e4 <_vfiprintf_r+0x964>
  429b78:	9910      	ldr	r1, [sp, #64]	; 0x40
  429b7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429b7c:	1c48      	adds	r0, r1, #1
  429b7e:	46ca      	mov	sl, r9
  429b80:	e5a7      	b.n	4296d2 <_vfiprintf_r+0x752>
  429b82:	9910      	ldr	r1, [sp, #64]	; 0x40
  429b84:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429b86:	4e20      	ldr	r6, [pc, #128]	; (429c08 <_vfiprintf_r+0xc88>)
  429b88:	3101      	adds	r1, #1
  429b8a:	f7ff bb90 	b.w	4292ae <_vfiprintf_r+0x32e>
  429b8e:	2c06      	cmp	r4, #6
  429b90:	bf28      	it	cs
  429b92:	2406      	movcs	r4, #6
  429b94:	9405      	str	r4, [sp, #20]
  429b96:	9607      	str	r6, [sp, #28]
  429b98:	9401      	str	r4, [sp, #4]
  429b9a:	f8df b070 	ldr.w	fp, [pc, #112]	; 429c0c <_vfiprintf_r+0xc8c>
  429b9e:	e4d5      	b.n	42954c <_vfiprintf_r+0x5cc>
  429ba0:	9810      	ldr	r0, [sp, #64]	; 0x40
  429ba2:	4e19      	ldr	r6, [pc, #100]	; (429c08 <_vfiprintf_r+0xc88>)
  429ba4:	3001      	adds	r0, #1
  429ba6:	e603      	b.n	4297b0 <_vfiprintf_r+0x830>
  429ba8:	9405      	str	r4, [sp, #20]
  429baa:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  429bae:	9607      	str	r6, [sp, #28]
  429bb0:	9302      	str	r3, [sp, #8]
  429bb2:	4604      	mov	r4, r0
  429bb4:	f7ff bb36 	b.w	429224 <_vfiprintf_r+0x2a4>
  429bb8:	4686      	mov	lr, r0
  429bba:	f7ff bbce 	b.w	42935a <_vfiprintf_r+0x3da>
  429bbe:	9806      	ldr	r0, [sp, #24]
  429bc0:	aa0f      	add	r2, sp, #60	; 0x3c
  429bc2:	4659      	mov	r1, fp
  429bc4:	f7ff f99c 	bl	428f00 <__sprint_r.part.0>
  429bc8:	2800      	cmp	r0, #0
  429bca:	f43f ae24 	beq.w	429816 <_vfiprintf_r+0x896>
  429bce:	e624      	b.n	42981a <_vfiprintf_r+0x89a>
  429bd0:	9907      	ldr	r1, [sp, #28]
  429bd2:	f898 2001 	ldrb.w	r2, [r8, #1]
  429bd6:	680c      	ldr	r4, [r1, #0]
  429bd8:	3104      	adds	r1, #4
  429bda:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  429bde:	46b8      	mov	r8, r7
  429be0:	9107      	str	r1, [sp, #28]
  429be2:	f7ff ba3f 	b.w	429064 <_vfiprintf_r+0xe4>
  429be6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  429bea:	e43c      	b.n	429466 <_vfiprintf_r+0x4e6>
  429bec:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  429bf0:	e521      	b.n	429636 <_vfiprintf_r+0x6b6>
  429bf2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  429bf6:	f7ff bbf4 	b.w	4293e2 <_vfiprintf_r+0x462>
  429bfa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  429bfe:	e491      	b.n	429524 <_vfiprintf_r+0x5a4>
  429c00:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  429c04:	e469      	b.n	4294da <_vfiprintf_r+0x55a>
  429c06:	bf00      	nop
  429c08:	00433db0 	.word	0x00433db0
  429c0c:	00433da8 	.word	0x00433da8

00429c10 <__sbprintf>:
  429c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  429c14:	460c      	mov	r4, r1
  429c16:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  429c1a:	8989      	ldrh	r1, [r1, #12]
  429c1c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  429c1e:	89e5      	ldrh	r5, [r4, #14]
  429c20:	9619      	str	r6, [sp, #100]	; 0x64
  429c22:	f021 0102 	bic.w	r1, r1, #2
  429c26:	4606      	mov	r6, r0
  429c28:	69e0      	ldr	r0, [r4, #28]
  429c2a:	f8ad 100c 	strh.w	r1, [sp, #12]
  429c2e:	4617      	mov	r7, r2
  429c30:	f44f 6180 	mov.w	r1, #1024	; 0x400
  429c34:	6a62      	ldr	r2, [r4, #36]	; 0x24
  429c36:	f8ad 500e 	strh.w	r5, [sp, #14]
  429c3a:	4698      	mov	r8, r3
  429c3c:	ad1a      	add	r5, sp, #104	; 0x68
  429c3e:	2300      	movs	r3, #0
  429c40:	9007      	str	r0, [sp, #28]
  429c42:	a816      	add	r0, sp, #88	; 0x58
  429c44:	9209      	str	r2, [sp, #36]	; 0x24
  429c46:	9306      	str	r3, [sp, #24]
  429c48:	9500      	str	r5, [sp, #0]
  429c4a:	9504      	str	r5, [sp, #16]
  429c4c:	9102      	str	r1, [sp, #8]
  429c4e:	9105      	str	r1, [sp, #20]
  429c50:	f000 fd48 	bl	42a6e4 <__retarget_lock_init_recursive>
  429c54:	4643      	mov	r3, r8
  429c56:	463a      	mov	r2, r7
  429c58:	4669      	mov	r1, sp
  429c5a:	4630      	mov	r0, r6
  429c5c:	f7ff f990 	bl	428f80 <_vfiprintf_r>
  429c60:	1e05      	subs	r5, r0, #0
  429c62:	db07      	blt.n	429c74 <__sbprintf+0x64>
  429c64:	4630      	mov	r0, r6
  429c66:	4669      	mov	r1, sp
  429c68:	f000 f928 	bl	429ebc <_fflush_r>
  429c6c:	2800      	cmp	r0, #0
  429c6e:	bf18      	it	ne
  429c70:	f04f 35ff 	movne.w	r5, #4294967295
  429c74:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  429c78:	065b      	lsls	r3, r3, #25
  429c7a:	d503      	bpl.n	429c84 <__sbprintf+0x74>
  429c7c:	89a3      	ldrh	r3, [r4, #12]
  429c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  429c82:	81a3      	strh	r3, [r4, #12]
  429c84:	9816      	ldr	r0, [sp, #88]	; 0x58
  429c86:	f000 fd2f 	bl	42a6e8 <__retarget_lock_close_recursive>
  429c8a:	4628      	mov	r0, r5
  429c8c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  429c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00429c94 <__swsetup_r>:
  429c94:	b538      	push	{r3, r4, r5, lr}
  429c96:	4b30      	ldr	r3, [pc, #192]	; (429d58 <__swsetup_r+0xc4>)
  429c98:	681b      	ldr	r3, [r3, #0]
  429c9a:	4605      	mov	r5, r0
  429c9c:	460c      	mov	r4, r1
  429c9e:	b113      	cbz	r3, 429ca6 <__swsetup_r+0x12>
  429ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  429ca2:	2a00      	cmp	r2, #0
  429ca4:	d038      	beq.n	429d18 <__swsetup_r+0x84>
  429ca6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  429caa:	b293      	uxth	r3, r2
  429cac:	0718      	lsls	r0, r3, #28
  429cae:	d50c      	bpl.n	429cca <__swsetup_r+0x36>
  429cb0:	6920      	ldr	r0, [r4, #16]
  429cb2:	b1a8      	cbz	r0, 429ce0 <__swsetup_r+0x4c>
  429cb4:	f013 0201 	ands.w	r2, r3, #1
  429cb8:	d01e      	beq.n	429cf8 <__swsetup_r+0x64>
  429cba:	6963      	ldr	r3, [r4, #20]
  429cbc:	2200      	movs	r2, #0
  429cbe:	425b      	negs	r3, r3
  429cc0:	61a3      	str	r3, [r4, #24]
  429cc2:	60a2      	str	r2, [r4, #8]
  429cc4:	b1f0      	cbz	r0, 429d04 <__swsetup_r+0x70>
  429cc6:	2000      	movs	r0, #0
  429cc8:	bd38      	pop	{r3, r4, r5, pc}
  429cca:	06d9      	lsls	r1, r3, #27
  429ccc:	d53c      	bpl.n	429d48 <__swsetup_r+0xb4>
  429cce:	0758      	lsls	r0, r3, #29
  429cd0:	d426      	bmi.n	429d20 <__swsetup_r+0x8c>
  429cd2:	6920      	ldr	r0, [r4, #16]
  429cd4:	f042 0308 	orr.w	r3, r2, #8
  429cd8:	81a3      	strh	r3, [r4, #12]
  429cda:	b29b      	uxth	r3, r3
  429cdc:	2800      	cmp	r0, #0
  429cde:	d1e9      	bne.n	429cb4 <__swsetup_r+0x20>
  429ce0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  429ce4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  429ce8:	d0e4      	beq.n	429cb4 <__swsetup_r+0x20>
  429cea:	4628      	mov	r0, r5
  429cec:	4621      	mov	r1, r4
  429cee:	f000 fd2f 	bl	42a750 <__smakebuf_r>
  429cf2:	89a3      	ldrh	r3, [r4, #12]
  429cf4:	6920      	ldr	r0, [r4, #16]
  429cf6:	e7dd      	b.n	429cb4 <__swsetup_r+0x20>
  429cf8:	0799      	lsls	r1, r3, #30
  429cfa:	bf58      	it	pl
  429cfc:	6962      	ldrpl	r2, [r4, #20]
  429cfe:	60a2      	str	r2, [r4, #8]
  429d00:	2800      	cmp	r0, #0
  429d02:	d1e0      	bne.n	429cc6 <__swsetup_r+0x32>
  429d04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  429d08:	061a      	lsls	r2, r3, #24
  429d0a:	d5dd      	bpl.n	429cc8 <__swsetup_r+0x34>
  429d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  429d10:	81a3      	strh	r3, [r4, #12]
  429d12:	f04f 30ff 	mov.w	r0, #4294967295
  429d16:	bd38      	pop	{r3, r4, r5, pc}
  429d18:	4618      	mov	r0, r3
  429d1a:	f000 f927 	bl	429f6c <__sinit>
  429d1e:	e7c2      	b.n	429ca6 <__swsetup_r+0x12>
  429d20:	6b21      	ldr	r1, [r4, #48]	; 0x30
  429d22:	b151      	cbz	r1, 429d3a <__swsetup_r+0xa6>
  429d24:	f104 0340 	add.w	r3, r4, #64	; 0x40
  429d28:	4299      	cmp	r1, r3
  429d2a:	d004      	beq.n	429d36 <__swsetup_r+0xa2>
  429d2c:	4628      	mov	r0, r5
  429d2e:	f000 fa43 	bl	42a1b8 <_free_r>
  429d32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  429d36:	2300      	movs	r3, #0
  429d38:	6323      	str	r3, [r4, #48]	; 0x30
  429d3a:	2300      	movs	r3, #0
  429d3c:	6920      	ldr	r0, [r4, #16]
  429d3e:	6063      	str	r3, [r4, #4]
  429d40:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  429d44:	6020      	str	r0, [r4, #0]
  429d46:	e7c5      	b.n	429cd4 <__swsetup_r+0x40>
  429d48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  429d4c:	2309      	movs	r3, #9
  429d4e:	602b      	str	r3, [r5, #0]
  429d50:	f04f 30ff 	mov.w	r0, #4294967295
  429d54:	81a2      	strh	r2, [r4, #12]
  429d56:	bd38      	pop	{r3, r4, r5, pc}
  429d58:	204000d4 	.word	0x204000d4

00429d5c <register_fini>:
  429d5c:	4b02      	ldr	r3, [pc, #8]	; (429d68 <register_fini+0xc>)
  429d5e:	b113      	cbz	r3, 429d66 <register_fini+0xa>
  429d60:	4802      	ldr	r0, [pc, #8]	; (429d6c <register_fini+0x10>)
  429d62:	f000 b805 	b.w	429d70 <atexit>
  429d66:	4770      	bx	lr
  429d68:	00000000 	.word	0x00000000
  429d6c:	00429fdd 	.word	0x00429fdd

00429d70 <atexit>:
  429d70:	2300      	movs	r3, #0
  429d72:	4601      	mov	r1, r0
  429d74:	461a      	mov	r2, r3
  429d76:	4618      	mov	r0, r3
  429d78:	f001 b88e 	b.w	42ae98 <__register_exitproc>

00429d7c <__sflush_r>:
  429d7c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  429d80:	b29a      	uxth	r2, r3
  429d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  429d86:	460d      	mov	r5, r1
  429d88:	0711      	lsls	r1, r2, #28
  429d8a:	4680      	mov	r8, r0
  429d8c:	d43a      	bmi.n	429e04 <__sflush_r+0x88>
  429d8e:	686a      	ldr	r2, [r5, #4]
  429d90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  429d94:	2a00      	cmp	r2, #0
  429d96:	81ab      	strh	r3, [r5, #12]
  429d98:	dd6f      	ble.n	429e7a <__sflush_r+0xfe>
  429d9a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  429d9c:	2c00      	cmp	r4, #0
  429d9e:	d049      	beq.n	429e34 <__sflush_r+0xb8>
  429da0:	2200      	movs	r2, #0
  429da2:	b29b      	uxth	r3, r3
  429da4:	f8d8 6000 	ldr.w	r6, [r8]
  429da8:	f8c8 2000 	str.w	r2, [r8]
  429dac:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  429db0:	d067      	beq.n	429e82 <__sflush_r+0x106>
  429db2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  429db4:	075f      	lsls	r7, r3, #29
  429db6:	d505      	bpl.n	429dc4 <__sflush_r+0x48>
  429db8:	6869      	ldr	r1, [r5, #4]
  429dba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  429dbc:	1a52      	subs	r2, r2, r1
  429dbe:	b10b      	cbz	r3, 429dc4 <__sflush_r+0x48>
  429dc0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  429dc2:	1ad2      	subs	r2, r2, r3
  429dc4:	2300      	movs	r3, #0
  429dc6:	69e9      	ldr	r1, [r5, #28]
  429dc8:	4640      	mov	r0, r8
  429dca:	47a0      	blx	r4
  429dcc:	1c44      	adds	r4, r0, #1
  429dce:	d03c      	beq.n	429e4a <__sflush_r+0xce>
  429dd0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  429dd4:	692a      	ldr	r2, [r5, #16]
  429dd6:	602a      	str	r2, [r5, #0]
  429dd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  429ddc:	2200      	movs	r2, #0
  429dde:	81ab      	strh	r3, [r5, #12]
  429de0:	04db      	lsls	r3, r3, #19
  429de2:	606a      	str	r2, [r5, #4]
  429de4:	d447      	bmi.n	429e76 <__sflush_r+0xfa>
  429de6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  429de8:	f8c8 6000 	str.w	r6, [r8]
  429dec:	b311      	cbz	r1, 429e34 <__sflush_r+0xb8>
  429dee:	f105 0340 	add.w	r3, r5, #64	; 0x40
  429df2:	4299      	cmp	r1, r3
  429df4:	d002      	beq.n	429dfc <__sflush_r+0x80>
  429df6:	4640      	mov	r0, r8
  429df8:	f000 f9de 	bl	42a1b8 <_free_r>
  429dfc:	2000      	movs	r0, #0
  429dfe:	6328      	str	r0, [r5, #48]	; 0x30
  429e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  429e04:	692e      	ldr	r6, [r5, #16]
  429e06:	b1ae      	cbz	r6, 429e34 <__sflush_r+0xb8>
  429e08:	682c      	ldr	r4, [r5, #0]
  429e0a:	602e      	str	r6, [r5, #0]
  429e0c:	0791      	lsls	r1, r2, #30
  429e0e:	bf0c      	ite	eq
  429e10:	696b      	ldreq	r3, [r5, #20]
  429e12:	2300      	movne	r3, #0
  429e14:	1ba4      	subs	r4, r4, r6
  429e16:	60ab      	str	r3, [r5, #8]
  429e18:	e00a      	b.n	429e30 <__sflush_r+0xb4>
  429e1a:	4623      	mov	r3, r4
  429e1c:	4632      	mov	r2, r6
  429e1e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  429e20:	69e9      	ldr	r1, [r5, #28]
  429e22:	4640      	mov	r0, r8
  429e24:	47b8      	blx	r7
  429e26:	2800      	cmp	r0, #0
  429e28:	eba4 0400 	sub.w	r4, r4, r0
  429e2c:	4406      	add	r6, r0
  429e2e:	dd04      	ble.n	429e3a <__sflush_r+0xbe>
  429e30:	2c00      	cmp	r4, #0
  429e32:	dcf2      	bgt.n	429e1a <__sflush_r+0x9e>
  429e34:	2000      	movs	r0, #0
  429e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  429e3a:	89ab      	ldrh	r3, [r5, #12]
  429e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  429e40:	81ab      	strh	r3, [r5, #12]
  429e42:	f04f 30ff 	mov.w	r0, #4294967295
  429e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  429e4a:	f8d8 4000 	ldr.w	r4, [r8]
  429e4e:	2c1d      	cmp	r4, #29
  429e50:	d8f3      	bhi.n	429e3a <__sflush_r+0xbe>
  429e52:	4b19      	ldr	r3, [pc, #100]	; (429eb8 <__sflush_r+0x13c>)
  429e54:	40e3      	lsrs	r3, r4
  429e56:	43db      	mvns	r3, r3
  429e58:	f013 0301 	ands.w	r3, r3, #1
  429e5c:	d1ed      	bne.n	429e3a <__sflush_r+0xbe>
  429e5e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  429e62:	606b      	str	r3, [r5, #4]
  429e64:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  429e68:	6929      	ldr	r1, [r5, #16]
  429e6a:	81ab      	strh	r3, [r5, #12]
  429e6c:	04da      	lsls	r2, r3, #19
  429e6e:	6029      	str	r1, [r5, #0]
  429e70:	d5b9      	bpl.n	429de6 <__sflush_r+0x6a>
  429e72:	2c00      	cmp	r4, #0
  429e74:	d1b7      	bne.n	429de6 <__sflush_r+0x6a>
  429e76:	6528      	str	r0, [r5, #80]	; 0x50
  429e78:	e7b5      	b.n	429de6 <__sflush_r+0x6a>
  429e7a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  429e7c:	2a00      	cmp	r2, #0
  429e7e:	dc8c      	bgt.n	429d9a <__sflush_r+0x1e>
  429e80:	e7d8      	b.n	429e34 <__sflush_r+0xb8>
  429e82:	2301      	movs	r3, #1
  429e84:	69e9      	ldr	r1, [r5, #28]
  429e86:	4640      	mov	r0, r8
  429e88:	47a0      	blx	r4
  429e8a:	1c43      	adds	r3, r0, #1
  429e8c:	4602      	mov	r2, r0
  429e8e:	d002      	beq.n	429e96 <__sflush_r+0x11a>
  429e90:	89ab      	ldrh	r3, [r5, #12]
  429e92:	6aac      	ldr	r4, [r5, #40]	; 0x28
  429e94:	e78e      	b.n	429db4 <__sflush_r+0x38>
  429e96:	f8d8 3000 	ldr.w	r3, [r8]
  429e9a:	2b00      	cmp	r3, #0
  429e9c:	d0f8      	beq.n	429e90 <__sflush_r+0x114>
  429e9e:	2b1d      	cmp	r3, #29
  429ea0:	d001      	beq.n	429ea6 <__sflush_r+0x12a>
  429ea2:	2b16      	cmp	r3, #22
  429ea4:	d102      	bne.n	429eac <__sflush_r+0x130>
  429ea6:	f8c8 6000 	str.w	r6, [r8]
  429eaa:	e7c3      	b.n	429e34 <__sflush_r+0xb8>
  429eac:	89ab      	ldrh	r3, [r5, #12]
  429eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  429eb2:	81ab      	strh	r3, [r5, #12]
  429eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  429eb8:	20400001 	.word	0x20400001

00429ebc <_fflush_r>:
  429ebc:	b538      	push	{r3, r4, r5, lr}
  429ebe:	460d      	mov	r5, r1
  429ec0:	4604      	mov	r4, r0
  429ec2:	b108      	cbz	r0, 429ec8 <_fflush_r+0xc>
  429ec4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  429ec6:	b1bb      	cbz	r3, 429ef8 <_fflush_r+0x3c>
  429ec8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  429ecc:	b188      	cbz	r0, 429ef2 <_fflush_r+0x36>
  429ece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  429ed0:	07db      	lsls	r3, r3, #31
  429ed2:	d401      	bmi.n	429ed8 <_fflush_r+0x1c>
  429ed4:	0581      	lsls	r1, r0, #22
  429ed6:	d517      	bpl.n	429f08 <_fflush_r+0x4c>
  429ed8:	4620      	mov	r0, r4
  429eda:	4629      	mov	r1, r5
  429edc:	f7ff ff4e 	bl	429d7c <__sflush_r>
  429ee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  429ee2:	07da      	lsls	r2, r3, #31
  429ee4:	4604      	mov	r4, r0
  429ee6:	d402      	bmi.n	429eee <_fflush_r+0x32>
  429ee8:	89ab      	ldrh	r3, [r5, #12]
  429eea:	059b      	lsls	r3, r3, #22
  429eec:	d507      	bpl.n	429efe <_fflush_r+0x42>
  429eee:	4620      	mov	r0, r4
  429ef0:	bd38      	pop	{r3, r4, r5, pc}
  429ef2:	4604      	mov	r4, r0
  429ef4:	4620      	mov	r0, r4
  429ef6:	bd38      	pop	{r3, r4, r5, pc}
  429ef8:	f000 f838 	bl	429f6c <__sinit>
  429efc:	e7e4      	b.n	429ec8 <_fflush_r+0xc>
  429efe:	6da8      	ldr	r0, [r5, #88]	; 0x58
  429f00:	f000 fbf6 	bl	42a6f0 <__retarget_lock_release_recursive>
  429f04:	4620      	mov	r0, r4
  429f06:	bd38      	pop	{r3, r4, r5, pc}
  429f08:	6da8      	ldr	r0, [r5, #88]	; 0x58
  429f0a:	f000 fbef 	bl	42a6ec <__retarget_lock_acquire_recursive>
  429f0e:	e7e3      	b.n	429ed8 <_fflush_r+0x1c>

00429f10 <_cleanup_r>:
  429f10:	4901      	ldr	r1, [pc, #4]	; (429f18 <_cleanup_r+0x8>)
  429f12:	f000 bbaf 	b.w	42a674 <_fwalk_reent>
  429f16:	bf00      	nop
  429f18:	0042af81 	.word	0x0042af81

00429f1c <std.isra.0>:
  429f1c:	b510      	push	{r4, lr}
  429f1e:	2300      	movs	r3, #0
  429f20:	4604      	mov	r4, r0
  429f22:	8181      	strh	r1, [r0, #12]
  429f24:	81c2      	strh	r2, [r0, #14]
  429f26:	6003      	str	r3, [r0, #0]
  429f28:	6043      	str	r3, [r0, #4]
  429f2a:	6083      	str	r3, [r0, #8]
  429f2c:	6643      	str	r3, [r0, #100]	; 0x64
  429f2e:	6103      	str	r3, [r0, #16]
  429f30:	6143      	str	r3, [r0, #20]
  429f32:	6183      	str	r3, [r0, #24]
  429f34:	4619      	mov	r1, r3
  429f36:	2208      	movs	r2, #8
  429f38:	305c      	adds	r0, #92	; 0x5c
  429f3a:	f7fe fbfb 	bl	428734 <memset>
  429f3e:	4807      	ldr	r0, [pc, #28]	; (429f5c <std.isra.0+0x40>)
  429f40:	4907      	ldr	r1, [pc, #28]	; (429f60 <std.isra.0+0x44>)
  429f42:	4a08      	ldr	r2, [pc, #32]	; (429f64 <std.isra.0+0x48>)
  429f44:	4b08      	ldr	r3, [pc, #32]	; (429f68 <std.isra.0+0x4c>)
  429f46:	6220      	str	r0, [r4, #32]
  429f48:	61e4      	str	r4, [r4, #28]
  429f4a:	6261      	str	r1, [r4, #36]	; 0x24
  429f4c:	62a2      	str	r2, [r4, #40]	; 0x28
  429f4e:	62e3      	str	r3, [r4, #44]	; 0x2c
  429f50:	f104 0058 	add.w	r0, r4, #88	; 0x58
  429f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  429f58:	f000 bbc4 	b.w	42a6e4 <__retarget_lock_init_recursive>
  429f5c:	0042acc5 	.word	0x0042acc5
  429f60:	0042ace9 	.word	0x0042ace9
  429f64:	0042ad25 	.word	0x0042ad25
  429f68:	0042ad45 	.word	0x0042ad45

00429f6c <__sinit>:
  429f6c:	b510      	push	{r4, lr}
  429f6e:	4604      	mov	r4, r0
  429f70:	4812      	ldr	r0, [pc, #72]	; (429fbc <__sinit+0x50>)
  429f72:	f000 fbbb 	bl	42a6ec <__retarget_lock_acquire_recursive>
  429f76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  429f78:	b9d2      	cbnz	r2, 429fb0 <__sinit+0x44>
  429f7a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  429f7e:	4810      	ldr	r0, [pc, #64]	; (429fc0 <__sinit+0x54>)
  429f80:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  429f84:	2103      	movs	r1, #3
  429f86:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  429f8a:	63e0      	str	r0, [r4, #60]	; 0x3c
  429f8c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  429f90:	6860      	ldr	r0, [r4, #4]
  429f92:	2104      	movs	r1, #4
  429f94:	f7ff ffc2 	bl	429f1c <std.isra.0>
  429f98:	2201      	movs	r2, #1
  429f9a:	2109      	movs	r1, #9
  429f9c:	68a0      	ldr	r0, [r4, #8]
  429f9e:	f7ff ffbd 	bl	429f1c <std.isra.0>
  429fa2:	2202      	movs	r2, #2
  429fa4:	2112      	movs	r1, #18
  429fa6:	68e0      	ldr	r0, [r4, #12]
  429fa8:	f7ff ffb8 	bl	429f1c <std.isra.0>
  429fac:	2301      	movs	r3, #1
  429fae:	63a3      	str	r3, [r4, #56]	; 0x38
  429fb0:	4802      	ldr	r0, [pc, #8]	; (429fbc <__sinit+0x50>)
  429fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  429fb6:	f000 bb9b 	b.w	42a6f0 <__retarget_lock_release_recursive>
  429fba:	bf00      	nop
  429fbc:	2043abfc 	.word	0x2043abfc
  429fc0:	00429f11 	.word	0x00429f11

00429fc4 <__sfp_lock_acquire>:
  429fc4:	4801      	ldr	r0, [pc, #4]	; (429fcc <__sfp_lock_acquire+0x8>)
  429fc6:	f000 bb91 	b.w	42a6ec <__retarget_lock_acquire_recursive>
  429fca:	bf00      	nop
  429fcc:	2043ac10 	.word	0x2043ac10

00429fd0 <__sfp_lock_release>:
  429fd0:	4801      	ldr	r0, [pc, #4]	; (429fd8 <__sfp_lock_release+0x8>)
  429fd2:	f000 bb8d 	b.w	42a6f0 <__retarget_lock_release_recursive>
  429fd6:	bf00      	nop
  429fd8:	2043ac10 	.word	0x2043ac10

00429fdc <__libc_fini_array>:
  429fdc:	b538      	push	{r3, r4, r5, lr}
  429fde:	4c0a      	ldr	r4, [pc, #40]	; (42a008 <__libc_fini_array+0x2c>)
  429fe0:	4d0a      	ldr	r5, [pc, #40]	; (42a00c <__libc_fini_array+0x30>)
  429fe2:	1b64      	subs	r4, r4, r5
  429fe4:	10a4      	asrs	r4, r4, #2
  429fe6:	d00a      	beq.n	429ffe <__libc_fini_array+0x22>
  429fe8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  429fec:	3b01      	subs	r3, #1
  429fee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  429ff2:	3c01      	subs	r4, #1
  429ff4:	f855 3904 	ldr.w	r3, [r5], #-4
  429ff8:	4798      	blx	r3
  429ffa:	2c00      	cmp	r4, #0
  429ffc:	d1f9      	bne.n	429ff2 <__libc_fini_array+0x16>
  429ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  42a002:	f009 bf79 	b.w	433ef8 <_fini>
  42a006:	bf00      	nop
  42a008:	00433f08 	.word	0x00433f08
  42a00c:	00433f04 	.word	0x00433f04

0042a010 <__fputwc>:
  42a010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  42a014:	b082      	sub	sp, #8
  42a016:	4680      	mov	r8, r0
  42a018:	4689      	mov	r9, r1
  42a01a:	4614      	mov	r4, r2
  42a01c:	f000 fb54 	bl	42a6c8 <__locale_mb_cur_max>
  42a020:	2801      	cmp	r0, #1
  42a022:	d036      	beq.n	42a092 <__fputwc+0x82>
  42a024:	464a      	mov	r2, r9
  42a026:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  42a02a:	a901      	add	r1, sp, #4
  42a02c:	4640      	mov	r0, r8
  42a02e:	f000 fee5 	bl	42adfc <_wcrtomb_r>
  42a032:	1c42      	adds	r2, r0, #1
  42a034:	4606      	mov	r6, r0
  42a036:	d025      	beq.n	42a084 <__fputwc+0x74>
  42a038:	b3a8      	cbz	r0, 42a0a6 <__fputwc+0x96>
  42a03a:	f89d e004 	ldrb.w	lr, [sp, #4]
  42a03e:	2500      	movs	r5, #0
  42a040:	f10d 0a04 	add.w	sl, sp, #4
  42a044:	e009      	b.n	42a05a <__fputwc+0x4a>
  42a046:	6823      	ldr	r3, [r4, #0]
  42a048:	1c5a      	adds	r2, r3, #1
  42a04a:	6022      	str	r2, [r4, #0]
  42a04c:	f883 e000 	strb.w	lr, [r3]
  42a050:	3501      	adds	r5, #1
  42a052:	42b5      	cmp	r5, r6
  42a054:	d227      	bcs.n	42a0a6 <__fputwc+0x96>
  42a056:	f815 e00a 	ldrb.w	lr, [r5, sl]
  42a05a:	68a3      	ldr	r3, [r4, #8]
  42a05c:	3b01      	subs	r3, #1
  42a05e:	2b00      	cmp	r3, #0
  42a060:	60a3      	str	r3, [r4, #8]
  42a062:	daf0      	bge.n	42a046 <__fputwc+0x36>
  42a064:	69a7      	ldr	r7, [r4, #24]
  42a066:	42bb      	cmp	r3, r7
  42a068:	4671      	mov	r1, lr
  42a06a:	4622      	mov	r2, r4
  42a06c:	4640      	mov	r0, r8
  42a06e:	db02      	blt.n	42a076 <__fputwc+0x66>
  42a070:	f1be 0f0a 	cmp.w	lr, #10
  42a074:	d1e7      	bne.n	42a046 <__fputwc+0x36>
  42a076:	f000 fe69 	bl	42ad4c <__swbuf_r>
  42a07a:	1c43      	adds	r3, r0, #1
  42a07c:	d1e8      	bne.n	42a050 <__fputwc+0x40>
  42a07e:	b002      	add	sp, #8
  42a080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42a084:	89a3      	ldrh	r3, [r4, #12]
  42a086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  42a08a:	81a3      	strh	r3, [r4, #12]
  42a08c:	b002      	add	sp, #8
  42a08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42a092:	f109 33ff 	add.w	r3, r9, #4294967295
  42a096:	2bfe      	cmp	r3, #254	; 0xfe
  42a098:	d8c4      	bhi.n	42a024 <__fputwc+0x14>
  42a09a:	fa5f fe89 	uxtb.w	lr, r9
  42a09e:	4606      	mov	r6, r0
  42a0a0:	f88d e004 	strb.w	lr, [sp, #4]
  42a0a4:	e7cb      	b.n	42a03e <__fputwc+0x2e>
  42a0a6:	4648      	mov	r0, r9
  42a0a8:	b002      	add	sp, #8
  42a0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42a0ae:	bf00      	nop

0042a0b0 <_fputwc_r>:
  42a0b0:	b530      	push	{r4, r5, lr}
  42a0b2:	6e53      	ldr	r3, [r2, #100]	; 0x64
  42a0b4:	f013 0f01 	tst.w	r3, #1
  42a0b8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  42a0bc:	4614      	mov	r4, r2
  42a0be:	b083      	sub	sp, #12
  42a0c0:	4605      	mov	r5, r0
  42a0c2:	b29a      	uxth	r2, r3
  42a0c4:	d101      	bne.n	42a0ca <_fputwc_r+0x1a>
  42a0c6:	0590      	lsls	r0, r2, #22
  42a0c8:	d51c      	bpl.n	42a104 <_fputwc_r+0x54>
  42a0ca:	0490      	lsls	r0, r2, #18
  42a0cc:	d406      	bmi.n	42a0dc <_fputwc_r+0x2c>
  42a0ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
  42a0d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  42a0d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  42a0d8:	81a3      	strh	r3, [r4, #12]
  42a0da:	6662      	str	r2, [r4, #100]	; 0x64
  42a0dc:	4628      	mov	r0, r5
  42a0de:	4622      	mov	r2, r4
  42a0e0:	f7ff ff96 	bl	42a010 <__fputwc>
  42a0e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  42a0e6:	07da      	lsls	r2, r3, #31
  42a0e8:	4605      	mov	r5, r0
  42a0ea:	d402      	bmi.n	42a0f2 <_fputwc_r+0x42>
  42a0ec:	89a3      	ldrh	r3, [r4, #12]
  42a0ee:	059b      	lsls	r3, r3, #22
  42a0f0:	d502      	bpl.n	42a0f8 <_fputwc_r+0x48>
  42a0f2:	4628      	mov	r0, r5
  42a0f4:	b003      	add	sp, #12
  42a0f6:	bd30      	pop	{r4, r5, pc}
  42a0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42a0fa:	f000 faf9 	bl	42a6f0 <__retarget_lock_release_recursive>
  42a0fe:	4628      	mov	r0, r5
  42a100:	b003      	add	sp, #12
  42a102:	bd30      	pop	{r4, r5, pc}
  42a104:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42a106:	9101      	str	r1, [sp, #4]
  42a108:	f000 faf0 	bl	42a6ec <__retarget_lock_acquire_recursive>
  42a10c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42a110:	9901      	ldr	r1, [sp, #4]
  42a112:	b29a      	uxth	r2, r3
  42a114:	e7d9      	b.n	42a0ca <_fputwc_r+0x1a>
  42a116:	bf00      	nop

0042a118 <_malloc_trim_r>:
  42a118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42a11a:	4f24      	ldr	r7, [pc, #144]	; (42a1ac <_malloc_trim_r+0x94>)
  42a11c:	460c      	mov	r4, r1
  42a11e:	4606      	mov	r6, r0
  42a120:	f7fe fb56 	bl	4287d0 <__malloc_lock>
  42a124:	68bb      	ldr	r3, [r7, #8]
  42a126:	685d      	ldr	r5, [r3, #4]
  42a128:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  42a12c:	310f      	adds	r1, #15
  42a12e:	f025 0503 	bic.w	r5, r5, #3
  42a132:	4429      	add	r1, r5
  42a134:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  42a138:	f021 010f 	bic.w	r1, r1, #15
  42a13c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  42a140:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  42a144:	db07      	blt.n	42a156 <_malloc_trim_r+0x3e>
  42a146:	2100      	movs	r1, #0
  42a148:	4630      	mov	r0, r6
  42a14a:	f7fe fb6d 	bl	428828 <_sbrk_r>
  42a14e:	68bb      	ldr	r3, [r7, #8]
  42a150:	442b      	add	r3, r5
  42a152:	4298      	cmp	r0, r3
  42a154:	d004      	beq.n	42a160 <_malloc_trim_r+0x48>
  42a156:	4630      	mov	r0, r6
  42a158:	f7fe fb40 	bl	4287dc <__malloc_unlock>
  42a15c:	2000      	movs	r0, #0
  42a15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42a160:	4261      	negs	r1, r4
  42a162:	4630      	mov	r0, r6
  42a164:	f7fe fb60 	bl	428828 <_sbrk_r>
  42a168:	3001      	adds	r0, #1
  42a16a:	d00d      	beq.n	42a188 <_malloc_trim_r+0x70>
  42a16c:	4b10      	ldr	r3, [pc, #64]	; (42a1b0 <_malloc_trim_r+0x98>)
  42a16e:	68ba      	ldr	r2, [r7, #8]
  42a170:	6819      	ldr	r1, [r3, #0]
  42a172:	1b2d      	subs	r5, r5, r4
  42a174:	f045 0501 	orr.w	r5, r5, #1
  42a178:	4630      	mov	r0, r6
  42a17a:	1b09      	subs	r1, r1, r4
  42a17c:	6055      	str	r5, [r2, #4]
  42a17e:	6019      	str	r1, [r3, #0]
  42a180:	f7fe fb2c 	bl	4287dc <__malloc_unlock>
  42a184:	2001      	movs	r0, #1
  42a186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42a188:	2100      	movs	r1, #0
  42a18a:	4630      	mov	r0, r6
  42a18c:	f7fe fb4c 	bl	428828 <_sbrk_r>
  42a190:	68ba      	ldr	r2, [r7, #8]
  42a192:	1a83      	subs	r3, r0, r2
  42a194:	2b0f      	cmp	r3, #15
  42a196:	ddde      	ble.n	42a156 <_malloc_trim_r+0x3e>
  42a198:	4c06      	ldr	r4, [pc, #24]	; (42a1b4 <_malloc_trim_r+0x9c>)
  42a19a:	4905      	ldr	r1, [pc, #20]	; (42a1b0 <_malloc_trim_r+0x98>)
  42a19c:	6824      	ldr	r4, [r4, #0]
  42a19e:	f043 0301 	orr.w	r3, r3, #1
  42a1a2:	1b00      	subs	r0, r0, r4
  42a1a4:	6053      	str	r3, [r2, #4]
  42a1a6:	6008      	str	r0, [r1, #0]
  42a1a8:	e7d5      	b.n	42a156 <_malloc_trim_r+0x3e>
  42a1aa:	bf00      	nop
  42a1ac:	20400500 	.word	0x20400500
  42a1b0:	2043a14c 	.word	0x2043a14c
  42a1b4:	20400908 	.word	0x20400908

0042a1b8 <_free_r>:
  42a1b8:	2900      	cmp	r1, #0
  42a1ba:	d044      	beq.n	42a246 <_free_r+0x8e>
  42a1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42a1c0:	460d      	mov	r5, r1
  42a1c2:	4680      	mov	r8, r0
  42a1c4:	f7fe fb04 	bl	4287d0 <__malloc_lock>
  42a1c8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  42a1cc:	4969      	ldr	r1, [pc, #420]	; (42a374 <_free_r+0x1bc>)
  42a1ce:	f027 0301 	bic.w	r3, r7, #1
  42a1d2:	f1a5 0408 	sub.w	r4, r5, #8
  42a1d6:	18e2      	adds	r2, r4, r3
  42a1d8:	688e      	ldr	r6, [r1, #8]
  42a1da:	6850      	ldr	r0, [r2, #4]
  42a1dc:	42b2      	cmp	r2, r6
  42a1de:	f020 0003 	bic.w	r0, r0, #3
  42a1e2:	d05e      	beq.n	42a2a2 <_free_r+0xea>
  42a1e4:	07fe      	lsls	r6, r7, #31
  42a1e6:	6050      	str	r0, [r2, #4]
  42a1e8:	d40b      	bmi.n	42a202 <_free_r+0x4a>
  42a1ea:	f855 7c08 	ldr.w	r7, [r5, #-8]
  42a1ee:	1be4      	subs	r4, r4, r7
  42a1f0:	f101 0e08 	add.w	lr, r1, #8
  42a1f4:	68a5      	ldr	r5, [r4, #8]
  42a1f6:	4575      	cmp	r5, lr
  42a1f8:	443b      	add	r3, r7
  42a1fa:	d06d      	beq.n	42a2d8 <_free_r+0x120>
  42a1fc:	68e7      	ldr	r7, [r4, #12]
  42a1fe:	60ef      	str	r7, [r5, #12]
  42a200:	60bd      	str	r5, [r7, #8]
  42a202:	1815      	adds	r5, r2, r0
  42a204:	686d      	ldr	r5, [r5, #4]
  42a206:	07ed      	lsls	r5, r5, #31
  42a208:	d53e      	bpl.n	42a288 <_free_r+0xd0>
  42a20a:	f043 0201 	orr.w	r2, r3, #1
  42a20e:	6062      	str	r2, [r4, #4]
  42a210:	50e3      	str	r3, [r4, r3]
  42a212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  42a216:	d217      	bcs.n	42a248 <_free_r+0x90>
  42a218:	08db      	lsrs	r3, r3, #3
  42a21a:	1c58      	adds	r0, r3, #1
  42a21c:	109a      	asrs	r2, r3, #2
  42a21e:	684d      	ldr	r5, [r1, #4]
  42a220:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  42a224:	60a7      	str	r7, [r4, #8]
  42a226:	2301      	movs	r3, #1
  42a228:	4093      	lsls	r3, r2
  42a22a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  42a22e:	432b      	orrs	r3, r5
  42a230:	3a08      	subs	r2, #8
  42a232:	60e2      	str	r2, [r4, #12]
  42a234:	604b      	str	r3, [r1, #4]
  42a236:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  42a23a:	60fc      	str	r4, [r7, #12]
  42a23c:	4640      	mov	r0, r8
  42a23e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42a242:	f7fe bacb 	b.w	4287dc <__malloc_unlock>
  42a246:	4770      	bx	lr
  42a248:	0a5a      	lsrs	r2, r3, #9
  42a24a:	2a04      	cmp	r2, #4
  42a24c:	d852      	bhi.n	42a2f4 <_free_r+0x13c>
  42a24e:	099a      	lsrs	r2, r3, #6
  42a250:	f102 0739 	add.w	r7, r2, #57	; 0x39
  42a254:	00ff      	lsls	r7, r7, #3
  42a256:	f102 0538 	add.w	r5, r2, #56	; 0x38
  42a25a:	19c8      	adds	r0, r1, r7
  42a25c:	59ca      	ldr	r2, [r1, r7]
  42a25e:	3808      	subs	r0, #8
  42a260:	4290      	cmp	r0, r2
  42a262:	d04f      	beq.n	42a304 <_free_r+0x14c>
  42a264:	6851      	ldr	r1, [r2, #4]
  42a266:	f021 0103 	bic.w	r1, r1, #3
  42a26a:	428b      	cmp	r3, r1
  42a26c:	d232      	bcs.n	42a2d4 <_free_r+0x11c>
  42a26e:	6892      	ldr	r2, [r2, #8]
  42a270:	4290      	cmp	r0, r2
  42a272:	d1f7      	bne.n	42a264 <_free_r+0xac>
  42a274:	68c3      	ldr	r3, [r0, #12]
  42a276:	60a0      	str	r0, [r4, #8]
  42a278:	60e3      	str	r3, [r4, #12]
  42a27a:	609c      	str	r4, [r3, #8]
  42a27c:	60c4      	str	r4, [r0, #12]
  42a27e:	4640      	mov	r0, r8
  42a280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42a284:	f7fe baaa 	b.w	4287dc <__malloc_unlock>
  42a288:	6895      	ldr	r5, [r2, #8]
  42a28a:	4f3b      	ldr	r7, [pc, #236]	; (42a378 <_free_r+0x1c0>)
  42a28c:	42bd      	cmp	r5, r7
  42a28e:	4403      	add	r3, r0
  42a290:	d040      	beq.n	42a314 <_free_r+0x15c>
  42a292:	68d0      	ldr	r0, [r2, #12]
  42a294:	60e8      	str	r0, [r5, #12]
  42a296:	f043 0201 	orr.w	r2, r3, #1
  42a29a:	6085      	str	r5, [r0, #8]
  42a29c:	6062      	str	r2, [r4, #4]
  42a29e:	50e3      	str	r3, [r4, r3]
  42a2a0:	e7b7      	b.n	42a212 <_free_r+0x5a>
  42a2a2:	07ff      	lsls	r7, r7, #31
  42a2a4:	4403      	add	r3, r0
  42a2a6:	d407      	bmi.n	42a2b8 <_free_r+0x100>
  42a2a8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  42a2ac:	1aa4      	subs	r4, r4, r2
  42a2ae:	4413      	add	r3, r2
  42a2b0:	68a0      	ldr	r0, [r4, #8]
  42a2b2:	68e2      	ldr	r2, [r4, #12]
  42a2b4:	60c2      	str	r2, [r0, #12]
  42a2b6:	6090      	str	r0, [r2, #8]
  42a2b8:	4a30      	ldr	r2, [pc, #192]	; (42a37c <_free_r+0x1c4>)
  42a2ba:	6812      	ldr	r2, [r2, #0]
  42a2bc:	f043 0001 	orr.w	r0, r3, #1
  42a2c0:	4293      	cmp	r3, r2
  42a2c2:	6060      	str	r0, [r4, #4]
  42a2c4:	608c      	str	r4, [r1, #8]
  42a2c6:	d3b9      	bcc.n	42a23c <_free_r+0x84>
  42a2c8:	4b2d      	ldr	r3, [pc, #180]	; (42a380 <_free_r+0x1c8>)
  42a2ca:	4640      	mov	r0, r8
  42a2cc:	6819      	ldr	r1, [r3, #0]
  42a2ce:	f7ff ff23 	bl	42a118 <_malloc_trim_r>
  42a2d2:	e7b3      	b.n	42a23c <_free_r+0x84>
  42a2d4:	4610      	mov	r0, r2
  42a2d6:	e7cd      	b.n	42a274 <_free_r+0xbc>
  42a2d8:	1811      	adds	r1, r2, r0
  42a2da:	6849      	ldr	r1, [r1, #4]
  42a2dc:	07c9      	lsls	r1, r1, #31
  42a2de:	d444      	bmi.n	42a36a <_free_r+0x1b2>
  42a2e0:	6891      	ldr	r1, [r2, #8]
  42a2e2:	68d2      	ldr	r2, [r2, #12]
  42a2e4:	60ca      	str	r2, [r1, #12]
  42a2e6:	4403      	add	r3, r0
  42a2e8:	f043 0001 	orr.w	r0, r3, #1
  42a2ec:	6091      	str	r1, [r2, #8]
  42a2ee:	6060      	str	r0, [r4, #4]
  42a2f0:	50e3      	str	r3, [r4, r3]
  42a2f2:	e7a3      	b.n	42a23c <_free_r+0x84>
  42a2f4:	2a14      	cmp	r2, #20
  42a2f6:	d816      	bhi.n	42a326 <_free_r+0x16e>
  42a2f8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  42a2fc:	00ff      	lsls	r7, r7, #3
  42a2fe:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  42a302:	e7aa      	b.n	42a25a <_free_r+0xa2>
  42a304:	10aa      	asrs	r2, r5, #2
  42a306:	2301      	movs	r3, #1
  42a308:	684d      	ldr	r5, [r1, #4]
  42a30a:	4093      	lsls	r3, r2
  42a30c:	432b      	orrs	r3, r5
  42a30e:	604b      	str	r3, [r1, #4]
  42a310:	4603      	mov	r3, r0
  42a312:	e7b0      	b.n	42a276 <_free_r+0xbe>
  42a314:	f043 0201 	orr.w	r2, r3, #1
  42a318:	614c      	str	r4, [r1, #20]
  42a31a:	610c      	str	r4, [r1, #16]
  42a31c:	60e5      	str	r5, [r4, #12]
  42a31e:	60a5      	str	r5, [r4, #8]
  42a320:	6062      	str	r2, [r4, #4]
  42a322:	50e3      	str	r3, [r4, r3]
  42a324:	e78a      	b.n	42a23c <_free_r+0x84>
  42a326:	2a54      	cmp	r2, #84	; 0x54
  42a328:	d806      	bhi.n	42a338 <_free_r+0x180>
  42a32a:	0b1a      	lsrs	r2, r3, #12
  42a32c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  42a330:	00ff      	lsls	r7, r7, #3
  42a332:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  42a336:	e790      	b.n	42a25a <_free_r+0xa2>
  42a338:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  42a33c:	d806      	bhi.n	42a34c <_free_r+0x194>
  42a33e:	0bda      	lsrs	r2, r3, #15
  42a340:	f102 0778 	add.w	r7, r2, #120	; 0x78
  42a344:	00ff      	lsls	r7, r7, #3
  42a346:	f102 0577 	add.w	r5, r2, #119	; 0x77
  42a34a:	e786      	b.n	42a25a <_free_r+0xa2>
  42a34c:	f240 5054 	movw	r0, #1364	; 0x554
  42a350:	4282      	cmp	r2, r0
  42a352:	d806      	bhi.n	42a362 <_free_r+0x1aa>
  42a354:	0c9a      	lsrs	r2, r3, #18
  42a356:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  42a35a:	00ff      	lsls	r7, r7, #3
  42a35c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  42a360:	e77b      	b.n	42a25a <_free_r+0xa2>
  42a362:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  42a366:	257e      	movs	r5, #126	; 0x7e
  42a368:	e777      	b.n	42a25a <_free_r+0xa2>
  42a36a:	f043 0101 	orr.w	r1, r3, #1
  42a36e:	6061      	str	r1, [r4, #4]
  42a370:	6013      	str	r3, [r2, #0]
  42a372:	e763      	b.n	42a23c <_free_r+0x84>
  42a374:	20400500 	.word	0x20400500
  42a378:	20400508 	.word	0x20400508
  42a37c:	2040090c 	.word	0x2040090c
  42a380:	2043a17c 	.word	0x2043a17c

0042a384 <__sfvwrite_r>:
  42a384:	6893      	ldr	r3, [r2, #8]
  42a386:	2b00      	cmp	r3, #0
  42a388:	d073      	beq.n	42a472 <__sfvwrite_r+0xee>
  42a38a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42a38e:	898b      	ldrh	r3, [r1, #12]
  42a390:	b083      	sub	sp, #12
  42a392:	460c      	mov	r4, r1
  42a394:	0719      	lsls	r1, r3, #28
  42a396:	9000      	str	r0, [sp, #0]
  42a398:	4616      	mov	r6, r2
  42a39a:	d526      	bpl.n	42a3ea <__sfvwrite_r+0x66>
  42a39c:	6922      	ldr	r2, [r4, #16]
  42a39e:	b322      	cbz	r2, 42a3ea <__sfvwrite_r+0x66>
  42a3a0:	f013 0002 	ands.w	r0, r3, #2
  42a3a4:	6835      	ldr	r5, [r6, #0]
  42a3a6:	d02c      	beq.n	42a402 <__sfvwrite_r+0x7e>
  42a3a8:	f04f 0900 	mov.w	r9, #0
  42a3ac:	4fb0      	ldr	r7, [pc, #704]	; (42a670 <__sfvwrite_r+0x2ec>)
  42a3ae:	46c8      	mov	r8, r9
  42a3b0:	46b2      	mov	sl, r6
  42a3b2:	45b8      	cmp	r8, r7
  42a3b4:	4643      	mov	r3, r8
  42a3b6:	464a      	mov	r2, r9
  42a3b8:	bf28      	it	cs
  42a3ba:	463b      	movcs	r3, r7
  42a3bc:	9800      	ldr	r0, [sp, #0]
  42a3be:	f1b8 0f00 	cmp.w	r8, #0
  42a3c2:	d050      	beq.n	42a466 <__sfvwrite_r+0xe2>
  42a3c4:	69e1      	ldr	r1, [r4, #28]
  42a3c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  42a3c8:	47b0      	blx	r6
  42a3ca:	2800      	cmp	r0, #0
  42a3cc:	dd58      	ble.n	42a480 <__sfvwrite_r+0xfc>
  42a3ce:	f8da 3008 	ldr.w	r3, [sl, #8]
  42a3d2:	1a1b      	subs	r3, r3, r0
  42a3d4:	4481      	add	r9, r0
  42a3d6:	eba8 0800 	sub.w	r8, r8, r0
  42a3da:	f8ca 3008 	str.w	r3, [sl, #8]
  42a3de:	2b00      	cmp	r3, #0
  42a3e0:	d1e7      	bne.n	42a3b2 <__sfvwrite_r+0x2e>
  42a3e2:	2000      	movs	r0, #0
  42a3e4:	b003      	add	sp, #12
  42a3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42a3ea:	4621      	mov	r1, r4
  42a3ec:	9800      	ldr	r0, [sp, #0]
  42a3ee:	f7ff fc51 	bl	429c94 <__swsetup_r>
  42a3f2:	2800      	cmp	r0, #0
  42a3f4:	f040 8133 	bne.w	42a65e <__sfvwrite_r+0x2da>
  42a3f8:	89a3      	ldrh	r3, [r4, #12]
  42a3fa:	6835      	ldr	r5, [r6, #0]
  42a3fc:	f013 0002 	ands.w	r0, r3, #2
  42a400:	d1d2      	bne.n	42a3a8 <__sfvwrite_r+0x24>
  42a402:	f013 0901 	ands.w	r9, r3, #1
  42a406:	d145      	bne.n	42a494 <__sfvwrite_r+0x110>
  42a408:	464f      	mov	r7, r9
  42a40a:	9601      	str	r6, [sp, #4]
  42a40c:	b337      	cbz	r7, 42a45c <__sfvwrite_r+0xd8>
  42a40e:	059a      	lsls	r2, r3, #22
  42a410:	f8d4 8008 	ldr.w	r8, [r4, #8]
  42a414:	f140 8083 	bpl.w	42a51e <__sfvwrite_r+0x19a>
  42a418:	4547      	cmp	r7, r8
  42a41a:	46c3      	mov	fp, r8
  42a41c:	f0c0 80ab 	bcc.w	42a576 <__sfvwrite_r+0x1f2>
  42a420:	f413 6f90 	tst.w	r3, #1152	; 0x480
  42a424:	f040 80ac 	bne.w	42a580 <__sfvwrite_r+0x1fc>
  42a428:	6820      	ldr	r0, [r4, #0]
  42a42a:	46ba      	mov	sl, r7
  42a42c:	465a      	mov	r2, fp
  42a42e:	4649      	mov	r1, r9
  42a430:	f000 fa3e 	bl	42a8b0 <memmove>
  42a434:	68a2      	ldr	r2, [r4, #8]
  42a436:	6823      	ldr	r3, [r4, #0]
  42a438:	eba2 0208 	sub.w	r2, r2, r8
  42a43c:	445b      	add	r3, fp
  42a43e:	60a2      	str	r2, [r4, #8]
  42a440:	6023      	str	r3, [r4, #0]
  42a442:	9a01      	ldr	r2, [sp, #4]
  42a444:	6893      	ldr	r3, [r2, #8]
  42a446:	eba3 030a 	sub.w	r3, r3, sl
  42a44a:	44d1      	add	r9, sl
  42a44c:	eba7 070a 	sub.w	r7, r7, sl
  42a450:	6093      	str	r3, [r2, #8]
  42a452:	2b00      	cmp	r3, #0
  42a454:	d0c5      	beq.n	42a3e2 <__sfvwrite_r+0x5e>
  42a456:	89a3      	ldrh	r3, [r4, #12]
  42a458:	2f00      	cmp	r7, #0
  42a45a:	d1d8      	bne.n	42a40e <__sfvwrite_r+0x8a>
  42a45c:	f8d5 9000 	ldr.w	r9, [r5]
  42a460:	686f      	ldr	r7, [r5, #4]
  42a462:	3508      	adds	r5, #8
  42a464:	e7d2      	b.n	42a40c <__sfvwrite_r+0x88>
  42a466:	f8d5 9000 	ldr.w	r9, [r5]
  42a46a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  42a46e:	3508      	adds	r5, #8
  42a470:	e79f      	b.n	42a3b2 <__sfvwrite_r+0x2e>
  42a472:	2000      	movs	r0, #0
  42a474:	4770      	bx	lr
  42a476:	4621      	mov	r1, r4
  42a478:	9800      	ldr	r0, [sp, #0]
  42a47a:	f7ff fd1f 	bl	429ebc <_fflush_r>
  42a47e:	b370      	cbz	r0, 42a4de <__sfvwrite_r+0x15a>
  42a480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42a484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  42a488:	f04f 30ff 	mov.w	r0, #4294967295
  42a48c:	81a3      	strh	r3, [r4, #12]
  42a48e:	b003      	add	sp, #12
  42a490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42a494:	4681      	mov	r9, r0
  42a496:	4633      	mov	r3, r6
  42a498:	464e      	mov	r6, r9
  42a49a:	46a8      	mov	r8, r5
  42a49c:	469a      	mov	sl, r3
  42a49e:	464d      	mov	r5, r9
  42a4a0:	b34e      	cbz	r6, 42a4f6 <__sfvwrite_r+0x172>
  42a4a2:	b380      	cbz	r0, 42a506 <__sfvwrite_r+0x182>
  42a4a4:	6820      	ldr	r0, [r4, #0]
  42a4a6:	6923      	ldr	r3, [r4, #16]
  42a4a8:	6962      	ldr	r2, [r4, #20]
  42a4aa:	45b1      	cmp	r9, r6
  42a4ac:	46cb      	mov	fp, r9
  42a4ae:	bf28      	it	cs
  42a4b0:	46b3      	movcs	fp, r6
  42a4b2:	4298      	cmp	r0, r3
  42a4b4:	465f      	mov	r7, fp
  42a4b6:	d904      	bls.n	42a4c2 <__sfvwrite_r+0x13e>
  42a4b8:	68a3      	ldr	r3, [r4, #8]
  42a4ba:	4413      	add	r3, r2
  42a4bc:	459b      	cmp	fp, r3
  42a4be:	f300 80a6 	bgt.w	42a60e <__sfvwrite_r+0x28a>
  42a4c2:	4593      	cmp	fp, r2
  42a4c4:	db4b      	blt.n	42a55e <__sfvwrite_r+0x1da>
  42a4c6:	4613      	mov	r3, r2
  42a4c8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  42a4ca:	69e1      	ldr	r1, [r4, #28]
  42a4cc:	9800      	ldr	r0, [sp, #0]
  42a4ce:	462a      	mov	r2, r5
  42a4d0:	47b8      	blx	r7
  42a4d2:	1e07      	subs	r7, r0, #0
  42a4d4:	ddd4      	ble.n	42a480 <__sfvwrite_r+0xfc>
  42a4d6:	ebb9 0907 	subs.w	r9, r9, r7
  42a4da:	d0cc      	beq.n	42a476 <__sfvwrite_r+0xf2>
  42a4dc:	2001      	movs	r0, #1
  42a4de:	f8da 3008 	ldr.w	r3, [sl, #8]
  42a4e2:	1bdb      	subs	r3, r3, r7
  42a4e4:	443d      	add	r5, r7
  42a4e6:	1bf6      	subs	r6, r6, r7
  42a4e8:	f8ca 3008 	str.w	r3, [sl, #8]
  42a4ec:	2b00      	cmp	r3, #0
  42a4ee:	f43f af78 	beq.w	42a3e2 <__sfvwrite_r+0x5e>
  42a4f2:	2e00      	cmp	r6, #0
  42a4f4:	d1d5      	bne.n	42a4a2 <__sfvwrite_r+0x11e>
  42a4f6:	f108 0308 	add.w	r3, r8, #8
  42a4fa:	e913 0060 	ldmdb	r3, {r5, r6}
  42a4fe:	4698      	mov	r8, r3
  42a500:	3308      	adds	r3, #8
  42a502:	2e00      	cmp	r6, #0
  42a504:	d0f9      	beq.n	42a4fa <__sfvwrite_r+0x176>
  42a506:	4632      	mov	r2, r6
  42a508:	210a      	movs	r1, #10
  42a50a:	4628      	mov	r0, r5
  42a50c:	f000 f980 	bl	42a810 <memchr>
  42a510:	2800      	cmp	r0, #0
  42a512:	f000 80a1 	beq.w	42a658 <__sfvwrite_r+0x2d4>
  42a516:	3001      	adds	r0, #1
  42a518:	eba0 0905 	sub.w	r9, r0, r5
  42a51c:	e7c2      	b.n	42a4a4 <__sfvwrite_r+0x120>
  42a51e:	6820      	ldr	r0, [r4, #0]
  42a520:	6923      	ldr	r3, [r4, #16]
  42a522:	4298      	cmp	r0, r3
  42a524:	d802      	bhi.n	42a52c <__sfvwrite_r+0x1a8>
  42a526:	6963      	ldr	r3, [r4, #20]
  42a528:	429f      	cmp	r7, r3
  42a52a:	d25d      	bcs.n	42a5e8 <__sfvwrite_r+0x264>
  42a52c:	45b8      	cmp	r8, r7
  42a52e:	bf28      	it	cs
  42a530:	46b8      	movcs	r8, r7
  42a532:	4642      	mov	r2, r8
  42a534:	4649      	mov	r1, r9
  42a536:	f000 f9bb 	bl	42a8b0 <memmove>
  42a53a:	68a3      	ldr	r3, [r4, #8]
  42a53c:	6822      	ldr	r2, [r4, #0]
  42a53e:	eba3 0308 	sub.w	r3, r3, r8
  42a542:	4442      	add	r2, r8
  42a544:	60a3      	str	r3, [r4, #8]
  42a546:	6022      	str	r2, [r4, #0]
  42a548:	b10b      	cbz	r3, 42a54e <__sfvwrite_r+0x1ca>
  42a54a:	46c2      	mov	sl, r8
  42a54c:	e779      	b.n	42a442 <__sfvwrite_r+0xbe>
  42a54e:	4621      	mov	r1, r4
  42a550:	9800      	ldr	r0, [sp, #0]
  42a552:	f7ff fcb3 	bl	429ebc <_fflush_r>
  42a556:	2800      	cmp	r0, #0
  42a558:	d192      	bne.n	42a480 <__sfvwrite_r+0xfc>
  42a55a:	46c2      	mov	sl, r8
  42a55c:	e771      	b.n	42a442 <__sfvwrite_r+0xbe>
  42a55e:	465a      	mov	r2, fp
  42a560:	4629      	mov	r1, r5
  42a562:	f000 f9a5 	bl	42a8b0 <memmove>
  42a566:	68a2      	ldr	r2, [r4, #8]
  42a568:	6823      	ldr	r3, [r4, #0]
  42a56a:	eba2 020b 	sub.w	r2, r2, fp
  42a56e:	445b      	add	r3, fp
  42a570:	60a2      	str	r2, [r4, #8]
  42a572:	6023      	str	r3, [r4, #0]
  42a574:	e7af      	b.n	42a4d6 <__sfvwrite_r+0x152>
  42a576:	6820      	ldr	r0, [r4, #0]
  42a578:	46b8      	mov	r8, r7
  42a57a:	46ba      	mov	sl, r7
  42a57c:	46bb      	mov	fp, r7
  42a57e:	e755      	b.n	42a42c <__sfvwrite_r+0xa8>
  42a580:	6962      	ldr	r2, [r4, #20]
  42a582:	6820      	ldr	r0, [r4, #0]
  42a584:	6921      	ldr	r1, [r4, #16]
  42a586:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  42a58a:	eba0 0a01 	sub.w	sl, r0, r1
  42a58e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  42a592:	f10a 0001 	add.w	r0, sl, #1
  42a596:	ea4f 0868 	mov.w	r8, r8, asr #1
  42a59a:	4438      	add	r0, r7
  42a59c:	4540      	cmp	r0, r8
  42a59e:	4642      	mov	r2, r8
  42a5a0:	bf84      	itt	hi
  42a5a2:	4680      	movhi	r8, r0
  42a5a4:	4642      	movhi	r2, r8
  42a5a6:	055b      	lsls	r3, r3, #21
  42a5a8:	d544      	bpl.n	42a634 <__sfvwrite_r+0x2b0>
  42a5aa:	4611      	mov	r1, r2
  42a5ac:	9800      	ldr	r0, [sp, #0]
  42a5ae:	f7fd fd47 	bl	428040 <_malloc_r>
  42a5b2:	4683      	mov	fp, r0
  42a5b4:	2800      	cmp	r0, #0
  42a5b6:	d055      	beq.n	42a664 <__sfvwrite_r+0x2e0>
  42a5b8:	4652      	mov	r2, sl
  42a5ba:	6921      	ldr	r1, [r4, #16]
  42a5bc:	f7fe f820 	bl	428600 <memcpy>
  42a5c0:	89a3      	ldrh	r3, [r4, #12]
  42a5c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  42a5c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  42a5ca:	81a3      	strh	r3, [r4, #12]
  42a5cc:	eb0b 000a 	add.w	r0, fp, sl
  42a5d0:	eba8 030a 	sub.w	r3, r8, sl
  42a5d4:	f8c4 b010 	str.w	fp, [r4, #16]
  42a5d8:	f8c4 8014 	str.w	r8, [r4, #20]
  42a5dc:	6020      	str	r0, [r4, #0]
  42a5de:	60a3      	str	r3, [r4, #8]
  42a5e0:	46b8      	mov	r8, r7
  42a5e2:	46ba      	mov	sl, r7
  42a5e4:	46bb      	mov	fp, r7
  42a5e6:	e721      	b.n	42a42c <__sfvwrite_r+0xa8>
  42a5e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  42a5ec:	42b9      	cmp	r1, r7
  42a5ee:	bf28      	it	cs
  42a5f0:	4639      	movcs	r1, r7
  42a5f2:	464a      	mov	r2, r9
  42a5f4:	fb91 f1f3 	sdiv	r1, r1, r3
  42a5f8:	9800      	ldr	r0, [sp, #0]
  42a5fa:	6a66      	ldr	r6, [r4, #36]	; 0x24
  42a5fc:	fb03 f301 	mul.w	r3, r3, r1
  42a600:	69e1      	ldr	r1, [r4, #28]
  42a602:	47b0      	blx	r6
  42a604:	f1b0 0a00 	subs.w	sl, r0, #0
  42a608:	f73f af1b 	bgt.w	42a442 <__sfvwrite_r+0xbe>
  42a60c:	e738      	b.n	42a480 <__sfvwrite_r+0xfc>
  42a60e:	461a      	mov	r2, r3
  42a610:	4629      	mov	r1, r5
  42a612:	9301      	str	r3, [sp, #4]
  42a614:	f000 f94c 	bl	42a8b0 <memmove>
  42a618:	6822      	ldr	r2, [r4, #0]
  42a61a:	9b01      	ldr	r3, [sp, #4]
  42a61c:	9800      	ldr	r0, [sp, #0]
  42a61e:	441a      	add	r2, r3
  42a620:	6022      	str	r2, [r4, #0]
  42a622:	4621      	mov	r1, r4
  42a624:	f7ff fc4a 	bl	429ebc <_fflush_r>
  42a628:	9b01      	ldr	r3, [sp, #4]
  42a62a:	2800      	cmp	r0, #0
  42a62c:	f47f af28 	bne.w	42a480 <__sfvwrite_r+0xfc>
  42a630:	461f      	mov	r7, r3
  42a632:	e750      	b.n	42a4d6 <__sfvwrite_r+0x152>
  42a634:	9800      	ldr	r0, [sp, #0]
  42a636:	f000 f99f 	bl	42a978 <_realloc_r>
  42a63a:	4683      	mov	fp, r0
  42a63c:	2800      	cmp	r0, #0
  42a63e:	d1c5      	bne.n	42a5cc <__sfvwrite_r+0x248>
  42a640:	9d00      	ldr	r5, [sp, #0]
  42a642:	6921      	ldr	r1, [r4, #16]
  42a644:	4628      	mov	r0, r5
  42a646:	f7ff fdb7 	bl	42a1b8 <_free_r>
  42a64a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42a64e:	220c      	movs	r2, #12
  42a650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  42a654:	602a      	str	r2, [r5, #0]
  42a656:	e715      	b.n	42a484 <__sfvwrite_r+0x100>
  42a658:	f106 0901 	add.w	r9, r6, #1
  42a65c:	e722      	b.n	42a4a4 <__sfvwrite_r+0x120>
  42a65e:	f04f 30ff 	mov.w	r0, #4294967295
  42a662:	e6bf      	b.n	42a3e4 <__sfvwrite_r+0x60>
  42a664:	9a00      	ldr	r2, [sp, #0]
  42a666:	230c      	movs	r3, #12
  42a668:	6013      	str	r3, [r2, #0]
  42a66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42a66e:	e709      	b.n	42a484 <__sfvwrite_r+0x100>
  42a670:	7ffffc00 	.word	0x7ffffc00

0042a674 <_fwalk_reent>:
  42a674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  42a678:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  42a67c:	d01f      	beq.n	42a6be <_fwalk_reent+0x4a>
  42a67e:	4688      	mov	r8, r1
  42a680:	4606      	mov	r6, r0
  42a682:	f04f 0900 	mov.w	r9, #0
  42a686:	687d      	ldr	r5, [r7, #4]
  42a688:	68bc      	ldr	r4, [r7, #8]
  42a68a:	3d01      	subs	r5, #1
  42a68c:	d411      	bmi.n	42a6b2 <_fwalk_reent+0x3e>
  42a68e:	89a3      	ldrh	r3, [r4, #12]
  42a690:	2b01      	cmp	r3, #1
  42a692:	f105 35ff 	add.w	r5, r5, #4294967295
  42a696:	d908      	bls.n	42a6aa <_fwalk_reent+0x36>
  42a698:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  42a69c:	3301      	adds	r3, #1
  42a69e:	4621      	mov	r1, r4
  42a6a0:	4630      	mov	r0, r6
  42a6a2:	d002      	beq.n	42a6aa <_fwalk_reent+0x36>
  42a6a4:	47c0      	blx	r8
  42a6a6:	ea49 0900 	orr.w	r9, r9, r0
  42a6aa:	1c6b      	adds	r3, r5, #1
  42a6ac:	f104 0468 	add.w	r4, r4, #104	; 0x68
  42a6b0:	d1ed      	bne.n	42a68e <_fwalk_reent+0x1a>
  42a6b2:	683f      	ldr	r7, [r7, #0]
  42a6b4:	2f00      	cmp	r7, #0
  42a6b6:	d1e6      	bne.n	42a686 <_fwalk_reent+0x12>
  42a6b8:	4648      	mov	r0, r9
  42a6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42a6be:	46b9      	mov	r9, r7
  42a6c0:	4648      	mov	r0, r9
  42a6c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42a6c6:	bf00      	nop

0042a6c8 <__locale_mb_cur_max>:
  42a6c8:	4b04      	ldr	r3, [pc, #16]	; (42a6dc <__locale_mb_cur_max+0x14>)
  42a6ca:	4a05      	ldr	r2, [pc, #20]	; (42a6e0 <__locale_mb_cur_max+0x18>)
  42a6cc:	681b      	ldr	r3, [r3, #0]
  42a6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  42a6d0:	2b00      	cmp	r3, #0
  42a6d2:	bf08      	it	eq
  42a6d4:	4613      	moveq	r3, r2
  42a6d6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  42a6da:	4770      	bx	lr
  42a6dc:	204000d4 	.word	0x204000d4
  42a6e0:	20400914 	.word	0x20400914

0042a6e4 <__retarget_lock_init_recursive>:
  42a6e4:	4770      	bx	lr
  42a6e6:	bf00      	nop

0042a6e8 <__retarget_lock_close_recursive>:
  42a6e8:	4770      	bx	lr
  42a6ea:	bf00      	nop

0042a6ec <__retarget_lock_acquire_recursive>:
  42a6ec:	4770      	bx	lr
  42a6ee:	bf00      	nop

0042a6f0 <__retarget_lock_release_recursive>:
  42a6f0:	4770      	bx	lr
  42a6f2:	bf00      	nop

0042a6f4 <__swhatbuf_r>:
  42a6f4:	b570      	push	{r4, r5, r6, lr}
  42a6f6:	460c      	mov	r4, r1
  42a6f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  42a6fc:	2900      	cmp	r1, #0
  42a6fe:	b090      	sub	sp, #64	; 0x40
  42a700:	4615      	mov	r5, r2
  42a702:	461e      	mov	r6, r3
  42a704:	db14      	blt.n	42a730 <__swhatbuf_r+0x3c>
  42a706:	aa01      	add	r2, sp, #4
  42a708:	f000 fc9c 	bl	42b044 <_fstat_r>
  42a70c:	2800      	cmp	r0, #0
  42a70e:	db0f      	blt.n	42a730 <__swhatbuf_r+0x3c>
  42a710:	9a02      	ldr	r2, [sp, #8]
  42a712:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  42a716:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  42a71a:	fab2 f282 	clz	r2, r2
  42a71e:	0952      	lsrs	r2, r2, #5
  42a720:	f44f 6380 	mov.w	r3, #1024	; 0x400
  42a724:	f44f 6000 	mov.w	r0, #2048	; 0x800
  42a728:	6032      	str	r2, [r6, #0]
  42a72a:	602b      	str	r3, [r5, #0]
  42a72c:	b010      	add	sp, #64	; 0x40
  42a72e:	bd70      	pop	{r4, r5, r6, pc}
  42a730:	89a2      	ldrh	r2, [r4, #12]
  42a732:	2300      	movs	r3, #0
  42a734:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  42a738:	6033      	str	r3, [r6, #0]
  42a73a:	d004      	beq.n	42a746 <__swhatbuf_r+0x52>
  42a73c:	2240      	movs	r2, #64	; 0x40
  42a73e:	4618      	mov	r0, r3
  42a740:	602a      	str	r2, [r5, #0]
  42a742:	b010      	add	sp, #64	; 0x40
  42a744:	bd70      	pop	{r4, r5, r6, pc}
  42a746:	f44f 6380 	mov.w	r3, #1024	; 0x400
  42a74a:	602b      	str	r3, [r5, #0]
  42a74c:	b010      	add	sp, #64	; 0x40
  42a74e:	bd70      	pop	{r4, r5, r6, pc}

0042a750 <__smakebuf_r>:
  42a750:	898a      	ldrh	r2, [r1, #12]
  42a752:	0792      	lsls	r2, r2, #30
  42a754:	460b      	mov	r3, r1
  42a756:	d506      	bpl.n	42a766 <__smakebuf_r+0x16>
  42a758:	f101 0243 	add.w	r2, r1, #67	; 0x43
  42a75c:	2101      	movs	r1, #1
  42a75e:	601a      	str	r2, [r3, #0]
  42a760:	611a      	str	r2, [r3, #16]
  42a762:	6159      	str	r1, [r3, #20]
  42a764:	4770      	bx	lr
  42a766:	b5f0      	push	{r4, r5, r6, r7, lr}
  42a768:	b083      	sub	sp, #12
  42a76a:	ab01      	add	r3, sp, #4
  42a76c:	466a      	mov	r2, sp
  42a76e:	460c      	mov	r4, r1
  42a770:	4606      	mov	r6, r0
  42a772:	f7ff ffbf 	bl	42a6f4 <__swhatbuf_r>
  42a776:	9900      	ldr	r1, [sp, #0]
  42a778:	4605      	mov	r5, r0
  42a77a:	4630      	mov	r0, r6
  42a77c:	f7fd fc60 	bl	428040 <_malloc_r>
  42a780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42a784:	b1d8      	cbz	r0, 42a7be <__smakebuf_r+0x6e>
  42a786:	9a01      	ldr	r2, [sp, #4]
  42a788:	4f15      	ldr	r7, [pc, #84]	; (42a7e0 <__smakebuf_r+0x90>)
  42a78a:	9900      	ldr	r1, [sp, #0]
  42a78c:	63f7      	str	r7, [r6, #60]	; 0x3c
  42a78e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  42a792:	81a3      	strh	r3, [r4, #12]
  42a794:	6020      	str	r0, [r4, #0]
  42a796:	6120      	str	r0, [r4, #16]
  42a798:	6161      	str	r1, [r4, #20]
  42a79a:	b91a      	cbnz	r2, 42a7a4 <__smakebuf_r+0x54>
  42a79c:	432b      	orrs	r3, r5
  42a79e:	81a3      	strh	r3, [r4, #12]
  42a7a0:	b003      	add	sp, #12
  42a7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42a7a4:	4630      	mov	r0, r6
  42a7a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  42a7aa:	f000 fc5f 	bl	42b06c <_isatty_r>
  42a7ae:	b1a0      	cbz	r0, 42a7da <__smakebuf_r+0x8a>
  42a7b0:	89a3      	ldrh	r3, [r4, #12]
  42a7b2:	f023 0303 	bic.w	r3, r3, #3
  42a7b6:	f043 0301 	orr.w	r3, r3, #1
  42a7ba:	b21b      	sxth	r3, r3
  42a7bc:	e7ee      	b.n	42a79c <__smakebuf_r+0x4c>
  42a7be:	059a      	lsls	r2, r3, #22
  42a7c0:	d4ee      	bmi.n	42a7a0 <__smakebuf_r+0x50>
  42a7c2:	f023 0303 	bic.w	r3, r3, #3
  42a7c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  42a7ca:	f043 0302 	orr.w	r3, r3, #2
  42a7ce:	2101      	movs	r1, #1
  42a7d0:	81a3      	strh	r3, [r4, #12]
  42a7d2:	6022      	str	r2, [r4, #0]
  42a7d4:	6122      	str	r2, [r4, #16]
  42a7d6:	6161      	str	r1, [r4, #20]
  42a7d8:	e7e2      	b.n	42a7a0 <__smakebuf_r+0x50>
  42a7da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42a7de:	e7dd      	b.n	42a79c <__smakebuf_r+0x4c>
  42a7e0:	00429f11 	.word	0x00429f11

0042a7e4 <__ascii_mbtowc>:
  42a7e4:	b082      	sub	sp, #8
  42a7e6:	b149      	cbz	r1, 42a7fc <__ascii_mbtowc+0x18>
  42a7e8:	b15a      	cbz	r2, 42a802 <__ascii_mbtowc+0x1e>
  42a7ea:	b16b      	cbz	r3, 42a808 <__ascii_mbtowc+0x24>
  42a7ec:	7813      	ldrb	r3, [r2, #0]
  42a7ee:	600b      	str	r3, [r1, #0]
  42a7f0:	7812      	ldrb	r2, [r2, #0]
  42a7f2:	1c10      	adds	r0, r2, #0
  42a7f4:	bf18      	it	ne
  42a7f6:	2001      	movne	r0, #1
  42a7f8:	b002      	add	sp, #8
  42a7fa:	4770      	bx	lr
  42a7fc:	a901      	add	r1, sp, #4
  42a7fe:	2a00      	cmp	r2, #0
  42a800:	d1f3      	bne.n	42a7ea <__ascii_mbtowc+0x6>
  42a802:	4610      	mov	r0, r2
  42a804:	b002      	add	sp, #8
  42a806:	4770      	bx	lr
  42a808:	f06f 0001 	mvn.w	r0, #1
  42a80c:	e7f4      	b.n	42a7f8 <__ascii_mbtowc+0x14>
  42a80e:	bf00      	nop

0042a810 <memchr>:
  42a810:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  42a814:	2a10      	cmp	r2, #16
  42a816:	db2b      	blt.n	42a870 <memchr+0x60>
  42a818:	f010 0f07 	tst.w	r0, #7
  42a81c:	d008      	beq.n	42a830 <memchr+0x20>
  42a81e:	f810 3b01 	ldrb.w	r3, [r0], #1
  42a822:	3a01      	subs	r2, #1
  42a824:	428b      	cmp	r3, r1
  42a826:	d02d      	beq.n	42a884 <memchr+0x74>
  42a828:	f010 0f07 	tst.w	r0, #7
  42a82c:	b342      	cbz	r2, 42a880 <memchr+0x70>
  42a82e:	d1f6      	bne.n	42a81e <memchr+0xe>
  42a830:	b4f0      	push	{r4, r5, r6, r7}
  42a832:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  42a836:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  42a83a:	f022 0407 	bic.w	r4, r2, #7
  42a83e:	f07f 0700 	mvns.w	r7, #0
  42a842:	2300      	movs	r3, #0
  42a844:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  42a848:	3c08      	subs	r4, #8
  42a84a:	ea85 0501 	eor.w	r5, r5, r1
  42a84e:	ea86 0601 	eor.w	r6, r6, r1
  42a852:	fa85 f547 	uadd8	r5, r5, r7
  42a856:	faa3 f587 	sel	r5, r3, r7
  42a85a:	fa86 f647 	uadd8	r6, r6, r7
  42a85e:	faa5 f687 	sel	r6, r5, r7
  42a862:	b98e      	cbnz	r6, 42a888 <memchr+0x78>
  42a864:	d1ee      	bne.n	42a844 <memchr+0x34>
  42a866:	bcf0      	pop	{r4, r5, r6, r7}
  42a868:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  42a86c:	f002 0207 	and.w	r2, r2, #7
  42a870:	b132      	cbz	r2, 42a880 <memchr+0x70>
  42a872:	f810 3b01 	ldrb.w	r3, [r0], #1
  42a876:	3a01      	subs	r2, #1
  42a878:	ea83 0301 	eor.w	r3, r3, r1
  42a87c:	b113      	cbz	r3, 42a884 <memchr+0x74>
  42a87e:	d1f8      	bne.n	42a872 <memchr+0x62>
  42a880:	2000      	movs	r0, #0
  42a882:	4770      	bx	lr
  42a884:	3801      	subs	r0, #1
  42a886:	4770      	bx	lr
  42a888:	2d00      	cmp	r5, #0
  42a88a:	bf06      	itte	eq
  42a88c:	4635      	moveq	r5, r6
  42a88e:	3803      	subeq	r0, #3
  42a890:	3807      	subne	r0, #7
  42a892:	f015 0f01 	tst.w	r5, #1
  42a896:	d107      	bne.n	42a8a8 <memchr+0x98>
  42a898:	3001      	adds	r0, #1
  42a89a:	f415 7f80 	tst.w	r5, #256	; 0x100
  42a89e:	bf02      	ittt	eq
  42a8a0:	3001      	addeq	r0, #1
  42a8a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  42a8a6:	3001      	addeq	r0, #1
  42a8a8:	bcf0      	pop	{r4, r5, r6, r7}
  42a8aa:	3801      	subs	r0, #1
  42a8ac:	4770      	bx	lr
  42a8ae:	bf00      	nop

0042a8b0 <memmove>:
  42a8b0:	4288      	cmp	r0, r1
  42a8b2:	b5f0      	push	{r4, r5, r6, r7, lr}
  42a8b4:	d90d      	bls.n	42a8d2 <memmove+0x22>
  42a8b6:	188b      	adds	r3, r1, r2
  42a8b8:	4298      	cmp	r0, r3
  42a8ba:	d20a      	bcs.n	42a8d2 <memmove+0x22>
  42a8bc:	1884      	adds	r4, r0, r2
  42a8be:	2a00      	cmp	r2, #0
  42a8c0:	d051      	beq.n	42a966 <memmove+0xb6>
  42a8c2:	4622      	mov	r2, r4
  42a8c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  42a8c8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  42a8cc:	4299      	cmp	r1, r3
  42a8ce:	d1f9      	bne.n	42a8c4 <memmove+0x14>
  42a8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42a8d2:	2a0f      	cmp	r2, #15
  42a8d4:	d948      	bls.n	42a968 <memmove+0xb8>
  42a8d6:	ea41 0300 	orr.w	r3, r1, r0
  42a8da:	079b      	lsls	r3, r3, #30
  42a8dc:	d146      	bne.n	42a96c <memmove+0xbc>
  42a8de:	f100 0410 	add.w	r4, r0, #16
  42a8e2:	f101 0310 	add.w	r3, r1, #16
  42a8e6:	4615      	mov	r5, r2
  42a8e8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  42a8ec:	f844 6c10 	str.w	r6, [r4, #-16]
  42a8f0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  42a8f4:	f844 6c0c 	str.w	r6, [r4, #-12]
  42a8f8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  42a8fc:	f844 6c08 	str.w	r6, [r4, #-8]
  42a900:	3d10      	subs	r5, #16
  42a902:	f853 6c04 	ldr.w	r6, [r3, #-4]
  42a906:	f844 6c04 	str.w	r6, [r4, #-4]
  42a90a:	2d0f      	cmp	r5, #15
  42a90c:	f103 0310 	add.w	r3, r3, #16
  42a910:	f104 0410 	add.w	r4, r4, #16
  42a914:	d8e8      	bhi.n	42a8e8 <memmove+0x38>
  42a916:	f1a2 0310 	sub.w	r3, r2, #16
  42a91a:	f023 030f 	bic.w	r3, r3, #15
  42a91e:	f002 0e0f 	and.w	lr, r2, #15
  42a922:	3310      	adds	r3, #16
  42a924:	f1be 0f03 	cmp.w	lr, #3
  42a928:	4419      	add	r1, r3
  42a92a:	4403      	add	r3, r0
  42a92c:	d921      	bls.n	42a972 <memmove+0xc2>
  42a92e:	1f1e      	subs	r6, r3, #4
  42a930:	460d      	mov	r5, r1
  42a932:	4674      	mov	r4, lr
  42a934:	3c04      	subs	r4, #4
  42a936:	f855 7b04 	ldr.w	r7, [r5], #4
  42a93a:	f846 7f04 	str.w	r7, [r6, #4]!
  42a93e:	2c03      	cmp	r4, #3
  42a940:	d8f8      	bhi.n	42a934 <memmove+0x84>
  42a942:	f1ae 0404 	sub.w	r4, lr, #4
  42a946:	f024 0403 	bic.w	r4, r4, #3
  42a94a:	3404      	adds	r4, #4
  42a94c:	4421      	add	r1, r4
  42a94e:	4423      	add	r3, r4
  42a950:	f002 0203 	and.w	r2, r2, #3
  42a954:	b162      	cbz	r2, 42a970 <memmove+0xc0>
  42a956:	3b01      	subs	r3, #1
  42a958:	440a      	add	r2, r1
  42a95a:	f811 4b01 	ldrb.w	r4, [r1], #1
  42a95e:	f803 4f01 	strb.w	r4, [r3, #1]!
  42a962:	428a      	cmp	r2, r1
  42a964:	d1f9      	bne.n	42a95a <memmove+0xaa>
  42a966:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42a968:	4603      	mov	r3, r0
  42a96a:	e7f3      	b.n	42a954 <memmove+0xa4>
  42a96c:	4603      	mov	r3, r0
  42a96e:	e7f2      	b.n	42a956 <memmove+0xa6>
  42a970:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42a972:	4672      	mov	r2, lr
  42a974:	e7ee      	b.n	42a954 <memmove+0xa4>
  42a976:	bf00      	nop

0042a978 <_realloc_r>:
  42a978:	2900      	cmp	r1, #0
  42a97a:	f000 8095 	beq.w	42aaa8 <_realloc_r+0x130>
  42a97e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42a982:	460d      	mov	r5, r1
  42a984:	4616      	mov	r6, r2
  42a986:	b083      	sub	sp, #12
  42a988:	4680      	mov	r8, r0
  42a98a:	f106 070b 	add.w	r7, r6, #11
  42a98e:	f7fd ff1f 	bl	4287d0 <__malloc_lock>
  42a992:	f855 ec04 	ldr.w	lr, [r5, #-4]
  42a996:	2f16      	cmp	r7, #22
  42a998:	f02e 0403 	bic.w	r4, lr, #3
  42a99c:	f1a5 0908 	sub.w	r9, r5, #8
  42a9a0:	d83c      	bhi.n	42aa1c <_realloc_r+0xa4>
  42a9a2:	2210      	movs	r2, #16
  42a9a4:	4617      	mov	r7, r2
  42a9a6:	42be      	cmp	r6, r7
  42a9a8:	d83d      	bhi.n	42aa26 <_realloc_r+0xae>
  42a9aa:	4294      	cmp	r4, r2
  42a9ac:	da43      	bge.n	42aa36 <_realloc_r+0xbe>
  42a9ae:	4bc4      	ldr	r3, [pc, #784]	; (42acc0 <_realloc_r+0x348>)
  42a9b0:	6899      	ldr	r1, [r3, #8]
  42a9b2:	eb09 0004 	add.w	r0, r9, r4
  42a9b6:	4288      	cmp	r0, r1
  42a9b8:	f000 80b4 	beq.w	42ab24 <_realloc_r+0x1ac>
  42a9bc:	6843      	ldr	r3, [r0, #4]
  42a9be:	f023 0101 	bic.w	r1, r3, #1
  42a9c2:	4401      	add	r1, r0
  42a9c4:	6849      	ldr	r1, [r1, #4]
  42a9c6:	07c9      	lsls	r1, r1, #31
  42a9c8:	d54c      	bpl.n	42aa64 <_realloc_r+0xec>
  42a9ca:	f01e 0f01 	tst.w	lr, #1
  42a9ce:	f000 809b 	beq.w	42ab08 <_realloc_r+0x190>
  42a9d2:	4631      	mov	r1, r6
  42a9d4:	4640      	mov	r0, r8
  42a9d6:	f7fd fb33 	bl	428040 <_malloc_r>
  42a9da:	4606      	mov	r6, r0
  42a9dc:	2800      	cmp	r0, #0
  42a9de:	d03a      	beq.n	42aa56 <_realloc_r+0xde>
  42a9e0:	f855 3c04 	ldr.w	r3, [r5, #-4]
  42a9e4:	f023 0301 	bic.w	r3, r3, #1
  42a9e8:	444b      	add	r3, r9
  42a9ea:	f1a0 0208 	sub.w	r2, r0, #8
  42a9ee:	429a      	cmp	r2, r3
  42a9f0:	f000 8121 	beq.w	42ac36 <_realloc_r+0x2be>
  42a9f4:	1f22      	subs	r2, r4, #4
  42a9f6:	2a24      	cmp	r2, #36	; 0x24
  42a9f8:	f200 8107 	bhi.w	42ac0a <_realloc_r+0x292>
  42a9fc:	2a13      	cmp	r2, #19
  42a9fe:	f200 80db 	bhi.w	42abb8 <_realloc_r+0x240>
  42aa02:	4603      	mov	r3, r0
  42aa04:	462a      	mov	r2, r5
  42aa06:	6811      	ldr	r1, [r2, #0]
  42aa08:	6019      	str	r1, [r3, #0]
  42aa0a:	6851      	ldr	r1, [r2, #4]
  42aa0c:	6059      	str	r1, [r3, #4]
  42aa0e:	6892      	ldr	r2, [r2, #8]
  42aa10:	609a      	str	r2, [r3, #8]
  42aa12:	4629      	mov	r1, r5
  42aa14:	4640      	mov	r0, r8
  42aa16:	f7ff fbcf 	bl	42a1b8 <_free_r>
  42aa1a:	e01c      	b.n	42aa56 <_realloc_r+0xde>
  42aa1c:	f027 0707 	bic.w	r7, r7, #7
  42aa20:	2f00      	cmp	r7, #0
  42aa22:	463a      	mov	r2, r7
  42aa24:	dabf      	bge.n	42a9a6 <_realloc_r+0x2e>
  42aa26:	2600      	movs	r6, #0
  42aa28:	230c      	movs	r3, #12
  42aa2a:	4630      	mov	r0, r6
  42aa2c:	f8c8 3000 	str.w	r3, [r8]
  42aa30:	b003      	add	sp, #12
  42aa32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42aa36:	462e      	mov	r6, r5
  42aa38:	1be3      	subs	r3, r4, r7
  42aa3a:	2b0f      	cmp	r3, #15
  42aa3c:	d81e      	bhi.n	42aa7c <_realloc_r+0x104>
  42aa3e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  42aa42:	f003 0301 	and.w	r3, r3, #1
  42aa46:	4323      	orrs	r3, r4
  42aa48:	444c      	add	r4, r9
  42aa4a:	f8c9 3004 	str.w	r3, [r9, #4]
  42aa4e:	6863      	ldr	r3, [r4, #4]
  42aa50:	f043 0301 	orr.w	r3, r3, #1
  42aa54:	6063      	str	r3, [r4, #4]
  42aa56:	4640      	mov	r0, r8
  42aa58:	f7fd fec0 	bl	4287dc <__malloc_unlock>
  42aa5c:	4630      	mov	r0, r6
  42aa5e:	b003      	add	sp, #12
  42aa60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42aa64:	f023 0303 	bic.w	r3, r3, #3
  42aa68:	18e1      	adds	r1, r4, r3
  42aa6a:	4291      	cmp	r1, r2
  42aa6c:	db1f      	blt.n	42aaae <_realloc_r+0x136>
  42aa6e:	68c3      	ldr	r3, [r0, #12]
  42aa70:	6882      	ldr	r2, [r0, #8]
  42aa72:	462e      	mov	r6, r5
  42aa74:	60d3      	str	r3, [r2, #12]
  42aa76:	460c      	mov	r4, r1
  42aa78:	609a      	str	r2, [r3, #8]
  42aa7a:	e7dd      	b.n	42aa38 <_realloc_r+0xc0>
  42aa7c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  42aa80:	eb09 0107 	add.w	r1, r9, r7
  42aa84:	f002 0201 	and.w	r2, r2, #1
  42aa88:	444c      	add	r4, r9
  42aa8a:	f043 0301 	orr.w	r3, r3, #1
  42aa8e:	4317      	orrs	r7, r2
  42aa90:	f8c9 7004 	str.w	r7, [r9, #4]
  42aa94:	604b      	str	r3, [r1, #4]
  42aa96:	6863      	ldr	r3, [r4, #4]
  42aa98:	f043 0301 	orr.w	r3, r3, #1
  42aa9c:	3108      	adds	r1, #8
  42aa9e:	6063      	str	r3, [r4, #4]
  42aaa0:	4640      	mov	r0, r8
  42aaa2:	f7ff fb89 	bl	42a1b8 <_free_r>
  42aaa6:	e7d6      	b.n	42aa56 <_realloc_r+0xde>
  42aaa8:	4611      	mov	r1, r2
  42aaaa:	f7fd bac9 	b.w	428040 <_malloc_r>
  42aaae:	f01e 0f01 	tst.w	lr, #1
  42aab2:	d18e      	bne.n	42a9d2 <_realloc_r+0x5a>
  42aab4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  42aab8:	eba9 0a01 	sub.w	sl, r9, r1
  42aabc:	f8da 1004 	ldr.w	r1, [sl, #4]
  42aac0:	f021 0103 	bic.w	r1, r1, #3
  42aac4:	440b      	add	r3, r1
  42aac6:	4423      	add	r3, r4
  42aac8:	4293      	cmp	r3, r2
  42aaca:	db25      	blt.n	42ab18 <_realloc_r+0x1a0>
  42aacc:	68c2      	ldr	r2, [r0, #12]
  42aace:	6881      	ldr	r1, [r0, #8]
  42aad0:	4656      	mov	r6, sl
  42aad2:	60ca      	str	r2, [r1, #12]
  42aad4:	6091      	str	r1, [r2, #8]
  42aad6:	f8da 100c 	ldr.w	r1, [sl, #12]
  42aada:	f856 0f08 	ldr.w	r0, [r6, #8]!
  42aade:	1f22      	subs	r2, r4, #4
  42aae0:	2a24      	cmp	r2, #36	; 0x24
  42aae2:	60c1      	str	r1, [r0, #12]
  42aae4:	6088      	str	r0, [r1, #8]
  42aae6:	f200 8094 	bhi.w	42ac12 <_realloc_r+0x29a>
  42aaea:	2a13      	cmp	r2, #19
  42aaec:	d96f      	bls.n	42abce <_realloc_r+0x256>
  42aaee:	6829      	ldr	r1, [r5, #0]
  42aaf0:	f8ca 1008 	str.w	r1, [sl, #8]
  42aaf4:	6869      	ldr	r1, [r5, #4]
  42aaf6:	f8ca 100c 	str.w	r1, [sl, #12]
  42aafa:	2a1b      	cmp	r2, #27
  42aafc:	f200 80a2 	bhi.w	42ac44 <_realloc_r+0x2cc>
  42ab00:	3508      	adds	r5, #8
  42ab02:	f10a 0210 	add.w	r2, sl, #16
  42ab06:	e063      	b.n	42abd0 <_realloc_r+0x258>
  42ab08:	f855 3c08 	ldr.w	r3, [r5, #-8]
  42ab0c:	eba9 0a03 	sub.w	sl, r9, r3
  42ab10:	f8da 1004 	ldr.w	r1, [sl, #4]
  42ab14:	f021 0103 	bic.w	r1, r1, #3
  42ab18:	1863      	adds	r3, r4, r1
  42ab1a:	4293      	cmp	r3, r2
  42ab1c:	f6ff af59 	blt.w	42a9d2 <_realloc_r+0x5a>
  42ab20:	4656      	mov	r6, sl
  42ab22:	e7d8      	b.n	42aad6 <_realloc_r+0x15e>
  42ab24:	6841      	ldr	r1, [r0, #4]
  42ab26:	f021 0b03 	bic.w	fp, r1, #3
  42ab2a:	44a3      	add	fp, r4
  42ab2c:	f107 0010 	add.w	r0, r7, #16
  42ab30:	4583      	cmp	fp, r0
  42ab32:	da56      	bge.n	42abe2 <_realloc_r+0x26a>
  42ab34:	f01e 0f01 	tst.w	lr, #1
  42ab38:	f47f af4b 	bne.w	42a9d2 <_realloc_r+0x5a>
  42ab3c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  42ab40:	eba9 0a01 	sub.w	sl, r9, r1
  42ab44:	f8da 1004 	ldr.w	r1, [sl, #4]
  42ab48:	f021 0103 	bic.w	r1, r1, #3
  42ab4c:	448b      	add	fp, r1
  42ab4e:	4558      	cmp	r0, fp
  42ab50:	dce2      	bgt.n	42ab18 <_realloc_r+0x1a0>
  42ab52:	4656      	mov	r6, sl
  42ab54:	f8da 100c 	ldr.w	r1, [sl, #12]
  42ab58:	f856 0f08 	ldr.w	r0, [r6, #8]!
  42ab5c:	1f22      	subs	r2, r4, #4
  42ab5e:	2a24      	cmp	r2, #36	; 0x24
  42ab60:	60c1      	str	r1, [r0, #12]
  42ab62:	6088      	str	r0, [r1, #8]
  42ab64:	f200 808f 	bhi.w	42ac86 <_realloc_r+0x30e>
  42ab68:	2a13      	cmp	r2, #19
  42ab6a:	f240 808a 	bls.w	42ac82 <_realloc_r+0x30a>
  42ab6e:	6829      	ldr	r1, [r5, #0]
  42ab70:	f8ca 1008 	str.w	r1, [sl, #8]
  42ab74:	6869      	ldr	r1, [r5, #4]
  42ab76:	f8ca 100c 	str.w	r1, [sl, #12]
  42ab7a:	2a1b      	cmp	r2, #27
  42ab7c:	f200 808a 	bhi.w	42ac94 <_realloc_r+0x31c>
  42ab80:	3508      	adds	r5, #8
  42ab82:	f10a 0210 	add.w	r2, sl, #16
  42ab86:	6829      	ldr	r1, [r5, #0]
  42ab88:	6011      	str	r1, [r2, #0]
  42ab8a:	6869      	ldr	r1, [r5, #4]
  42ab8c:	6051      	str	r1, [r2, #4]
  42ab8e:	68a9      	ldr	r1, [r5, #8]
  42ab90:	6091      	str	r1, [r2, #8]
  42ab92:	eb0a 0107 	add.w	r1, sl, r7
  42ab96:	ebab 0207 	sub.w	r2, fp, r7
  42ab9a:	f042 0201 	orr.w	r2, r2, #1
  42ab9e:	6099      	str	r1, [r3, #8]
  42aba0:	604a      	str	r2, [r1, #4]
  42aba2:	f8da 3004 	ldr.w	r3, [sl, #4]
  42aba6:	f003 0301 	and.w	r3, r3, #1
  42abaa:	431f      	orrs	r7, r3
  42abac:	4640      	mov	r0, r8
  42abae:	f8ca 7004 	str.w	r7, [sl, #4]
  42abb2:	f7fd fe13 	bl	4287dc <__malloc_unlock>
  42abb6:	e751      	b.n	42aa5c <_realloc_r+0xe4>
  42abb8:	682b      	ldr	r3, [r5, #0]
  42abba:	6003      	str	r3, [r0, #0]
  42abbc:	686b      	ldr	r3, [r5, #4]
  42abbe:	6043      	str	r3, [r0, #4]
  42abc0:	2a1b      	cmp	r2, #27
  42abc2:	d82d      	bhi.n	42ac20 <_realloc_r+0x2a8>
  42abc4:	f100 0308 	add.w	r3, r0, #8
  42abc8:	f105 0208 	add.w	r2, r5, #8
  42abcc:	e71b      	b.n	42aa06 <_realloc_r+0x8e>
  42abce:	4632      	mov	r2, r6
  42abd0:	6829      	ldr	r1, [r5, #0]
  42abd2:	6011      	str	r1, [r2, #0]
  42abd4:	6869      	ldr	r1, [r5, #4]
  42abd6:	6051      	str	r1, [r2, #4]
  42abd8:	68a9      	ldr	r1, [r5, #8]
  42abda:	6091      	str	r1, [r2, #8]
  42abdc:	461c      	mov	r4, r3
  42abde:	46d1      	mov	r9, sl
  42abe0:	e72a      	b.n	42aa38 <_realloc_r+0xc0>
  42abe2:	eb09 0107 	add.w	r1, r9, r7
  42abe6:	ebab 0b07 	sub.w	fp, fp, r7
  42abea:	f04b 0201 	orr.w	r2, fp, #1
  42abee:	6099      	str	r1, [r3, #8]
  42abf0:	604a      	str	r2, [r1, #4]
  42abf2:	f855 3c04 	ldr.w	r3, [r5, #-4]
  42abf6:	f003 0301 	and.w	r3, r3, #1
  42abfa:	431f      	orrs	r7, r3
  42abfc:	4640      	mov	r0, r8
  42abfe:	f845 7c04 	str.w	r7, [r5, #-4]
  42ac02:	f7fd fdeb 	bl	4287dc <__malloc_unlock>
  42ac06:	462e      	mov	r6, r5
  42ac08:	e728      	b.n	42aa5c <_realloc_r+0xe4>
  42ac0a:	4629      	mov	r1, r5
  42ac0c:	f7ff fe50 	bl	42a8b0 <memmove>
  42ac10:	e6ff      	b.n	42aa12 <_realloc_r+0x9a>
  42ac12:	4629      	mov	r1, r5
  42ac14:	4630      	mov	r0, r6
  42ac16:	461c      	mov	r4, r3
  42ac18:	46d1      	mov	r9, sl
  42ac1a:	f7ff fe49 	bl	42a8b0 <memmove>
  42ac1e:	e70b      	b.n	42aa38 <_realloc_r+0xc0>
  42ac20:	68ab      	ldr	r3, [r5, #8]
  42ac22:	6083      	str	r3, [r0, #8]
  42ac24:	68eb      	ldr	r3, [r5, #12]
  42ac26:	60c3      	str	r3, [r0, #12]
  42ac28:	2a24      	cmp	r2, #36	; 0x24
  42ac2a:	d017      	beq.n	42ac5c <_realloc_r+0x2e4>
  42ac2c:	f100 0310 	add.w	r3, r0, #16
  42ac30:	f105 0210 	add.w	r2, r5, #16
  42ac34:	e6e7      	b.n	42aa06 <_realloc_r+0x8e>
  42ac36:	f850 3c04 	ldr.w	r3, [r0, #-4]
  42ac3a:	f023 0303 	bic.w	r3, r3, #3
  42ac3e:	441c      	add	r4, r3
  42ac40:	462e      	mov	r6, r5
  42ac42:	e6f9      	b.n	42aa38 <_realloc_r+0xc0>
  42ac44:	68a9      	ldr	r1, [r5, #8]
  42ac46:	f8ca 1010 	str.w	r1, [sl, #16]
  42ac4a:	68e9      	ldr	r1, [r5, #12]
  42ac4c:	f8ca 1014 	str.w	r1, [sl, #20]
  42ac50:	2a24      	cmp	r2, #36	; 0x24
  42ac52:	d00c      	beq.n	42ac6e <_realloc_r+0x2f6>
  42ac54:	3510      	adds	r5, #16
  42ac56:	f10a 0218 	add.w	r2, sl, #24
  42ac5a:	e7b9      	b.n	42abd0 <_realloc_r+0x258>
  42ac5c:	692b      	ldr	r3, [r5, #16]
  42ac5e:	6103      	str	r3, [r0, #16]
  42ac60:	696b      	ldr	r3, [r5, #20]
  42ac62:	6143      	str	r3, [r0, #20]
  42ac64:	f105 0218 	add.w	r2, r5, #24
  42ac68:	f100 0318 	add.w	r3, r0, #24
  42ac6c:	e6cb      	b.n	42aa06 <_realloc_r+0x8e>
  42ac6e:	692a      	ldr	r2, [r5, #16]
  42ac70:	f8ca 2018 	str.w	r2, [sl, #24]
  42ac74:	696a      	ldr	r2, [r5, #20]
  42ac76:	f8ca 201c 	str.w	r2, [sl, #28]
  42ac7a:	3518      	adds	r5, #24
  42ac7c:	f10a 0220 	add.w	r2, sl, #32
  42ac80:	e7a6      	b.n	42abd0 <_realloc_r+0x258>
  42ac82:	4632      	mov	r2, r6
  42ac84:	e77f      	b.n	42ab86 <_realloc_r+0x20e>
  42ac86:	4629      	mov	r1, r5
  42ac88:	4630      	mov	r0, r6
  42ac8a:	9301      	str	r3, [sp, #4]
  42ac8c:	f7ff fe10 	bl	42a8b0 <memmove>
  42ac90:	9b01      	ldr	r3, [sp, #4]
  42ac92:	e77e      	b.n	42ab92 <_realloc_r+0x21a>
  42ac94:	68a9      	ldr	r1, [r5, #8]
  42ac96:	f8ca 1010 	str.w	r1, [sl, #16]
  42ac9a:	68e9      	ldr	r1, [r5, #12]
  42ac9c:	f8ca 1014 	str.w	r1, [sl, #20]
  42aca0:	2a24      	cmp	r2, #36	; 0x24
  42aca2:	d003      	beq.n	42acac <_realloc_r+0x334>
  42aca4:	3510      	adds	r5, #16
  42aca6:	f10a 0218 	add.w	r2, sl, #24
  42acaa:	e76c      	b.n	42ab86 <_realloc_r+0x20e>
  42acac:	692a      	ldr	r2, [r5, #16]
  42acae:	f8ca 2018 	str.w	r2, [sl, #24]
  42acb2:	696a      	ldr	r2, [r5, #20]
  42acb4:	f8ca 201c 	str.w	r2, [sl, #28]
  42acb8:	3518      	adds	r5, #24
  42acba:	f10a 0220 	add.w	r2, sl, #32
  42acbe:	e762      	b.n	42ab86 <_realloc_r+0x20e>
  42acc0:	20400500 	.word	0x20400500

0042acc4 <__sread>:
  42acc4:	b510      	push	{r4, lr}
  42acc6:	460c      	mov	r4, r1
  42acc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  42accc:	f000 f9f6 	bl	42b0bc <_read_r>
  42acd0:	2800      	cmp	r0, #0
  42acd2:	db03      	blt.n	42acdc <__sread+0x18>
  42acd4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  42acd6:	4403      	add	r3, r0
  42acd8:	6523      	str	r3, [r4, #80]	; 0x50
  42acda:	bd10      	pop	{r4, pc}
  42acdc:	89a3      	ldrh	r3, [r4, #12]
  42acde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  42ace2:	81a3      	strh	r3, [r4, #12]
  42ace4:	bd10      	pop	{r4, pc}
  42ace6:	bf00      	nop

0042ace8 <__swrite>:
  42ace8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42acec:	4616      	mov	r6, r2
  42acee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  42acf2:	461f      	mov	r7, r3
  42acf4:	05d3      	lsls	r3, r2, #23
  42acf6:	460c      	mov	r4, r1
  42acf8:	4605      	mov	r5, r0
  42acfa:	d507      	bpl.n	42ad0c <__swrite+0x24>
  42acfc:	2200      	movs	r2, #0
  42acfe:	2302      	movs	r3, #2
  42ad00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  42ad04:	f000 f9c4 	bl	42b090 <_lseek_r>
  42ad08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  42ad0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  42ad10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  42ad14:	81a2      	strh	r2, [r4, #12]
  42ad16:	463b      	mov	r3, r7
  42ad18:	4632      	mov	r2, r6
  42ad1a:	4628      	mov	r0, r5
  42ad1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42ad20:	f000 b8a4 	b.w	42ae6c <_write_r>

0042ad24 <__sseek>:
  42ad24:	b510      	push	{r4, lr}
  42ad26:	460c      	mov	r4, r1
  42ad28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  42ad2c:	f000 f9b0 	bl	42b090 <_lseek_r>
  42ad30:	89a3      	ldrh	r3, [r4, #12]
  42ad32:	1c42      	adds	r2, r0, #1
  42ad34:	bf0e      	itee	eq
  42ad36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  42ad3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  42ad3e:	6520      	strne	r0, [r4, #80]	; 0x50
  42ad40:	81a3      	strh	r3, [r4, #12]
  42ad42:	bd10      	pop	{r4, pc}

0042ad44 <__sclose>:
  42ad44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  42ad48:	f000 b908 	b.w	42af5c <_close_r>

0042ad4c <__swbuf_r>:
  42ad4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42ad4e:	460d      	mov	r5, r1
  42ad50:	4614      	mov	r4, r2
  42ad52:	4606      	mov	r6, r0
  42ad54:	b110      	cbz	r0, 42ad5c <__swbuf_r+0x10>
  42ad56:	6b83      	ldr	r3, [r0, #56]	; 0x38
  42ad58:	2b00      	cmp	r3, #0
  42ad5a:	d04b      	beq.n	42adf4 <__swbuf_r+0xa8>
  42ad5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  42ad60:	69a3      	ldr	r3, [r4, #24]
  42ad62:	60a3      	str	r3, [r4, #8]
  42ad64:	b291      	uxth	r1, r2
  42ad66:	0708      	lsls	r0, r1, #28
  42ad68:	d539      	bpl.n	42adde <__swbuf_r+0x92>
  42ad6a:	6923      	ldr	r3, [r4, #16]
  42ad6c:	2b00      	cmp	r3, #0
  42ad6e:	d036      	beq.n	42adde <__swbuf_r+0x92>
  42ad70:	b2ed      	uxtb	r5, r5
  42ad72:	0489      	lsls	r1, r1, #18
  42ad74:	462f      	mov	r7, r5
  42ad76:	d515      	bpl.n	42ada4 <__swbuf_r+0x58>
  42ad78:	6822      	ldr	r2, [r4, #0]
  42ad7a:	6961      	ldr	r1, [r4, #20]
  42ad7c:	1ad3      	subs	r3, r2, r3
  42ad7e:	428b      	cmp	r3, r1
  42ad80:	da1c      	bge.n	42adbc <__swbuf_r+0x70>
  42ad82:	3301      	adds	r3, #1
  42ad84:	68a1      	ldr	r1, [r4, #8]
  42ad86:	1c50      	adds	r0, r2, #1
  42ad88:	3901      	subs	r1, #1
  42ad8a:	60a1      	str	r1, [r4, #8]
  42ad8c:	6020      	str	r0, [r4, #0]
  42ad8e:	7015      	strb	r5, [r2, #0]
  42ad90:	6962      	ldr	r2, [r4, #20]
  42ad92:	429a      	cmp	r2, r3
  42ad94:	d01a      	beq.n	42adcc <__swbuf_r+0x80>
  42ad96:	89a3      	ldrh	r3, [r4, #12]
  42ad98:	07db      	lsls	r3, r3, #31
  42ad9a:	d501      	bpl.n	42ada0 <__swbuf_r+0x54>
  42ad9c:	2d0a      	cmp	r5, #10
  42ad9e:	d015      	beq.n	42adcc <__swbuf_r+0x80>
  42ada0:	4638      	mov	r0, r7
  42ada2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42ada4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  42ada6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  42adaa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  42adae:	81a2      	strh	r2, [r4, #12]
  42adb0:	6822      	ldr	r2, [r4, #0]
  42adb2:	6661      	str	r1, [r4, #100]	; 0x64
  42adb4:	6961      	ldr	r1, [r4, #20]
  42adb6:	1ad3      	subs	r3, r2, r3
  42adb8:	428b      	cmp	r3, r1
  42adba:	dbe2      	blt.n	42ad82 <__swbuf_r+0x36>
  42adbc:	4621      	mov	r1, r4
  42adbe:	4630      	mov	r0, r6
  42adc0:	f7ff f87c 	bl	429ebc <_fflush_r>
  42adc4:	b940      	cbnz	r0, 42add8 <__swbuf_r+0x8c>
  42adc6:	6822      	ldr	r2, [r4, #0]
  42adc8:	2301      	movs	r3, #1
  42adca:	e7db      	b.n	42ad84 <__swbuf_r+0x38>
  42adcc:	4621      	mov	r1, r4
  42adce:	4630      	mov	r0, r6
  42add0:	f7ff f874 	bl	429ebc <_fflush_r>
  42add4:	2800      	cmp	r0, #0
  42add6:	d0e3      	beq.n	42ada0 <__swbuf_r+0x54>
  42add8:	f04f 37ff 	mov.w	r7, #4294967295
  42addc:	e7e0      	b.n	42ada0 <__swbuf_r+0x54>
  42adde:	4621      	mov	r1, r4
  42ade0:	4630      	mov	r0, r6
  42ade2:	f7fe ff57 	bl	429c94 <__swsetup_r>
  42ade6:	2800      	cmp	r0, #0
  42ade8:	d1f6      	bne.n	42add8 <__swbuf_r+0x8c>
  42adea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  42adee:	6923      	ldr	r3, [r4, #16]
  42adf0:	b291      	uxth	r1, r2
  42adf2:	e7bd      	b.n	42ad70 <__swbuf_r+0x24>
  42adf4:	f7ff f8ba 	bl	429f6c <__sinit>
  42adf8:	e7b0      	b.n	42ad5c <__swbuf_r+0x10>
  42adfa:	bf00      	nop

0042adfc <_wcrtomb_r>:
  42adfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  42adfe:	4606      	mov	r6, r0
  42ae00:	b085      	sub	sp, #20
  42ae02:	461f      	mov	r7, r3
  42ae04:	b189      	cbz	r1, 42ae2a <_wcrtomb_r+0x2e>
  42ae06:	4c10      	ldr	r4, [pc, #64]	; (42ae48 <_wcrtomb_r+0x4c>)
  42ae08:	4d10      	ldr	r5, [pc, #64]	; (42ae4c <_wcrtomb_r+0x50>)
  42ae0a:	6824      	ldr	r4, [r4, #0]
  42ae0c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  42ae0e:	2c00      	cmp	r4, #0
  42ae10:	bf08      	it	eq
  42ae12:	462c      	moveq	r4, r5
  42ae14:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  42ae18:	47a0      	blx	r4
  42ae1a:	1c43      	adds	r3, r0, #1
  42ae1c:	d103      	bne.n	42ae26 <_wcrtomb_r+0x2a>
  42ae1e:	2200      	movs	r2, #0
  42ae20:	238a      	movs	r3, #138	; 0x8a
  42ae22:	603a      	str	r2, [r7, #0]
  42ae24:	6033      	str	r3, [r6, #0]
  42ae26:	b005      	add	sp, #20
  42ae28:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42ae2a:	460c      	mov	r4, r1
  42ae2c:	4906      	ldr	r1, [pc, #24]	; (42ae48 <_wcrtomb_r+0x4c>)
  42ae2e:	4a07      	ldr	r2, [pc, #28]	; (42ae4c <_wcrtomb_r+0x50>)
  42ae30:	6809      	ldr	r1, [r1, #0]
  42ae32:	6b49      	ldr	r1, [r1, #52]	; 0x34
  42ae34:	2900      	cmp	r1, #0
  42ae36:	bf08      	it	eq
  42ae38:	4611      	moveq	r1, r2
  42ae3a:	4622      	mov	r2, r4
  42ae3c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  42ae40:	a901      	add	r1, sp, #4
  42ae42:	47a0      	blx	r4
  42ae44:	e7e9      	b.n	42ae1a <_wcrtomb_r+0x1e>
  42ae46:	bf00      	nop
  42ae48:	204000d4 	.word	0x204000d4
  42ae4c:	20400914 	.word	0x20400914

0042ae50 <__ascii_wctomb>:
  42ae50:	b121      	cbz	r1, 42ae5c <__ascii_wctomb+0xc>
  42ae52:	2aff      	cmp	r2, #255	; 0xff
  42ae54:	d804      	bhi.n	42ae60 <__ascii_wctomb+0x10>
  42ae56:	700a      	strb	r2, [r1, #0]
  42ae58:	2001      	movs	r0, #1
  42ae5a:	4770      	bx	lr
  42ae5c:	4608      	mov	r0, r1
  42ae5e:	4770      	bx	lr
  42ae60:	238a      	movs	r3, #138	; 0x8a
  42ae62:	6003      	str	r3, [r0, #0]
  42ae64:	f04f 30ff 	mov.w	r0, #4294967295
  42ae68:	4770      	bx	lr
  42ae6a:	bf00      	nop

0042ae6c <_write_r>:
  42ae6c:	b570      	push	{r4, r5, r6, lr}
  42ae6e:	460d      	mov	r5, r1
  42ae70:	4c08      	ldr	r4, [pc, #32]	; (42ae94 <_write_r+0x28>)
  42ae72:	4611      	mov	r1, r2
  42ae74:	4606      	mov	r6, r0
  42ae76:	461a      	mov	r2, r3
  42ae78:	4628      	mov	r0, r5
  42ae7a:	2300      	movs	r3, #0
  42ae7c:	6023      	str	r3, [r4, #0]
  42ae7e:	f7f9 ffb5 	bl	424dec <_write>
  42ae82:	1c43      	adds	r3, r0, #1
  42ae84:	d000      	beq.n	42ae88 <_write_r+0x1c>
  42ae86:	bd70      	pop	{r4, r5, r6, pc}
  42ae88:	6823      	ldr	r3, [r4, #0]
  42ae8a:	2b00      	cmp	r3, #0
  42ae8c:	d0fb      	beq.n	42ae86 <_write_r+0x1a>
  42ae8e:	6033      	str	r3, [r6, #0]
  42ae90:	bd70      	pop	{r4, r5, r6, pc}
  42ae92:	bf00      	nop
  42ae94:	2043ac14 	.word	0x2043ac14

0042ae98 <__register_exitproc>:
  42ae98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  42ae9c:	4d2c      	ldr	r5, [pc, #176]	; (42af50 <__register_exitproc+0xb8>)
  42ae9e:	4606      	mov	r6, r0
  42aea0:	6828      	ldr	r0, [r5, #0]
  42aea2:	4698      	mov	r8, r3
  42aea4:	460f      	mov	r7, r1
  42aea6:	4691      	mov	r9, r2
  42aea8:	f7ff fc20 	bl	42a6ec <__retarget_lock_acquire_recursive>
  42aeac:	4b29      	ldr	r3, [pc, #164]	; (42af54 <__register_exitproc+0xbc>)
  42aeae:	681c      	ldr	r4, [r3, #0]
  42aeb0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  42aeb4:	2b00      	cmp	r3, #0
  42aeb6:	d03e      	beq.n	42af36 <__register_exitproc+0x9e>
  42aeb8:	685a      	ldr	r2, [r3, #4]
  42aeba:	2a1f      	cmp	r2, #31
  42aebc:	dc1c      	bgt.n	42aef8 <__register_exitproc+0x60>
  42aebe:	f102 0e01 	add.w	lr, r2, #1
  42aec2:	b176      	cbz	r6, 42aee2 <__register_exitproc+0x4a>
  42aec4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  42aec8:	2401      	movs	r4, #1
  42aeca:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  42aece:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  42aed2:	4094      	lsls	r4, r2
  42aed4:	4320      	orrs	r0, r4
  42aed6:	2e02      	cmp	r6, #2
  42aed8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  42aedc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  42aee0:	d023      	beq.n	42af2a <__register_exitproc+0x92>
  42aee2:	3202      	adds	r2, #2
  42aee4:	f8c3 e004 	str.w	lr, [r3, #4]
  42aee8:	6828      	ldr	r0, [r5, #0]
  42aeea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  42aeee:	f7ff fbff 	bl	42a6f0 <__retarget_lock_release_recursive>
  42aef2:	2000      	movs	r0, #0
  42aef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42aef8:	4b17      	ldr	r3, [pc, #92]	; (42af58 <__register_exitproc+0xc0>)
  42aefa:	b30b      	cbz	r3, 42af40 <__register_exitproc+0xa8>
  42aefc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  42af00:	f7fd f896 	bl	428030 <malloc>
  42af04:	4603      	mov	r3, r0
  42af06:	b1d8      	cbz	r0, 42af40 <__register_exitproc+0xa8>
  42af08:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  42af0c:	6002      	str	r2, [r0, #0]
  42af0e:	2100      	movs	r1, #0
  42af10:	6041      	str	r1, [r0, #4]
  42af12:	460a      	mov	r2, r1
  42af14:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  42af18:	f04f 0e01 	mov.w	lr, #1
  42af1c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  42af20:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  42af24:	2e00      	cmp	r6, #0
  42af26:	d0dc      	beq.n	42aee2 <__register_exitproc+0x4a>
  42af28:	e7cc      	b.n	42aec4 <__register_exitproc+0x2c>
  42af2a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  42af2e:	430c      	orrs	r4, r1
  42af30:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  42af34:	e7d5      	b.n	42aee2 <__register_exitproc+0x4a>
  42af36:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  42af3a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  42af3e:	e7bb      	b.n	42aeb8 <__register_exitproc+0x20>
  42af40:	6828      	ldr	r0, [r5, #0]
  42af42:	f7ff fbd5 	bl	42a6f0 <__retarget_lock_release_recursive>
  42af46:	f04f 30ff 	mov.w	r0, #4294967295
  42af4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42af4e:	bf00      	nop
  42af50:	20400910 	.word	0x20400910
  42af54:	00433d7c 	.word	0x00433d7c
  42af58:	00428031 	.word	0x00428031

0042af5c <_close_r>:
  42af5c:	b538      	push	{r3, r4, r5, lr}
  42af5e:	4c07      	ldr	r4, [pc, #28]	; (42af7c <_close_r+0x20>)
  42af60:	2300      	movs	r3, #0
  42af62:	4605      	mov	r5, r0
  42af64:	4608      	mov	r0, r1
  42af66:	6023      	str	r3, [r4, #0]
  42af68:	f7fa fde6 	bl	425b38 <_close>
  42af6c:	1c43      	adds	r3, r0, #1
  42af6e:	d000      	beq.n	42af72 <_close_r+0x16>
  42af70:	bd38      	pop	{r3, r4, r5, pc}
  42af72:	6823      	ldr	r3, [r4, #0]
  42af74:	2b00      	cmp	r3, #0
  42af76:	d0fb      	beq.n	42af70 <_close_r+0x14>
  42af78:	602b      	str	r3, [r5, #0]
  42af7a:	bd38      	pop	{r3, r4, r5, pc}
  42af7c:	2043ac14 	.word	0x2043ac14

0042af80 <_fclose_r>:
  42af80:	b570      	push	{r4, r5, r6, lr}
  42af82:	b159      	cbz	r1, 42af9c <_fclose_r+0x1c>
  42af84:	4605      	mov	r5, r0
  42af86:	460c      	mov	r4, r1
  42af88:	b110      	cbz	r0, 42af90 <_fclose_r+0x10>
  42af8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  42af8c:	2b00      	cmp	r3, #0
  42af8e:	d03c      	beq.n	42b00a <_fclose_r+0x8a>
  42af90:	6e63      	ldr	r3, [r4, #100]	; 0x64
  42af92:	07d8      	lsls	r0, r3, #31
  42af94:	d505      	bpl.n	42afa2 <_fclose_r+0x22>
  42af96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42af9a:	b92b      	cbnz	r3, 42afa8 <_fclose_r+0x28>
  42af9c:	2600      	movs	r6, #0
  42af9e:	4630      	mov	r0, r6
  42afa0:	bd70      	pop	{r4, r5, r6, pc}
  42afa2:	89a3      	ldrh	r3, [r4, #12]
  42afa4:	0599      	lsls	r1, r3, #22
  42afa6:	d53c      	bpl.n	42b022 <_fclose_r+0xa2>
  42afa8:	4621      	mov	r1, r4
  42afaa:	4628      	mov	r0, r5
  42afac:	f7fe fee6 	bl	429d7c <__sflush_r>
  42afb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  42afb2:	4606      	mov	r6, r0
  42afb4:	b133      	cbz	r3, 42afc4 <_fclose_r+0x44>
  42afb6:	69e1      	ldr	r1, [r4, #28]
  42afb8:	4628      	mov	r0, r5
  42afba:	4798      	blx	r3
  42afbc:	2800      	cmp	r0, #0
  42afbe:	bfb8      	it	lt
  42afc0:	f04f 36ff 	movlt.w	r6, #4294967295
  42afc4:	89a3      	ldrh	r3, [r4, #12]
  42afc6:	061a      	lsls	r2, r3, #24
  42afc8:	d422      	bmi.n	42b010 <_fclose_r+0x90>
  42afca:	6b21      	ldr	r1, [r4, #48]	; 0x30
  42afcc:	b141      	cbz	r1, 42afe0 <_fclose_r+0x60>
  42afce:	f104 0340 	add.w	r3, r4, #64	; 0x40
  42afd2:	4299      	cmp	r1, r3
  42afd4:	d002      	beq.n	42afdc <_fclose_r+0x5c>
  42afd6:	4628      	mov	r0, r5
  42afd8:	f7ff f8ee 	bl	42a1b8 <_free_r>
  42afdc:	2300      	movs	r3, #0
  42afde:	6323      	str	r3, [r4, #48]	; 0x30
  42afe0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  42afe2:	b121      	cbz	r1, 42afee <_fclose_r+0x6e>
  42afe4:	4628      	mov	r0, r5
  42afe6:	f7ff f8e7 	bl	42a1b8 <_free_r>
  42afea:	2300      	movs	r3, #0
  42afec:	6463      	str	r3, [r4, #68]	; 0x44
  42afee:	f7fe ffe9 	bl	429fc4 <__sfp_lock_acquire>
  42aff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  42aff4:	2200      	movs	r2, #0
  42aff6:	07db      	lsls	r3, r3, #31
  42aff8:	81a2      	strh	r2, [r4, #12]
  42affa:	d50e      	bpl.n	42b01a <_fclose_r+0x9a>
  42affc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42affe:	f7ff fb73 	bl	42a6e8 <__retarget_lock_close_recursive>
  42b002:	f7fe ffe5 	bl	429fd0 <__sfp_lock_release>
  42b006:	4630      	mov	r0, r6
  42b008:	bd70      	pop	{r4, r5, r6, pc}
  42b00a:	f7fe ffaf 	bl	429f6c <__sinit>
  42b00e:	e7bf      	b.n	42af90 <_fclose_r+0x10>
  42b010:	6921      	ldr	r1, [r4, #16]
  42b012:	4628      	mov	r0, r5
  42b014:	f7ff f8d0 	bl	42a1b8 <_free_r>
  42b018:	e7d7      	b.n	42afca <_fclose_r+0x4a>
  42b01a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42b01c:	f7ff fb68 	bl	42a6f0 <__retarget_lock_release_recursive>
  42b020:	e7ec      	b.n	42affc <_fclose_r+0x7c>
  42b022:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42b024:	f7ff fb62 	bl	42a6ec <__retarget_lock_acquire_recursive>
  42b028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42b02c:	2b00      	cmp	r3, #0
  42b02e:	d1bb      	bne.n	42afa8 <_fclose_r+0x28>
  42b030:	6e66      	ldr	r6, [r4, #100]	; 0x64
  42b032:	f016 0601 	ands.w	r6, r6, #1
  42b036:	d1b1      	bne.n	42af9c <_fclose_r+0x1c>
  42b038:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42b03a:	f7ff fb59 	bl	42a6f0 <__retarget_lock_release_recursive>
  42b03e:	4630      	mov	r0, r6
  42b040:	bd70      	pop	{r4, r5, r6, pc}
  42b042:	bf00      	nop

0042b044 <_fstat_r>:
  42b044:	b538      	push	{r3, r4, r5, lr}
  42b046:	460b      	mov	r3, r1
  42b048:	4c07      	ldr	r4, [pc, #28]	; (42b068 <_fstat_r+0x24>)
  42b04a:	4605      	mov	r5, r0
  42b04c:	4611      	mov	r1, r2
  42b04e:	4618      	mov	r0, r3
  42b050:	2300      	movs	r3, #0
  42b052:	6023      	str	r3, [r4, #0]
  42b054:	f7fa fd73 	bl	425b3e <_fstat>
  42b058:	1c43      	adds	r3, r0, #1
  42b05a:	d000      	beq.n	42b05e <_fstat_r+0x1a>
  42b05c:	bd38      	pop	{r3, r4, r5, pc}
  42b05e:	6823      	ldr	r3, [r4, #0]
  42b060:	2b00      	cmp	r3, #0
  42b062:	d0fb      	beq.n	42b05c <_fstat_r+0x18>
  42b064:	602b      	str	r3, [r5, #0]
  42b066:	bd38      	pop	{r3, r4, r5, pc}
  42b068:	2043ac14 	.word	0x2043ac14

0042b06c <_isatty_r>:
  42b06c:	b538      	push	{r3, r4, r5, lr}
  42b06e:	4c07      	ldr	r4, [pc, #28]	; (42b08c <_isatty_r+0x20>)
  42b070:	2300      	movs	r3, #0
  42b072:	4605      	mov	r5, r0
  42b074:	4608      	mov	r0, r1
  42b076:	6023      	str	r3, [r4, #0]
  42b078:	f7fa fd66 	bl	425b48 <_isatty>
  42b07c:	1c43      	adds	r3, r0, #1
  42b07e:	d000      	beq.n	42b082 <_isatty_r+0x16>
  42b080:	bd38      	pop	{r3, r4, r5, pc}
  42b082:	6823      	ldr	r3, [r4, #0]
  42b084:	2b00      	cmp	r3, #0
  42b086:	d0fb      	beq.n	42b080 <_isatty_r+0x14>
  42b088:	602b      	str	r3, [r5, #0]
  42b08a:	bd38      	pop	{r3, r4, r5, pc}
  42b08c:	2043ac14 	.word	0x2043ac14

0042b090 <_lseek_r>:
  42b090:	b570      	push	{r4, r5, r6, lr}
  42b092:	460d      	mov	r5, r1
  42b094:	4c08      	ldr	r4, [pc, #32]	; (42b0b8 <_lseek_r+0x28>)
  42b096:	4611      	mov	r1, r2
  42b098:	4606      	mov	r6, r0
  42b09a:	461a      	mov	r2, r3
  42b09c:	4628      	mov	r0, r5
  42b09e:	2300      	movs	r3, #0
  42b0a0:	6023      	str	r3, [r4, #0]
  42b0a2:	f7fa fd53 	bl	425b4c <_lseek>
  42b0a6:	1c43      	adds	r3, r0, #1
  42b0a8:	d000      	beq.n	42b0ac <_lseek_r+0x1c>
  42b0aa:	bd70      	pop	{r4, r5, r6, pc}
  42b0ac:	6823      	ldr	r3, [r4, #0]
  42b0ae:	2b00      	cmp	r3, #0
  42b0b0:	d0fb      	beq.n	42b0aa <_lseek_r+0x1a>
  42b0b2:	6033      	str	r3, [r6, #0]
  42b0b4:	bd70      	pop	{r4, r5, r6, pc}
  42b0b6:	bf00      	nop
  42b0b8:	2043ac14 	.word	0x2043ac14

0042b0bc <_read_r>:
  42b0bc:	b570      	push	{r4, r5, r6, lr}
  42b0be:	460d      	mov	r5, r1
  42b0c0:	4c08      	ldr	r4, [pc, #32]	; (42b0e4 <_read_r+0x28>)
  42b0c2:	4611      	mov	r1, r2
  42b0c4:	4606      	mov	r6, r0
  42b0c6:	461a      	mov	r2, r3
  42b0c8:	4628      	mov	r0, r5
  42b0ca:	2300      	movs	r3, #0
  42b0cc:	6023      	str	r3, [r4, #0]
  42b0ce:	f7f9 fe73 	bl	424db8 <_read>
  42b0d2:	1c43      	adds	r3, r0, #1
  42b0d4:	d000      	beq.n	42b0d8 <_read_r+0x1c>
  42b0d6:	bd70      	pop	{r4, r5, r6, pc}
  42b0d8:	6823      	ldr	r3, [r4, #0]
  42b0da:	2b00      	cmp	r3, #0
  42b0dc:	d0fb      	beq.n	42b0d6 <_read_r+0x1a>
  42b0de:	6033      	str	r3, [r6, #0]
  42b0e0:	bd70      	pop	{r4, r5, r6, pc}
  42b0e2:	bf00      	nop
  42b0e4:	2043ac14 	.word	0x2043ac14
  42b0e8:	00474345 	.word	0x00474345

0042b0ec <doctian>:
  42b0ec:	07019004 00002bc0 0042b0f8              .....+....B.

0042b0f8 <doctian_map>:
  42b0f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b108:	ffffffff ffffffff ffffffff ffffffff     ................
  42b118:	ffffffff ffffffff ffffffff ffffffff     ................
  42b128:	ffffffff ffffffff ffffffff ffffffff     ................
  42b138:	ffffffff ffffffff ffffffff ffffffff     ................
  42b148:	ffffffff ffffffff ffffffff ffffffff     ................
  42b158:	ffffffff ffffffff ffffffff ffffffff     ................
  42b168:	ffffffff ffffffff ffffffff ffffffff     ................
  42b178:	ffffffff ffffffff ffffffff ffffffff     ................
  42b188:	ffffffff ffffffff ffffffff ffffffff     ................
  42b198:	ffffffff ffffffff ffffffff ffffffff     ................
  42b1a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b1b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b1c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b1d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b1e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b1f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b208:	ffffffff ffffffff ffffffff ffffffff     ................
  42b218:	ffffffff ffffffff ffffffff ffffffff     ................
  42b228:	ffffffff ffffffff ffffffff ffffffff     ................
  42b238:	ffffffff ffffffff ffffffff ffffffff     ................
  42b248:	ffffffff ffffffff ffffffff ffffffff     ................
  42b258:	ffffffff ffffffff ffffffff ffffffff     ................
  42b268:	ffffffff ffffffff ffffffff ffffffff     ................
  42b278:	ffffffff ffffffff ffffffff ffffffff     ................
  42b288:	ffffffff ffffffff ffffffff ffffffff     ................
  42b298:	ffffffff ffffffff ffffffff ffffffff     ................
  42b2a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b2b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b2c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b2d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b2e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b2f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b308:	ffffffff ffffffff ffffffff ffffffff     ................
  42b318:	ffffffff ffffffff ffffffff ffffffff     ................
  42b328:	ffffffff ffffffff ffffffff ffffffff     ................
  42b338:	ffffffff ffffffff ffffffff ffffffff     ................
  42b348:	ffffffff ffffffff ffffffff ffffffff     ................
  42b358:	ffffffff ffffffff ffffffff ffffffff     ................
  42b368:	ffffffff ffffffff ffffffff ffffffff     ................
  42b378:	ffffffff ffffffff ffffffff ffffffff     ................
  42b388:	ffffffff ffffffff ffffffff ffffffff     ................
  42b398:	ffffffff ffffffff ffffffff ffffffff     ................
  42b3a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b3b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b3c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b3d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b3e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b3f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b408:	ffffffff ffffffff ffffffff ffffffff     ................
  42b418:	ffffffff ffffffff ffffffff ffffffff     ................
  42b428:	ffffffff ffffffff ffffffff ffffffff     ................
  42b438:	ffffffff ffffffff ffffffff ffffffff     ................
  42b448:	ffffffff ffffffff ffffffff ffffffff     ................
  42b458:	ffffffff ffffffff ffffffff ffffffff     ................
  42b468:	ffffffff ffffffff ffffffff ffffffff     ................
  42b478:	ffffffff ffffffff ffffffff ffffffff     ................
  42b488:	ffffffff ffffffff ffffffff ffffffff     ................
  42b498:	ffffffff ffffffff ffffffff ffffffff     ................
  42b4a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b4b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b4c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b4d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b4e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b4f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b508:	ffffffff ffffffff ffffffff ffffffff     ................
  42b518:	ffffffff ffffffff ffffffff ffffffff     ................
  42b528:	ffffffff ffffffff ffffffff ffffffff     ................
  42b538:	ffffffff ffffffff ffffffff ffffffff     ................
  42b548:	ffffffff ffffffff ffffffff ffffffff     ................
  42b558:	ffffffff ffffffff ffffffff ffffffff     ................
  42b568:	ffffffff ffffffff ffffffff ffffffff     ................
  42b578:	ffffffff ffffffff ffffffff ffffffff     ................
  42b588:	ffffffff ffffffff ffffffff ffffffff     ................
  42b598:	ffffffff ffffffff ffffffff ffffffff     ................
  42b5a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b5b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b5c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b5d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b5e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b5f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b608:	ffffffff ffffffff ffffffff ffffffff     ................
  42b618:	ffffffff ffffffff ffffffff ffffffff     ................
  42b628:	ffffffff ffffffff ffffffff ffffffff     ................
  42b638:	ffffffff ffffffff ffffffff ffffffff     ................
  42b648:	ffffffff ffffffff ffffffff ffffffff     ................
  42b658:	ffffffff ffffffff ffffffff ffffffff     ................
  42b668:	ffffffff ffffffff ffffffff ffffffff     ................
  42b678:	ffffffff ffffffff ffffffff ffffffff     ................
  42b688:	ffffffff ffffffff ffffffff ffffffff     ................
  42b698:	ffffffff ffffffff ffffffff ffffffff     ................
  42b6a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b6b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b6c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b6d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b6e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b6f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b708:	ffffffff ffffffff ffffffff ffffffff     ................
  42b718:	ffffffff ffffffff ffffffff ffffffff     ................
  42b728:	ffffffff ffffffff ffffffff ffffffff     ................
  42b738:	ffffffff ffffffff ffffffff ffffffff     ................
  42b748:	ffffffff ffffffff ffffffff ffffffff     ................
  42b758:	ffffffff ffffffff ffffffff ffffffff     ................
  42b768:	ffffffff ffffffff ffffffff ffffffff     ................
  42b778:	ffffffff ffffffff ffffffff ffffffff     ................
  42b788:	ffffffff ffffffff ffffffff ffffffff     ................
  42b798:	ffffffff ffffffff ffffffff ffffffff     ................
  42b7a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b7b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b7c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b7d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b7e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b7f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b808:	ffffffff ffffffff ffffffff ffffffff     ................
  42b818:	ffffffff ffffffff ffffffff ffffffff     ................
  42b828:	ffffffff ffffffff ffffffff ffffffff     ................
  42b838:	ffffffff ffffffff ffffffff ffffffff     ................
  42b848:	ffffffff ffffffff ffffffff ffffffff     ................
  42b858:	ffffffff ffffffff ffffffff ffffffff     ................
  42b868:	ffffffff ffffffff ffffffff ffffffff     ................
  42b878:	ffffffff ffffffff ffffffff ffffffff     ................
  42b888:	ffffffff ffffffff ffffffff ffffffff     ................
  42b898:	ffffffff ffffffff ffffffff ffffffff     ................
  42b8a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b8b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b8c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b8d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b8e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b8f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b908:	ffffffff ffffffff ffffffff ffffffff     ................
  42b918:	ffffffff ffffffff ffffffff ffffffff     ................
  42b928:	ffffffff ffffffff ffffffff ffffffff     ................
  42b938:	ffffffff ffffffff ffffffff ffffffff     ................
  42b948:	ffffffff ffffffff ffffffff ffffffff     ................
  42b958:	ffffffff ffffffff ffffffff ffffffff     ................
  42b968:	ffffffff ffffffff ffffffff ffffffff     ................
  42b978:	ffffffff ffffffff ffffffff ffffffff     ................
  42b988:	ffffffff ffffffff ffffffff ffffffff     ................
  42b998:	ffffffff ffffffff ffffffff ffffffff     ................
  42b9a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b9b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b9c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b9d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b9e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b9f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42ba08:	ffffffff ffffffff ffffffff ffffffff     ................
  42ba18:	ffffffff ffffffff ffffffff ffffffff     ................
  42ba28:	ffffffff ffffffff ffffffff ffffffff     ................
  42ba38:	ffffffff ffffffff ffffffff ffffffff     ................
  42ba48:	ffffffff ffffffff ffffffff ffffffff     ................
  42ba58:	ffffffff ffffffff ffffffff ffffffff     ................
  42ba68:	ffffffff ffffffff ffffffff ffffffff     ................
  42ba78:	ffffffff ffffffff ffffffff ffffffff     ................
  42ba88:	ffffffff ffffffff ffffffff ffffffff     ................
  42ba98:	ffffffff ffffffff ffffffff ffffffff     ................
  42baa8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bab8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bac8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bad8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bae8:	ffffffff ffffffff ffffffff ffffffff     ................
  42baf8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bb08:	ffffffff ffffffff ffffffff ffffffff     ................
  42bb18:	ffffffff ffffffff ffffffff ffffffff     ................
  42bb28:	ffffffff ffffffff ffffffff ffffffff     ................
  42bb38:	ffffffff ffffffff ffffffff ffffffff     ................
  42bb48:	ffffffff ffffffff ffffffff ffffffff     ................
  42bb58:	ffffffff ffffffff ffffffff ffffffff     ................
  42bb68:	ffffffff ffffffff ffffffff ffffffff     ................
  42bb78:	ffffffff ffffffff ffffffff ffffffff     ................
  42bb88:	ffffffff ffffffff ffffffff ffffffff     ................
  42bb98:	ffffffff ffffffff ffffffff ffffffff     ................
  42bba8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bbb8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bbc8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bbd8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bbe8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bbf8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bc08:	ffffffff ffffffff ffffffff ffffffff     ................
  42bc18:	ffffffff ffffffff ffffffff ffffffff     ................
  42bc28:	ffffffff ffffffff ffffffff ffffffff     ................
  42bc38:	ffffffff ffffffff ffffffff ffffffff     ................
  42bc48:	ffffffff ffffffff ffffffff ffffffff     ................
  42bc58:	ffffffff ffffffff ffffffff ffffffff     ................
  42bc68:	ffffffff ffffffff ffffffff ffffffff     ................
  42bc78:	ffffffff ffffffff ffffffff ffffffff     ................
  42bc88:	ffffffff ffffffff ffffffff ffffffff     ................
  42bc98:	ffffffff ffffffff ffffffff ffffffff     ................
  42bca8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bcb8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bcc8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bcd8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bce8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bcf8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bd08:	ffffffff ffffffff ffffffff ffffffff     ................
  42bd18:	ffffffff ffffffff ffffffff ffffffff     ................
  42bd28:	ffffffff ffffffff ffffffff ffffffff     ................
  42bd38:	ffffffff ffffffff ffffffff ffffffff     ................
  42bd48:	ffffffff ffffffff ffffffff ffffffff     ................
  42bd58:	ffffffff ffffffff ffffffff ffffffff     ................
  42bd68:	ffffffff ffffffff ffffffff ffffffff     ................
  42bd78:	ffffffff ffffffff ffffffff ffffffff     ................
  42bd88:	ffffffff ffffffff ffffffff ffffffff     ................
  42bd98:	ffffffff ffffffff ffffffff ffffffff     ................
  42bda8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bdb8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bdc8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bdd8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bde8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bdf8:	ffffffff ffffffff ffffffff ffffffff     ................
  42be08:	ffffffff ffffffff ffffffff ffffffff     ................
  42be18:	ffffffff ffffffff ffffffff ffffffff     ................
  42be28:	ffffffff ffffffff ffffffff ffffffff     ................
  42be38:	ffffffff ffffffff ffffffff ffffffff     ................
  42be48:	ffffffff ffffffff ffffffff ffffffff     ................
  42be58:	ffffffff ffffffff ffffffff ffffffff     ................
  42be68:	ffffffff ffffffff ffffffff ffffffff     ................
  42be78:	ffffffff ffffffff ffffffff ffffffff     ................
  42be88:	ffffffff ffffffff ffffffff ffffffff     ................
  42be98:	ffffffff ffffffff ffffffff ffffffff     ................
  42bea8:	ffffffff ffffffff ffffffff ffffffff     ................
  42beb8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bec8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bed8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bee8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bef8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bf08:	ffffffff ffffffff ffffffff ffffffff     ................
  42bf18:	ffffffff ffffffff ffffffff ffffffff     ................
  42bf28:	ffffffff ffffffff ffffffff ffffffff     ................
  42bf38:	ffffffff ffffffff ffffffff ffffffff     ................
  42bf48:	ffffffff ffffffff ffffffff ffffffff     ................
  42bf58:	ffffffff ffffffff ffffffff ffffffff     ................
  42bf68:	ffffffff ffffffff ffffffff ffffffff     ................
  42bf78:	ffffffff ffffffff ffffffff ffffffff     ................
  42bf88:	ffffffff ffffffff ffffffff ffffffff     ................
  42bf98:	ffffffff ffffffff ffffffff ffffffff     ................
  42bfa8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bfb8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bfc8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bfd8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bfe8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bff8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c008:	ffffffff ffffffff ffffffff ffffffff     ................
  42c018:	ffffffff ffffffff ffffffff ffffffff     ................
  42c028:	ffffffff ffffffff ffffffff ffffffff     ................
  42c038:	ffffffff ffffffff ffffffff ffffffff     ................
  42c048:	ffffffff ffffffff ffffffff ffffffff     ................
  42c058:	ffffffff ffffffff ffffffff ffffffff     ................
  42c068:	ffffffff ffffffff ffffffff ffffffff     ................
  42c078:	ffffffff ffffffff ffffffff ffffffff     ................
  42c088:	ffffffff ffffffff ffffffff ffffffff     ................
  42c098:	ffffffff ffffffff ffffffff ffffffff     ................
  42c0a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c0b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c0c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c0d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c0e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c0f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c108:	ffffffff ffffffff ffffffff ffffffff     ................
  42c118:	ffffffff ffffffff ffffffff ffffffff     ................
  42c128:	ffffffff ffffffff ffffffff ffffffff     ................
  42c138:	ffffffff ffffffff ffffffff ffffffff     ................
  42c148:	ffffffff ffffffff ffffffff ffffffff     ................
  42c158:	ffffffff ffffffff ffffffff ffffffff     ................
  42c168:	ffffffff ffffffff ffffffff ffffffff     ................
  42c178:	ffffffff ffffffff ffffffff ffffffff     ................
  42c188:	ffffffff ffffffff ffffffff ffffffff     ................
  42c198:	ffffffff ffffffff ffffffff ffffffff     ................
  42c1a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c1b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c1c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c1d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c1e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c1f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c208:	ffffffff ffffffff ffffffff ffffffff     ................
  42c218:	ffffffff ffffffff ffffffff ffffffff     ................
  42c228:	ffffffff ffffffff ffffffff ffffffff     ................
  42c238:	ffffffff ffffffff ffffffff f3ac58d6     .............X..
  42c248:	13adf3ac 79d654b5 ffffbeff ffffffff     .....T.y........
  42c258:	ffffffff dfffffff 95bddade 95bd13ad     ................
  42c268:	dfffdade ffffffff ffffffff ffffffff     ................
  42c278:	79d6beff 13ad54b5 1ce7d6c5 ffffffff     ...y.T..........
  42c288:	dadeffff f3acf3ac 13adf3ac f3ac13ad     ................
  42c298:	95bdf2a4 ffffbfff 13ad1ce7 ffffbade     ................
  42c2a8:	ffffffff ffffffff 9ef7ffff ffff3cef     .............<..
  42c2b8:	ffffffff ffffffff bef7ffff ffff1be7     ................
  42c2c8:	ffffffff ffffffff 13adbade ffff1ce7     ................
  42c2d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c2e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c2f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c308:	ffffffff 2a7354b5 8c7b6c7b 4b7b6c7b     .....Ts*{l{.{l{K
  42c318:	3cefb1a4 ffffffff ffffffff 54b5bef7     ...<...........T
  42c328:	4b738c7b 4b738c7b 54b58c7b ffffbef7     {.sK{.sK{..T....
  42c338:	ffffffff 5defffff 4c7bd2a4 8c7b6c7b     .......]..{L{l{.
  42c348:	cd834b73 ffff38ce 38ceffff 8c7b8c7b     sK...8.....8{.{.
  42c358:	2b736c7b 8c7b4b73 70946c7b ffff9ef7     {ls+sK{.{l.p....
  42c368:	4b7399d6 ffffd6c5 ffffffff ffffffff     ..sK............
  42c378:	17c6ffff bfffb2a4 ffffffff ffffffff     ................
  42c388:	5defffff 58ce5094 ffffffff ffffffff     ...].P.X........
  42c398:	4b73d6c5 ffff99d6 ffffffff ffffffff     ..sK............
  42c3a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c3b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c3c8:	ffffffff ffffffff ffffffff 6c7b54b5     .............T{l
  42c3d8:	3cef58ce 13adbade b19c4c7b ffff9ef7     .X.<....{L......
  42c3e8:	ffffffff 4b7375b5 79d6909c 79d61ce7     .....usK...y...y
  42c3f8:	4b73909c ffff75b5 ffffffff b1a4bef7     ..sK.u..........
  42c408:	f3ac4b73 1cefbade 919c17ce ffff99d6     sK..............
  42c418:	bef7ffff 1ce71ce7 8c7b79d6 1ce7b2a4     .........y{.....
  42c428:	5cef1ce7 ffffffff 4b7399d6 fffff7c5     ...\......sK....
  42c438:	ffffffff ffffffff 50949ef7 79d66c7b     ...........P{l.y
  42c448:	ffffffff ffffffff 5defffff 8c7bad83     ...........]..{.
  42c458:	dfff17c6 ffffffff 4c7bf7c5 ffff99d6     ..........{L....
  42c468:	ffffffff ffffffff ffffffff ffffffff     ................
  42c478:	ffffffff ffffffff ffffffff ffffffff     ................
  42c488:	ffffffff ffffffff ffffffff ffffffff     ................
  42c498:	ffffffff 8c7b54b5 ffff1ce7 dfffffff     .....T{.........
  42c4a8:	4b7333ad ffff38ce 1ce7ffff 5094ad83     .3sK.8.........P
  42c4b8:	ffff7df7 ffffffff 50947df7 1be7ad83     .}.......}.P....
  42c4c8:	ffffffff 4b7b58d6 beff13ad 59c79bdf     .....X{K.......Y
  42c4d8:	dfffdef7 ffffffff ffffffff ffffffff     ................
  42c4e8:	8d7b3cef ffff13ad ffffffff ffffffff     .<{.............
  42c4f8:	4b7399d6 fffff7c5 ffffffff ffffffff     ..sK............
  42c508:	4b7317ce b19c2b73 ffffdfff ffffffff     ..sKs+..........
  42c518:	5defffff 2b73cd83 b6bd6c7b ffffdfff     ...]..s+{l......
  42c528:	4c7bf7c5 ffff99d6 ffffffff ffffffff     ..{L............
  42c538:	ffffffff ffffffff ffffffff ffffffff     ................
  42c548:	ffffffff ffffffff ffffffff ffffffff     ................
  42c558:	ffffffff ffffffff ffffffff 8c7b54b5     .............T{.
  42c568:	ffff1ce7 ffffffff 8c7b1be7 fffff2a4     ..........{.....
  42c578:	17ceffff 17c64b73 ffffffff ffffffff     ....sK..........
  42c588:	38ceffff f7c54b73 ffffffff 6c7b13ad     ...8sK........{l
  42c598:	7ad7fbe6 92869186 7ad7d396 def79cdf     ...z.......z....
  42c5a8:	ffffffff ffffffff 8d7b3cef ffff13ad     .........<{.....
  42c5b8:	ffffffff ffffffff 4b7399d6 fffff7c5     ..........sK....
  42c5c8:	ffffffff 9ef7ffff cd835094 6c7b709c     .........P...p{l
  42c5d8:	ffff79d6 ffffffff 5defffff ce83cd83     .y.........]....
  42c5e8:	4b73ad83 dfff75b5 4c7bf7c5 ffff99d6     ..sK.u....{L....
  42c5f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c608:	ffffffff ffffffff ffffffff ffffffff     ................
  42c618:	ffffffff ffffffff ffffffff ffffffff     ................
  42c628:	ffffffff 8c7b54b5 ffff1ce7 ffffffff     .....T{.........
  42c638:	ce837df7 ffffb19c d6bdffff 9ad64b7b     .}..........{K..
  42c648:	ffffffff ffffffff badeffff b5bd6c7b     ............{l..
  42c658:	ffffffff ad83d2a4 17b75def 92869286     .........]......
  42c668:	38bf7186 16af59c7 ffff59cf ffffffff     .q.8.Y...Y......
  42c678:	8d7b3cef ffff13ad ffffffff ffffffff     .<{.............
  42c688:	4b7399d6 fffff7c5 ffffffff 38ceffff     ..sK...........8
  42c698:	95bd6c7b 8d83dbde dfffb19c ffffffff     {l..............
  42c6a8:	5defffff 13adad83 ce8379d6 34ad4b73     ...].....y..sK.4
  42c6b8:	6c7b75b5 ffff99d6 ffffffff ffffffff     .u{l............
  42c6c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c6d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c6e8:	ffffffff ffffffff ffffffff 8c7b54b5     .............T{.
  42c6f8:	ffff1ce7 ffffffff 6c7bdade ffff13ad     ..........{l....
  42c708:	58ceffff d6bd4b73 ffffffff ffffffff     ...XsK..........
  42c718:	d6c5ffff 17ce4b73 ffffffff 6c7b54b5     ....sK.......T{l
  42c728:	bcdfbade 9186928e fffff6ae ffffffff     ................
  42c738:	37b759cf ffffdef7 8d7b3cef ffff13ad     .Y.7.....<{.....
  42c748:	ffffffff ffffffff 4b7399d6 fffff7c5     ..........sK....
  42c758:	ffffffff 50949ef7 badead83 b19c7df7     .......P.....}..
  42c768:	99d66c7b ffffffff 5defffff 33adad83     {l.........]...3
  42c778:	badeffff 4b730e8c 6c7bad7b ffff99d6     ......sK{.{l....
  42c788:	ffffffff ffffffff ffffffff ffffffff     ................
  42c798:	ffffffff ffffffff ffffffff ffffffff     ................
  42c7a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c7b8:	ffffffff 8c7b54b5 ffff1ce7 7df7ffff     .....T{........}
  42c7c8:	6c7bb19c ffff99d6 5defffff 0e8cee8b     ..{l.......]....
  42c7d8:	ffff1be7 ffffffff 0e8c1be7 3cefce83     ...............<
  42c7e8:	ffffffff 6c7b9ade 7df7919c bcdfddef     ......{l...}....
  42c7f8:	5defdfff ffffdfff 7ad7ffff ffff38bf     ...].......z.8..
  42c808:	8d7b3cef ffff13ad ffffffff ffffffff     .<{.............
  42c818:	4b7399d6 fffff7c5 ffffffff 4b7338ce     ..sK.........8sK
  42c828:	ee8b4b73 8c7bee8b b1a42b73 ffffdfff     sK....{.s+......
  42c838:	5defffff 33adad83 ffffffff 4f94fbe6     ...]...3.......O
  42c848:	4c7b2b73 ffff99d6 ffffffff ffffffff     s+{L............
  42c858:	ffffffff ffffffff ffffffff ffffffff     ................
  42c868:	ffffffff ffffffff ffffffff ffffffff     ................
  42c878:	ffffffff ffffffff ffffffff 6c7b54b5     .............T{l
  42c888:	99d6d6c5 7094f7c5 33ad4b73 ffffdfff     .......psK.3....
  42c898:	ffffffff 6c7b17c6 b6bdee8b b6bd59d6     ......{l.....Y..
  42c8a8:	6c7bee8b fffff7c5 ffffffff 34addfff     ..{l...........4
  42c8b8:	50944b73 59d6f7c5 ee8b54b5 ffff38ce     sK.P...Y.T...8..
  42c8c8:	ffffffff 9ad738bf 8d7b3def ffff13ad     .....8...={.....
  42c8d8:	ffffffff ffffffff 4b7399d6 7ad7d6c5     ..........sK...z
  42c8e8:	949ef6ae 8c7b4f8c 919c709c 919c919c     .....O{..p......
  42c8f8:	6c7bee8b ffff99d6 5defffff 33adad83     ..{l.......]...3
  42c908:	ffffffff 3cefffff 4b7b909c ffff99d6     .......<..{K....
  42c918:	ffffffff ffffffff ffffffff ffffffff     ................
  42c928:	ffffffff ffffffff ffffffff ffffffff     ................
  42c938:	ffffffff ffffffff ffffffff ffffffff     ................
  42c948:	ffffffff 2b7354b5 4b734b73 ad834b73     .....Ts+sKsKsK..
  42c958:	9ef774b5 ffffffff ffffffff 17c6dfff     .t..............
  42c968:	4b73ee8b 4b734b73 17c6ee8b ffffdfff     ..sKsKsK........
  42c978:	ffffffff 9ef7ffff ad8375b5 4b734b73     .........u..sKsK
  42c988:	50946c7b ffff9ade ffffffff 17b7def7     {l.P............
  42c998:	8d831bdf ffff13ad ffffffff ffffffff     ................
  42c9a8:	4b7b99d6 38bf73a5 f5b5def7 54ad4b73     ..{K.s.8....sK.T
  42c9b8:	dfffdfff dfffdfff 8c7bbade dfffd2a4     ..........{.....
  42c9c8:	5defffff 33adad83 ffffffff ffffffff     ...]...3........
  42c9d8:	f2a45def ffff9ade ffffffff ffffffff     .]..............
  42c9e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c9f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42ca08:	ffffffff ffffffff ffffffff d6c5dade     ................
  42ca18:	d6c5d6c5 1ce738ce ffffffff ffffffff     .....8..........
  42ca28:	ffffffff ffffffff 79d67def 59d6f7c5     .........}.y...Y
  42ca38:	ffff5def ffffffff ffffffff ffffffff     .]..............
  42ca48:	3cefffff f7c538ce 9ef79ad6 ffffffff     ...<.8..........
  42ca58:	ffffffff 7acfffff 17ce19c7 ffffbade     .......z........
  42ca68:	ffffffff ffffffff d6c55def bde7339e     .........]...3..
  42ca78:	9adeffff 74a6d6c5 ffffbce7 ffffffff     .......t........
  42ca88:	58cedfff beff17ce bfffffff dbde38ce     ...X.........8..
  42ca98:	ffffffff ffffffff 9ef7ffff ffff9ef7     ................
  42caa8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cab8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cac8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cad8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cae8:	ffffffff ffffffff ffffffff ffffffff     ................
  42caf8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cb08:	ffffffff ffffffff ffffffff ffffffff     ................
  42cb18:	ffffffff ffffffff ffffffff deefffff     ................
  42cb28:	ffff17b7 ffffffff ffffffff ffffffff     ................
  42cb38:	ddefffff ffff37b7 ffffffff 58c7ffff     .....7.........X
  42cb48:	ffff7bd7 ffffffff ffffffff ffffffff     .{..............
  42cb58:	ffffffff ffffffff ffffffff ffffffff     ................
  42cb68:	ffffffff ffffffff ffffffff ffffffff     ................
  42cb78:	ffffffff ffffffff ffffffff ffffffff     ................
  42cb88:	ffffffff ffffffff ffffffff ffffffff     ................
  42cb98:	ffffffff ffffffff ffffffff ffffffff     ................
  42cba8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cbb8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cbc8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cbd8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cbe8:	ffffffff ffffffff 7ad758c7 ffffffff     .........X.z....
  42cbf8:	ffffffff ffffffff 59cfffff ffff7ad7     ...........Y.z..
  42cc08:	ffffffff 17b7bde7 ffffdeef ffffffff     ................
  42cc18:	ffffffff ffffffff ffffffff ffffffff     ................
  42cc28:	ffffffff ffffffff ffffffff ffffffff     ................
  42cc38:	ffffffff ffffffff ffffffff ffffffff     ................
  42cc48:	ffffffff ffffffff ffffffff ffffffff     ................
  42cc58:	ffffffff ffffffff ffffffff ffffffff     ................
  42cc68:	ffffffff ffffffff ffffffff ffffffff     ................
  42cc78:	ffffffff ffffffff ffffffff ffffffff     ................
  42cc88:	ffffffff ffffffff ffffffff ffffffff     ................
  42cc98:	ffffffff ffffffff ffffffff ffffffff     ................
  42cca8:	ffffffff ffffffff ffffffff ffffffff     ................
  42ccb8:	17b7def7 ffffbde7 ffffffff ffffffff     ................
  42ccc8:	38bfffff ffffdeef 59cfdef7 bce716b7     ...8.......Y....
  42ccd8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cce8:	ffffffff ffffffff ffffffff ffffffff     ................
  42ccf8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cd08:	ffffffff ffffffff ffffffff ffffffff     ................
  42cd18:	ffffffff ffffffff ffffffff ffffffff     ................
  42cd28:	ffffffff ffffffff ffffffff ffffffff     ................
  42cd38:	ffffffff ffffffff ffffffff ffffffff     ................
  42cd48:	ffffffff ffffffff ffffffff ffffffff     ................
  42cd58:	ffffffff ffffffff ffffffff ffffffff     ................
  42cd68:	ffffffff ffffffff ffffffff ffffffff     ................
  42cd78:	ffffffff ffffffff bde7ffff 9bd716b7     ................
  42cd88:	ffffffff ffffffff f5a6bdef 59cf7bd7     .............{.Y
  42cd98:	7acf17b7 fffffef7 ffffffff ffffffff     ...z............
  42cda8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cdb8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cdc8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cdd8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cde8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cdf8:	ffffffff ffffffff ffffffff ffffffff     ................
  42ce08:	ffffffff ffffffff ffffffff ffffffff     ................
  42ce18:	ffffffff ffffffff ffffffff ffffffff     ................
  42ce28:	ffffffff ffffffff ffffffff ffffffff     ................
  42ce38:	ffffffff ffffffff ffffffff ffffffff     ................
  42ce48:	ffffffff 38bfdeef 59c737bf 38bf59c7     .......8.7.Y.Y.8
  42ce58:	38bf17b7 7acf37bf ffffdef7 ffffffff     ...8.7.z........
  42ce68:	ffffffff ffffffff ffffffff ffffffff     ................
  42ce78:	ffffffff ffffffff ffffffff ffffffff     ................
  42ce88:	ffffffff ffffffff ffffffff ffffffff     ................
  42ce98:	ffffffff ffffffff ffffffff ffffffff     ................
  42cea8:	ffffffff ffffffff ffffffff ffffffff     ................
  42ceb8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cec8:	ffffffff ffffffff ffffffff ffffffff     ................
  42ced8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cee8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cef8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cf08:	ffffffff ffffffff ffffffff ffffffff     ................
  42cf18:	bce7def7 deefbce7 ffffffff ffffffff     ................
  42cf28:	ffffffff ffffffff ffffffff ffffffff     ................
  42cf38:	ffffffff ffffffff ffffffff ffffffff     ................
  42cf48:	ffffffff ffffffff ffffffff ffffffff     ................
  42cf58:	ffffffff ffffffff ffffffff ffffffff     ................
  42cf68:	ffffffff ffffffff ffffffff ffffffff     ................
  42cf78:	ffffffff ffffffff ffffffff ffffffff     ................
  42cf88:	ffffffff ffffffff ffffffff ffffffff     ................
  42cf98:	ffffffff ffffffff ffffffff ffffffff     ................
  42cfa8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cfb8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cfc8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cfd8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cfe8:	ffffffff ffffffff ffffffff ffffffff     ................
  42cff8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d008:	ffffffff ffffffff ffffffff ffffffff     ................
  42d018:	ffffffff ffffffff ffffffff ffffffff     ................
  42d028:	ffffffff ffffffff ffffffff ffffffff     ................
  42d038:	ffffffff ffffffff ffffffff ffffffff     ................
  42d048:	ffffffff ffffffff ffffffff ffffffff     ................
  42d058:	ffffffff ffffffff ffffffff ffffffff     ................
  42d068:	ffffffff ffffffff ffffffff ffffffff     ................
  42d078:	ffffffff ffffffff ffffffff ffffffff     ................
  42d088:	ffffffff ffffffff ffffffff ffffffff     ................
  42d098:	ffffffff ffffffff ffffffff ffffffff     ................
  42d0a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d0b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d0c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d0d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d0e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d0f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d108:	ffffffff ffffffff ffffffff ffffffff     ................
  42d118:	ffffffff ffffffff ffffffff ffffffff     ................
  42d128:	ffffffff ffffffff ffffffff ffffffff     ................
  42d138:	ffffffff ffffffff ffffffff ffffffff     ................
  42d148:	ffffffff ffffffff ffffffff ffffffff     ................
  42d158:	ffffffff ffffffff ffffffff ffffffff     ................
  42d168:	ffffffff ffffffff ffffffff ffffffff     ................
  42d178:	ffffffff ffffffff ffffffff ffffffff     ................
  42d188:	ffffffff ffffffff ffffffff ffffffff     ................
  42d198:	ffffffff ffffffff ffffffff ffffffff     ................
  42d1a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d1b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d1c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d1d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d1e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d1f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d208:	ffffffff ffffffff ffffffff ffffffff     ................
  42d218:	ffffffff ffffffff ffffffff ffffffff     ................
  42d228:	ffffffff ffffffff ffffffff ffffffff     ................
  42d238:	ffffffff ffffffff ffffffff ffffffff     ................
  42d248:	ffffffff ffffffff ffffffff ffffffff     ................
  42d258:	ffffffff ffffffff ffffffff ffffffff     ................
  42d268:	ffffffff ffffffff ffffffff ffffffff     ................
  42d278:	ffffffff ffffffff ffffffff ffffffff     ................
  42d288:	ffffffff ffffffff ffffffff ffffffff     ................
  42d298:	ffffffff ffffffff ffffffff ffffffff     ................
  42d2a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d2b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d2c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d2d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d2e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d2f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d308:	ffffffff ffffffff ffffffff ffffffff     ................
  42d318:	ffffffff ffffffff ffffffff ffffffff     ................
  42d328:	ffffffff ffffffff ffffffff ffffffff     ................
  42d338:	ffffffff ffffffff ffffffff ffffffff     ................
  42d348:	ffffffff ffffffff ffffffff ffffffff     ................
  42d358:	ffffffff ffffffff ffffffff ffffffff     ................
  42d368:	ffffffff ffffffff ffffffff ffffffff     ................
  42d378:	ffffffff ffffffff ffffffff ffffffff     ................
  42d388:	ffffffff ffffffff ffffffff ffffffff     ................
  42d398:	ffffffff ffffffff ffffffff ffffffff     ................
  42d3a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d3b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d3c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d3d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d3e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d3f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d408:	ffffffff ffffffff ffffffff ffffffff     ................
  42d418:	ffffffff ffffffff ffffffff ffffffff     ................
  42d428:	ffffffff ffffffff ffffffff ffffffff     ................
  42d438:	ffffffff ffffffff ffffffff ffffffff     ................
  42d448:	ffffffff ffffffff ffffffff ffffffff     ................
  42d458:	ffffffff ffffffff ffffffff ffffffff     ................
  42d468:	ffffffff ffffffff ffffffff ffffffff     ................
  42d478:	ffffffff ffffffff ffffffff ffffffff     ................
  42d488:	ffffffff ffffffff ffffffff ffffffff     ................
  42d498:	ffffffff ffffffff ffffffff ffffffff     ................
  42d4a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d4b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d4c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d4d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d4e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d4f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d508:	ffffffff ffffffff ffffffff ffffffff     ................
  42d518:	ffffffff ffffffff ffffffff ffffffff     ................
  42d528:	ffffffff ffffffff ffffffff ffffffff     ................
  42d538:	ffffffff ffffffff ffffffff ffffffff     ................
  42d548:	ffffffff ffffffff ffffffff ffffffff     ................
  42d558:	ffffffff ffffffff ffffffff ffffffff     ................
  42d568:	ffffffff ffffffff ffffffff ffffffff     ................
  42d578:	ffffffff ffffffff ffffffff ffffffff     ................
  42d588:	ffffffff ffffffff ffffffff ffffffff     ................
  42d598:	ffffffff ffffffff ffffffff ffffffff     ................
  42d5a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d5b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d5c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d5d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d5e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d5f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d608:	ffffffff ffffffff ffffffff ffffffff     ................
  42d618:	ffffffff ffffffff ffffffff ffffffff     ................
  42d628:	ffffffff ffffffff ffffffff ffffffff     ................
  42d638:	ffffffff ffffffff ffffffff ffffffff     ................
  42d648:	ffffffff ffffffff ffffffff ffffffff     ................
  42d658:	ffffffff ffffffff ffffffff ffffffff     ................
  42d668:	ffffffff ffffffff ffffffff ffffffff     ................
  42d678:	ffffffff ffffffff ffffffff ffffffff     ................
  42d688:	ffffffff ffffffff ffffffff ffffffff     ................
  42d698:	ffffffff ffffffff ffffffff ffffffff     ................
  42d6a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d6b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d6c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d6d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d6e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d6f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d708:	ffffffff ffffffff ffffffff ffffffff     ................
  42d718:	ffffffff ffffffff ffffffff ffffffff     ................
  42d728:	ffffffff ffffffff ffffffff ffffffff     ................
  42d738:	ffffffff ffffffff ffffffff ffffffff     ................
  42d748:	ffffffff ffffffff ffffffff ffffffff     ................
  42d758:	ffffffff ffffffff ffffffff ffffffff     ................
  42d768:	ffffffff ffffffff ffffffff ffffffff     ................
  42d778:	ffffffff ffffffff ffffffff ffffffff     ................
  42d788:	ffffffff ffffffff ffffffff ffffffff     ................
  42d798:	ffffffff ffffffff ffffffff ffffffff     ................
  42d7a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d7b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d7c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d7d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d7e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d7f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d808:	ffffffff ffffffff ffffffff ffffffff     ................
  42d818:	ffffffff ffffffff ffffffff ffffffff     ................
  42d828:	ffffffff ffffffff ffffffff ffffffff     ................
  42d838:	ffffffff ffffffff ffffffff ffffffff     ................
  42d848:	ffffffff ffffffff ffffffff ffffffff     ................
  42d858:	ffffffff ffffffff ffffffff ffffffff     ................
  42d868:	ffffffff ffffffff ffffffff ffffffff     ................
  42d878:	ffffffff ffffffff ffffffff ffffffff     ................
  42d888:	ffffffff ffffffff ffffffff ffffffff     ................
  42d898:	ffffffff ffffffff ffffffff ffffffff     ................
  42d8a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d8b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d8c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d8d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d8e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d8f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d908:	ffffffff ffffffff ffffffff ffffffff     ................
  42d918:	ffffffff ffffffff ffffffff ffffffff     ................
  42d928:	ffffffff ffffffff ffffffff ffffffff     ................
  42d938:	ffffffff ffffffff ffffffff ffffffff     ................
  42d948:	ffffffff ffffffff ffffffff ffffffff     ................
  42d958:	ffffffff ffffffff ffffffff ffffffff     ................
  42d968:	ffffffff ffffffff ffffffff ffffffff     ................
  42d978:	ffffffff ffffffff ffffffff ffffffff     ................
  42d988:	ffffffff ffffffff ffffffff ffffffff     ................
  42d998:	ffffffff ffffffff ffffffff ffffffff     ................
  42d9a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d9b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d9c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d9d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d9e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42d9f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42da08:	ffffffff ffffffff ffffffff ffffffff     ................
  42da18:	ffffffff ffffffff ffffffff ffffffff     ................
  42da28:	ffffffff ffffffff ffffffff ffffffff     ................
  42da38:	ffffffff ffffffff ffffffff ffffffff     ................
  42da48:	ffffffff ffffffff ffffffff ffffffff     ................
  42da58:	ffffffff ffffffff ffffffff ffffffff     ................
  42da68:	ffffffff ffffffff ffffffff ffffffff     ................
  42da78:	ffffffff ffffffff ffffffff ffffffff     ................
  42da88:	ffffffff ffffffff ffffffff ffffffff     ................
  42da98:	ffffffff ffffffff ffffffff ffffffff     ................
  42daa8:	ffffffff ffffffff ffffffff ffffffff     ................
  42dab8:	ffffffff ffffffff ffffffff ffffffff     ................
  42dac8:	ffffffff ffffffff ffffffff ffffffff     ................
  42dad8:	ffffffff ffffffff ffffffff ffffffff     ................
  42dae8:	ffffffff ffffffff ffffffff ffffffff     ................
  42daf8:	ffffffff ffffffff ffffffff ffffffff     ................
  42db08:	ffffffff ffffffff ffffffff ffffffff     ................
  42db18:	ffffffff ffffffff ffffffff ffffffff     ................
  42db28:	ffffffff ffffffff ffffffff ffffffff     ................
  42db38:	ffffffff ffffffff ffffffff ffffffff     ................
  42db48:	ffffffff ffffffff ffffffff ffffffff     ................
  42db58:	ffffffff ffffffff ffffffff ffffffff     ................
  42db68:	ffffffff ffffffff ffffffff ffffffff     ................
  42db78:	ffffffff ffffffff ffffffff ffffffff     ................
  42db88:	ffffffff ffffffff ffffffff ffffffff     ................
  42db98:	ffffffff ffffffff ffffffff ffffffff     ................
  42dba8:	ffffffff ffffffff ffffffff ffffffff     ................
  42dbb8:	ffffffff ffffffff ffffffff ffffffff     ................
  42dbc8:	ffffffff ffffffff ffffffff ffffffff     ................
  42dbd8:	ffffffff ffffffff ffffffff ffffffff     ................
  42dbe8:	ffffffff ffffffff ffffffff ffffffff     ................
  42dbf8:	ffffffff ffffffff ffffffff ffffffff     ................
  42dc08:	ffffffff ffffffff ffffffff ffffffff     ................
  42dc18:	ffffffff ffffffff ffffffff ffffffff     ................
  42dc28:	ffffffff ffffffff ffffffff ffffffff     ................
  42dc38:	ffffffff ffffffff ffffffff ffffffff     ................
  42dc48:	ffffffff ffffffff ffffffff ffffffff     ................
  42dc58:	ffffffff ffffffff ffffffff ffffffff     ................
  42dc68:	ffffffff ffffffff ffffffff ffffffff     ................
  42dc78:	ffffffff ffffffff ffffffff ffffffff     ................
  42dc88:	ffffffff ffffffff ffffffff ffffffff     ................
  42dc98:	ffffffff ffffffff ffffffff ffffffff     ................
  42dca8:	ffffffff ffffffff ffffffff ffffffff     ................

0042dcb8 <cmaps>:
  42dcb8:	00000020 0001000f 0042dff8 00000000      .........B.....
  42dcc8:	00030003 00000030 0004000b 00000000     ....0...........
  42dcd8:	00000000 00020000                       ........

0042dce0 <glyph_bitmap>:
  42dce0:	fffd7f00 5f80ffff a7fffff0 fd7ff7ff     ......._........
  42dcf0:	007e00f0 f801c00f 07003f00 00fc00e0     ..~......?......
  42dd00:	f003801f 0f007e00 00f000c0 c0030012     .....~..........
  42dd10:	1f00fc00 00f00380 c00f007e 3f00f801     ........~......?
  42dd20:	00e00700 801f00fc bdffff03 fffff9ff     ................
  42dd30:	ffff2dc0 ffd7feff b2ffffff ffa7ffff     .-..............
  42dd40:	80fd7ff4 0e007000 00c00100 00070038     .....p......8...
  42dd50:	1c00e000 00800300 3f0e0070 c5ff47ff     ........p..?.G..
  42dd60:	00e0f8ff 8003001c 0e007000 00c00100     .........p......
  42dd70:	00070038 1c00e000 00800300 ff8dff7f     8...............
  42dd80:	c0fffff9 ffa7ff7f 80fd7ff4 0e007000     .............p..
  42dd90:	00c00100 00070038 1c00e000 00800300     ....8...........
  42dda0:	3f0e0070 d9ff47ff 0000ffff 001c00e0     p..?.G..........
  42ddb0:	70008003 01000e00 003800c0 e0000007     ...p......8.....
  42ddc0:	03001c00 ffb1ff8f c0ff7ff8 00000000     ................
  42ddd0:	f0010007 0f003e00 00f801c0 e007003f     .....>......?...
  42dde0:	1f00fc00 00f00380 c00f007e eeffff01     ........~.......
  42ddf0:	ff3ffbff 001c00e0 70008003 01000e00     ..?........p....
  42de00:	003800c0 e0000007 03001c00 00700080     ..8...........p.
  42de10:	00000006 ff87ffff 70fc7ff3 01000e00     ...........p....
  42de20:	003800c0 e0000007 03001c00 00700080     ..8...........p.
  42de30:	ff01000e d9ff37ff 0000ffff 001c00e0     .....7..........
  42de40:	70008003 01000e00 003800c0 e0000007     ...p......8.....
  42de50:	03001c00 ffb1ff8f c0ff7ff8 ff87ffff     ................
  42de60:	70fc7ff3 01000e00 003800c0 e0000007     ...p......8.....
  42de70:	03001c00 00700080 ff01000e ddff37ff     ......p......7..
  42de80:	00e0ffff 801f00fc 7e00f003 01c00f00     ...........~....
  42de90:	003f00f8 fc00e007 03801f00 ffbdffff     ..?.............
  42dea0:	c0fffff9 ffa7ffff f0fd7ff7 0f007e00     .............~..
  42deb0:	00f801c0 e007003f 1f00fc00 00f00380     ....?...........
  42dec0:	c00f007e 0a00f800 00000300 001c00e0     ~...............
  42ded0:	70008003 01000e00 003800c0 e0000007     ...p......8.....
  42dee0:	03001c00 00700080 a7ffff02 fd7ff7ff     ......p.........
  42def0:	007e00f0 f801c00f 07003f00 00fc00e0     ..~......?......
  42df00:	f003801f 0f007e00 ff77ffff e0ffffdd     .....~....w.....
  42df10:	1f00fc00 00f00380 c00f007e 3f00f801     ........~......?
  42df20:	00e00700 801f00fc bdffff03 fffff9ff     ................
  42df30:	a7ffffc0 fd7ff7ff 007e00f0 f801c00f     ..........~.....
  42df40:	07003f00 00fc00e0 f003801f 0f007e00     .?...........~..
  42df50:	ff77ffff 00ffffd9 1c00e000 00800300     ..w.............
  42df60:	000e0070 3800c001 00000700 001c00e0     p......8........
  42df70:	b1ff8f03 ff7ff8ff 0080ffc0 00ff0100     ................

0042df80 <glyph_dsc>:
	...
  42df88:	06000000 00000101 18800001 0e05030e     ................
  42df98:	00000007 00fe0403 18800009 00031e13     ................
  42dfa8:	18800051 01131d03 1880005c 00031e13     Q.......\.......
  42dfb8:	188000a4 00031e13 188000ec 01031e13     ................
  42dfc8:	18800134 00031e13 1880017c 00031e13     4.......|.......
  42dfd8:	188001c4 01031d13 18800209 00031e13     ................
  42dfe8:	18800251 00031e13 06000299 07011003     Q...............

0042dff8 <unicode_list_0>:
  42dff8:	000d0000 0000000e                       ........

0042e000 <cmaps>:
  42e000:	00000020 0001000f 0042e52c 00000000      .......,.B.....
  42e010:	00030003 00000030 0004000b 00000000     ....0...........
  42e020:	00000000 00020000                       ........

0042e028 <glyph_bitmap>:
  42e028:	efff7f00 fefffbff f7ff7700 feffff00     .........w......
  42e038:	fbfeffdf 00fefeff 00007f00 3f00807f     ...............?
  42e048:	e01f00c0 00f00f00 0300f807 fe0100fc     ................
  42e058:	00ff0000 00807f00 1f00c03f f00f00e0     ........?.......
  42e068:	00f80700 0000fc01 6600003c 003c0000     ........<..f..<.
  42e078:	00803f00 0f00e01f f80700f0 00fc0300     .?..............
  42e088:	0000fe01 7f0000ff c03f0080 00e01f00     ..........?.....
  42e098:	0700f00f fc0300f8 00fe0100 0000ff00     ................
  42e0a8:	dfffbf7f bffbffbf 3713ffff ffffffff     ...........7....
  42e0b8:	16f7ffff ffffff7f ffffffff fefffff3     ................
  42e0c8:	c3feff9f 00e0feff 00007000 3c000078     .........p..x..<
  42e0d8:	001e0000 00000f00 03008007 e00100c0     ................
  42e0e8:	00f00000 00007800 1e00003c 000f0000     .....x..<.......
  42e0f8:	00800700 ffffc101 09ffff21 0007ffff     ........!.......
  42e108:	00c00300 0000e001 780000f0 003c0000     ...........x..<.
  42e118:	00001e00 0700000f c0030080 00e00100     ................
  42e128:	0000f000 3c000078 001e0000 00000f00     ....x..<........
  42e138:	c3ffbf07 bff9ffbf ffffffff feff9ffe     ................
  42e148:	e0feffc3 00700000 00007800 1e00003c     ......p..x..<...
  42e158:	000f0000 00800700 0100c003 f00000e0     ................
  42e168:	00780000 00003c00 0f00001e 80070000     ..x..<..........
  42e178:	ffc30100 ffff21ff 78ffff71 003c0000     .....!..q..x..<.
  42e188:	00001e00 0700000f c0030080 00e00100     ................
  42e198:	0000f000 3c000078 001e0000 00000f00     ....x..<........
  42e1a8:	03008007 e00100c0 00f00000 ff7f7800     .............x..
  42e1b8:	faff3fdc 00ffff3f 00800000 0000f000     .?..?...........
  42e1c8:	7f00007e 807f0000 00c03f00 0f00e01f     ~........?......
  42e1d8:	f80700f0 00fc0300 0000fe01 7f0000ff     ................
  42e1e8:	c03f0080 00e01f00 0700f00f fd0100f8     ..?.............
  42e1f8:	ff3dffff ffff71ff 3c000078 001e0000     ..=..q..x..<....
  42e208:	00000f00 03008007 e00100c0 00f00000     ................
  42e218:	00007800 1e00003c 000f0000 00800700     .x..<...........
  42e228:	0100c003 f00000e0 00180000 ffff0000     ................
  42e238:	feff5ffe 1efeff3b 000f0000 00800700     ._..;...........
  42e248:	0100c003 f00000e0 00780000 00003c00     ..........x..<..
  42e258:	0f00001e 80070000 00c00300 0000e001     ................
  42e268:	780000f0 ff3d0000 ffff1dff 78ffff71     ...x..=.....q..x
  42e278:	003c0000 00001e00 0700000f c0030080     ..<.............
  42e288:	00e00100 0000f000 3c000078 001e0000     ........x..<....
  42e298:	00000f00 03008007 e00100c0 00f00000     ................
  42e2a8:	ff3f7800 faff3fdc ffffff3f ff5ffeff     .x?..?..?....._.
  42e2b8:	feff3bfe 0f00001e 80070000 00c00300     .;..............
  42e2c8:	0000e001 780000f0 003c0000 00001e00     .......x..<.....
  42e2d8:	0700000f c0030080 00e00100 0000f000     ................
  42e2e8:	3d000078 ff1dffff ffff79ff 3f00007f     x..=.....y.....?
  42e2f8:	e01f00c0 00f00f00 0300f807 fe0100fc     ................
  42e308:	00ff0000 00807f00 1f00c03f f00f00e0     ........?.......
  42e318:	00f80700 0100fc03 ff0000fe bf7f0000     ................
  42e328:	ffbfdfff ffffbffb 7f000000 ff6fffff     ..............o.
  42e338:	ffff7dff 3f00007f c03f0080 00e01f00     .}.....?..?.....
  42e348:	0700f00f fc0300f8 00fe0100 0000ff00     ................
  42e358:	3f00807f e01f00c0 00f00f00 0300f807     ...?............
  42e368:	7c0000fc 00060000 00003800 1e00003c     ...|.....8..<...
  42e378:	000f0000 00800700 0100c003 f00000e0     ................
  42e388:	00780000 00003c00 0f00001e 80070000     ..x..<..........
  42e398:	00c00300 0000e001 780000f0 001c0000     ...........x....
  42e3a8:	ffff0200 feffdffe fefefffb 007f0000     ................
  42e3b8:	00807f00 1f00c03f f00f00e0 00f80700     ....?...........
  42e3c8:	0100fc03 ff0000fe 807f0000 00c03f00     .............?..
  42e3d8:	0f00e01f f80700f0 fffd0100 ffff3dff     .............=..
  42e3e8:	7fffff79 c03f0000 00e01f00 0700f00f     y.....?.........
  42e3f8:	fc0300f8 00fe0100 0000ff00 3f00807f     ...............?
  42e408:	e01f00c0 00f00f00 0300f807 fe0100fc     ................
  42e418:	00ff0000 ffbf7f00 fbffbfdf ffffffbf     ................
  42e428:	ffdffeff fefffbfe 7f0000fe 807f0000     ................
  42e438:	00c03f00 0f00e01f f80700f0 00fc0300     .?..............
  42e448:	0000fe01 7f0000ff c03f0080 00e01f00     ..........?.....
  42e458:	0700f00f fd0100f8 ff3dffff ffff71ff     ..........=..q..
  42e468:	3c000078 001e0000 00000f00 03008007     x..<............
  42e478:	e00100c0 00f00000 00007800 1e00003c     .........x..<...
  42e488:	000f0000 00800700 0100c003 f00000e0     ................
  42e498:	3f780000 ff3fdcff ffff3ffa 00f7ff77     ..x?..?..?..w...
  42e4a8:	00000000 bf030000 0000b8ff              ............

0042e4b4 <glyph_dsc>:
	...
  42e4bc:	08000000 00000101 20a00001 12070313     ........... ....
  42e4cc:	00000009 00fe0505 20a0000d 00042819     ........... .(..
  42e4dc:	20a0008a 02192604 20a0009d 00042819     ... .&..... .(..
  42e4ec:	20a0011a 00042819 20a00197 01042619     ... .(..... .&..
  42e4fc:	20a0020e 00042819 20a0028b 00042819     ... .(..... .(..
  42e50c:	20a00308 02042719 20a00382 00042819     ... .'..... .(..
  42e51c:	20a003ff 00042819 0800047c 09021605     ... .(..|.......

0042e52c <unicode_list_0>:
  42e52c:	000d0000 0000000e 454c4449 00000000     ........IDLE....
  42e53c:	51726d54 00000000 20726d54 00637653     TmrQ....Tmr Svc.
  42e54c:	2074754f 6d20666f 726f6d65 00000079     Out of memory...
  42e55c:	0000ffff 4c4c554e 696f7020 7265746e     ....NULL pointer
  42e56c:	00000000 6f5f766c 00006a62 0000ffff     ....lv_obj......
  42e57c:	640a6f4e 00617461                       No.data.

0042e584 <_lv_bpp1_opa_table>:
  42e584:	0000ff00                                ....

0042e588 <_lv_bpp2_opa_table>:
  42e588:	ffaa5500                                .U..

0042e58c <_lv_bpp4_opa_table>:
  42e58c:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........

0042e59c <_lv_bpp8_opa_table>:
  42e59c:	03020100 07060504 0b0a0908 0f0e0d0c     ................
  42e5ac:	13121110 17161514 1b1a1918 1f1e1d1c     ................
  42e5bc:	23222120 27262524 2b2a2928 2f2e2d2c      !"#$%&'()*+,-./
  42e5cc:	33323130 37363534 3b3a3938 3f3e3d3c     0123456789:;<=>?
  42e5dc:	43424140 47464544 4b4a4948 4f4e4d4c     @ABCDEFGHIJKLMNO
  42e5ec:	53525150 57565554 5b5a5958 5f5e5d5c     PQRSTUVWXYZ[\]^_
  42e5fc:	63626160 67666564 6b6a6968 6f6e6d6c     `abcdefghijklmno
  42e60c:	73727170 77767574 7b7a7978 7f7e7d7c     pqrstuvwxyz{|}~.
  42e61c:	83828180 87868584 8b8a8988 8f8e8d8c     ................
  42e62c:	93929190 97969594 9b9a9998 9f9e9d9c     ................
  42e63c:	a3a2a1a0 a7a6a5a4 abaaa9a8 afaeadac     ................
  42e64c:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  42e65c:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
  42e66c:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  42e67c:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
  42e68c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0042e69c <wcorr.10557>:
  42e69c:	81808080 83828281 87868584 8d8c8a89     ................
  42e6ac:	9593918f 9e9b9997 a7a5a2a0 b2afadaa     ................
  42e6bc:	000000b5 78656e55 74636570 73206465     ....Unexpected s
  42e6cc:	74726174 676e615f 0000656c 78656e55     tart_angle..Unex
  42e6dc:	74636570 65206465 615f646e 656c676e     pected end_angle
  42e6ec:	00000000 0000ffff ffaa5500 33221100     .........U...."3
  42e6fc:	77665544 bbaa9988 ffeeddcc ffaa5500     DUfw.........U..
  42e70c:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........
  42e71c:	006e6962                                bin.

0042e720 <cmaps>:
  42e720:	00000020 0001005f 00000000 00000000      ..._...........
  42e730:	00020000 000000b0 0060f7f3 00431ab4     ..........`...C.
  42e740:	00000000 0003003b                       ....;...

0042e748 <glyph_dsc>:
	...
  42e750:	03c00000 00000000 03c00000 00000a03     ................
  42e760:	0580000f 05000505 09d0001c 00000a0a     ................
  42e770:	08b0004e fe000f09 0bd00092 00000a0c     N...............
  42e780:	09a000ce ff000b0a 02f00105 05000503     ................
  42e790:	04b0010d fd010e04 04c00129 fd000e04     ........).......
  42e7a0:	05a00145 05000606 08200157 02000708     E.......W. .....
  42e7b0:	03300173 fe000503 0560017b 03000305     s.0.....{.`.....
  42e7c0:	03300183 00000303 04f00188 ffff0e07     ..0.............
  42e7d0:	095001b9 00000a09 053001e6 00000a04     ..P.......0.....
  42e7e0:	081001fa 00000a08 08000222 00000a08     ........".......
  42e7f0:	0960024a 00000a0a 0810027c 00000a08     J.`.....|.......
  42e800:	08a002a4 00000a09 086002d1 00000a08     ..........`.....
  42e810:	090002f9 00000a09 08a00326 00000a08     ........&.......
  42e820:	0330034e 00000803 0330035a fd000b03     N.0.....Z.0.....
  42e830:	0820036b 01000808 0820038b 02000608     k. ....... .....
  42e840:	082003a3 01000808 080003c3 00000a08     .. .............
  42e850:	0e8003eb fd000d0e 0a400446 00ff0a0c     ........F.@.....
  42e860:	0aa00482 00010a09 0a2004af 00000a0a     .......... .....
  42e870:	0b9004e1 00010a0a 09600513 00010a08     ..........`.....
  42e880:	08e0053b 00010a08 0ad00563 00000a0a     ;.......c.......
  42e890:	0b600595 00010a09 045005c2 00010a02     ..`.......P.....
  42e8a0:	073005cc 00ff0a07 0a1005ef 00010a0a     ..0.............
  42e8b0:	08500621 00010a08 0d600649 00010a0b     !.P.....I.`.....
  42e8c0:	0b600680 00010a09 0bc006ad 00000a0c     ..`.............
  42e8d0:	0a2006e9 00010a09 0bc00716 fd000d0c     .. .............
  42e8e0:	0a300764 00010a09 08b00791 00000a09     d.0.............
  42e8f0:	083007be 00000a09 0b1007eb 00010a09     ..0.............
  42e900:	09f00818 00ff0a0b 0fc0084f 00000a10     ........O.......
  42e910:	0970089f 00000a0a 091008d1 00ff0a0b     ..p.............
  42e920:	09300908 00000a09 04b00935 fd010e04     ..0.....5.......
  42e930:	04f00951 ffff0e07 04b00982 fd000e04     Q...............
  42e940:	0830099e 02010607 070009b3 ff000107     ..0.............
  42e950:	086009b7 09010205 086009bc 00000808     ..`.......`.....
  42e960:	099009dc 00010b08 08000a08 00000808     ................
  42e970:	09900a28 00000b09 08900a5a 00000808     (.......Z.......
  42e980:	04f00a7a 00000b06 09b00a9b fd000b09     z...............
  42e990:	09900acd 00010b08 03e00af9 00010b02     ................
  42e9a0:	04000b04 fdfe0e05 08a00b27 00010b08     ........'.......
  42e9b0:	03e00b53 00010b02 0ed00b5e 0001080d     S.......^.......
  42e9c0:	09900b92 00010808 08e00bb2 00000809     ................
  42e9d0:	09900bd6 fd010b08 09900c02 fd000b09     ................
  42e9e0:	05c00c34 00010805 07000c48 00000807     4.......H.......
  42e9f0:	05d00c64 00000a06 09800c82 00010808     d...............
  42ea00:	07d00ca2 00ff0809 0c900cc6 0000080d     ................
  42ea10:	07c00cfa 00000808 07d00d1a fdff0b09     ................
  42ea20:	07500d4c 00000807 04f00d68 fd000e05     L.P.....h.......
  42ea30:	04300d8b fd010e02 04f00d99 fd000e05     ..0.............
  42ea40:	08200dbc 03000308 05e00dc8 06000506     .. .............
  42ea50:	04600dd7 03000304 0e000ddd feff0f0f     ..`.............
  42ea60:	0e000e4e 00000b0e 0e000e9b ff000d0e     N...............
  42ea70:	0e000ef6 00000b0e 09a00f43 00000b0a     ........C.......
  42ea80:	0e000f7a fe000f0e 0e000fe3 fe000f0e     z...............
  42ea90:	0fc0104c ff000d10 0e0010b4 fe000f0e     L...............
  42eaa0:	0fc0111d 00000b10 0e001175 fe000f0e     ........u.......
  42eab0:	070011de ff000c07 0a801208 ff000c0b     ................
  42eac0:	0fc0124a fe000e10 0e0012ba 00000b0e     J...............
  42ead0:	0c401307 fe010e0a 0c40134d fe000f0d     ..@.....M.@.....
  42eae0:	0c4013af ff000d0d 0c401404 ff000d0d     ..@.......@.....
  42eaf0:	0c401459 fe010e0a 0c40149f ffff0d0e     Y.@.......@.....
  42eb00:	08c014fa ff000d09 08c01535 ff000d09     ........5.......
  42eb10:	0c401570 ff000d0d 0c4015c5 0300040d     p.@.......@.....
  42eb20:	0fc015df 00000b10 11801637 fe000f12     ........7.......
  42eb30:	0fc016be feff0f11 0e00173e ff000d0e     ........>.......
  42eb40:	0c401799 0100080d 0c4017cd 0100080d     ..@.......@.....
  42eb50:	11801801 00000b12 0e001864 00000b0e     ........d.......
  42eb60:	0e0018b1 fe000f0e 0e00191a feff0f0f     ................
  42eb70:	0c40198b ff000d0d 0c4019e0 fe000f0d     ..@.......@.....
  42eb80:	0c401a42 ff000d0d 08c01a97 feff0f0a     B.@.............
  42eb90:	0c401ae2 fe000f0d 0c401b44 fe000f0d     ..@.....D.@.....
  42eba0:	0fc01ba6 00000b10 0e001bfe feff0f10     ................
  42ebb0:	0a801c76 fe000f0b 11801cc9 ff000d12     v...............
  42ebc0:	11801d3e 00000a12 11801d98 00000a12     >...............
  42ebd0:	11801df2 00000a12 11801e4c 00000a12     ........L.......
  42ebe0:	11801ea6 00000a12 11801f00 ff000c12     ................
  42ebf0:	0c401f6c fe000f0c 0c401fc6 fe000f0d     l.@.......@.....
  42ec00:	0e002028 feff0f0f 11802099 00000b12     ( ....... ......
  42ec10:	0a8020fc fe000f0b 0e10214f 00000a0f     . ......O!......

0042ec20 <gylph_bitmap>:
  42ec20:	0dd9a00e 800cc890 11600ab7 1fd9800b     ..........`.....
  42ec30:	88f09109 f080081f 00000088 3c200d00     .............. <
  42ec40:	000f0000 ff2f0069 01f7ffff 10a6115c     ....i./.....\...
  42ec50:	c3006900 00880000 ff9f00d2 12f0ffff     .i..............
  42ec60:	20e223c5 c003d200 04f00000 000000b0     .#. ............
  42ec70:	00000070 0000000e 0000e000 30eaef19     p..............0
  42ec80:	a7e6d60c 000ef402 e0801f00 ef6f0000     ..............o.
  42ec90:	16000050 0000e5ff 01f00a0e 135fe000     P............._.
  42eca0:	b06e5ef8 91fecf05 000e0000 70000000     .^n............p
  42ecb0:	dd080000 00a70030 04d0024b 007700c0     ....0...K.....w.
  42ecc0:	00201dd0 a7d0034b dc070000 30ccc434     .. .K.......4..0
  42ecd0:	2d1d0000 0000d022 b3003ba6 3ac00500     ...-"....;.....:
  42ece0:	1d00a300 d0000d20 0400a600 4d0040cc     .... ........@.M
  42ecf0:	000030fc 00c018f7 d005f201 6ebb0000     .0.............n
  42ed00:	5f000040 070000f3 8003dbe6 ba1d302f     @.._......../0..
  42ed10:	01005fa0 b41f40df 03c0fe48 b240fcbf     ._...@..H.....@.
  42ed20:	00000000 f0011f00 00f0001f 0bf10300     ................
  42ed30:	4f400f90 9b007d00 aa00aa00 7d009b00     ..@O.}.........}
  42ed40:	0f004f00 03900b40 0e005ef1 04c00860     .O..@....^..`...
  42ed50:	00f301f0 00e600f5 01f500e6 08f004f3     ................
  42ed60:	5e600ec0 00930000 09c2a688 dd4d40fe     ..`^.........@M.
  42ed70:	509342b1 00005200 00005004 0000a008     .B.P.R...P......
  42ed80:	1f00a008 03f3ffff 0030b339 0000a008     ........9.0.....
  42ed90:	0100a008 601ef603 00002ce1 f9ff0300     .......`.,......
  42eda0:	00103303 402ef503 400e0000 00e00400     .3.....@...@....
  42edb0:	00009a00 0400400e 9a0000f0 400e0000     .....@.........@
  42edc0:	00f00300 00009a00 0300500e 9a0000f0     .........P......
  42edd0:	500e0000 00f00300 fe4c0000 b64f0070     ...P......L.p.O.
  42ede0:	b00d908f f4325f00 4fe70000 a40c0020     ....._2....O ...
  42edf0:	ca0000f2 0e00402f 0500db70 68fb04f2     ..../@..p......h
  42ee00:	cf0400f9 fbef00e7 ab00cb44 ab00ab00     ........D.......
  42ee10:	ab00ab00 ab00ab00 df07ab00 858e10ea     ................
  42ee20:	0001c07e 0000f106 0000f006 0000900d     ~...............
  42ee30:	1c0000cc db0100c0 e51d0000 ff7f4244     ............DB..
  42ee40:	ff7ff9ff 4424f0ff 0000905f 090000bc     ......$D_.......
  42ee50:	3f0000e1 040010d8 0000d06d 0010f402     ...?....m.......
  42ee60:	75bdf402 df19d07d 000010ea 0000a00d     ...u}...........
  42ee70:	0000ac00 00e10700 404f0000 f6020010     ..........O@....
  42ee80:	1d00f500 00f500a0 ffffff7f 333313f3     ..............33
  42ee90:	000030f7 0000f500 00f50000 f0ffff09     .0..............
  42eea0:	4044b40a 0000800c 0000700e 40fcff0f     ..D@.....p.....@
  42eeb0:	f25c3403 f7000000 f7000010 f16c858e     .4\...........l.
  42eec0:	30fbdf08 d5ef2a00 57d63f00 00c00c40     ...0.*...?.W@...
  42eed0:	00f40200 5b4f0000 fe04a1ff 3fd05d84     ......O[.....].?
  42eee0:	303f0080 f20300e8 dc45f806 e9df0500     ..?0......E.....
  42eef0:	ffff9f10 44449dfd 04009ce9 0b0000f2     ......DD........
  42ef00:	2f0000b0 ad000040 f6010000 e0080000     .../@...........
  42ef10:	800e0000 106f0000 fe9e0100 63be0091     ......o........c
  42ef20:	600fc06e cc006f00 02c02b20 00e2ffef     n..`.o.. +......
  42ef30:	d04c42dc 1f00205f 0200f255 35d50ef5     .BL._ ..U......5
  42ef40:	ef1a00de bf0310ea a42f20ea 008ee14b     ......... /.K...
  42ef50:	009de900 714fdd00 ff07ff29 02009efc     ......Oq).......
  42ef60:	0000ac10 6507f602 ef0ab08f 532e00d7     .......e.......S
  42ef70:	000000f5 3f000000 532ee452 000000f5     .......?R..S....
  42ef80:	2e000000 210df652 000001d0 00310000     ....R..!......1.
  42ef90:	01f26c00 0f00d68e 0a0000c3 000040fb     .l...........@..
  42efa0:	0070ee17 00c30500 1f000000 03f3ffff     ..p.............
  42efb0:	00303333 00000000 1f000000 03f3ffff     330.............
  42efc0:	04303333 0e000000 000010d7 0020f95c     330.........\. .
  42efd0:	00f22a00 06b1af03 1c0082de 00000060     .*..........`...
  42efe0:	07000000 9e10eadf 01c06e74 00f00600     ........tn......
  42eff0:	00c00900 00208e00 0000f206 00007008     ...... ......p..
  42f000:	00000000 0000800b 0000900c daef6c00     .............l..
  42f010:	3d000040 d91610a4 09e50100 90ca98ee     @..=............
  42f020:	43bd800a 0fd3c0af 0c00f213 063c69c0     ...C.........i<.
  42f030:	c00700d0 d0064b3b 2cc00700 00f2033c     ....;K.....,<...
  42f040:	0f4ac00c 9e43bd10 800ac5e3 cf91ee09     ..J...C.........
  42f050:	00e50190 00000000 10a43d00 00000028     .........=..(...
  42f060:	d9ef7c00 00000010 0000f10c d73f0000     .|............?.
  42f070:	00000000 00006eb9 0ef20200 09000050     .....n......P...
  42f080:	00d007a0 00301f00 7f0000f4 00fbffff     ......0.........
  42f090:	3333e700 f005204f 900c0000 0000900c     ..33O ..........
  42f0a0:	ff8ff106 e308c4fe 8ef24b33 581f0000     ........3K.....X
  42f0b0:	f11800e0 f8ffff8f 3733e308 00008ef6     ..........37....
  42f0c0:	00e0c809 338e9d00 ff787f34 0070fdff     .......34.x...p.
  42f0d0:	40fbcf07 6a96cf00 00e20af5 601f3000     ...@...j.....0.`
  42f0e0:	4f000000 00000020 0000204f 00601f00     ...O ...O ....`.
  42f0f0:	e20a0000 01300000 f56a96cf fbdf0700     ......0...j.....
  42f100:	feff8f40 448e00a4 8e70cf46 f3070000     @......DF.p.....
  42f110:	0000008e 00008eda 008e9d00 8e9d0000     ................
  42f120:	da000000 0700008e 46448ef3 ff8f70bf     ..........DF.p..
  42f130:	8f00a4fe 8ef6ffff 8e414444 8e000000     ........DDA.....
  42f140:	8f000000 8ec0ffff 8e203333 8e000000     ........33 .....
  42f150:	8e000000 8f424444 8ff9ffff 8ef6ffff     ....DDB.........
  42f160:	8e414444 8e000000 8e000000 8f000000     DDA.............
  42f170:	8ec0ffff 8e203333 8e000000 8e000000     ....33 .........
  42f180:	00000000 50fccf07 6a96cf00 00e20af6     .......P...j....
  42f190:	601f2000 4f000000 00000020 0000204f     . .`...O ...O ..
  42f1a0:	00601fb9 e30ab900 00b90000 f86a96cf     ..`...........j.
  42f1b0:	fcdf0700 00008e60 00e0e808 008e8e00     ....`...........
  42f1c0:	e0e80800 8f8e0000 e8ffffff 9e3333e3     .............33.
  42f1d0:	0800008e 0000e0e8 00008e8e 00e0e808     ................
  42f1e0:	8e8e8e00 8e8e8e8e 8e8e8e8e c0ffff02     ................
  42f1f0:	00bc4404 00c00900 00009c00 0000c009     .D..............
  42f200:	0900009c ba0020c0 608fb50e 8e80fe3c     ..... .....`<...
  42f210:	504f0000 f604008e 3f008e00 038e0070     ..OP.......?p...
  42f220:	8e0000f8 0000c02e 00f6ec8e 7fb08f00     ................
  42f230:	008e0030 8e00e10a 00cc0000 1e00008e     0...............
  42f240:	00008ea0 00008e00 00008e00 00008e00     ................
  42f250:	00008e00 00008e00 00008e00 00008e00     ................
  42f260:	44448e00 ffff8f40 00008ef2 f7e80800     ..DD@...........
  42f270:	fe020000 0000f18f a0dce8bf 8d9e4f00     .............O..
  42f280:	870d302f 069cd0e8 018d7ee0 e807e5e7     /0.......~......
  42f290:	00fc06d0 0a008d7e d0e80720 7e000000     ....~... ......~
  42f2a0:	0800108e 0000fce8 00f98f8e f6e6e808     ................
  42f2b0:	098e8e00 e0e808f3 8e8ee10c e8b81e00     ................
  42f2c0:	ee3f00e0 6f00008e 0000e0e8 cf0700ae     ..?....o........
  42f2d0:	000050eb f96b96cf 00e20a00 1f605f00     .P....k......_`.
  42f2e0:	0a000060 00204fd0 4ff00600 06000020     `....O ....O ...
  42f2f0:	00601ff0 0ad00a00 5f0000e2 96cf0060     ..`........_`...
  42f300:	0000fa6b 50ebdf07 fdff8f00 45e40870     k......P....p..E
  42f310:	008eb08f e0385f00 8ef50100 483f0000     ....._8.......?H
  42f320:	d04d01e0 b2ffff8f 1033e308 00008e00     ..M.......3.....
  42f330:	00e00800 07000000 0050ebcf 6b96cf00     ..........P....k
  42f340:	e20a00f9 605f0000 0000601f 204fd00a     ......_`.`....O 
  42f350:	f0060000 0000204f 601ff005 d00a0000     ....O .....`....
  42f360:	0000e20a df01605f 00fa5a85 fcdf0800     ...._`...Z......
  42f370:	00000050 9421ec01 1b000000 0000c1ff     P.....!.........
  42f380:	00120000 70fdff8f 8f45e408 00008eb0     .......p..E.....
  42f390:	00e0385f 008ef501 e0383f00 8fd04d01     _8.......?8..M..
  42f3a0:	08c2ffff 00da33e3 f602008e 0500e008     .....3..........
  42f3b0:	fd9e01f3 64ce00a2 402f706b f8010000     .......dkp/@....
  42f3c0:	06000000 000095fd 50ee6a01 9f000000     .........j.P....
  42f3d0:	05002000 47a53ff1 ef4b00eb ffff10e9     . ...?.G..K.....
  42f3e0:	4424ffff 004044bd 0000c009 00009c00     ..$D.D@.........
  42f3f0:	00c00900 009c0000 c0090000 9c000000     ................
  42f400:	09000000 000000c0 9c00009c a90b0000     ................
  42f410:	ba0000c0 0b00009c 0000c0a9 00009cba     ................
  42f420:	00c0a90b 008eba00 f4940d00 0cf50300     ................
  42f430:	00fd68f8 10e9ef09 0000b00c 205fc00a     .h............_ 
  42f440:	00f50100 8e0000e9 00f00800 1f00700e     .............p..
  42f450:	00f10560 c900ad00 f4030000 0000303f     `...........?0..
  42f460:	00c0ba0c f55f0000 00000000 6f0000ee     ......_........o
  42f470:	b00d0010 1ff20200 f13f0060 0bd00800     ........`.?.....
  42f480:	e68b00b0 06700d00 9be600f0 01202f00     ......p....../ .
  42f490:	4ff103f5 00008d10 0eb009ca 0000d860     ...O........`...
  42f4a0:	09600e6f 0000f3b2 04109f1f 0000d0f9     o.`.............
  42f4b0:	0000fb0c 000080ef 0000f607 3f00309f     .............0.?
  42f4c0:	a00d0050 9d00f208 04cc0000 2f0000f3     P............../
  42f4d0:	0000709e 0000fc06 10fe0900 4d4f0000     .p............OM
  42f4e0:	e80100b0 0b00f702 207f00d0 0b00207f     ........... . ..
  42f4f0:	00b00cd0 2f009c00 302f0050 0c009e00     ......./P./0....
  42f500:	e8000090 0000f105 00e6f305 fd0c0000     ................
  42f510:	00000000 0000403f 00f30200 2f000000     ....?@........./
  42f520:	00000030 0000f302 ffffff4f 4a444491     0.......O....DDJ
  42f530:	030000f3 010000f6 000000ea 000000cc     ................
  42f540:	0000109e 0000406f 0000703f 4444d41e     ....o@..?p....DD
  42f550:	ffffff36 8df68ffc 8d008d31 8d008d00     6.......1.......
  42f560:	8d008d00 8d008d00 8d008d00 8f318d00     ..............1.
  42f570:	00005df6 0000f200 0000800b 0100006d     .]..........m...
  42f580:	0b0000f2 6d000080 f2010000 700b0000     .......m.......p
  42f590:	006d0000 00f20100 00700b00 00006d00     ..m.......p..m..
  42f5a0:	f3bff201 f302f325 f302f302 f302f302     ....%...........
  42f5b0:	f302f302 f302f302 f325f302 ad00f3bf     ..........%.....
  42f5c0:	c41e0000 a0850800 100ee200 0b97005b     ............[...
  42f5d0:	eee00250 0be0eeee b00900c0 10eacf04     P...............
  42f5e0:	b05d740b f0040000 f2eece04 f214821f     .t].............
  42f5f0:	f204104f f23d701f f2d7df04 000000ba     O....p=.........
  42f600:	000000ba 000000ba 30fc8eba f34bd5bf     ...........0..K.
  42f610:	ca0010be 7e0000ba 7e0000ba ca0010be     .......~...~....
  42f620:	f35bd5bf 30fc8eb9 60fd7d00 f448f709     ..[....0.}.`..H.
  42f630:	2000502f 0000005f 0000005f 2000502f     /P. _..._.../P. 
  42f640:	f448f709 60fd7d00 1f000000 01000040     ..H..}.`....@...
  42f650:	000000f4 ef08401f f70af4c4 f542ff48     .....@......H.B.
  42f660:	5ff40700 452f0000 f40100f0 6f00502f     ..._../E..../P.o
  42f670:	7e63ae40 fc8e00f4 8e00404f d50a40fc     @.c~....O@...@..
  42f680:	202ff438 ee5f8c00 215fffee 702f1111     8./ .._..._!../p
  42f690:	f8091000 7d00e446 9e0080fe 41f405e3     ....F..}.......A
  42f6a0:	cf00c008 d329f0ff 00d00820 0800d008     ......). .......
  42f6b0:	d00800d0 00d00800 0000d008 604efc7e     ............~.N`
  42f6c0:	f67f74af 5f00502f 0000f065 00005ff6     .t../P._e...._..
  42f6d0:	00f6620f f709f606 0750ff47 00f5c4ef     .b......G.P.....
  42f6e0:	203f0000 b06e64cb 80fdae03 0000ba00     ..? .dn.........
  42f6f0:	0000ba00 0000ba00 fb8eba00 6dc5bf20     ............ ..m
  42f700:	0300bed0 0000baf2 0000baf4 0000baf5     ................
  42f710:	0000baf5 0000baf5 00a8baf5 babababa     ................
  42f720:	babababa 00b00a00 00000099 0a00ab00     ................
  42f730:	00ab00b0 ab00b00a 00b00a00 b00a00ab     ................
  42f740:	4e06aa00 baa0df71 ba000000 ba000000     ...Nq...........
  42f750:	ba000000 bac01c00 ba00cc01 bb00d11c     ................
  42f760:	bf0060cf bd00e1db ba00dc11 ba703f00     .`...........?p.
  42f770:	baf30700 babababa babababa 9eb9baba     ................
  42f780:	d4df15fa ed45fb0b bef24ae6 00f60600     ......E..J......
  42f790:	00a07b0e c900204f f10300ba a09b0c00     .{..O ..........
  42f7a0:	00103f00 0300bac9 9b0c00f1 103f00a0     .?............?.
  42f7b0:	9eb9c900 b4bf20fb 00bed05d 00baf203     ..... ..].......
  42f7c0:	00baf400 00baf500 00baf500 00baf500     ................
  42f7d0:	7d00f500 9f0060fd 2f708f74 057f0050     ...}.`..t.p/P...
  42f7e0:	f30100f0 2f00005f 0700f532 48f709f0     ...._../2......H
  42f7f0:	df0700f7 8eb900d6 c4bf30fc 10bef33a     .........0..:...
  42f800:	00baca00 00ba7e00 10be7e00 d5bfca00     .....~...~......
  42f810:	7ebaf35b 00ba30fc 00ba0000 00ba0000     [..~.0..........
  42f820:	8e000000 af403ffc 2ff48e74 457f0050     .....?@.t../P..E
  42f830:	f40100f0 2f00005f 0700f542 48f70af4     ...._../B......H
  42f840:	ef0840ff 0000f4c4 00401f00 00f40100     .@........@.....
  42f850:	401f0000 fd4b8eb9 0b10be71 00ba00b0     ...@..K.q.......
  42f860:	ba00a00b 00a00b00 13eadf05 6fa035f7     .............5.o
  42f870:	ee010000 6a011096 000030ef 6f646cd9     .......j.0...ldo
  42f880:	70fdae62 0800d008 ffcf00d0 20d329f0     b..p.........). 
  42f890:	0800d008 d00800d0 00d00800 0051f505     ..............Q.
  42f8a0:	00c8e39f 00c8f302 00c8f302 00c8f302     ................
  42f8b0:	00c9f302 00abf303 835ff307 df06f37e     .........._.~...
  42f8c0:	900df3c5 6ea00a00 00f30100 007d00f5     .......n......}.
  42f8d0:	600ec009 f0243f00 b9c80000 ff060000     ...`.?$.........
  42f8e0:	0f000030 00c800c0 0d00f106 cf00d056     0...........V...
  42f8f0:	1ff00360 009c2f30 07b8009a 400ef1b2     `...0/.........@
  42f900:	0cd6e005 0f00e074 997c006f a0af0000     ....t...o.|.....
  42f910:	0040ff01 0b00f405 304f00e0 d009e107     ..@.......O0....
  42f920:	d900402f 3f0000d9 4f0000d0 e70100e1     /@.....?...O....
  42f930:	b00b00bb 107e701e 900df305 6fa00a00     .....p~........o
  42f940:	00f30100 007d00f6 600dc009 f0342f00     ......}....`./4.
  42f950:	a9c90000 ff050000 0e000020 000000c0     ........ .......
  42f960:	940000e5 1b0000ad 000020fc a1ffff5f     ......... .._...
  42f970:	00f43733 0000e701 8e0000cb 404f0010     37............O@
  42f980:	33a31e00 fcffff26 0fa06e00 00f40192     ...3&....n......
  42f990:	f401401f 3f303f00 306f00c0 1f00f401     .@...?0?..o0....
  42f9a0:	00f40140 fa00401f 8bea0520 8b8b8b8b     @....@.. .......
  42f9b0:	8b8b8b8b 8b8b8b8b 0250be8b f00500ae     ..........P.....
  42f9c0:	05005f00 104f00f0 4f10df00 00f00550     ._....O....OP...
  42f9d0:	f005005f 2a005f00 00e40be0 b440ec07     _...._.*......@.
  42f9e0:	c0df251e 00000001 2b30cc04 0057c001     .%........0+..W.
  42f9f0:	c0012b93 0630cc05 0bf60fa1 000000e2     .+....0.........
	...
  42fa08:	fb7b0200 04000000 d0ffff9d ffaf0300     ..{.............
  42fa18:	00fdffff ffffaf00 00d0dfff b6ffff0a     ................
  42fa28:	0000ed10 000094af 0a00d00e 000000f1     ................
  42fa38:	af0000ed 0e000010 f10a00d0 fd450000     ..............E.
  42fa48:	10af0000 d0ffef01 00f19d17 0efcff5f     ............_...
  42fa58:	0010ffff ff31fdaf 0000e0ff bd030001     ......1.........
  42fa68:	000000a3 18500000 84888888 ddbffa05     ......P.........
  42fa78:	affddddd 00107fe4 e04eca00 0000104f     ..........N.O...
  42fa88:	effe0ec8 cf000010 ee3fe0ef 0ef8eeee     ..........?.....
  42fa98:	66768ff6 f86feb66 000010af 3fe08fcc     ..vff.o........?
  42faa8:	c8000010 65dffc0e cfee5555 ffff5fc2     .......eUU..._..
  42fab8:	572cf9ff 77770575 ffff7577 ffffff1f     ..,Wu.wwwu......
  42fac8:	2fffffff ffffffff ff0effef 01feffff     .../............
  42fad8:	11110010 feef1011 ffffff0e 2ffffffe     .............../
  42fae8:	ffffffff ff1fffff 68ffffff 88880787     ...........h....
  42faf8:	87688688 88888807 1fffff86 ffffffff     ..h.............
  42fb08:	ff2fffff dfffffff ffff0dfd 0000fdff     ../.............
  42fb18:	01000000 00000050 f81d0000 00000000     ....P...........
  42fb28:	00fddf01 1d000000 602de2ff fedf0100     ..........-`....
  42fb38:	00f7df20 00e2ff1d df71ff8f 080020fe      .........q.. ..
  42fb48:	e2fffeff 8f000000 0020feff ff080000     .......... .....
  42fb58:	000000e2 207d0000 00000000 00000000     ......} ........
  42fb68:	0b00607f 00f6efe2 ff4ff8bf 04d1ff6b     .`........O.k...
  42fb78:	10fdffff e1ff5f00 ffbf0000 ff0b00f6     ....._..........
  42fb88:	bf60ffdf f5ff14fd 4f00d1cf 001017f6     ..`........O....
  42fb98:	00006003 00001100 00000000 000000ff     .`..............
  42fba8:	ff216f00 0600f712 16ff61ff f91f60ff     .o!......a...`..
  42fbb8:	9f10ff01 01e06ff1 f60e10ff ff0180af     .....o..........
  42fbc8:	cffa0810 10ff0160 80affc06 0800aa00     ....`...........
  42fbd8:	00d07ffb f70d0000 0000f81f 07f18f00     ................
  42fbe8:	2a0091ff 9f0070ff f9ffeeff cf050000     ...*.p..........
  42fbf8:	0050fdff 44020000 00000020 00000000     ..P....D .......
  42fc08:	00000000 00a0ff0a 0c000000 0000c0ff     ................
  42fc18:	ffdfd603 0e306dfd ffffffff ff5fe0ff     .....m0......._.
  42fc28:	ffffaaff f4ff1af5 a1ff4f00 00d0ff03     .........O......
  42fc38:	0430ff0d 0f00f0ff ff4f40ff ffbf22fb     ..0......@O.."..
  42fc48:	ffff2ff4 f2ffffff fffffe09 0090efff     ./..............
  42fc58:	e5ff5e50 00000005 00c0ff0c 04000000     P^..............
  42fc68:	00004077 03000000 00410310 9f000000     w@........A.....
  42fc78:	00f50df5 fd1b0000 00f58dff b1df0200     ................
  42fc88:	00f5ff2d 3ef84f00 00f5bfc2 ff55ff07     -....O.>......U.
  42fc98:	40fe39fe ff8fe39f f66ff5ff ffff2aac     .9.@......o..*..
  42fca8:	e673ffff ffff5f00 00f1ffff d7ff6f00     ..s.._.......o..
  42fcb8:	00f2ff7f 90ff6f00 00f2ff0d 90ff6f00     .....o.......o..
  42fcc8:	00f2ff0d 70ff4f00 00e1ff0b 33000000     .....O.p.......3
  42fcd8:	00000000 b0ff0b00 00000000 00c0ff0c     ................
  42fce8:	0c000000 0000c0ff ff0c0000 000000c0     ................
  42fcf8:	c0ff0c00 8f000000 f8ffffff ff2e0000     ................
  42fd08:	00e2ffff ffef0200 000020fe e2ff2d00     ......... ...-..
  42fd18:	99790000 9928de82 fbffff97 ffffbf22     ..y...(....."...
  42fd28:	ffffffff ffffffff faffffff ccaccfb3     ................
  42fd38:	cccccccc bb0600ca 30babbbb ff4f0000     ...........0..O.
  42fd48:	e1ffffff 30ef0000 fb060000 00f80900     .......0........
  42fd58:	cf000000 00d04f50 2f000000 4284dfe1     ....PO...../...B
  42fd68:	4b340000 fdfffff9 ffff0100 fffffffb     ..4K............
  42fd78:	ffff8b98 fffffffc ffffffff fffffffc     ................
  42fd88:	ffffffff ffff9ffb ffffffff 000000f6     ................
  42fd98:	33000000 ff8d0100 00ef00c6 ffffff4e     ...3........N...
  42fda8:	ff04dfe4 ff4c00b3 00f90eff ff8f0000     ......L.........
  42fdb8:	0100c06f 8effffff de010050 0000edee     o.......P.......
  42fdc8:	00000000 22222200 21000000 10ffffff     ....."""...!....
  42fdd8:	fff80800 0010bcfb fcfff41e df010010     ................
  42fde8:	e8effec0 10fe8e44 ffff1afe fd00c1ff     ....D...........
  42fdf8:	94bb2800 00000000 02007002 ef0200ef     .(.......p......
  42fe08:	fffffffd ffffffff ffffffff ffffffff     ................
  42fe18:	4734ffff 0500f0ff 050000ff 000000c0     ..4G............
  42fe28:	70020000 02000000 000000ef 00f0ef02     ...p............
  42fe38:	ffffff0d ffff2002 1f8ef0ff 00ffffff     ..... ..........
  42fe48:	ffffffe7 ff5f3ff0 9008ffff f0ff4734     .....?_.....4G..
  42fe58:	05000000 000000ff 00c00500 00000000     ................
  42fe68:	00000000 07000000 00000070 05007002     ........p....p..
  42fe78:	000000fa 8100f02e 0200604f dd01f0ef     ........O`......
  42fe88:	ffdff007 1e32f0ff fffff680 278ef0ff     ......2........'
  42fe98:	ffffb9e0 730ef0ff ffff9bf1 543ff0ff     .......s......?T
  42fea8:	ffff9af0 0a89f0ff 4734d8c0 7f00f0ff     ..........4G....
  42feb8:	0000f343 f602f05f 0000b00c 0000c005     C..._...........
  42fec8:	000010bf 09000000 000000e3 02000000     ................
  42fed8:	88370010 88888888 ffffef73 feffffff     ..7.....s.......
  42fee8:	ffdf32fe f9ffffff fdff7f00 10fdffff     .2..............
  42fef8:	7fa0ffcf ffffffff ff0700fa a05ff3ff     .............._.
  42ff08:	ffcf0000 00000330 00fccf00 00000000     ....0...........
  42ff18:	ccccffcf ffcccccc ffffffaf 04f9ffff     ................
  42ff28:	31000030 0600e01f 00e01ff9 e01ffa7f     0..1............
  42ff38:	1ffaff09 faffafe0 ffffeb1f ffff1ffa     ................
  42ff48:	ff1ffaff 1ffaffff faffffe6 ff5fe01f     .............._.
  42ff58:	04e01ffa e01ffaff 0ffa3e00 d70200d0     .........>......
  42ff68:	00000000 00000200 0c000000 000020fb     ............. ..
  42ff78:	ffff0000 00000090 e6ffff0f ff000000     ................
  42ff88:	30fcffff ffff0f00 0091ffff ffffffff     ...0............
  42ff98:	ff0fe6ff ffffffff fffffff2 0ffdffff     ................
  42ffa8:	ffffffff ffff00f8 00b2ffff fdffff0f     ................
  42ffb8:	ff000040 0000f7ff a1ff0f00 00000000     @...............
  42ffc8:	0000406a 14000000 44012044 ffff0d42     j@......D .DB...
  42ffd8:	f1ffdf10 0ff3ffff ff3fffff ffff40ff     ..........?..@..
  42ffe8:	f4fffff4 4fffff0f ff40ffff fffff4ff     .......O..@.....
  42fff8:	ffff0ff4 40ffff4f fff4ffff ff0ff4ff     ....O..@........
  430008:	ffff4fff f4ffff40 0ff4ffff ff4fffff     .O..@.........O.
  430018:	ffff30ff c0ff9ff3 00fcff09 44444414     .0...........DDD
  430028:	ff0d4244 ffffffff fffffff1 3fffffff     DB.............?
  430038:	ffffffff fffff4ff ffffffff ffffff4f     ............O...
  430048:	fff4ffff ffffffff ffff4fff f4ffffff     .........O......
  430058:	ffffffff ff4fffff ffffffff fffffff4     ......O.........
  430068:	4fffffff ffffffff ff9ff3ff fcffffff     ...O............
  430078:	00100200 e20f4200 0ffb0300 fb0430fe     .....B.......0..
  430088:	04f4ff0f ffff0ffb ff0ffb54 0ffbfaff     ........T.......
  430098:	fbffffff ffffff0f ffff0ffb ff0ffbd6     ................
  4300a8:	0ffb14fd fb04c1ff 0400fb0f 00a00cfb     ................
  4300b8:	0000fa03 00000000 00120000 00000000     ................
  4300c8:	0060ff03 2e000000 0000f5ff ffef0100     ..`.............
  4300d8:	000040ff ffffff1d cf0000f3 feffffff     .@..............
  4300e8:	ffff0a20 e0ffffff ffffff0e 03f2ffff      ...............
  4300f8:	99999999 88055099 88888888 ffff0f70     .....P......p...
  430108:	f3ffffff ffffff0f 0bf4ffff ffffffff     ................
  430118:	0000d1ff 00000000 00903f00 00fc3f00     .........?...?..
  430128:	10fd3f00 10fd3f00 10fd3f00 10fd1f00     .?...?...?......
  430138:	f4cf0000 cf000000 000000f4 0000f4cf     ................
  430148:	00f4cf00 e0cf0000 a4000000 00000000     ................
  430158:	10cd0000 fd1f0000 3f000010 000010fd     ...........?....
  430168:	0010fd3f 10fd3f00 fd3f0000 ff080000     ?....?....?.....
  430178:	ff080090 ff080090 ff080090 ff020090     ................
  430188:	07000090 00000080 50040000 00000000     ...........P....
  430198:	0060ff02 3f000000 000000f7 70ff0300     ..`....?.......p
  4301a8:	00000000 0000f73f ff9a9906 ff8099c9     ....?...........
  4301b8:	ffffffff ffff3dff f2ffffff f73f1101     .....=........?.
  4301c8:	00001011 0070ff03 3f000000 000000f7     ......p....?....
  4301d8:	70ff0300 00000000 0000d30c 99996900     ...p.........i..
  4301e8:	0f989999 ffffffff ffdff3ff ffffffff     ................
  4301f8:	00000020 00000000 64560100 00000000      .........Vd....
  430208:	effebf03 000010f9 0310fa7f 0800e4df     ................
  430218:	b409a0ff 4f50ff1e ff0b20ff efe1ff26     ......PO. ..&...
  430228:	ffcf09ff bffaff63 ffff09ff 1ef6ff54     ....c.......T...
  430238:	fbdf51ff 03b0ff09 3004e2ef 0010fc5f     .Q.........0_...
  430248:	6a95ff2c 000090ff fddf4900 00000092     ,..j.....I......
	...
  430260:	000020cd 00000000 00f58f00 00406614     . ...........f@.
  430270:	ef040000 ffefffac 00000091 00a1ff1c     ................
  430280:	0030fe4d f59f0000 f4ef31ab 05b10700     M.0......1......
  430290:	7fe1ffff fe0f10fe f5ff2d30 0c90ff4f     ........0-..O...
  4302a0:	af00e0ff 60ff5ff6 00f4ff02 fbefff06     ....._.`........
  4302b0:	fd4f0000 ff3e0010 020000c0 0154e8df     ..O...>.......T.
  4302c0:	0000e3bf ffae0500 60ff0760 00000000     ........`..`....
  4302d0:	4e000000 000000f6 00000000 0000a101     ...N............
	...
  4302e8:	d03e0000 00000000 ff0c0000 00000080     ..>.............
  4302f8:	ff060000 000020ff ef000000 0000fbff     ..... ..........
  430308:	8f000000 00f4cffc 2f000000 d0ff00fb     .........../....
  430318:	0b000000 ff0fc0ff 04000070 ff01fdff     ........p.......
  430328:	000010ff 2fe0ffdf 0000faff 9bffff7f     ......./........
  430338:	00f3ffff b0ffff1f c0ffff0e feffff0a     ................
  430348:	ffffff24 ffffff60 ffffffff cccc06fa     $...`...........
  430358:	cccccccc 000030cb 36000000 00000000     .....0.....6....
  430368:	807f0000 0000dbdd fff8ef8d ff07b0ff     ................
  430378:	6f55fdff aff86ff4 740500e2 207e90ff     ..Uo.o.....t..~ 
  430388:	fa3f0000 00000000 50b2ef02 2e01004a     ..?........PJ...
  430398:	8ff41dfd d1ffffb0 fbffff0b 0020feff     .............. .
  4303a8:	12fbffcf 02000021 0000c09f 5b000000     ....!..........[
  4303b8:	07000000 000000a0 b0ff0800 08000000     ................
  4303c8:	00b0ffff 95ff0800 0800b0ff ff0590ff     ................
  4303d8:	90ff07b0 b0ff0500 0000909f 4000fd05     ...............@
  4303e8:	03000000 00204c10 0bb60000 000020fe     .....L ...... ..
  4303f8:	fe2ef0cf f4cf0020 20fe2e00 0000f4cf     .... ...... ....
  430408:	f4cffe2e 2e000000 0000f4ff f42e0000     ................
  430418:	00000000 00001300 30080000 00000000     ...........0....
  430428:	bf000000 bbbb08f3 0b0090bb ff39ffff     ..............9.
  430438:	00f1ffff f0cfcf8f f10a0000 942f3800     .............8/.
  430448:	0a000080 2f0000f1 00000090 0000f10a     ......./........
  430458:	0000902f 30f10a03 00902f00 f8cb1f00     /......0./......
  430468:	eb2f00f8 ff39bbbb 1f00e2ff b0ffffff     ../...9.........
  430478:	0020fd9f 00000000 00d10800 00878837     .. .........7...
  430488:	ef000000 00a0ffff ffff0000 ccccfdff     ................
  430498:	ffffffb6 ffffffff ffffffff ffffffff     ................
  4304a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4304b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4304c8:	ffafffff ffffffff 000000f9 00000000     ................
  4304d8:	dd010000 00000010 d1ff1d00 01000000     ................
  4304e8:	10fdffdf ff1d0000 00d1ffff ffff9f00     ................
  4304f8:	0000f9ff c1ff1c01 00000010 00c0ff0c     ................
  430508:	0c000000 0000c0ff ff0c0000 790000c0     ...............y
  430518:	b3ff3b99 ffff9799 ff2b44b2 feffffff     .;.......D+.....
  430528:	ffffefdd ffffffff accfb3fa cccccccc     ................
  430538:	0000cacc 02000000 00000000 ff040000     ................
  430548:	000000c7 ffaf0000 000000f0 fdff1f00     ................
  430558:	00000000 c0ffff06 00000000 00f7ff08     ................
  430568:	00000000 0030ff0c 04000000 0000c0ff     ......0.........
  430578:	ef010000 4a0000f3 f8df0230 fedf0500     .......J0.......
  430588:	00fbef15 ffffef00 0000faff ffffff0b     ................
  430598:	000000f7 a2ffff7f 02000000 000085ba     ................
  4305a8:	04000000 00000086 faff0610 d1df0200     ................
  4305b8:	01f13cef e00efadf fadf21af f6ef9f00     .<.......!......
  4305c8:	0000fadf fbffff8d 06000000 0000fdff     ................
  4305d8:	ffef4800 6f0000f6 f6fffbff cff30e00     .H.....o........
  4305e8:	00f6ff23 04f20aee fe09f6ff ff0400fc     #...............
  4305f8:	10da08f1 00620200 00000000 00000000     ......b.........
  430608:	87f9ff6f ff080000 08f798ff f9ff8fa6     o...............
  430618:	a8ff9059 ccfcffff ff8ffa0f fff1ffff     Y...............
  430628:	ffffffa8 8ffa1fff f1ffffff ffffa8ff     ................
  430638:	fa1fffff ffffff8f ffa8fff1 1fffffff     ................
  430648:	ffff7ffa e3fff0ff 21222212 ffffff0f     .........""!....
  430658:	ac0000f9 50cbcccc 99490000 00959999     .......P..I.....
  430668:	ffffff0e fd00f6ff 4f222222 00c00ff6     ........"""O....
  430678:	f3ff0100 000000fc c06fff1f ff020000     ..........o.....
  430688:	fffffff6 6fffffff ffdcffff fffff6ff     .......o........
  430698:	ffff05b0 00f6ff6f fff6ff0f ff06c0ff     ....o...........
  4306a8:	ffff6fff f6ffffed ffffff9f 0010fdff     .o..............
  4306b8:	00000000 f0ffff01 ffff0400 ff0600d0     ................
  4306c8:	080080ff 0030ffff aaffff0a ffff0ca6     ......0.........
  4306d8:	ff0ef8ff 0be1ffff 60ffdfdd fd4f0000     ...........`..O.
  4306e8:	7f000000 000000f3 0000a0bf 0010ff00     ................
  4306f8:	00f80300 c0030000 00000000 00000020     ............ ...
  430708:	b5ef5504 ff000052 b0ff1ffd ffff0f00     .U..R...........
  430718:	0000fcff 3353ffff ff0f0020 57fbff97     ......S3 ......W
  430728:	aff8ff00 0ff8c6ff fcff8aff f8ffa14a     ............J...
  430738:	22e3ffaf ff8aff0f fff4ffff ffffaff8     ..."............
  430748:	8aff4fff f4ffffff ffaf5235 0040ffff     .O......5R....@.
  430758:	ffffff0a 7f0000f4 20feffff 10010000     ........... ....
  430768:	00000000 0000af00 8f010000 000030fa     .............0..
  430778:	ffffef02 bf000050 10ffffff ffff1f00     ....P...........
  430788:	0300f5ff ffffffff ff5f0070 00f9ffff     ........p._.....
  430798:	ffffff08 df00c0ff ffffffff ffff9f20     ............ ...
  4307a8:	0efdffff ffffffff 2202f2ff 21222222     ...........""""!
  4307b8:	ff080000 000000c0 00a20900 bb5b0000     ..............[.
  4307c8:	bbbbbbbb ffffa3bb ffffffff 0cfcfbff     ................
  4307d8:	0d1de130 0bfcfc11 0d1de030 fefffc10     0.......0.......
  4307e8:	fefeefff f1fffcef a070085a f3fffc5f     ........Z.p._...
  4307f8:	c292297b bffffc7f bfbbbbcb 0bfcfccb     {)..............
  430808:	0d000020 cffffc00 cfcccccc ff9ffbcc      ...............
  430818:	ffffffff 0000f6ff 00000000 00000002     ................
  430828:	05000000 0000b0df ef070000 0000d0ff     ................
  430838:	ffff1800 000070ff ffffff29 3b0000ff     .....p..)......;
  430848:	ffffffff ff0a00f8 ffffffff ff0f00f1     ................
  430858:	ffffffff 9a0400a0 ffffafaa 00000020     ............ ...
  430868:	fbff0e00 00000000 f4ff0e00 00000000     ................
  430878:	c0ff0e00 00000000 50ff0e00 00000000     ...........P....
  430888:	00fd0d00 00000000 00b30400 55350000     ..............5U
  430898:	0f000255 f4f2ffff ffffff00 ff0ff42f     U.........../...
  4308a8:	f3fff2ff 32ffffff ffff1f22 fff7ffff     .......2".......
  4308b8:	ffffffff ffffff8f fffff8ff 8fffffff     ................
  4308c8:	ffffffff fffffff8 ff8fffff f8ffffff     ................
  4308d8:	ffffffff ffff8fff 8af8ffff aaaaaaaa     ................
  4308e8:	00000030 00315524 03000000 ffffffaf     0...$U1.........
  4308f8:	020000c7 defeffbf 00f6ffff 10b5ff5f     ............_...
  430908:	ff8e0300 00d3dfb0 00000000 0018f58f     ................
  430918:	c8feae05 00600410 ffffdf02 0000f8ff     ......`.........
  430928:	95ff0c00 40ff7d34 a2020000 77000000     ....4}.@.......w
  430938:	00000000 00960200 00000000 ff0d0000     ................
  430948:	00000050 0e000000 000060ff 00000000     P........`......
  430958:	0000da05 bb5b0000 bbbbbbbb ff20babb     ......[....... .
  430968:	ffffffff 90ffffff 222212fc 0f222222     ..........""""".
  430978:	ff5ffcf7 ffffffff 5ffcfa2c ffffffff     .._.....,.._....
  430988:	fcfa21ff ffffff5f fa27ffff 666626fc     .!.._.....'..&ff
  430998:	1f666666 bbbbfefa bbbbbbbb ffafb1bf     fff.............
  4309a8:	ffffffff 0050ffff 00000000 00000000     ......P.........
  4309b8:	bbbbbb5b babbbbbb ffffff20 ffffffff     [....... .......
  4309c8:	12fc90ff 21222222 fcf70f00 ffffff5f     ...."""!...._...
  4309d8:	fa0c00f8 ffff5ffc 0100f8ff ff5ffcfa     ....._........_.
  4309e8:	00f8ffff 26fcfa07 63666666 fefa0f00     .......&fffc....
  4309f8:	bbbbbbbb b1bfbbbb ffffffaf ffffffff     ................
  430a08:	00000050 00000000 bb5b0000 bbbbbbbb     P.........[.....
  430a18:	ff20babb ffffffff 90ffffff 222212fc     .. ...........""
  430a28:	0f000010 ff5ffcf7 0000d0ff 5ffcfa0c     ......_........_
  430a38:	00d0ffff fcfa0100 d0ffff5f fa070000     ........_.......
  430a48:	666626fc 0f000050 bbbbfefa bbbbbbbb     .&ffP...........
  430a58:	ffafb1bf ffffffff 0050ffff 00000000     ..........P.....
  430a68:	00000000 bbbbbb5b babbbbbb ffffff20     ....[....... ...
  430a78:	ffffffff 12fc90ff 00000022 fcf70f00     ........".......
  430a88:	0030ff5f fa0c0000 30ff5ffc 01000000     _.0......_.0....
  430a98:	ff5ffcfa 00000030 26fcfa07 00001066     .._.0......&f...
  430aa8:	fefa0f00 bbbbbbbb b1bfbbbb ffffffaf     ................
  430ab8:	ffffffff 00000050 00000000 bb5b0000     ....P.........[.
  430ac8:	bbbbbbbb ff20babb ffffffff 90ffffff     ...... .........
  430ad8:	000000fc 0f000000 0000fcf7 00000000     ................
  430ae8:	00fcfa0c 00000000 fcfa0100 00000000     ................
  430af8:	fa070000 000000fc 0f000000 bbbbfefa     ................
  430b08:	bbbbbbbb ffafb1bf ffffffff 0050ffff     ..............P.
	...
  430b24:	0000b207 00000000 00fadf0a 00000000     ................
  430b34:	f53da900 04000000 00e00240 00000010     ..=.....@.......
  430b44:	600bf8af 6c000000 ffffff30 ffffffff     ...`...l0.......
  430b54:	f9aff4ff 00500c00 05406d00 c0040050     ......P..m@.P...
  430b64:	00100000 00000000 00e83ec4 00000000     .........>......
  430b74:	faef2e00 00000000 4f000000 000000fa     ...........O....
	...
  430b8c:	10010000 07000000 00b3ffef 8ffdaf00     ................
  430b9c:	ff0420ff b0ff09fd 12fdfe0a f50ef0af     . ..............
  430bac:	f30e2c5d 1233ff0f ff0ff59f f6ff07f3     ],....3.........
  430bbc:	06e2ff0f fe0ff6ff f57f1324 2c7df50d     ........$.....},
  430bcc:	ff0af30d f0bf11fd 0bfeff03 7f00a0ff     ................
  430bdc:	10febffe dcac0300 00000081 00004334     ............4C..
  430bec:	ff7f6605 ff5066f9 ffffffff 666635ff     .f...fP......5ff
  430bfc:	50666666 cccccc1c ff02c4cc ffffffff     fffP............
  430c0c:	fbf32f60 02f66d7f f5b72fff f22f60df     `/...m.../...`/.
  430c1c:	f65d7ffb b72fff02 2f60dff5 5d7ffbf2     ..].../...`/...]
  430c2c:	2fff02f6 60dff5b7 7ffbf32f ff01f66d     .../...`/...m...
  430c3c:	ffffffff ccbc0750 0090cccc 00000000     ....P...........
  430c4c:	00200100 00000000 0050ff04 02000000     .. .......P.....
  430c5c:	0050ffff 39040000 0000feff 39ff0400     ..P....9.......9
  430c6c:	0000a0ff 39ffff04 040000b0 20ffffff     .......9....... 
  430c7c:	ff040000 00b0ffff ffff0400 0000b0ff     ................
  430c8c:	ffffff04 040000b0 b0ffffff bf000000     ................
  430c9c:	00b0ffff ff0d0000 0000b0ff ffff0000     ................
  430cac:	000000b0 60a80900 00000000 17000000     .......`........
  430cbc:	88888888 02004087 ffffffef 00f4ffff     .....@..........
  430ccc:	cfffff3e f7ffcfff f9ffef03 ff09f808     >...............
  430cdc:	ffff3ef8 2e4020fe ffdff8ff 01e1ffff     .>... @.........
  430cec:	9ff8ffef 80ffffff f8ff8f00 f9ffff09     ................
  430cfc:	ff09c202 ff9f00f8 4efe4efe 0900f8ff     .........N.N....
  430d0c:	ffffffff 00f7ffff ffff8f00 c1ffffff     ................
  430d1c:	00000000 ef030000 03e2ffff bfcefbfb     ................
  430d2c:	031dffa4 f1fffaa1 af1f3ad0 ffffffff     .........:......
  430d3c:	fffffffa ffafffff faffffff ffffffff     ................
  430d4c:	ffffafff fffaffff ffffffff ffffffaf     ................
  430d5c:	fffffaff adffffff ffffffff aaaa29f8     .............)..
  430d6c:	0000a8aa 00000000 00000300 00000000     ................
  430d7c:	0800f104 01000020 f70b10ff 2f000000     .... ........../
  430d8c:	94ff0cf1 ff454444 ffffff1b f1ffffff     ....DDE.........
  430d9c:	ffffff8f 00fdffff 0000f77f 00000000     ................
  430dac:	0000606f 00000000 00000030 00000000     o`......0.......

00430dbc <kern_class_values>:
  430dbc:	00000100 00000000 00000100 00000002     ................
  430dcc:	00000200 00000000 00000000 00000000     ................
  430ddc:	00010000 00000000 00000000 00000000     ................
  430dec:	000a0100 0000fb06 f3f40000 04050b02     ................
  430dfc:	010b02f7 00070209 00000000 00000000     ................
  430e0c:	020d0000 000000fe 00000000 00000000     ................
  430e1c:	f9000400 00000000 0404fc00 00fe0000     ................
  430e2c:	fe0002fe fcfffe00 00000000 fd0000fe     ................
  430e3c:	fe0000fd 0000fc00 00000000 fe000000     ................
  430e4c:	00fd00fe 00e500fa 0400fc00 fc000007     ................
  430e5c:	04070202 000004fc 000000f3 00000000     ................
  430e6c:	00000000 000000f8 00000000 00000000     ................
  430e7c:	fa000000 f700f5fd 000000fe 00090000     ................
  430e8c:	01fffef9 0000fc00 0000effe 00000000     ................
  430e9c:	00000000 09feee00 00000000 00000000     ................
  430eac:	00000000 000000f7 00000000 07000000     ................
  430ebc:	00000200 000000fc 00000000 00000000     ................
  430ecc:	00000000 02090000 00000001 00000000     ................
	...
  430efc:	000000f8 00000000 00000000 00000000     ................
  430f0c:	00000000 02000000 fe070204 fe040000     ................
  430f1c:	0602e1f9 00fd0004 00070008 00eb0007     ................
  430f2c:	070007fd 000204fe 00fe0100 0012fc00     ................
  430f3c:	00070012 07040309 f8000000 00000000     ................
  430f4c:	0200fe01 02fcfdfc 0000fe00 0000f700     ................
	...
  430f64:	0000f100 00000000 00000000 00000000     ................
  430f74:	00f40100 000000f2 1600fe00 0202fdfd     ................
  430f84:	02fd00fe 00f40000 00000000 00000000     ................
  430f94:	00ea0000 00000002 00000000 00000000     ................
  430fa4:	0d00f200 00f80000 eaf10007 0007fcf1     ................
  430fb4:	0300f100 00fd00fb 00000000 00000000     ................
  430fc4:	06000000 0000e507 00000000 00000000     ................
  430fd4:	000b0000 00000002 02020000 ff00fcfd     ................
  430fe4:	0000feff 000000fe 00fe00fc fa00fcfb     ................
  430ff4:	00fcf9f9 00fc00fc fe000000 00020000     ................
  431004:	0100fe02 02000000 000000fe ff0202fe     ................
  431014:	fc000000 0000ff00 01000000 00fe0300     ................
  431024:	00fc00fd 0700fe00 00fe0000 00000000     ................
  431034:	fefe01ff 00fe0000 000000fe 00000000     ................
  431044:	ffff0000 00fdfe00 00000000 fe000001     ................
  431054:	fefefe00 00000000 00000000 0000ff00     ................
  431064:	fdfe0000 f900fd00 0004f9fe 0402fc00     ................
  431074:	fffa0006 f5ff00fd f402fe02 01000002     ................
  431084:	fef400f4 f500feed 00060400 00000003     ................
  431094:	fc000000 00f900fd 00fe0000 00fe0000     ................
  4310a4:	00000000 ff00ffff 000000fd 00000000     ................
  4310b4:	fe00fefe 0000fefd 000000fe 00000000     ................
  4310c4:	00000000 fd00fefe fc00fe00 fd000002     ................
  4310d4:	00020201 00000000 0000fe00 02000000     ................
  4310e4:	00fe0000 00fdfefe 00000000 00020000     ................
  4310f4:	000000fe 00fdfe00 fe0700fc 0000f901     ................
  431104:	f7f4f506 fe0002fc fc00fcf1 fc03fc00     ................
  431114:	00fa00f2 02ff0100 000200fe f500f7f9     ................
  431124:	f9fbfbfb fc00fafd 010001fa 0000fe00     ................
  431134:	02000200 00000000 00000000 fe000000     ................
  431144:	ff00ff00 fbfc00fe f900fffb 00000000     ................
  431154:	00fe0000 01000000 000000ff 00000002     ................
  431164:	00000000 00000b00 00000000 00000002     ................
  431174:	000000fe 00000000 00000000 000200fc     ................
	...
  431190:	000000fe 000000fc 00f9f500 f5fd0000     ................
  4311a0:	02fe0000 0000fa00 00000000 00000000     ................
  4311b0:	fc0000fc 00000000 00000000 00000000     ................
  4311c0:	00fc0002 03000000 fcfc0200 fdfefe00     ................
  4311d0:	00000000 00f90000 fefd00fe f9fafb00     ................
  4311e0:	00fc00fe 000000f9 00001200 fd000001     ................
  4311f0:	f6000200 00000000 07fceb00 00f7fe07     ................
  431200:	f500fd02 f002fdff 030003fe f9f8fdf8     ................
  431210:	f30000f7 00000d00 000000ff fafeffff     ................
  431220:	00eb00f9 00000000 00000000 00000001     ................
	...
  43123c:	ff00fe00 0000fdfe 00fe00fc 00000000     ................
	...
  431254:	00ff0000 040000fc fb0003ff fafffe02     ................
  431264:	fefd00fe fcfd00fe fffe0000 00fdfcfe     ................
  431274:	0200fe00 00fb00fe 00fc0000 fcfc00fc     ................
  431284:	00000002 00000000 0002fc00 fdfe00fd     ................
  431294:	fefefef9 fffdfeff 00000000 fefefe00     ................
  4312a4:	00000000 fe00fe03 fe000000 fdfefefd     ................
  4312b4:	090200fe 00fa00ff fe0004fe 0003fdf7     ................
  4312c4:	02fcf500 fe0002fc fd00f9fe fc000001     ................
  4312d4:	02000000 00fcfc02 fefdfefc 01fc00fe     ................
  4312e4:	0007fcfc 00000000 00000000 00000002     ................
	...
  431308:	000000fc 00000000 00000000 00000000     ................
	...
  431334:	000000fe 00000000 00000000 00000000     ................
	...
  431350:	fefe0000 00000000 00000000 00000000     ................
  431360:	fd0000fd fefe0000 00000000 000000fe     ................
  431370:	0000ff00 fe000000 00000000 00fc00fd     ................
  431380:	00f90000 0004fb02 0000f5fe f700fefb     ................
  431390:	0000fafa f7f7fef6 00fa00f5 00fd0f02     ................
  4313a0:	fefffefb f8fcfafc 00fefbf7 0100fe00     ................
  4313b0:	fef00000 f8fb0507 00f90100 04fefef5     ................
  4313c0:	0001fdeb f4fdf100 0000f0fe 010d00f0     ................
  4313d0:	0000fe00 feff0000 f100fef7 00000000     ................
  4313e0:	00fe00f9 00f5faff f9fdff00 00fe00fe     ................
  4313f0:	f6000000 fef9f9fe fcfefafc f9fefc00     ................
  431400:	fcfd00fd 0100fcfe 00f9fe00 00fc0004     ................
  431410:	03000000 09fc0200 fdfefe00 00000000     ................
  431420:	00f90000 fefd00fe f9fafb00 02fc00fe     ................
  431430:	00000009 00001200 fd000001 00000200     ................
	...
  43144c:	0000fcfe ff000000 fe000000 fc0000fe     ................
  43145c:	fc0000fe 00ff0400 00000000 00000100     ................
  43146c:	04030000 f900fe02 f90700fc 09fcfcf9     ................
  43147c:	feed0204 fe00fe04 00f8fe02 fefd02fe     ................
  43148c:	0000fef9 fa000407 06fdf400 fd01f7fd     ................
  43149c:	09fef9f9 00fd0002 070200fa faf7f8fb     ................
  4314ac:	f0010007 fefc02fe f8fb00fb 00fefdfd     ................
  4314bc:	fefbfb00 fe050700 fdf400f4 fff3f800     ................
  4314cc:	faf9fcf9 fd000006 00fefc00 0400fcfe     ................
  4314dc:	000002f9 fbfe00f4 faf9fefc f900fbf9     ................
  4314ec:	f9fcfbfe 010000fe f900fc0b fcfe00fe     ................
  4314fc:	f7fafafb 0004fcfd fdf500fd f8f90401     ................
  43150c:	fe07f9fc 04fceb01 00f8fcfb fefdf7f9     ................
  43151c:	f9fbfefe 070000ff 00f1fe06 f705fbf3     ................
  43152c:	f7f8fcf1 0004f9f5 fd000000 fd020000     ................
  43153c:	04fc0204 fff90000 0100ff00 0000fe01     ................
  43154c:	00000000 000000fe 00070200 0000fd00     ................
  43155c:	fefe0000 000000fd 00000201 00020000     ................
  43156c:	000900fe fd010104 00000400 00000200     ................
	...
  431584:	06000700 00000000 00000000 00000000     ................
  431594:	00f30000 070004fe 03160000 0202fcfc     ................
  4315a4:	00f501fe 00f30b00 00000000 00000000     ................
  4315b4:	09f10000 0000001f 00000000 00000000     ................
  4315c4:	0000f300 00000000 00000000 00000000     ................
	...
  4315e0:	fc0000fc 000000fe 00000000 00000000     ................
	...
  4315f8:	00fa00fe 00000100 fefc1d02 02fa0607     ................
  431608:	02020000 000000fd 00000000 00000000     ................
  431618:	000006e3 00000000 00000000 00000000     ................
  431628:	fa000000 fa000000 00000000 0000fffb     ................
  431638:	fd00fb00 0000f500 00000000 00000000     ................
  431648:	0000f100 00010000 00000000 0000fe00     ................
  431658:	00fd00fc 000000fa 00fd02fc fbfefa00     ................
  431668:	00fa0000 00f500fe ee0000fe f8fef7fc     ................
  431678:	00f10000 0000fffa 00000000 fcfd0000     ................
  431688:	0000fcfe 00fb0000 04fe03fb fefbfe00     ................
  431698:	fd00fcfc fa02feff 000000ff 00fdfeec     ................
  4316a8:	f5fe00fb fe0000fe 000000fe fe000200     ................
  4316b8:	0004fefc 00000000 00000000 00000000     ................
	...
  4316e4:	00030000 00000000 fe00fb00 fc000000     ................
  4316f4:	00000002 00fcfefa fe00fa00 0000f500     ................
  431704:	00ea0000 00f5f8fc fe00f100 000000fd     ................
  431714:	00000000 fffdfe00 000001fd 0700fd04     ................
  431724:	f9fefe0b 05040b03 030903fa 00060506     ................
	...
  43173c:	0b0e0000 fe00fefc 00120a12 00020000     ................
  43174c:	00000800 000000fc 00000000 00fe0000     ................
  43175c:	00000000 03000000 00000000 f7fefded     ................
  43176c:	f10000f5 00000000 00000000 00000000     ................
  43177c:	00000000 0000fc00 00000000 fe000000     ................
	...
  431794:	00000003 fefded00 0000f5f7 000000f7     ................
	...
  4317b4:	000000fe fe0002fb f9020402 02fe0000     ................
  4317c4:	00000200 00fa0000 00fcfefe 0e00f7fe     ................
  4317d4:	fefb00fe 00fcfe00 fdfcfafe fc000000     ................
	...
  4317ec:	0000fe00 00000000 00030000 ed000000     ................
  4317fc:	f5f7fefd 00f10000 00000000 00000b00     ................
	...
  431814:	fdf900fc fefe07fe 01ff01f7 0500fafe     ................
  431824:	02010200 00fdf7fb f7fafcf7 fcfc00f7     ................
  431834:	fefefdfd fe00fefd 030003ff 000700fe     ................
	...
  43184c:	fe000000 0000fefe 00ff00fa 000000fc     ................
	...
  431864:	000000f3 00000000 00000000 fd00fefe     ................
  431874:	00000000 fc0000fe fc0002fe fa00fefc     ................
  431884:	fdfefbfe 0000fc00 00000000 00000000     ................
  431894:	0700f100 00fc0000 fd000000 0000fe00     ................
  4318a4:	fe0000ff 0000fb00 f9f9fd09 00020202     ................
  4318b4:	020302fa fe070207 f70000fa faf90000     ................
  4318c4:	00fc0000 fd00fcfd fe00fd00 f9fe0003     ................
  4318d4:	000008fe 00fc00fe 00fb0300 0002fe02     ................
  4318e4:	fe00f900 02fe00ff 000000fe 00fbfdf7     ................
  4318f4:	f50000f9 00fe0800 000100fc f9fe00fe     ................
  431904:	0002fe00 fe000000 fd020000 fd000001     ................
  431914:	00fd00fe 00000000 00000000 00000000     ................
  431924:	00000000 000500f2 0000fe00 00000000     ................
  431934:	0000fefe 05000400 00000000 01f3f200     ................
  431944:	f704070a 08000902 00000400 00000000     ................
  431954:	00000000 00000c00 00000000 00000000     ................
	...

0043196c <kern_classes>:
  43196c:	00430dbc 0043197c 00431a18 0000313d     ..C.|.C...C.=1..

0043197c <kern_left_class_mapping>:
  43197c:	02010000 05040300 08070602 0a090a09     ................
  43198c:	0d000c0b 11100f0e 140c1312 00000014     ................
  43199c:	18171615 1b1a1619 1e1d1d1c 1d1d201f     ............. ..
  4319ac:	23222116 251e2403 28272625 002b2a29     .!"#.$.%%&'()*+.
  4319bc:	2e2d002c 3231302f 34342d33 2d2d3035     ,.-./0123-4450--
  4319cc:	37362e2e 3a333938 3c3a3b3a 09000029     ..67893::;:<)...
  4319dc:	0000093d 00000000 00000000 00000000     =...............
	...

00431a18 <kern_right_class_mapping>:
  431a18:	02010000 05040300 08070602 0a090a09     ................
  431a28:	0e0d0c0b 0c11100f 15141312 00000015     ................
  431a38:	19181716 19191917 1a191917 19191919     ................
  431a48:	19171917 1d1c1b03 201f1e1d 00232221     ........... !"#.
  431a58:	26250024 00272727 29282627 2a2a2626     $.%&'''.'&()&&**
  431a68:	2a272a27 2e2d2c2b 302e2f2e 09230000     '*'*+,-../.0..#.
  431a78:	00000931 00000000 00000000 00000000     1...............
	...

00431ab4 <unicode_list_1>:
  431ab4:	1f720000 ef58ef51 ef5cef5b ef61ef5d     ..r.Q.X.[.\.].a.
  431ac4:	ef65ef63 ef6cef69 ef76ef71 ef78ef77     c.e.i.l.q.v.w.x.
  431ad4:	ef98ef8e ef9cef9b efa1ef9d efa3efa2     ................
  431ae4:	efb7efa4 efbeefb8 efc1efc0 efc7efc4     ................
  431af4:	efc9efc8 efe3efcb f014efe5 f017f015     ................
  431b04:	f03af037 f06cf043 f0abf074 f190f13b     7.:.C.l.t...;...
  431b14:	f192f191 f194f193 f1e3f1d7 f254f23d     ............=.T.
  431b24:	f712f4aa 0000f7f2 0000ffff              ............

00431b30 <lv_anim_path_def>:
  431b30:	00416061 00000000 0000ffff              a`A.........

00431b3c <hex.5775>:
  431b3c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  431b4c:	00000000                                ....

00431b50 <sin0_90_table>:
  431b50:	023c0000 06b30478 0b2808ee 0f990d61     ..<.x.....(.a...
  431b60:	140611d0 186c163a 1ccb1a9d 21211ef7     ....:.l.......!!
  431b70:	256c2348 29ac278e 2ddf2bc7 32032ff3     H#l%.'.).+.-./.2
  431b80:	36183410 3a1c381c 3e0e3c17 41ec3fff     .4.6.8.:.<.>.?.A
  431b90:	45b643d4 496a4793 4d084b3c 508d4ecd     .C.E.GjI<K.M.N.P
  431ba0:	53f95246 574b55a5 5a8258ea 5d9c5c13     FR.S.UKW.X.Z.\.]
  431bb0:	609a5f1f 6379620d 663964dd 68d9678d     ._.`.byc.d9f.g.h
  431bc0:	6b596a1d 6db76c8c 6ff36ed9 720c7104     .jYk.l.m.n.o.q.r
  431bd0:	7401730b 75d274ee 777f76ad 79067847     .s.t.t.u.v.wGx.y
  431be0:	7a6779bb 7ba27b0a 7cb77c32 7da57d33     .ygz.{.{2|.|3}.}
  431bf0:	7e6c7e0d 7f0b7ec0 7f827f4b 7fd27faf     .~l~.~..K.......
  431c00:	7ffa7feb 00007fff 2074754f 6d20666f     ........Out of m
  431c10:	726f6d65 63202c79 74276e61 6c6c6120     emory, can't all
  431c20:	7461636f 20612065 2077656e 66667562     ocate a new buff
  431c30:	28207265 72636e69 65736165 756f7920     er (increase you
  431c40:	564c2072 4d454d5f 5a49535f 65682f45     r LV_MEM_SIZE/he
  431c50:	73207061 29657a69 00000000 66206f4e     ap size)....No f
  431c60:	20656572 66667562 202e7265 72636e49     ree buffer. Incr
  431c70:	65736165 5f564c20 5f4d454d 5f465542     ease LV_MEM_BUF_
  431c80:	5f58414d 2e4d554e 00000000 3b2e2c20     MAX_NUM..... ,.;
  431c90:	005f2d3a 0000ffff 00001084 000018c6     :-_.............
  431ca0:	008c80ef 625f766c 00006e74 635f766c     ....lv_btn..lv_c
  431cb0:	74726168 00000000 635f766c 00746e6f     hart....lv_cont.
  431cc0:	675f766c 65677561 00000000 695f766c     lv_gauge....lv_i
  431cd0:	0000676d 74786554 00000000 6c5f766c     mg..Text....lv_l
  431ce0:	6c656261 00000000 6c5f766c 6d656e69     abel....lv_linem
  431cf0:	72657465 00000000 0000ffff 0001c200     eter............
  431d00:	000000c0 00000800 00000000 000007e5     ................
  431d10:	00000004 00000013 0000000c 0000000d     ................
  431d20:	00000027 00000001 67676f54 0a64656c     '.......Toggled.
  431d30:	00000000                                ....

00431d34 <ecg>:
  431d34:	0000050a 00000508 00000506 00000505     ................
  431d44:	00000503 00000501 00000500 000004fe     ................
  431d54:	000004fc 000004fb 000004f9 000004f8     ................
  431d64:	000004f6 000004f5 000004f3 000004f2     ................
  431d74:	000004f1 000004ef 000004ee 000004ed     ................
  431d84:	000004eb 000004ea 000004e9 000004e7     ................
  431d94:	000004e6 000004e5 000004e3 000004e2     ................
  431da4:	000004e1 000004e0 000004df 000004de     ................
  431db4:	000004dd 000004dc 000004db 000004da     ................
  431dc4:	000004d9 000004d8 000004d8 000004d7     ................
  431dd4:	000004d7 000004d6 000004d6 000004d5     ................
  431de4:	000004d5 000004d5 000004d4 000004d4     ................
  431df4:	000004d4 000004d4 000004d3 000004d3     ................
  431e04:	000004d3 000004d3 000004d2 000004d2     ................
  431e14:	000004d1 000004d1 000004d0 000004d0     ................
  431e24:	000004cf 000004ce 000004cd 000004cc     ................
  431e34:	000004cb 000004ca 000004c8 000004c7     ................
  431e44:	000004c6 000004c4 000004c3 000004c2     ................
  431e54:	000004c1 000004bf 000004be 000004bd     ................
  431e64:	000004bc 000004bb 000004ba 000004b9     ................
  431e74:	000004b8 000004b8 000004b7 000004b7     ................
  431e84:	000004b6 000004b6 000004b6 000004b6     ................
  431e94:	000004b6 000004b6 000004b6 000004b6     ................
  431ea4:	000004b6 000004b6 000004b6 000004b6     ................
  431eb4:	000004b6 000004b5 000004b5 000004b5     ................
  431ec4:	000004b5 000004b5 000004b4 000004b4     ................
  431ed4:	000004b3 000004b2 000004b2 000004b1     ................
  431ee4:	000004b0 000004af 000004ae 000004ad     ................
  431ef4:	000004ad 000004ab 000004aa 000004a9     ................
  431f04:	000004a8 000004a7 000004a6 000004a5     ................
  431f14:	000004a3 000004a2 000004a1 000004a0     ................
  431f24:	0000049f 0000049d 0000049c 0000049b     ................
  431f34:	0000049a 00000498 00000497 00000496     ................
  431f44:	00000495 00000493 00000492 00000491     ................
  431f54:	00000490 0000048e 0000048d 0000048c     ................
  431f64:	0000048b 0000048a 00000489 00000487     ................
  431f74:	00000486 00000485 00000484 00000483     ................
  431f84:	00000482 00000480 0000047f 0000047e     ............~...
  431f94:	0000047c 0000047b 00000479 00000478     |...{...y...x...
  431fa4:	00000476 00000474 00000472 00000470     v...t...r...p...
  431fb4:	0000046e 0000046c 00000469 00000467     n...l...i...g...
  431fc4:	00000464 00000462 0000045f 0000045c     d...b..._...\...
  431fd4:	00000459 00000456 00000453 00000450     Y...V...S...P...
  431fe4:	0000044d 00000449 00000446 00000443     M...I...F...C...
  431ff4:	0000043f 0000043c 00000438 00000435     ?...<...8...5...
  432004:	00000431 0000042e 0000042a 00000427     1.......*...'...
  432014:	00000423 00000420 0000041c 00000418     #... ...........
  432024:	00000415 00000411 0000040d 00000409     ................
  432034:	00000405 00000401 000003fd 000003f9     ................
  432044:	000003f5 000003f1 000003ec 000003e8     ................
  432054:	000003e4 000003df 000003da 000003d6     ................
  432064:	000003d1 000003cc 000003c7 000003c2     ................
  432074:	000003bd 000003b8 000003b3 000003ad     ................
  432084:	000003a8 000003a2 0000039d 00000397     ................
  432094:	00000391 0000038b 00000385 0000037f     ................
  4320a4:	00000379 00000373 0000036d 00000366     y...s...m...f...
  4320b4:	00000360 00000359 00000353 0000034c     `...Y...S...L...
  4320c4:	00000346 0000033f 00000339 00000332     F...?...9...2...
  4320d4:	0000032b 00000325 0000031e 00000318     +...%...........
  4320e4:	00000311 0000030b 00000305 000002fe     ................
  4320f4:	000002f8 000002f2 000002ec 000002e6     ................
  432104:	000002e1 000002db 000002d5 000002d0     ................
  432114:	000002ca 000002c5 000002bf 000002ba     ................
  432124:	000002b5 000002af 000002aa 000002a5     ................
  432134:	000002a0 0000029a 00000295 00000290     ................
  432144:	0000028a 00000285 00000280 0000027a     ............z...
  432154:	00000275 00000270 0000026a 00000265     u...p...j...e...
  432164:	0000025f 0000025a 00000254 0000024e     _...Z...T...N...
  432174:	00000249 00000243 0000023d 00000237     I...C...=...7...
  432184:	00000232 0000022c 00000226 00000220     2...,...&... ...
  432194:	0000021a 00000214 0000020e 00000208     ................
  4321a4:	00000202 000001fc 000001f6 000001ef     ................
  4321b4:	000001e9 000001e3 000001dd 000001d7     ................
  4321c4:	000001d0 000001ca 000001c4 000001be     ................
  4321d4:	000001b8 000001b2 000001ab 000001a5     ................
  4321e4:	0000019f 00000199 00000193 0000018d     ................
  4321f4:	00000187 00000182 0000017c 00000176     ........|...v...
  432204:	00000170 0000016b 00000165 00000160     p...k...e...`...
  432214:	0000015b 00000155 00000150 0000014b     [...U...P...K...
  432224:	00000146 00000142 0000013d 00000138     F...B...=...8...
  432234:	00000134 00000130 0000012c 00000128     4...0...,...(...
  432244:	00000124 00000120 0000011c 00000119     $... ...........
  432254:	00000115 00000112 0000010e 0000010a     ................
  432264:	00000107 00000103 00000100 000000fc     ................
  432274:	000000f8 000000f4 000000f0 000000ec     ................
  432284:	000000e8 000000e3 000000df 000000da     ................
  432294:	000000d5 000000d0 000000cb 000000c6     ................
  4322a4:	000000c0 000000bb 000000b6 000000b0     ................
  4322b4:	000000ab 000000a6 000000a1 0000009c     ................
  4322c4:	00000097 00000093 0000008e 0000008a     ................
  4322d4:	00000086 00000082 0000007e 0000007b     ........~...{...
  4322e4:	00000078 00000075 00000073 00000070     x...u...s...p...
  4322f4:	0000006e 0000006c 0000006a 00000068     n...l...j...h...
  432304:	00000066 00000064 00000062 00000060     f...d...b...`...
  432314:	0000005e 0000005d 0000005b 00000059     ^...]...[...Y...
  432324:	00000057 00000055 00000052 00000050     W...U...R...P...
  432334:	0000004e 0000004b 00000048 00000046     N...K...H...F...
  432344:	00000043 00000040 0000003d 0000003b     C...@...=...;...
  432354:	00000038 00000035 00000032 00000030     8...5...2...0...
  432364:	0000002d 0000002b 00000029 00000026     -...+...)...&...
  432374:	00000024 00000023 00000021 0000001f     $...#...!.......
  432384:	0000001e 0000001d 0000001c 0000001b     ................
  432394:	0000001a 00000019 00000019 00000018     ................
  4323a4:	00000017 00000017 00000016 00000016     ................
  4323b4:	00000015 00000015 00000014 00000013     ................
  4323c4:	00000012 00000012 00000011 0000000f     ................
  4323d4:	0000000e 0000000d 0000000c 0000000a     ................
  4323e4:	00000009 00000007 00000006 00000005     ................
  4323f4:	00000004 00000003 00000002 00000001     ................
	...
  43241c:	00000001 00000002 00000004 00000005     ................
  43242c:	00000007 00000009 0000000b 0000000e     ................
  43243c:	00000010 00000013 00000016 00000019     ................
  43244c:	0000001b 0000001e 00000021 00000024     ........!...$...
  43245c:	00000027 0000002a 0000002c 0000002f     '...*...,.../...
  43246c:	00000031 00000033 00000036 00000038     1...3...6...8...
  43247c:	00000039 0000003b 0000003d 0000003f     9...;...=...?...
  43248c:	00000040 00000042 00000043 00000045     @...B...C...E...
  43249c:	00000046 00000048 0000004a 0000004b     F...H...J...K...
  4324ac:	0000004d 0000004f 00000051 00000053     M...O...Q...S...
  4324bc:	00000056 00000058 0000005b 0000005d     V...X...[...]...
  4324cc:	00000060 00000063 00000066 00000069     `...c...f...i...
  4324dc:	0000006c 00000070 00000073 00000076     l...p...s...v...
  4324ec:	00000079 0000007c 00000080 00000083     y...|...........
  4324fc:	00000086 00000089 0000008c 0000008f     ................
  43250c:	00000091 00000094 00000097 00000099     ................
  43251c:	0000009b 0000009e 000000a0 000000a2     ................
  43252c:	000000a4 000000a6 000000a8 000000aa     ................
  43253c:	000000ac 000000ae 000000b0 000000b3     ................
  43254c:	000000b5 000000b7 000000ba 000000bc     ................
  43255c:	000000bf 000000c1 000000c4 000000c7     ................
  43256c:	000000ca 000000cd 000000d0 000000d3     ................
  43257c:	000000d7 000000da 000000dd 000000e1     ................
  43258c:	000000e4 000000e8 000000eb 000000ef     ................
  43259c:	000000f2 000000f6 000000f9 000000fc     ................
  4325ac:	00000100 00000103 00000106 00000109     ................
  4325bc:	0000010d 00000110 00000113 00000116     ................
  4325cc:	00000119 0000011c 00000120 00000123     ........ ...#...
  4325dc:	00000126 0000012a 0000012d 00000130     &...*...-...0...
  4325ec:	00000134 00000138 0000013b 0000013f     4...8...;...?...
  4325fc:	00000143 00000147 0000014b 0000014f     C...G...K...O...
  43260c:	00000154 00000158 0000015d 00000161     T...X...]...a...
  43261c:	00000166 0000016b 0000016f 00000174     f...k...o...t...
  43262c:	00000179 0000017d 00000182 00000187     y...}...........
  43263c:	0000018b 00000190 00000195 00000199     ................
  43264c:	0000019e 000001a2 000001a6 000001aa     ................
  43265c:	000001ae 000001b3 000001b7 000001bb     ................
  43266c:	000001bf 000001c3 000001c7 000001cb     ................
  43267c:	000001cf 000001d3 000001d7 000001db     ................
  43268c:	000001df 000001e3 000001e8 000001ec     ................
  43269c:	000001f0 000001f5 000001fa 000001ff     ................
  4326ac:	00000203 00000208 0000020d 00000212     ................
  4326bc:	00000217 0000021d 00000222 00000227     ........"...'...
  4326cc:	0000022c 00000231 00000236 0000023c     ,...1...6...<...
  4326dc:	00000241 00000246 0000024b 00000250     A...F...K...P...
  4326ec:	00000254 00000259 0000025e 00000262     T...Y...^...b...
  4326fc:	00000267 0000026b 00000270 00000274     g...k...p...t...
  43270c:	00000278 0000027d 00000281 00000285     x...}...........
  43271c:	00000289 0000028e 00000292 00000296     ................
  43272c:	0000029a 0000029f 000002a3 000002a7     ................
  43273c:	000002ac 000002b0 000002b5 000002b9     ................
  43274c:	000002be 000002c3 000002c7 000002cc     ................
  43275c:	000002d1 000002d6 000002db 000002e0     ................
  43276c:	000002e5 000002ea 000002ef 000002f4     ................
  43277c:	000002f9 000002fe 00000303 00000309     ................
  43278c:	0000030e 00000313 00000318 0000031d     ................
  43279c:	00000323 00000328 0000032d 00000333     #...(...-...3...
  4327ac:	00000338 0000033d 00000343 00000348     8...=...C...H...
  4327bc:	0000034d 00000353 00000358 0000035d     M...S...X...]...
  4327cc:	00000363 00000368 0000036e 00000373     c...h...n...s...
  4327dc:	00000379 0000037e 00000384 00000389     y...~...........
  4327ec:	0000038f 00000394 0000039a 0000039f     ................
  4327fc:	000003a5 000003aa 000003b0 000003b5     ................
  43280c:	000003bb 000003c0 000003c6 000003cb     ................
  43281c:	000003d1 000003d6 000003dc 000003e1     ................
  43282c:	000003e6 000003ec 000003f1 000003f7     ................
  43283c:	000003fc 00000401 00000407 0000040c     ................
  43284c:	00000411 00000416 0000041c 00000421     ............!...
  43285c:	00000426 0000042c 00000431 00000436     &...,...1...6...
  43286c:	0000043c 00000441 00000446 0000044c     <...A...F...L...
  43287c:	00000451 00000457 0000045c 00000462     Q...W...\...b...
  43288c:	00000467 0000046d 00000472 00000478     g...m...r...x...
  43289c:	0000047e 00000483 00000489 0000048f     ~...............
  4328ac:	00000494 0000049a 000004a0 000004a6     ................
  4328bc:	000004ab 000004b1 000004b7 000004bd     ................
  4328cc:	000004c3 000004c8 000004ce 000004d4     ................
  4328dc:	000004da 000004df 000004e5 000004eb     ................
  4328ec:	000004f1 000004f7 000004fc 00000502     ................
  4328fc:	00000508 0000050e 00000514 0000051a     ................
  43290c:	00000520 00000526 0000052c 00000532      ...&...,...2...
  43291c:	00000538 0000053e 00000544 0000054b     8...>...D...K...
  43292c:	00000551 00000557 0000055d 00000564     Q...W...]...d...
  43293c:	0000056a 00000571 00000577 0000057e     j...q...w...~...
  43294c:	00000584 0000058b 00000592 00000598     ................
  43295c:	0000059f 000005a6 000005ac 000005b3     ................
  43296c:	000005ba 000005c1 000005c8 000005cf     ................
  43297c:	000005d6 000005dd 000005e4 000005ec     ................
  43298c:	000005f3 000005fa 00000601 00000609     ................
  43299c:	00000610 00000617 0000061f 00000626     ............&...
  4329ac:	0000062e 00000635 0000063d 00000644     ....5...=...D...
  4329bc:	0000064c 00000653 0000065b 00000663     L...S...[...c...
  4329cc:	0000066a 00000672 0000067a 00000681     j...r...z.......
  4329dc:	00000689 00000691 00000699 000006a1     ................
  4329ec:	000006a9 000006b1 000006b9 000006c1     ................
  4329fc:	000006c9 000006d1 000006d9 000006e1     ................
  432a0c:	000006ea 000006f2 000006fb 00000703     ................
  432a1c:	0000070c 00000715 0000071d 00000726     ............&...
  432a2c:	0000072f 00000738 00000740 00000749     /...8...@...I...
  432a3c:	00000752 0000075b 00000764 0000076d     R...[...d...m...
  432a4c:	00000775 0000077e 00000787 00000790     u...~...........
  432a5c:	00000798 000007a1 000007aa 000007b2     ................
  432a6c:	000007bb 000007c3 000007cc 000007d4     ................
  432a7c:	000007dc 000007e5 000007ed 000007f6     ................
  432a8c:	000007fe 00000806 0000080f 00000817     ................
  432a9c:	00000820 00000829 00000831 0000083a      ...)...1...:...
  432aac:	00000843 0000084c 00000855 0000085e     C...L...U...^...
  432abc:	00000867 00000870 00000879 00000883     g...p...y.......
  432acc:	0000088c 00000895 0000089e 000008a7     ................
  432adc:	000008b0 000008b9 000008c2 000008cb     ................
  432aec:	000008d3 000008dc 000008e4 000008ec     ................
  432afc:	000008f4 000008fc 00000903 0000090a     ................
  432b0c:	00000911 00000918 0000091f 00000925     ............%...
  432b1c:	0000092b 00000931 00000937 0000093d     +...1...7...=...
  432b2c:	00000943 00000949 0000094e 00000954     C...I...N...T...
  432b3c:	00000959 0000095f 00000964 0000096a     Y..._...d...j...
  432b4c:	0000096f 00000974 0000097a 0000097f     o...t...z.......
  432b5c:	00000985 0000098b 00000990 00000996     ................
  432b6c:	0000099b 000009a1 000009a6 000009ac     ................
  432b7c:	000009b1 000009b7 000009bc 000009c1     ................
  432b8c:	000009c6 000009cb 000009cf 000009d4     ................
  432b9c:	000009d8 000009dc 000009e0 000009e4     ................
  432bac:	000009e8 000009eb 000009ee 000009f1     ................
  432bbc:	000009f4 000009f7 000009f9 000009fb     ................
  432bcc:	000009fe 00000a00 00000a02 00000a03     ................
  432bdc:	00000a05 00000a07 00000a08 00000a0a     ................
  432bec:	00000a0b 00000a0c 00000a0d 00000a0e     ................
  432bfc:	00000a0f 00000a10 00000a11 00000a12     ................
  432c0c:	00000a13 00000a14 00000a14 00000a15     ................
  432c1c:	00000a16 00000a16 00000a16 00000a17     ................
  432c2c:	00000a17 00000a17 00000a17 00000a17     ................
  432c3c:	00000a16 00000a16 00000a16 00000a15     ................
  432c4c:	00000a15 00000a14 00000a13 00000a12     ................
  432c5c:	00000a11 00000a10 00000a0f 00000a0e     ................
  432c6c:	00000a0c 00000a0b 00000a09 00000a08     ................
  432c7c:	00000a06 00000a04 00000a02 00000a01     ................
  432c8c:	000009ff 000009fc 000009fa 000009f8     ................
  432c9c:	000009f6 000009f4 000009f1 000009ef     ................
  432cac:	000009ec 000009ea 000009e7 000009e5     ................
  432cbc:	000009e2 000009e0 000009dd 000009db     ................
  432ccc:	000009d8 000009d6 000009d3 000009d1     ................
  432cdc:	000009ce 000009cc 000009c9 000009c7     ................
  432cec:	000009c4 000009c2 000009c0 000009be     ................
  432cfc:	000009bc 000009b9 000009b7 000009b5     ................
  432d0c:	000009b3 000009b1 000009af 000009ad     ................
  432d1c:	000009ab 000009a9 000009a7 000009a5     ................
  432d2c:	000009a3 000009a1 0000099f 0000099d     ................
  432d3c:	0000099b 00000999 00000997 00000995     ................
  432d4c:	00000993 00000991 0000098f 0000098d     ................
  432d5c:	0000098b 00000989 00000987 00000985     ................
  432d6c:	00000983 00000981 0000097f 0000097d     ............}...
  432d7c:	0000097b 00000979 00000977 00000975     {...y...w...u...
  432d8c:	00000973 00000971 0000096f 0000096d     s...q...o...m...
  432d9c:	0000096b 00000969 00000967 00000965     k...i...g...e...
  432dac:	00000963 00000961 0000095f 0000095d     c...a..._...]...
  432dbc:	0000095c 0000095a 00000958 00000956     \...Z...X...V...
  432dcc:	00000955 00000953 00000952 00000950     U...S...R...P...
  432ddc:	0000094f 0000094d 0000094c 0000094a     O...M...L...J...
  432dec:	00000949 00000948 00000947 00000946     I...H...G...F...
  432dfc:	00000945 00000943 00000942 00000941     E...C...B...A...
  432e0c:	00000941 00000940 0000093f 0000093e     A...@...?...>...
  432e1c:	0000093e 0000093d 0000093d 0000093c     >...=...=...<...
  432e2c:	0000093c 0000093b 0000093b 0000093a     <...;...;...:...
  432e3c:	00000939 00000938 00000937 00000936     9...8...7...6...
  432e4c:	00000935 00000934 00000932 00000930     5...4...2...0...
  432e5c:	0000092e 0000092c 00000929 00000927     ....,...)...'...
  432e6c:	00000924 00000920 0000091d 00000919     $... ...........
  432e7c:	00000915 00000910 0000090b 00000906     ................
  432e8c:	00000901 000008fc 000008f6 000008f0     ................
  432e9c:	000008ea 000008e4 000008de 000008d8     ................
  432eac:	000008d1 000008cb 000008c5 000008be     ................
  432ebc:	000008b8 000008b2 000008ac 000008a6     ................
  432ecc:	000008a0 0000089a 00000894 0000088f     ................
  432edc:	00000889 00000884 0000087e 00000879     ........~...y...
  432eec:	00000873 0000086d 00000868 00000862     s...m...h...b...
  432efc:	0000085c 00000856 00000850 0000084a     \...V...P...J...
  432f0c:	00000844 0000083d 00000837 00000830     D...=...7...0...
  432f1c:	00000829 00000821 0000081a 00000812     )...!...........
  432f2c:	0000080a 00000802 000007fa 000007f2     ................
  432f3c:	000007eb 000007e4 000007dd 000007d7     ................
  432f4c:	000007d2 000007cd 000007c9 000007c6     ................
  432f5c:	000007c3 000007c2 000007c2 000007c3     ................
  432f6c:	000007c5 000007c8 000007cd 000007d3     ................
  432f7c:	000007da 000007e2 000007eb 000007f6     ................
  432f8c:	00000802 0000080f 0000081e 0000082e     ................
  432f9c:	0000083f 00000851 00000865 0000087a     ?...Q...e...z...
  432fac:	00000890 000008a7 000008c0 000008da     ................
  432fbc:	000008f4 00000910 0000092d 0000094c     ........-...L...
  432fcc:	0000096b 0000098b 000009ad 000009cf     k...............
  432fdc:	000009f3 00000a17 00000a3c 00000a63     ........<...c...
  432fec:	00000a8a 00000ab2 00000adb 00000b05     ................
  432ffc:	00000b2f 00000b5b 00000b86 00000bb3     /...[...........
  43300c:	00000be0 00000c0d 00000c3b 00000c69     ........;...i...
  43301c:	00000c97 00000cc6 00000cf5 00000d23     ............#...
  43302c:	00000d51 00000d80 00000dad 00000ddb     Q...............
  43303c:	00000e07 00000e33 00000e5e 00000e87     ....3...^.......
  43304c:	00000eaf 00000ed5 00000ef9 00000f1c     ................
  43305c:	00000f3c 00000f5a 00000f76 00000f8f     <...Z...v.......
  43306c:	00000fa6 00000fbb 00000fcd 00000fdc     ................
  43307c:	00000fe8 00000ff2 00000ff9 00000ffd     ................
  43308c:	00000fff 00000ffd 00000ff9 00000ff1     ................
  43309c:	00000fe8 00000fdb 00000fcb 00000fb9     ................
  4330ac:	00000fa4 00000f8d 00000f73 00000f57     ........s...W...
  4330bc:	00000f38 00000f17 00000ef3 00000ecd     8...............
  4330cc:	00000ea6 00000e7c 00000e50 00000e23     ....|...P...#...
  4330dc:	00000df3 00000dc3 00000d91 00000d5d     ............]...
  4330ec:	00000d29 00000cf4 00000cbd 00000c86     )...............
  4330fc:	00000c4e 00000c16 00000bdd 00000ba4     N...............
  43310c:	00000b6b 00000b31 00000af8 00000ac0     k...1...........
  43311c:	00000a87 00000a4f 00000a18 000009e1     ....O...........
  43312c:	000009ab 00000976 00000942 0000090e     ....v...B.......
  43313c:	000008dc 000008ac 0000087c 0000084e     ........|...N...
  43314c:	00000821 000007f6 000007cc 000007a4     !...............
  43315c:	0000077d 00000758 00000734 00000712     }...X...4.......
  43316c:	000006f1 000006d2 000006b4 00000698     ................
  43317c:	0000067e 00000664 0000064d 00000636     ~...d...M...6...
  43318c:	00000621 0000060e 000005fb 000005ea     !...............
  43319c:	000005da 000005cc 000005be 000005b2     ................
  4331ac:	000005a7 0000059e 00000595 0000058e     ................
  4331bc:	00000588 00000583 0000057e 0000057b     ........~...{...
  4331cc:	00000579 00000577 00000576 00000576     y...w...v...v...
  4331dc:	00000576 00000577 00000579 0000057b     v...w...y...{...
  4331ec:	0000057e 00000582 00000585 0000058a     ~...............
  4331fc:	0000058e 00000593 00000598 0000059e     ................
  43320c:	000005a3 000005a9 000005af 000005b5     ................
  43321c:	000005bb 000005c1 000005c7 000005cd     ................
  43322c:	000005d3 000005d9 000005df 000005e5     ................
  43323c:	000005eb 000005f0 000005f6 000005fb     ................
  43324c:	00000600 00000604 00000609 0000060d     ................
  43325c:	00000611 00000615 00000618 0000061c     ................
  43326c:	0000061f 00000621 00000624 00000626     ....!...$...&...
  43327c:	00000628 00000629 0000062b 0000062c     (...)...+...,...
  43328c:	0000062d 0000062d 0000062e 0000062e     -...-...........
  43329c:	0000062e 0000062e 0000062d 0000062c     ........-...,...
  4332ac:	0000062c 0000062b 0000062a 00000628     ,...+...*...(...
  4332bc:	00000627 00000625 00000623 00000621     '...%...#...!...
  4332cc:	0000061f 0000061d 0000061b 00000618     ................
  4332dc:	00000616 00000613 00000610 0000060d     ................
  4332ec:	0000060a 00000606 00000603 000005ff     ................
  4332fc:	000005fc 000005f8 000005f4 000005f1     ................
  43330c:	000005ed 000005e9 000005e5 000005e0     ................
  43331c:	000005dc 000005d8 000005d4 000005d0     ................
  43332c:	000005cb 000005c7 000005c3 000005be     ................
  43333c:	000005ba 000005b5 000005b1 000005ad     ................
  43334c:	000005a8 000005a4 0000059f 0000059b     ................
  43335c:	00000597 00000592 0000058e 0000058a     ................
  43336c:	00000586 00000582 0000057e 0000057a     ........~...z...
  43337c:	00000576 00000572 0000056e 0000056a     v...r...n...j...
  43338c:	00000567 00000563 0000055f 0000055c     g...c..._...\...
  43339c:	00000558 00000555 00000551 0000054e     X...U...Q...N...
  4333ac:	0000054a 00000547 00000544 00000540     J...G...D...@...
  4333bc:	0000053d 0000053a 00000536 00000533     =...:...6...3...
  4333cc:	0000052f 0000052c 00000529 00000525     /...,...)...%...
  4333dc:	00000522 0000051e 0000051b 00000517     "...............
  4333ec:	00000514 00000510 0000050d 00000509     ................

004333fc <g_ecgSize>:
  4333fc:	000005b2 0044434c 6c696146 74206465     ....LCD.Failed t
  43340c:	7263206f 65746165 64636c20 73617420     o create lcd tas
  43341c:	000a0d6b 32535041 00000000 6c696146     k...APS2....Fail
  43342c:	74206465 7263206f 65746165 53504120     ed to create APS
  43343c:	73617420 000a0d6b 0000786f 6c696146      task...ox..Fail
  43344c:	74206465 7263206f 65746165 20786f20     ed to create ox 
  43345c:	6b736174 00000a0d 00435452 6c696146     task....RTC.Fail
  43346c:	74206465 7263206f 65746165 43545220     ed to create RTC
  43347c:	73617420 000a0d6b 72616c61 0000006d      task...alarm...
  43348c:	6c696146 74206465 7263206f 65746165     Failed to create
  43349c:	616c6120 74206d72 0d6b7361 0000000a      alarm task.....
  4334ac:	636f7270 00737365 6c696146 74206465     process.Failed t
  4334bc:	7263206f 65746165 6f725020 73736563     o create Process
  4334cc:	73617420 000a0d6b 75323025 25203a20      task...%02u : %
  4334dc:	00753230 414c4120 00204d52 0000324f     02u. ALARM .O2..
  4334ec:	00002d2d 00007325 66666623 20666666     --..%s..#ffffff 
  4334fc:	b481ef20 00002320 3a4d5042 00000000      ... #..BPM:....
  43350c:	66666623 20666666 a781ef20 00002320     #ffffff  ... #..
  43351c:	66666623 20666666 a881ef20 00002320     #ffffff  ... #..
  43352c:	66666623 20666666 b781ef20 00002320     #ffffff  ... #..
  43353c:	66666623 20666666 b881ef20 00002320     #ffffff  ... #..
  43354c:	70617247 72652068 21726f72 00000000     Graph error!....
  43355c:	00006425 63617473 766f206b 6c667265     %d..stack overfl
  43356c:	2520776f 73252078 00000a0d              ow %x %s....

00433578 <sinTable_f32>:
  433578:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
  433588:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
  433598:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
  4335a8:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
  4335b8:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
  4335c8:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
  4335d8:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
  4335e8:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
  4335f8:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
  433608:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
  433618:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
  433628:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
  433638:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
  433648:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
  433658:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
  433668:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
  433678:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
  433688:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
  433698:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
  4336a8:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
  4336b8:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
  4336c8:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
  4336d8:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
  4336e8:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
  4336f8:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
  433708:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
  433718:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
  433728:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
  433738:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
  433748:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
  433758:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
  433768:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
  433778:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
  433788:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
  433798:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
  4337a8:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
  4337b8:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
  4337c8:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
  4337d8:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
  4337e8:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
  4337f8:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
  433808:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
  433818:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
  433828:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
  433838:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
  433848:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
  433858:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
  433868:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
  433878:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
  433888:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
  433898:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
  4338a8:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
  4338b8:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
  4338c8:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
  4338d8:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
  4338e8:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
  4338f8:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
  433908:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
  433918:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
  433928:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
  433938:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
  433948:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
  433958:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
  433968:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
  433978:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
  433988:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
  433998:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
  4339a8:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
  4339b8:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
  4339c8:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
  4339d8:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
  4339e8:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
  4339f8:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
  433a08:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
  433a18:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
  433a28:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
  433a38:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
  433a48:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
  433a58:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
  433a68:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
  433a78:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
  433a88:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
  433a98:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
  433aa8:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
  433ab8:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
  433ac8:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
  433ad8:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
  433ae8:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
  433af8:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
  433b08:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
  433b18:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
  433b28:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
  433b38:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
  433b48:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
  433b58:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
  433b68:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
  433b78:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
  433b88:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
  433b98:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
  433ba8:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
  433bb8:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
  433bc8:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
  433bd8:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
  433be8:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
  433bf8:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
  433c08:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
  433c18:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
  433c28:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
  433c38:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
  433c48:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
  433c58:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
  433c68:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
  433c78:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
  433c88:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
  433c98:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
  433ca8:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
  433cb8:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
  433cc8:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
  433cd8:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
  433ce8:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
  433cf8:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
  433d08:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
  433d18:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
  433d28:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
  433d38:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
  433d48:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
  433d58:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
  433d68:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
  433d78:	80000000                                ....

00433d7c <_global_impure_ptr>:
  433d7c:	204000d8 33323130 37363534 42413938     ..@ 0123456789AB
  433d8c:	46454443 00000000 33323130 37363534     CDEF....01234567
  433d9c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  433dac:	0000296c                                l)..

00433db0 <blanks.7217>:
  433db0:	20202020 20202020 20202020 20202020                     

00433dc0 <zeroes.7218>:
  433dc0:	30303030 30303030 30303030 30303030     0000000000000000
  433dd0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00433de0 <_ctype_>:
  433de0:	20202000 20202020 28282020 20282828     .         ((((( 
  433df0:	20202020 20202020 20202020 20202020                     
  433e00:	10108820 10101010 10101010 10101010      ...............
  433e10:	04040410 04040404 10040404 10101010     ................
  433e20:	41411010 41414141 01010101 01010101     ..AAAAAA........
  433e30:	01010101 01010101 01010101 10101010     ................
  433e40:	42421010 42424242 02020202 02020202     ..BBBBBB........
  433e50:	02020202 02020202 02020202 10101010     ................
  433e60:	00000020 00000000 00000000 00000000      ...............
	...

00433ee4 <_init>:
  433ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  433ee6:	bf00      	nop
  433ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  433eea:	bc08      	pop	{r3}
  433eec:	469e      	mov	lr, r3
  433eee:	4770      	bx	lr

00433ef0 <__init_array_start>:
  433ef0:	00429d5d 	.word	0x00429d5d

00433ef4 <__frame_dummy_init_array_entry>:
  433ef4:	0040018d                                ..@.

00433ef8 <_fini>:
  433ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  433efa:	bf00      	nop
  433efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  433efe:	bc08      	pop	{r3}
  433f00:	469e      	mov	lr, r3
  433f02:	4770      	bx	lr

00433f04 <__fini_array_start>:
  433f04:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <dseg30>:
2040000c:	5ae1 0041 59d5 0041 001f 0000 fc00 0002     .ZA..YA.........
2040001c:	0020 2040                                    .@ 

20400020 <font_dsc>:
20400020:	dce0 0042 df80 0042 dcb8 0042 0000 0000     ..B...B...B.....
20400030:	0000 0202 0000 0000 0000 0000               ............

2040003c <dseg40>:
2040003c:	5ae1 0041 59d5 0041 0029 0000 fb00 0002     .ZA..YA.).......
2040004c:	0050 2040                                   P.@ 

20400050 <font_dsc>:
20400050:	e028 0042 e4b4 0042 e000 0042 0000 0000     (.B...B...B.....
20400060:	0000 0202 0000 0000 0000 0000               ............

2040006c <uxCriticalNesting>:
2040006c:	aaaa aaaa                                   ....

20400070 <font_dsc>:
20400070:	ec20 0042 e748 0042 e720 0042 196c 0043      .B.H.B. .B.l.C.
20400080:	0010 2802 0000 0000 0000 0000               ...(........

2040008c <lv_font_montserrat_14>:
2040008c:	5ae1 0041 59d5 0041 0010 0003 ff00 0001     .ZA..YA.........
2040009c:	0070 2040                                   p.@ 

204000a0 <mem_buf_small>:
204000a0:	c7c4 2040 0010 0000 c7d4 2040 0010 0000     ..@ ......@ ....

204000b0 <_lv_txt_encoded_get_byte_id>:
204000b0:	89f1 0041                                   ..A.

204000b4 <_lv_txt_encoded_get_char_id>:
204000b4:	8a1d 0041                                   ..A.

204000b8 <_lv_txt_encoded_next>:
204000b8:	8899 0041                                   ..A.

204000bc <_lv_txt_encoded_prev>:
204000bc:	8999 0041                                   ..A.

204000c0 <_lv_txt_encoded_size>:
204000c0:	8865 0041                                   e.A.

204000c4 <_lv_txt_get_encoded_length>:
204000c4:	8a49 0041                                   I.A.

204000c8 <g_interrupt_enabled>:
204000c8:	0001 0000                                   ....

204000cc <SystemCoreClock>:
204000cc:	0900 003d                                   ..=.

204000d0 <f_rtt_alarme>:
204000d0:	0001 0000                                   ....

204000d4 <_impure_ptr>:
204000d4:	00d8 2040                                   ..@ 

204000d8 <impure_data>:
204000d8:	0000 0000 03c4 2040 042c 2040 0494 2040     ......@ ,.@ ..@ 
	...
20400180:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400190:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400500 <__malloc_av_>:
	...
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 

20400908 <__malloc_sbrk_base>:
20400908:	ffff ffff                                   ....

2040090c <__malloc_trim_threshold>:
2040090c:	0000 0002                                   ....

20400910 <__atexit_recursive_mutex>:
20400910:	abf0 2043                                   ..C 

20400914 <__global_locale>:
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400954:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400974:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400994:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204009b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204009d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204009f4:	ae51 0042 a7e5 0042 0000 0000 3de0 0043     Q.B...B......=C.
20400a04:	3ddc 0043 1d30 0043 1d30 0043 1d30 0043     .=C.0.C.0.C.0.C.
20400a14:	1d30 0043 1d30 0043 1d30 0043 1d30 0043     0.C.0.C.0.C.0.C.
20400a24:	1d30 0043 1d30 0043 ffff ffff ffff ffff     0.C.0.C.........
20400a34:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20400a5c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
